
cviceni8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d88  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08003f38  08003f38  00013f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004090  08004090  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004090  08004090  00014090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004098  08004098  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004098  08004098  00014098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800409c  0800409c  0001409c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080040a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000000cc  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000140  20000140  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f442  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dc9  00000000  00000000  0002f4e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c50  00000000  00000000  000312b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ba8  00000000  00000000  00031f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024575  00000000  00000000  00032aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d98c  00000000  00000000  0005701d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db960  00000000  00000000  000649a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00140309  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c48  00000000  00000000  0014035c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003f20 	.word	0x08003f20

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08003f20 	.word	0x08003f20

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000590:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000594:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000598:	f003 0301 	and.w	r3, r3, #1
 800059c:	2b00      	cmp	r3, #0
 800059e:	d013      	beq.n	80005c8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005a8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d00b      	beq.n	80005c8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005b0:	e000      	b.n	80005b4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005b2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d0f9      	beq.n	80005b2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005be:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	b2d2      	uxtb	r2, r2
 80005c6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005c8:	687b      	ldr	r3, [r7, #4]
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr

080005d6 <__io_putchar>:
static void MX_GPIO_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */

int __io_putchar(int ch) {
 80005d6:	b580      	push	{r7, lr}
 80005d8:	b082      	sub	sp, #8
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f7ff ffd1 	bl	8000588 <ITM_SendChar>
	return 0;
 80005e6:	2300      	movs	r3, #0
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005f6:	f000 fda5 	bl	8001144 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005fa:	f000 f909 	bl	8000810 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005fe:	f000 f9e9 	bl	80009d4 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8000602:	f000 f9bd 	bl	8000980 <MX_USART3_UART_Init>
	MX_TIM3_Init();
 8000606:	f000 f96d 	bl	80008e4 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim3); //povoleni preruseni casove zakladny
 800060a:	4876      	ldr	r0, [pc, #472]	; (80007e4 <main+0x1f4>)
 800060c:	f001 fde4 	bl	80021d8 <HAL_TIM_Base_Start_IT>
	//
	uint8_t kod_pozadovany[5] = { 7, 9, 3, 2, 12};//{ 7, 9, 3, 2, 12};
 8000610:	4a75      	ldr	r2, [pc, #468]	; (80007e8 <main+0x1f8>)
 8000612:	f107 030c 	add.w	r3, r7, #12
 8000616:	e892 0003 	ldmia.w	r2, {r0, r1}
 800061a:	6018      	str	r0, [r3, #0]
 800061c:	3304      	adds	r3, #4
 800061e:	7019      	strb	r1, [r3, #0]
	uint8_t kod_zadavany[5] = { 0, 0, 0, 0, 0};
 8000620:	4a72      	ldr	r2, [pc, #456]	; (80007ec <main+0x1fc>)
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000628:	6018      	str	r0, [r3, #0]
 800062a:	3304      	adds	r3, #4
 800062c:	7019      	strb	r1, [r3, #0]
	uint8_t pozice = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	77fb      	strb	r3, [r7, #31]
	//uint8_t kod_je_spravny = 0;

	uint32_t cas_vyprseni;
	uint8_t bezi_vyprseni = 0;
 8000632:	2300      	movs	r3, #0
 8000634:	75fb      	strb	r3, [r7, #23]
	uint8_t spravnost = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	75bb      	strb	r3, [r7, #22]
	HAL_Delay(50);
 800063a:	2032      	movs	r0, #50	; 0x32
 800063c:	f000 fdf4 	bl	8001228 <HAL_Delay>
	printf("START \n");
 8000640:	486b      	ldr	r0, [pc, #428]	; (80007f0 <main+0x200>)
 8000642:	f002 fcdf 	bl	8003004 <puts>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		HAL_Delay(250);
 8000646:	20fa      	movs	r0, #250	; 0xfa
 8000648:	f000 fdee 	bl	8001228 <HAL_Delay>
		if (key != -1) {
 800064c:	4b69      	ldr	r3, [pc, #420]	; (80007f4 <main+0x204>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	b25b      	sxtb	r3, r3
 8000652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000656:	f000 809c 	beq.w	8000792 <main+0x1a2>
			//cas pro zadani jeste nevyprsel
			//obsluha tlacitka
			bezi_vyprseni = 1;
 800065a:	2301      	movs	r3, #1
 800065c:	75fb      	strb	r3, [r7, #23]
			printf("zadano: \n");
 800065e:	4866      	ldr	r0, [pc, #408]	; (80007f8 <main+0x208>)
 8000660:	f002 fcd0 	bl	8003004 <puts>
			kod_zadavany[pozice] = key;
 8000664:	4b63      	ldr	r3, [pc, #396]	; (80007f4 <main+0x204>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	b25a      	sxtb	r2, r3
 800066a:	7ffb      	ldrb	r3, [r7, #31]
 800066c:	b2d2      	uxtb	r2, r2
 800066e:	f107 0120 	add.w	r1, r7, #32
 8000672:	440b      	add	r3, r1
 8000674:	f803 2c1c 	strb.w	r2, [r3, #-28]

			if (pozice == 0) {
 8000678:	7ffb      	ldrb	r3, [r7, #31]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d106      	bne.n	800068c <main+0x9c>
				cas_vyprseni = HAL_GetTick() + 15000;
 800067e:	f000 fdc7 	bl	8001210 <HAL_GetTick>
 8000682:	4603      	mov	r3, r0
 8000684:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 8000688:	3318      	adds	r3, #24
 800068a:	61bb      	str	r3, [r7, #24]
			}

			for (uint8_t i = 0; i < 5; i++) { //vytisk dosud zmacknutych tlacitek
 800068c:	2300      	movs	r3, #0
 800068e:	757b      	strb	r3, [r7, #21]
 8000690:	e00c      	b.n	80006ac <main+0xbc>
				printf("%d ", kod_zadavany[i]);
 8000692:	7d7b      	ldrb	r3, [r7, #21]
 8000694:	f107 0220 	add.w	r2, r7, #32
 8000698:	4413      	add	r3, r2
 800069a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800069e:	4619      	mov	r1, r3
 80006a0:	4856      	ldr	r0, [pc, #344]	; (80007fc <main+0x20c>)
 80006a2:	f002 fc13 	bl	8002ecc <iprintf>
			for (uint8_t i = 0; i < 5; i++) { //vytisk dosud zmacknutych tlacitek
 80006a6:	7d7b      	ldrb	r3, [r7, #21]
 80006a8:	3301      	adds	r3, #1
 80006aa:	757b      	strb	r3, [r7, #21]
 80006ac:	7d7b      	ldrb	r3, [r7, #21]
 80006ae:	2b04      	cmp	r3, #4
 80006b0:	d9ef      	bls.n	8000692 <main+0xa2>

			}
			printf("\n");
 80006b2:	200a      	movs	r0, #10
 80006b4:	f002 fc22 	bl	8002efc <putchar>
				} else {
					printf("kod je spatny \n");
				}
			}
*/
			if (key == kod_pozadovany[pozice]) {
 80006b8:	4b4e      	ldr	r3, [pc, #312]	; (80007f4 <main+0x204>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	b25b      	sxtb	r3, r3
 80006be:	461a      	mov	r2, r3
 80006c0:	7ffb      	ldrb	r3, [r7, #31]
 80006c2:	f107 0120 	add.w	r1, r7, #32
 80006c6:	440b      	add	r3, r1
 80006c8:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	d132      	bne.n	8000736 <main+0x146>
				spravnost++;
 80006d0:	7dbb      	ldrb	r3, [r7, #22]
 80006d2:	3301      	adds	r3, #1
 80006d4:	75bb      	strb	r3, [r7, #22]
				if (pozice == 4) {
 80006d6:	7ffb      	ldrb	r3, [r7, #31]
 80006d8:	2b04      	cmp	r3, #4
 80006da:	d13b      	bne.n	8000754 <main+0x164>
					for (uint8_t i = 0; i < 5; ++i)	{
 80006dc:	2300      	movs	r3, #0
 80006de:	753b      	strb	r3, [r7, #20]
 80006e0:	e009      	b.n	80006f6 <main+0x106>
						kod_zadavany[i] = 0;
 80006e2:	7d3b      	ldrb	r3, [r7, #20]
 80006e4:	f107 0220 	add.w	r2, r7, #32
 80006e8:	4413      	add	r3, r2
 80006ea:	2200      	movs	r2, #0
 80006ec:	f803 2c1c 	strb.w	r2, [r3, #-28]
					for (uint8_t i = 0; i < 5; ++i)	{
 80006f0:	7d3b      	ldrb	r3, [r7, #20]
 80006f2:	3301      	adds	r3, #1
 80006f4:	753b      	strb	r3, [r7, #20]
 80006f6:	7d3b      	ldrb	r3, [r7, #20]
 80006f8:	2b04      	cmp	r3, #4
 80006fa:	d9f2      	bls.n	80006e2 <main+0xf2>
					}

					if (spravnost == 5) {
 80006fc:	7dbb      	ldrb	r3, [r7, #22]
 80006fe:	2b05      	cmp	r3, #5
 8000700:	d10c      	bne.n	800071c <main+0x12c>
						spravnost = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	75bb      	strb	r3, [r7, #22]
						bezi_vyprseni = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	75fb      	strb	r3, [r7, #23]
						HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 800070a:	2201      	movs	r2, #1
 800070c:	2101      	movs	r1, #1
 800070e:	483c      	ldr	r0, [pc, #240]	; (8000800 <main+0x210>)
 8000710:	f001 f884 	bl	800181c <HAL_GPIO_WritePin>
						printf("kod je spravny \n");
 8000714:	483b      	ldr	r0, [pc, #236]	; (8000804 <main+0x214>)
 8000716:	f002 fc75 	bl	8003004 <puts>
 800071a:	e01b      	b.n	8000754 <main+0x164>
					} else {
						spravnost = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	75bb      	strb	r3, [r7, #22]
						bezi_vyprseni = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	75fb      	strb	r3, [r7, #23]
						HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000724:	2200      	movs	r2, #0
 8000726:	2101      	movs	r1, #1
 8000728:	4835      	ldr	r0, [pc, #212]	; (8000800 <main+0x210>)
 800072a:	f001 f877 	bl	800181c <HAL_GPIO_WritePin>
						printf("kod je spatny \n");
 800072e:	4836      	ldr	r0, [pc, #216]	; (8000808 <main+0x218>)
 8000730:	f002 fc68 	bl	8003004 <puts>
 8000734:	e00e      	b.n	8000754 <main+0x164>

					}
					//pozice = 0;
				}
			}else if(pozice == 4) {
 8000736:	7ffb      	ldrb	r3, [r7, #31]
 8000738:	2b04      	cmp	r3, #4
 800073a:	d10b      	bne.n	8000754 <main+0x164>
				spravnost = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	75bb      	strb	r3, [r7, #22]
				bezi_vyprseni = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	75fb      	strb	r3, [r7, #23]
				HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	2101      	movs	r1, #1
 8000748:	482d      	ldr	r0, [pc, #180]	; (8000800 <main+0x210>)
 800074a:	f001 f867 	bl	800181c <HAL_GPIO_WritePin>
				printf("kod je spatny \n");
 800074e:	482e      	ldr	r0, [pc, #184]	; (8000808 <main+0x218>)
 8000750:	f002 fc58 	bl	8003004 <puts>
			}

			pozice++;
 8000754:	7ffb      	ldrb	r3, [r7, #31]
 8000756:	3301      	adds	r3, #1
 8000758:	77fb      	strb	r3, [r7, #31]
			if (pozice > 4) { //prepsat zadane hodnoty kdyz je napsana vetsi velikost
 800075a:	7ffb      	ldrb	r3, [r7, #31]
 800075c:	2b04      	cmp	r3, #4
 800075e:	d911      	bls.n	8000784 <main+0x194>
				for (uint8_t i = 0; i < 5; ++i) {
 8000760:	2300      	movs	r3, #0
 8000762:	74fb      	strb	r3, [r7, #19]
 8000764:	e009      	b.n	800077a <main+0x18a>
					kod_zadavany[i] = 0;
 8000766:	7cfb      	ldrb	r3, [r7, #19]
 8000768:	f107 0220 	add.w	r2, r7, #32
 800076c:	4413      	add	r3, r2
 800076e:	2200      	movs	r2, #0
 8000770:	f803 2c1c 	strb.w	r2, [r3, #-28]
				for (uint8_t i = 0; i < 5; ++i) {
 8000774:	7cfb      	ldrb	r3, [r7, #19]
 8000776:	3301      	adds	r3, #1
 8000778:	74fb      	strb	r3, [r7, #19]
 800077a:	7cfb      	ldrb	r3, [r7, #19]
 800077c:	2b04      	cmp	r3, #4
 800077e:	d9f2      	bls.n	8000766 <main+0x176>
				}
				pozice = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	77fb      	strb	r3, [r7, #31]
			}

			HAL_Delay(1000);// kvuli zakmitum tlacitka
 8000784:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000788:	f000 fd4e 	bl	8001228 <HAL_Delay>
			key = -1; //muze byt precteno dalsi tlacitko (minule bylo obslouzeno)
 800078c:	4b19      	ldr	r3, [pc, #100]	; (80007f4 <main+0x204>)
 800078e:	22ff      	movs	r2, #255	; 0xff
 8000790:	701a      	strb	r2, [r3, #0]

		}

		if ((HAL_GetTick() >= cas_vyprseni) && bezi_vyprseni) { //cas pro zadani vyprsel
 8000792:	f000 fd3d 	bl	8001210 <HAL_GetTick>
 8000796:	4602      	mov	r2, r0
 8000798:	69bb      	ldr	r3, [r7, #24]
 800079a:	4293      	cmp	r3, r2
 800079c:	f63f af53 	bhi.w	8000646 <main+0x56>
 80007a0:	7dfb      	ldrb	r3, [r7, #23]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	f43f af4f 	beq.w	8000646 <main+0x56>
			bezi_vyprseni = 0; //
 80007a8:	2300      	movs	r3, #0
 80007aa:	75fb      	strb	r3, [r7, #23]

			for (uint8_t i = 0; i < 5; ++i) {
 80007ac:	2300      	movs	r3, #0
 80007ae:	74bb      	strb	r3, [r7, #18]
 80007b0:	e009      	b.n	80007c6 <main+0x1d6>
				kod_zadavany[i] = 0;
 80007b2:	7cbb      	ldrb	r3, [r7, #18]
 80007b4:	f107 0220 	add.w	r2, r7, #32
 80007b8:	4413      	add	r3, r2
 80007ba:	2200      	movs	r2, #0
 80007bc:	f803 2c1c 	strb.w	r2, [r3, #-28]
			for (uint8_t i = 0; i < 5; ++i) {
 80007c0:	7cbb      	ldrb	r3, [r7, #18]
 80007c2:	3301      	adds	r3, #1
 80007c4:	74bb      	strb	r3, [r7, #18]
 80007c6:	7cbb      	ldrb	r3, [r7, #18]
 80007c8:	2b04      	cmp	r3, #4
 80007ca:	d9f2      	bls.n	80007b2 <main+0x1c2>
			}
			pozice = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	77fb      	strb	r3, [r7, #31]

			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2101      	movs	r1, #1
 80007d4:	480a      	ldr	r0, [pc, #40]	; (8000800 <main+0x210>)
 80007d6:	f001 f821 	bl	800181c <HAL_GPIO_WritePin>

			printf("cas pro zadani kodu vyprsel \n");
 80007da:	480c      	ldr	r0, [pc, #48]	; (800080c <main+0x21c>)
 80007dc:	f002 fc12 	bl	8003004 <puts>
		HAL_Delay(250);
 80007e0:	e731      	b.n	8000646 <main+0x56>
 80007e2:	bf00      	nop
 80007e4:	200000e4 	.word	0x200000e4
 80007e8:	08003f90 	.word	0x08003f90
 80007ec:	08003f98 	.word	0x08003f98
 80007f0:	08003f38 	.word	0x08003f38
 80007f4:	20000000 	.word	0x20000000
 80007f8:	08003f40 	.word	0x08003f40
 80007fc:	08003f4c 	.word	0x08003f4c
 8000800:	40020400 	.word	0x40020400
 8000804:	08003f50 	.word	0x08003f50
 8000808:	08003f60 	.word	0x08003f60
 800080c:	08003f70 	.word	0x08003f70

08000810 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b094      	sub	sp, #80	; 0x50
 8000814:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000816:	f107 0320 	add.w	r3, r7, #32
 800081a:	2230      	movs	r2, #48	; 0x30
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f002 fb4c 	bl	8002ebc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000824:	f107 030c 	add.w	r3, r7, #12
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000834:	2300      	movs	r3, #0
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	4b28      	ldr	r3, [pc, #160]	; (80008dc <SystemClock_Config+0xcc>)
 800083a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083c:	4a27      	ldr	r2, [pc, #156]	; (80008dc <SystemClock_Config+0xcc>)
 800083e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000842:	6413      	str	r3, [r2, #64]	; 0x40
 8000844:	4b25      	ldr	r3, [pc, #148]	; (80008dc <SystemClock_Config+0xcc>)
 8000846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000850:	2300      	movs	r3, #0
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	4b22      	ldr	r3, [pc, #136]	; (80008e0 <SystemClock_Config+0xd0>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a21      	ldr	r2, [pc, #132]	; (80008e0 <SystemClock_Config+0xd0>)
 800085a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800085e:	6013      	str	r3, [r2, #0]
 8000860:	4b1f      	ldr	r3, [pc, #124]	; (80008e0 <SystemClock_Config+0xd0>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800086c:	2301      	movs	r3, #1
 800086e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000870:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000876:	2302      	movs	r3, #2
 8000878:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800087a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800087e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000880:	2304      	movs	r3, #4
 8000882:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000884:	23a8      	movs	r3, #168	; 0xa8
 8000886:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000888:	2302      	movs	r3, #2
 800088a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800088c:	2307      	movs	r3, #7
 800088e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000890:	f107 0320 	add.w	r3, r7, #32
 8000894:	4618      	mov	r0, r3
 8000896:	f000 ffdb 	bl	8001850 <HAL_RCC_OscConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0x94>
		Error_Handler();
 80008a0:	f000 fa9e 	bl	8000de0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80008a4:	230f      	movs	r3, #15
 80008a6:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a8:	2302      	movs	r3, #2
 80008aa:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ac:	2300      	movs	r3, #0
 80008ae:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008b4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ba:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80008bc:	f107 030c 	add.w	r3, r7, #12
 80008c0:	2105      	movs	r1, #5
 80008c2:	4618      	mov	r0, r3
 80008c4:	f001 fa3c 	bl	8001d40 <HAL_RCC_ClockConfig>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <SystemClock_Config+0xc2>
		Error_Handler();
 80008ce:	f000 fa87 	bl	8000de0 <Error_Handler>
	}
}
 80008d2:	bf00      	nop
 80008d4:	3750      	adds	r7, #80	; 0x50
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40007000 	.word	0x40007000

080008e4 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80008ea:	f107 0308 	add.w	r3, r7, #8
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80008f8:	463b      	mov	r3, r7
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000900:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <MX_TIM3_Init+0x94>)
 8000902:	4a1e      	ldr	r2, [pc, #120]	; (800097c <MX_TIM3_Init+0x98>)
 8000904:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 8399;
 8000906:	4b1c      	ldr	r3, [pc, #112]	; (8000978 <MX_TIM3_Init+0x94>)
 8000908:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800090c:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090e:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <MX_TIM3_Init+0x94>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 99;
 8000914:	4b18      	ldr	r3, [pc, #96]	; (8000978 <MX_TIM3_Init+0x94>)
 8000916:	2263      	movs	r2, #99	; 0x63
 8000918:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800091a:	4b17      	ldr	r3, [pc, #92]	; (8000978 <MX_TIM3_Init+0x94>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000920:	4b15      	ldr	r3, [pc, #84]	; (8000978 <MX_TIM3_Init+0x94>)
 8000922:	2280      	movs	r2, #128	; 0x80
 8000924:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000926:	4814      	ldr	r0, [pc, #80]	; (8000978 <MX_TIM3_Init+0x94>)
 8000928:	f001 fc06 	bl	8002138 <HAL_TIM_Base_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_TIM3_Init+0x52>
		Error_Handler();
 8000932:	f000 fa55 	bl	8000de0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000936:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800093a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800093c:	f107 0308 	add.w	r3, r7, #8
 8000940:	4619      	mov	r1, r3
 8000942:	480d      	ldr	r0, [pc, #52]	; (8000978 <MX_TIM3_Init+0x94>)
 8000944:	f001 fdc0 	bl	80024c8 <HAL_TIM_ConfigClockSource>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_TIM3_Init+0x6e>
		Error_Handler();
 800094e:	f000 fa47 	bl	8000de0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000952:	2300      	movs	r3, #0
 8000954:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000956:	2300      	movs	r3, #0
 8000958:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800095a:	463b      	mov	r3, r7
 800095c:	4619      	mov	r1, r3
 800095e:	4806      	ldr	r0, [pc, #24]	; (8000978 <MX_TIM3_Init+0x94>)
 8000960:	f001 ffdc 	bl	800291c <HAL_TIMEx_MasterConfigSynchronization>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_TIM3_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 800096a:	f000 fa39 	bl	8000de0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 800096e:	bf00      	nop
 8000970:	3718      	adds	r7, #24
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	200000e4 	.word	0x200000e4
 800097c:	40000400 	.word	0x40000400

08000980 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000984:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_USART3_UART_Init+0x4c>)
 8000986:	4a12      	ldr	r2, [pc, #72]	; (80009d0 <MX_USART3_UART_Init+0x50>)
 8000988:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <MX_USART3_UART_Init+0x4c>)
 800098c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000990:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_USART3_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <MX_USART3_UART_Init+0x4c>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <MX_USART3_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80009a4:	4b09      	ldr	r3, [pc, #36]	; (80009cc <MX_USART3_UART_Init+0x4c>)
 80009a6:	220c      	movs	r2, #12
 80009a8:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <MX_USART3_UART_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <MX_USART3_UART_Init+0x4c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_USART3_UART_Init+0x4c>)
 80009b8:	f002 f840 	bl	8002a3c <HAL_UART_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 80009c2:	f000 fa0d 	bl	8000de0 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	200000a0 	.word	0x200000a0
 80009d0:	40004800 	.word	0x40004800

080009d4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08e      	sub	sp, #56	; 0x38
 80009d8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80009da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]
 80009e8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	623b      	str	r3, [r7, #32]
 80009ee:	4ba1      	ldr	r3, [pc, #644]	; (8000c74 <MX_GPIO_Init+0x2a0>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4aa0      	ldr	r2, [pc, #640]	; (8000c74 <MX_GPIO_Init+0x2a0>)
 80009f4:	f043 0310 	orr.w	r3, r3, #16
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b9e      	ldr	r3, [pc, #632]	; (8000c74 <MX_GPIO_Init+0x2a0>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0310 	and.w	r3, r3, #16
 8000a02:	623b      	str	r3, [r7, #32]
 8000a04:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	61fb      	str	r3, [r7, #28]
 8000a0a:	4b9a      	ldr	r3, [pc, #616]	; (8000c74 <MX_GPIO_Init+0x2a0>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a99      	ldr	r2, [pc, #612]	; (8000c74 <MX_GPIO_Init+0x2a0>)
 8000a10:	f043 0304 	orr.w	r3, r3, #4
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b97      	ldr	r3, [pc, #604]	; (8000c74 <MX_GPIO_Init+0x2a0>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0304 	and.w	r3, r3, #4
 8000a1e:	61fb      	str	r3, [r7, #28]
 8000a20:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	61bb      	str	r3, [r7, #24]
 8000a26:	4b93      	ldr	r3, [pc, #588]	; (8000c74 <MX_GPIO_Init+0x2a0>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a92      	ldr	r2, [pc, #584]	; (8000c74 <MX_GPIO_Init+0x2a0>)
 8000a2c:	f043 0320 	orr.w	r3, r3, #32
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b90      	ldr	r3, [pc, #576]	; (8000c74 <MX_GPIO_Init+0x2a0>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0320 	and.w	r3, r3, #32
 8000a3a:	61bb      	str	r3, [r7, #24]
 8000a3c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	617b      	str	r3, [r7, #20]
 8000a42:	4b8c      	ldr	r3, [pc, #560]	; (8000c74 <MX_GPIO_Init+0x2a0>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a8b      	ldr	r2, [pc, #556]	; (8000c74 <MX_GPIO_Init+0x2a0>)
 8000a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b89      	ldr	r3, [pc, #548]	; (8000c74 <MX_GPIO_Init+0x2a0>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a56:	617b      	str	r3, [r7, #20]
 8000a58:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	4b85      	ldr	r3, [pc, #532]	; (8000c74 <MX_GPIO_Init+0x2a0>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a84      	ldr	r2, [pc, #528]	; (8000c74 <MX_GPIO_Init+0x2a0>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b82      	ldr	r3, [pc, #520]	; (8000c74 <MX_GPIO_Init+0x2a0>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	4b7e      	ldr	r3, [pc, #504]	; (8000c74 <MX_GPIO_Init+0x2a0>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a7d      	ldr	r2, [pc, #500]	; (8000c74 <MX_GPIO_Init+0x2a0>)
 8000a80:	f043 0302 	orr.w	r3, r3, #2
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b7b      	ldr	r3, [pc, #492]	; (8000c74 <MX_GPIO_Init+0x2a0>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0302 	and.w	r3, r3, #2
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	60bb      	str	r3, [r7, #8]
 8000a96:	4b77      	ldr	r3, [pc, #476]	; (8000c74 <MX_GPIO_Init+0x2a0>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a76      	ldr	r2, [pc, #472]	; (8000c74 <MX_GPIO_Init+0x2a0>)
 8000a9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b74      	ldr	r3, [pc, #464]	; (8000c74 <MX_GPIO_Init+0x2a0>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aaa:	60bb      	str	r3, [r7, #8]
 8000aac:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	4b70      	ldr	r3, [pc, #448]	; (8000c74 <MX_GPIO_Init+0x2a0>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a6f      	ldr	r2, [pc, #444]	; (8000c74 <MX_GPIO_Init+0x2a0>)
 8000ab8:	f043 0308 	orr.w	r3, r3, #8
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b6d      	ldr	r3, [pc, #436]	; (8000c74 <MX_GPIO_Init+0x2a0>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0308 	and.w	r3, r3, #8
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, Row3_Pin | Row4_Pin | Row2_Pin, GPIO_PIN_RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	f44f 7160 	mov.w	r1, #896	; 0x380
 8000ad0:	4869      	ldr	r0, [pc, #420]	; (8000c78 <MX_GPIO_Init+0x2a4>)
 8000ad2:	f000 fea3 	bl	800181c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f244 0181 	movw	r1, #16513	; 0x4081
 8000adc:	4867      	ldr	r0, [pc, #412]	; (8000c7c <MX_GPIO_Init+0x2a8>)
 8000ade:	f000 fe9d 	bl	800181c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, Row1_Pin | USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2142      	movs	r1, #66	; 0x42
 8000ae6:	4866      	ldr	r0, [pc, #408]	; (8000c80 <MX_GPIO_Init+0x2ac>)
 8000ae8:	f000 fe98 	bl	800181c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : Col1_Pin Col4_Pin Col3_Pin Col2_Pin */
	GPIO_InitStruct.Pin = Col1_Pin | Col4_Pin | Col3_Pin | Col2_Pin;
 8000aec:	2378      	movs	r3, #120	; 0x78
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000af4:	2301      	movs	r3, #1
 8000af6:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000af8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000afc:	4619      	mov	r1, r3
 8000afe:	4861      	ldr	r0, [pc, #388]	; (8000c84 <MX_GPIO_Init+0x2b0>)
 8000b00:	f000 fcc8 	bl	8001494 <HAL_GPIO_Init>

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b0a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b0e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b18:	4619      	mov	r1, r3
 8000b1a:	485b      	ldr	r0, [pc, #364]	; (8000c88 <MX_GPIO_Init+0x2b4>)
 8000b1c:	f000 fcba 	bl	8001494 <HAL_GPIO_Init>

	/*Configure GPIO pins : Row3_Pin Row4_Pin Row2_Pin */
	GPIO_InitStruct.Pin = Row3_Pin | Row4_Pin | Row2_Pin;
 8000b20:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b26:	2311      	movs	r3, #17
 8000b28:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b36:	4619      	mov	r1, r3
 8000b38:	484f      	ldr	r0, [pc, #316]	; (8000c78 <MX_GPIO_Init+0x2a4>)
 8000b3a:	f000 fcab 	bl	8001494 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 8000b3e:	2332      	movs	r3, #50	; 0x32
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b42:	2302      	movs	r3, #2
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b4e:	230b      	movs	r3, #11
 8000b50:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b56:	4619      	mov	r1, r3
 8000b58:	484b      	ldr	r0, [pc, #300]	; (8000c88 <MX_GPIO_Init+0x2b4>)
 8000b5a:	f000 fc9b 	bl	8001494 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
 8000b5e:	2386      	movs	r3, #134	; 0x86
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	2302      	movs	r3, #2
 8000b64:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b6e:	230b      	movs	r3, #11
 8000b70:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b76:	4619      	mov	r1, r3
 8000b78:	4844      	ldr	r0, [pc, #272]	; (8000c8c <MX_GPIO_Init+0x2b8>)
 8000b7a:	f000 fc8b 	bl	8001494 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8000b7e:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b84:	2301      	movs	r3, #1
 8000b86:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b94:	4619      	mov	r1, r3
 8000b96:	4839      	ldr	r0, [pc, #228]	; (8000c7c <MX_GPIO_Init+0x2a8>)
 8000b98:	f000 fc7c 	bl	8001494 <HAL_GPIO_Init>

	/*Configure GPIO pin : Row1_Pin */
	GPIO_InitStruct.Pin = Row1_Pin;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000ba0:	2311      	movs	r3, #17
 8000ba2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(Row1_GPIO_Port, &GPIO_InitStruct);
 8000bac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4833      	ldr	r0, [pc, #204]	; (8000c80 <MX_GPIO_Init+0x2ac>)
 8000bb4:	f000 fc6e 	bl	8001494 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_TXD1_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bca:	230b      	movs	r3, #11
 8000bcc:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4829      	ldr	r0, [pc, #164]	; (8000c7c <MX_GPIO_Init+0x2a8>)
 8000bd6:	f000 fc5d 	bl	8001494 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000bda:	2340      	movs	r3, #64	; 0x40
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bde:	2301      	movs	r3, #1
 8000be0:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4823      	ldr	r0, [pc, #140]	; (8000c80 <MX_GPIO_Init+0x2ac>)
 8000bf2:	f000 fc4f 	bl	8001494 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000bf6:	2380      	movs	r3, #128	; 0x80
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c06:	4619      	mov	r1, r3
 8000c08:	481d      	ldr	r0, [pc, #116]	; (8000c80 <MX_GPIO_Init+0x2ac>)
 8000c0a:	f000 fc43 	bl	8001494 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
	GPIO_InitStruct.Pin = USB_SOF_Pin | USB_ID_Pin | USB_DM_Pin | USB_DP_Pin;
 8000c0e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c14:	2302      	movs	r3, #2
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c20:	230a      	movs	r3, #10
 8000c22:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4818      	ldr	r0, [pc, #96]	; (8000c8c <MX_GPIO_Init+0x2b8>)
 8000c2c:	f000 fc32 	bl	8001494 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_VBUS_Pin */
	GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c42:	4619      	mov	r1, r3
 8000c44:	4811      	ldr	r0, [pc, #68]	; (8000c8c <MX_GPIO_Init+0x2b8>)
 8000c46:	f000 fc25 	bl	8001494 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin | RMII_TXD0_Pin;
 8000c4a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	2302      	movs	r3, #2
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c5c:	230b      	movs	r3, #11
 8000c5e:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c64:	4619      	mov	r1, r3
 8000c66:	4806      	ldr	r0, [pc, #24]	; (8000c80 <MX_GPIO_Init+0x2ac>)
 8000c68:	f000 fc14 	bl	8001494 <HAL_GPIO_Init>

}
 8000c6c:	bf00      	nop
 8000c6e:	3738      	adds	r7, #56	; 0x38
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40021400 	.word	0x40021400
 8000c7c:	40020400 	.word	0x40020400
 8000c80:	40021800 	.word	0x40021800
 8000c84:	40021000 	.word	0x40021000
 8000c88:	40020800 	.word	0x40020800
 8000c8c:	40020000 	.word	0x40020000

08000c90 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
//skenovani maticove klavesnice
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
			{ 1, 2, 3, 21 },
			{ 4, 5, 6, 22 },
			{ 7, 8, 9, 23 },
		    {11, 0, 12, 24 },
	};
	if (key == -1) { //kdyz key == -1 precti dalsi klavesu (zvladne detekovat jen jedno zmackle tlacitko
 8000c98:	4b4b      	ldr	r3, [pc, #300]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	b25b      	sxtb	r3, r3
 8000c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ca2:	d142      	bne.n	8000d2a <HAL_TIM_PeriodElapsedCallback+0x9a>
		if (HAL_GPIO_ReadPin(Col1_GPIO_Port, Col1_Pin) == GPIO_PIN_RESET)
 8000ca4:	2108      	movs	r1, #8
 8000ca6:	4849      	ldr	r0, [pc, #292]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000ca8:	f000 fda0 	bl	80017ec <HAL_GPIO_ReadPin>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d108      	bne.n	8000cc4 <HAL_TIM_PeriodElapsedCallback+0x34>
			key = keyboard[row][0];
 8000cb2:	4b47      	ldr	r3, [pc, #284]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a47      	ldr	r2, [pc, #284]	; (8000dd4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000cb8:	011b      	lsls	r3, r3, #4
 8000cba:	4413      	add	r3, r2
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	b25a      	sxtb	r2, r3
 8000cc0:	4b41      	ldr	r3, [pc, #260]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000cc2:	701a      	strb	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(Col2_GPIO_Port, Col2_Pin) == GPIO_PIN_RESET)
 8000cc4:	2140      	movs	r1, #64	; 0x40
 8000cc6:	4841      	ldr	r0, [pc, #260]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000cc8:	f000 fd90 	bl	80017ec <HAL_GPIO_ReadPin>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d109      	bne.n	8000ce6 <HAL_TIM_PeriodElapsedCallback+0x56>
			key = keyboard[row][1];
 8000cd2:	4b3f      	ldr	r3, [pc, #252]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a3f      	ldr	r2, [pc, #252]	; (8000dd4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000cd8:	011b      	lsls	r3, r3, #4
 8000cda:	4413      	add	r3, r2
 8000cdc:	3304      	adds	r3, #4
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	b25a      	sxtb	r2, r3
 8000ce2:	4b39      	ldr	r3, [pc, #228]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000ce4:	701a      	strb	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(Col3_GPIO_Port, Col3_Pin) == GPIO_PIN_RESET)
 8000ce6:	2120      	movs	r1, #32
 8000ce8:	4838      	ldr	r0, [pc, #224]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000cea:	f000 fd7f 	bl	80017ec <HAL_GPIO_ReadPin>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d109      	bne.n	8000d08 <HAL_TIM_PeriodElapsedCallback+0x78>
			key = keyboard[row][2];
 8000cf4:	4b36      	ldr	r3, [pc, #216]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a36      	ldr	r2, [pc, #216]	; (8000dd4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000cfa:	011b      	lsls	r3, r3, #4
 8000cfc:	4413      	add	r3, r2
 8000cfe:	3308      	adds	r3, #8
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	b25a      	sxtb	r2, r3
 8000d04:	4b30      	ldr	r3, [pc, #192]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000d06:	701a      	strb	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(Col4_GPIO_Port, Col4_Pin) == GPIO_PIN_RESET)
 8000d08:	2110      	movs	r1, #16
 8000d0a:	4830      	ldr	r0, [pc, #192]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000d0c:	f000 fd6e 	bl	80017ec <HAL_GPIO_ReadPin>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d109      	bne.n	8000d2a <HAL_TIM_PeriodElapsedCallback+0x9a>
			key = keyboard[row][3];
 8000d16:	4b2e      	ldr	r3, [pc, #184]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a2e      	ldr	r2, [pc, #184]	; (8000dd4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000d1c:	011b      	lsls	r3, r3, #4
 8000d1e:	4413      	add	r3, r2
 8000d20:	330c      	adds	r3, #12
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	b25a      	sxtb	r2, r3
 8000d26:	4b28      	ldr	r3, [pc, #160]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000d28:	701a      	strb	r2, [r3, #0]

// ... atd ...
	}
	HAL_GPIO_WritePin(Row1_GPIO_Port, Row1_Pin, GPIO_PIN_SET);
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	2102      	movs	r1, #2
 8000d2e:	482a      	ldr	r0, [pc, #168]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000d30:	f000 fd74 	bl	800181c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row2_GPIO_Port, Row2_Pin, GPIO_PIN_SET);
 8000d34:	2201      	movs	r2, #1
 8000d36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d3a:	4828      	ldr	r0, [pc, #160]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000d3c:	f000 fd6e 	bl	800181c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row3_GPIO_Port, Row3_Pin, GPIO_PIN_SET);
 8000d40:	2201      	movs	r2, #1
 8000d42:	2180      	movs	r1, #128	; 0x80
 8000d44:	4825      	ldr	r0, [pc, #148]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000d46:	f000 fd69 	bl	800181c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row4_GPIO_Port, Row4_Pin, GPIO_PIN_SET);
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d50:	4822      	ldr	r0, [pc, #136]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000d52:	f000 fd63 	bl	800181c <HAL_GPIO_WritePin>
	switch (row) {
 8000d56:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2b03      	cmp	r3, #3
 8000d5c:	d830      	bhi.n	8000dc0 <HAL_TIM_PeriodElapsedCallback+0x130>
 8000d5e:	a201      	add	r2, pc, #4	; (adr r2, 8000d64 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d64:	08000d75 	.word	0x08000d75
 8000d68:	08000d89 	.word	0x08000d89
 8000d6c:	08000d9b 	.word	0x08000d9b
 8000d70:	08000daf 	.word	0x08000daf
	case 0:
		row = 1;
 8000d74:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(Row2_GPIO_Port, Row2_Pin, GPIO_PIN_RESET);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d80:	4816      	ldr	r0, [pc, #88]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000d82:	f000 fd4b 	bl	800181c <HAL_GPIO_WritePin>
		break;
 8000d86:	e01b      	b.n	8000dc0 <HAL_TIM_PeriodElapsedCallback+0x130>
	case 1:
		row = 2;
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000d8a:	2202      	movs	r2, #2
 8000d8c:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(Row3_GPIO_Port, Row3_Pin, GPIO_PIN_RESET);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2180      	movs	r1, #128	; 0x80
 8000d92:	4812      	ldr	r0, [pc, #72]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000d94:	f000 fd42 	bl	800181c <HAL_GPIO_WritePin>
		break;
 8000d98:	e012      	b.n	8000dc0 <HAL_TIM_PeriodElapsedCallback+0x130>
	case 2:
		row = 3;
 8000d9a:	4b0d      	ldr	r3, [pc, #52]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000d9c:	2203      	movs	r2, #3
 8000d9e:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(Row4_GPIO_Port, Row4_Pin, GPIO_PIN_RESET);
 8000da0:	2200      	movs	r2, #0
 8000da2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000da6:	480d      	ldr	r0, [pc, #52]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000da8:	f000 fd38 	bl	800181c <HAL_GPIO_WritePin>
		break;
 8000dac:	e008      	b.n	8000dc0 <HAL_TIM_PeriodElapsedCallback+0x130>
	case 3:
		row = 0;
 8000dae:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(Row1_GPIO_Port, Row1_Pin, GPIO_PIN_RESET);
 8000db4:	2200      	movs	r2, #0
 8000db6:	2102      	movs	r1, #2
 8000db8:	4807      	ldr	r0, [pc, #28]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000dba:	f000 fd2f 	bl	800181c <HAL_GPIO_WritePin>
		break;
 8000dbe:	bf00      	nop
// ... atd ...
	}
}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000000 	.word	0x20000000
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	20000090 	.word	0x20000090
 8000dd4:	08003fa0 	.word	0x08003fa0
 8000dd8:	40021800 	.word	0x40021800
 8000ddc:	40021400 	.word	0x40021400

08000de0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de4:	b672      	cpsid	i
}
 8000de6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000de8:	e7fe      	b.n	8000de8 <Error_Handler+0x8>
	...

08000dec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <HAL_MspInit+0x4c>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfa:	4a0f      	ldr	r2, [pc, #60]	; (8000e38 <HAL_MspInit+0x4c>)
 8000dfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e00:	6453      	str	r3, [r2, #68]	; 0x44
 8000e02:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <HAL_MspInit+0x4c>)
 8000e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	603b      	str	r3, [r7, #0]
 8000e12:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <HAL_MspInit+0x4c>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e16:	4a08      	ldr	r2, [pc, #32]	; (8000e38 <HAL_MspInit+0x4c>)
 8000e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1e:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_MspInit+0x4c>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e26:	603b      	str	r3, [r7, #0]
 8000e28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	40023800 	.word	0x40023800

08000e3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a0e      	ldr	r2, [pc, #56]	; (8000e84 <HAL_TIM_Base_MspInit+0x48>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d115      	bne.n	8000e7a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	4b0d      	ldr	r3, [pc, #52]	; (8000e88 <HAL_TIM_Base_MspInit+0x4c>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	4a0c      	ldr	r2, [pc, #48]	; (8000e88 <HAL_TIM_Base_MspInit+0x4c>)
 8000e58:	f043 0302 	orr.w	r3, r3, #2
 8000e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5e:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <HAL_TIM_Base_MspInit+0x4c>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	f003 0302 	and.w	r3, r3, #2
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	201d      	movs	r0, #29
 8000e70:	f000 fad9 	bl	8001426 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e74:	201d      	movs	r0, #29
 8000e76:	f000 faf2 	bl	800145e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e7a:	bf00      	nop
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40000400 	.word	0x40000400
 8000e88:	40023800 	.word	0x40023800

08000e8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08a      	sub	sp, #40	; 0x28
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a19      	ldr	r2, [pc, #100]	; (8000f10 <HAL_UART_MspInit+0x84>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d12c      	bne.n	8000f08 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]
 8000eb2:	4b18      	ldr	r3, [pc, #96]	; (8000f14 <HAL_UART_MspInit+0x88>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb6:	4a17      	ldr	r2, [pc, #92]	; (8000f14 <HAL_UART_MspInit+0x88>)
 8000eb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ebe:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <HAL_UART_MspInit+0x88>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ec6:	613b      	str	r3, [r7, #16]
 8000ec8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <HAL_UART_MspInit+0x88>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	4a10      	ldr	r2, [pc, #64]	; (8000f14 <HAL_UART_MspInit+0x88>)
 8000ed4:	f043 0308 	orr.w	r3, r3, #8
 8000ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eda:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <HAL_UART_MspInit+0x88>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	f003 0308 	and.w	r3, r3, #8
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ee6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000eea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eec:	2302      	movs	r3, #2
 8000eee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ef8:	2307      	movs	r3, #7
 8000efa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	4619      	mov	r1, r3
 8000f02:	4805      	ldr	r0, [pc, #20]	; (8000f18 <HAL_UART_MspInit+0x8c>)
 8000f04:	f000 fac6 	bl	8001494 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f08:	bf00      	nop
 8000f0a:	3728      	adds	r7, #40	; 0x28
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40004800 	.word	0x40004800
 8000f14:	40023800 	.word	0x40023800
 8000f18:	40020c00 	.word	0x40020c00

08000f1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <NMI_Handler+0x4>

08000f22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f26:	e7fe      	b.n	8000f26 <HardFault_Handler+0x4>

08000f28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <MemManage_Handler+0x4>

08000f2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <BusFault_Handler+0x4>

08000f34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <UsageFault_Handler+0x4>

08000f3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f68:	f000 f93e 	bl	80011e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f74:	4802      	ldr	r0, [pc, #8]	; (8000f80 <TIM3_IRQHandler+0x10>)
 8000f76:	f001 f99f 	bl	80022b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	200000e4 	.word	0x200000e4

08000f84 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
 8000f94:	e00a      	b.n	8000fac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f96:	f3af 8000 	nop.w
 8000f9a:	4601      	mov	r1, r0
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	1c5a      	adds	r2, r3, #1
 8000fa0:	60ba      	str	r2, [r7, #8]
 8000fa2:	b2ca      	uxtb	r2, r1
 8000fa4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	617b      	str	r3, [r7, #20]
 8000fac:	697a      	ldr	r2, [r7, #20]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	dbf0      	blt.n	8000f96 <_read+0x12>
	}

return len;
 8000fb4:	687b      	ldr	r3, [r7, #4]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3718      	adds	r7, #24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b086      	sub	sp, #24
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	60f8      	str	r0, [r7, #12]
 8000fc6:	60b9      	str	r1, [r7, #8]
 8000fc8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
 8000fce:	e009      	b.n	8000fe4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	1c5a      	adds	r2, r3, #1
 8000fd4:	60ba      	str	r2, [r7, #8]
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fafc 	bl	80005d6 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	697a      	ldr	r2, [r7, #20]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	dbf1      	blt.n	8000fd0 <_write+0x12>
	}
	return len;
 8000fec:	687b      	ldr	r3, [r7, #4]
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <_close>:

int _close(int file)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	b083      	sub	sp, #12
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
	return -1;
 8000ffe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001002:	4618      	mov	r0, r3
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800100e:	b480      	push	{r7}
 8001010:	b083      	sub	sp, #12
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
 8001016:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800101e:	605a      	str	r2, [r3, #4]
	return 0;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <_isatty>:

int _isatty(int file)
{
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
	return 1;
 8001036:	2301      	movs	r3, #1
}
 8001038:	4618      	mov	r0, r3
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
	return 0;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
	...

08001060 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001068:	4a14      	ldr	r2, [pc, #80]	; (80010bc <_sbrk+0x5c>)
 800106a:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <_sbrk+0x60>)
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001074:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <_sbrk+0x64>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d102      	bne.n	8001082 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800107c:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <_sbrk+0x64>)
 800107e:	4a12      	ldr	r2, [pc, #72]	; (80010c8 <_sbrk+0x68>)
 8001080:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <_sbrk+0x64>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4413      	add	r3, r2
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	429a      	cmp	r2, r3
 800108e:	d207      	bcs.n	80010a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001090:	f001 feea 	bl	8002e68 <__errno>
 8001094:	4603      	mov	r3, r0
 8001096:	220c      	movs	r2, #12
 8001098:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800109a:	f04f 33ff 	mov.w	r3, #4294967295
 800109e:	e009      	b.n	80010b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010a0:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <_sbrk+0x64>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010a6:	4b07      	ldr	r3, [pc, #28]	; (80010c4 <_sbrk+0x64>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4413      	add	r3, r2
 80010ae:	4a05      	ldr	r2, [pc, #20]	; (80010c4 <_sbrk+0x64>)
 80010b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010b2:	68fb      	ldr	r3, [r7, #12]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3718      	adds	r7, #24
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20030000 	.word	0x20030000
 80010c0:	00000400 	.word	0x00000400
 80010c4:	20000094 	.word	0x20000094
 80010c8:	20000140 	.word	0x20000140

080010cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <SystemInit+0x20>)
 80010d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010d6:	4a05      	ldr	r2, [pc, #20]	; (80010ec <SystemInit+0x20>)
 80010d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80010f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001128 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010f4:	480d      	ldr	r0, [pc, #52]	; (800112c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010f6:	490e      	ldr	r1, [pc, #56]	; (8001130 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010f8:	4a0e      	ldr	r2, [pc, #56]	; (8001134 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010fc:	e002      	b.n	8001104 <LoopCopyDataInit>

080010fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001100:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001102:	3304      	adds	r3, #4

08001104 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001104:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001106:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001108:	d3f9      	bcc.n	80010fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800110a:	4a0b      	ldr	r2, [pc, #44]	; (8001138 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800110c:	4c0b      	ldr	r4, [pc, #44]	; (800113c <LoopFillZerobss+0x26>)
  movs r3, #0
 800110e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001110:	e001      	b.n	8001116 <LoopFillZerobss>

08001112 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001112:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001114:	3204      	adds	r2, #4

08001116 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001116:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001118:	d3fb      	bcc.n	8001112 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800111a:	f7ff ffd7 	bl	80010cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800111e:	f001 fea9 	bl	8002e74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001122:	f7ff fa65 	bl	80005f0 <main>
  bx  lr    
 8001126:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001128:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800112c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001130:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001134:	080040a0 	.word	0x080040a0
  ldr r2, =_sbss
 8001138:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800113c:	20000140 	.word	0x20000140

08001140 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001140:	e7fe      	b.n	8001140 <ADC_IRQHandler>
	...

08001144 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001148:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <HAL_Init+0x40>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a0d      	ldr	r2, [pc, #52]	; (8001184 <HAL_Init+0x40>)
 800114e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001152:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001154:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <HAL_Init+0x40>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a0a      	ldr	r2, [pc, #40]	; (8001184 <HAL_Init+0x40>)
 800115a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800115e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001160:	4b08      	ldr	r3, [pc, #32]	; (8001184 <HAL_Init+0x40>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a07      	ldr	r2, [pc, #28]	; (8001184 <HAL_Init+0x40>)
 8001166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800116a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800116c:	2003      	movs	r0, #3
 800116e:	f000 f94f 	bl	8001410 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001172:	2000      	movs	r0, #0
 8001174:	f000 f808 	bl	8001188 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001178:	f7ff fe38 	bl	8000dec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40023c00 	.word	0x40023c00

08001188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <HAL_InitTick+0x54>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <HAL_InitTick+0x58>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	4619      	mov	r1, r3
 800119a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800119e:	fbb3 f3f1 	udiv	r3, r3, r1
 80011a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 f967 	bl	800147a <HAL_SYSTICK_Config>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e00e      	b.n	80011d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2b0f      	cmp	r3, #15
 80011ba:	d80a      	bhi.n	80011d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011bc:	2200      	movs	r2, #0
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	f04f 30ff 	mov.w	r0, #4294967295
 80011c4:	f000 f92f 	bl	8001426 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011c8:	4a06      	ldr	r2, [pc, #24]	; (80011e4 <HAL_InitTick+0x5c>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ce:	2300      	movs	r3, #0
 80011d0:	e000      	b.n	80011d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000004 	.word	0x20000004
 80011e0:	2000000c 	.word	0x2000000c
 80011e4:	20000008 	.word	0x20000008

080011e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <HAL_IncTick+0x20>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	461a      	mov	r2, r3
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <HAL_IncTick+0x24>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4413      	add	r3, r2
 80011f8:	4a04      	ldr	r2, [pc, #16]	; (800120c <HAL_IncTick+0x24>)
 80011fa:	6013      	str	r3, [r2, #0]
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	2000000c 	.word	0x2000000c
 800120c:	2000012c 	.word	0x2000012c

08001210 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  return uwTick;
 8001214:	4b03      	ldr	r3, [pc, #12]	; (8001224 <HAL_GetTick+0x14>)
 8001216:	681b      	ldr	r3, [r3, #0]
}
 8001218:	4618      	mov	r0, r3
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	2000012c 	.word	0x2000012c

08001228 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001230:	f7ff ffee 	bl	8001210 <HAL_GetTick>
 8001234:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001240:	d005      	beq.n	800124e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001242:	4b0a      	ldr	r3, [pc, #40]	; (800126c <HAL_Delay+0x44>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	461a      	mov	r2, r3
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	4413      	add	r3, r2
 800124c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800124e:	bf00      	nop
 8001250:	f7ff ffde 	bl	8001210 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	429a      	cmp	r2, r3
 800125e:	d8f7      	bhi.n	8001250 <HAL_Delay+0x28>
  {
  }
}
 8001260:	bf00      	nop
 8001262:	bf00      	nop
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	2000000c 	.word	0x2000000c

08001270 <__NVIC_SetPriorityGrouping>:
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001286:	68ba      	ldr	r2, [r7, #8]
 8001288:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800128c:	4013      	ands	r3, r2
 800128e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001298:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800129c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012a2:	4a04      	ldr	r2, [pc, #16]	; (80012b4 <__NVIC_SetPriorityGrouping+0x44>)
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	60d3      	str	r3, [r2, #12]
}
 80012a8:	bf00      	nop
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <__NVIC_GetPriorityGrouping>:
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012bc:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <__NVIC_GetPriorityGrouping+0x18>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	0a1b      	lsrs	r3, r3, #8
 80012c2:	f003 0307 	and.w	r3, r3, #7
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <__NVIC_EnableIRQ>:
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	db0b      	blt.n	80012fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	f003 021f 	and.w	r2, r3, #31
 80012ec:	4907      	ldr	r1, [pc, #28]	; (800130c <__NVIC_EnableIRQ+0x38>)
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	095b      	lsrs	r3, r3, #5
 80012f4:	2001      	movs	r0, #1
 80012f6:	fa00 f202 	lsl.w	r2, r0, r2
 80012fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	e000e100 	.word	0xe000e100

08001310 <__NVIC_SetPriority>:
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	6039      	str	r1, [r7, #0]
 800131a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001320:	2b00      	cmp	r3, #0
 8001322:	db0a      	blt.n	800133a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	b2da      	uxtb	r2, r3
 8001328:	490c      	ldr	r1, [pc, #48]	; (800135c <__NVIC_SetPriority+0x4c>)
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	0112      	lsls	r2, r2, #4
 8001330:	b2d2      	uxtb	r2, r2
 8001332:	440b      	add	r3, r1
 8001334:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001338:	e00a      	b.n	8001350 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	b2da      	uxtb	r2, r3
 800133e:	4908      	ldr	r1, [pc, #32]	; (8001360 <__NVIC_SetPriority+0x50>)
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	f003 030f 	and.w	r3, r3, #15
 8001346:	3b04      	subs	r3, #4
 8001348:	0112      	lsls	r2, r2, #4
 800134a:	b2d2      	uxtb	r2, r2
 800134c:	440b      	add	r3, r1
 800134e:	761a      	strb	r2, [r3, #24]
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	e000e100 	.word	0xe000e100
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <NVIC_EncodePriority>:
{
 8001364:	b480      	push	{r7}
 8001366:	b089      	sub	sp, #36	; 0x24
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	f1c3 0307 	rsb	r3, r3, #7
 800137e:	2b04      	cmp	r3, #4
 8001380:	bf28      	it	cs
 8001382:	2304      	movcs	r3, #4
 8001384:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3304      	adds	r3, #4
 800138a:	2b06      	cmp	r3, #6
 800138c:	d902      	bls.n	8001394 <NVIC_EncodePriority+0x30>
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	3b03      	subs	r3, #3
 8001392:	e000      	b.n	8001396 <NVIC_EncodePriority+0x32>
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001398:	f04f 32ff 	mov.w	r2, #4294967295
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43da      	mvns	r2, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	401a      	ands	r2, r3
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013ac:	f04f 31ff 	mov.w	r1, #4294967295
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	fa01 f303 	lsl.w	r3, r1, r3
 80013b6:	43d9      	mvns	r1, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013bc:	4313      	orrs	r3, r2
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3724      	adds	r7, #36	; 0x24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
	...

080013cc <SysTick_Config>:
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013dc:	d301      	bcc.n	80013e2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80013de:	2301      	movs	r3, #1
 80013e0:	e00f      	b.n	8001402 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013e2:	4a0a      	ldr	r2, [pc, #40]	; (800140c <SysTick_Config+0x40>)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ea:	210f      	movs	r1, #15
 80013ec:	f04f 30ff 	mov.w	r0, #4294967295
 80013f0:	f7ff ff8e 	bl	8001310 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f4:	4b05      	ldr	r3, [pc, #20]	; (800140c <SysTick_Config+0x40>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013fa:	4b04      	ldr	r3, [pc, #16]	; (800140c <SysTick_Config+0x40>)
 80013fc:	2207      	movs	r2, #7
 80013fe:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	e000e010 	.word	0xe000e010

08001410 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f7ff ff29 	bl	8001270 <__NVIC_SetPriorityGrouping>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001426:	b580      	push	{r7, lr}
 8001428:	b086      	sub	sp, #24
 800142a:	af00      	add	r7, sp, #0
 800142c:	4603      	mov	r3, r0
 800142e:	60b9      	str	r1, [r7, #8]
 8001430:	607a      	str	r2, [r7, #4]
 8001432:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001438:	f7ff ff3e 	bl	80012b8 <__NVIC_GetPriorityGrouping>
 800143c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	68b9      	ldr	r1, [r7, #8]
 8001442:	6978      	ldr	r0, [r7, #20]
 8001444:	f7ff ff8e 	bl	8001364 <NVIC_EncodePriority>
 8001448:	4602      	mov	r2, r0
 800144a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800144e:	4611      	mov	r1, r2
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff ff5d 	bl	8001310 <__NVIC_SetPriority>
}
 8001456:	bf00      	nop
 8001458:	3718      	adds	r7, #24
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af00      	add	r7, sp, #0
 8001464:	4603      	mov	r3, r0
 8001466:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff ff31 	bl	80012d4 <__NVIC_EnableIRQ>
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff ffa2 	bl	80013cc <SysTick_Config>
 8001488:	4603      	mov	r3, r0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001494:	b480      	push	{r7}
 8001496:	b089      	sub	sp, #36	; 0x24
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014a2:	2300      	movs	r3, #0
 80014a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]
 80014ae:	e177      	b.n	80017a0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014b0:	2201      	movs	r2, #1
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	697a      	ldr	r2, [r7, #20]
 80014c0:	4013      	ands	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	f040 8166 	bne.w	800179a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f003 0303 	and.w	r3, r3, #3
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d005      	beq.n	80014e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d130      	bne.n	8001548 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	2203      	movs	r2, #3
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43db      	mvns	r3, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4013      	ands	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	68da      	ldr	r2, [r3, #12]
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	4313      	orrs	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800151c:	2201      	movs	r2, #1
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	091b      	lsrs	r3, r3, #4
 8001532:	f003 0201 	and.w	r2, r3, #1
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	4313      	orrs	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f003 0303 	and.w	r3, r3, #3
 8001550:	2b03      	cmp	r3, #3
 8001552:	d017      	beq.n	8001584 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	2203      	movs	r2, #3
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4013      	ands	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	689a      	ldr	r2, [r3, #8]
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4313      	orrs	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f003 0303 	and.w	r3, r3, #3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d123      	bne.n	80015d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	08da      	lsrs	r2, r3, #3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3208      	adds	r2, #8
 8001598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800159c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	f003 0307 	and.w	r3, r3, #7
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	220f      	movs	r2, #15
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	43db      	mvns	r3, r3
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	4013      	ands	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	691a      	ldr	r2, [r3, #16]
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	08da      	lsrs	r2, r3, #3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	3208      	adds	r2, #8
 80015d2:	69b9      	ldr	r1, [r7, #24]
 80015d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	2203      	movs	r2, #3
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4013      	ands	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f003 0203 	and.w	r2, r3, #3
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	4313      	orrs	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001614:	2b00      	cmp	r3, #0
 8001616:	f000 80c0 	beq.w	800179a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	4b66      	ldr	r3, [pc, #408]	; (80017b8 <HAL_GPIO_Init+0x324>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001622:	4a65      	ldr	r2, [pc, #404]	; (80017b8 <HAL_GPIO_Init+0x324>)
 8001624:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001628:	6453      	str	r3, [r2, #68]	; 0x44
 800162a:	4b63      	ldr	r3, [pc, #396]	; (80017b8 <HAL_GPIO_Init+0x324>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001636:	4a61      	ldr	r2, [pc, #388]	; (80017bc <HAL_GPIO_Init+0x328>)
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	089b      	lsrs	r3, r3, #2
 800163c:	3302      	adds	r3, #2
 800163e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001642:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	f003 0303 	and.w	r3, r3, #3
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	220f      	movs	r2, #15
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43db      	mvns	r3, r3
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4013      	ands	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a58      	ldr	r2, [pc, #352]	; (80017c0 <HAL_GPIO_Init+0x32c>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d037      	beq.n	80016d2 <HAL_GPIO_Init+0x23e>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a57      	ldr	r2, [pc, #348]	; (80017c4 <HAL_GPIO_Init+0x330>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d031      	beq.n	80016ce <HAL_GPIO_Init+0x23a>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a56      	ldr	r2, [pc, #344]	; (80017c8 <HAL_GPIO_Init+0x334>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d02b      	beq.n	80016ca <HAL_GPIO_Init+0x236>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a55      	ldr	r2, [pc, #340]	; (80017cc <HAL_GPIO_Init+0x338>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d025      	beq.n	80016c6 <HAL_GPIO_Init+0x232>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a54      	ldr	r2, [pc, #336]	; (80017d0 <HAL_GPIO_Init+0x33c>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d01f      	beq.n	80016c2 <HAL_GPIO_Init+0x22e>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a53      	ldr	r2, [pc, #332]	; (80017d4 <HAL_GPIO_Init+0x340>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d019      	beq.n	80016be <HAL_GPIO_Init+0x22a>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a52      	ldr	r2, [pc, #328]	; (80017d8 <HAL_GPIO_Init+0x344>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d013      	beq.n	80016ba <HAL_GPIO_Init+0x226>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a51      	ldr	r2, [pc, #324]	; (80017dc <HAL_GPIO_Init+0x348>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d00d      	beq.n	80016b6 <HAL_GPIO_Init+0x222>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a50      	ldr	r2, [pc, #320]	; (80017e0 <HAL_GPIO_Init+0x34c>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d007      	beq.n	80016b2 <HAL_GPIO_Init+0x21e>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a4f      	ldr	r2, [pc, #316]	; (80017e4 <HAL_GPIO_Init+0x350>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d101      	bne.n	80016ae <HAL_GPIO_Init+0x21a>
 80016aa:	2309      	movs	r3, #9
 80016ac:	e012      	b.n	80016d4 <HAL_GPIO_Init+0x240>
 80016ae:	230a      	movs	r3, #10
 80016b0:	e010      	b.n	80016d4 <HAL_GPIO_Init+0x240>
 80016b2:	2308      	movs	r3, #8
 80016b4:	e00e      	b.n	80016d4 <HAL_GPIO_Init+0x240>
 80016b6:	2307      	movs	r3, #7
 80016b8:	e00c      	b.n	80016d4 <HAL_GPIO_Init+0x240>
 80016ba:	2306      	movs	r3, #6
 80016bc:	e00a      	b.n	80016d4 <HAL_GPIO_Init+0x240>
 80016be:	2305      	movs	r3, #5
 80016c0:	e008      	b.n	80016d4 <HAL_GPIO_Init+0x240>
 80016c2:	2304      	movs	r3, #4
 80016c4:	e006      	b.n	80016d4 <HAL_GPIO_Init+0x240>
 80016c6:	2303      	movs	r3, #3
 80016c8:	e004      	b.n	80016d4 <HAL_GPIO_Init+0x240>
 80016ca:	2302      	movs	r3, #2
 80016cc:	e002      	b.n	80016d4 <HAL_GPIO_Init+0x240>
 80016ce:	2301      	movs	r3, #1
 80016d0:	e000      	b.n	80016d4 <HAL_GPIO_Init+0x240>
 80016d2:	2300      	movs	r3, #0
 80016d4:	69fa      	ldr	r2, [r7, #28]
 80016d6:	f002 0203 	and.w	r2, r2, #3
 80016da:	0092      	lsls	r2, r2, #2
 80016dc:	4093      	lsls	r3, r2
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016e4:	4935      	ldr	r1, [pc, #212]	; (80017bc <HAL_GPIO_Init+0x328>)
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	089b      	lsrs	r3, r3, #2
 80016ea:	3302      	adds	r3, #2
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016f2:	4b3d      	ldr	r3, [pc, #244]	; (80017e8 <HAL_GPIO_Init+0x354>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	43db      	mvns	r3, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4013      	ands	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	4313      	orrs	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001716:	4a34      	ldr	r2, [pc, #208]	; (80017e8 <HAL_GPIO_Init+0x354>)
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800171c:	4b32      	ldr	r3, [pc, #200]	; (80017e8 <HAL_GPIO_Init+0x354>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	43db      	mvns	r3, r3
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4013      	ands	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d003      	beq.n	8001740 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	4313      	orrs	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001740:	4a29      	ldr	r2, [pc, #164]	; (80017e8 <HAL_GPIO_Init+0x354>)
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001746:	4b28      	ldr	r3, [pc, #160]	; (80017e8 <HAL_GPIO_Init+0x354>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	43db      	mvns	r3, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4013      	ands	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	4313      	orrs	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800176a:	4a1f      	ldr	r2, [pc, #124]	; (80017e8 <HAL_GPIO_Init+0x354>)
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001770:	4b1d      	ldr	r3, [pc, #116]	; (80017e8 <HAL_GPIO_Init+0x354>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	43db      	mvns	r3, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d003      	beq.n	8001794 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	4313      	orrs	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001794:	4a14      	ldr	r2, [pc, #80]	; (80017e8 <HAL_GPIO_Init+0x354>)
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3301      	adds	r3, #1
 800179e:	61fb      	str	r3, [r7, #28]
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	2b0f      	cmp	r3, #15
 80017a4:	f67f ae84 	bls.w	80014b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017a8:	bf00      	nop
 80017aa:	bf00      	nop
 80017ac:	3724      	adds	r7, #36	; 0x24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40013800 	.word	0x40013800
 80017c0:	40020000 	.word	0x40020000
 80017c4:	40020400 	.word	0x40020400
 80017c8:	40020800 	.word	0x40020800
 80017cc:	40020c00 	.word	0x40020c00
 80017d0:	40021000 	.word	0x40021000
 80017d4:	40021400 	.word	0x40021400
 80017d8:	40021800 	.word	0x40021800
 80017dc:	40021c00 	.word	0x40021c00
 80017e0:	40022000 	.word	0x40022000
 80017e4:	40022400 	.word	0x40022400
 80017e8:	40013c00 	.word	0x40013c00

080017ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	460b      	mov	r3, r1
 80017f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	691a      	ldr	r2, [r3, #16]
 80017fc:	887b      	ldrh	r3, [r7, #2]
 80017fe:	4013      	ands	r3, r2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d002      	beq.n	800180a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001804:	2301      	movs	r3, #1
 8001806:	73fb      	strb	r3, [r7, #15]
 8001808:	e001      	b.n	800180e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800180a:	2300      	movs	r3, #0
 800180c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800180e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	460b      	mov	r3, r1
 8001826:	807b      	strh	r3, [r7, #2]
 8001828:	4613      	mov	r3, r2
 800182a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800182c:	787b      	ldrb	r3, [r7, #1]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001832:	887a      	ldrh	r2, [r7, #2]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001838:	e003      	b.n	8001842 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800183a:	887b      	ldrh	r3, [r7, #2]
 800183c:	041a      	lsls	r2, r3, #16
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	619a      	str	r2, [r3, #24]
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
	...

08001850 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e264      	b.n	8001d2c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b00      	cmp	r3, #0
 800186c:	d075      	beq.n	800195a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800186e:	4ba3      	ldr	r3, [pc, #652]	; (8001afc <HAL_RCC_OscConfig+0x2ac>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f003 030c 	and.w	r3, r3, #12
 8001876:	2b04      	cmp	r3, #4
 8001878:	d00c      	beq.n	8001894 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800187a:	4ba0      	ldr	r3, [pc, #640]	; (8001afc <HAL_RCC_OscConfig+0x2ac>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001882:	2b08      	cmp	r3, #8
 8001884:	d112      	bne.n	80018ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001886:	4b9d      	ldr	r3, [pc, #628]	; (8001afc <HAL_RCC_OscConfig+0x2ac>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800188e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001892:	d10b      	bne.n	80018ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001894:	4b99      	ldr	r3, [pc, #612]	; (8001afc <HAL_RCC_OscConfig+0x2ac>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d05b      	beq.n	8001958 <HAL_RCC_OscConfig+0x108>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d157      	bne.n	8001958 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e23f      	b.n	8001d2c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018b4:	d106      	bne.n	80018c4 <HAL_RCC_OscConfig+0x74>
 80018b6:	4b91      	ldr	r3, [pc, #580]	; (8001afc <HAL_RCC_OscConfig+0x2ac>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a90      	ldr	r2, [pc, #576]	; (8001afc <HAL_RCC_OscConfig+0x2ac>)
 80018bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c0:	6013      	str	r3, [r2, #0]
 80018c2:	e01d      	b.n	8001900 <HAL_RCC_OscConfig+0xb0>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018cc:	d10c      	bne.n	80018e8 <HAL_RCC_OscConfig+0x98>
 80018ce:	4b8b      	ldr	r3, [pc, #556]	; (8001afc <HAL_RCC_OscConfig+0x2ac>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a8a      	ldr	r2, [pc, #552]	; (8001afc <HAL_RCC_OscConfig+0x2ac>)
 80018d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	4b88      	ldr	r3, [pc, #544]	; (8001afc <HAL_RCC_OscConfig+0x2ac>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a87      	ldr	r2, [pc, #540]	; (8001afc <HAL_RCC_OscConfig+0x2ac>)
 80018e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e4:	6013      	str	r3, [r2, #0]
 80018e6:	e00b      	b.n	8001900 <HAL_RCC_OscConfig+0xb0>
 80018e8:	4b84      	ldr	r3, [pc, #528]	; (8001afc <HAL_RCC_OscConfig+0x2ac>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a83      	ldr	r2, [pc, #524]	; (8001afc <HAL_RCC_OscConfig+0x2ac>)
 80018ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018f2:	6013      	str	r3, [r2, #0]
 80018f4:	4b81      	ldr	r3, [pc, #516]	; (8001afc <HAL_RCC_OscConfig+0x2ac>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a80      	ldr	r2, [pc, #512]	; (8001afc <HAL_RCC_OscConfig+0x2ac>)
 80018fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d013      	beq.n	8001930 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001908:	f7ff fc82 	bl	8001210 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001910:	f7ff fc7e 	bl	8001210 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b64      	cmp	r3, #100	; 0x64
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e204      	b.n	8001d2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001922:	4b76      	ldr	r3, [pc, #472]	; (8001afc <HAL_RCC_OscConfig+0x2ac>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d0f0      	beq.n	8001910 <HAL_RCC_OscConfig+0xc0>
 800192e:	e014      	b.n	800195a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001930:	f7ff fc6e 	bl	8001210 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001938:	f7ff fc6a 	bl	8001210 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b64      	cmp	r3, #100	; 0x64
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e1f0      	b.n	8001d2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800194a:	4b6c      	ldr	r3, [pc, #432]	; (8001afc <HAL_RCC_OscConfig+0x2ac>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1f0      	bne.n	8001938 <HAL_RCC_OscConfig+0xe8>
 8001956:	e000      	b.n	800195a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001958:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d063      	beq.n	8001a2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001966:	4b65      	ldr	r3, [pc, #404]	; (8001afc <HAL_RCC_OscConfig+0x2ac>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f003 030c 	and.w	r3, r3, #12
 800196e:	2b00      	cmp	r3, #0
 8001970:	d00b      	beq.n	800198a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001972:	4b62      	ldr	r3, [pc, #392]	; (8001afc <HAL_RCC_OscConfig+0x2ac>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800197a:	2b08      	cmp	r3, #8
 800197c:	d11c      	bne.n	80019b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800197e:	4b5f      	ldr	r3, [pc, #380]	; (8001afc <HAL_RCC_OscConfig+0x2ac>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d116      	bne.n	80019b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800198a:	4b5c      	ldr	r3, [pc, #368]	; (8001afc <HAL_RCC_OscConfig+0x2ac>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d005      	beq.n	80019a2 <HAL_RCC_OscConfig+0x152>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d001      	beq.n	80019a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e1c4      	b.n	8001d2c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a2:	4b56      	ldr	r3, [pc, #344]	; (8001afc <HAL_RCC_OscConfig+0x2ac>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	4952      	ldr	r1, [pc, #328]	; (8001afc <HAL_RCC_OscConfig+0x2ac>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019b6:	e03a      	b.n	8001a2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d020      	beq.n	8001a02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019c0:	4b4f      	ldr	r3, [pc, #316]	; (8001b00 <HAL_RCC_OscConfig+0x2b0>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c6:	f7ff fc23 	bl	8001210 <HAL_GetTick>
 80019ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019cc:	e008      	b.n	80019e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019ce:	f7ff fc1f 	bl	8001210 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e1a5      	b.n	8001d2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e0:	4b46      	ldr	r3, [pc, #280]	; (8001afc <HAL_RCC_OscConfig+0x2ac>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d0f0      	beq.n	80019ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ec:	4b43      	ldr	r3, [pc, #268]	; (8001afc <HAL_RCC_OscConfig+0x2ac>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	4940      	ldr	r1, [pc, #256]	; (8001afc <HAL_RCC_OscConfig+0x2ac>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	600b      	str	r3, [r1, #0]
 8001a00:	e015      	b.n	8001a2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a02:	4b3f      	ldr	r3, [pc, #252]	; (8001b00 <HAL_RCC_OscConfig+0x2b0>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a08:	f7ff fc02 	bl	8001210 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a10:	f7ff fbfe 	bl	8001210 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e184      	b.n	8001d2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a22:	4b36      	ldr	r3, [pc, #216]	; (8001afc <HAL_RCC_OscConfig+0x2ac>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1f0      	bne.n	8001a10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0308 	and.w	r3, r3, #8
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d030      	beq.n	8001a9c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d016      	beq.n	8001a70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a42:	4b30      	ldr	r3, [pc, #192]	; (8001b04 <HAL_RCC_OscConfig+0x2b4>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a48:	f7ff fbe2 	bl	8001210 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a50:	f7ff fbde 	bl	8001210 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e164      	b.n	8001d2c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a62:	4b26      	ldr	r3, [pc, #152]	; (8001afc <HAL_RCC_OscConfig+0x2ac>)
 8001a64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0f0      	beq.n	8001a50 <HAL_RCC_OscConfig+0x200>
 8001a6e:	e015      	b.n	8001a9c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a70:	4b24      	ldr	r3, [pc, #144]	; (8001b04 <HAL_RCC_OscConfig+0x2b4>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a76:	f7ff fbcb 	bl	8001210 <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a7e:	f7ff fbc7 	bl	8001210 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e14d      	b.n	8001d2c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a90:	4b1a      	ldr	r3, [pc, #104]	; (8001afc <HAL_RCC_OscConfig+0x2ac>)
 8001a92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1f0      	bne.n	8001a7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f000 80a0 	beq.w	8001bea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aae:	4b13      	ldr	r3, [pc, #76]	; (8001afc <HAL_RCC_OscConfig+0x2ac>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10f      	bne.n	8001ada <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	4b0f      	ldr	r3, [pc, #60]	; (8001afc <HAL_RCC_OscConfig+0x2ac>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	4a0e      	ldr	r2, [pc, #56]	; (8001afc <HAL_RCC_OscConfig+0x2ac>)
 8001ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aca:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <HAL_RCC_OscConfig+0x2ac>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ada:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <HAL_RCC_OscConfig+0x2b8>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d121      	bne.n	8001b2a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ae6:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <HAL_RCC_OscConfig+0x2b8>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a07      	ldr	r2, [pc, #28]	; (8001b08 <HAL_RCC_OscConfig+0x2b8>)
 8001aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001af2:	f7ff fb8d 	bl	8001210 <HAL_GetTick>
 8001af6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af8:	e011      	b.n	8001b1e <HAL_RCC_OscConfig+0x2ce>
 8001afa:	bf00      	nop
 8001afc:	40023800 	.word	0x40023800
 8001b00:	42470000 	.word	0x42470000
 8001b04:	42470e80 	.word	0x42470e80
 8001b08:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b0c:	f7ff fb80 	bl	8001210 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e106      	b.n	8001d2c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1e:	4b85      	ldr	r3, [pc, #532]	; (8001d34 <HAL_RCC_OscConfig+0x4e4>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d0f0      	beq.n	8001b0c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d106      	bne.n	8001b40 <HAL_RCC_OscConfig+0x2f0>
 8001b32:	4b81      	ldr	r3, [pc, #516]	; (8001d38 <HAL_RCC_OscConfig+0x4e8>)
 8001b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b36:	4a80      	ldr	r2, [pc, #512]	; (8001d38 <HAL_RCC_OscConfig+0x4e8>)
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b3e:	e01c      	b.n	8001b7a <HAL_RCC_OscConfig+0x32a>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	2b05      	cmp	r3, #5
 8001b46:	d10c      	bne.n	8001b62 <HAL_RCC_OscConfig+0x312>
 8001b48:	4b7b      	ldr	r3, [pc, #492]	; (8001d38 <HAL_RCC_OscConfig+0x4e8>)
 8001b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b4c:	4a7a      	ldr	r2, [pc, #488]	; (8001d38 <HAL_RCC_OscConfig+0x4e8>)
 8001b4e:	f043 0304 	orr.w	r3, r3, #4
 8001b52:	6713      	str	r3, [r2, #112]	; 0x70
 8001b54:	4b78      	ldr	r3, [pc, #480]	; (8001d38 <HAL_RCC_OscConfig+0x4e8>)
 8001b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b58:	4a77      	ldr	r2, [pc, #476]	; (8001d38 <HAL_RCC_OscConfig+0x4e8>)
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b60:	e00b      	b.n	8001b7a <HAL_RCC_OscConfig+0x32a>
 8001b62:	4b75      	ldr	r3, [pc, #468]	; (8001d38 <HAL_RCC_OscConfig+0x4e8>)
 8001b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b66:	4a74      	ldr	r2, [pc, #464]	; (8001d38 <HAL_RCC_OscConfig+0x4e8>)
 8001b68:	f023 0301 	bic.w	r3, r3, #1
 8001b6c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b6e:	4b72      	ldr	r3, [pc, #456]	; (8001d38 <HAL_RCC_OscConfig+0x4e8>)
 8001b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b72:	4a71      	ldr	r2, [pc, #452]	; (8001d38 <HAL_RCC_OscConfig+0x4e8>)
 8001b74:	f023 0304 	bic.w	r3, r3, #4
 8001b78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d015      	beq.n	8001bae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b82:	f7ff fb45 	bl	8001210 <HAL_GetTick>
 8001b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b88:	e00a      	b.n	8001ba0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b8a:	f7ff fb41 	bl	8001210 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e0c5      	b.n	8001d2c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba0:	4b65      	ldr	r3, [pc, #404]	; (8001d38 <HAL_RCC_OscConfig+0x4e8>)
 8001ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d0ee      	beq.n	8001b8a <HAL_RCC_OscConfig+0x33a>
 8001bac:	e014      	b.n	8001bd8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bae:	f7ff fb2f 	bl	8001210 <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb4:	e00a      	b.n	8001bcc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bb6:	f7ff fb2b 	bl	8001210 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e0af      	b.n	8001d2c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bcc:	4b5a      	ldr	r3, [pc, #360]	; (8001d38 <HAL_RCC_OscConfig+0x4e8>)
 8001bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d1ee      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bd8:	7dfb      	ldrb	r3, [r7, #23]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d105      	bne.n	8001bea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bde:	4b56      	ldr	r3, [pc, #344]	; (8001d38 <HAL_RCC_OscConfig+0x4e8>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	4a55      	ldr	r2, [pc, #340]	; (8001d38 <HAL_RCC_OscConfig+0x4e8>)
 8001be4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001be8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f000 809b 	beq.w	8001d2a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bf4:	4b50      	ldr	r3, [pc, #320]	; (8001d38 <HAL_RCC_OscConfig+0x4e8>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 030c 	and.w	r3, r3, #12
 8001bfc:	2b08      	cmp	r3, #8
 8001bfe:	d05c      	beq.n	8001cba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d141      	bne.n	8001c8c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c08:	4b4c      	ldr	r3, [pc, #304]	; (8001d3c <HAL_RCC_OscConfig+0x4ec>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0e:	f7ff faff 	bl	8001210 <HAL_GetTick>
 8001c12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c14:	e008      	b.n	8001c28 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c16:	f7ff fafb 	bl	8001210 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e081      	b.n	8001d2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c28:	4b43      	ldr	r3, [pc, #268]	; (8001d38 <HAL_RCC_OscConfig+0x4e8>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1f0      	bne.n	8001c16 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	69da      	ldr	r2, [r3, #28]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a1b      	ldr	r3, [r3, #32]
 8001c3c:	431a      	orrs	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c42:	019b      	lsls	r3, r3, #6
 8001c44:	431a      	orrs	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4a:	085b      	lsrs	r3, r3, #1
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	041b      	lsls	r3, r3, #16
 8001c50:	431a      	orrs	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c56:	061b      	lsls	r3, r3, #24
 8001c58:	4937      	ldr	r1, [pc, #220]	; (8001d38 <HAL_RCC_OscConfig+0x4e8>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c5e:	4b37      	ldr	r3, [pc, #220]	; (8001d3c <HAL_RCC_OscConfig+0x4ec>)
 8001c60:	2201      	movs	r2, #1
 8001c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c64:	f7ff fad4 	bl	8001210 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c6c:	f7ff fad0 	bl	8001210 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e056      	b.n	8001d2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c7e:	4b2e      	ldr	r3, [pc, #184]	; (8001d38 <HAL_RCC_OscConfig+0x4e8>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d0f0      	beq.n	8001c6c <HAL_RCC_OscConfig+0x41c>
 8001c8a:	e04e      	b.n	8001d2a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c8c:	4b2b      	ldr	r3, [pc, #172]	; (8001d3c <HAL_RCC_OscConfig+0x4ec>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c92:	f7ff fabd 	bl	8001210 <HAL_GetTick>
 8001c96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c98:	e008      	b.n	8001cac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c9a:	f7ff fab9 	bl	8001210 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e03f      	b.n	8001d2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cac:	4b22      	ldr	r3, [pc, #136]	; (8001d38 <HAL_RCC_OscConfig+0x4e8>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1f0      	bne.n	8001c9a <HAL_RCC_OscConfig+0x44a>
 8001cb8:	e037      	b.n	8001d2a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d101      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e032      	b.n	8001d2c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cc6:	4b1c      	ldr	r3, [pc, #112]	; (8001d38 <HAL_RCC_OscConfig+0x4e8>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d028      	beq.n	8001d26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d121      	bne.n	8001d26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d11a      	bne.n	8001d26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cfc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d111      	bne.n	8001d26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0c:	085b      	lsrs	r3, r3, #1
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d107      	bne.n	8001d26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d20:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d001      	beq.n	8001d2a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e000      	b.n	8001d2c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40007000 	.word	0x40007000
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	42470060 	.word	0x42470060

08001d40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e0cc      	b.n	8001eee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d54:	4b68      	ldr	r3, [pc, #416]	; (8001ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 030f 	and.w	r3, r3, #15
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d90c      	bls.n	8001d7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d62:	4b65      	ldr	r3, [pc, #404]	; (8001ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6a:	4b63      	ldr	r3, [pc, #396]	; (8001ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d001      	beq.n	8001d7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e0b8      	b.n	8001eee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d020      	beq.n	8001dca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d005      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d94:	4b59      	ldr	r3, [pc, #356]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	4a58      	ldr	r2, [pc, #352]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001d9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0308 	and.w	r3, r3, #8
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d005      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dac:	4b53      	ldr	r3, [pc, #332]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	4a52      	ldr	r2, [pc, #328]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001db2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001db6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001db8:	4b50      	ldr	r3, [pc, #320]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	494d      	ldr	r1, [pc, #308]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d044      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d107      	bne.n	8001dee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dde:	4b47      	ldr	r3, [pc, #284]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d119      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e07f      	b.n	8001eee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d003      	beq.n	8001dfe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dfa:	2b03      	cmp	r3, #3
 8001dfc:	d107      	bne.n	8001e0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dfe:	4b3f      	ldr	r3, [pc, #252]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d109      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e06f      	b.n	8001eee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e0e:	4b3b      	ldr	r3, [pc, #236]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e067      	b.n	8001eee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e1e:	4b37      	ldr	r3, [pc, #220]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f023 0203 	bic.w	r2, r3, #3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	4934      	ldr	r1, [pc, #208]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e30:	f7ff f9ee 	bl	8001210 <HAL_GetTick>
 8001e34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e36:	e00a      	b.n	8001e4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e38:	f7ff f9ea 	bl	8001210 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e04f      	b.n	8001eee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4e:	4b2b      	ldr	r3, [pc, #172]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 020c 	and.w	r2, r3, #12
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d1eb      	bne.n	8001e38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e60:	4b25      	ldr	r3, [pc, #148]	; (8001ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 030f 	and.w	r3, r3, #15
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d20c      	bcs.n	8001e88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e6e:	4b22      	ldr	r3, [pc, #136]	; (8001ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e76:	4b20      	ldr	r3, [pc, #128]	; (8001ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 030f 	and.w	r3, r3, #15
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d001      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e032      	b.n	8001eee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d008      	beq.n	8001ea6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e94:	4b19      	ldr	r3, [pc, #100]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	4916      	ldr	r1, [pc, #88]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0308 	and.w	r3, r3, #8
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d009      	beq.n	8001ec6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eb2:	4b12      	ldr	r3, [pc, #72]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	490e      	ldr	r1, [pc, #56]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ec6:	f000 f821 	bl	8001f0c <HAL_RCC_GetSysClockFreq>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	091b      	lsrs	r3, r3, #4
 8001ed2:	f003 030f 	and.w	r3, r3, #15
 8001ed6:	490a      	ldr	r1, [pc, #40]	; (8001f00 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed8:	5ccb      	ldrb	r3, [r1, r3]
 8001eda:	fa22 f303 	lsr.w	r3, r2, r3
 8001ede:	4a09      	ldr	r2, [pc, #36]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ee2:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <HAL_RCC_ClockConfig+0x1c8>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff f94e 	bl	8001188 <HAL_InitTick>

  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40023c00 	.word	0x40023c00
 8001efc:	40023800 	.word	0x40023800
 8001f00:	08003fe0 	.word	0x08003fe0
 8001f04:	20000004 	.word	0x20000004
 8001f08:	20000008 	.word	0x20000008

08001f0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f0c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f10:	b084      	sub	sp, #16
 8001f12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f14:	2300      	movs	r3, #0
 8001f16:	607b      	str	r3, [r7, #4]
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f24:	4b67      	ldr	r3, [pc, #412]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f003 030c 	and.w	r3, r3, #12
 8001f2c:	2b08      	cmp	r3, #8
 8001f2e:	d00d      	beq.n	8001f4c <HAL_RCC_GetSysClockFreq+0x40>
 8001f30:	2b08      	cmp	r3, #8
 8001f32:	f200 80bd 	bhi.w	80020b0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d002      	beq.n	8001f40 <HAL_RCC_GetSysClockFreq+0x34>
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	d003      	beq.n	8001f46 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f3e:	e0b7      	b.n	80020b0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f40:	4b61      	ldr	r3, [pc, #388]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001f42:	60bb      	str	r3, [r7, #8]
       break;
 8001f44:	e0b7      	b.n	80020b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f46:	4b61      	ldr	r3, [pc, #388]	; (80020cc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001f48:	60bb      	str	r3, [r7, #8]
      break;
 8001f4a:	e0b4      	b.n	80020b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f4c:	4b5d      	ldr	r3, [pc, #372]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f54:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f56:	4b5b      	ldr	r3, [pc, #364]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d04d      	beq.n	8001ffe <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f62:	4b58      	ldr	r3, [pc, #352]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	099b      	lsrs	r3, r3, #6
 8001f68:	461a      	mov	r2, r3
 8001f6a:	f04f 0300 	mov.w	r3, #0
 8001f6e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001f72:	f04f 0100 	mov.w	r1, #0
 8001f76:	ea02 0800 	and.w	r8, r2, r0
 8001f7a:	ea03 0901 	and.w	r9, r3, r1
 8001f7e:	4640      	mov	r0, r8
 8001f80:	4649      	mov	r1, r9
 8001f82:	f04f 0200 	mov.w	r2, #0
 8001f86:	f04f 0300 	mov.w	r3, #0
 8001f8a:	014b      	lsls	r3, r1, #5
 8001f8c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f90:	0142      	lsls	r2, r0, #5
 8001f92:	4610      	mov	r0, r2
 8001f94:	4619      	mov	r1, r3
 8001f96:	ebb0 0008 	subs.w	r0, r0, r8
 8001f9a:	eb61 0109 	sbc.w	r1, r1, r9
 8001f9e:	f04f 0200 	mov.w	r2, #0
 8001fa2:	f04f 0300 	mov.w	r3, #0
 8001fa6:	018b      	lsls	r3, r1, #6
 8001fa8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001fac:	0182      	lsls	r2, r0, #6
 8001fae:	1a12      	subs	r2, r2, r0
 8001fb0:	eb63 0301 	sbc.w	r3, r3, r1
 8001fb4:	f04f 0000 	mov.w	r0, #0
 8001fb8:	f04f 0100 	mov.w	r1, #0
 8001fbc:	00d9      	lsls	r1, r3, #3
 8001fbe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001fc2:	00d0      	lsls	r0, r2, #3
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	eb12 0208 	adds.w	r2, r2, r8
 8001fcc:	eb43 0309 	adc.w	r3, r3, r9
 8001fd0:	f04f 0000 	mov.w	r0, #0
 8001fd4:	f04f 0100 	mov.w	r1, #0
 8001fd8:	0259      	lsls	r1, r3, #9
 8001fda:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001fde:	0250      	lsls	r0, r2, #9
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4610      	mov	r0, r2
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	461a      	mov	r2, r3
 8001fec:	f04f 0300 	mov.w	r3, #0
 8001ff0:	f7fe f94e 	bl	8000290 <__aeabi_uldivmod>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	e04a      	b.n	8002094 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ffe:	4b31      	ldr	r3, [pc, #196]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	099b      	lsrs	r3, r3, #6
 8002004:	461a      	mov	r2, r3
 8002006:	f04f 0300 	mov.w	r3, #0
 800200a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800200e:	f04f 0100 	mov.w	r1, #0
 8002012:	ea02 0400 	and.w	r4, r2, r0
 8002016:	ea03 0501 	and.w	r5, r3, r1
 800201a:	4620      	mov	r0, r4
 800201c:	4629      	mov	r1, r5
 800201e:	f04f 0200 	mov.w	r2, #0
 8002022:	f04f 0300 	mov.w	r3, #0
 8002026:	014b      	lsls	r3, r1, #5
 8002028:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800202c:	0142      	lsls	r2, r0, #5
 800202e:	4610      	mov	r0, r2
 8002030:	4619      	mov	r1, r3
 8002032:	1b00      	subs	r0, r0, r4
 8002034:	eb61 0105 	sbc.w	r1, r1, r5
 8002038:	f04f 0200 	mov.w	r2, #0
 800203c:	f04f 0300 	mov.w	r3, #0
 8002040:	018b      	lsls	r3, r1, #6
 8002042:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002046:	0182      	lsls	r2, r0, #6
 8002048:	1a12      	subs	r2, r2, r0
 800204a:	eb63 0301 	sbc.w	r3, r3, r1
 800204e:	f04f 0000 	mov.w	r0, #0
 8002052:	f04f 0100 	mov.w	r1, #0
 8002056:	00d9      	lsls	r1, r3, #3
 8002058:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800205c:	00d0      	lsls	r0, r2, #3
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
 8002062:	1912      	adds	r2, r2, r4
 8002064:	eb45 0303 	adc.w	r3, r5, r3
 8002068:	f04f 0000 	mov.w	r0, #0
 800206c:	f04f 0100 	mov.w	r1, #0
 8002070:	0299      	lsls	r1, r3, #10
 8002072:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002076:	0290      	lsls	r0, r2, #10
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	4610      	mov	r0, r2
 800207e:	4619      	mov	r1, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	461a      	mov	r2, r3
 8002084:	f04f 0300 	mov.w	r3, #0
 8002088:	f7fe f902 	bl	8000290 <__aeabi_uldivmod>
 800208c:	4602      	mov	r2, r0
 800208e:	460b      	mov	r3, r1
 8002090:	4613      	mov	r3, r2
 8002092:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002094:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	0c1b      	lsrs	r3, r3, #16
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	3301      	adds	r3, #1
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ac:	60bb      	str	r3, [r7, #8]
      break;
 80020ae:	e002      	b.n	80020b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020b0:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80020b2:	60bb      	str	r3, [r7, #8]
      break;
 80020b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020b6:	68bb      	ldr	r3, [r7, #8]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80020c2:	bf00      	nop
 80020c4:	40023800 	.word	0x40023800
 80020c8:	00f42400 	.word	0x00f42400
 80020cc:	007a1200 	.word	0x007a1200

080020d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020d4:	4b03      	ldr	r3, [pc, #12]	; (80020e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80020d6:	681b      	ldr	r3, [r3, #0]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	20000004 	.word	0x20000004

080020e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020ec:	f7ff fff0 	bl	80020d0 <HAL_RCC_GetHCLKFreq>
 80020f0:	4602      	mov	r2, r0
 80020f2:	4b05      	ldr	r3, [pc, #20]	; (8002108 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	0a9b      	lsrs	r3, r3, #10
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	4903      	ldr	r1, [pc, #12]	; (800210c <HAL_RCC_GetPCLK1Freq+0x24>)
 80020fe:	5ccb      	ldrb	r3, [r1, r3]
 8002100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002104:	4618      	mov	r0, r3
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40023800 	.word	0x40023800
 800210c:	08003ff0 	.word	0x08003ff0

08002110 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002114:	f7ff ffdc 	bl	80020d0 <HAL_RCC_GetHCLKFreq>
 8002118:	4602      	mov	r2, r0
 800211a:	4b05      	ldr	r3, [pc, #20]	; (8002130 <HAL_RCC_GetPCLK2Freq+0x20>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	0b5b      	lsrs	r3, r3, #13
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	4903      	ldr	r1, [pc, #12]	; (8002134 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002126:	5ccb      	ldrb	r3, [r1, r3]
 8002128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800212c:	4618      	mov	r0, r3
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40023800 	.word	0x40023800
 8002134:	08003ff0 	.word	0x08003ff0

08002138 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e041      	b.n	80021ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d106      	bne.n	8002164 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7fe fe6c 	bl	8000e3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2202      	movs	r2, #2
 8002168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	3304      	adds	r3, #4
 8002174:	4619      	mov	r1, r3
 8002176:	4610      	mov	r0, r2
 8002178:	f000 fa96 	bl	80026a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
	...

080021d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d001      	beq.n	80021f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e04e      	b.n	800228e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2202      	movs	r2, #2
 80021f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68da      	ldr	r2, [r3, #12]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f042 0201 	orr.w	r2, r2, #1
 8002206:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a23      	ldr	r2, [pc, #140]	; (800229c <HAL_TIM_Base_Start_IT+0xc4>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d022      	beq.n	8002258 <HAL_TIM_Base_Start_IT+0x80>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800221a:	d01d      	beq.n	8002258 <HAL_TIM_Base_Start_IT+0x80>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a1f      	ldr	r2, [pc, #124]	; (80022a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d018      	beq.n	8002258 <HAL_TIM_Base_Start_IT+0x80>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a1e      	ldr	r2, [pc, #120]	; (80022a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d013      	beq.n	8002258 <HAL_TIM_Base_Start_IT+0x80>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a1c      	ldr	r2, [pc, #112]	; (80022a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d00e      	beq.n	8002258 <HAL_TIM_Base_Start_IT+0x80>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a1b      	ldr	r2, [pc, #108]	; (80022ac <HAL_TIM_Base_Start_IT+0xd4>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d009      	beq.n	8002258 <HAL_TIM_Base_Start_IT+0x80>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a19      	ldr	r2, [pc, #100]	; (80022b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d004      	beq.n	8002258 <HAL_TIM_Base_Start_IT+0x80>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a18      	ldr	r2, [pc, #96]	; (80022b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d111      	bne.n	800227c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2b06      	cmp	r3, #6
 8002268:	d010      	beq.n	800228c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f042 0201 	orr.w	r2, r2, #1
 8002278:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800227a:	e007      	b.n	800228c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f042 0201 	orr.w	r2, r2, #1
 800228a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3714      	adds	r7, #20
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	40010000 	.word	0x40010000
 80022a0:	40000400 	.word	0x40000400
 80022a4:	40000800 	.word	0x40000800
 80022a8:	40000c00 	.word	0x40000c00
 80022ac:	40010400 	.word	0x40010400
 80022b0:	40014000 	.word	0x40014000
 80022b4:	40001800 	.word	0x40001800

080022b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d122      	bne.n	8002314 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d11b      	bne.n	8002314 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f06f 0202 	mvn.w	r2, #2
 80022e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	f003 0303 	and.w	r3, r3, #3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 f9b5 	bl	800266a <HAL_TIM_IC_CaptureCallback>
 8002300:	e005      	b.n	800230e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f9a7 	bl	8002656 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 f9b8 	bl	800267e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	f003 0304 	and.w	r3, r3, #4
 800231e:	2b04      	cmp	r3, #4
 8002320:	d122      	bne.n	8002368 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	2b04      	cmp	r3, #4
 800232e:	d11b      	bne.n	8002368 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f06f 0204 	mvn.w	r2, #4
 8002338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2202      	movs	r2, #2
 800233e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 f98b 	bl	800266a <HAL_TIM_IC_CaptureCallback>
 8002354:	e005      	b.n	8002362 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 f97d 	bl	8002656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f000 f98e 	bl	800267e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	f003 0308 	and.w	r3, r3, #8
 8002372:	2b08      	cmp	r3, #8
 8002374:	d122      	bne.n	80023bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	f003 0308 	and.w	r3, r3, #8
 8002380:	2b08      	cmp	r3, #8
 8002382:	d11b      	bne.n	80023bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f06f 0208 	mvn.w	r2, #8
 800238c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2204      	movs	r2, #4
 8002392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	f003 0303 	and.w	r3, r3, #3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 f961 	bl	800266a <HAL_TIM_IC_CaptureCallback>
 80023a8:	e005      	b.n	80023b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 f953 	bl	8002656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 f964 	bl	800267e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	f003 0310 	and.w	r3, r3, #16
 80023c6:	2b10      	cmp	r3, #16
 80023c8:	d122      	bne.n	8002410 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	f003 0310 	and.w	r3, r3, #16
 80023d4:	2b10      	cmp	r3, #16
 80023d6:	d11b      	bne.n	8002410 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f06f 0210 	mvn.w	r2, #16
 80023e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2208      	movs	r2, #8
 80023e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f937 	bl	800266a <HAL_TIM_IC_CaptureCallback>
 80023fc:	e005      	b.n	800240a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 f929 	bl	8002656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f000 f93a 	bl	800267e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b01      	cmp	r3, #1
 800241c:	d10e      	bne.n	800243c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	2b01      	cmp	r3, #1
 800242a:	d107      	bne.n	800243c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f06f 0201 	mvn.w	r2, #1
 8002434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7fe fc2a 	bl	8000c90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002446:	2b80      	cmp	r3, #128	; 0x80
 8002448:	d10e      	bne.n	8002468 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002454:	2b80      	cmp	r3, #128	; 0x80
 8002456:	d107      	bne.n	8002468 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 fae0 	bl	8002a28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002472:	2b40      	cmp	r3, #64	; 0x40
 8002474:	d10e      	bne.n	8002494 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002480:	2b40      	cmp	r3, #64	; 0x40
 8002482:	d107      	bne.n	8002494 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800248c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f8ff 	bl	8002692 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	f003 0320 	and.w	r3, r3, #32
 800249e:	2b20      	cmp	r3, #32
 80024a0:	d10e      	bne.n	80024c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	f003 0320 	and.w	r3, r3, #32
 80024ac:	2b20      	cmp	r3, #32
 80024ae:	d107      	bne.n	80024c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f06f 0220 	mvn.w	r2, #32
 80024b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 faaa 	bl	8002a14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024c0:	bf00      	nop
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024d2:	2300      	movs	r3, #0
 80024d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d101      	bne.n	80024e4 <HAL_TIM_ConfigClockSource+0x1c>
 80024e0:	2302      	movs	r3, #2
 80024e2:	e0b4      	b.n	800264e <HAL_TIM_ConfigClockSource+0x186>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2202      	movs	r2, #2
 80024f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002502:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800250a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68ba      	ldr	r2, [r7, #8]
 8002512:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800251c:	d03e      	beq.n	800259c <HAL_TIM_ConfigClockSource+0xd4>
 800251e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002522:	f200 8087 	bhi.w	8002634 <HAL_TIM_ConfigClockSource+0x16c>
 8002526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800252a:	f000 8086 	beq.w	800263a <HAL_TIM_ConfigClockSource+0x172>
 800252e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002532:	d87f      	bhi.n	8002634 <HAL_TIM_ConfigClockSource+0x16c>
 8002534:	2b70      	cmp	r3, #112	; 0x70
 8002536:	d01a      	beq.n	800256e <HAL_TIM_ConfigClockSource+0xa6>
 8002538:	2b70      	cmp	r3, #112	; 0x70
 800253a:	d87b      	bhi.n	8002634 <HAL_TIM_ConfigClockSource+0x16c>
 800253c:	2b60      	cmp	r3, #96	; 0x60
 800253e:	d050      	beq.n	80025e2 <HAL_TIM_ConfigClockSource+0x11a>
 8002540:	2b60      	cmp	r3, #96	; 0x60
 8002542:	d877      	bhi.n	8002634 <HAL_TIM_ConfigClockSource+0x16c>
 8002544:	2b50      	cmp	r3, #80	; 0x50
 8002546:	d03c      	beq.n	80025c2 <HAL_TIM_ConfigClockSource+0xfa>
 8002548:	2b50      	cmp	r3, #80	; 0x50
 800254a:	d873      	bhi.n	8002634 <HAL_TIM_ConfigClockSource+0x16c>
 800254c:	2b40      	cmp	r3, #64	; 0x40
 800254e:	d058      	beq.n	8002602 <HAL_TIM_ConfigClockSource+0x13a>
 8002550:	2b40      	cmp	r3, #64	; 0x40
 8002552:	d86f      	bhi.n	8002634 <HAL_TIM_ConfigClockSource+0x16c>
 8002554:	2b30      	cmp	r3, #48	; 0x30
 8002556:	d064      	beq.n	8002622 <HAL_TIM_ConfigClockSource+0x15a>
 8002558:	2b30      	cmp	r3, #48	; 0x30
 800255a:	d86b      	bhi.n	8002634 <HAL_TIM_ConfigClockSource+0x16c>
 800255c:	2b20      	cmp	r3, #32
 800255e:	d060      	beq.n	8002622 <HAL_TIM_ConfigClockSource+0x15a>
 8002560:	2b20      	cmp	r3, #32
 8002562:	d867      	bhi.n	8002634 <HAL_TIM_ConfigClockSource+0x16c>
 8002564:	2b00      	cmp	r3, #0
 8002566:	d05c      	beq.n	8002622 <HAL_TIM_ConfigClockSource+0x15a>
 8002568:	2b10      	cmp	r3, #16
 800256a:	d05a      	beq.n	8002622 <HAL_TIM_ConfigClockSource+0x15a>
 800256c:	e062      	b.n	8002634 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6818      	ldr	r0, [r3, #0]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	6899      	ldr	r1, [r3, #8]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	f000 f9ad 	bl	80028dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002590:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	609a      	str	r2, [r3, #8]
      break;
 800259a:	e04f      	b.n	800263c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6818      	ldr	r0, [r3, #0]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	6899      	ldr	r1, [r3, #8]
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	f000 f996 	bl	80028dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689a      	ldr	r2, [r3, #8]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025be:	609a      	str	r2, [r3, #8]
      break;
 80025c0:	e03c      	b.n	800263c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6818      	ldr	r0, [r3, #0]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	6859      	ldr	r1, [r3, #4]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	461a      	mov	r2, r3
 80025d0:	f000 f90a 	bl	80027e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2150      	movs	r1, #80	; 0x50
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 f963 	bl	80028a6 <TIM_ITRx_SetConfig>
      break;
 80025e0:	e02c      	b.n	800263c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6818      	ldr	r0, [r3, #0]
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	6859      	ldr	r1, [r3, #4]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	461a      	mov	r2, r3
 80025f0:	f000 f929 	bl	8002846 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2160      	movs	r1, #96	; 0x60
 80025fa:	4618      	mov	r0, r3
 80025fc:	f000 f953 	bl	80028a6 <TIM_ITRx_SetConfig>
      break;
 8002600:	e01c      	b.n	800263c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6818      	ldr	r0, [r3, #0]
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	6859      	ldr	r1, [r3, #4]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	461a      	mov	r2, r3
 8002610:	f000 f8ea 	bl	80027e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2140      	movs	r1, #64	; 0x40
 800261a:	4618      	mov	r0, r3
 800261c:	f000 f943 	bl	80028a6 <TIM_ITRx_SetConfig>
      break;
 8002620:	e00c      	b.n	800263c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4619      	mov	r1, r3
 800262c:	4610      	mov	r0, r2
 800262e:	f000 f93a 	bl	80028a6 <TIM_ITRx_SetConfig>
      break;
 8002632:	e003      	b.n	800263c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	73fb      	strb	r3, [r7, #15]
      break;
 8002638:	e000      	b.n	800263c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800263a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800264c:	7bfb      	ldrb	r3, [r7, #15]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr

0800266a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800266a:	b480      	push	{r7}
 800266c:	b083      	sub	sp, #12
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
	...

080026a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a40      	ldr	r2, [pc, #256]	; (80027bc <TIM_Base_SetConfig+0x114>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d013      	beq.n	80026e8 <TIM_Base_SetConfig+0x40>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026c6:	d00f      	beq.n	80026e8 <TIM_Base_SetConfig+0x40>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a3d      	ldr	r2, [pc, #244]	; (80027c0 <TIM_Base_SetConfig+0x118>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d00b      	beq.n	80026e8 <TIM_Base_SetConfig+0x40>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a3c      	ldr	r2, [pc, #240]	; (80027c4 <TIM_Base_SetConfig+0x11c>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d007      	beq.n	80026e8 <TIM_Base_SetConfig+0x40>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a3b      	ldr	r2, [pc, #236]	; (80027c8 <TIM_Base_SetConfig+0x120>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d003      	beq.n	80026e8 <TIM_Base_SetConfig+0x40>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a3a      	ldr	r2, [pc, #232]	; (80027cc <TIM_Base_SetConfig+0x124>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d108      	bne.n	80026fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a2f      	ldr	r2, [pc, #188]	; (80027bc <TIM_Base_SetConfig+0x114>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d02b      	beq.n	800275a <TIM_Base_SetConfig+0xb2>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002708:	d027      	beq.n	800275a <TIM_Base_SetConfig+0xb2>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a2c      	ldr	r2, [pc, #176]	; (80027c0 <TIM_Base_SetConfig+0x118>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d023      	beq.n	800275a <TIM_Base_SetConfig+0xb2>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a2b      	ldr	r2, [pc, #172]	; (80027c4 <TIM_Base_SetConfig+0x11c>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d01f      	beq.n	800275a <TIM_Base_SetConfig+0xb2>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a2a      	ldr	r2, [pc, #168]	; (80027c8 <TIM_Base_SetConfig+0x120>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d01b      	beq.n	800275a <TIM_Base_SetConfig+0xb2>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a29      	ldr	r2, [pc, #164]	; (80027cc <TIM_Base_SetConfig+0x124>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d017      	beq.n	800275a <TIM_Base_SetConfig+0xb2>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a28      	ldr	r2, [pc, #160]	; (80027d0 <TIM_Base_SetConfig+0x128>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d013      	beq.n	800275a <TIM_Base_SetConfig+0xb2>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a27      	ldr	r2, [pc, #156]	; (80027d4 <TIM_Base_SetConfig+0x12c>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d00f      	beq.n	800275a <TIM_Base_SetConfig+0xb2>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a26      	ldr	r2, [pc, #152]	; (80027d8 <TIM_Base_SetConfig+0x130>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d00b      	beq.n	800275a <TIM_Base_SetConfig+0xb2>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a25      	ldr	r2, [pc, #148]	; (80027dc <TIM_Base_SetConfig+0x134>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d007      	beq.n	800275a <TIM_Base_SetConfig+0xb2>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a24      	ldr	r2, [pc, #144]	; (80027e0 <TIM_Base_SetConfig+0x138>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d003      	beq.n	800275a <TIM_Base_SetConfig+0xb2>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a23      	ldr	r2, [pc, #140]	; (80027e4 <TIM_Base_SetConfig+0x13c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d108      	bne.n	800276c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002760:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	4313      	orrs	r3, r2
 800276a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	4313      	orrs	r3, r2
 8002778:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a0a      	ldr	r2, [pc, #40]	; (80027bc <TIM_Base_SetConfig+0x114>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d003      	beq.n	80027a0 <TIM_Base_SetConfig+0xf8>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a0c      	ldr	r2, [pc, #48]	; (80027cc <TIM_Base_SetConfig+0x124>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d103      	bne.n	80027a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	691a      	ldr	r2, [r3, #16]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	615a      	str	r2, [r3, #20]
}
 80027ae:	bf00      	nop
 80027b0:	3714      	adds	r7, #20
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	40010000 	.word	0x40010000
 80027c0:	40000400 	.word	0x40000400
 80027c4:	40000800 	.word	0x40000800
 80027c8:	40000c00 	.word	0x40000c00
 80027cc:	40010400 	.word	0x40010400
 80027d0:	40014000 	.word	0x40014000
 80027d4:	40014400 	.word	0x40014400
 80027d8:	40014800 	.word	0x40014800
 80027dc:	40001800 	.word	0x40001800
 80027e0:	40001c00 	.word	0x40001c00
 80027e4:	40002000 	.word	0x40002000

080027e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b087      	sub	sp, #28
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	f023 0201 	bic.w	r2, r3, #1
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002812:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	011b      	lsls	r3, r3, #4
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	4313      	orrs	r3, r2
 800281c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f023 030a 	bic.w	r3, r3, #10
 8002824:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	4313      	orrs	r3, r2
 800282c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	621a      	str	r2, [r3, #32]
}
 800283a:	bf00      	nop
 800283c:	371c      	adds	r7, #28
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002846:	b480      	push	{r7}
 8002848:	b087      	sub	sp, #28
 800284a:	af00      	add	r7, sp, #0
 800284c:	60f8      	str	r0, [r7, #12]
 800284e:	60b9      	str	r1, [r7, #8]
 8002850:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	f023 0210 	bic.w	r2, r3, #16
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002870:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	031b      	lsls	r3, r3, #12
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	4313      	orrs	r3, r2
 800287a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002882:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	011b      	lsls	r3, r3, #4
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	4313      	orrs	r3, r2
 800288c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	697a      	ldr	r2, [r7, #20]
 8002892:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	621a      	str	r2, [r3, #32]
}
 800289a:	bf00      	nop
 800289c:	371c      	adds	r7, #28
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b085      	sub	sp, #20
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
 80028ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	f043 0307 	orr.w	r3, r3, #7
 80028c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	609a      	str	r2, [r3, #8]
}
 80028d0:	bf00      	nop
 80028d2:	3714      	adds	r7, #20
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028dc:	b480      	push	{r7}
 80028de:	b087      	sub	sp, #28
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
 80028e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	021a      	lsls	r2, r3, #8
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	431a      	orrs	r2, r3
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	4313      	orrs	r3, r2
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	4313      	orrs	r3, r2
 8002908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	609a      	str	r2, [r3, #8]
}
 8002910:	bf00      	nop
 8002912:	371c      	adds	r7, #28
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800292c:	2b01      	cmp	r3, #1
 800292e:	d101      	bne.n	8002934 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002930:	2302      	movs	r3, #2
 8002932:	e05a      	b.n	80029ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2202      	movs	r2, #2
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800295a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	4313      	orrs	r3, r2
 8002964:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a21      	ldr	r2, [pc, #132]	; (80029f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d022      	beq.n	80029be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002980:	d01d      	beq.n	80029be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a1d      	ldr	r2, [pc, #116]	; (80029fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d018      	beq.n	80029be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a1b      	ldr	r2, [pc, #108]	; (8002a00 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d013      	beq.n	80029be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a1a      	ldr	r2, [pc, #104]	; (8002a04 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d00e      	beq.n	80029be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a18      	ldr	r2, [pc, #96]	; (8002a08 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d009      	beq.n	80029be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a17      	ldr	r2, [pc, #92]	; (8002a0c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d004      	beq.n	80029be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a15      	ldr	r2, [pc, #84]	; (8002a10 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d10c      	bne.n	80029d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	68ba      	ldr	r2, [r7, #8]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68ba      	ldr	r2, [r7, #8]
 80029d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3714      	adds	r7, #20
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	40010000 	.word	0x40010000
 80029fc:	40000400 	.word	0x40000400
 8002a00:	40000800 	.word	0x40000800
 8002a04:	40000c00 	.word	0x40000c00
 8002a08:	40010400 	.word	0x40010400
 8002a0c:	40014000 	.word	0x40014000
 8002a10:	40001800 	.word	0x40001800

08002a14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e03f      	b.n	8002ace <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d106      	bne.n	8002a68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7fe fa12 	bl	8000e8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2224      	movs	r2, #36	; 0x24
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 f829 	bl	8002ad8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	691a      	ldr	r2, [r3, #16]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	695a      	ldr	r2, [r3, #20]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002aa4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68da      	ldr	r2, [r3, #12]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ab4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
	...

08002ad8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002adc:	b09f      	sub	sp, #124	; 0x7c
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aee:	68d9      	ldr	r1, [r3, #12]
 8002af0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	ea40 0301 	orr.w	r3, r0, r1
 8002af8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002afa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	431a      	orrs	r2, r3
 8002b04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002b12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b1c:	f021 010c 	bic.w	r1, r1, #12
 8002b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b26:	430b      	orrs	r3, r1
 8002b28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	695b      	ldr	r3, [r3, #20]
 8002b30:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b36:	6999      	ldr	r1, [r3, #24]
 8002b38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	ea40 0301 	orr.w	r3, r0, r1
 8002b40:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	4bc5      	ldr	r3, [pc, #788]	; (8002e5c <UART_SetConfig+0x384>)
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d004      	beq.n	8002b56 <UART_SetConfig+0x7e>
 8002b4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	4bc3      	ldr	r3, [pc, #780]	; (8002e60 <UART_SetConfig+0x388>)
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d103      	bne.n	8002b5e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b56:	f7ff fadb 	bl	8002110 <HAL_RCC_GetPCLK2Freq>
 8002b5a:	6778      	str	r0, [r7, #116]	; 0x74
 8002b5c:	e002      	b.n	8002b64 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b5e:	f7ff fac3 	bl	80020e8 <HAL_RCC_GetPCLK1Freq>
 8002b62:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b66:	69db      	ldr	r3, [r3, #28]
 8002b68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b6c:	f040 80b6 	bne.w	8002cdc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b72:	461c      	mov	r4, r3
 8002b74:	f04f 0500 	mov.w	r5, #0
 8002b78:	4622      	mov	r2, r4
 8002b7a:	462b      	mov	r3, r5
 8002b7c:	1891      	adds	r1, r2, r2
 8002b7e:	6439      	str	r1, [r7, #64]	; 0x40
 8002b80:	415b      	adcs	r3, r3
 8002b82:	647b      	str	r3, [r7, #68]	; 0x44
 8002b84:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002b88:	1912      	adds	r2, r2, r4
 8002b8a:	eb45 0303 	adc.w	r3, r5, r3
 8002b8e:	f04f 0000 	mov.w	r0, #0
 8002b92:	f04f 0100 	mov.w	r1, #0
 8002b96:	00d9      	lsls	r1, r3, #3
 8002b98:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b9c:	00d0      	lsls	r0, r2, #3
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	1911      	adds	r1, r2, r4
 8002ba4:	6639      	str	r1, [r7, #96]	; 0x60
 8002ba6:	416b      	adcs	r3, r5
 8002ba8:	667b      	str	r3, [r7, #100]	; 0x64
 8002baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	f04f 0300 	mov.w	r3, #0
 8002bb4:	1891      	adds	r1, r2, r2
 8002bb6:	63b9      	str	r1, [r7, #56]	; 0x38
 8002bb8:	415b      	adcs	r3, r3
 8002bba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bbc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002bc0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002bc4:	f7fd fb64 	bl	8000290 <__aeabi_uldivmod>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	460b      	mov	r3, r1
 8002bcc:	4ba5      	ldr	r3, [pc, #660]	; (8002e64 <UART_SetConfig+0x38c>)
 8002bce:	fba3 2302 	umull	r2, r3, r3, r2
 8002bd2:	095b      	lsrs	r3, r3, #5
 8002bd4:	011e      	lsls	r6, r3, #4
 8002bd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bd8:	461c      	mov	r4, r3
 8002bda:	f04f 0500 	mov.w	r5, #0
 8002bde:	4622      	mov	r2, r4
 8002be0:	462b      	mov	r3, r5
 8002be2:	1891      	adds	r1, r2, r2
 8002be4:	6339      	str	r1, [r7, #48]	; 0x30
 8002be6:	415b      	adcs	r3, r3
 8002be8:	637b      	str	r3, [r7, #52]	; 0x34
 8002bea:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002bee:	1912      	adds	r2, r2, r4
 8002bf0:	eb45 0303 	adc.w	r3, r5, r3
 8002bf4:	f04f 0000 	mov.w	r0, #0
 8002bf8:	f04f 0100 	mov.w	r1, #0
 8002bfc:	00d9      	lsls	r1, r3, #3
 8002bfe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c02:	00d0      	lsls	r0, r2, #3
 8002c04:	4602      	mov	r2, r0
 8002c06:	460b      	mov	r3, r1
 8002c08:	1911      	adds	r1, r2, r4
 8002c0a:	65b9      	str	r1, [r7, #88]	; 0x58
 8002c0c:	416b      	adcs	r3, r5
 8002c0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	461a      	mov	r2, r3
 8002c16:	f04f 0300 	mov.w	r3, #0
 8002c1a:	1891      	adds	r1, r2, r2
 8002c1c:	62b9      	str	r1, [r7, #40]	; 0x28
 8002c1e:	415b      	adcs	r3, r3
 8002c20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c26:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002c2a:	f7fd fb31 	bl	8000290 <__aeabi_uldivmod>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	4b8c      	ldr	r3, [pc, #560]	; (8002e64 <UART_SetConfig+0x38c>)
 8002c34:	fba3 1302 	umull	r1, r3, r3, r2
 8002c38:	095b      	lsrs	r3, r3, #5
 8002c3a:	2164      	movs	r1, #100	; 0x64
 8002c3c:	fb01 f303 	mul.w	r3, r1, r3
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	3332      	adds	r3, #50	; 0x32
 8002c46:	4a87      	ldr	r2, [pc, #540]	; (8002e64 <UART_SetConfig+0x38c>)
 8002c48:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4c:	095b      	lsrs	r3, r3, #5
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c54:	441e      	add	r6, r3
 8002c56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f04f 0100 	mov.w	r1, #0
 8002c5e:	4602      	mov	r2, r0
 8002c60:	460b      	mov	r3, r1
 8002c62:	1894      	adds	r4, r2, r2
 8002c64:	623c      	str	r4, [r7, #32]
 8002c66:	415b      	adcs	r3, r3
 8002c68:	627b      	str	r3, [r7, #36]	; 0x24
 8002c6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c6e:	1812      	adds	r2, r2, r0
 8002c70:	eb41 0303 	adc.w	r3, r1, r3
 8002c74:	f04f 0400 	mov.w	r4, #0
 8002c78:	f04f 0500 	mov.w	r5, #0
 8002c7c:	00dd      	lsls	r5, r3, #3
 8002c7e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002c82:	00d4      	lsls	r4, r2, #3
 8002c84:	4622      	mov	r2, r4
 8002c86:	462b      	mov	r3, r5
 8002c88:	1814      	adds	r4, r2, r0
 8002c8a:	653c      	str	r4, [r7, #80]	; 0x50
 8002c8c:	414b      	adcs	r3, r1
 8002c8e:	657b      	str	r3, [r7, #84]	; 0x54
 8002c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	461a      	mov	r2, r3
 8002c96:	f04f 0300 	mov.w	r3, #0
 8002c9a:	1891      	adds	r1, r2, r2
 8002c9c:	61b9      	str	r1, [r7, #24]
 8002c9e:	415b      	adcs	r3, r3
 8002ca0:	61fb      	str	r3, [r7, #28]
 8002ca2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ca6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002caa:	f7fd faf1 	bl	8000290 <__aeabi_uldivmod>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	4b6c      	ldr	r3, [pc, #432]	; (8002e64 <UART_SetConfig+0x38c>)
 8002cb4:	fba3 1302 	umull	r1, r3, r3, r2
 8002cb8:	095b      	lsrs	r3, r3, #5
 8002cba:	2164      	movs	r1, #100	; 0x64
 8002cbc:	fb01 f303 	mul.w	r3, r1, r3
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	3332      	adds	r3, #50	; 0x32
 8002cc6:	4a67      	ldr	r2, [pc, #412]	; (8002e64 <UART_SetConfig+0x38c>)
 8002cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ccc:	095b      	lsrs	r3, r3, #5
 8002cce:	f003 0207 	and.w	r2, r3, #7
 8002cd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4432      	add	r2, r6
 8002cd8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002cda:	e0b9      	b.n	8002e50 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cde:	461c      	mov	r4, r3
 8002ce0:	f04f 0500 	mov.w	r5, #0
 8002ce4:	4622      	mov	r2, r4
 8002ce6:	462b      	mov	r3, r5
 8002ce8:	1891      	adds	r1, r2, r2
 8002cea:	6139      	str	r1, [r7, #16]
 8002cec:	415b      	adcs	r3, r3
 8002cee:	617b      	str	r3, [r7, #20]
 8002cf0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002cf4:	1912      	adds	r2, r2, r4
 8002cf6:	eb45 0303 	adc.w	r3, r5, r3
 8002cfa:	f04f 0000 	mov.w	r0, #0
 8002cfe:	f04f 0100 	mov.w	r1, #0
 8002d02:	00d9      	lsls	r1, r3, #3
 8002d04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d08:	00d0      	lsls	r0, r2, #3
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	eb12 0804 	adds.w	r8, r2, r4
 8002d12:	eb43 0905 	adc.w	r9, r3, r5
 8002d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f04f 0100 	mov.w	r1, #0
 8002d20:	f04f 0200 	mov.w	r2, #0
 8002d24:	f04f 0300 	mov.w	r3, #0
 8002d28:	008b      	lsls	r3, r1, #2
 8002d2a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002d2e:	0082      	lsls	r2, r0, #2
 8002d30:	4640      	mov	r0, r8
 8002d32:	4649      	mov	r1, r9
 8002d34:	f7fd faac 	bl	8000290 <__aeabi_uldivmod>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4b49      	ldr	r3, [pc, #292]	; (8002e64 <UART_SetConfig+0x38c>)
 8002d3e:	fba3 2302 	umull	r2, r3, r3, r2
 8002d42:	095b      	lsrs	r3, r3, #5
 8002d44:	011e      	lsls	r6, r3, #4
 8002d46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f04f 0100 	mov.w	r1, #0
 8002d4e:	4602      	mov	r2, r0
 8002d50:	460b      	mov	r3, r1
 8002d52:	1894      	adds	r4, r2, r2
 8002d54:	60bc      	str	r4, [r7, #8]
 8002d56:	415b      	adcs	r3, r3
 8002d58:	60fb      	str	r3, [r7, #12]
 8002d5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d5e:	1812      	adds	r2, r2, r0
 8002d60:	eb41 0303 	adc.w	r3, r1, r3
 8002d64:	f04f 0400 	mov.w	r4, #0
 8002d68:	f04f 0500 	mov.w	r5, #0
 8002d6c:	00dd      	lsls	r5, r3, #3
 8002d6e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002d72:	00d4      	lsls	r4, r2, #3
 8002d74:	4622      	mov	r2, r4
 8002d76:	462b      	mov	r3, r5
 8002d78:	1814      	adds	r4, r2, r0
 8002d7a:	64bc      	str	r4, [r7, #72]	; 0x48
 8002d7c:	414b      	adcs	r3, r1
 8002d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f04f 0100 	mov.w	r1, #0
 8002d8a:	f04f 0200 	mov.w	r2, #0
 8002d8e:	f04f 0300 	mov.w	r3, #0
 8002d92:	008b      	lsls	r3, r1, #2
 8002d94:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002d98:	0082      	lsls	r2, r0, #2
 8002d9a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002d9e:	f7fd fa77 	bl	8000290 <__aeabi_uldivmod>
 8002da2:	4602      	mov	r2, r0
 8002da4:	460b      	mov	r3, r1
 8002da6:	4b2f      	ldr	r3, [pc, #188]	; (8002e64 <UART_SetConfig+0x38c>)
 8002da8:	fba3 1302 	umull	r1, r3, r3, r2
 8002dac:	095b      	lsrs	r3, r3, #5
 8002dae:	2164      	movs	r1, #100	; 0x64
 8002db0:	fb01 f303 	mul.w	r3, r1, r3
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	011b      	lsls	r3, r3, #4
 8002db8:	3332      	adds	r3, #50	; 0x32
 8002dba:	4a2a      	ldr	r2, [pc, #168]	; (8002e64 <UART_SetConfig+0x38c>)
 8002dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc0:	095b      	lsrs	r3, r3, #5
 8002dc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dc6:	441e      	add	r6, r3
 8002dc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f04f 0100 	mov.w	r1, #0
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	1894      	adds	r4, r2, r2
 8002dd6:	603c      	str	r4, [r7, #0]
 8002dd8:	415b      	adcs	r3, r3
 8002dda:	607b      	str	r3, [r7, #4]
 8002ddc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002de0:	1812      	adds	r2, r2, r0
 8002de2:	eb41 0303 	adc.w	r3, r1, r3
 8002de6:	f04f 0400 	mov.w	r4, #0
 8002dea:	f04f 0500 	mov.w	r5, #0
 8002dee:	00dd      	lsls	r5, r3, #3
 8002df0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002df4:	00d4      	lsls	r4, r2, #3
 8002df6:	4622      	mov	r2, r4
 8002df8:	462b      	mov	r3, r5
 8002dfa:	eb12 0a00 	adds.w	sl, r2, r0
 8002dfe:	eb43 0b01 	adc.w	fp, r3, r1
 8002e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f04f 0100 	mov.w	r1, #0
 8002e0c:	f04f 0200 	mov.w	r2, #0
 8002e10:	f04f 0300 	mov.w	r3, #0
 8002e14:	008b      	lsls	r3, r1, #2
 8002e16:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002e1a:	0082      	lsls	r2, r0, #2
 8002e1c:	4650      	mov	r0, sl
 8002e1e:	4659      	mov	r1, fp
 8002e20:	f7fd fa36 	bl	8000290 <__aeabi_uldivmod>
 8002e24:	4602      	mov	r2, r0
 8002e26:	460b      	mov	r3, r1
 8002e28:	4b0e      	ldr	r3, [pc, #56]	; (8002e64 <UART_SetConfig+0x38c>)
 8002e2a:	fba3 1302 	umull	r1, r3, r3, r2
 8002e2e:	095b      	lsrs	r3, r3, #5
 8002e30:	2164      	movs	r1, #100	; 0x64
 8002e32:	fb01 f303 	mul.w	r3, r1, r3
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	011b      	lsls	r3, r3, #4
 8002e3a:	3332      	adds	r3, #50	; 0x32
 8002e3c:	4a09      	ldr	r2, [pc, #36]	; (8002e64 <UART_SetConfig+0x38c>)
 8002e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e42:	095b      	lsrs	r3, r3, #5
 8002e44:	f003 020f 	and.w	r2, r3, #15
 8002e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4432      	add	r2, r6
 8002e4e:	609a      	str	r2, [r3, #8]
}
 8002e50:	bf00      	nop
 8002e52:	377c      	adds	r7, #124	; 0x7c
 8002e54:	46bd      	mov	sp, r7
 8002e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e5a:	bf00      	nop
 8002e5c:	40011000 	.word	0x40011000
 8002e60:	40011400 	.word	0x40011400
 8002e64:	51eb851f 	.word	0x51eb851f

08002e68 <__errno>:
 8002e68:	4b01      	ldr	r3, [pc, #4]	; (8002e70 <__errno+0x8>)
 8002e6a:	6818      	ldr	r0, [r3, #0]
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	20000010 	.word	0x20000010

08002e74 <__libc_init_array>:
 8002e74:	b570      	push	{r4, r5, r6, lr}
 8002e76:	4d0d      	ldr	r5, [pc, #52]	; (8002eac <__libc_init_array+0x38>)
 8002e78:	4c0d      	ldr	r4, [pc, #52]	; (8002eb0 <__libc_init_array+0x3c>)
 8002e7a:	1b64      	subs	r4, r4, r5
 8002e7c:	10a4      	asrs	r4, r4, #2
 8002e7e:	2600      	movs	r6, #0
 8002e80:	42a6      	cmp	r6, r4
 8002e82:	d109      	bne.n	8002e98 <__libc_init_array+0x24>
 8002e84:	4d0b      	ldr	r5, [pc, #44]	; (8002eb4 <__libc_init_array+0x40>)
 8002e86:	4c0c      	ldr	r4, [pc, #48]	; (8002eb8 <__libc_init_array+0x44>)
 8002e88:	f001 f84a 	bl	8003f20 <_init>
 8002e8c:	1b64      	subs	r4, r4, r5
 8002e8e:	10a4      	asrs	r4, r4, #2
 8002e90:	2600      	movs	r6, #0
 8002e92:	42a6      	cmp	r6, r4
 8002e94:	d105      	bne.n	8002ea2 <__libc_init_array+0x2e>
 8002e96:	bd70      	pop	{r4, r5, r6, pc}
 8002e98:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e9c:	4798      	blx	r3
 8002e9e:	3601      	adds	r6, #1
 8002ea0:	e7ee      	b.n	8002e80 <__libc_init_array+0xc>
 8002ea2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ea6:	4798      	blx	r3
 8002ea8:	3601      	adds	r6, #1
 8002eaa:	e7f2      	b.n	8002e92 <__libc_init_array+0x1e>
 8002eac:	08004098 	.word	0x08004098
 8002eb0:	08004098 	.word	0x08004098
 8002eb4:	08004098 	.word	0x08004098
 8002eb8:	0800409c 	.word	0x0800409c

08002ebc <memset>:
 8002ebc:	4402      	add	r2, r0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d100      	bne.n	8002ec6 <memset+0xa>
 8002ec4:	4770      	bx	lr
 8002ec6:	f803 1b01 	strb.w	r1, [r3], #1
 8002eca:	e7f9      	b.n	8002ec0 <memset+0x4>

08002ecc <iprintf>:
 8002ecc:	b40f      	push	{r0, r1, r2, r3}
 8002ece:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <iprintf+0x2c>)
 8002ed0:	b513      	push	{r0, r1, r4, lr}
 8002ed2:	681c      	ldr	r4, [r3, #0]
 8002ed4:	b124      	cbz	r4, 8002ee0 <iprintf+0x14>
 8002ed6:	69a3      	ldr	r3, [r4, #24]
 8002ed8:	b913      	cbnz	r3, 8002ee0 <iprintf+0x14>
 8002eda:	4620      	mov	r0, r4
 8002edc:	f000 fa74 	bl	80033c8 <__sinit>
 8002ee0:	ab05      	add	r3, sp, #20
 8002ee2:	9a04      	ldr	r2, [sp, #16]
 8002ee4:	68a1      	ldr	r1, [r4, #8]
 8002ee6:	9301      	str	r3, [sp, #4]
 8002ee8:	4620      	mov	r0, r4
 8002eea:	f000 fc45 	bl	8003778 <_vfiprintf_r>
 8002eee:	b002      	add	sp, #8
 8002ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ef4:	b004      	add	sp, #16
 8002ef6:	4770      	bx	lr
 8002ef8:	20000010 	.word	0x20000010

08002efc <putchar>:
 8002efc:	4b09      	ldr	r3, [pc, #36]	; (8002f24 <putchar+0x28>)
 8002efe:	b513      	push	{r0, r1, r4, lr}
 8002f00:	681c      	ldr	r4, [r3, #0]
 8002f02:	4601      	mov	r1, r0
 8002f04:	b134      	cbz	r4, 8002f14 <putchar+0x18>
 8002f06:	69a3      	ldr	r3, [r4, #24]
 8002f08:	b923      	cbnz	r3, 8002f14 <putchar+0x18>
 8002f0a:	9001      	str	r0, [sp, #4]
 8002f0c:	4620      	mov	r0, r4
 8002f0e:	f000 fa5b 	bl	80033c8 <__sinit>
 8002f12:	9901      	ldr	r1, [sp, #4]
 8002f14:	68a2      	ldr	r2, [r4, #8]
 8002f16:	4620      	mov	r0, r4
 8002f18:	b002      	add	sp, #8
 8002f1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f1e:	f000 beef 	b.w	8003d00 <_putc_r>
 8002f22:	bf00      	nop
 8002f24:	20000010 	.word	0x20000010

08002f28 <_puts_r>:
 8002f28:	b570      	push	{r4, r5, r6, lr}
 8002f2a:	460e      	mov	r6, r1
 8002f2c:	4605      	mov	r5, r0
 8002f2e:	b118      	cbz	r0, 8002f38 <_puts_r+0x10>
 8002f30:	6983      	ldr	r3, [r0, #24]
 8002f32:	b90b      	cbnz	r3, 8002f38 <_puts_r+0x10>
 8002f34:	f000 fa48 	bl	80033c8 <__sinit>
 8002f38:	69ab      	ldr	r3, [r5, #24]
 8002f3a:	68ac      	ldr	r4, [r5, #8]
 8002f3c:	b913      	cbnz	r3, 8002f44 <_puts_r+0x1c>
 8002f3e:	4628      	mov	r0, r5
 8002f40:	f000 fa42 	bl	80033c8 <__sinit>
 8002f44:	4b2c      	ldr	r3, [pc, #176]	; (8002ff8 <_puts_r+0xd0>)
 8002f46:	429c      	cmp	r4, r3
 8002f48:	d120      	bne.n	8002f8c <_puts_r+0x64>
 8002f4a:	686c      	ldr	r4, [r5, #4]
 8002f4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f4e:	07db      	lsls	r3, r3, #31
 8002f50:	d405      	bmi.n	8002f5e <_puts_r+0x36>
 8002f52:	89a3      	ldrh	r3, [r4, #12]
 8002f54:	0598      	lsls	r0, r3, #22
 8002f56:	d402      	bmi.n	8002f5e <_puts_r+0x36>
 8002f58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f5a:	f000 fad3 	bl	8003504 <__retarget_lock_acquire_recursive>
 8002f5e:	89a3      	ldrh	r3, [r4, #12]
 8002f60:	0719      	lsls	r1, r3, #28
 8002f62:	d51d      	bpl.n	8002fa0 <_puts_r+0x78>
 8002f64:	6923      	ldr	r3, [r4, #16]
 8002f66:	b1db      	cbz	r3, 8002fa0 <_puts_r+0x78>
 8002f68:	3e01      	subs	r6, #1
 8002f6a:	68a3      	ldr	r3, [r4, #8]
 8002f6c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002f70:	3b01      	subs	r3, #1
 8002f72:	60a3      	str	r3, [r4, #8]
 8002f74:	bb39      	cbnz	r1, 8002fc6 <_puts_r+0x9e>
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	da38      	bge.n	8002fec <_puts_r+0xc4>
 8002f7a:	4622      	mov	r2, r4
 8002f7c:	210a      	movs	r1, #10
 8002f7e:	4628      	mov	r0, r5
 8002f80:	f000 f848 	bl	8003014 <__swbuf_r>
 8002f84:	3001      	adds	r0, #1
 8002f86:	d011      	beq.n	8002fac <_puts_r+0x84>
 8002f88:	250a      	movs	r5, #10
 8002f8a:	e011      	b.n	8002fb0 <_puts_r+0x88>
 8002f8c:	4b1b      	ldr	r3, [pc, #108]	; (8002ffc <_puts_r+0xd4>)
 8002f8e:	429c      	cmp	r4, r3
 8002f90:	d101      	bne.n	8002f96 <_puts_r+0x6e>
 8002f92:	68ac      	ldr	r4, [r5, #8]
 8002f94:	e7da      	b.n	8002f4c <_puts_r+0x24>
 8002f96:	4b1a      	ldr	r3, [pc, #104]	; (8003000 <_puts_r+0xd8>)
 8002f98:	429c      	cmp	r4, r3
 8002f9a:	bf08      	it	eq
 8002f9c:	68ec      	ldreq	r4, [r5, #12]
 8002f9e:	e7d5      	b.n	8002f4c <_puts_r+0x24>
 8002fa0:	4621      	mov	r1, r4
 8002fa2:	4628      	mov	r0, r5
 8002fa4:	f000 f888 	bl	80030b8 <__swsetup_r>
 8002fa8:	2800      	cmp	r0, #0
 8002faa:	d0dd      	beq.n	8002f68 <_puts_r+0x40>
 8002fac:	f04f 35ff 	mov.w	r5, #4294967295
 8002fb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002fb2:	07da      	lsls	r2, r3, #31
 8002fb4:	d405      	bmi.n	8002fc2 <_puts_r+0x9a>
 8002fb6:	89a3      	ldrh	r3, [r4, #12]
 8002fb8:	059b      	lsls	r3, r3, #22
 8002fba:	d402      	bmi.n	8002fc2 <_puts_r+0x9a>
 8002fbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002fbe:	f000 faa2 	bl	8003506 <__retarget_lock_release_recursive>
 8002fc2:	4628      	mov	r0, r5
 8002fc4:	bd70      	pop	{r4, r5, r6, pc}
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	da04      	bge.n	8002fd4 <_puts_r+0xac>
 8002fca:	69a2      	ldr	r2, [r4, #24]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	dc06      	bgt.n	8002fde <_puts_r+0xb6>
 8002fd0:	290a      	cmp	r1, #10
 8002fd2:	d004      	beq.n	8002fde <_puts_r+0xb6>
 8002fd4:	6823      	ldr	r3, [r4, #0]
 8002fd6:	1c5a      	adds	r2, r3, #1
 8002fd8:	6022      	str	r2, [r4, #0]
 8002fda:	7019      	strb	r1, [r3, #0]
 8002fdc:	e7c5      	b.n	8002f6a <_puts_r+0x42>
 8002fde:	4622      	mov	r2, r4
 8002fe0:	4628      	mov	r0, r5
 8002fe2:	f000 f817 	bl	8003014 <__swbuf_r>
 8002fe6:	3001      	adds	r0, #1
 8002fe8:	d1bf      	bne.n	8002f6a <_puts_r+0x42>
 8002fea:	e7df      	b.n	8002fac <_puts_r+0x84>
 8002fec:	6823      	ldr	r3, [r4, #0]
 8002fee:	250a      	movs	r5, #10
 8002ff0:	1c5a      	adds	r2, r3, #1
 8002ff2:	6022      	str	r2, [r4, #0]
 8002ff4:	701d      	strb	r5, [r3, #0]
 8002ff6:	e7db      	b.n	8002fb0 <_puts_r+0x88>
 8002ff8:	0800401c 	.word	0x0800401c
 8002ffc:	0800403c 	.word	0x0800403c
 8003000:	08003ffc 	.word	0x08003ffc

08003004 <puts>:
 8003004:	4b02      	ldr	r3, [pc, #8]	; (8003010 <puts+0xc>)
 8003006:	4601      	mov	r1, r0
 8003008:	6818      	ldr	r0, [r3, #0]
 800300a:	f7ff bf8d 	b.w	8002f28 <_puts_r>
 800300e:	bf00      	nop
 8003010:	20000010 	.word	0x20000010

08003014 <__swbuf_r>:
 8003014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003016:	460e      	mov	r6, r1
 8003018:	4614      	mov	r4, r2
 800301a:	4605      	mov	r5, r0
 800301c:	b118      	cbz	r0, 8003026 <__swbuf_r+0x12>
 800301e:	6983      	ldr	r3, [r0, #24]
 8003020:	b90b      	cbnz	r3, 8003026 <__swbuf_r+0x12>
 8003022:	f000 f9d1 	bl	80033c8 <__sinit>
 8003026:	4b21      	ldr	r3, [pc, #132]	; (80030ac <__swbuf_r+0x98>)
 8003028:	429c      	cmp	r4, r3
 800302a:	d12b      	bne.n	8003084 <__swbuf_r+0x70>
 800302c:	686c      	ldr	r4, [r5, #4]
 800302e:	69a3      	ldr	r3, [r4, #24]
 8003030:	60a3      	str	r3, [r4, #8]
 8003032:	89a3      	ldrh	r3, [r4, #12]
 8003034:	071a      	lsls	r2, r3, #28
 8003036:	d52f      	bpl.n	8003098 <__swbuf_r+0x84>
 8003038:	6923      	ldr	r3, [r4, #16]
 800303a:	b36b      	cbz	r3, 8003098 <__swbuf_r+0x84>
 800303c:	6923      	ldr	r3, [r4, #16]
 800303e:	6820      	ldr	r0, [r4, #0]
 8003040:	1ac0      	subs	r0, r0, r3
 8003042:	6963      	ldr	r3, [r4, #20]
 8003044:	b2f6      	uxtb	r6, r6
 8003046:	4283      	cmp	r3, r0
 8003048:	4637      	mov	r7, r6
 800304a:	dc04      	bgt.n	8003056 <__swbuf_r+0x42>
 800304c:	4621      	mov	r1, r4
 800304e:	4628      	mov	r0, r5
 8003050:	f000 f926 	bl	80032a0 <_fflush_r>
 8003054:	bb30      	cbnz	r0, 80030a4 <__swbuf_r+0x90>
 8003056:	68a3      	ldr	r3, [r4, #8]
 8003058:	3b01      	subs	r3, #1
 800305a:	60a3      	str	r3, [r4, #8]
 800305c:	6823      	ldr	r3, [r4, #0]
 800305e:	1c5a      	adds	r2, r3, #1
 8003060:	6022      	str	r2, [r4, #0]
 8003062:	701e      	strb	r6, [r3, #0]
 8003064:	6963      	ldr	r3, [r4, #20]
 8003066:	3001      	adds	r0, #1
 8003068:	4283      	cmp	r3, r0
 800306a:	d004      	beq.n	8003076 <__swbuf_r+0x62>
 800306c:	89a3      	ldrh	r3, [r4, #12]
 800306e:	07db      	lsls	r3, r3, #31
 8003070:	d506      	bpl.n	8003080 <__swbuf_r+0x6c>
 8003072:	2e0a      	cmp	r6, #10
 8003074:	d104      	bne.n	8003080 <__swbuf_r+0x6c>
 8003076:	4621      	mov	r1, r4
 8003078:	4628      	mov	r0, r5
 800307a:	f000 f911 	bl	80032a0 <_fflush_r>
 800307e:	b988      	cbnz	r0, 80030a4 <__swbuf_r+0x90>
 8003080:	4638      	mov	r0, r7
 8003082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003084:	4b0a      	ldr	r3, [pc, #40]	; (80030b0 <__swbuf_r+0x9c>)
 8003086:	429c      	cmp	r4, r3
 8003088:	d101      	bne.n	800308e <__swbuf_r+0x7a>
 800308a:	68ac      	ldr	r4, [r5, #8]
 800308c:	e7cf      	b.n	800302e <__swbuf_r+0x1a>
 800308e:	4b09      	ldr	r3, [pc, #36]	; (80030b4 <__swbuf_r+0xa0>)
 8003090:	429c      	cmp	r4, r3
 8003092:	bf08      	it	eq
 8003094:	68ec      	ldreq	r4, [r5, #12]
 8003096:	e7ca      	b.n	800302e <__swbuf_r+0x1a>
 8003098:	4621      	mov	r1, r4
 800309a:	4628      	mov	r0, r5
 800309c:	f000 f80c 	bl	80030b8 <__swsetup_r>
 80030a0:	2800      	cmp	r0, #0
 80030a2:	d0cb      	beq.n	800303c <__swbuf_r+0x28>
 80030a4:	f04f 37ff 	mov.w	r7, #4294967295
 80030a8:	e7ea      	b.n	8003080 <__swbuf_r+0x6c>
 80030aa:	bf00      	nop
 80030ac:	0800401c 	.word	0x0800401c
 80030b0:	0800403c 	.word	0x0800403c
 80030b4:	08003ffc 	.word	0x08003ffc

080030b8 <__swsetup_r>:
 80030b8:	4b32      	ldr	r3, [pc, #200]	; (8003184 <__swsetup_r+0xcc>)
 80030ba:	b570      	push	{r4, r5, r6, lr}
 80030bc:	681d      	ldr	r5, [r3, #0]
 80030be:	4606      	mov	r6, r0
 80030c0:	460c      	mov	r4, r1
 80030c2:	b125      	cbz	r5, 80030ce <__swsetup_r+0x16>
 80030c4:	69ab      	ldr	r3, [r5, #24]
 80030c6:	b913      	cbnz	r3, 80030ce <__swsetup_r+0x16>
 80030c8:	4628      	mov	r0, r5
 80030ca:	f000 f97d 	bl	80033c8 <__sinit>
 80030ce:	4b2e      	ldr	r3, [pc, #184]	; (8003188 <__swsetup_r+0xd0>)
 80030d0:	429c      	cmp	r4, r3
 80030d2:	d10f      	bne.n	80030f4 <__swsetup_r+0x3c>
 80030d4:	686c      	ldr	r4, [r5, #4]
 80030d6:	89a3      	ldrh	r3, [r4, #12]
 80030d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80030dc:	0719      	lsls	r1, r3, #28
 80030de:	d42c      	bmi.n	800313a <__swsetup_r+0x82>
 80030e0:	06dd      	lsls	r5, r3, #27
 80030e2:	d411      	bmi.n	8003108 <__swsetup_r+0x50>
 80030e4:	2309      	movs	r3, #9
 80030e6:	6033      	str	r3, [r6, #0]
 80030e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80030ec:	81a3      	strh	r3, [r4, #12]
 80030ee:	f04f 30ff 	mov.w	r0, #4294967295
 80030f2:	e03e      	b.n	8003172 <__swsetup_r+0xba>
 80030f4:	4b25      	ldr	r3, [pc, #148]	; (800318c <__swsetup_r+0xd4>)
 80030f6:	429c      	cmp	r4, r3
 80030f8:	d101      	bne.n	80030fe <__swsetup_r+0x46>
 80030fa:	68ac      	ldr	r4, [r5, #8]
 80030fc:	e7eb      	b.n	80030d6 <__swsetup_r+0x1e>
 80030fe:	4b24      	ldr	r3, [pc, #144]	; (8003190 <__swsetup_r+0xd8>)
 8003100:	429c      	cmp	r4, r3
 8003102:	bf08      	it	eq
 8003104:	68ec      	ldreq	r4, [r5, #12]
 8003106:	e7e6      	b.n	80030d6 <__swsetup_r+0x1e>
 8003108:	0758      	lsls	r0, r3, #29
 800310a:	d512      	bpl.n	8003132 <__swsetup_r+0x7a>
 800310c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800310e:	b141      	cbz	r1, 8003122 <__swsetup_r+0x6a>
 8003110:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003114:	4299      	cmp	r1, r3
 8003116:	d002      	beq.n	800311e <__swsetup_r+0x66>
 8003118:	4630      	mov	r0, r6
 800311a:	f000 fa59 	bl	80035d0 <_free_r>
 800311e:	2300      	movs	r3, #0
 8003120:	6363      	str	r3, [r4, #52]	; 0x34
 8003122:	89a3      	ldrh	r3, [r4, #12]
 8003124:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003128:	81a3      	strh	r3, [r4, #12]
 800312a:	2300      	movs	r3, #0
 800312c:	6063      	str	r3, [r4, #4]
 800312e:	6923      	ldr	r3, [r4, #16]
 8003130:	6023      	str	r3, [r4, #0]
 8003132:	89a3      	ldrh	r3, [r4, #12]
 8003134:	f043 0308 	orr.w	r3, r3, #8
 8003138:	81a3      	strh	r3, [r4, #12]
 800313a:	6923      	ldr	r3, [r4, #16]
 800313c:	b94b      	cbnz	r3, 8003152 <__swsetup_r+0x9a>
 800313e:	89a3      	ldrh	r3, [r4, #12]
 8003140:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003144:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003148:	d003      	beq.n	8003152 <__swsetup_r+0x9a>
 800314a:	4621      	mov	r1, r4
 800314c:	4630      	mov	r0, r6
 800314e:	f000 f9ff 	bl	8003550 <__smakebuf_r>
 8003152:	89a0      	ldrh	r0, [r4, #12]
 8003154:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003158:	f010 0301 	ands.w	r3, r0, #1
 800315c:	d00a      	beq.n	8003174 <__swsetup_r+0xbc>
 800315e:	2300      	movs	r3, #0
 8003160:	60a3      	str	r3, [r4, #8]
 8003162:	6963      	ldr	r3, [r4, #20]
 8003164:	425b      	negs	r3, r3
 8003166:	61a3      	str	r3, [r4, #24]
 8003168:	6923      	ldr	r3, [r4, #16]
 800316a:	b943      	cbnz	r3, 800317e <__swsetup_r+0xc6>
 800316c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003170:	d1ba      	bne.n	80030e8 <__swsetup_r+0x30>
 8003172:	bd70      	pop	{r4, r5, r6, pc}
 8003174:	0781      	lsls	r1, r0, #30
 8003176:	bf58      	it	pl
 8003178:	6963      	ldrpl	r3, [r4, #20]
 800317a:	60a3      	str	r3, [r4, #8]
 800317c:	e7f4      	b.n	8003168 <__swsetup_r+0xb0>
 800317e:	2000      	movs	r0, #0
 8003180:	e7f7      	b.n	8003172 <__swsetup_r+0xba>
 8003182:	bf00      	nop
 8003184:	20000010 	.word	0x20000010
 8003188:	0800401c 	.word	0x0800401c
 800318c:	0800403c 	.word	0x0800403c
 8003190:	08003ffc 	.word	0x08003ffc

08003194 <__sflush_r>:
 8003194:	898a      	ldrh	r2, [r1, #12]
 8003196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800319a:	4605      	mov	r5, r0
 800319c:	0710      	lsls	r0, r2, #28
 800319e:	460c      	mov	r4, r1
 80031a0:	d458      	bmi.n	8003254 <__sflush_r+0xc0>
 80031a2:	684b      	ldr	r3, [r1, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	dc05      	bgt.n	80031b4 <__sflush_r+0x20>
 80031a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	dc02      	bgt.n	80031b4 <__sflush_r+0x20>
 80031ae:	2000      	movs	r0, #0
 80031b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80031b6:	2e00      	cmp	r6, #0
 80031b8:	d0f9      	beq.n	80031ae <__sflush_r+0x1a>
 80031ba:	2300      	movs	r3, #0
 80031bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80031c0:	682f      	ldr	r7, [r5, #0]
 80031c2:	602b      	str	r3, [r5, #0]
 80031c4:	d032      	beq.n	800322c <__sflush_r+0x98>
 80031c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80031c8:	89a3      	ldrh	r3, [r4, #12]
 80031ca:	075a      	lsls	r2, r3, #29
 80031cc:	d505      	bpl.n	80031da <__sflush_r+0x46>
 80031ce:	6863      	ldr	r3, [r4, #4]
 80031d0:	1ac0      	subs	r0, r0, r3
 80031d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80031d4:	b10b      	cbz	r3, 80031da <__sflush_r+0x46>
 80031d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80031d8:	1ac0      	subs	r0, r0, r3
 80031da:	2300      	movs	r3, #0
 80031dc:	4602      	mov	r2, r0
 80031de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80031e0:	6a21      	ldr	r1, [r4, #32]
 80031e2:	4628      	mov	r0, r5
 80031e4:	47b0      	blx	r6
 80031e6:	1c43      	adds	r3, r0, #1
 80031e8:	89a3      	ldrh	r3, [r4, #12]
 80031ea:	d106      	bne.n	80031fa <__sflush_r+0x66>
 80031ec:	6829      	ldr	r1, [r5, #0]
 80031ee:	291d      	cmp	r1, #29
 80031f0:	d82c      	bhi.n	800324c <__sflush_r+0xb8>
 80031f2:	4a2a      	ldr	r2, [pc, #168]	; (800329c <__sflush_r+0x108>)
 80031f4:	40ca      	lsrs	r2, r1
 80031f6:	07d6      	lsls	r6, r2, #31
 80031f8:	d528      	bpl.n	800324c <__sflush_r+0xb8>
 80031fa:	2200      	movs	r2, #0
 80031fc:	6062      	str	r2, [r4, #4]
 80031fe:	04d9      	lsls	r1, r3, #19
 8003200:	6922      	ldr	r2, [r4, #16]
 8003202:	6022      	str	r2, [r4, #0]
 8003204:	d504      	bpl.n	8003210 <__sflush_r+0x7c>
 8003206:	1c42      	adds	r2, r0, #1
 8003208:	d101      	bne.n	800320e <__sflush_r+0x7a>
 800320a:	682b      	ldr	r3, [r5, #0]
 800320c:	b903      	cbnz	r3, 8003210 <__sflush_r+0x7c>
 800320e:	6560      	str	r0, [r4, #84]	; 0x54
 8003210:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003212:	602f      	str	r7, [r5, #0]
 8003214:	2900      	cmp	r1, #0
 8003216:	d0ca      	beq.n	80031ae <__sflush_r+0x1a>
 8003218:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800321c:	4299      	cmp	r1, r3
 800321e:	d002      	beq.n	8003226 <__sflush_r+0x92>
 8003220:	4628      	mov	r0, r5
 8003222:	f000 f9d5 	bl	80035d0 <_free_r>
 8003226:	2000      	movs	r0, #0
 8003228:	6360      	str	r0, [r4, #52]	; 0x34
 800322a:	e7c1      	b.n	80031b0 <__sflush_r+0x1c>
 800322c:	6a21      	ldr	r1, [r4, #32]
 800322e:	2301      	movs	r3, #1
 8003230:	4628      	mov	r0, r5
 8003232:	47b0      	blx	r6
 8003234:	1c41      	adds	r1, r0, #1
 8003236:	d1c7      	bne.n	80031c8 <__sflush_r+0x34>
 8003238:	682b      	ldr	r3, [r5, #0]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0c4      	beq.n	80031c8 <__sflush_r+0x34>
 800323e:	2b1d      	cmp	r3, #29
 8003240:	d001      	beq.n	8003246 <__sflush_r+0xb2>
 8003242:	2b16      	cmp	r3, #22
 8003244:	d101      	bne.n	800324a <__sflush_r+0xb6>
 8003246:	602f      	str	r7, [r5, #0]
 8003248:	e7b1      	b.n	80031ae <__sflush_r+0x1a>
 800324a:	89a3      	ldrh	r3, [r4, #12]
 800324c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003250:	81a3      	strh	r3, [r4, #12]
 8003252:	e7ad      	b.n	80031b0 <__sflush_r+0x1c>
 8003254:	690f      	ldr	r7, [r1, #16]
 8003256:	2f00      	cmp	r7, #0
 8003258:	d0a9      	beq.n	80031ae <__sflush_r+0x1a>
 800325a:	0793      	lsls	r3, r2, #30
 800325c:	680e      	ldr	r6, [r1, #0]
 800325e:	bf08      	it	eq
 8003260:	694b      	ldreq	r3, [r1, #20]
 8003262:	600f      	str	r7, [r1, #0]
 8003264:	bf18      	it	ne
 8003266:	2300      	movne	r3, #0
 8003268:	eba6 0807 	sub.w	r8, r6, r7
 800326c:	608b      	str	r3, [r1, #8]
 800326e:	f1b8 0f00 	cmp.w	r8, #0
 8003272:	dd9c      	ble.n	80031ae <__sflush_r+0x1a>
 8003274:	6a21      	ldr	r1, [r4, #32]
 8003276:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003278:	4643      	mov	r3, r8
 800327a:	463a      	mov	r2, r7
 800327c:	4628      	mov	r0, r5
 800327e:	47b0      	blx	r6
 8003280:	2800      	cmp	r0, #0
 8003282:	dc06      	bgt.n	8003292 <__sflush_r+0xfe>
 8003284:	89a3      	ldrh	r3, [r4, #12]
 8003286:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800328a:	81a3      	strh	r3, [r4, #12]
 800328c:	f04f 30ff 	mov.w	r0, #4294967295
 8003290:	e78e      	b.n	80031b0 <__sflush_r+0x1c>
 8003292:	4407      	add	r7, r0
 8003294:	eba8 0800 	sub.w	r8, r8, r0
 8003298:	e7e9      	b.n	800326e <__sflush_r+0xda>
 800329a:	bf00      	nop
 800329c:	20400001 	.word	0x20400001

080032a0 <_fflush_r>:
 80032a0:	b538      	push	{r3, r4, r5, lr}
 80032a2:	690b      	ldr	r3, [r1, #16]
 80032a4:	4605      	mov	r5, r0
 80032a6:	460c      	mov	r4, r1
 80032a8:	b913      	cbnz	r3, 80032b0 <_fflush_r+0x10>
 80032aa:	2500      	movs	r5, #0
 80032ac:	4628      	mov	r0, r5
 80032ae:	bd38      	pop	{r3, r4, r5, pc}
 80032b0:	b118      	cbz	r0, 80032ba <_fflush_r+0x1a>
 80032b2:	6983      	ldr	r3, [r0, #24]
 80032b4:	b90b      	cbnz	r3, 80032ba <_fflush_r+0x1a>
 80032b6:	f000 f887 	bl	80033c8 <__sinit>
 80032ba:	4b14      	ldr	r3, [pc, #80]	; (800330c <_fflush_r+0x6c>)
 80032bc:	429c      	cmp	r4, r3
 80032be:	d11b      	bne.n	80032f8 <_fflush_r+0x58>
 80032c0:	686c      	ldr	r4, [r5, #4]
 80032c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0ef      	beq.n	80032aa <_fflush_r+0xa>
 80032ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80032cc:	07d0      	lsls	r0, r2, #31
 80032ce:	d404      	bmi.n	80032da <_fflush_r+0x3a>
 80032d0:	0599      	lsls	r1, r3, #22
 80032d2:	d402      	bmi.n	80032da <_fflush_r+0x3a>
 80032d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032d6:	f000 f915 	bl	8003504 <__retarget_lock_acquire_recursive>
 80032da:	4628      	mov	r0, r5
 80032dc:	4621      	mov	r1, r4
 80032de:	f7ff ff59 	bl	8003194 <__sflush_r>
 80032e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80032e4:	07da      	lsls	r2, r3, #31
 80032e6:	4605      	mov	r5, r0
 80032e8:	d4e0      	bmi.n	80032ac <_fflush_r+0xc>
 80032ea:	89a3      	ldrh	r3, [r4, #12]
 80032ec:	059b      	lsls	r3, r3, #22
 80032ee:	d4dd      	bmi.n	80032ac <_fflush_r+0xc>
 80032f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032f2:	f000 f908 	bl	8003506 <__retarget_lock_release_recursive>
 80032f6:	e7d9      	b.n	80032ac <_fflush_r+0xc>
 80032f8:	4b05      	ldr	r3, [pc, #20]	; (8003310 <_fflush_r+0x70>)
 80032fa:	429c      	cmp	r4, r3
 80032fc:	d101      	bne.n	8003302 <_fflush_r+0x62>
 80032fe:	68ac      	ldr	r4, [r5, #8]
 8003300:	e7df      	b.n	80032c2 <_fflush_r+0x22>
 8003302:	4b04      	ldr	r3, [pc, #16]	; (8003314 <_fflush_r+0x74>)
 8003304:	429c      	cmp	r4, r3
 8003306:	bf08      	it	eq
 8003308:	68ec      	ldreq	r4, [r5, #12]
 800330a:	e7da      	b.n	80032c2 <_fflush_r+0x22>
 800330c:	0800401c 	.word	0x0800401c
 8003310:	0800403c 	.word	0x0800403c
 8003314:	08003ffc 	.word	0x08003ffc

08003318 <std>:
 8003318:	2300      	movs	r3, #0
 800331a:	b510      	push	{r4, lr}
 800331c:	4604      	mov	r4, r0
 800331e:	e9c0 3300 	strd	r3, r3, [r0]
 8003322:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003326:	6083      	str	r3, [r0, #8]
 8003328:	8181      	strh	r1, [r0, #12]
 800332a:	6643      	str	r3, [r0, #100]	; 0x64
 800332c:	81c2      	strh	r2, [r0, #14]
 800332e:	6183      	str	r3, [r0, #24]
 8003330:	4619      	mov	r1, r3
 8003332:	2208      	movs	r2, #8
 8003334:	305c      	adds	r0, #92	; 0x5c
 8003336:	f7ff fdc1 	bl	8002ebc <memset>
 800333a:	4b05      	ldr	r3, [pc, #20]	; (8003350 <std+0x38>)
 800333c:	6263      	str	r3, [r4, #36]	; 0x24
 800333e:	4b05      	ldr	r3, [pc, #20]	; (8003354 <std+0x3c>)
 8003340:	62a3      	str	r3, [r4, #40]	; 0x28
 8003342:	4b05      	ldr	r3, [pc, #20]	; (8003358 <std+0x40>)
 8003344:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003346:	4b05      	ldr	r3, [pc, #20]	; (800335c <std+0x44>)
 8003348:	6224      	str	r4, [r4, #32]
 800334a:	6323      	str	r3, [r4, #48]	; 0x30
 800334c:	bd10      	pop	{r4, pc}
 800334e:	bf00      	nop
 8003350:	08003db1 	.word	0x08003db1
 8003354:	08003dd3 	.word	0x08003dd3
 8003358:	08003e0b 	.word	0x08003e0b
 800335c:	08003e2f 	.word	0x08003e2f

08003360 <_cleanup_r>:
 8003360:	4901      	ldr	r1, [pc, #4]	; (8003368 <_cleanup_r+0x8>)
 8003362:	f000 b8af 	b.w	80034c4 <_fwalk_reent>
 8003366:	bf00      	nop
 8003368:	080032a1 	.word	0x080032a1

0800336c <__sfmoreglue>:
 800336c:	b570      	push	{r4, r5, r6, lr}
 800336e:	1e4a      	subs	r2, r1, #1
 8003370:	2568      	movs	r5, #104	; 0x68
 8003372:	4355      	muls	r5, r2
 8003374:	460e      	mov	r6, r1
 8003376:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800337a:	f000 f979 	bl	8003670 <_malloc_r>
 800337e:	4604      	mov	r4, r0
 8003380:	b140      	cbz	r0, 8003394 <__sfmoreglue+0x28>
 8003382:	2100      	movs	r1, #0
 8003384:	e9c0 1600 	strd	r1, r6, [r0]
 8003388:	300c      	adds	r0, #12
 800338a:	60a0      	str	r0, [r4, #8]
 800338c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003390:	f7ff fd94 	bl	8002ebc <memset>
 8003394:	4620      	mov	r0, r4
 8003396:	bd70      	pop	{r4, r5, r6, pc}

08003398 <__sfp_lock_acquire>:
 8003398:	4801      	ldr	r0, [pc, #4]	; (80033a0 <__sfp_lock_acquire+0x8>)
 800339a:	f000 b8b3 	b.w	8003504 <__retarget_lock_acquire_recursive>
 800339e:	bf00      	nop
 80033a0:	20000138 	.word	0x20000138

080033a4 <__sfp_lock_release>:
 80033a4:	4801      	ldr	r0, [pc, #4]	; (80033ac <__sfp_lock_release+0x8>)
 80033a6:	f000 b8ae 	b.w	8003506 <__retarget_lock_release_recursive>
 80033aa:	bf00      	nop
 80033ac:	20000138 	.word	0x20000138

080033b0 <__sinit_lock_acquire>:
 80033b0:	4801      	ldr	r0, [pc, #4]	; (80033b8 <__sinit_lock_acquire+0x8>)
 80033b2:	f000 b8a7 	b.w	8003504 <__retarget_lock_acquire_recursive>
 80033b6:	bf00      	nop
 80033b8:	20000133 	.word	0x20000133

080033bc <__sinit_lock_release>:
 80033bc:	4801      	ldr	r0, [pc, #4]	; (80033c4 <__sinit_lock_release+0x8>)
 80033be:	f000 b8a2 	b.w	8003506 <__retarget_lock_release_recursive>
 80033c2:	bf00      	nop
 80033c4:	20000133 	.word	0x20000133

080033c8 <__sinit>:
 80033c8:	b510      	push	{r4, lr}
 80033ca:	4604      	mov	r4, r0
 80033cc:	f7ff fff0 	bl	80033b0 <__sinit_lock_acquire>
 80033d0:	69a3      	ldr	r3, [r4, #24]
 80033d2:	b11b      	cbz	r3, 80033dc <__sinit+0x14>
 80033d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033d8:	f7ff bff0 	b.w	80033bc <__sinit_lock_release>
 80033dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80033e0:	6523      	str	r3, [r4, #80]	; 0x50
 80033e2:	4b13      	ldr	r3, [pc, #76]	; (8003430 <__sinit+0x68>)
 80033e4:	4a13      	ldr	r2, [pc, #76]	; (8003434 <__sinit+0x6c>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80033ea:	42a3      	cmp	r3, r4
 80033ec:	bf04      	itt	eq
 80033ee:	2301      	moveq	r3, #1
 80033f0:	61a3      	streq	r3, [r4, #24]
 80033f2:	4620      	mov	r0, r4
 80033f4:	f000 f820 	bl	8003438 <__sfp>
 80033f8:	6060      	str	r0, [r4, #4]
 80033fa:	4620      	mov	r0, r4
 80033fc:	f000 f81c 	bl	8003438 <__sfp>
 8003400:	60a0      	str	r0, [r4, #8]
 8003402:	4620      	mov	r0, r4
 8003404:	f000 f818 	bl	8003438 <__sfp>
 8003408:	2200      	movs	r2, #0
 800340a:	60e0      	str	r0, [r4, #12]
 800340c:	2104      	movs	r1, #4
 800340e:	6860      	ldr	r0, [r4, #4]
 8003410:	f7ff ff82 	bl	8003318 <std>
 8003414:	68a0      	ldr	r0, [r4, #8]
 8003416:	2201      	movs	r2, #1
 8003418:	2109      	movs	r1, #9
 800341a:	f7ff ff7d 	bl	8003318 <std>
 800341e:	68e0      	ldr	r0, [r4, #12]
 8003420:	2202      	movs	r2, #2
 8003422:	2112      	movs	r1, #18
 8003424:	f7ff ff78 	bl	8003318 <std>
 8003428:	2301      	movs	r3, #1
 800342a:	61a3      	str	r3, [r4, #24]
 800342c:	e7d2      	b.n	80033d4 <__sinit+0xc>
 800342e:	bf00      	nop
 8003430:	08003ff8 	.word	0x08003ff8
 8003434:	08003361 	.word	0x08003361

08003438 <__sfp>:
 8003438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800343a:	4607      	mov	r7, r0
 800343c:	f7ff ffac 	bl	8003398 <__sfp_lock_acquire>
 8003440:	4b1e      	ldr	r3, [pc, #120]	; (80034bc <__sfp+0x84>)
 8003442:	681e      	ldr	r6, [r3, #0]
 8003444:	69b3      	ldr	r3, [r6, #24]
 8003446:	b913      	cbnz	r3, 800344e <__sfp+0x16>
 8003448:	4630      	mov	r0, r6
 800344a:	f7ff ffbd 	bl	80033c8 <__sinit>
 800344e:	3648      	adds	r6, #72	; 0x48
 8003450:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003454:	3b01      	subs	r3, #1
 8003456:	d503      	bpl.n	8003460 <__sfp+0x28>
 8003458:	6833      	ldr	r3, [r6, #0]
 800345a:	b30b      	cbz	r3, 80034a0 <__sfp+0x68>
 800345c:	6836      	ldr	r6, [r6, #0]
 800345e:	e7f7      	b.n	8003450 <__sfp+0x18>
 8003460:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003464:	b9d5      	cbnz	r5, 800349c <__sfp+0x64>
 8003466:	4b16      	ldr	r3, [pc, #88]	; (80034c0 <__sfp+0x88>)
 8003468:	60e3      	str	r3, [r4, #12]
 800346a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800346e:	6665      	str	r5, [r4, #100]	; 0x64
 8003470:	f000 f847 	bl	8003502 <__retarget_lock_init_recursive>
 8003474:	f7ff ff96 	bl	80033a4 <__sfp_lock_release>
 8003478:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800347c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003480:	6025      	str	r5, [r4, #0]
 8003482:	61a5      	str	r5, [r4, #24]
 8003484:	2208      	movs	r2, #8
 8003486:	4629      	mov	r1, r5
 8003488:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800348c:	f7ff fd16 	bl	8002ebc <memset>
 8003490:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003494:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003498:	4620      	mov	r0, r4
 800349a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800349c:	3468      	adds	r4, #104	; 0x68
 800349e:	e7d9      	b.n	8003454 <__sfp+0x1c>
 80034a0:	2104      	movs	r1, #4
 80034a2:	4638      	mov	r0, r7
 80034a4:	f7ff ff62 	bl	800336c <__sfmoreglue>
 80034a8:	4604      	mov	r4, r0
 80034aa:	6030      	str	r0, [r6, #0]
 80034ac:	2800      	cmp	r0, #0
 80034ae:	d1d5      	bne.n	800345c <__sfp+0x24>
 80034b0:	f7ff ff78 	bl	80033a4 <__sfp_lock_release>
 80034b4:	230c      	movs	r3, #12
 80034b6:	603b      	str	r3, [r7, #0]
 80034b8:	e7ee      	b.n	8003498 <__sfp+0x60>
 80034ba:	bf00      	nop
 80034bc:	08003ff8 	.word	0x08003ff8
 80034c0:	ffff0001 	.word	0xffff0001

080034c4 <_fwalk_reent>:
 80034c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034c8:	4606      	mov	r6, r0
 80034ca:	4688      	mov	r8, r1
 80034cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80034d0:	2700      	movs	r7, #0
 80034d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80034d6:	f1b9 0901 	subs.w	r9, r9, #1
 80034da:	d505      	bpl.n	80034e8 <_fwalk_reent+0x24>
 80034dc:	6824      	ldr	r4, [r4, #0]
 80034de:	2c00      	cmp	r4, #0
 80034e0:	d1f7      	bne.n	80034d2 <_fwalk_reent+0xe>
 80034e2:	4638      	mov	r0, r7
 80034e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034e8:	89ab      	ldrh	r3, [r5, #12]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d907      	bls.n	80034fe <_fwalk_reent+0x3a>
 80034ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80034f2:	3301      	adds	r3, #1
 80034f4:	d003      	beq.n	80034fe <_fwalk_reent+0x3a>
 80034f6:	4629      	mov	r1, r5
 80034f8:	4630      	mov	r0, r6
 80034fa:	47c0      	blx	r8
 80034fc:	4307      	orrs	r7, r0
 80034fe:	3568      	adds	r5, #104	; 0x68
 8003500:	e7e9      	b.n	80034d6 <_fwalk_reent+0x12>

08003502 <__retarget_lock_init_recursive>:
 8003502:	4770      	bx	lr

08003504 <__retarget_lock_acquire_recursive>:
 8003504:	4770      	bx	lr

08003506 <__retarget_lock_release_recursive>:
 8003506:	4770      	bx	lr

08003508 <__swhatbuf_r>:
 8003508:	b570      	push	{r4, r5, r6, lr}
 800350a:	460e      	mov	r6, r1
 800350c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003510:	2900      	cmp	r1, #0
 8003512:	b096      	sub	sp, #88	; 0x58
 8003514:	4614      	mov	r4, r2
 8003516:	461d      	mov	r5, r3
 8003518:	da07      	bge.n	800352a <__swhatbuf_r+0x22>
 800351a:	2300      	movs	r3, #0
 800351c:	602b      	str	r3, [r5, #0]
 800351e:	89b3      	ldrh	r3, [r6, #12]
 8003520:	061a      	lsls	r2, r3, #24
 8003522:	d410      	bmi.n	8003546 <__swhatbuf_r+0x3e>
 8003524:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003528:	e00e      	b.n	8003548 <__swhatbuf_r+0x40>
 800352a:	466a      	mov	r2, sp
 800352c:	f000 fca6 	bl	8003e7c <_fstat_r>
 8003530:	2800      	cmp	r0, #0
 8003532:	dbf2      	blt.n	800351a <__swhatbuf_r+0x12>
 8003534:	9a01      	ldr	r2, [sp, #4]
 8003536:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800353a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800353e:	425a      	negs	r2, r3
 8003540:	415a      	adcs	r2, r3
 8003542:	602a      	str	r2, [r5, #0]
 8003544:	e7ee      	b.n	8003524 <__swhatbuf_r+0x1c>
 8003546:	2340      	movs	r3, #64	; 0x40
 8003548:	2000      	movs	r0, #0
 800354a:	6023      	str	r3, [r4, #0]
 800354c:	b016      	add	sp, #88	; 0x58
 800354e:	bd70      	pop	{r4, r5, r6, pc}

08003550 <__smakebuf_r>:
 8003550:	898b      	ldrh	r3, [r1, #12]
 8003552:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003554:	079d      	lsls	r5, r3, #30
 8003556:	4606      	mov	r6, r0
 8003558:	460c      	mov	r4, r1
 800355a:	d507      	bpl.n	800356c <__smakebuf_r+0x1c>
 800355c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003560:	6023      	str	r3, [r4, #0]
 8003562:	6123      	str	r3, [r4, #16]
 8003564:	2301      	movs	r3, #1
 8003566:	6163      	str	r3, [r4, #20]
 8003568:	b002      	add	sp, #8
 800356a:	bd70      	pop	{r4, r5, r6, pc}
 800356c:	ab01      	add	r3, sp, #4
 800356e:	466a      	mov	r2, sp
 8003570:	f7ff ffca 	bl	8003508 <__swhatbuf_r>
 8003574:	9900      	ldr	r1, [sp, #0]
 8003576:	4605      	mov	r5, r0
 8003578:	4630      	mov	r0, r6
 800357a:	f000 f879 	bl	8003670 <_malloc_r>
 800357e:	b948      	cbnz	r0, 8003594 <__smakebuf_r+0x44>
 8003580:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003584:	059a      	lsls	r2, r3, #22
 8003586:	d4ef      	bmi.n	8003568 <__smakebuf_r+0x18>
 8003588:	f023 0303 	bic.w	r3, r3, #3
 800358c:	f043 0302 	orr.w	r3, r3, #2
 8003590:	81a3      	strh	r3, [r4, #12]
 8003592:	e7e3      	b.n	800355c <__smakebuf_r+0xc>
 8003594:	4b0d      	ldr	r3, [pc, #52]	; (80035cc <__smakebuf_r+0x7c>)
 8003596:	62b3      	str	r3, [r6, #40]	; 0x28
 8003598:	89a3      	ldrh	r3, [r4, #12]
 800359a:	6020      	str	r0, [r4, #0]
 800359c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035a0:	81a3      	strh	r3, [r4, #12]
 80035a2:	9b00      	ldr	r3, [sp, #0]
 80035a4:	6163      	str	r3, [r4, #20]
 80035a6:	9b01      	ldr	r3, [sp, #4]
 80035a8:	6120      	str	r0, [r4, #16]
 80035aa:	b15b      	cbz	r3, 80035c4 <__smakebuf_r+0x74>
 80035ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80035b0:	4630      	mov	r0, r6
 80035b2:	f000 fc75 	bl	8003ea0 <_isatty_r>
 80035b6:	b128      	cbz	r0, 80035c4 <__smakebuf_r+0x74>
 80035b8:	89a3      	ldrh	r3, [r4, #12]
 80035ba:	f023 0303 	bic.w	r3, r3, #3
 80035be:	f043 0301 	orr.w	r3, r3, #1
 80035c2:	81a3      	strh	r3, [r4, #12]
 80035c4:	89a0      	ldrh	r0, [r4, #12]
 80035c6:	4305      	orrs	r5, r0
 80035c8:	81a5      	strh	r5, [r4, #12]
 80035ca:	e7cd      	b.n	8003568 <__smakebuf_r+0x18>
 80035cc:	08003361 	.word	0x08003361

080035d0 <_free_r>:
 80035d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80035d2:	2900      	cmp	r1, #0
 80035d4:	d048      	beq.n	8003668 <_free_r+0x98>
 80035d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035da:	9001      	str	r0, [sp, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f1a1 0404 	sub.w	r4, r1, #4
 80035e2:	bfb8      	it	lt
 80035e4:	18e4      	addlt	r4, r4, r3
 80035e6:	f000 fc7d 	bl	8003ee4 <__malloc_lock>
 80035ea:	4a20      	ldr	r2, [pc, #128]	; (800366c <_free_r+0x9c>)
 80035ec:	9801      	ldr	r0, [sp, #4]
 80035ee:	6813      	ldr	r3, [r2, #0]
 80035f0:	4615      	mov	r5, r2
 80035f2:	b933      	cbnz	r3, 8003602 <_free_r+0x32>
 80035f4:	6063      	str	r3, [r4, #4]
 80035f6:	6014      	str	r4, [r2, #0]
 80035f8:	b003      	add	sp, #12
 80035fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80035fe:	f000 bc77 	b.w	8003ef0 <__malloc_unlock>
 8003602:	42a3      	cmp	r3, r4
 8003604:	d90b      	bls.n	800361e <_free_r+0x4e>
 8003606:	6821      	ldr	r1, [r4, #0]
 8003608:	1862      	adds	r2, r4, r1
 800360a:	4293      	cmp	r3, r2
 800360c:	bf04      	itt	eq
 800360e:	681a      	ldreq	r2, [r3, #0]
 8003610:	685b      	ldreq	r3, [r3, #4]
 8003612:	6063      	str	r3, [r4, #4]
 8003614:	bf04      	itt	eq
 8003616:	1852      	addeq	r2, r2, r1
 8003618:	6022      	streq	r2, [r4, #0]
 800361a:	602c      	str	r4, [r5, #0]
 800361c:	e7ec      	b.n	80035f8 <_free_r+0x28>
 800361e:	461a      	mov	r2, r3
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	b10b      	cbz	r3, 8003628 <_free_r+0x58>
 8003624:	42a3      	cmp	r3, r4
 8003626:	d9fa      	bls.n	800361e <_free_r+0x4e>
 8003628:	6811      	ldr	r1, [r2, #0]
 800362a:	1855      	adds	r5, r2, r1
 800362c:	42a5      	cmp	r5, r4
 800362e:	d10b      	bne.n	8003648 <_free_r+0x78>
 8003630:	6824      	ldr	r4, [r4, #0]
 8003632:	4421      	add	r1, r4
 8003634:	1854      	adds	r4, r2, r1
 8003636:	42a3      	cmp	r3, r4
 8003638:	6011      	str	r1, [r2, #0]
 800363a:	d1dd      	bne.n	80035f8 <_free_r+0x28>
 800363c:	681c      	ldr	r4, [r3, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	6053      	str	r3, [r2, #4]
 8003642:	4421      	add	r1, r4
 8003644:	6011      	str	r1, [r2, #0]
 8003646:	e7d7      	b.n	80035f8 <_free_r+0x28>
 8003648:	d902      	bls.n	8003650 <_free_r+0x80>
 800364a:	230c      	movs	r3, #12
 800364c:	6003      	str	r3, [r0, #0]
 800364e:	e7d3      	b.n	80035f8 <_free_r+0x28>
 8003650:	6825      	ldr	r5, [r4, #0]
 8003652:	1961      	adds	r1, r4, r5
 8003654:	428b      	cmp	r3, r1
 8003656:	bf04      	itt	eq
 8003658:	6819      	ldreq	r1, [r3, #0]
 800365a:	685b      	ldreq	r3, [r3, #4]
 800365c:	6063      	str	r3, [r4, #4]
 800365e:	bf04      	itt	eq
 8003660:	1949      	addeq	r1, r1, r5
 8003662:	6021      	streq	r1, [r4, #0]
 8003664:	6054      	str	r4, [r2, #4]
 8003666:	e7c7      	b.n	80035f8 <_free_r+0x28>
 8003668:	b003      	add	sp, #12
 800366a:	bd30      	pop	{r4, r5, pc}
 800366c:	20000098 	.word	0x20000098

08003670 <_malloc_r>:
 8003670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003672:	1ccd      	adds	r5, r1, #3
 8003674:	f025 0503 	bic.w	r5, r5, #3
 8003678:	3508      	adds	r5, #8
 800367a:	2d0c      	cmp	r5, #12
 800367c:	bf38      	it	cc
 800367e:	250c      	movcc	r5, #12
 8003680:	2d00      	cmp	r5, #0
 8003682:	4606      	mov	r6, r0
 8003684:	db01      	blt.n	800368a <_malloc_r+0x1a>
 8003686:	42a9      	cmp	r1, r5
 8003688:	d903      	bls.n	8003692 <_malloc_r+0x22>
 800368a:	230c      	movs	r3, #12
 800368c:	6033      	str	r3, [r6, #0]
 800368e:	2000      	movs	r0, #0
 8003690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003692:	f000 fc27 	bl	8003ee4 <__malloc_lock>
 8003696:	4921      	ldr	r1, [pc, #132]	; (800371c <_malloc_r+0xac>)
 8003698:	680a      	ldr	r2, [r1, #0]
 800369a:	4614      	mov	r4, r2
 800369c:	b99c      	cbnz	r4, 80036c6 <_malloc_r+0x56>
 800369e:	4f20      	ldr	r7, [pc, #128]	; (8003720 <_malloc_r+0xb0>)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	b923      	cbnz	r3, 80036ae <_malloc_r+0x3e>
 80036a4:	4621      	mov	r1, r4
 80036a6:	4630      	mov	r0, r6
 80036a8:	f000 fb72 	bl	8003d90 <_sbrk_r>
 80036ac:	6038      	str	r0, [r7, #0]
 80036ae:	4629      	mov	r1, r5
 80036b0:	4630      	mov	r0, r6
 80036b2:	f000 fb6d 	bl	8003d90 <_sbrk_r>
 80036b6:	1c43      	adds	r3, r0, #1
 80036b8:	d123      	bne.n	8003702 <_malloc_r+0x92>
 80036ba:	230c      	movs	r3, #12
 80036bc:	6033      	str	r3, [r6, #0]
 80036be:	4630      	mov	r0, r6
 80036c0:	f000 fc16 	bl	8003ef0 <__malloc_unlock>
 80036c4:	e7e3      	b.n	800368e <_malloc_r+0x1e>
 80036c6:	6823      	ldr	r3, [r4, #0]
 80036c8:	1b5b      	subs	r3, r3, r5
 80036ca:	d417      	bmi.n	80036fc <_malloc_r+0x8c>
 80036cc:	2b0b      	cmp	r3, #11
 80036ce:	d903      	bls.n	80036d8 <_malloc_r+0x68>
 80036d0:	6023      	str	r3, [r4, #0]
 80036d2:	441c      	add	r4, r3
 80036d4:	6025      	str	r5, [r4, #0]
 80036d6:	e004      	b.n	80036e2 <_malloc_r+0x72>
 80036d8:	6863      	ldr	r3, [r4, #4]
 80036da:	42a2      	cmp	r2, r4
 80036dc:	bf0c      	ite	eq
 80036de:	600b      	streq	r3, [r1, #0]
 80036e0:	6053      	strne	r3, [r2, #4]
 80036e2:	4630      	mov	r0, r6
 80036e4:	f000 fc04 	bl	8003ef0 <__malloc_unlock>
 80036e8:	f104 000b 	add.w	r0, r4, #11
 80036ec:	1d23      	adds	r3, r4, #4
 80036ee:	f020 0007 	bic.w	r0, r0, #7
 80036f2:	1ac2      	subs	r2, r0, r3
 80036f4:	d0cc      	beq.n	8003690 <_malloc_r+0x20>
 80036f6:	1a1b      	subs	r3, r3, r0
 80036f8:	50a3      	str	r3, [r4, r2]
 80036fa:	e7c9      	b.n	8003690 <_malloc_r+0x20>
 80036fc:	4622      	mov	r2, r4
 80036fe:	6864      	ldr	r4, [r4, #4]
 8003700:	e7cc      	b.n	800369c <_malloc_r+0x2c>
 8003702:	1cc4      	adds	r4, r0, #3
 8003704:	f024 0403 	bic.w	r4, r4, #3
 8003708:	42a0      	cmp	r0, r4
 800370a:	d0e3      	beq.n	80036d4 <_malloc_r+0x64>
 800370c:	1a21      	subs	r1, r4, r0
 800370e:	4630      	mov	r0, r6
 8003710:	f000 fb3e 	bl	8003d90 <_sbrk_r>
 8003714:	3001      	adds	r0, #1
 8003716:	d1dd      	bne.n	80036d4 <_malloc_r+0x64>
 8003718:	e7cf      	b.n	80036ba <_malloc_r+0x4a>
 800371a:	bf00      	nop
 800371c:	20000098 	.word	0x20000098
 8003720:	2000009c 	.word	0x2000009c

08003724 <__sfputc_r>:
 8003724:	6893      	ldr	r3, [r2, #8]
 8003726:	3b01      	subs	r3, #1
 8003728:	2b00      	cmp	r3, #0
 800372a:	b410      	push	{r4}
 800372c:	6093      	str	r3, [r2, #8]
 800372e:	da08      	bge.n	8003742 <__sfputc_r+0x1e>
 8003730:	6994      	ldr	r4, [r2, #24]
 8003732:	42a3      	cmp	r3, r4
 8003734:	db01      	blt.n	800373a <__sfputc_r+0x16>
 8003736:	290a      	cmp	r1, #10
 8003738:	d103      	bne.n	8003742 <__sfputc_r+0x1e>
 800373a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800373e:	f7ff bc69 	b.w	8003014 <__swbuf_r>
 8003742:	6813      	ldr	r3, [r2, #0]
 8003744:	1c58      	adds	r0, r3, #1
 8003746:	6010      	str	r0, [r2, #0]
 8003748:	7019      	strb	r1, [r3, #0]
 800374a:	4608      	mov	r0, r1
 800374c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003750:	4770      	bx	lr

08003752 <__sfputs_r>:
 8003752:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003754:	4606      	mov	r6, r0
 8003756:	460f      	mov	r7, r1
 8003758:	4614      	mov	r4, r2
 800375a:	18d5      	adds	r5, r2, r3
 800375c:	42ac      	cmp	r4, r5
 800375e:	d101      	bne.n	8003764 <__sfputs_r+0x12>
 8003760:	2000      	movs	r0, #0
 8003762:	e007      	b.n	8003774 <__sfputs_r+0x22>
 8003764:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003768:	463a      	mov	r2, r7
 800376a:	4630      	mov	r0, r6
 800376c:	f7ff ffda 	bl	8003724 <__sfputc_r>
 8003770:	1c43      	adds	r3, r0, #1
 8003772:	d1f3      	bne.n	800375c <__sfputs_r+0xa>
 8003774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003778 <_vfiprintf_r>:
 8003778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800377c:	460d      	mov	r5, r1
 800377e:	b09d      	sub	sp, #116	; 0x74
 8003780:	4614      	mov	r4, r2
 8003782:	4698      	mov	r8, r3
 8003784:	4606      	mov	r6, r0
 8003786:	b118      	cbz	r0, 8003790 <_vfiprintf_r+0x18>
 8003788:	6983      	ldr	r3, [r0, #24]
 800378a:	b90b      	cbnz	r3, 8003790 <_vfiprintf_r+0x18>
 800378c:	f7ff fe1c 	bl	80033c8 <__sinit>
 8003790:	4b89      	ldr	r3, [pc, #548]	; (80039b8 <_vfiprintf_r+0x240>)
 8003792:	429d      	cmp	r5, r3
 8003794:	d11b      	bne.n	80037ce <_vfiprintf_r+0x56>
 8003796:	6875      	ldr	r5, [r6, #4]
 8003798:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800379a:	07d9      	lsls	r1, r3, #31
 800379c:	d405      	bmi.n	80037aa <_vfiprintf_r+0x32>
 800379e:	89ab      	ldrh	r3, [r5, #12]
 80037a0:	059a      	lsls	r2, r3, #22
 80037a2:	d402      	bmi.n	80037aa <_vfiprintf_r+0x32>
 80037a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80037a6:	f7ff fead 	bl	8003504 <__retarget_lock_acquire_recursive>
 80037aa:	89ab      	ldrh	r3, [r5, #12]
 80037ac:	071b      	lsls	r3, r3, #28
 80037ae:	d501      	bpl.n	80037b4 <_vfiprintf_r+0x3c>
 80037b0:	692b      	ldr	r3, [r5, #16]
 80037b2:	b9eb      	cbnz	r3, 80037f0 <_vfiprintf_r+0x78>
 80037b4:	4629      	mov	r1, r5
 80037b6:	4630      	mov	r0, r6
 80037b8:	f7ff fc7e 	bl	80030b8 <__swsetup_r>
 80037bc:	b1c0      	cbz	r0, 80037f0 <_vfiprintf_r+0x78>
 80037be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80037c0:	07dc      	lsls	r4, r3, #31
 80037c2:	d50e      	bpl.n	80037e2 <_vfiprintf_r+0x6a>
 80037c4:	f04f 30ff 	mov.w	r0, #4294967295
 80037c8:	b01d      	add	sp, #116	; 0x74
 80037ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037ce:	4b7b      	ldr	r3, [pc, #492]	; (80039bc <_vfiprintf_r+0x244>)
 80037d0:	429d      	cmp	r5, r3
 80037d2:	d101      	bne.n	80037d8 <_vfiprintf_r+0x60>
 80037d4:	68b5      	ldr	r5, [r6, #8]
 80037d6:	e7df      	b.n	8003798 <_vfiprintf_r+0x20>
 80037d8:	4b79      	ldr	r3, [pc, #484]	; (80039c0 <_vfiprintf_r+0x248>)
 80037da:	429d      	cmp	r5, r3
 80037dc:	bf08      	it	eq
 80037de:	68f5      	ldreq	r5, [r6, #12]
 80037e0:	e7da      	b.n	8003798 <_vfiprintf_r+0x20>
 80037e2:	89ab      	ldrh	r3, [r5, #12]
 80037e4:	0598      	lsls	r0, r3, #22
 80037e6:	d4ed      	bmi.n	80037c4 <_vfiprintf_r+0x4c>
 80037e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80037ea:	f7ff fe8c 	bl	8003506 <__retarget_lock_release_recursive>
 80037ee:	e7e9      	b.n	80037c4 <_vfiprintf_r+0x4c>
 80037f0:	2300      	movs	r3, #0
 80037f2:	9309      	str	r3, [sp, #36]	; 0x24
 80037f4:	2320      	movs	r3, #32
 80037f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80037fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80037fe:	2330      	movs	r3, #48	; 0x30
 8003800:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80039c4 <_vfiprintf_r+0x24c>
 8003804:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003808:	f04f 0901 	mov.w	r9, #1
 800380c:	4623      	mov	r3, r4
 800380e:	469a      	mov	sl, r3
 8003810:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003814:	b10a      	cbz	r2, 800381a <_vfiprintf_r+0xa2>
 8003816:	2a25      	cmp	r2, #37	; 0x25
 8003818:	d1f9      	bne.n	800380e <_vfiprintf_r+0x96>
 800381a:	ebba 0b04 	subs.w	fp, sl, r4
 800381e:	d00b      	beq.n	8003838 <_vfiprintf_r+0xc0>
 8003820:	465b      	mov	r3, fp
 8003822:	4622      	mov	r2, r4
 8003824:	4629      	mov	r1, r5
 8003826:	4630      	mov	r0, r6
 8003828:	f7ff ff93 	bl	8003752 <__sfputs_r>
 800382c:	3001      	adds	r0, #1
 800382e:	f000 80aa 	beq.w	8003986 <_vfiprintf_r+0x20e>
 8003832:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003834:	445a      	add	r2, fp
 8003836:	9209      	str	r2, [sp, #36]	; 0x24
 8003838:	f89a 3000 	ldrb.w	r3, [sl]
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 80a2 	beq.w	8003986 <_vfiprintf_r+0x20e>
 8003842:	2300      	movs	r3, #0
 8003844:	f04f 32ff 	mov.w	r2, #4294967295
 8003848:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800384c:	f10a 0a01 	add.w	sl, sl, #1
 8003850:	9304      	str	r3, [sp, #16]
 8003852:	9307      	str	r3, [sp, #28]
 8003854:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003858:	931a      	str	r3, [sp, #104]	; 0x68
 800385a:	4654      	mov	r4, sl
 800385c:	2205      	movs	r2, #5
 800385e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003862:	4858      	ldr	r0, [pc, #352]	; (80039c4 <_vfiprintf_r+0x24c>)
 8003864:	f7fc fcc4 	bl	80001f0 <memchr>
 8003868:	9a04      	ldr	r2, [sp, #16]
 800386a:	b9d8      	cbnz	r0, 80038a4 <_vfiprintf_r+0x12c>
 800386c:	06d1      	lsls	r1, r2, #27
 800386e:	bf44      	itt	mi
 8003870:	2320      	movmi	r3, #32
 8003872:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003876:	0713      	lsls	r3, r2, #28
 8003878:	bf44      	itt	mi
 800387a:	232b      	movmi	r3, #43	; 0x2b
 800387c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003880:	f89a 3000 	ldrb.w	r3, [sl]
 8003884:	2b2a      	cmp	r3, #42	; 0x2a
 8003886:	d015      	beq.n	80038b4 <_vfiprintf_r+0x13c>
 8003888:	9a07      	ldr	r2, [sp, #28]
 800388a:	4654      	mov	r4, sl
 800388c:	2000      	movs	r0, #0
 800388e:	f04f 0c0a 	mov.w	ip, #10
 8003892:	4621      	mov	r1, r4
 8003894:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003898:	3b30      	subs	r3, #48	; 0x30
 800389a:	2b09      	cmp	r3, #9
 800389c:	d94e      	bls.n	800393c <_vfiprintf_r+0x1c4>
 800389e:	b1b0      	cbz	r0, 80038ce <_vfiprintf_r+0x156>
 80038a0:	9207      	str	r2, [sp, #28]
 80038a2:	e014      	b.n	80038ce <_vfiprintf_r+0x156>
 80038a4:	eba0 0308 	sub.w	r3, r0, r8
 80038a8:	fa09 f303 	lsl.w	r3, r9, r3
 80038ac:	4313      	orrs	r3, r2
 80038ae:	9304      	str	r3, [sp, #16]
 80038b0:	46a2      	mov	sl, r4
 80038b2:	e7d2      	b.n	800385a <_vfiprintf_r+0xe2>
 80038b4:	9b03      	ldr	r3, [sp, #12]
 80038b6:	1d19      	adds	r1, r3, #4
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	9103      	str	r1, [sp, #12]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	bfbb      	ittet	lt
 80038c0:	425b      	neglt	r3, r3
 80038c2:	f042 0202 	orrlt.w	r2, r2, #2
 80038c6:	9307      	strge	r3, [sp, #28]
 80038c8:	9307      	strlt	r3, [sp, #28]
 80038ca:	bfb8      	it	lt
 80038cc:	9204      	strlt	r2, [sp, #16]
 80038ce:	7823      	ldrb	r3, [r4, #0]
 80038d0:	2b2e      	cmp	r3, #46	; 0x2e
 80038d2:	d10c      	bne.n	80038ee <_vfiprintf_r+0x176>
 80038d4:	7863      	ldrb	r3, [r4, #1]
 80038d6:	2b2a      	cmp	r3, #42	; 0x2a
 80038d8:	d135      	bne.n	8003946 <_vfiprintf_r+0x1ce>
 80038da:	9b03      	ldr	r3, [sp, #12]
 80038dc:	1d1a      	adds	r2, r3, #4
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	9203      	str	r2, [sp, #12]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	bfb8      	it	lt
 80038e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80038ea:	3402      	adds	r4, #2
 80038ec:	9305      	str	r3, [sp, #20]
 80038ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80039d4 <_vfiprintf_r+0x25c>
 80038f2:	7821      	ldrb	r1, [r4, #0]
 80038f4:	2203      	movs	r2, #3
 80038f6:	4650      	mov	r0, sl
 80038f8:	f7fc fc7a 	bl	80001f0 <memchr>
 80038fc:	b140      	cbz	r0, 8003910 <_vfiprintf_r+0x198>
 80038fe:	2340      	movs	r3, #64	; 0x40
 8003900:	eba0 000a 	sub.w	r0, r0, sl
 8003904:	fa03 f000 	lsl.w	r0, r3, r0
 8003908:	9b04      	ldr	r3, [sp, #16]
 800390a:	4303      	orrs	r3, r0
 800390c:	3401      	adds	r4, #1
 800390e:	9304      	str	r3, [sp, #16]
 8003910:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003914:	482c      	ldr	r0, [pc, #176]	; (80039c8 <_vfiprintf_r+0x250>)
 8003916:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800391a:	2206      	movs	r2, #6
 800391c:	f7fc fc68 	bl	80001f0 <memchr>
 8003920:	2800      	cmp	r0, #0
 8003922:	d03f      	beq.n	80039a4 <_vfiprintf_r+0x22c>
 8003924:	4b29      	ldr	r3, [pc, #164]	; (80039cc <_vfiprintf_r+0x254>)
 8003926:	bb1b      	cbnz	r3, 8003970 <_vfiprintf_r+0x1f8>
 8003928:	9b03      	ldr	r3, [sp, #12]
 800392a:	3307      	adds	r3, #7
 800392c:	f023 0307 	bic.w	r3, r3, #7
 8003930:	3308      	adds	r3, #8
 8003932:	9303      	str	r3, [sp, #12]
 8003934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003936:	443b      	add	r3, r7
 8003938:	9309      	str	r3, [sp, #36]	; 0x24
 800393a:	e767      	b.n	800380c <_vfiprintf_r+0x94>
 800393c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003940:	460c      	mov	r4, r1
 8003942:	2001      	movs	r0, #1
 8003944:	e7a5      	b.n	8003892 <_vfiprintf_r+0x11a>
 8003946:	2300      	movs	r3, #0
 8003948:	3401      	adds	r4, #1
 800394a:	9305      	str	r3, [sp, #20]
 800394c:	4619      	mov	r1, r3
 800394e:	f04f 0c0a 	mov.w	ip, #10
 8003952:	4620      	mov	r0, r4
 8003954:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003958:	3a30      	subs	r2, #48	; 0x30
 800395a:	2a09      	cmp	r2, #9
 800395c:	d903      	bls.n	8003966 <_vfiprintf_r+0x1ee>
 800395e:	2b00      	cmp	r3, #0
 8003960:	d0c5      	beq.n	80038ee <_vfiprintf_r+0x176>
 8003962:	9105      	str	r1, [sp, #20]
 8003964:	e7c3      	b.n	80038ee <_vfiprintf_r+0x176>
 8003966:	fb0c 2101 	mla	r1, ip, r1, r2
 800396a:	4604      	mov	r4, r0
 800396c:	2301      	movs	r3, #1
 800396e:	e7f0      	b.n	8003952 <_vfiprintf_r+0x1da>
 8003970:	ab03      	add	r3, sp, #12
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	462a      	mov	r2, r5
 8003976:	4b16      	ldr	r3, [pc, #88]	; (80039d0 <_vfiprintf_r+0x258>)
 8003978:	a904      	add	r1, sp, #16
 800397a:	4630      	mov	r0, r6
 800397c:	f3af 8000 	nop.w
 8003980:	4607      	mov	r7, r0
 8003982:	1c78      	adds	r0, r7, #1
 8003984:	d1d6      	bne.n	8003934 <_vfiprintf_r+0x1bc>
 8003986:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003988:	07d9      	lsls	r1, r3, #31
 800398a:	d405      	bmi.n	8003998 <_vfiprintf_r+0x220>
 800398c:	89ab      	ldrh	r3, [r5, #12]
 800398e:	059a      	lsls	r2, r3, #22
 8003990:	d402      	bmi.n	8003998 <_vfiprintf_r+0x220>
 8003992:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003994:	f7ff fdb7 	bl	8003506 <__retarget_lock_release_recursive>
 8003998:	89ab      	ldrh	r3, [r5, #12]
 800399a:	065b      	lsls	r3, r3, #25
 800399c:	f53f af12 	bmi.w	80037c4 <_vfiprintf_r+0x4c>
 80039a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80039a2:	e711      	b.n	80037c8 <_vfiprintf_r+0x50>
 80039a4:	ab03      	add	r3, sp, #12
 80039a6:	9300      	str	r3, [sp, #0]
 80039a8:	462a      	mov	r2, r5
 80039aa:	4b09      	ldr	r3, [pc, #36]	; (80039d0 <_vfiprintf_r+0x258>)
 80039ac:	a904      	add	r1, sp, #16
 80039ae:	4630      	mov	r0, r6
 80039b0:	f000 f880 	bl	8003ab4 <_printf_i>
 80039b4:	e7e4      	b.n	8003980 <_vfiprintf_r+0x208>
 80039b6:	bf00      	nop
 80039b8:	0800401c 	.word	0x0800401c
 80039bc:	0800403c 	.word	0x0800403c
 80039c0:	08003ffc 	.word	0x08003ffc
 80039c4:	0800405c 	.word	0x0800405c
 80039c8:	08004066 	.word	0x08004066
 80039cc:	00000000 	.word	0x00000000
 80039d0:	08003753 	.word	0x08003753
 80039d4:	08004062 	.word	0x08004062

080039d8 <_printf_common>:
 80039d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039dc:	4616      	mov	r6, r2
 80039de:	4699      	mov	r9, r3
 80039e0:	688a      	ldr	r2, [r1, #8]
 80039e2:	690b      	ldr	r3, [r1, #16]
 80039e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80039e8:	4293      	cmp	r3, r2
 80039ea:	bfb8      	it	lt
 80039ec:	4613      	movlt	r3, r2
 80039ee:	6033      	str	r3, [r6, #0]
 80039f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80039f4:	4607      	mov	r7, r0
 80039f6:	460c      	mov	r4, r1
 80039f8:	b10a      	cbz	r2, 80039fe <_printf_common+0x26>
 80039fa:	3301      	adds	r3, #1
 80039fc:	6033      	str	r3, [r6, #0]
 80039fe:	6823      	ldr	r3, [r4, #0]
 8003a00:	0699      	lsls	r1, r3, #26
 8003a02:	bf42      	ittt	mi
 8003a04:	6833      	ldrmi	r3, [r6, #0]
 8003a06:	3302      	addmi	r3, #2
 8003a08:	6033      	strmi	r3, [r6, #0]
 8003a0a:	6825      	ldr	r5, [r4, #0]
 8003a0c:	f015 0506 	ands.w	r5, r5, #6
 8003a10:	d106      	bne.n	8003a20 <_printf_common+0x48>
 8003a12:	f104 0a19 	add.w	sl, r4, #25
 8003a16:	68e3      	ldr	r3, [r4, #12]
 8003a18:	6832      	ldr	r2, [r6, #0]
 8003a1a:	1a9b      	subs	r3, r3, r2
 8003a1c:	42ab      	cmp	r3, r5
 8003a1e:	dc26      	bgt.n	8003a6e <_printf_common+0x96>
 8003a20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a24:	1e13      	subs	r3, r2, #0
 8003a26:	6822      	ldr	r2, [r4, #0]
 8003a28:	bf18      	it	ne
 8003a2a:	2301      	movne	r3, #1
 8003a2c:	0692      	lsls	r2, r2, #26
 8003a2e:	d42b      	bmi.n	8003a88 <_printf_common+0xb0>
 8003a30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a34:	4649      	mov	r1, r9
 8003a36:	4638      	mov	r0, r7
 8003a38:	47c0      	blx	r8
 8003a3a:	3001      	adds	r0, #1
 8003a3c:	d01e      	beq.n	8003a7c <_printf_common+0xa4>
 8003a3e:	6823      	ldr	r3, [r4, #0]
 8003a40:	68e5      	ldr	r5, [r4, #12]
 8003a42:	6832      	ldr	r2, [r6, #0]
 8003a44:	f003 0306 	and.w	r3, r3, #6
 8003a48:	2b04      	cmp	r3, #4
 8003a4a:	bf08      	it	eq
 8003a4c:	1aad      	subeq	r5, r5, r2
 8003a4e:	68a3      	ldr	r3, [r4, #8]
 8003a50:	6922      	ldr	r2, [r4, #16]
 8003a52:	bf0c      	ite	eq
 8003a54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a58:	2500      	movne	r5, #0
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	bfc4      	itt	gt
 8003a5e:	1a9b      	subgt	r3, r3, r2
 8003a60:	18ed      	addgt	r5, r5, r3
 8003a62:	2600      	movs	r6, #0
 8003a64:	341a      	adds	r4, #26
 8003a66:	42b5      	cmp	r5, r6
 8003a68:	d11a      	bne.n	8003aa0 <_printf_common+0xc8>
 8003a6a:	2000      	movs	r0, #0
 8003a6c:	e008      	b.n	8003a80 <_printf_common+0xa8>
 8003a6e:	2301      	movs	r3, #1
 8003a70:	4652      	mov	r2, sl
 8003a72:	4649      	mov	r1, r9
 8003a74:	4638      	mov	r0, r7
 8003a76:	47c0      	blx	r8
 8003a78:	3001      	adds	r0, #1
 8003a7a:	d103      	bne.n	8003a84 <_printf_common+0xac>
 8003a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a84:	3501      	adds	r5, #1
 8003a86:	e7c6      	b.n	8003a16 <_printf_common+0x3e>
 8003a88:	18e1      	adds	r1, r4, r3
 8003a8a:	1c5a      	adds	r2, r3, #1
 8003a8c:	2030      	movs	r0, #48	; 0x30
 8003a8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a92:	4422      	add	r2, r4
 8003a94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a9c:	3302      	adds	r3, #2
 8003a9e:	e7c7      	b.n	8003a30 <_printf_common+0x58>
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	4622      	mov	r2, r4
 8003aa4:	4649      	mov	r1, r9
 8003aa6:	4638      	mov	r0, r7
 8003aa8:	47c0      	blx	r8
 8003aaa:	3001      	adds	r0, #1
 8003aac:	d0e6      	beq.n	8003a7c <_printf_common+0xa4>
 8003aae:	3601      	adds	r6, #1
 8003ab0:	e7d9      	b.n	8003a66 <_printf_common+0x8e>
	...

08003ab4 <_printf_i>:
 8003ab4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ab8:	460c      	mov	r4, r1
 8003aba:	4691      	mov	r9, r2
 8003abc:	7e27      	ldrb	r7, [r4, #24]
 8003abe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003ac0:	2f78      	cmp	r7, #120	; 0x78
 8003ac2:	4680      	mov	r8, r0
 8003ac4:	469a      	mov	sl, r3
 8003ac6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003aca:	d807      	bhi.n	8003adc <_printf_i+0x28>
 8003acc:	2f62      	cmp	r7, #98	; 0x62
 8003ace:	d80a      	bhi.n	8003ae6 <_printf_i+0x32>
 8003ad0:	2f00      	cmp	r7, #0
 8003ad2:	f000 80d8 	beq.w	8003c86 <_printf_i+0x1d2>
 8003ad6:	2f58      	cmp	r7, #88	; 0x58
 8003ad8:	f000 80a3 	beq.w	8003c22 <_printf_i+0x16e>
 8003adc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003ae0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ae4:	e03a      	b.n	8003b5c <_printf_i+0xa8>
 8003ae6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003aea:	2b15      	cmp	r3, #21
 8003aec:	d8f6      	bhi.n	8003adc <_printf_i+0x28>
 8003aee:	a001      	add	r0, pc, #4	; (adr r0, 8003af4 <_printf_i+0x40>)
 8003af0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003af4:	08003b4d 	.word	0x08003b4d
 8003af8:	08003b61 	.word	0x08003b61
 8003afc:	08003add 	.word	0x08003add
 8003b00:	08003add 	.word	0x08003add
 8003b04:	08003add 	.word	0x08003add
 8003b08:	08003add 	.word	0x08003add
 8003b0c:	08003b61 	.word	0x08003b61
 8003b10:	08003add 	.word	0x08003add
 8003b14:	08003add 	.word	0x08003add
 8003b18:	08003add 	.word	0x08003add
 8003b1c:	08003add 	.word	0x08003add
 8003b20:	08003c6d 	.word	0x08003c6d
 8003b24:	08003b91 	.word	0x08003b91
 8003b28:	08003c4f 	.word	0x08003c4f
 8003b2c:	08003add 	.word	0x08003add
 8003b30:	08003add 	.word	0x08003add
 8003b34:	08003c8f 	.word	0x08003c8f
 8003b38:	08003add 	.word	0x08003add
 8003b3c:	08003b91 	.word	0x08003b91
 8003b40:	08003add 	.word	0x08003add
 8003b44:	08003add 	.word	0x08003add
 8003b48:	08003c57 	.word	0x08003c57
 8003b4c:	680b      	ldr	r3, [r1, #0]
 8003b4e:	1d1a      	adds	r2, r3, #4
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	600a      	str	r2, [r1, #0]
 8003b54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003b58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e0a3      	b.n	8003ca8 <_printf_i+0x1f4>
 8003b60:	6825      	ldr	r5, [r4, #0]
 8003b62:	6808      	ldr	r0, [r1, #0]
 8003b64:	062e      	lsls	r6, r5, #24
 8003b66:	f100 0304 	add.w	r3, r0, #4
 8003b6a:	d50a      	bpl.n	8003b82 <_printf_i+0xce>
 8003b6c:	6805      	ldr	r5, [r0, #0]
 8003b6e:	600b      	str	r3, [r1, #0]
 8003b70:	2d00      	cmp	r5, #0
 8003b72:	da03      	bge.n	8003b7c <_printf_i+0xc8>
 8003b74:	232d      	movs	r3, #45	; 0x2d
 8003b76:	426d      	negs	r5, r5
 8003b78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b7c:	485e      	ldr	r0, [pc, #376]	; (8003cf8 <_printf_i+0x244>)
 8003b7e:	230a      	movs	r3, #10
 8003b80:	e019      	b.n	8003bb6 <_printf_i+0x102>
 8003b82:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003b86:	6805      	ldr	r5, [r0, #0]
 8003b88:	600b      	str	r3, [r1, #0]
 8003b8a:	bf18      	it	ne
 8003b8c:	b22d      	sxthne	r5, r5
 8003b8e:	e7ef      	b.n	8003b70 <_printf_i+0xbc>
 8003b90:	680b      	ldr	r3, [r1, #0]
 8003b92:	6825      	ldr	r5, [r4, #0]
 8003b94:	1d18      	adds	r0, r3, #4
 8003b96:	6008      	str	r0, [r1, #0]
 8003b98:	0628      	lsls	r0, r5, #24
 8003b9a:	d501      	bpl.n	8003ba0 <_printf_i+0xec>
 8003b9c:	681d      	ldr	r5, [r3, #0]
 8003b9e:	e002      	b.n	8003ba6 <_printf_i+0xf2>
 8003ba0:	0669      	lsls	r1, r5, #25
 8003ba2:	d5fb      	bpl.n	8003b9c <_printf_i+0xe8>
 8003ba4:	881d      	ldrh	r5, [r3, #0]
 8003ba6:	4854      	ldr	r0, [pc, #336]	; (8003cf8 <_printf_i+0x244>)
 8003ba8:	2f6f      	cmp	r7, #111	; 0x6f
 8003baa:	bf0c      	ite	eq
 8003bac:	2308      	moveq	r3, #8
 8003bae:	230a      	movne	r3, #10
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003bb6:	6866      	ldr	r6, [r4, #4]
 8003bb8:	60a6      	str	r6, [r4, #8]
 8003bba:	2e00      	cmp	r6, #0
 8003bbc:	bfa2      	ittt	ge
 8003bbe:	6821      	ldrge	r1, [r4, #0]
 8003bc0:	f021 0104 	bicge.w	r1, r1, #4
 8003bc4:	6021      	strge	r1, [r4, #0]
 8003bc6:	b90d      	cbnz	r5, 8003bcc <_printf_i+0x118>
 8003bc8:	2e00      	cmp	r6, #0
 8003bca:	d04d      	beq.n	8003c68 <_printf_i+0x1b4>
 8003bcc:	4616      	mov	r6, r2
 8003bce:	fbb5 f1f3 	udiv	r1, r5, r3
 8003bd2:	fb03 5711 	mls	r7, r3, r1, r5
 8003bd6:	5dc7      	ldrb	r7, [r0, r7]
 8003bd8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003bdc:	462f      	mov	r7, r5
 8003bde:	42bb      	cmp	r3, r7
 8003be0:	460d      	mov	r5, r1
 8003be2:	d9f4      	bls.n	8003bce <_printf_i+0x11a>
 8003be4:	2b08      	cmp	r3, #8
 8003be6:	d10b      	bne.n	8003c00 <_printf_i+0x14c>
 8003be8:	6823      	ldr	r3, [r4, #0]
 8003bea:	07df      	lsls	r7, r3, #31
 8003bec:	d508      	bpl.n	8003c00 <_printf_i+0x14c>
 8003bee:	6923      	ldr	r3, [r4, #16]
 8003bf0:	6861      	ldr	r1, [r4, #4]
 8003bf2:	4299      	cmp	r1, r3
 8003bf4:	bfde      	ittt	le
 8003bf6:	2330      	movle	r3, #48	; 0x30
 8003bf8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003bfc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003c00:	1b92      	subs	r2, r2, r6
 8003c02:	6122      	str	r2, [r4, #16]
 8003c04:	f8cd a000 	str.w	sl, [sp]
 8003c08:	464b      	mov	r3, r9
 8003c0a:	aa03      	add	r2, sp, #12
 8003c0c:	4621      	mov	r1, r4
 8003c0e:	4640      	mov	r0, r8
 8003c10:	f7ff fee2 	bl	80039d8 <_printf_common>
 8003c14:	3001      	adds	r0, #1
 8003c16:	d14c      	bne.n	8003cb2 <_printf_i+0x1fe>
 8003c18:	f04f 30ff 	mov.w	r0, #4294967295
 8003c1c:	b004      	add	sp, #16
 8003c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c22:	4835      	ldr	r0, [pc, #212]	; (8003cf8 <_printf_i+0x244>)
 8003c24:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003c28:	6823      	ldr	r3, [r4, #0]
 8003c2a:	680e      	ldr	r6, [r1, #0]
 8003c2c:	061f      	lsls	r7, r3, #24
 8003c2e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003c32:	600e      	str	r6, [r1, #0]
 8003c34:	d514      	bpl.n	8003c60 <_printf_i+0x1ac>
 8003c36:	07d9      	lsls	r1, r3, #31
 8003c38:	bf44      	itt	mi
 8003c3a:	f043 0320 	orrmi.w	r3, r3, #32
 8003c3e:	6023      	strmi	r3, [r4, #0]
 8003c40:	b91d      	cbnz	r5, 8003c4a <_printf_i+0x196>
 8003c42:	6823      	ldr	r3, [r4, #0]
 8003c44:	f023 0320 	bic.w	r3, r3, #32
 8003c48:	6023      	str	r3, [r4, #0]
 8003c4a:	2310      	movs	r3, #16
 8003c4c:	e7b0      	b.n	8003bb0 <_printf_i+0xfc>
 8003c4e:	6823      	ldr	r3, [r4, #0]
 8003c50:	f043 0320 	orr.w	r3, r3, #32
 8003c54:	6023      	str	r3, [r4, #0]
 8003c56:	2378      	movs	r3, #120	; 0x78
 8003c58:	4828      	ldr	r0, [pc, #160]	; (8003cfc <_printf_i+0x248>)
 8003c5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c5e:	e7e3      	b.n	8003c28 <_printf_i+0x174>
 8003c60:	065e      	lsls	r6, r3, #25
 8003c62:	bf48      	it	mi
 8003c64:	b2ad      	uxthmi	r5, r5
 8003c66:	e7e6      	b.n	8003c36 <_printf_i+0x182>
 8003c68:	4616      	mov	r6, r2
 8003c6a:	e7bb      	b.n	8003be4 <_printf_i+0x130>
 8003c6c:	680b      	ldr	r3, [r1, #0]
 8003c6e:	6826      	ldr	r6, [r4, #0]
 8003c70:	6960      	ldr	r0, [r4, #20]
 8003c72:	1d1d      	adds	r5, r3, #4
 8003c74:	600d      	str	r5, [r1, #0]
 8003c76:	0635      	lsls	r5, r6, #24
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	d501      	bpl.n	8003c80 <_printf_i+0x1cc>
 8003c7c:	6018      	str	r0, [r3, #0]
 8003c7e:	e002      	b.n	8003c86 <_printf_i+0x1d2>
 8003c80:	0671      	lsls	r1, r6, #25
 8003c82:	d5fb      	bpl.n	8003c7c <_printf_i+0x1c8>
 8003c84:	8018      	strh	r0, [r3, #0]
 8003c86:	2300      	movs	r3, #0
 8003c88:	6123      	str	r3, [r4, #16]
 8003c8a:	4616      	mov	r6, r2
 8003c8c:	e7ba      	b.n	8003c04 <_printf_i+0x150>
 8003c8e:	680b      	ldr	r3, [r1, #0]
 8003c90:	1d1a      	adds	r2, r3, #4
 8003c92:	600a      	str	r2, [r1, #0]
 8003c94:	681e      	ldr	r6, [r3, #0]
 8003c96:	6862      	ldr	r2, [r4, #4]
 8003c98:	2100      	movs	r1, #0
 8003c9a:	4630      	mov	r0, r6
 8003c9c:	f7fc faa8 	bl	80001f0 <memchr>
 8003ca0:	b108      	cbz	r0, 8003ca6 <_printf_i+0x1f2>
 8003ca2:	1b80      	subs	r0, r0, r6
 8003ca4:	6060      	str	r0, [r4, #4]
 8003ca6:	6863      	ldr	r3, [r4, #4]
 8003ca8:	6123      	str	r3, [r4, #16]
 8003caa:	2300      	movs	r3, #0
 8003cac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cb0:	e7a8      	b.n	8003c04 <_printf_i+0x150>
 8003cb2:	6923      	ldr	r3, [r4, #16]
 8003cb4:	4632      	mov	r2, r6
 8003cb6:	4649      	mov	r1, r9
 8003cb8:	4640      	mov	r0, r8
 8003cba:	47d0      	blx	sl
 8003cbc:	3001      	adds	r0, #1
 8003cbe:	d0ab      	beq.n	8003c18 <_printf_i+0x164>
 8003cc0:	6823      	ldr	r3, [r4, #0]
 8003cc2:	079b      	lsls	r3, r3, #30
 8003cc4:	d413      	bmi.n	8003cee <_printf_i+0x23a>
 8003cc6:	68e0      	ldr	r0, [r4, #12]
 8003cc8:	9b03      	ldr	r3, [sp, #12]
 8003cca:	4298      	cmp	r0, r3
 8003ccc:	bfb8      	it	lt
 8003cce:	4618      	movlt	r0, r3
 8003cd0:	e7a4      	b.n	8003c1c <_printf_i+0x168>
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	4632      	mov	r2, r6
 8003cd6:	4649      	mov	r1, r9
 8003cd8:	4640      	mov	r0, r8
 8003cda:	47d0      	blx	sl
 8003cdc:	3001      	adds	r0, #1
 8003cde:	d09b      	beq.n	8003c18 <_printf_i+0x164>
 8003ce0:	3501      	adds	r5, #1
 8003ce2:	68e3      	ldr	r3, [r4, #12]
 8003ce4:	9903      	ldr	r1, [sp, #12]
 8003ce6:	1a5b      	subs	r3, r3, r1
 8003ce8:	42ab      	cmp	r3, r5
 8003cea:	dcf2      	bgt.n	8003cd2 <_printf_i+0x21e>
 8003cec:	e7eb      	b.n	8003cc6 <_printf_i+0x212>
 8003cee:	2500      	movs	r5, #0
 8003cf0:	f104 0619 	add.w	r6, r4, #25
 8003cf4:	e7f5      	b.n	8003ce2 <_printf_i+0x22e>
 8003cf6:	bf00      	nop
 8003cf8:	0800406d 	.word	0x0800406d
 8003cfc:	0800407e 	.word	0x0800407e

08003d00 <_putc_r>:
 8003d00:	b570      	push	{r4, r5, r6, lr}
 8003d02:	460d      	mov	r5, r1
 8003d04:	4614      	mov	r4, r2
 8003d06:	4606      	mov	r6, r0
 8003d08:	b118      	cbz	r0, 8003d12 <_putc_r+0x12>
 8003d0a:	6983      	ldr	r3, [r0, #24]
 8003d0c:	b90b      	cbnz	r3, 8003d12 <_putc_r+0x12>
 8003d0e:	f7ff fb5b 	bl	80033c8 <__sinit>
 8003d12:	4b1c      	ldr	r3, [pc, #112]	; (8003d84 <_putc_r+0x84>)
 8003d14:	429c      	cmp	r4, r3
 8003d16:	d124      	bne.n	8003d62 <_putc_r+0x62>
 8003d18:	6874      	ldr	r4, [r6, #4]
 8003d1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d1c:	07d8      	lsls	r0, r3, #31
 8003d1e:	d405      	bmi.n	8003d2c <_putc_r+0x2c>
 8003d20:	89a3      	ldrh	r3, [r4, #12]
 8003d22:	0599      	lsls	r1, r3, #22
 8003d24:	d402      	bmi.n	8003d2c <_putc_r+0x2c>
 8003d26:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d28:	f7ff fbec 	bl	8003504 <__retarget_lock_acquire_recursive>
 8003d2c:	68a3      	ldr	r3, [r4, #8]
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	60a3      	str	r3, [r4, #8]
 8003d34:	da05      	bge.n	8003d42 <_putc_r+0x42>
 8003d36:	69a2      	ldr	r2, [r4, #24]
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	db1c      	blt.n	8003d76 <_putc_r+0x76>
 8003d3c:	b2eb      	uxtb	r3, r5
 8003d3e:	2b0a      	cmp	r3, #10
 8003d40:	d019      	beq.n	8003d76 <_putc_r+0x76>
 8003d42:	6823      	ldr	r3, [r4, #0]
 8003d44:	1c5a      	adds	r2, r3, #1
 8003d46:	6022      	str	r2, [r4, #0]
 8003d48:	701d      	strb	r5, [r3, #0]
 8003d4a:	b2ed      	uxtb	r5, r5
 8003d4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d4e:	07da      	lsls	r2, r3, #31
 8003d50:	d405      	bmi.n	8003d5e <_putc_r+0x5e>
 8003d52:	89a3      	ldrh	r3, [r4, #12]
 8003d54:	059b      	lsls	r3, r3, #22
 8003d56:	d402      	bmi.n	8003d5e <_putc_r+0x5e>
 8003d58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d5a:	f7ff fbd4 	bl	8003506 <__retarget_lock_release_recursive>
 8003d5e:	4628      	mov	r0, r5
 8003d60:	bd70      	pop	{r4, r5, r6, pc}
 8003d62:	4b09      	ldr	r3, [pc, #36]	; (8003d88 <_putc_r+0x88>)
 8003d64:	429c      	cmp	r4, r3
 8003d66:	d101      	bne.n	8003d6c <_putc_r+0x6c>
 8003d68:	68b4      	ldr	r4, [r6, #8]
 8003d6a:	e7d6      	b.n	8003d1a <_putc_r+0x1a>
 8003d6c:	4b07      	ldr	r3, [pc, #28]	; (8003d8c <_putc_r+0x8c>)
 8003d6e:	429c      	cmp	r4, r3
 8003d70:	bf08      	it	eq
 8003d72:	68f4      	ldreq	r4, [r6, #12]
 8003d74:	e7d1      	b.n	8003d1a <_putc_r+0x1a>
 8003d76:	4629      	mov	r1, r5
 8003d78:	4622      	mov	r2, r4
 8003d7a:	4630      	mov	r0, r6
 8003d7c:	f7ff f94a 	bl	8003014 <__swbuf_r>
 8003d80:	4605      	mov	r5, r0
 8003d82:	e7e3      	b.n	8003d4c <_putc_r+0x4c>
 8003d84:	0800401c 	.word	0x0800401c
 8003d88:	0800403c 	.word	0x0800403c
 8003d8c:	08003ffc 	.word	0x08003ffc

08003d90 <_sbrk_r>:
 8003d90:	b538      	push	{r3, r4, r5, lr}
 8003d92:	4d06      	ldr	r5, [pc, #24]	; (8003dac <_sbrk_r+0x1c>)
 8003d94:	2300      	movs	r3, #0
 8003d96:	4604      	mov	r4, r0
 8003d98:	4608      	mov	r0, r1
 8003d9a:	602b      	str	r3, [r5, #0]
 8003d9c:	f7fd f960 	bl	8001060 <_sbrk>
 8003da0:	1c43      	adds	r3, r0, #1
 8003da2:	d102      	bne.n	8003daa <_sbrk_r+0x1a>
 8003da4:	682b      	ldr	r3, [r5, #0]
 8003da6:	b103      	cbz	r3, 8003daa <_sbrk_r+0x1a>
 8003da8:	6023      	str	r3, [r4, #0]
 8003daa:	bd38      	pop	{r3, r4, r5, pc}
 8003dac:	2000013c 	.word	0x2000013c

08003db0 <__sread>:
 8003db0:	b510      	push	{r4, lr}
 8003db2:	460c      	mov	r4, r1
 8003db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003db8:	f000 f8a0 	bl	8003efc <_read_r>
 8003dbc:	2800      	cmp	r0, #0
 8003dbe:	bfab      	itete	ge
 8003dc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003dc2:	89a3      	ldrhlt	r3, [r4, #12]
 8003dc4:	181b      	addge	r3, r3, r0
 8003dc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003dca:	bfac      	ite	ge
 8003dcc:	6563      	strge	r3, [r4, #84]	; 0x54
 8003dce:	81a3      	strhlt	r3, [r4, #12]
 8003dd0:	bd10      	pop	{r4, pc}

08003dd2 <__swrite>:
 8003dd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dd6:	461f      	mov	r7, r3
 8003dd8:	898b      	ldrh	r3, [r1, #12]
 8003dda:	05db      	lsls	r3, r3, #23
 8003ddc:	4605      	mov	r5, r0
 8003dde:	460c      	mov	r4, r1
 8003de0:	4616      	mov	r6, r2
 8003de2:	d505      	bpl.n	8003df0 <__swrite+0x1e>
 8003de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003de8:	2302      	movs	r3, #2
 8003dea:	2200      	movs	r2, #0
 8003dec:	f000 f868 	bl	8003ec0 <_lseek_r>
 8003df0:	89a3      	ldrh	r3, [r4, #12]
 8003df2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003df6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dfa:	81a3      	strh	r3, [r4, #12]
 8003dfc:	4632      	mov	r2, r6
 8003dfe:	463b      	mov	r3, r7
 8003e00:	4628      	mov	r0, r5
 8003e02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e06:	f000 b817 	b.w	8003e38 <_write_r>

08003e0a <__sseek>:
 8003e0a:	b510      	push	{r4, lr}
 8003e0c:	460c      	mov	r4, r1
 8003e0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e12:	f000 f855 	bl	8003ec0 <_lseek_r>
 8003e16:	1c43      	adds	r3, r0, #1
 8003e18:	89a3      	ldrh	r3, [r4, #12]
 8003e1a:	bf15      	itete	ne
 8003e1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003e1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003e22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003e26:	81a3      	strheq	r3, [r4, #12]
 8003e28:	bf18      	it	ne
 8003e2a:	81a3      	strhne	r3, [r4, #12]
 8003e2c:	bd10      	pop	{r4, pc}

08003e2e <__sclose>:
 8003e2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e32:	f000 b813 	b.w	8003e5c <_close_r>
	...

08003e38 <_write_r>:
 8003e38:	b538      	push	{r3, r4, r5, lr}
 8003e3a:	4d07      	ldr	r5, [pc, #28]	; (8003e58 <_write_r+0x20>)
 8003e3c:	4604      	mov	r4, r0
 8003e3e:	4608      	mov	r0, r1
 8003e40:	4611      	mov	r1, r2
 8003e42:	2200      	movs	r2, #0
 8003e44:	602a      	str	r2, [r5, #0]
 8003e46:	461a      	mov	r2, r3
 8003e48:	f7fd f8b9 	bl	8000fbe <_write>
 8003e4c:	1c43      	adds	r3, r0, #1
 8003e4e:	d102      	bne.n	8003e56 <_write_r+0x1e>
 8003e50:	682b      	ldr	r3, [r5, #0]
 8003e52:	b103      	cbz	r3, 8003e56 <_write_r+0x1e>
 8003e54:	6023      	str	r3, [r4, #0]
 8003e56:	bd38      	pop	{r3, r4, r5, pc}
 8003e58:	2000013c 	.word	0x2000013c

08003e5c <_close_r>:
 8003e5c:	b538      	push	{r3, r4, r5, lr}
 8003e5e:	4d06      	ldr	r5, [pc, #24]	; (8003e78 <_close_r+0x1c>)
 8003e60:	2300      	movs	r3, #0
 8003e62:	4604      	mov	r4, r0
 8003e64:	4608      	mov	r0, r1
 8003e66:	602b      	str	r3, [r5, #0]
 8003e68:	f7fd f8c5 	bl	8000ff6 <_close>
 8003e6c:	1c43      	adds	r3, r0, #1
 8003e6e:	d102      	bne.n	8003e76 <_close_r+0x1a>
 8003e70:	682b      	ldr	r3, [r5, #0]
 8003e72:	b103      	cbz	r3, 8003e76 <_close_r+0x1a>
 8003e74:	6023      	str	r3, [r4, #0]
 8003e76:	bd38      	pop	{r3, r4, r5, pc}
 8003e78:	2000013c 	.word	0x2000013c

08003e7c <_fstat_r>:
 8003e7c:	b538      	push	{r3, r4, r5, lr}
 8003e7e:	4d07      	ldr	r5, [pc, #28]	; (8003e9c <_fstat_r+0x20>)
 8003e80:	2300      	movs	r3, #0
 8003e82:	4604      	mov	r4, r0
 8003e84:	4608      	mov	r0, r1
 8003e86:	4611      	mov	r1, r2
 8003e88:	602b      	str	r3, [r5, #0]
 8003e8a:	f7fd f8c0 	bl	800100e <_fstat>
 8003e8e:	1c43      	adds	r3, r0, #1
 8003e90:	d102      	bne.n	8003e98 <_fstat_r+0x1c>
 8003e92:	682b      	ldr	r3, [r5, #0]
 8003e94:	b103      	cbz	r3, 8003e98 <_fstat_r+0x1c>
 8003e96:	6023      	str	r3, [r4, #0]
 8003e98:	bd38      	pop	{r3, r4, r5, pc}
 8003e9a:	bf00      	nop
 8003e9c:	2000013c 	.word	0x2000013c

08003ea0 <_isatty_r>:
 8003ea0:	b538      	push	{r3, r4, r5, lr}
 8003ea2:	4d06      	ldr	r5, [pc, #24]	; (8003ebc <_isatty_r+0x1c>)
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	4604      	mov	r4, r0
 8003ea8:	4608      	mov	r0, r1
 8003eaa:	602b      	str	r3, [r5, #0]
 8003eac:	f7fd f8bf 	bl	800102e <_isatty>
 8003eb0:	1c43      	adds	r3, r0, #1
 8003eb2:	d102      	bne.n	8003eba <_isatty_r+0x1a>
 8003eb4:	682b      	ldr	r3, [r5, #0]
 8003eb6:	b103      	cbz	r3, 8003eba <_isatty_r+0x1a>
 8003eb8:	6023      	str	r3, [r4, #0]
 8003eba:	bd38      	pop	{r3, r4, r5, pc}
 8003ebc:	2000013c 	.word	0x2000013c

08003ec0 <_lseek_r>:
 8003ec0:	b538      	push	{r3, r4, r5, lr}
 8003ec2:	4d07      	ldr	r5, [pc, #28]	; (8003ee0 <_lseek_r+0x20>)
 8003ec4:	4604      	mov	r4, r0
 8003ec6:	4608      	mov	r0, r1
 8003ec8:	4611      	mov	r1, r2
 8003eca:	2200      	movs	r2, #0
 8003ecc:	602a      	str	r2, [r5, #0]
 8003ece:	461a      	mov	r2, r3
 8003ed0:	f7fd f8b8 	bl	8001044 <_lseek>
 8003ed4:	1c43      	adds	r3, r0, #1
 8003ed6:	d102      	bne.n	8003ede <_lseek_r+0x1e>
 8003ed8:	682b      	ldr	r3, [r5, #0]
 8003eda:	b103      	cbz	r3, 8003ede <_lseek_r+0x1e>
 8003edc:	6023      	str	r3, [r4, #0]
 8003ede:	bd38      	pop	{r3, r4, r5, pc}
 8003ee0:	2000013c 	.word	0x2000013c

08003ee4 <__malloc_lock>:
 8003ee4:	4801      	ldr	r0, [pc, #4]	; (8003eec <__malloc_lock+0x8>)
 8003ee6:	f7ff bb0d 	b.w	8003504 <__retarget_lock_acquire_recursive>
 8003eea:	bf00      	nop
 8003eec:	20000134 	.word	0x20000134

08003ef0 <__malloc_unlock>:
 8003ef0:	4801      	ldr	r0, [pc, #4]	; (8003ef8 <__malloc_unlock+0x8>)
 8003ef2:	f7ff bb08 	b.w	8003506 <__retarget_lock_release_recursive>
 8003ef6:	bf00      	nop
 8003ef8:	20000134 	.word	0x20000134

08003efc <_read_r>:
 8003efc:	b538      	push	{r3, r4, r5, lr}
 8003efe:	4d07      	ldr	r5, [pc, #28]	; (8003f1c <_read_r+0x20>)
 8003f00:	4604      	mov	r4, r0
 8003f02:	4608      	mov	r0, r1
 8003f04:	4611      	mov	r1, r2
 8003f06:	2200      	movs	r2, #0
 8003f08:	602a      	str	r2, [r5, #0]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	f7fd f83a 	bl	8000f84 <_read>
 8003f10:	1c43      	adds	r3, r0, #1
 8003f12:	d102      	bne.n	8003f1a <_read_r+0x1e>
 8003f14:	682b      	ldr	r3, [r5, #0]
 8003f16:	b103      	cbz	r3, 8003f1a <_read_r+0x1e>
 8003f18:	6023      	str	r3, [r4, #0]
 8003f1a:	bd38      	pop	{r3, r4, r5, pc}
 8003f1c:	2000013c 	.word	0x2000013c

08003f20 <_init>:
 8003f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f22:	bf00      	nop
 8003f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f26:	bc08      	pop	{r3}
 8003f28:	469e      	mov	lr, r3
 8003f2a:	4770      	bx	lr

08003f2c <_fini>:
 8003f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f2e:	bf00      	nop
 8003f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f32:	bc08      	pop	{r3}
 8003f34:	469e      	mov	lr, r3
 8003f36:	4770      	bx	lr
