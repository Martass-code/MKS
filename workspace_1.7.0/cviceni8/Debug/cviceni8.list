
cviceni8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002eb4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08003064  08003064  00013064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003128  08003128  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003128  08003128  00013128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003130  08003130  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003130  08003130  00013130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003134  08003134  00013134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003138  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000080  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000f0  200000f0  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a0e3  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017b8  00000000  00000000  0002a183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006f0  00000000  00000000  0002b940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000668  00000000  00000000  0002c030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023740  00000000  00000000  0002c698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008524  00000000  00000000  0004fdd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d31de  00000000  00000000  000582fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012b4da  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002314  00000000  00000000  0012b530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800304c 	.word	0x0800304c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	0800304c 	.word	0x0800304c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000590:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000594:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000598:	f003 0301 	and.w	r3, r3, #1
 800059c:	2b00      	cmp	r3, #0
 800059e:	d013      	beq.n	80005c8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005a8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d00b      	beq.n	80005c8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005b0:	e000      	b.n	80005b4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005b2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d0f9      	beq.n	80005b2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005be:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	b2d2      	uxtb	r2, r2
 80005c6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005c8:	687b      	ldr	r3, [r7, #4]
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr

080005d6 <__io_putchar>:
static void MX_GPIO_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */

int __io_putchar(int ch)
{
 80005d6:	b580      	push	{r7, lr}
 80005d8:	b082      	sub	sp, #8
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
ITM_SendChar(ch);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f7ff ffd1 	bl	8000588 <ITM_SendChar>
return 0;
 80005e6:	2300      	movs	r3, #0
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f000 fb45 	bl	8000c84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f81f 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 f8b1 	bl	8000764 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000602:	f000 f885 	bl	8000710 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
printf("START \n");
 8000606:	480a      	ldr	r0, [pc, #40]	; (8000630 <main+0x40>)
 8000608:	f001 fdda 	bl	80021c0 <puts>
uint32_t count = 0;
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000610:	2101      	movs	r1, #1
 8000612:	4808      	ldr	r0, [pc, #32]	; (8000634 <main+0x44>)
 8000614:	f000 fe77 	bl	8001306 <HAL_GPIO_TogglePin>
	  HAL_Delay(250);
 8000618:	20fa      	movs	r0, #250	; 0xfa
 800061a:	f000 fba5 	bl	8000d68 <HAL_Delay>
	  count++;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	3301      	adds	r3, #1
 8000622:	607b      	str	r3, [r7, #4]
	  printf("Tick = %d \n", count);
 8000624:	6879      	ldr	r1, [r7, #4]
 8000626:	4804      	ldr	r0, [pc, #16]	; (8000638 <main+0x48>)
 8000628:	f001 fd44 	bl	80020b4 <iprintf>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800062c:	e7f0      	b.n	8000610 <main+0x20>
 800062e:	bf00      	nop
 8000630:	08003064 	.word	0x08003064
 8000634:	40020400 	.word	0x40020400
 8000638:	0800306c 	.word	0x0800306c

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b094      	sub	sp, #80	; 0x50
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0320 	add.w	r3, r7, #32
 8000646:	2230      	movs	r2, #48	; 0x30
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f001 fd2a 	bl	80020a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	4b28      	ldr	r3, [pc, #160]	; (8000708 <SystemClock_Config+0xcc>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	4a27      	ldr	r2, [pc, #156]	; (8000708 <SystemClock_Config+0xcc>)
 800066a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066e:	6413      	str	r3, [r2, #64]	; 0x40
 8000670:	4b25      	ldr	r3, [pc, #148]	; (8000708 <SystemClock_Config+0xcc>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800067c:	2300      	movs	r3, #0
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	4b22      	ldr	r3, [pc, #136]	; (800070c <SystemClock_Config+0xd0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a21      	ldr	r2, [pc, #132]	; (800070c <SystemClock_Config+0xd0>)
 8000686:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800068a:	6013      	str	r3, [r2, #0]
 800068c:	4b1f      	ldr	r3, [pc, #124]	; (800070c <SystemClock_Config+0xd0>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000698:	2301      	movs	r3, #1
 800069a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800069c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a2:	2302      	movs	r3, #2
 80006a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006ac:	2304      	movs	r3, #4
 80006ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006b0:	23a8      	movs	r3, #168	; 0xa8
 80006b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006b8:	2307      	movs	r3, #7
 80006ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006bc:	f107 0320 	add.w	r3, r7, #32
 80006c0:	4618      	mov	r0, r3
 80006c2:	f000 fe3b 	bl	800133c <HAL_RCC_OscConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006cc:	f000 f95a 	bl	8000984 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d0:	230f      	movs	r3, #15
 80006d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d4:	2302      	movs	r3, #2
 80006d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	2105      	movs	r1, #5
 80006ee:	4618      	mov	r0, r3
 80006f0:	f001 f89c 	bl	800182c <HAL_RCC_ClockConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006fa:	f000 f943 	bl	8000984 <Error_Handler>
  }
}
 80006fe:	bf00      	nop
 8000700:	3750      	adds	r7, #80	; 0x50
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800
 800070c:	40007000 	.word	0x40007000

08000710 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_USART3_UART_Init+0x4c>)
 8000716:	4a12      	ldr	r2, [pc, #72]	; (8000760 <MX_USART3_UART_Init+0x50>)
 8000718:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <MX_USART3_UART_Init+0x4c>)
 800071c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000720:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_USART3_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <MX_USART3_UART_Init+0x4c>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800072e:	4b0b      	ldr	r3, [pc, #44]	; (800075c <MX_USART3_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_USART3_UART_Init+0x4c>)
 8000736:	220c      	movs	r2, #12
 8000738:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073a:	4b08      	ldr	r3, [pc, #32]	; (800075c <MX_USART3_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_USART3_UART_Init+0x4c>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000746:	4805      	ldr	r0, [pc, #20]	; (800075c <MX_USART3_UART_Init+0x4c>)
 8000748:	f001 fa6c 	bl	8001c24 <HAL_UART_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000752:	f000 f917 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000098 	.word	0x20000098
 8000760:	40004800 	.word	0x40004800

08000764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08c      	sub	sp, #48	; 0x30
 8000768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076a:	f107 031c 	add.w	r3, r7, #28
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
 8000778:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	61bb      	str	r3, [r7, #24]
 800077e:	4b7c      	ldr	r3, [pc, #496]	; (8000970 <MX_GPIO_Init+0x20c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a7b      	ldr	r2, [pc, #492]	; (8000970 <MX_GPIO_Init+0x20c>)
 8000784:	f043 0304 	orr.w	r3, r3, #4
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b79      	ldr	r3, [pc, #484]	; (8000970 <MX_GPIO_Init+0x20c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0304 	and.w	r3, r3, #4
 8000792:	61bb      	str	r3, [r7, #24]
 8000794:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
 800079a:	4b75      	ldr	r3, [pc, #468]	; (8000970 <MX_GPIO_Init+0x20c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a74      	ldr	r2, [pc, #464]	; (8000970 <MX_GPIO_Init+0x20c>)
 80007a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b72      	ldr	r3, [pc, #456]	; (8000970 <MX_GPIO_Init+0x20c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ae:	617b      	str	r3, [r7, #20]
 80007b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	4b6e      	ldr	r3, [pc, #440]	; (8000970 <MX_GPIO_Init+0x20c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a6d      	ldr	r2, [pc, #436]	; (8000970 <MX_GPIO_Init+0x20c>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b6b      	ldr	r3, [pc, #428]	; (8000970 <MX_GPIO_Init+0x20c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	4b67      	ldr	r3, [pc, #412]	; (8000970 <MX_GPIO_Init+0x20c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a66      	ldr	r2, [pc, #408]	; (8000970 <MX_GPIO_Init+0x20c>)
 80007d8:	f043 0302 	orr.w	r3, r3, #2
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b64      	ldr	r3, [pc, #400]	; (8000970 <MX_GPIO_Init+0x20c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0302 	and.w	r3, r3, #2
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	4b60      	ldr	r3, [pc, #384]	; (8000970 <MX_GPIO_Init+0x20c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a5f      	ldr	r2, [pc, #380]	; (8000970 <MX_GPIO_Init+0x20c>)
 80007f4:	f043 0308 	orr.w	r3, r3, #8
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b5d      	ldr	r3, [pc, #372]	; (8000970 <MX_GPIO_Init+0x20c>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0308 	and.w	r3, r3, #8
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	4b59      	ldr	r3, [pc, #356]	; (8000970 <MX_GPIO_Init+0x20c>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a58      	ldr	r2, [pc, #352]	; (8000970 <MX_GPIO_Init+0x20c>)
 8000810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b56      	ldr	r3, [pc, #344]	; (8000970 <MX_GPIO_Init+0x20c>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	f244 0181 	movw	r1, #16513	; 0x4081
 8000828:	4852      	ldr	r0, [pc, #328]	; (8000974 <MX_GPIO_Init+0x210>)
 800082a:	f000 fd53 	bl	80012d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	2140      	movs	r1, #64	; 0x40
 8000832:	4851      	ldr	r0, [pc, #324]	; (8000978 <MX_GPIO_Init+0x214>)
 8000834:	f000 fd4e 	bl	80012d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000838:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800083e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000842:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000848:	f107 031c 	add.w	r3, r7, #28
 800084c:	4619      	mov	r1, r3
 800084e:	484b      	ldr	r0, [pc, #300]	; (800097c <MX_GPIO_Init+0x218>)
 8000850:	f000 fb94 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000854:	2332      	movs	r3, #50	; 0x32
 8000856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000858:	2302      	movs	r3, #2
 800085a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000860:	2303      	movs	r3, #3
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000864:	230b      	movs	r3, #11
 8000866:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000868:	f107 031c 	add.w	r3, r7, #28
 800086c:	4619      	mov	r1, r3
 800086e:	4843      	ldr	r0, [pc, #268]	; (800097c <MX_GPIO_Init+0x218>)
 8000870:	f000 fb84 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000874:	2386      	movs	r3, #134	; 0x86
 8000876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000878:	2302      	movs	r3, #2
 800087a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000880:	2303      	movs	r3, #3
 8000882:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000884:	230b      	movs	r3, #11
 8000886:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	483c      	ldr	r0, [pc, #240]	; (8000980 <MX_GPIO_Init+0x21c>)
 8000890:	f000 fb74 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000894:	f244 0381 	movw	r3, #16513	; 0x4081
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089a:	2301      	movs	r3, #1
 800089c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	4831      	ldr	r0, [pc, #196]	; (8000974 <MX_GPIO_Init+0x210>)
 80008ae:	f000 fb65 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80008b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b8:	2302      	movs	r3, #2
 80008ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c0:	2303      	movs	r3, #3
 80008c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008c4:	230b      	movs	r3, #11
 80008c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	4829      	ldr	r0, [pc, #164]	; (8000974 <MX_GPIO_Init+0x210>)
 80008d0:	f000 fb54 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008d4:	2340      	movs	r3, #64	; 0x40
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d8:	2301      	movs	r3, #1
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e0:	2300      	movs	r3, #0
 80008e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4619      	mov	r1, r3
 80008ea:	4823      	ldr	r0, [pc, #140]	; (8000978 <MX_GPIO_Init+0x214>)
 80008ec:	f000 fb46 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008f0:	2380      	movs	r3, #128	; 0x80
 80008f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f4:	2300      	movs	r3, #0
 80008f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	481d      	ldr	r0, [pc, #116]	; (8000978 <MX_GPIO_Init+0x214>)
 8000904:	f000 fb3a 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000908:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090e:	2302      	movs	r3, #2
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000916:	2303      	movs	r3, #3
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800091a:	230a      	movs	r3, #10
 800091c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	4816      	ldr	r0, [pc, #88]	; (8000980 <MX_GPIO_Init+0x21c>)
 8000926:	f000 fb29 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800092a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800092e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000930:	2300      	movs	r3, #0
 8000932:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	4619      	mov	r1, r3
 800093e:	4810      	ldr	r0, [pc, #64]	; (8000980 <MX_GPIO_Init+0x21c>)
 8000940:	f000 fb1c 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000944:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000952:	2303      	movs	r3, #3
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000956:	230b      	movs	r3, #11
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	4805      	ldr	r0, [pc, #20]	; (8000978 <MX_GPIO_Init+0x214>)
 8000962:	f000 fb0b 	bl	8000f7c <HAL_GPIO_Init>

}
 8000966:	bf00      	nop
 8000968:	3730      	adds	r7, #48	; 0x30
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40023800 	.word	0x40023800
 8000974:	40020400 	.word	0x40020400
 8000978:	40021800 	.word	0x40021800
 800097c:	40020800 	.word	0x40020800
 8000980:	40020000 	.word	0x40020000

08000984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000988:	b672      	cpsid	i
}
 800098a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800098c:	e7fe      	b.n	800098c <Error_Handler+0x8>
	...

08000990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	4b10      	ldr	r3, [pc, #64]	; (80009dc <HAL_MspInit+0x4c>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099e:	4a0f      	ldr	r2, [pc, #60]	; (80009dc <HAL_MspInit+0x4c>)
 80009a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a4:	6453      	str	r3, [r2, #68]	; 0x44
 80009a6:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <HAL_MspInit+0x4c>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	603b      	str	r3, [r7, #0]
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <HAL_MspInit+0x4c>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	4a08      	ldr	r2, [pc, #32]	; (80009dc <HAL_MspInit+0x4c>)
 80009bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c0:	6413      	str	r3, [r2, #64]	; 0x40
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <HAL_MspInit+0x4c>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	40023800 	.word	0x40023800

080009e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	; 0x28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a19      	ldr	r2, [pc, #100]	; (8000a64 <HAL_UART_MspInit+0x84>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d12c      	bne.n	8000a5c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	613b      	str	r3, [r7, #16]
 8000a06:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <HAL_UART_MspInit+0x88>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	4a17      	ldr	r2, [pc, #92]	; (8000a68 <HAL_UART_MspInit+0x88>)
 8000a0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a10:	6413      	str	r3, [r2, #64]	; 0x40
 8000a12:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <HAL_UART_MspInit+0x88>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <HAL_UART_MspInit+0x88>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a10      	ldr	r2, [pc, #64]	; (8000a68 <HAL_UART_MspInit+0x88>)
 8000a28:	f043 0308 	orr.w	r3, r3, #8
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <HAL_UART_MspInit+0x88>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0308 	and.w	r3, r3, #8
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a40:	2302      	movs	r3, #2
 8000a42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a4c:	2307      	movs	r3, #7
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4619      	mov	r1, r3
 8000a56:	4805      	ldr	r0, [pc, #20]	; (8000a6c <HAL_UART_MspInit+0x8c>)
 8000a58:	f000 fa90 	bl	8000f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a5c:	bf00      	nop
 8000a5e:	3728      	adds	r7, #40	; 0x28
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40004800 	.word	0x40004800
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40020c00 	.word	0x40020c00

08000a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <NMI_Handler+0x4>

08000a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <HardFault_Handler+0x4>

08000a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <MemManage_Handler+0x4>

08000a82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <BusFault_Handler+0x4>

08000a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <UsageFault_Handler+0x4>

08000a8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000abc:	f000 f934 	bl	8000d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]
 8000ad4:	e00a      	b.n	8000aec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ad6:	f3af 8000 	nop.w
 8000ada:	4601      	mov	r1, r0
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	1c5a      	adds	r2, r3, #1
 8000ae0:	60ba      	str	r2, [r7, #8]
 8000ae2:	b2ca      	uxtb	r2, r1
 8000ae4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	617b      	str	r3, [r7, #20]
 8000aec:	697a      	ldr	r2, [r7, #20]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	dbf0      	blt.n	8000ad6 <_read+0x12>
	}

return len;
 8000af4:	687b      	ldr	r3, [r7, #4]
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3718      	adds	r7, #24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b086      	sub	sp, #24
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	60f8      	str	r0, [r7, #12]
 8000b06:	60b9      	str	r1, [r7, #8]
 8000b08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	617b      	str	r3, [r7, #20]
 8000b0e:	e009      	b.n	8000b24 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	1c5a      	adds	r2, r3, #1
 8000b14:	60ba      	str	r2, [r7, #8]
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff fd5c 	bl	80005d6 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	3301      	adds	r3, #1
 8000b22:	617b      	str	r3, [r7, #20]
 8000b24:	697a      	ldr	r2, [r7, #20]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	dbf1      	blt.n	8000b10 <_write+0x12>
	}
	return len;
 8000b2c:	687b      	ldr	r3, [r7, #4]
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <_close>:

int _close(int file)
{
 8000b36:	b480      	push	{r7}
 8000b38:	b083      	sub	sp, #12
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
	return -1;
 8000b3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	b083      	sub	sp, #12
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
 8000b56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b5e:	605a      	str	r2, [r3, #4]
	return 0;
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <_isatty>:

int _isatty(int file)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	b083      	sub	sp, #12
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
	return 1;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
	return 0;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3714      	adds	r7, #20
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
	...

08000ba0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ba8:	4a14      	ldr	r2, [pc, #80]	; (8000bfc <_sbrk+0x5c>)
 8000baa:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <_sbrk+0x60>)
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bb4:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <_sbrk+0x64>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d102      	bne.n	8000bc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bbc:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <_sbrk+0x64>)
 8000bbe:	4a12      	ldr	r2, [pc, #72]	; (8000c08 <_sbrk+0x68>)
 8000bc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <_sbrk+0x64>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4413      	add	r3, r2
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d207      	bcs.n	8000be0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bd0:	f001 fa3e 	bl	8002050 <__errno>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	220c      	movs	r2, #12
 8000bd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bda:	f04f 33ff 	mov.w	r3, #4294967295
 8000bde:	e009      	b.n	8000bf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <_sbrk+0x64>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000be6:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <_sbrk+0x64>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4413      	add	r3, r2
 8000bee:	4a05      	ldr	r2, [pc, #20]	; (8000c04 <_sbrk+0x64>)
 8000bf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20030000 	.word	0x20030000
 8000c00:	00000400 	.word	0x00000400
 8000c04:	2000008c 	.word	0x2000008c
 8000c08:	200000f0 	.word	0x200000f0

08000c0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <SystemInit+0x20>)
 8000c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c16:	4a05      	ldr	r2, [pc, #20]	; (8000c2c <SystemInit+0x20>)
 8000c18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000c30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c68 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c34:	480d      	ldr	r0, [pc, #52]	; (8000c6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c36:	490e      	ldr	r1, [pc, #56]	; (8000c70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c38:	4a0e      	ldr	r2, [pc, #56]	; (8000c74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c3c:	e002      	b.n	8000c44 <LoopCopyDataInit>

08000c3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c42:	3304      	adds	r3, #4

08000c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c48:	d3f9      	bcc.n	8000c3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c4a:	4a0b      	ldr	r2, [pc, #44]	; (8000c78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c4c:	4c0b      	ldr	r4, [pc, #44]	; (8000c7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c50:	e001      	b.n	8000c56 <LoopFillZerobss>

08000c52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c54:	3204      	adds	r2, #4

08000c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c58:	d3fb      	bcc.n	8000c52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c5a:	f7ff ffd7 	bl	8000c0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c5e:	f001 f9fd 	bl	800205c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c62:	f7ff fcc5 	bl	80005f0 <main>
  bx  lr    
 8000c66:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000c68:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000c6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c70:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c74:	08003138 	.word	0x08003138
  ldr r2, =_sbss
 8000c78:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c7c:	200000f0 	.word	0x200000f0

08000c80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c80:	e7fe      	b.n	8000c80 <ADC_IRQHandler>
	...

08000c84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c88:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <HAL_Init+0x40>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a0d      	ldr	r2, [pc, #52]	; (8000cc4 <HAL_Init+0x40>)
 8000c8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c94:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <HAL_Init+0x40>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a0a      	ldr	r2, [pc, #40]	; (8000cc4 <HAL_Init+0x40>)
 8000c9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca0:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <HAL_Init+0x40>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a07      	ldr	r2, [pc, #28]	; (8000cc4 <HAL_Init+0x40>)
 8000ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000caa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cac:	2003      	movs	r0, #3
 8000cae:	f000 f931 	bl	8000f14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	f000 f808 	bl	8000cc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb8:	f7ff fe6a 	bl	8000990 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40023c00 	.word	0x40023c00

08000cc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <HAL_InitTick+0x54>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <HAL_InitTick+0x58>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	4619      	mov	r1, r3
 8000cda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f000 f93b 	bl	8000f62 <HAL_SYSTICK_Config>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e00e      	b.n	8000d14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2b0f      	cmp	r3, #15
 8000cfa:	d80a      	bhi.n	8000d12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	6879      	ldr	r1, [r7, #4]
 8000d00:	f04f 30ff 	mov.w	r0, #4294967295
 8000d04:	f000 f911 	bl	8000f2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d08:	4a06      	ldr	r2, [pc, #24]	; (8000d24 <HAL_InitTick+0x5c>)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	e000      	b.n	8000d14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20000000 	.word	0x20000000
 8000d20:	20000008 	.word	0x20000008
 8000d24:	20000004 	.word	0x20000004

08000d28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_IncTick+0x20>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	461a      	mov	r2, r3
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_IncTick+0x24>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4413      	add	r3, r2
 8000d38:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <HAL_IncTick+0x24>)
 8000d3a:	6013      	str	r3, [r2, #0]
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	20000008 	.word	0x20000008
 8000d4c:	200000dc 	.word	0x200000dc

08000d50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return uwTick;
 8000d54:	4b03      	ldr	r3, [pc, #12]	; (8000d64 <HAL_GetTick+0x14>)
 8000d56:	681b      	ldr	r3, [r3, #0]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	200000dc 	.word	0x200000dc

08000d68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d70:	f7ff ffee 	bl	8000d50 <HAL_GetTick>
 8000d74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d80:	d005      	beq.n	8000d8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d82:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <HAL_Delay+0x44>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	461a      	mov	r2, r3
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d8e:	bf00      	nop
 8000d90:	f7ff ffde 	bl	8000d50 <HAL_GetTick>
 8000d94:	4602      	mov	r2, r0
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	68fa      	ldr	r2, [r7, #12]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d8f7      	bhi.n	8000d90 <HAL_Delay+0x28>
  {
  }
}
 8000da0:	bf00      	nop
 8000da2:	bf00      	nop
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000008 	.word	0x20000008

08000db0 <__NVIC_SetPriorityGrouping>:
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dc6:	68ba      	ldr	r2, [r7, #8]
 8000dc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dcc:	4013      	ands	r3, r2
 8000dce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000de2:	4a04      	ldr	r2, [pc, #16]	; (8000df4 <__NVIC_SetPriorityGrouping+0x44>)
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	60d3      	str	r3, [r2, #12]
}
 8000de8:	bf00      	nop
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <__NVIC_GetPriorityGrouping>:
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dfc:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <__NVIC_GetPriorityGrouping+0x18>)
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	0a1b      	lsrs	r3, r3, #8
 8000e02:	f003 0307 	and.w	r3, r3, #7
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <__NVIC_SetPriority>:
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	6039      	str	r1, [r7, #0]
 8000e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	db0a      	blt.n	8000e3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	490c      	ldr	r1, [pc, #48]	; (8000e60 <__NVIC_SetPriority+0x4c>)
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	0112      	lsls	r2, r2, #4
 8000e34:	b2d2      	uxtb	r2, r2
 8000e36:	440b      	add	r3, r1
 8000e38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000e3c:	e00a      	b.n	8000e54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	4908      	ldr	r1, [pc, #32]	; (8000e64 <__NVIC_SetPriority+0x50>)
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	f003 030f 	and.w	r3, r3, #15
 8000e4a:	3b04      	subs	r3, #4
 8000e4c:	0112      	lsls	r2, r2, #4
 8000e4e:	b2d2      	uxtb	r2, r2
 8000e50:	440b      	add	r3, r1
 8000e52:	761a      	strb	r2, [r3, #24]
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000e100 	.word	0xe000e100
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <NVIC_EncodePriority>:
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b089      	sub	sp, #36	; 0x24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	f1c3 0307 	rsb	r3, r3, #7
 8000e82:	2b04      	cmp	r3, #4
 8000e84:	bf28      	it	cs
 8000e86:	2304      	movcs	r3, #4
 8000e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3304      	adds	r3, #4
 8000e8e:	2b06      	cmp	r3, #6
 8000e90:	d902      	bls.n	8000e98 <NVIC_EncodePriority+0x30>
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	3b03      	subs	r3, #3
 8000e96:	e000      	b.n	8000e9a <NVIC_EncodePriority+0x32>
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43da      	mvns	r2, r3
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	401a      	ands	r2, r3
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eba:	43d9      	mvns	r1, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec0:	4313      	orrs	r3, r2
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3724      	adds	r7, #36	; 0x24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
	...

08000ed0 <SysTick_Config>:
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ee0:	d301      	bcc.n	8000ee6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e00f      	b.n	8000f06 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee6:	4a0a      	ldr	r2, [pc, #40]	; (8000f10 <SysTick_Config+0x40>)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eee:	210f      	movs	r1, #15
 8000ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef4:	f7ff ff8e 	bl	8000e14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef8:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <SysTick_Config+0x40>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efe:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <SysTick_Config+0x40>)
 8000f00:	2207      	movs	r2, #7
 8000f02:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	e000e010 	.word	0xe000e010

08000f14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff ff47 	bl	8000db0 <__NVIC_SetPriorityGrouping>
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b086      	sub	sp, #24
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	4603      	mov	r3, r0
 8000f32:	60b9      	str	r1, [r7, #8]
 8000f34:	607a      	str	r2, [r7, #4]
 8000f36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f3c:	f7ff ff5c 	bl	8000df8 <__NVIC_GetPriorityGrouping>
 8000f40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	68b9      	ldr	r1, [r7, #8]
 8000f46:	6978      	ldr	r0, [r7, #20]
 8000f48:	f7ff ff8e 	bl	8000e68 <NVIC_EncodePriority>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f52:	4611      	mov	r1, r2
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff ff5d 	bl	8000e14 <__NVIC_SetPriority>
}
 8000f5a:	bf00      	nop
 8000f5c:	3718      	adds	r7, #24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff ffb0 	bl	8000ed0 <SysTick_Config>
 8000f70:	4603      	mov	r3, r0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b089      	sub	sp, #36	; 0x24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f92:	2300      	movs	r3, #0
 8000f94:	61fb      	str	r3, [r7, #28]
 8000f96:	e177      	b.n	8001288 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f98:	2201      	movs	r2, #1
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	697a      	ldr	r2, [r7, #20]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	f040 8166 	bne.w	8001282 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f003 0303 	and.w	r3, r3, #3
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d005      	beq.n	8000fce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d130      	bne.n	8001030 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	2203      	movs	r2, #3
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	68da      	ldr	r2, [r3, #12]
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001004:	2201      	movs	r2, #1
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4013      	ands	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	091b      	lsrs	r3, r3, #4
 800101a:	f003 0201 	and.w	r2, r3, #1
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4313      	orrs	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 0303 	and.w	r3, r3, #3
 8001038:	2b03      	cmp	r3, #3
 800103a:	d017      	beq.n	800106c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	2203      	movs	r2, #3
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4013      	ands	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	689a      	ldr	r2, [r3, #8]
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4313      	orrs	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 0303 	and.w	r3, r3, #3
 8001074:	2b02      	cmp	r3, #2
 8001076:	d123      	bne.n	80010c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	08da      	lsrs	r2, r3, #3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3208      	adds	r2, #8
 8001080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001084:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	f003 0307 	and.w	r3, r3, #7
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	220f      	movs	r2, #15
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	691a      	ldr	r2, [r3, #16]
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	08da      	lsrs	r2, r3, #3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	3208      	adds	r2, #8
 80010ba:	69b9      	ldr	r1, [r7, #24]
 80010bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	2203      	movs	r2, #3
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4013      	ands	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f003 0203 	and.w	r2, r3, #3
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	f000 80c0 	beq.w	8001282 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	4b66      	ldr	r3, [pc, #408]	; (80012a0 <HAL_GPIO_Init+0x324>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110a:	4a65      	ldr	r2, [pc, #404]	; (80012a0 <HAL_GPIO_Init+0x324>)
 800110c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001110:	6453      	str	r3, [r2, #68]	; 0x44
 8001112:	4b63      	ldr	r3, [pc, #396]	; (80012a0 <HAL_GPIO_Init+0x324>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800111e:	4a61      	ldr	r2, [pc, #388]	; (80012a4 <HAL_GPIO_Init+0x328>)
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	089b      	lsrs	r3, r3, #2
 8001124:	3302      	adds	r3, #2
 8001126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800112a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	f003 0303 	and.w	r3, r3, #3
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	220f      	movs	r2, #15
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43db      	mvns	r3, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4013      	ands	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a58      	ldr	r2, [pc, #352]	; (80012a8 <HAL_GPIO_Init+0x32c>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d037      	beq.n	80011ba <HAL_GPIO_Init+0x23e>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a57      	ldr	r2, [pc, #348]	; (80012ac <HAL_GPIO_Init+0x330>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d031      	beq.n	80011b6 <HAL_GPIO_Init+0x23a>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a56      	ldr	r2, [pc, #344]	; (80012b0 <HAL_GPIO_Init+0x334>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d02b      	beq.n	80011b2 <HAL_GPIO_Init+0x236>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a55      	ldr	r2, [pc, #340]	; (80012b4 <HAL_GPIO_Init+0x338>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d025      	beq.n	80011ae <HAL_GPIO_Init+0x232>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a54      	ldr	r2, [pc, #336]	; (80012b8 <HAL_GPIO_Init+0x33c>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d01f      	beq.n	80011aa <HAL_GPIO_Init+0x22e>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a53      	ldr	r2, [pc, #332]	; (80012bc <HAL_GPIO_Init+0x340>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d019      	beq.n	80011a6 <HAL_GPIO_Init+0x22a>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a52      	ldr	r2, [pc, #328]	; (80012c0 <HAL_GPIO_Init+0x344>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d013      	beq.n	80011a2 <HAL_GPIO_Init+0x226>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a51      	ldr	r2, [pc, #324]	; (80012c4 <HAL_GPIO_Init+0x348>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d00d      	beq.n	800119e <HAL_GPIO_Init+0x222>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a50      	ldr	r2, [pc, #320]	; (80012c8 <HAL_GPIO_Init+0x34c>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d007      	beq.n	800119a <HAL_GPIO_Init+0x21e>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a4f      	ldr	r2, [pc, #316]	; (80012cc <HAL_GPIO_Init+0x350>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d101      	bne.n	8001196 <HAL_GPIO_Init+0x21a>
 8001192:	2309      	movs	r3, #9
 8001194:	e012      	b.n	80011bc <HAL_GPIO_Init+0x240>
 8001196:	230a      	movs	r3, #10
 8001198:	e010      	b.n	80011bc <HAL_GPIO_Init+0x240>
 800119a:	2308      	movs	r3, #8
 800119c:	e00e      	b.n	80011bc <HAL_GPIO_Init+0x240>
 800119e:	2307      	movs	r3, #7
 80011a0:	e00c      	b.n	80011bc <HAL_GPIO_Init+0x240>
 80011a2:	2306      	movs	r3, #6
 80011a4:	e00a      	b.n	80011bc <HAL_GPIO_Init+0x240>
 80011a6:	2305      	movs	r3, #5
 80011a8:	e008      	b.n	80011bc <HAL_GPIO_Init+0x240>
 80011aa:	2304      	movs	r3, #4
 80011ac:	e006      	b.n	80011bc <HAL_GPIO_Init+0x240>
 80011ae:	2303      	movs	r3, #3
 80011b0:	e004      	b.n	80011bc <HAL_GPIO_Init+0x240>
 80011b2:	2302      	movs	r3, #2
 80011b4:	e002      	b.n	80011bc <HAL_GPIO_Init+0x240>
 80011b6:	2301      	movs	r3, #1
 80011b8:	e000      	b.n	80011bc <HAL_GPIO_Init+0x240>
 80011ba:	2300      	movs	r3, #0
 80011bc:	69fa      	ldr	r2, [r7, #28]
 80011be:	f002 0203 	and.w	r2, r2, #3
 80011c2:	0092      	lsls	r2, r2, #2
 80011c4:	4093      	lsls	r3, r2
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011cc:	4935      	ldr	r1, [pc, #212]	; (80012a4 <HAL_GPIO_Init+0x328>)
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	089b      	lsrs	r3, r3, #2
 80011d2:	3302      	adds	r3, #2
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011da:	4b3d      	ldr	r3, [pc, #244]	; (80012d0 <HAL_GPIO_Init+0x354>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	43db      	mvns	r3, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4013      	ands	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011fe:	4a34      	ldr	r2, [pc, #208]	; (80012d0 <HAL_GPIO_Init+0x354>)
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001204:	4b32      	ldr	r3, [pc, #200]	; (80012d0 <HAL_GPIO_Init+0x354>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d003      	beq.n	8001228 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	4313      	orrs	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001228:	4a29      	ldr	r2, [pc, #164]	; (80012d0 <HAL_GPIO_Init+0x354>)
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800122e:	4b28      	ldr	r3, [pc, #160]	; (80012d0 <HAL_GPIO_Init+0x354>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	43db      	mvns	r3, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4013      	ands	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d003      	beq.n	8001252 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	4313      	orrs	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001252:	4a1f      	ldr	r2, [pc, #124]	; (80012d0 <HAL_GPIO_Init+0x354>)
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001258:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <HAL_GPIO_Init+0x354>)
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d003      	beq.n	800127c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	4313      	orrs	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800127c:	4a14      	ldr	r2, [pc, #80]	; (80012d0 <HAL_GPIO_Init+0x354>)
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3301      	adds	r3, #1
 8001286:	61fb      	str	r3, [r7, #28]
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	2b0f      	cmp	r3, #15
 800128c:	f67f ae84 	bls.w	8000f98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001290:	bf00      	nop
 8001292:	bf00      	nop
 8001294:	3724      	adds	r7, #36	; 0x24
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40013800 	.word	0x40013800
 80012a8:	40020000 	.word	0x40020000
 80012ac:	40020400 	.word	0x40020400
 80012b0:	40020800 	.word	0x40020800
 80012b4:	40020c00 	.word	0x40020c00
 80012b8:	40021000 	.word	0x40021000
 80012bc:	40021400 	.word	0x40021400
 80012c0:	40021800 	.word	0x40021800
 80012c4:	40021c00 	.word	0x40021c00
 80012c8:	40022000 	.word	0x40022000
 80012cc:	40022400 	.word	0x40022400
 80012d0:	40013c00 	.word	0x40013c00

080012d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	460b      	mov	r3, r1
 80012de:	807b      	strh	r3, [r7, #2]
 80012e0:	4613      	mov	r3, r2
 80012e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012e4:	787b      	ldrb	r3, [r7, #1]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ea:	887a      	ldrh	r2, [r7, #2]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012f0:	e003      	b.n	80012fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012f2:	887b      	ldrh	r3, [r7, #2]
 80012f4:	041a      	lsls	r2, r3, #16
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	619a      	str	r2, [r3, #24]
}
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001306:	b480      	push	{r7}
 8001308:	b085      	sub	sp, #20
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
 800130e:	460b      	mov	r3, r1
 8001310:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001318:	887a      	ldrh	r2, [r7, #2]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	4013      	ands	r3, r2
 800131e:	041a      	lsls	r2, r3, #16
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	43d9      	mvns	r1, r3
 8001324:	887b      	ldrh	r3, [r7, #2]
 8001326:	400b      	ands	r3, r1
 8001328:	431a      	orrs	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	619a      	str	r2, [r3, #24]
}
 800132e:	bf00      	nop
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
	...

0800133c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e264      	b.n	8001818 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	2b00      	cmp	r3, #0
 8001358:	d075      	beq.n	8001446 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800135a:	4ba3      	ldr	r3, [pc, #652]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 030c 	and.w	r3, r3, #12
 8001362:	2b04      	cmp	r3, #4
 8001364:	d00c      	beq.n	8001380 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001366:	4ba0      	ldr	r3, [pc, #640]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800136e:	2b08      	cmp	r3, #8
 8001370:	d112      	bne.n	8001398 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001372:	4b9d      	ldr	r3, [pc, #628]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800137a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800137e:	d10b      	bne.n	8001398 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001380:	4b99      	ldr	r3, [pc, #612]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d05b      	beq.n	8001444 <HAL_RCC_OscConfig+0x108>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d157      	bne.n	8001444 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e23f      	b.n	8001818 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013a0:	d106      	bne.n	80013b0 <HAL_RCC_OscConfig+0x74>
 80013a2:	4b91      	ldr	r3, [pc, #580]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a90      	ldr	r2, [pc, #576]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 80013a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	e01d      	b.n	80013ec <HAL_RCC_OscConfig+0xb0>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013b8:	d10c      	bne.n	80013d4 <HAL_RCC_OscConfig+0x98>
 80013ba:	4b8b      	ldr	r3, [pc, #556]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a8a      	ldr	r2, [pc, #552]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 80013c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	4b88      	ldr	r3, [pc, #544]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a87      	ldr	r2, [pc, #540]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 80013cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	e00b      	b.n	80013ec <HAL_RCC_OscConfig+0xb0>
 80013d4:	4b84      	ldr	r3, [pc, #528]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a83      	ldr	r2, [pc, #524]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 80013da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013de:	6013      	str	r3, [r2, #0]
 80013e0:	4b81      	ldr	r3, [pc, #516]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a80      	ldr	r2, [pc, #512]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 80013e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d013      	beq.n	800141c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f4:	f7ff fcac 	bl	8000d50 <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013fc:	f7ff fca8 	bl	8000d50 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b64      	cmp	r3, #100	; 0x64
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e204      	b.n	8001818 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800140e:	4b76      	ldr	r3, [pc, #472]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d0f0      	beq.n	80013fc <HAL_RCC_OscConfig+0xc0>
 800141a:	e014      	b.n	8001446 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141c:	f7ff fc98 	bl	8000d50 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001424:	f7ff fc94 	bl	8000d50 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b64      	cmp	r3, #100	; 0x64
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e1f0      	b.n	8001818 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001436:	4b6c      	ldr	r3, [pc, #432]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f0      	bne.n	8001424 <HAL_RCC_OscConfig+0xe8>
 8001442:	e000      	b.n	8001446 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d063      	beq.n	800151a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001452:	4b65      	ldr	r3, [pc, #404]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f003 030c 	and.w	r3, r3, #12
 800145a:	2b00      	cmp	r3, #0
 800145c:	d00b      	beq.n	8001476 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800145e:	4b62      	ldr	r3, [pc, #392]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001466:	2b08      	cmp	r3, #8
 8001468:	d11c      	bne.n	80014a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800146a:	4b5f      	ldr	r3, [pc, #380]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d116      	bne.n	80014a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001476:	4b5c      	ldr	r3, [pc, #368]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d005      	beq.n	800148e <HAL_RCC_OscConfig+0x152>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d001      	beq.n	800148e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e1c4      	b.n	8001818 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800148e:	4b56      	ldr	r3, [pc, #344]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	4952      	ldr	r1, [pc, #328]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 800149e:	4313      	orrs	r3, r2
 80014a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014a2:	e03a      	b.n	800151a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d020      	beq.n	80014ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014ac:	4b4f      	ldr	r3, [pc, #316]	; (80015ec <HAL_RCC_OscConfig+0x2b0>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b2:	f7ff fc4d 	bl	8000d50 <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ba:	f7ff fc49 	bl	8000d50 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e1a5      	b.n	8001818 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014cc:	4b46      	ldr	r3, [pc, #280]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0f0      	beq.n	80014ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d8:	4b43      	ldr	r3, [pc, #268]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	691b      	ldr	r3, [r3, #16]
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	4940      	ldr	r1, [pc, #256]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 80014e8:	4313      	orrs	r3, r2
 80014ea:	600b      	str	r3, [r1, #0]
 80014ec:	e015      	b.n	800151a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ee:	4b3f      	ldr	r3, [pc, #252]	; (80015ec <HAL_RCC_OscConfig+0x2b0>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f4:	f7ff fc2c 	bl	8000d50 <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014fc:	f7ff fc28 	bl	8000d50 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e184      	b.n	8001818 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800150e:	4b36      	ldr	r3, [pc, #216]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1f0      	bne.n	80014fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0308 	and.w	r3, r3, #8
 8001522:	2b00      	cmp	r3, #0
 8001524:	d030      	beq.n	8001588 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d016      	beq.n	800155c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800152e:	4b30      	ldr	r3, [pc, #192]	; (80015f0 <HAL_RCC_OscConfig+0x2b4>)
 8001530:	2201      	movs	r2, #1
 8001532:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001534:	f7ff fc0c 	bl	8000d50 <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800153c:	f7ff fc08 	bl	8000d50 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e164      	b.n	8001818 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800154e:	4b26      	ldr	r3, [pc, #152]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 8001550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d0f0      	beq.n	800153c <HAL_RCC_OscConfig+0x200>
 800155a:	e015      	b.n	8001588 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800155c:	4b24      	ldr	r3, [pc, #144]	; (80015f0 <HAL_RCC_OscConfig+0x2b4>)
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001562:	f7ff fbf5 	bl	8000d50 <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800156a:	f7ff fbf1 	bl	8000d50 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e14d      	b.n	8001818 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800157c:	4b1a      	ldr	r3, [pc, #104]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 800157e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1f0      	bne.n	800156a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0304 	and.w	r3, r3, #4
 8001590:	2b00      	cmp	r3, #0
 8001592:	f000 80a0 	beq.w	80016d6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001596:	2300      	movs	r3, #0
 8001598:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800159a:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d10f      	bne.n	80015c6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	60bb      	str	r3, [r7, #8]
 80015aa:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	4a0e      	ldr	r2, [pc, #56]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 80015b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b4:	6413      	str	r3, [r2, #64]	; 0x40
 80015b6:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015c2:	2301      	movs	r3, #1
 80015c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c6:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <HAL_RCC_OscConfig+0x2b8>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d121      	bne.n	8001616 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015d2:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <HAL_RCC_OscConfig+0x2b8>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a07      	ldr	r2, [pc, #28]	; (80015f4 <HAL_RCC_OscConfig+0x2b8>)
 80015d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015de:	f7ff fbb7 	bl	8000d50 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e4:	e011      	b.n	800160a <HAL_RCC_OscConfig+0x2ce>
 80015e6:	bf00      	nop
 80015e8:	40023800 	.word	0x40023800
 80015ec:	42470000 	.word	0x42470000
 80015f0:	42470e80 	.word	0x42470e80
 80015f4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015f8:	f7ff fbaa 	bl	8000d50 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e106      	b.n	8001818 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800160a:	4b85      	ldr	r3, [pc, #532]	; (8001820 <HAL_RCC_OscConfig+0x4e4>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001612:	2b00      	cmp	r3, #0
 8001614:	d0f0      	beq.n	80015f8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d106      	bne.n	800162c <HAL_RCC_OscConfig+0x2f0>
 800161e:	4b81      	ldr	r3, [pc, #516]	; (8001824 <HAL_RCC_OscConfig+0x4e8>)
 8001620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001622:	4a80      	ldr	r2, [pc, #512]	; (8001824 <HAL_RCC_OscConfig+0x4e8>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	6713      	str	r3, [r2, #112]	; 0x70
 800162a:	e01c      	b.n	8001666 <HAL_RCC_OscConfig+0x32a>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	2b05      	cmp	r3, #5
 8001632:	d10c      	bne.n	800164e <HAL_RCC_OscConfig+0x312>
 8001634:	4b7b      	ldr	r3, [pc, #492]	; (8001824 <HAL_RCC_OscConfig+0x4e8>)
 8001636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001638:	4a7a      	ldr	r2, [pc, #488]	; (8001824 <HAL_RCC_OscConfig+0x4e8>)
 800163a:	f043 0304 	orr.w	r3, r3, #4
 800163e:	6713      	str	r3, [r2, #112]	; 0x70
 8001640:	4b78      	ldr	r3, [pc, #480]	; (8001824 <HAL_RCC_OscConfig+0x4e8>)
 8001642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001644:	4a77      	ldr	r2, [pc, #476]	; (8001824 <HAL_RCC_OscConfig+0x4e8>)
 8001646:	f043 0301 	orr.w	r3, r3, #1
 800164a:	6713      	str	r3, [r2, #112]	; 0x70
 800164c:	e00b      	b.n	8001666 <HAL_RCC_OscConfig+0x32a>
 800164e:	4b75      	ldr	r3, [pc, #468]	; (8001824 <HAL_RCC_OscConfig+0x4e8>)
 8001650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001652:	4a74      	ldr	r2, [pc, #464]	; (8001824 <HAL_RCC_OscConfig+0x4e8>)
 8001654:	f023 0301 	bic.w	r3, r3, #1
 8001658:	6713      	str	r3, [r2, #112]	; 0x70
 800165a:	4b72      	ldr	r3, [pc, #456]	; (8001824 <HAL_RCC_OscConfig+0x4e8>)
 800165c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800165e:	4a71      	ldr	r2, [pc, #452]	; (8001824 <HAL_RCC_OscConfig+0x4e8>)
 8001660:	f023 0304 	bic.w	r3, r3, #4
 8001664:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d015      	beq.n	800169a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800166e:	f7ff fb6f 	bl	8000d50 <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001674:	e00a      	b.n	800168c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001676:	f7ff fb6b 	bl	8000d50 <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	f241 3288 	movw	r2, #5000	; 0x1388
 8001684:	4293      	cmp	r3, r2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e0c5      	b.n	8001818 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800168c:	4b65      	ldr	r3, [pc, #404]	; (8001824 <HAL_RCC_OscConfig+0x4e8>)
 800168e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d0ee      	beq.n	8001676 <HAL_RCC_OscConfig+0x33a>
 8001698:	e014      	b.n	80016c4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800169a:	f7ff fb59 	bl	8000d50 <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a0:	e00a      	b.n	80016b8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016a2:	f7ff fb55 	bl	8000d50 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e0af      	b.n	8001818 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b8:	4b5a      	ldr	r3, [pc, #360]	; (8001824 <HAL_RCC_OscConfig+0x4e8>)
 80016ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1ee      	bne.n	80016a2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016c4:	7dfb      	ldrb	r3, [r7, #23]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d105      	bne.n	80016d6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016ca:	4b56      	ldr	r3, [pc, #344]	; (8001824 <HAL_RCC_OscConfig+0x4e8>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	4a55      	ldr	r2, [pc, #340]	; (8001824 <HAL_RCC_OscConfig+0x4e8>)
 80016d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f000 809b 	beq.w	8001816 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016e0:	4b50      	ldr	r3, [pc, #320]	; (8001824 <HAL_RCC_OscConfig+0x4e8>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f003 030c 	and.w	r3, r3, #12
 80016e8:	2b08      	cmp	r3, #8
 80016ea:	d05c      	beq.n	80017a6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d141      	bne.n	8001778 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f4:	4b4c      	ldr	r3, [pc, #304]	; (8001828 <HAL_RCC_OscConfig+0x4ec>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fa:	f7ff fb29 	bl	8000d50 <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001700:	e008      	b.n	8001714 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001702:	f7ff fb25 	bl	8000d50 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e081      	b.n	8001818 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001714:	4b43      	ldr	r3, [pc, #268]	; (8001824 <HAL_RCC_OscConfig+0x4e8>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1f0      	bne.n	8001702 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	69da      	ldr	r2, [r3, #28]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a1b      	ldr	r3, [r3, #32]
 8001728:	431a      	orrs	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172e:	019b      	lsls	r3, r3, #6
 8001730:	431a      	orrs	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001736:	085b      	lsrs	r3, r3, #1
 8001738:	3b01      	subs	r3, #1
 800173a:	041b      	lsls	r3, r3, #16
 800173c:	431a      	orrs	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001742:	061b      	lsls	r3, r3, #24
 8001744:	4937      	ldr	r1, [pc, #220]	; (8001824 <HAL_RCC_OscConfig+0x4e8>)
 8001746:	4313      	orrs	r3, r2
 8001748:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800174a:	4b37      	ldr	r3, [pc, #220]	; (8001828 <HAL_RCC_OscConfig+0x4ec>)
 800174c:	2201      	movs	r2, #1
 800174e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001750:	f7ff fafe 	bl	8000d50 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001758:	f7ff fafa 	bl	8000d50 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e056      	b.n	8001818 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800176a:	4b2e      	ldr	r3, [pc, #184]	; (8001824 <HAL_RCC_OscConfig+0x4e8>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f0      	beq.n	8001758 <HAL_RCC_OscConfig+0x41c>
 8001776:	e04e      	b.n	8001816 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001778:	4b2b      	ldr	r3, [pc, #172]	; (8001828 <HAL_RCC_OscConfig+0x4ec>)
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177e:	f7ff fae7 	bl	8000d50 <HAL_GetTick>
 8001782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001784:	e008      	b.n	8001798 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001786:	f7ff fae3 	bl	8000d50 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e03f      	b.n	8001818 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001798:	4b22      	ldr	r3, [pc, #136]	; (8001824 <HAL_RCC_OscConfig+0x4e8>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1f0      	bne.n	8001786 <HAL_RCC_OscConfig+0x44a>
 80017a4:	e037      	b.n	8001816 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d101      	bne.n	80017b2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e032      	b.n	8001818 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017b2:	4b1c      	ldr	r3, [pc, #112]	; (8001824 <HAL_RCC_OscConfig+0x4e8>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d028      	beq.n	8001812 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d121      	bne.n	8001812 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017d8:	429a      	cmp	r2, r3
 80017da:	d11a      	bne.n	8001812 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017dc:	68fa      	ldr	r2, [r7, #12]
 80017de:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017e2:	4013      	ands	r3, r2
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017e8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d111      	bne.n	8001812 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f8:	085b      	lsrs	r3, r3, #1
 80017fa:	3b01      	subs	r3, #1
 80017fc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017fe:	429a      	cmp	r2, r3
 8001800:	d107      	bne.n	8001812 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800180e:	429a      	cmp	r2, r3
 8001810:	d001      	beq.n	8001816 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e000      	b.n	8001818 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40007000 	.word	0x40007000
 8001824:	40023800 	.word	0x40023800
 8001828:	42470060 	.word	0x42470060

0800182c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d101      	bne.n	8001840 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e0cc      	b.n	80019da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001840:	4b68      	ldr	r3, [pc, #416]	; (80019e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 030f 	and.w	r3, r3, #15
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	429a      	cmp	r2, r3
 800184c:	d90c      	bls.n	8001868 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184e:	4b65      	ldr	r3, [pc, #404]	; (80019e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001856:	4b63      	ldr	r3, [pc, #396]	; (80019e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	429a      	cmp	r2, r3
 8001862:	d001      	beq.n	8001868 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e0b8      	b.n	80019da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d020      	beq.n	80018b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b00      	cmp	r3, #0
 800187e:	d005      	beq.n	800188c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001880:	4b59      	ldr	r3, [pc, #356]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	4a58      	ldr	r2, [pc, #352]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800188a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0308 	and.w	r3, r3, #8
 8001894:	2b00      	cmp	r3, #0
 8001896:	d005      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001898:	4b53      	ldr	r3, [pc, #332]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	4a52      	ldr	r2, [pc, #328]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 800189e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018a4:	4b50      	ldr	r3, [pc, #320]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	494d      	ldr	r1, [pc, #308]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d044      	beq.n	800194c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d107      	bne.n	80018da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ca:	4b47      	ldr	r3, [pc, #284]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d119      	bne.n	800190a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e07f      	b.n	80019da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d003      	beq.n	80018ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018e6:	2b03      	cmp	r3, #3
 80018e8:	d107      	bne.n	80018fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ea:	4b3f      	ldr	r3, [pc, #252]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d109      	bne.n	800190a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e06f      	b.n	80019da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018fa:	4b3b      	ldr	r3, [pc, #236]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e067      	b.n	80019da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800190a:	4b37      	ldr	r3, [pc, #220]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f023 0203 	bic.w	r2, r3, #3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	4934      	ldr	r1, [pc, #208]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001918:	4313      	orrs	r3, r2
 800191a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800191c:	f7ff fa18 	bl	8000d50 <HAL_GetTick>
 8001920:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001922:	e00a      	b.n	800193a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001924:	f7ff fa14 	bl	8000d50 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001932:	4293      	cmp	r3, r2
 8001934:	d901      	bls.n	800193a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e04f      	b.n	80019da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800193a:	4b2b      	ldr	r3, [pc, #172]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f003 020c 	and.w	r2, r3, #12
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	429a      	cmp	r2, r3
 800194a:	d1eb      	bne.n	8001924 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800194c:	4b25      	ldr	r3, [pc, #148]	; (80019e4 <HAL_RCC_ClockConfig+0x1b8>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 030f 	and.w	r3, r3, #15
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	429a      	cmp	r2, r3
 8001958:	d20c      	bcs.n	8001974 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800195a:	4b22      	ldr	r3, [pc, #136]	; (80019e4 <HAL_RCC_ClockConfig+0x1b8>)
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	b2d2      	uxtb	r2, r2
 8001960:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001962:	4b20      	ldr	r3, [pc, #128]	; (80019e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 030f 	and.w	r3, r3, #15
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	429a      	cmp	r2, r3
 800196e:	d001      	beq.n	8001974 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e032      	b.n	80019da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	2b00      	cmp	r3, #0
 800197e:	d008      	beq.n	8001992 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001980:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	4916      	ldr	r1, [pc, #88]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 800198e:	4313      	orrs	r3, r2
 8001990:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0308 	and.w	r3, r3, #8
 800199a:	2b00      	cmp	r3, #0
 800199c:	d009      	beq.n	80019b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800199e:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	490e      	ldr	r1, [pc, #56]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019b2:	f000 f821 	bl	80019f8 <HAL_RCC_GetSysClockFreq>
 80019b6:	4602      	mov	r2, r0
 80019b8:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	091b      	lsrs	r3, r3, #4
 80019be:	f003 030f 	and.w	r3, r3, #15
 80019c2:	490a      	ldr	r1, [pc, #40]	; (80019ec <HAL_RCC_ClockConfig+0x1c0>)
 80019c4:	5ccb      	ldrb	r3, [r1, r3]
 80019c6:	fa22 f303 	lsr.w	r3, r2, r3
 80019ca:	4a09      	ldr	r2, [pc, #36]	; (80019f0 <HAL_RCC_ClockConfig+0x1c4>)
 80019cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019ce:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <HAL_RCC_ClockConfig+0x1c8>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff f978 	bl	8000cc8 <HAL_InitTick>

  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40023c00 	.word	0x40023c00
 80019e8:	40023800 	.word	0x40023800
 80019ec:	08003078 	.word	0x08003078
 80019f0:	20000000 	.word	0x20000000
 80019f4:	20000004 	.word	0x20000004

080019f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80019fc:	b084      	sub	sp, #16
 80019fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a00:	2300      	movs	r3, #0
 8001a02:	607b      	str	r3, [r7, #4]
 8001a04:	2300      	movs	r3, #0
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	2300      	movs	r3, #0
 8001a0a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a10:	4b67      	ldr	r3, [pc, #412]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 030c 	and.w	r3, r3, #12
 8001a18:	2b08      	cmp	r3, #8
 8001a1a:	d00d      	beq.n	8001a38 <HAL_RCC_GetSysClockFreq+0x40>
 8001a1c:	2b08      	cmp	r3, #8
 8001a1e:	f200 80bd 	bhi.w	8001b9c <HAL_RCC_GetSysClockFreq+0x1a4>
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d002      	beq.n	8001a2c <HAL_RCC_GetSysClockFreq+0x34>
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	d003      	beq.n	8001a32 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a2a:	e0b7      	b.n	8001b9c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a2c:	4b61      	ldr	r3, [pc, #388]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001a2e:	60bb      	str	r3, [r7, #8]
       break;
 8001a30:	e0b7      	b.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a32:	4b61      	ldr	r3, [pc, #388]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001a34:	60bb      	str	r3, [r7, #8]
      break;
 8001a36:	e0b4      	b.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a38:	4b5d      	ldr	r3, [pc, #372]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a40:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a42:	4b5b      	ldr	r3, [pc, #364]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d04d      	beq.n	8001aea <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a4e:	4b58      	ldr	r3, [pc, #352]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	099b      	lsrs	r3, r3, #6
 8001a54:	461a      	mov	r2, r3
 8001a56:	f04f 0300 	mov.w	r3, #0
 8001a5a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a5e:	f04f 0100 	mov.w	r1, #0
 8001a62:	ea02 0800 	and.w	r8, r2, r0
 8001a66:	ea03 0901 	and.w	r9, r3, r1
 8001a6a:	4640      	mov	r0, r8
 8001a6c:	4649      	mov	r1, r9
 8001a6e:	f04f 0200 	mov.w	r2, #0
 8001a72:	f04f 0300 	mov.w	r3, #0
 8001a76:	014b      	lsls	r3, r1, #5
 8001a78:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a7c:	0142      	lsls	r2, r0, #5
 8001a7e:	4610      	mov	r0, r2
 8001a80:	4619      	mov	r1, r3
 8001a82:	ebb0 0008 	subs.w	r0, r0, r8
 8001a86:	eb61 0109 	sbc.w	r1, r1, r9
 8001a8a:	f04f 0200 	mov.w	r2, #0
 8001a8e:	f04f 0300 	mov.w	r3, #0
 8001a92:	018b      	lsls	r3, r1, #6
 8001a94:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a98:	0182      	lsls	r2, r0, #6
 8001a9a:	1a12      	subs	r2, r2, r0
 8001a9c:	eb63 0301 	sbc.w	r3, r3, r1
 8001aa0:	f04f 0000 	mov.w	r0, #0
 8001aa4:	f04f 0100 	mov.w	r1, #0
 8001aa8:	00d9      	lsls	r1, r3, #3
 8001aaa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001aae:	00d0      	lsls	r0, r2, #3
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	eb12 0208 	adds.w	r2, r2, r8
 8001ab8:	eb43 0309 	adc.w	r3, r3, r9
 8001abc:	f04f 0000 	mov.w	r0, #0
 8001ac0:	f04f 0100 	mov.w	r1, #0
 8001ac4:	0259      	lsls	r1, r3, #9
 8001ac6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001aca:	0250      	lsls	r0, r2, #9
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	f04f 0300 	mov.w	r3, #0
 8001adc:	f7fe fbd8 	bl	8000290 <__aeabi_uldivmod>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	e04a      	b.n	8001b80 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aea:	4b31      	ldr	r3, [pc, #196]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	099b      	lsrs	r3, r3, #6
 8001af0:	461a      	mov	r2, r3
 8001af2:	f04f 0300 	mov.w	r3, #0
 8001af6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001afa:	f04f 0100 	mov.w	r1, #0
 8001afe:	ea02 0400 	and.w	r4, r2, r0
 8001b02:	ea03 0501 	and.w	r5, r3, r1
 8001b06:	4620      	mov	r0, r4
 8001b08:	4629      	mov	r1, r5
 8001b0a:	f04f 0200 	mov.w	r2, #0
 8001b0e:	f04f 0300 	mov.w	r3, #0
 8001b12:	014b      	lsls	r3, r1, #5
 8001b14:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b18:	0142      	lsls	r2, r0, #5
 8001b1a:	4610      	mov	r0, r2
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	1b00      	subs	r0, r0, r4
 8001b20:	eb61 0105 	sbc.w	r1, r1, r5
 8001b24:	f04f 0200 	mov.w	r2, #0
 8001b28:	f04f 0300 	mov.w	r3, #0
 8001b2c:	018b      	lsls	r3, r1, #6
 8001b2e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b32:	0182      	lsls	r2, r0, #6
 8001b34:	1a12      	subs	r2, r2, r0
 8001b36:	eb63 0301 	sbc.w	r3, r3, r1
 8001b3a:	f04f 0000 	mov.w	r0, #0
 8001b3e:	f04f 0100 	mov.w	r1, #0
 8001b42:	00d9      	lsls	r1, r3, #3
 8001b44:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b48:	00d0      	lsls	r0, r2, #3
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	1912      	adds	r2, r2, r4
 8001b50:	eb45 0303 	adc.w	r3, r5, r3
 8001b54:	f04f 0000 	mov.w	r0, #0
 8001b58:	f04f 0100 	mov.w	r1, #0
 8001b5c:	0299      	lsls	r1, r3, #10
 8001b5e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001b62:	0290      	lsls	r0, r2, #10
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4610      	mov	r0, r2
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	f04f 0300 	mov.w	r3, #0
 8001b74:	f7fe fb8c 	bl	8000290 <__aeabi_uldivmod>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b80:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	0c1b      	lsrs	r3, r3, #16
 8001b86:	f003 0303 	and.w	r3, r3, #3
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b98:	60bb      	str	r3, [r7, #8]
      break;
 8001b9a:	e002      	b.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b9c:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001b9e:	60bb      	str	r3, [r7, #8]
      break;
 8001ba0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ba2:	68bb      	ldr	r3, [r7, #8]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001bae:	bf00      	nop
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	00f42400 	.word	0x00f42400
 8001bb8:	007a1200 	.word	0x007a1200

08001bbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bc0:	4b03      	ldr	r3, [pc, #12]	; (8001bd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	20000000 	.word	0x20000000

08001bd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bd8:	f7ff fff0 	bl	8001bbc <HAL_RCC_GetHCLKFreq>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	0a9b      	lsrs	r3, r3, #10
 8001be4:	f003 0307 	and.w	r3, r3, #7
 8001be8:	4903      	ldr	r1, [pc, #12]	; (8001bf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bea:	5ccb      	ldrb	r3, [r1, r3]
 8001bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	08003088 	.word	0x08003088

08001bfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c00:	f7ff ffdc 	bl	8001bbc <HAL_RCC_GetHCLKFreq>
 8001c04:	4602      	mov	r2, r0
 8001c06:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	0b5b      	lsrs	r3, r3, #13
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	4903      	ldr	r1, [pc, #12]	; (8001c20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c12:	5ccb      	ldrb	r3, [r1, r3]
 8001c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	08003088 	.word	0x08003088

08001c24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e03f      	b.n	8001cb6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d106      	bne.n	8001c50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7fe fec8 	bl	80009e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2224      	movs	r2, #36	; 0x24
 8001c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68da      	ldr	r2, [r3, #12]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 f829 	bl	8001cc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	691a      	ldr	r2, [r3, #16]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	695a      	ldr	r2, [r3, #20]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68da      	ldr	r2, [r3, #12]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2220      	movs	r2, #32
 8001ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2220      	movs	r2, #32
 8001cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cc4:	b09f      	sub	sp, #124	; 0x7c
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001cd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cd6:	68d9      	ldr	r1, [r3, #12]
 8001cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	ea40 0301 	orr.w	r3, r0, r1
 8001ce0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ce4:	689a      	ldr	r2, [r3, #8]
 8001ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	431a      	orrs	r2, r3
 8001cec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cee:	695b      	ldr	r3, [r3, #20]
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8001cfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001d04:	f021 010c 	bic.w	r1, r1, #12
 8001d08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d0e:	430b      	orrs	r3, r1
 8001d10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	695b      	ldr	r3, [r3, #20]
 8001d18:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001d1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d1e:	6999      	ldr	r1, [r3, #24]
 8001d20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	ea40 0301 	orr.w	r3, r0, r1
 8001d28:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001d2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	4bc5      	ldr	r3, [pc, #788]	; (8002044 <UART_SetConfig+0x384>)
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d004      	beq.n	8001d3e <UART_SetConfig+0x7e>
 8001d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	4bc3      	ldr	r3, [pc, #780]	; (8002048 <UART_SetConfig+0x388>)
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d103      	bne.n	8001d46 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001d3e:	f7ff ff5d 	bl	8001bfc <HAL_RCC_GetPCLK2Freq>
 8001d42:	6778      	str	r0, [r7, #116]	; 0x74
 8001d44:	e002      	b.n	8001d4c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001d46:	f7ff ff45 	bl	8001bd4 <HAL_RCC_GetPCLK1Freq>
 8001d4a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d4e:	69db      	ldr	r3, [r3, #28]
 8001d50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d54:	f040 80b6 	bne.w	8001ec4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001d58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d5a:	461c      	mov	r4, r3
 8001d5c:	f04f 0500 	mov.w	r5, #0
 8001d60:	4622      	mov	r2, r4
 8001d62:	462b      	mov	r3, r5
 8001d64:	1891      	adds	r1, r2, r2
 8001d66:	6439      	str	r1, [r7, #64]	; 0x40
 8001d68:	415b      	adcs	r3, r3
 8001d6a:	647b      	str	r3, [r7, #68]	; 0x44
 8001d6c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001d70:	1912      	adds	r2, r2, r4
 8001d72:	eb45 0303 	adc.w	r3, r5, r3
 8001d76:	f04f 0000 	mov.w	r0, #0
 8001d7a:	f04f 0100 	mov.w	r1, #0
 8001d7e:	00d9      	lsls	r1, r3, #3
 8001d80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d84:	00d0      	lsls	r0, r2, #3
 8001d86:	4602      	mov	r2, r0
 8001d88:	460b      	mov	r3, r1
 8001d8a:	1911      	adds	r1, r2, r4
 8001d8c:	6639      	str	r1, [r7, #96]	; 0x60
 8001d8e:	416b      	adcs	r3, r5
 8001d90:	667b      	str	r3, [r7, #100]	; 0x64
 8001d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	461a      	mov	r2, r3
 8001d98:	f04f 0300 	mov.w	r3, #0
 8001d9c:	1891      	adds	r1, r2, r2
 8001d9e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001da0:	415b      	adcs	r3, r3
 8001da2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001da4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001da8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001dac:	f7fe fa70 	bl	8000290 <__aeabi_uldivmod>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	4ba5      	ldr	r3, [pc, #660]	; (800204c <UART_SetConfig+0x38c>)
 8001db6:	fba3 2302 	umull	r2, r3, r3, r2
 8001dba:	095b      	lsrs	r3, r3, #5
 8001dbc:	011e      	lsls	r6, r3, #4
 8001dbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001dc0:	461c      	mov	r4, r3
 8001dc2:	f04f 0500 	mov.w	r5, #0
 8001dc6:	4622      	mov	r2, r4
 8001dc8:	462b      	mov	r3, r5
 8001dca:	1891      	adds	r1, r2, r2
 8001dcc:	6339      	str	r1, [r7, #48]	; 0x30
 8001dce:	415b      	adcs	r3, r3
 8001dd0:	637b      	str	r3, [r7, #52]	; 0x34
 8001dd2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001dd6:	1912      	adds	r2, r2, r4
 8001dd8:	eb45 0303 	adc.w	r3, r5, r3
 8001ddc:	f04f 0000 	mov.w	r0, #0
 8001de0:	f04f 0100 	mov.w	r1, #0
 8001de4:	00d9      	lsls	r1, r3, #3
 8001de6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001dea:	00d0      	lsls	r0, r2, #3
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	1911      	adds	r1, r2, r4
 8001df2:	65b9      	str	r1, [r7, #88]	; 0x58
 8001df4:	416b      	adcs	r3, r5
 8001df6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	f04f 0300 	mov.w	r3, #0
 8001e02:	1891      	adds	r1, r2, r2
 8001e04:	62b9      	str	r1, [r7, #40]	; 0x28
 8001e06:	415b      	adcs	r3, r3
 8001e08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e0e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001e12:	f7fe fa3d 	bl	8000290 <__aeabi_uldivmod>
 8001e16:	4602      	mov	r2, r0
 8001e18:	460b      	mov	r3, r1
 8001e1a:	4b8c      	ldr	r3, [pc, #560]	; (800204c <UART_SetConfig+0x38c>)
 8001e1c:	fba3 1302 	umull	r1, r3, r3, r2
 8001e20:	095b      	lsrs	r3, r3, #5
 8001e22:	2164      	movs	r1, #100	; 0x64
 8001e24:	fb01 f303 	mul.w	r3, r1, r3
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	3332      	adds	r3, #50	; 0x32
 8001e2e:	4a87      	ldr	r2, [pc, #540]	; (800204c <UART_SetConfig+0x38c>)
 8001e30:	fba2 2303 	umull	r2, r3, r2, r3
 8001e34:	095b      	lsrs	r3, r3, #5
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001e3c:	441e      	add	r6, r3
 8001e3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e40:	4618      	mov	r0, r3
 8001e42:	f04f 0100 	mov.w	r1, #0
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	1894      	adds	r4, r2, r2
 8001e4c:	623c      	str	r4, [r7, #32]
 8001e4e:	415b      	adcs	r3, r3
 8001e50:	627b      	str	r3, [r7, #36]	; 0x24
 8001e52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e56:	1812      	adds	r2, r2, r0
 8001e58:	eb41 0303 	adc.w	r3, r1, r3
 8001e5c:	f04f 0400 	mov.w	r4, #0
 8001e60:	f04f 0500 	mov.w	r5, #0
 8001e64:	00dd      	lsls	r5, r3, #3
 8001e66:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001e6a:	00d4      	lsls	r4, r2, #3
 8001e6c:	4622      	mov	r2, r4
 8001e6e:	462b      	mov	r3, r5
 8001e70:	1814      	adds	r4, r2, r0
 8001e72:	653c      	str	r4, [r7, #80]	; 0x50
 8001e74:	414b      	adcs	r3, r1
 8001e76:	657b      	str	r3, [r7, #84]	; 0x54
 8001e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	f04f 0300 	mov.w	r3, #0
 8001e82:	1891      	adds	r1, r2, r2
 8001e84:	61b9      	str	r1, [r7, #24]
 8001e86:	415b      	adcs	r3, r3
 8001e88:	61fb      	str	r3, [r7, #28]
 8001e8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e8e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001e92:	f7fe f9fd 	bl	8000290 <__aeabi_uldivmod>
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	4b6c      	ldr	r3, [pc, #432]	; (800204c <UART_SetConfig+0x38c>)
 8001e9c:	fba3 1302 	umull	r1, r3, r3, r2
 8001ea0:	095b      	lsrs	r3, r3, #5
 8001ea2:	2164      	movs	r1, #100	; 0x64
 8001ea4:	fb01 f303 	mul.w	r3, r1, r3
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	3332      	adds	r3, #50	; 0x32
 8001eae:	4a67      	ldr	r2, [pc, #412]	; (800204c <UART_SetConfig+0x38c>)
 8001eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb4:	095b      	lsrs	r3, r3, #5
 8001eb6:	f003 0207 	and.w	r2, r3, #7
 8001eba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4432      	add	r2, r6
 8001ec0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001ec2:	e0b9      	b.n	8002038 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ec4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ec6:	461c      	mov	r4, r3
 8001ec8:	f04f 0500 	mov.w	r5, #0
 8001ecc:	4622      	mov	r2, r4
 8001ece:	462b      	mov	r3, r5
 8001ed0:	1891      	adds	r1, r2, r2
 8001ed2:	6139      	str	r1, [r7, #16]
 8001ed4:	415b      	adcs	r3, r3
 8001ed6:	617b      	str	r3, [r7, #20]
 8001ed8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001edc:	1912      	adds	r2, r2, r4
 8001ede:	eb45 0303 	adc.w	r3, r5, r3
 8001ee2:	f04f 0000 	mov.w	r0, #0
 8001ee6:	f04f 0100 	mov.w	r1, #0
 8001eea:	00d9      	lsls	r1, r3, #3
 8001eec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ef0:	00d0      	lsls	r0, r2, #3
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	eb12 0804 	adds.w	r8, r2, r4
 8001efa:	eb43 0905 	adc.w	r9, r3, r5
 8001efe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f04f 0100 	mov.w	r1, #0
 8001f08:	f04f 0200 	mov.w	r2, #0
 8001f0c:	f04f 0300 	mov.w	r3, #0
 8001f10:	008b      	lsls	r3, r1, #2
 8001f12:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001f16:	0082      	lsls	r2, r0, #2
 8001f18:	4640      	mov	r0, r8
 8001f1a:	4649      	mov	r1, r9
 8001f1c:	f7fe f9b8 	bl	8000290 <__aeabi_uldivmod>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4b49      	ldr	r3, [pc, #292]	; (800204c <UART_SetConfig+0x38c>)
 8001f26:	fba3 2302 	umull	r2, r3, r3, r2
 8001f2a:	095b      	lsrs	r3, r3, #5
 8001f2c:	011e      	lsls	r6, r3, #4
 8001f2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f30:	4618      	mov	r0, r3
 8001f32:	f04f 0100 	mov.w	r1, #0
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	1894      	adds	r4, r2, r2
 8001f3c:	60bc      	str	r4, [r7, #8]
 8001f3e:	415b      	adcs	r3, r3
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f46:	1812      	adds	r2, r2, r0
 8001f48:	eb41 0303 	adc.w	r3, r1, r3
 8001f4c:	f04f 0400 	mov.w	r4, #0
 8001f50:	f04f 0500 	mov.w	r5, #0
 8001f54:	00dd      	lsls	r5, r3, #3
 8001f56:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001f5a:	00d4      	lsls	r4, r2, #3
 8001f5c:	4622      	mov	r2, r4
 8001f5e:	462b      	mov	r3, r5
 8001f60:	1814      	adds	r4, r2, r0
 8001f62:	64bc      	str	r4, [r7, #72]	; 0x48
 8001f64:	414b      	adcs	r3, r1
 8001f66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f04f 0100 	mov.w	r1, #0
 8001f72:	f04f 0200 	mov.w	r2, #0
 8001f76:	f04f 0300 	mov.w	r3, #0
 8001f7a:	008b      	lsls	r3, r1, #2
 8001f7c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001f80:	0082      	lsls	r2, r0, #2
 8001f82:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001f86:	f7fe f983 	bl	8000290 <__aeabi_uldivmod>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	4b2f      	ldr	r3, [pc, #188]	; (800204c <UART_SetConfig+0x38c>)
 8001f90:	fba3 1302 	umull	r1, r3, r3, r2
 8001f94:	095b      	lsrs	r3, r3, #5
 8001f96:	2164      	movs	r1, #100	; 0x64
 8001f98:	fb01 f303 	mul.w	r3, r1, r3
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	011b      	lsls	r3, r3, #4
 8001fa0:	3332      	adds	r3, #50	; 0x32
 8001fa2:	4a2a      	ldr	r2, [pc, #168]	; (800204c <UART_SetConfig+0x38c>)
 8001fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa8:	095b      	lsrs	r3, r3, #5
 8001faa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fae:	441e      	add	r6, r3
 8001fb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f04f 0100 	mov.w	r1, #0
 8001fb8:	4602      	mov	r2, r0
 8001fba:	460b      	mov	r3, r1
 8001fbc:	1894      	adds	r4, r2, r2
 8001fbe:	603c      	str	r4, [r7, #0]
 8001fc0:	415b      	adcs	r3, r3
 8001fc2:	607b      	str	r3, [r7, #4]
 8001fc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001fc8:	1812      	adds	r2, r2, r0
 8001fca:	eb41 0303 	adc.w	r3, r1, r3
 8001fce:	f04f 0400 	mov.w	r4, #0
 8001fd2:	f04f 0500 	mov.w	r5, #0
 8001fd6:	00dd      	lsls	r5, r3, #3
 8001fd8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001fdc:	00d4      	lsls	r4, r2, #3
 8001fde:	4622      	mov	r2, r4
 8001fe0:	462b      	mov	r3, r5
 8001fe2:	eb12 0a00 	adds.w	sl, r2, r0
 8001fe6:	eb43 0b01 	adc.w	fp, r3, r1
 8001fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f04f 0100 	mov.w	r1, #0
 8001ff4:	f04f 0200 	mov.w	r2, #0
 8001ff8:	f04f 0300 	mov.w	r3, #0
 8001ffc:	008b      	lsls	r3, r1, #2
 8001ffe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002002:	0082      	lsls	r2, r0, #2
 8002004:	4650      	mov	r0, sl
 8002006:	4659      	mov	r1, fp
 8002008:	f7fe f942 	bl	8000290 <__aeabi_uldivmod>
 800200c:	4602      	mov	r2, r0
 800200e:	460b      	mov	r3, r1
 8002010:	4b0e      	ldr	r3, [pc, #56]	; (800204c <UART_SetConfig+0x38c>)
 8002012:	fba3 1302 	umull	r1, r3, r3, r2
 8002016:	095b      	lsrs	r3, r3, #5
 8002018:	2164      	movs	r1, #100	; 0x64
 800201a:	fb01 f303 	mul.w	r3, r1, r3
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	011b      	lsls	r3, r3, #4
 8002022:	3332      	adds	r3, #50	; 0x32
 8002024:	4a09      	ldr	r2, [pc, #36]	; (800204c <UART_SetConfig+0x38c>)
 8002026:	fba2 2303 	umull	r2, r3, r2, r3
 800202a:	095b      	lsrs	r3, r3, #5
 800202c:	f003 020f 	and.w	r2, r3, #15
 8002030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4432      	add	r2, r6
 8002036:	609a      	str	r2, [r3, #8]
}
 8002038:	bf00      	nop
 800203a:	377c      	adds	r7, #124	; 0x7c
 800203c:	46bd      	mov	sp, r7
 800203e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002042:	bf00      	nop
 8002044:	40011000 	.word	0x40011000
 8002048:	40011400 	.word	0x40011400
 800204c:	51eb851f 	.word	0x51eb851f

08002050 <__errno>:
 8002050:	4b01      	ldr	r3, [pc, #4]	; (8002058 <__errno+0x8>)
 8002052:	6818      	ldr	r0, [r3, #0]
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	2000000c 	.word	0x2000000c

0800205c <__libc_init_array>:
 800205c:	b570      	push	{r4, r5, r6, lr}
 800205e:	4d0d      	ldr	r5, [pc, #52]	; (8002094 <__libc_init_array+0x38>)
 8002060:	4c0d      	ldr	r4, [pc, #52]	; (8002098 <__libc_init_array+0x3c>)
 8002062:	1b64      	subs	r4, r4, r5
 8002064:	10a4      	asrs	r4, r4, #2
 8002066:	2600      	movs	r6, #0
 8002068:	42a6      	cmp	r6, r4
 800206a:	d109      	bne.n	8002080 <__libc_init_array+0x24>
 800206c:	4d0b      	ldr	r5, [pc, #44]	; (800209c <__libc_init_array+0x40>)
 800206e:	4c0c      	ldr	r4, [pc, #48]	; (80020a0 <__libc_init_array+0x44>)
 8002070:	f000 ffec 	bl	800304c <_init>
 8002074:	1b64      	subs	r4, r4, r5
 8002076:	10a4      	asrs	r4, r4, #2
 8002078:	2600      	movs	r6, #0
 800207a:	42a6      	cmp	r6, r4
 800207c:	d105      	bne.n	800208a <__libc_init_array+0x2e>
 800207e:	bd70      	pop	{r4, r5, r6, pc}
 8002080:	f855 3b04 	ldr.w	r3, [r5], #4
 8002084:	4798      	blx	r3
 8002086:	3601      	adds	r6, #1
 8002088:	e7ee      	b.n	8002068 <__libc_init_array+0xc>
 800208a:	f855 3b04 	ldr.w	r3, [r5], #4
 800208e:	4798      	blx	r3
 8002090:	3601      	adds	r6, #1
 8002092:	e7f2      	b.n	800207a <__libc_init_array+0x1e>
 8002094:	08003130 	.word	0x08003130
 8002098:	08003130 	.word	0x08003130
 800209c:	08003130 	.word	0x08003130
 80020a0:	08003134 	.word	0x08003134

080020a4 <memset>:
 80020a4:	4402      	add	r2, r0
 80020a6:	4603      	mov	r3, r0
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d100      	bne.n	80020ae <memset+0xa>
 80020ac:	4770      	bx	lr
 80020ae:	f803 1b01 	strb.w	r1, [r3], #1
 80020b2:	e7f9      	b.n	80020a8 <memset+0x4>

080020b4 <iprintf>:
 80020b4:	b40f      	push	{r0, r1, r2, r3}
 80020b6:	4b0a      	ldr	r3, [pc, #40]	; (80020e0 <iprintf+0x2c>)
 80020b8:	b513      	push	{r0, r1, r4, lr}
 80020ba:	681c      	ldr	r4, [r3, #0]
 80020bc:	b124      	cbz	r4, 80020c8 <iprintf+0x14>
 80020be:	69a3      	ldr	r3, [r4, #24]
 80020c0:	b913      	cbnz	r3, 80020c8 <iprintf+0x14>
 80020c2:	4620      	mov	r0, r4
 80020c4:	f000 fa5e 	bl	8002584 <__sinit>
 80020c8:	ab05      	add	r3, sp, #20
 80020ca:	9a04      	ldr	r2, [sp, #16]
 80020cc:	68a1      	ldr	r1, [r4, #8]
 80020ce:	9301      	str	r3, [sp, #4]
 80020d0:	4620      	mov	r0, r4
 80020d2:	f000 fc2f 	bl	8002934 <_vfiprintf_r>
 80020d6:	b002      	add	sp, #8
 80020d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020dc:	b004      	add	sp, #16
 80020de:	4770      	bx	lr
 80020e0:	2000000c 	.word	0x2000000c

080020e4 <_puts_r>:
 80020e4:	b570      	push	{r4, r5, r6, lr}
 80020e6:	460e      	mov	r6, r1
 80020e8:	4605      	mov	r5, r0
 80020ea:	b118      	cbz	r0, 80020f4 <_puts_r+0x10>
 80020ec:	6983      	ldr	r3, [r0, #24]
 80020ee:	b90b      	cbnz	r3, 80020f4 <_puts_r+0x10>
 80020f0:	f000 fa48 	bl	8002584 <__sinit>
 80020f4:	69ab      	ldr	r3, [r5, #24]
 80020f6:	68ac      	ldr	r4, [r5, #8]
 80020f8:	b913      	cbnz	r3, 8002100 <_puts_r+0x1c>
 80020fa:	4628      	mov	r0, r5
 80020fc:	f000 fa42 	bl	8002584 <__sinit>
 8002100:	4b2c      	ldr	r3, [pc, #176]	; (80021b4 <_puts_r+0xd0>)
 8002102:	429c      	cmp	r4, r3
 8002104:	d120      	bne.n	8002148 <_puts_r+0x64>
 8002106:	686c      	ldr	r4, [r5, #4]
 8002108:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800210a:	07db      	lsls	r3, r3, #31
 800210c:	d405      	bmi.n	800211a <_puts_r+0x36>
 800210e:	89a3      	ldrh	r3, [r4, #12]
 8002110:	0598      	lsls	r0, r3, #22
 8002112:	d402      	bmi.n	800211a <_puts_r+0x36>
 8002114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002116:	f000 fad3 	bl	80026c0 <__retarget_lock_acquire_recursive>
 800211a:	89a3      	ldrh	r3, [r4, #12]
 800211c:	0719      	lsls	r1, r3, #28
 800211e:	d51d      	bpl.n	800215c <_puts_r+0x78>
 8002120:	6923      	ldr	r3, [r4, #16]
 8002122:	b1db      	cbz	r3, 800215c <_puts_r+0x78>
 8002124:	3e01      	subs	r6, #1
 8002126:	68a3      	ldr	r3, [r4, #8]
 8002128:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800212c:	3b01      	subs	r3, #1
 800212e:	60a3      	str	r3, [r4, #8]
 8002130:	bb39      	cbnz	r1, 8002182 <_puts_r+0x9e>
 8002132:	2b00      	cmp	r3, #0
 8002134:	da38      	bge.n	80021a8 <_puts_r+0xc4>
 8002136:	4622      	mov	r2, r4
 8002138:	210a      	movs	r1, #10
 800213a:	4628      	mov	r0, r5
 800213c:	f000 f848 	bl	80021d0 <__swbuf_r>
 8002140:	3001      	adds	r0, #1
 8002142:	d011      	beq.n	8002168 <_puts_r+0x84>
 8002144:	250a      	movs	r5, #10
 8002146:	e011      	b.n	800216c <_puts_r+0x88>
 8002148:	4b1b      	ldr	r3, [pc, #108]	; (80021b8 <_puts_r+0xd4>)
 800214a:	429c      	cmp	r4, r3
 800214c:	d101      	bne.n	8002152 <_puts_r+0x6e>
 800214e:	68ac      	ldr	r4, [r5, #8]
 8002150:	e7da      	b.n	8002108 <_puts_r+0x24>
 8002152:	4b1a      	ldr	r3, [pc, #104]	; (80021bc <_puts_r+0xd8>)
 8002154:	429c      	cmp	r4, r3
 8002156:	bf08      	it	eq
 8002158:	68ec      	ldreq	r4, [r5, #12]
 800215a:	e7d5      	b.n	8002108 <_puts_r+0x24>
 800215c:	4621      	mov	r1, r4
 800215e:	4628      	mov	r0, r5
 8002160:	f000 f888 	bl	8002274 <__swsetup_r>
 8002164:	2800      	cmp	r0, #0
 8002166:	d0dd      	beq.n	8002124 <_puts_r+0x40>
 8002168:	f04f 35ff 	mov.w	r5, #4294967295
 800216c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800216e:	07da      	lsls	r2, r3, #31
 8002170:	d405      	bmi.n	800217e <_puts_r+0x9a>
 8002172:	89a3      	ldrh	r3, [r4, #12]
 8002174:	059b      	lsls	r3, r3, #22
 8002176:	d402      	bmi.n	800217e <_puts_r+0x9a>
 8002178:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800217a:	f000 faa2 	bl	80026c2 <__retarget_lock_release_recursive>
 800217e:	4628      	mov	r0, r5
 8002180:	bd70      	pop	{r4, r5, r6, pc}
 8002182:	2b00      	cmp	r3, #0
 8002184:	da04      	bge.n	8002190 <_puts_r+0xac>
 8002186:	69a2      	ldr	r2, [r4, #24]
 8002188:	429a      	cmp	r2, r3
 800218a:	dc06      	bgt.n	800219a <_puts_r+0xb6>
 800218c:	290a      	cmp	r1, #10
 800218e:	d004      	beq.n	800219a <_puts_r+0xb6>
 8002190:	6823      	ldr	r3, [r4, #0]
 8002192:	1c5a      	adds	r2, r3, #1
 8002194:	6022      	str	r2, [r4, #0]
 8002196:	7019      	strb	r1, [r3, #0]
 8002198:	e7c5      	b.n	8002126 <_puts_r+0x42>
 800219a:	4622      	mov	r2, r4
 800219c:	4628      	mov	r0, r5
 800219e:	f000 f817 	bl	80021d0 <__swbuf_r>
 80021a2:	3001      	adds	r0, #1
 80021a4:	d1bf      	bne.n	8002126 <_puts_r+0x42>
 80021a6:	e7df      	b.n	8002168 <_puts_r+0x84>
 80021a8:	6823      	ldr	r3, [r4, #0]
 80021aa:	250a      	movs	r5, #10
 80021ac:	1c5a      	adds	r2, r3, #1
 80021ae:	6022      	str	r2, [r4, #0]
 80021b0:	701d      	strb	r5, [r3, #0]
 80021b2:	e7db      	b.n	800216c <_puts_r+0x88>
 80021b4:	080030b4 	.word	0x080030b4
 80021b8:	080030d4 	.word	0x080030d4
 80021bc:	08003094 	.word	0x08003094

080021c0 <puts>:
 80021c0:	4b02      	ldr	r3, [pc, #8]	; (80021cc <puts+0xc>)
 80021c2:	4601      	mov	r1, r0
 80021c4:	6818      	ldr	r0, [r3, #0]
 80021c6:	f7ff bf8d 	b.w	80020e4 <_puts_r>
 80021ca:	bf00      	nop
 80021cc:	2000000c 	.word	0x2000000c

080021d0 <__swbuf_r>:
 80021d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021d2:	460e      	mov	r6, r1
 80021d4:	4614      	mov	r4, r2
 80021d6:	4605      	mov	r5, r0
 80021d8:	b118      	cbz	r0, 80021e2 <__swbuf_r+0x12>
 80021da:	6983      	ldr	r3, [r0, #24]
 80021dc:	b90b      	cbnz	r3, 80021e2 <__swbuf_r+0x12>
 80021de:	f000 f9d1 	bl	8002584 <__sinit>
 80021e2:	4b21      	ldr	r3, [pc, #132]	; (8002268 <__swbuf_r+0x98>)
 80021e4:	429c      	cmp	r4, r3
 80021e6:	d12b      	bne.n	8002240 <__swbuf_r+0x70>
 80021e8:	686c      	ldr	r4, [r5, #4]
 80021ea:	69a3      	ldr	r3, [r4, #24]
 80021ec:	60a3      	str	r3, [r4, #8]
 80021ee:	89a3      	ldrh	r3, [r4, #12]
 80021f0:	071a      	lsls	r2, r3, #28
 80021f2:	d52f      	bpl.n	8002254 <__swbuf_r+0x84>
 80021f4:	6923      	ldr	r3, [r4, #16]
 80021f6:	b36b      	cbz	r3, 8002254 <__swbuf_r+0x84>
 80021f8:	6923      	ldr	r3, [r4, #16]
 80021fa:	6820      	ldr	r0, [r4, #0]
 80021fc:	1ac0      	subs	r0, r0, r3
 80021fe:	6963      	ldr	r3, [r4, #20]
 8002200:	b2f6      	uxtb	r6, r6
 8002202:	4283      	cmp	r3, r0
 8002204:	4637      	mov	r7, r6
 8002206:	dc04      	bgt.n	8002212 <__swbuf_r+0x42>
 8002208:	4621      	mov	r1, r4
 800220a:	4628      	mov	r0, r5
 800220c:	f000 f926 	bl	800245c <_fflush_r>
 8002210:	bb30      	cbnz	r0, 8002260 <__swbuf_r+0x90>
 8002212:	68a3      	ldr	r3, [r4, #8]
 8002214:	3b01      	subs	r3, #1
 8002216:	60a3      	str	r3, [r4, #8]
 8002218:	6823      	ldr	r3, [r4, #0]
 800221a:	1c5a      	adds	r2, r3, #1
 800221c:	6022      	str	r2, [r4, #0]
 800221e:	701e      	strb	r6, [r3, #0]
 8002220:	6963      	ldr	r3, [r4, #20]
 8002222:	3001      	adds	r0, #1
 8002224:	4283      	cmp	r3, r0
 8002226:	d004      	beq.n	8002232 <__swbuf_r+0x62>
 8002228:	89a3      	ldrh	r3, [r4, #12]
 800222a:	07db      	lsls	r3, r3, #31
 800222c:	d506      	bpl.n	800223c <__swbuf_r+0x6c>
 800222e:	2e0a      	cmp	r6, #10
 8002230:	d104      	bne.n	800223c <__swbuf_r+0x6c>
 8002232:	4621      	mov	r1, r4
 8002234:	4628      	mov	r0, r5
 8002236:	f000 f911 	bl	800245c <_fflush_r>
 800223a:	b988      	cbnz	r0, 8002260 <__swbuf_r+0x90>
 800223c:	4638      	mov	r0, r7
 800223e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002240:	4b0a      	ldr	r3, [pc, #40]	; (800226c <__swbuf_r+0x9c>)
 8002242:	429c      	cmp	r4, r3
 8002244:	d101      	bne.n	800224a <__swbuf_r+0x7a>
 8002246:	68ac      	ldr	r4, [r5, #8]
 8002248:	e7cf      	b.n	80021ea <__swbuf_r+0x1a>
 800224a:	4b09      	ldr	r3, [pc, #36]	; (8002270 <__swbuf_r+0xa0>)
 800224c:	429c      	cmp	r4, r3
 800224e:	bf08      	it	eq
 8002250:	68ec      	ldreq	r4, [r5, #12]
 8002252:	e7ca      	b.n	80021ea <__swbuf_r+0x1a>
 8002254:	4621      	mov	r1, r4
 8002256:	4628      	mov	r0, r5
 8002258:	f000 f80c 	bl	8002274 <__swsetup_r>
 800225c:	2800      	cmp	r0, #0
 800225e:	d0cb      	beq.n	80021f8 <__swbuf_r+0x28>
 8002260:	f04f 37ff 	mov.w	r7, #4294967295
 8002264:	e7ea      	b.n	800223c <__swbuf_r+0x6c>
 8002266:	bf00      	nop
 8002268:	080030b4 	.word	0x080030b4
 800226c:	080030d4 	.word	0x080030d4
 8002270:	08003094 	.word	0x08003094

08002274 <__swsetup_r>:
 8002274:	4b32      	ldr	r3, [pc, #200]	; (8002340 <__swsetup_r+0xcc>)
 8002276:	b570      	push	{r4, r5, r6, lr}
 8002278:	681d      	ldr	r5, [r3, #0]
 800227a:	4606      	mov	r6, r0
 800227c:	460c      	mov	r4, r1
 800227e:	b125      	cbz	r5, 800228a <__swsetup_r+0x16>
 8002280:	69ab      	ldr	r3, [r5, #24]
 8002282:	b913      	cbnz	r3, 800228a <__swsetup_r+0x16>
 8002284:	4628      	mov	r0, r5
 8002286:	f000 f97d 	bl	8002584 <__sinit>
 800228a:	4b2e      	ldr	r3, [pc, #184]	; (8002344 <__swsetup_r+0xd0>)
 800228c:	429c      	cmp	r4, r3
 800228e:	d10f      	bne.n	80022b0 <__swsetup_r+0x3c>
 8002290:	686c      	ldr	r4, [r5, #4]
 8002292:	89a3      	ldrh	r3, [r4, #12]
 8002294:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002298:	0719      	lsls	r1, r3, #28
 800229a:	d42c      	bmi.n	80022f6 <__swsetup_r+0x82>
 800229c:	06dd      	lsls	r5, r3, #27
 800229e:	d411      	bmi.n	80022c4 <__swsetup_r+0x50>
 80022a0:	2309      	movs	r3, #9
 80022a2:	6033      	str	r3, [r6, #0]
 80022a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80022a8:	81a3      	strh	r3, [r4, #12]
 80022aa:	f04f 30ff 	mov.w	r0, #4294967295
 80022ae:	e03e      	b.n	800232e <__swsetup_r+0xba>
 80022b0:	4b25      	ldr	r3, [pc, #148]	; (8002348 <__swsetup_r+0xd4>)
 80022b2:	429c      	cmp	r4, r3
 80022b4:	d101      	bne.n	80022ba <__swsetup_r+0x46>
 80022b6:	68ac      	ldr	r4, [r5, #8]
 80022b8:	e7eb      	b.n	8002292 <__swsetup_r+0x1e>
 80022ba:	4b24      	ldr	r3, [pc, #144]	; (800234c <__swsetup_r+0xd8>)
 80022bc:	429c      	cmp	r4, r3
 80022be:	bf08      	it	eq
 80022c0:	68ec      	ldreq	r4, [r5, #12]
 80022c2:	e7e6      	b.n	8002292 <__swsetup_r+0x1e>
 80022c4:	0758      	lsls	r0, r3, #29
 80022c6:	d512      	bpl.n	80022ee <__swsetup_r+0x7a>
 80022c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80022ca:	b141      	cbz	r1, 80022de <__swsetup_r+0x6a>
 80022cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80022d0:	4299      	cmp	r1, r3
 80022d2:	d002      	beq.n	80022da <__swsetup_r+0x66>
 80022d4:	4630      	mov	r0, r6
 80022d6:	f000 fa59 	bl	800278c <_free_r>
 80022da:	2300      	movs	r3, #0
 80022dc:	6363      	str	r3, [r4, #52]	; 0x34
 80022de:	89a3      	ldrh	r3, [r4, #12]
 80022e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80022e4:	81a3      	strh	r3, [r4, #12]
 80022e6:	2300      	movs	r3, #0
 80022e8:	6063      	str	r3, [r4, #4]
 80022ea:	6923      	ldr	r3, [r4, #16]
 80022ec:	6023      	str	r3, [r4, #0]
 80022ee:	89a3      	ldrh	r3, [r4, #12]
 80022f0:	f043 0308 	orr.w	r3, r3, #8
 80022f4:	81a3      	strh	r3, [r4, #12]
 80022f6:	6923      	ldr	r3, [r4, #16]
 80022f8:	b94b      	cbnz	r3, 800230e <__swsetup_r+0x9a>
 80022fa:	89a3      	ldrh	r3, [r4, #12]
 80022fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002300:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002304:	d003      	beq.n	800230e <__swsetup_r+0x9a>
 8002306:	4621      	mov	r1, r4
 8002308:	4630      	mov	r0, r6
 800230a:	f000 f9ff 	bl	800270c <__smakebuf_r>
 800230e:	89a0      	ldrh	r0, [r4, #12]
 8002310:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002314:	f010 0301 	ands.w	r3, r0, #1
 8002318:	d00a      	beq.n	8002330 <__swsetup_r+0xbc>
 800231a:	2300      	movs	r3, #0
 800231c:	60a3      	str	r3, [r4, #8]
 800231e:	6963      	ldr	r3, [r4, #20]
 8002320:	425b      	negs	r3, r3
 8002322:	61a3      	str	r3, [r4, #24]
 8002324:	6923      	ldr	r3, [r4, #16]
 8002326:	b943      	cbnz	r3, 800233a <__swsetup_r+0xc6>
 8002328:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800232c:	d1ba      	bne.n	80022a4 <__swsetup_r+0x30>
 800232e:	bd70      	pop	{r4, r5, r6, pc}
 8002330:	0781      	lsls	r1, r0, #30
 8002332:	bf58      	it	pl
 8002334:	6963      	ldrpl	r3, [r4, #20]
 8002336:	60a3      	str	r3, [r4, #8]
 8002338:	e7f4      	b.n	8002324 <__swsetup_r+0xb0>
 800233a:	2000      	movs	r0, #0
 800233c:	e7f7      	b.n	800232e <__swsetup_r+0xba>
 800233e:	bf00      	nop
 8002340:	2000000c 	.word	0x2000000c
 8002344:	080030b4 	.word	0x080030b4
 8002348:	080030d4 	.word	0x080030d4
 800234c:	08003094 	.word	0x08003094

08002350 <__sflush_r>:
 8002350:	898a      	ldrh	r2, [r1, #12]
 8002352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002356:	4605      	mov	r5, r0
 8002358:	0710      	lsls	r0, r2, #28
 800235a:	460c      	mov	r4, r1
 800235c:	d458      	bmi.n	8002410 <__sflush_r+0xc0>
 800235e:	684b      	ldr	r3, [r1, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	dc05      	bgt.n	8002370 <__sflush_r+0x20>
 8002364:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002366:	2b00      	cmp	r3, #0
 8002368:	dc02      	bgt.n	8002370 <__sflush_r+0x20>
 800236a:	2000      	movs	r0, #0
 800236c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002370:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002372:	2e00      	cmp	r6, #0
 8002374:	d0f9      	beq.n	800236a <__sflush_r+0x1a>
 8002376:	2300      	movs	r3, #0
 8002378:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800237c:	682f      	ldr	r7, [r5, #0]
 800237e:	602b      	str	r3, [r5, #0]
 8002380:	d032      	beq.n	80023e8 <__sflush_r+0x98>
 8002382:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002384:	89a3      	ldrh	r3, [r4, #12]
 8002386:	075a      	lsls	r2, r3, #29
 8002388:	d505      	bpl.n	8002396 <__sflush_r+0x46>
 800238a:	6863      	ldr	r3, [r4, #4]
 800238c:	1ac0      	subs	r0, r0, r3
 800238e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002390:	b10b      	cbz	r3, 8002396 <__sflush_r+0x46>
 8002392:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002394:	1ac0      	subs	r0, r0, r3
 8002396:	2300      	movs	r3, #0
 8002398:	4602      	mov	r2, r0
 800239a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800239c:	6a21      	ldr	r1, [r4, #32]
 800239e:	4628      	mov	r0, r5
 80023a0:	47b0      	blx	r6
 80023a2:	1c43      	adds	r3, r0, #1
 80023a4:	89a3      	ldrh	r3, [r4, #12]
 80023a6:	d106      	bne.n	80023b6 <__sflush_r+0x66>
 80023a8:	6829      	ldr	r1, [r5, #0]
 80023aa:	291d      	cmp	r1, #29
 80023ac:	d82c      	bhi.n	8002408 <__sflush_r+0xb8>
 80023ae:	4a2a      	ldr	r2, [pc, #168]	; (8002458 <__sflush_r+0x108>)
 80023b0:	40ca      	lsrs	r2, r1
 80023b2:	07d6      	lsls	r6, r2, #31
 80023b4:	d528      	bpl.n	8002408 <__sflush_r+0xb8>
 80023b6:	2200      	movs	r2, #0
 80023b8:	6062      	str	r2, [r4, #4]
 80023ba:	04d9      	lsls	r1, r3, #19
 80023bc:	6922      	ldr	r2, [r4, #16]
 80023be:	6022      	str	r2, [r4, #0]
 80023c0:	d504      	bpl.n	80023cc <__sflush_r+0x7c>
 80023c2:	1c42      	adds	r2, r0, #1
 80023c4:	d101      	bne.n	80023ca <__sflush_r+0x7a>
 80023c6:	682b      	ldr	r3, [r5, #0]
 80023c8:	b903      	cbnz	r3, 80023cc <__sflush_r+0x7c>
 80023ca:	6560      	str	r0, [r4, #84]	; 0x54
 80023cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80023ce:	602f      	str	r7, [r5, #0]
 80023d0:	2900      	cmp	r1, #0
 80023d2:	d0ca      	beq.n	800236a <__sflush_r+0x1a>
 80023d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80023d8:	4299      	cmp	r1, r3
 80023da:	d002      	beq.n	80023e2 <__sflush_r+0x92>
 80023dc:	4628      	mov	r0, r5
 80023de:	f000 f9d5 	bl	800278c <_free_r>
 80023e2:	2000      	movs	r0, #0
 80023e4:	6360      	str	r0, [r4, #52]	; 0x34
 80023e6:	e7c1      	b.n	800236c <__sflush_r+0x1c>
 80023e8:	6a21      	ldr	r1, [r4, #32]
 80023ea:	2301      	movs	r3, #1
 80023ec:	4628      	mov	r0, r5
 80023ee:	47b0      	blx	r6
 80023f0:	1c41      	adds	r1, r0, #1
 80023f2:	d1c7      	bne.n	8002384 <__sflush_r+0x34>
 80023f4:	682b      	ldr	r3, [r5, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0c4      	beq.n	8002384 <__sflush_r+0x34>
 80023fa:	2b1d      	cmp	r3, #29
 80023fc:	d001      	beq.n	8002402 <__sflush_r+0xb2>
 80023fe:	2b16      	cmp	r3, #22
 8002400:	d101      	bne.n	8002406 <__sflush_r+0xb6>
 8002402:	602f      	str	r7, [r5, #0]
 8002404:	e7b1      	b.n	800236a <__sflush_r+0x1a>
 8002406:	89a3      	ldrh	r3, [r4, #12]
 8002408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800240c:	81a3      	strh	r3, [r4, #12]
 800240e:	e7ad      	b.n	800236c <__sflush_r+0x1c>
 8002410:	690f      	ldr	r7, [r1, #16]
 8002412:	2f00      	cmp	r7, #0
 8002414:	d0a9      	beq.n	800236a <__sflush_r+0x1a>
 8002416:	0793      	lsls	r3, r2, #30
 8002418:	680e      	ldr	r6, [r1, #0]
 800241a:	bf08      	it	eq
 800241c:	694b      	ldreq	r3, [r1, #20]
 800241e:	600f      	str	r7, [r1, #0]
 8002420:	bf18      	it	ne
 8002422:	2300      	movne	r3, #0
 8002424:	eba6 0807 	sub.w	r8, r6, r7
 8002428:	608b      	str	r3, [r1, #8]
 800242a:	f1b8 0f00 	cmp.w	r8, #0
 800242e:	dd9c      	ble.n	800236a <__sflush_r+0x1a>
 8002430:	6a21      	ldr	r1, [r4, #32]
 8002432:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002434:	4643      	mov	r3, r8
 8002436:	463a      	mov	r2, r7
 8002438:	4628      	mov	r0, r5
 800243a:	47b0      	blx	r6
 800243c:	2800      	cmp	r0, #0
 800243e:	dc06      	bgt.n	800244e <__sflush_r+0xfe>
 8002440:	89a3      	ldrh	r3, [r4, #12]
 8002442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002446:	81a3      	strh	r3, [r4, #12]
 8002448:	f04f 30ff 	mov.w	r0, #4294967295
 800244c:	e78e      	b.n	800236c <__sflush_r+0x1c>
 800244e:	4407      	add	r7, r0
 8002450:	eba8 0800 	sub.w	r8, r8, r0
 8002454:	e7e9      	b.n	800242a <__sflush_r+0xda>
 8002456:	bf00      	nop
 8002458:	20400001 	.word	0x20400001

0800245c <_fflush_r>:
 800245c:	b538      	push	{r3, r4, r5, lr}
 800245e:	690b      	ldr	r3, [r1, #16]
 8002460:	4605      	mov	r5, r0
 8002462:	460c      	mov	r4, r1
 8002464:	b913      	cbnz	r3, 800246c <_fflush_r+0x10>
 8002466:	2500      	movs	r5, #0
 8002468:	4628      	mov	r0, r5
 800246a:	bd38      	pop	{r3, r4, r5, pc}
 800246c:	b118      	cbz	r0, 8002476 <_fflush_r+0x1a>
 800246e:	6983      	ldr	r3, [r0, #24]
 8002470:	b90b      	cbnz	r3, 8002476 <_fflush_r+0x1a>
 8002472:	f000 f887 	bl	8002584 <__sinit>
 8002476:	4b14      	ldr	r3, [pc, #80]	; (80024c8 <_fflush_r+0x6c>)
 8002478:	429c      	cmp	r4, r3
 800247a:	d11b      	bne.n	80024b4 <_fflush_r+0x58>
 800247c:	686c      	ldr	r4, [r5, #4]
 800247e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0ef      	beq.n	8002466 <_fflush_r+0xa>
 8002486:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002488:	07d0      	lsls	r0, r2, #31
 800248a:	d404      	bmi.n	8002496 <_fflush_r+0x3a>
 800248c:	0599      	lsls	r1, r3, #22
 800248e:	d402      	bmi.n	8002496 <_fflush_r+0x3a>
 8002490:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002492:	f000 f915 	bl	80026c0 <__retarget_lock_acquire_recursive>
 8002496:	4628      	mov	r0, r5
 8002498:	4621      	mov	r1, r4
 800249a:	f7ff ff59 	bl	8002350 <__sflush_r>
 800249e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80024a0:	07da      	lsls	r2, r3, #31
 80024a2:	4605      	mov	r5, r0
 80024a4:	d4e0      	bmi.n	8002468 <_fflush_r+0xc>
 80024a6:	89a3      	ldrh	r3, [r4, #12]
 80024a8:	059b      	lsls	r3, r3, #22
 80024aa:	d4dd      	bmi.n	8002468 <_fflush_r+0xc>
 80024ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80024ae:	f000 f908 	bl	80026c2 <__retarget_lock_release_recursive>
 80024b2:	e7d9      	b.n	8002468 <_fflush_r+0xc>
 80024b4:	4b05      	ldr	r3, [pc, #20]	; (80024cc <_fflush_r+0x70>)
 80024b6:	429c      	cmp	r4, r3
 80024b8:	d101      	bne.n	80024be <_fflush_r+0x62>
 80024ba:	68ac      	ldr	r4, [r5, #8]
 80024bc:	e7df      	b.n	800247e <_fflush_r+0x22>
 80024be:	4b04      	ldr	r3, [pc, #16]	; (80024d0 <_fflush_r+0x74>)
 80024c0:	429c      	cmp	r4, r3
 80024c2:	bf08      	it	eq
 80024c4:	68ec      	ldreq	r4, [r5, #12]
 80024c6:	e7da      	b.n	800247e <_fflush_r+0x22>
 80024c8:	080030b4 	.word	0x080030b4
 80024cc:	080030d4 	.word	0x080030d4
 80024d0:	08003094 	.word	0x08003094

080024d4 <std>:
 80024d4:	2300      	movs	r3, #0
 80024d6:	b510      	push	{r4, lr}
 80024d8:	4604      	mov	r4, r0
 80024da:	e9c0 3300 	strd	r3, r3, [r0]
 80024de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80024e2:	6083      	str	r3, [r0, #8]
 80024e4:	8181      	strh	r1, [r0, #12]
 80024e6:	6643      	str	r3, [r0, #100]	; 0x64
 80024e8:	81c2      	strh	r2, [r0, #14]
 80024ea:	6183      	str	r3, [r0, #24]
 80024ec:	4619      	mov	r1, r3
 80024ee:	2208      	movs	r2, #8
 80024f0:	305c      	adds	r0, #92	; 0x5c
 80024f2:	f7ff fdd7 	bl	80020a4 <memset>
 80024f6:	4b05      	ldr	r3, [pc, #20]	; (800250c <std+0x38>)
 80024f8:	6263      	str	r3, [r4, #36]	; 0x24
 80024fa:	4b05      	ldr	r3, [pc, #20]	; (8002510 <std+0x3c>)
 80024fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80024fe:	4b05      	ldr	r3, [pc, #20]	; (8002514 <std+0x40>)
 8002500:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002502:	4b05      	ldr	r3, [pc, #20]	; (8002518 <std+0x44>)
 8002504:	6224      	str	r4, [r4, #32]
 8002506:	6323      	str	r3, [r4, #48]	; 0x30
 8002508:	bd10      	pop	{r4, pc}
 800250a:	bf00      	nop
 800250c:	08002edd 	.word	0x08002edd
 8002510:	08002eff 	.word	0x08002eff
 8002514:	08002f37 	.word	0x08002f37
 8002518:	08002f5b 	.word	0x08002f5b

0800251c <_cleanup_r>:
 800251c:	4901      	ldr	r1, [pc, #4]	; (8002524 <_cleanup_r+0x8>)
 800251e:	f000 b8af 	b.w	8002680 <_fwalk_reent>
 8002522:	bf00      	nop
 8002524:	0800245d 	.word	0x0800245d

08002528 <__sfmoreglue>:
 8002528:	b570      	push	{r4, r5, r6, lr}
 800252a:	1e4a      	subs	r2, r1, #1
 800252c:	2568      	movs	r5, #104	; 0x68
 800252e:	4355      	muls	r5, r2
 8002530:	460e      	mov	r6, r1
 8002532:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002536:	f000 f979 	bl	800282c <_malloc_r>
 800253a:	4604      	mov	r4, r0
 800253c:	b140      	cbz	r0, 8002550 <__sfmoreglue+0x28>
 800253e:	2100      	movs	r1, #0
 8002540:	e9c0 1600 	strd	r1, r6, [r0]
 8002544:	300c      	adds	r0, #12
 8002546:	60a0      	str	r0, [r4, #8]
 8002548:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800254c:	f7ff fdaa 	bl	80020a4 <memset>
 8002550:	4620      	mov	r0, r4
 8002552:	bd70      	pop	{r4, r5, r6, pc}

08002554 <__sfp_lock_acquire>:
 8002554:	4801      	ldr	r0, [pc, #4]	; (800255c <__sfp_lock_acquire+0x8>)
 8002556:	f000 b8b3 	b.w	80026c0 <__retarget_lock_acquire_recursive>
 800255a:	bf00      	nop
 800255c:	200000e8 	.word	0x200000e8

08002560 <__sfp_lock_release>:
 8002560:	4801      	ldr	r0, [pc, #4]	; (8002568 <__sfp_lock_release+0x8>)
 8002562:	f000 b8ae 	b.w	80026c2 <__retarget_lock_release_recursive>
 8002566:	bf00      	nop
 8002568:	200000e8 	.word	0x200000e8

0800256c <__sinit_lock_acquire>:
 800256c:	4801      	ldr	r0, [pc, #4]	; (8002574 <__sinit_lock_acquire+0x8>)
 800256e:	f000 b8a7 	b.w	80026c0 <__retarget_lock_acquire_recursive>
 8002572:	bf00      	nop
 8002574:	200000e3 	.word	0x200000e3

08002578 <__sinit_lock_release>:
 8002578:	4801      	ldr	r0, [pc, #4]	; (8002580 <__sinit_lock_release+0x8>)
 800257a:	f000 b8a2 	b.w	80026c2 <__retarget_lock_release_recursive>
 800257e:	bf00      	nop
 8002580:	200000e3 	.word	0x200000e3

08002584 <__sinit>:
 8002584:	b510      	push	{r4, lr}
 8002586:	4604      	mov	r4, r0
 8002588:	f7ff fff0 	bl	800256c <__sinit_lock_acquire>
 800258c:	69a3      	ldr	r3, [r4, #24]
 800258e:	b11b      	cbz	r3, 8002598 <__sinit+0x14>
 8002590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002594:	f7ff bff0 	b.w	8002578 <__sinit_lock_release>
 8002598:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800259c:	6523      	str	r3, [r4, #80]	; 0x50
 800259e:	4b13      	ldr	r3, [pc, #76]	; (80025ec <__sinit+0x68>)
 80025a0:	4a13      	ldr	r2, [pc, #76]	; (80025f0 <__sinit+0x6c>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80025a6:	42a3      	cmp	r3, r4
 80025a8:	bf04      	itt	eq
 80025aa:	2301      	moveq	r3, #1
 80025ac:	61a3      	streq	r3, [r4, #24]
 80025ae:	4620      	mov	r0, r4
 80025b0:	f000 f820 	bl	80025f4 <__sfp>
 80025b4:	6060      	str	r0, [r4, #4]
 80025b6:	4620      	mov	r0, r4
 80025b8:	f000 f81c 	bl	80025f4 <__sfp>
 80025bc:	60a0      	str	r0, [r4, #8]
 80025be:	4620      	mov	r0, r4
 80025c0:	f000 f818 	bl	80025f4 <__sfp>
 80025c4:	2200      	movs	r2, #0
 80025c6:	60e0      	str	r0, [r4, #12]
 80025c8:	2104      	movs	r1, #4
 80025ca:	6860      	ldr	r0, [r4, #4]
 80025cc:	f7ff ff82 	bl	80024d4 <std>
 80025d0:	68a0      	ldr	r0, [r4, #8]
 80025d2:	2201      	movs	r2, #1
 80025d4:	2109      	movs	r1, #9
 80025d6:	f7ff ff7d 	bl	80024d4 <std>
 80025da:	68e0      	ldr	r0, [r4, #12]
 80025dc:	2202      	movs	r2, #2
 80025de:	2112      	movs	r1, #18
 80025e0:	f7ff ff78 	bl	80024d4 <std>
 80025e4:	2301      	movs	r3, #1
 80025e6:	61a3      	str	r3, [r4, #24]
 80025e8:	e7d2      	b.n	8002590 <__sinit+0xc>
 80025ea:	bf00      	nop
 80025ec:	08003090 	.word	0x08003090
 80025f0:	0800251d 	.word	0x0800251d

080025f4 <__sfp>:
 80025f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025f6:	4607      	mov	r7, r0
 80025f8:	f7ff ffac 	bl	8002554 <__sfp_lock_acquire>
 80025fc:	4b1e      	ldr	r3, [pc, #120]	; (8002678 <__sfp+0x84>)
 80025fe:	681e      	ldr	r6, [r3, #0]
 8002600:	69b3      	ldr	r3, [r6, #24]
 8002602:	b913      	cbnz	r3, 800260a <__sfp+0x16>
 8002604:	4630      	mov	r0, r6
 8002606:	f7ff ffbd 	bl	8002584 <__sinit>
 800260a:	3648      	adds	r6, #72	; 0x48
 800260c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002610:	3b01      	subs	r3, #1
 8002612:	d503      	bpl.n	800261c <__sfp+0x28>
 8002614:	6833      	ldr	r3, [r6, #0]
 8002616:	b30b      	cbz	r3, 800265c <__sfp+0x68>
 8002618:	6836      	ldr	r6, [r6, #0]
 800261a:	e7f7      	b.n	800260c <__sfp+0x18>
 800261c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002620:	b9d5      	cbnz	r5, 8002658 <__sfp+0x64>
 8002622:	4b16      	ldr	r3, [pc, #88]	; (800267c <__sfp+0x88>)
 8002624:	60e3      	str	r3, [r4, #12]
 8002626:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800262a:	6665      	str	r5, [r4, #100]	; 0x64
 800262c:	f000 f847 	bl	80026be <__retarget_lock_init_recursive>
 8002630:	f7ff ff96 	bl	8002560 <__sfp_lock_release>
 8002634:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002638:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800263c:	6025      	str	r5, [r4, #0]
 800263e:	61a5      	str	r5, [r4, #24]
 8002640:	2208      	movs	r2, #8
 8002642:	4629      	mov	r1, r5
 8002644:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002648:	f7ff fd2c 	bl	80020a4 <memset>
 800264c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002650:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002654:	4620      	mov	r0, r4
 8002656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002658:	3468      	adds	r4, #104	; 0x68
 800265a:	e7d9      	b.n	8002610 <__sfp+0x1c>
 800265c:	2104      	movs	r1, #4
 800265e:	4638      	mov	r0, r7
 8002660:	f7ff ff62 	bl	8002528 <__sfmoreglue>
 8002664:	4604      	mov	r4, r0
 8002666:	6030      	str	r0, [r6, #0]
 8002668:	2800      	cmp	r0, #0
 800266a:	d1d5      	bne.n	8002618 <__sfp+0x24>
 800266c:	f7ff ff78 	bl	8002560 <__sfp_lock_release>
 8002670:	230c      	movs	r3, #12
 8002672:	603b      	str	r3, [r7, #0]
 8002674:	e7ee      	b.n	8002654 <__sfp+0x60>
 8002676:	bf00      	nop
 8002678:	08003090 	.word	0x08003090
 800267c:	ffff0001 	.word	0xffff0001

08002680 <_fwalk_reent>:
 8002680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002684:	4606      	mov	r6, r0
 8002686:	4688      	mov	r8, r1
 8002688:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800268c:	2700      	movs	r7, #0
 800268e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002692:	f1b9 0901 	subs.w	r9, r9, #1
 8002696:	d505      	bpl.n	80026a4 <_fwalk_reent+0x24>
 8002698:	6824      	ldr	r4, [r4, #0]
 800269a:	2c00      	cmp	r4, #0
 800269c:	d1f7      	bne.n	800268e <_fwalk_reent+0xe>
 800269e:	4638      	mov	r0, r7
 80026a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80026a4:	89ab      	ldrh	r3, [r5, #12]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d907      	bls.n	80026ba <_fwalk_reent+0x3a>
 80026aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80026ae:	3301      	adds	r3, #1
 80026b0:	d003      	beq.n	80026ba <_fwalk_reent+0x3a>
 80026b2:	4629      	mov	r1, r5
 80026b4:	4630      	mov	r0, r6
 80026b6:	47c0      	blx	r8
 80026b8:	4307      	orrs	r7, r0
 80026ba:	3568      	adds	r5, #104	; 0x68
 80026bc:	e7e9      	b.n	8002692 <_fwalk_reent+0x12>

080026be <__retarget_lock_init_recursive>:
 80026be:	4770      	bx	lr

080026c0 <__retarget_lock_acquire_recursive>:
 80026c0:	4770      	bx	lr

080026c2 <__retarget_lock_release_recursive>:
 80026c2:	4770      	bx	lr

080026c4 <__swhatbuf_r>:
 80026c4:	b570      	push	{r4, r5, r6, lr}
 80026c6:	460e      	mov	r6, r1
 80026c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026cc:	2900      	cmp	r1, #0
 80026ce:	b096      	sub	sp, #88	; 0x58
 80026d0:	4614      	mov	r4, r2
 80026d2:	461d      	mov	r5, r3
 80026d4:	da07      	bge.n	80026e6 <__swhatbuf_r+0x22>
 80026d6:	2300      	movs	r3, #0
 80026d8:	602b      	str	r3, [r5, #0]
 80026da:	89b3      	ldrh	r3, [r6, #12]
 80026dc:	061a      	lsls	r2, r3, #24
 80026de:	d410      	bmi.n	8002702 <__swhatbuf_r+0x3e>
 80026e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026e4:	e00e      	b.n	8002704 <__swhatbuf_r+0x40>
 80026e6:	466a      	mov	r2, sp
 80026e8:	f000 fc5e 	bl	8002fa8 <_fstat_r>
 80026ec:	2800      	cmp	r0, #0
 80026ee:	dbf2      	blt.n	80026d6 <__swhatbuf_r+0x12>
 80026f0:	9a01      	ldr	r2, [sp, #4]
 80026f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80026f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80026fa:	425a      	negs	r2, r3
 80026fc:	415a      	adcs	r2, r3
 80026fe:	602a      	str	r2, [r5, #0]
 8002700:	e7ee      	b.n	80026e0 <__swhatbuf_r+0x1c>
 8002702:	2340      	movs	r3, #64	; 0x40
 8002704:	2000      	movs	r0, #0
 8002706:	6023      	str	r3, [r4, #0]
 8002708:	b016      	add	sp, #88	; 0x58
 800270a:	bd70      	pop	{r4, r5, r6, pc}

0800270c <__smakebuf_r>:
 800270c:	898b      	ldrh	r3, [r1, #12]
 800270e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002710:	079d      	lsls	r5, r3, #30
 8002712:	4606      	mov	r6, r0
 8002714:	460c      	mov	r4, r1
 8002716:	d507      	bpl.n	8002728 <__smakebuf_r+0x1c>
 8002718:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800271c:	6023      	str	r3, [r4, #0]
 800271e:	6123      	str	r3, [r4, #16]
 8002720:	2301      	movs	r3, #1
 8002722:	6163      	str	r3, [r4, #20]
 8002724:	b002      	add	sp, #8
 8002726:	bd70      	pop	{r4, r5, r6, pc}
 8002728:	ab01      	add	r3, sp, #4
 800272a:	466a      	mov	r2, sp
 800272c:	f7ff ffca 	bl	80026c4 <__swhatbuf_r>
 8002730:	9900      	ldr	r1, [sp, #0]
 8002732:	4605      	mov	r5, r0
 8002734:	4630      	mov	r0, r6
 8002736:	f000 f879 	bl	800282c <_malloc_r>
 800273a:	b948      	cbnz	r0, 8002750 <__smakebuf_r+0x44>
 800273c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002740:	059a      	lsls	r2, r3, #22
 8002742:	d4ef      	bmi.n	8002724 <__smakebuf_r+0x18>
 8002744:	f023 0303 	bic.w	r3, r3, #3
 8002748:	f043 0302 	orr.w	r3, r3, #2
 800274c:	81a3      	strh	r3, [r4, #12]
 800274e:	e7e3      	b.n	8002718 <__smakebuf_r+0xc>
 8002750:	4b0d      	ldr	r3, [pc, #52]	; (8002788 <__smakebuf_r+0x7c>)
 8002752:	62b3      	str	r3, [r6, #40]	; 0x28
 8002754:	89a3      	ldrh	r3, [r4, #12]
 8002756:	6020      	str	r0, [r4, #0]
 8002758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800275c:	81a3      	strh	r3, [r4, #12]
 800275e:	9b00      	ldr	r3, [sp, #0]
 8002760:	6163      	str	r3, [r4, #20]
 8002762:	9b01      	ldr	r3, [sp, #4]
 8002764:	6120      	str	r0, [r4, #16]
 8002766:	b15b      	cbz	r3, 8002780 <__smakebuf_r+0x74>
 8002768:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800276c:	4630      	mov	r0, r6
 800276e:	f000 fc2d 	bl	8002fcc <_isatty_r>
 8002772:	b128      	cbz	r0, 8002780 <__smakebuf_r+0x74>
 8002774:	89a3      	ldrh	r3, [r4, #12]
 8002776:	f023 0303 	bic.w	r3, r3, #3
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	81a3      	strh	r3, [r4, #12]
 8002780:	89a0      	ldrh	r0, [r4, #12]
 8002782:	4305      	orrs	r5, r0
 8002784:	81a5      	strh	r5, [r4, #12]
 8002786:	e7cd      	b.n	8002724 <__smakebuf_r+0x18>
 8002788:	0800251d 	.word	0x0800251d

0800278c <_free_r>:
 800278c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800278e:	2900      	cmp	r1, #0
 8002790:	d048      	beq.n	8002824 <_free_r+0x98>
 8002792:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002796:	9001      	str	r0, [sp, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	f1a1 0404 	sub.w	r4, r1, #4
 800279e:	bfb8      	it	lt
 80027a0:	18e4      	addlt	r4, r4, r3
 80027a2:	f000 fc35 	bl	8003010 <__malloc_lock>
 80027a6:	4a20      	ldr	r2, [pc, #128]	; (8002828 <_free_r+0x9c>)
 80027a8:	9801      	ldr	r0, [sp, #4]
 80027aa:	6813      	ldr	r3, [r2, #0]
 80027ac:	4615      	mov	r5, r2
 80027ae:	b933      	cbnz	r3, 80027be <_free_r+0x32>
 80027b0:	6063      	str	r3, [r4, #4]
 80027b2:	6014      	str	r4, [r2, #0]
 80027b4:	b003      	add	sp, #12
 80027b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80027ba:	f000 bc2f 	b.w	800301c <__malloc_unlock>
 80027be:	42a3      	cmp	r3, r4
 80027c0:	d90b      	bls.n	80027da <_free_r+0x4e>
 80027c2:	6821      	ldr	r1, [r4, #0]
 80027c4:	1862      	adds	r2, r4, r1
 80027c6:	4293      	cmp	r3, r2
 80027c8:	bf04      	itt	eq
 80027ca:	681a      	ldreq	r2, [r3, #0]
 80027cc:	685b      	ldreq	r3, [r3, #4]
 80027ce:	6063      	str	r3, [r4, #4]
 80027d0:	bf04      	itt	eq
 80027d2:	1852      	addeq	r2, r2, r1
 80027d4:	6022      	streq	r2, [r4, #0]
 80027d6:	602c      	str	r4, [r5, #0]
 80027d8:	e7ec      	b.n	80027b4 <_free_r+0x28>
 80027da:	461a      	mov	r2, r3
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	b10b      	cbz	r3, 80027e4 <_free_r+0x58>
 80027e0:	42a3      	cmp	r3, r4
 80027e2:	d9fa      	bls.n	80027da <_free_r+0x4e>
 80027e4:	6811      	ldr	r1, [r2, #0]
 80027e6:	1855      	adds	r5, r2, r1
 80027e8:	42a5      	cmp	r5, r4
 80027ea:	d10b      	bne.n	8002804 <_free_r+0x78>
 80027ec:	6824      	ldr	r4, [r4, #0]
 80027ee:	4421      	add	r1, r4
 80027f0:	1854      	adds	r4, r2, r1
 80027f2:	42a3      	cmp	r3, r4
 80027f4:	6011      	str	r1, [r2, #0]
 80027f6:	d1dd      	bne.n	80027b4 <_free_r+0x28>
 80027f8:	681c      	ldr	r4, [r3, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	6053      	str	r3, [r2, #4]
 80027fe:	4421      	add	r1, r4
 8002800:	6011      	str	r1, [r2, #0]
 8002802:	e7d7      	b.n	80027b4 <_free_r+0x28>
 8002804:	d902      	bls.n	800280c <_free_r+0x80>
 8002806:	230c      	movs	r3, #12
 8002808:	6003      	str	r3, [r0, #0]
 800280a:	e7d3      	b.n	80027b4 <_free_r+0x28>
 800280c:	6825      	ldr	r5, [r4, #0]
 800280e:	1961      	adds	r1, r4, r5
 8002810:	428b      	cmp	r3, r1
 8002812:	bf04      	itt	eq
 8002814:	6819      	ldreq	r1, [r3, #0]
 8002816:	685b      	ldreq	r3, [r3, #4]
 8002818:	6063      	str	r3, [r4, #4]
 800281a:	bf04      	itt	eq
 800281c:	1949      	addeq	r1, r1, r5
 800281e:	6021      	streq	r1, [r4, #0]
 8002820:	6054      	str	r4, [r2, #4]
 8002822:	e7c7      	b.n	80027b4 <_free_r+0x28>
 8002824:	b003      	add	sp, #12
 8002826:	bd30      	pop	{r4, r5, pc}
 8002828:	20000090 	.word	0x20000090

0800282c <_malloc_r>:
 800282c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800282e:	1ccd      	adds	r5, r1, #3
 8002830:	f025 0503 	bic.w	r5, r5, #3
 8002834:	3508      	adds	r5, #8
 8002836:	2d0c      	cmp	r5, #12
 8002838:	bf38      	it	cc
 800283a:	250c      	movcc	r5, #12
 800283c:	2d00      	cmp	r5, #0
 800283e:	4606      	mov	r6, r0
 8002840:	db01      	blt.n	8002846 <_malloc_r+0x1a>
 8002842:	42a9      	cmp	r1, r5
 8002844:	d903      	bls.n	800284e <_malloc_r+0x22>
 8002846:	230c      	movs	r3, #12
 8002848:	6033      	str	r3, [r6, #0]
 800284a:	2000      	movs	r0, #0
 800284c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800284e:	f000 fbdf 	bl	8003010 <__malloc_lock>
 8002852:	4921      	ldr	r1, [pc, #132]	; (80028d8 <_malloc_r+0xac>)
 8002854:	680a      	ldr	r2, [r1, #0]
 8002856:	4614      	mov	r4, r2
 8002858:	b99c      	cbnz	r4, 8002882 <_malloc_r+0x56>
 800285a:	4f20      	ldr	r7, [pc, #128]	; (80028dc <_malloc_r+0xb0>)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	b923      	cbnz	r3, 800286a <_malloc_r+0x3e>
 8002860:	4621      	mov	r1, r4
 8002862:	4630      	mov	r0, r6
 8002864:	f000 fb2a 	bl	8002ebc <_sbrk_r>
 8002868:	6038      	str	r0, [r7, #0]
 800286a:	4629      	mov	r1, r5
 800286c:	4630      	mov	r0, r6
 800286e:	f000 fb25 	bl	8002ebc <_sbrk_r>
 8002872:	1c43      	adds	r3, r0, #1
 8002874:	d123      	bne.n	80028be <_malloc_r+0x92>
 8002876:	230c      	movs	r3, #12
 8002878:	6033      	str	r3, [r6, #0]
 800287a:	4630      	mov	r0, r6
 800287c:	f000 fbce 	bl	800301c <__malloc_unlock>
 8002880:	e7e3      	b.n	800284a <_malloc_r+0x1e>
 8002882:	6823      	ldr	r3, [r4, #0]
 8002884:	1b5b      	subs	r3, r3, r5
 8002886:	d417      	bmi.n	80028b8 <_malloc_r+0x8c>
 8002888:	2b0b      	cmp	r3, #11
 800288a:	d903      	bls.n	8002894 <_malloc_r+0x68>
 800288c:	6023      	str	r3, [r4, #0]
 800288e:	441c      	add	r4, r3
 8002890:	6025      	str	r5, [r4, #0]
 8002892:	e004      	b.n	800289e <_malloc_r+0x72>
 8002894:	6863      	ldr	r3, [r4, #4]
 8002896:	42a2      	cmp	r2, r4
 8002898:	bf0c      	ite	eq
 800289a:	600b      	streq	r3, [r1, #0]
 800289c:	6053      	strne	r3, [r2, #4]
 800289e:	4630      	mov	r0, r6
 80028a0:	f000 fbbc 	bl	800301c <__malloc_unlock>
 80028a4:	f104 000b 	add.w	r0, r4, #11
 80028a8:	1d23      	adds	r3, r4, #4
 80028aa:	f020 0007 	bic.w	r0, r0, #7
 80028ae:	1ac2      	subs	r2, r0, r3
 80028b0:	d0cc      	beq.n	800284c <_malloc_r+0x20>
 80028b2:	1a1b      	subs	r3, r3, r0
 80028b4:	50a3      	str	r3, [r4, r2]
 80028b6:	e7c9      	b.n	800284c <_malloc_r+0x20>
 80028b8:	4622      	mov	r2, r4
 80028ba:	6864      	ldr	r4, [r4, #4]
 80028bc:	e7cc      	b.n	8002858 <_malloc_r+0x2c>
 80028be:	1cc4      	adds	r4, r0, #3
 80028c0:	f024 0403 	bic.w	r4, r4, #3
 80028c4:	42a0      	cmp	r0, r4
 80028c6:	d0e3      	beq.n	8002890 <_malloc_r+0x64>
 80028c8:	1a21      	subs	r1, r4, r0
 80028ca:	4630      	mov	r0, r6
 80028cc:	f000 faf6 	bl	8002ebc <_sbrk_r>
 80028d0:	3001      	adds	r0, #1
 80028d2:	d1dd      	bne.n	8002890 <_malloc_r+0x64>
 80028d4:	e7cf      	b.n	8002876 <_malloc_r+0x4a>
 80028d6:	bf00      	nop
 80028d8:	20000090 	.word	0x20000090
 80028dc:	20000094 	.word	0x20000094

080028e0 <__sfputc_r>:
 80028e0:	6893      	ldr	r3, [r2, #8]
 80028e2:	3b01      	subs	r3, #1
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	b410      	push	{r4}
 80028e8:	6093      	str	r3, [r2, #8]
 80028ea:	da08      	bge.n	80028fe <__sfputc_r+0x1e>
 80028ec:	6994      	ldr	r4, [r2, #24]
 80028ee:	42a3      	cmp	r3, r4
 80028f0:	db01      	blt.n	80028f6 <__sfputc_r+0x16>
 80028f2:	290a      	cmp	r1, #10
 80028f4:	d103      	bne.n	80028fe <__sfputc_r+0x1e>
 80028f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80028fa:	f7ff bc69 	b.w	80021d0 <__swbuf_r>
 80028fe:	6813      	ldr	r3, [r2, #0]
 8002900:	1c58      	adds	r0, r3, #1
 8002902:	6010      	str	r0, [r2, #0]
 8002904:	7019      	strb	r1, [r3, #0]
 8002906:	4608      	mov	r0, r1
 8002908:	f85d 4b04 	ldr.w	r4, [sp], #4
 800290c:	4770      	bx	lr

0800290e <__sfputs_r>:
 800290e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002910:	4606      	mov	r6, r0
 8002912:	460f      	mov	r7, r1
 8002914:	4614      	mov	r4, r2
 8002916:	18d5      	adds	r5, r2, r3
 8002918:	42ac      	cmp	r4, r5
 800291a:	d101      	bne.n	8002920 <__sfputs_r+0x12>
 800291c:	2000      	movs	r0, #0
 800291e:	e007      	b.n	8002930 <__sfputs_r+0x22>
 8002920:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002924:	463a      	mov	r2, r7
 8002926:	4630      	mov	r0, r6
 8002928:	f7ff ffda 	bl	80028e0 <__sfputc_r>
 800292c:	1c43      	adds	r3, r0, #1
 800292e:	d1f3      	bne.n	8002918 <__sfputs_r+0xa>
 8002930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002934 <_vfiprintf_r>:
 8002934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002938:	460d      	mov	r5, r1
 800293a:	b09d      	sub	sp, #116	; 0x74
 800293c:	4614      	mov	r4, r2
 800293e:	4698      	mov	r8, r3
 8002940:	4606      	mov	r6, r0
 8002942:	b118      	cbz	r0, 800294c <_vfiprintf_r+0x18>
 8002944:	6983      	ldr	r3, [r0, #24]
 8002946:	b90b      	cbnz	r3, 800294c <_vfiprintf_r+0x18>
 8002948:	f7ff fe1c 	bl	8002584 <__sinit>
 800294c:	4b89      	ldr	r3, [pc, #548]	; (8002b74 <_vfiprintf_r+0x240>)
 800294e:	429d      	cmp	r5, r3
 8002950:	d11b      	bne.n	800298a <_vfiprintf_r+0x56>
 8002952:	6875      	ldr	r5, [r6, #4]
 8002954:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002956:	07d9      	lsls	r1, r3, #31
 8002958:	d405      	bmi.n	8002966 <_vfiprintf_r+0x32>
 800295a:	89ab      	ldrh	r3, [r5, #12]
 800295c:	059a      	lsls	r2, r3, #22
 800295e:	d402      	bmi.n	8002966 <_vfiprintf_r+0x32>
 8002960:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002962:	f7ff fead 	bl	80026c0 <__retarget_lock_acquire_recursive>
 8002966:	89ab      	ldrh	r3, [r5, #12]
 8002968:	071b      	lsls	r3, r3, #28
 800296a:	d501      	bpl.n	8002970 <_vfiprintf_r+0x3c>
 800296c:	692b      	ldr	r3, [r5, #16]
 800296e:	b9eb      	cbnz	r3, 80029ac <_vfiprintf_r+0x78>
 8002970:	4629      	mov	r1, r5
 8002972:	4630      	mov	r0, r6
 8002974:	f7ff fc7e 	bl	8002274 <__swsetup_r>
 8002978:	b1c0      	cbz	r0, 80029ac <_vfiprintf_r+0x78>
 800297a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800297c:	07dc      	lsls	r4, r3, #31
 800297e:	d50e      	bpl.n	800299e <_vfiprintf_r+0x6a>
 8002980:	f04f 30ff 	mov.w	r0, #4294967295
 8002984:	b01d      	add	sp, #116	; 0x74
 8002986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800298a:	4b7b      	ldr	r3, [pc, #492]	; (8002b78 <_vfiprintf_r+0x244>)
 800298c:	429d      	cmp	r5, r3
 800298e:	d101      	bne.n	8002994 <_vfiprintf_r+0x60>
 8002990:	68b5      	ldr	r5, [r6, #8]
 8002992:	e7df      	b.n	8002954 <_vfiprintf_r+0x20>
 8002994:	4b79      	ldr	r3, [pc, #484]	; (8002b7c <_vfiprintf_r+0x248>)
 8002996:	429d      	cmp	r5, r3
 8002998:	bf08      	it	eq
 800299a:	68f5      	ldreq	r5, [r6, #12]
 800299c:	e7da      	b.n	8002954 <_vfiprintf_r+0x20>
 800299e:	89ab      	ldrh	r3, [r5, #12]
 80029a0:	0598      	lsls	r0, r3, #22
 80029a2:	d4ed      	bmi.n	8002980 <_vfiprintf_r+0x4c>
 80029a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80029a6:	f7ff fe8c 	bl	80026c2 <__retarget_lock_release_recursive>
 80029aa:	e7e9      	b.n	8002980 <_vfiprintf_r+0x4c>
 80029ac:	2300      	movs	r3, #0
 80029ae:	9309      	str	r3, [sp, #36]	; 0x24
 80029b0:	2320      	movs	r3, #32
 80029b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80029b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80029ba:	2330      	movs	r3, #48	; 0x30
 80029bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002b80 <_vfiprintf_r+0x24c>
 80029c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80029c4:	f04f 0901 	mov.w	r9, #1
 80029c8:	4623      	mov	r3, r4
 80029ca:	469a      	mov	sl, r3
 80029cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80029d0:	b10a      	cbz	r2, 80029d6 <_vfiprintf_r+0xa2>
 80029d2:	2a25      	cmp	r2, #37	; 0x25
 80029d4:	d1f9      	bne.n	80029ca <_vfiprintf_r+0x96>
 80029d6:	ebba 0b04 	subs.w	fp, sl, r4
 80029da:	d00b      	beq.n	80029f4 <_vfiprintf_r+0xc0>
 80029dc:	465b      	mov	r3, fp
 80029de:	4622      	mov	r2, r4
 80029e0:	4629      	mov	r1, r5
 80029e2:	4630      	mov	r0, r6
 80029e4:	f7ff ff93 	bl	800290e <__sfputs_r>
 80029e8:	3001      	adds	r0, #1
 80029ea:	f000 80aa 	beq.w	8002b42 <_vfiprintf_r+0x20e>
 80029ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80029f0:	445a      	add	r2, fp
 80029f2:	9209      	str	r2, [sp, #36]	; 0x24
 80029f4:	f89a 3000 	ldrb.w	r3, [sl]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 80a2 	beq.w	8002b42 <_vfiprintf_r+0x20e>
 80029fe:	2300      	movs	r3, #0
 8002a00:	f04f 32ff 	mov.w	r2, #4294967295
 8002a04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002a08:	f10a 0a01 	add.w	sl, sl, #1
 8002a0c:	9304      	str	r3, [sp, #16]
 8002a0e:	9307      	str	r3, [sp, #28]
 8002a10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002a14:	931a      	str	r3, [sp, #104]	; 0x68
 8002a16:	4654      	mov	r4, sl
 8002a18:	2205      	movs	r2, #5
 8002a1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a1e:	4858      	ldr	r0, [pc, #352]	; (8002b80 <_vfiprintf_r+0x24c>)
 8002a20:	f7fd fbe6 	bl	80001f0 <memchr>
 8002a24:	9a04      	ldr	r2, [sp, #16]
 8002a26:	b9d8      	cbnz	r0, 8002a60 <_vfiprintf_r+0x12c>
 8002a28:	06d1      	lsls	r1, r2, #27
 8002a2a:	bf44      	itt	mi
 8002a2c:	2320      	movmi	r3, #32
 8002a2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a32:	0713      	lsls	r3, r2, #28
 8002a34:	bf44      	itt	mi
 8002a36:	232b      	movmi	r3, #43	; 0x2b
 8002a38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a3c:	f89a 3000 	ldrb.w	r3, [sl]
 8002a40:	2b2a      	cmp	r3, #42	; 0x2a
 8002a42:	d015      	beq.n	8002a70 <_vfiprintf_r+0x13c>
 8002a44:	9a07      	ldr	r2, [sp, #28]
 8002a46:	4654      	mov	r4, sl
 8002a48:	2000      	movs	r0, #0
 8002a4a:	f04f 0c0a 	mov.w	ip, #10
 8002a4e:	4621      	mov	r1, r4
 8002a50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002a54:	3b30      	subs	r3, #48	; 0x30
 8002a56:	2b09      	cmp	r3, #9
 8002a58:	d94e      	bls.n	8002af8 <_vfiprintf_r+0x1c4>
 8002a5a:	b1b0      	cbz	r0, 8002a8a <_vfiprintf_r+0x156>
 8002a5c:	9207      	str	r2, [sp, #28]
 8002a5e:	e014      	b.n	8002a8a <_vfiprintf_r+0x156>
 8002a60:	eba0 0308 	sub.w	r3, r0, r8
 8002a64:	fa09 f303 	lsl.w	r3, r9, r3
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	9304      	str	r3, [sp, #16]
 8002a6c:	46a2      	mov	sl, r4
 8002a6e:	e7d2      	b.n	8002a16 <_vfiprintf_r+0xe2>
 8002a70:	9b03      	ldr	r3, [sp, #12]
 8002a72:	1d19      	adds	r1, r3, #4
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	9103      	str	r1, [sp, #12]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	bfbb      	ittet	lt
 8002a7c:	425b      	neglt	r3, r3
 8002a7e:	f042 0202 	orrlt.w	r2, r2, #2
 8002a82:	9307      	strge	r3, [sp, #28]
 8002a84:	9307      	strlt	r3, [sp, #28]
 8002a86:	bfb8      	it	lt
 8002a88:	9204      	strlt	r2, [sp, #16]
 8002a8a:	7823      	ldrb	r3, [r4, #0]
 8002a8c:	2b2e      	cmp	r3, #46	; 0x2e
 8002a8e:	d10c      	bne.n	8002aaa <_vfiprintf_r+0x176>
 8002a90:	7863      	ldrb	r3, [r4, #1]
 8002a92:	2b2a      	cmp	r3, #42	; 0x2a
 8002a94:	d135      	bne.n	8002b02 <_vfiprintf_r+0x1ce>
 8002a96:	9b03      	ldr	r3, [sp, #12]
 8002a98:	1d1a      	adds	r2, r3, #4
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	9203      	str	r2, [sp, #12]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	bfb8      	it	lt
 8002aa2:	f04f 33ff 	movlt.w	r3, #4294967295
 8002aa6:	3402      	adds	r4, #2
 8002aa8:	9305      	str	r3, [sp, #20]
 8002aaa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002b90 <_vfiprintf_r+0x25c>
 8002aae:	7821      	ldrb	r1, [r4, #0]
 8002ab0:	2203      	movs	r2, #3
 8002ab2:	4650      	mov	r0, sl
 8002ab4:	f7fd fb9c 	bl	80001f0 <memchr>
 8002ab8:	b140      	cbz	r0, 8002acc <_vfiprintf_r+0x198>
 8002aba:	2340      	movs	r3, #64	; 0x40
 8002abc:	eba0 000a 	sub.w	r0, r0, sl
 8002ac0:	fa03 f000 	lsl.w	r0, r3, r0
 8002ac4:	9b04      	ldr	r3, [sp, #16]
 8002ac6:	4303      	orrs	r3, r0
 8002ac8:	3401      	adds	r4, #1
 8002aca:	9304      	str	r3, [sp, #16]
 8002acc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ad0:	482c      	ldr	r0, [pc, #176]	; (8002b84 <_vfiprintf_r+0x250>)
 8002ad2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002ad6:	2206      	movs	r2, #6
 8002ad8:	f7fd fb8a 	bl	80001f0 <memchr>
 8002adc:	2800      	cmp	r0, #0
 8002ade:	d03f      	beq.n	8002b60 <_vfiprintf_r+0x22c>
 8002ae0:	4b29      	ldr	r3, [pc, #164]	; (8002b88 <_vfiprintf_r+0x254>)
 8002ae2:	bb1b      	cbnz	r3, 8002b2c <_vfiprintf_r+0x1f8>
 8002ae4:	9b03      	ldr	r3, [sp, #12]
 8002ae6:	3307      	adds	r3, #7
 8002ae8:	f023 0307 	bic.w	r3, r3, #7
 8002aec:	3308      	adds	r3, #8
 8002aee:	9303      	str	r3, [sp, #12]
 8002af0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002af2:	443b      	add	r3, r7
 8002af4:	9309      	str	r3, [sp, #36]	; 0x24
 8002af6:	e767      	b.n	80029c8 <_vfiprintf_r+0x94>
 8002af8:	fb0c 3202 	mla	r2, ip, r2, r3
 8002afc:	460c      	mov	r4, r1
 8002afe:	2001      	movs	r0, #1
 8002b00:	e7a5      	b.n	8002a4e <_vfiprintf_r+0x11a>
 8002b02:	2300      	movs	r3, #0
 8002b04:	3401      	adds	r4, #1
 8002b06:	9305      	str	r3, [sp, #20]
 8002b08:	4619      	mov	r1, r3
 8002b0a:	f04f 0c0a 	mov.w	ip, #10
 8002b0e:	4620      	mov	r0, r4
 8002b10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b14:	3a30      	subs	r2, #48	; 0x30
 8002b16:	2a09      	cmp	r2, #9
 8002b18:	d903      	bls.n	8002b22 <_vfiprintf_r+0x1ee>
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d0c5      	beq.n	8002aaa <_vfiprintf_r+0x176>
 8002b1e:	9105      	str	r1, [sp, #20]
 8002b20:	e7c3      	b.n	8002aaa <_vfiprintf_r+0x176>
 8002b22:	fb0c 2101 	mla	r1, ip, r1, r2
 8002b26:	4604      	mov	r4, r0
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e7f0      	b.n	8002b0e <_vfiprintf_r+0x1da>
 8002b2c:	ab03      	add	r3, sp, #12
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	462a      	mov	r2, r5
 8002b32:	4b16      	ldr	r3, [pc, #88]	; (8002b8c <_vfiprintf_r+0x258>)
 8002b34:	a904      	add	r1, sp, #16
 8002b36:	4630      	mov	r0, r6
 8002b38:	f3af 8000 	nop.w
 8002b3c:	4607      	mov	r7, r0
 8002b3e:	1c78      	adds	r0, r7, #1
 8002b40:	d1d6      	bne.n	8002af0 <_vfiprintf_r+0x1bc>
 8002b42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002b44:	07d9      	lsls	r1, r3, #31
 8002b46:	d405      	bmi.n	8002b54 <_vfiprintf_r+0x220>
 8002b48:	89ab      	ldrh	r3, [r5, #12]
 8002b4a:	059a      	lsls	r2, r3, #22
 8002b4c:	d402      	bmi.n	8002b54 <_vfiprintf_r+0x220>
 8002b4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002b50:	f7ff fdb7 	bl	80026c2 <__retarget_lock_release_recursive>
 8002b54:	89ab      	ldrh	r3, [r5, #12]
 8002b56:	065b      	lsls	r3, r3, #25
 8002b58:	f53f af12 	bmi.w	8002980 <_vfiprintf_r+0x4c>
 8002b5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002b5e:	e711      	b.n	8002984 <_vfiprintf_r+0x50>
 8002b60:	ab03      	add	r3, sp, #12
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	462a      	mov	r2, r5
 8002b66:	4b09      	ldr	r3, [pc, #36]	; (8002b8c <_vfiprintf_r+0x258>)
 8002b68:	a904      	add	r1, sp, #16
 8002b6a:	4630      	mov	r0, r6
 8002b6c:	f000 f880 	bl	8002c70 <_printf_i>
 8002b70:	e7e4      	b.n	8002b3c <_vfiprintf_r+0x208>
 8002b72:	bf00      	nop
 8002b74:	080030b4 	.word	0x080030b4
 8002b78:	080030d4 	.word	0x080030d4
 8002b7c:	08003094 	.word	0x08003094
 8002b80:	080030f4 	.word	0x080030f4
 8002b84:	080030fe 	.word	0x080030fe
 8002b88:	00000000 	.word	0x00000000
 8002b8c:	0800290f 	.word	0x0800290f
 8002b90:	080030fa 	.word	0x080030fa

08002b94 <_printf_common>:
 8002b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b98:	4616      	mov	r6, r2
 8002b9a:	4699      	mov	r9, r3
 8002b9c:	688a      	ldr	r2, [r1, #8]
 8002b9e:	690b      	ldr	r3, [r1, #16]
 8002ba0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	bfb8      	it	lt
 8002ba8:	4613      	movlt	r3, r2
 8002baa:	6033      	str	r3, [r6, #0]
 8002bac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002bb0:	4607      	mov	r7, r0
 8002bb2:	460c      	mov	r4, r1
 8002bb4:	b10a      	cbz	r2, 8002bba <_printf_common+0x26>
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	6033      	str	r3, [r6, #0]
 8002bba:	6823      	ldr	r3, [r4, #0]
 8002bbc:	0699      	lsls	r1, r3, #26
 8002bbe:	bf42      	ittt	mi
 8002bc0:	6833      	ldrmi	r3, [r6, #0]
 8002bc2:	3302      	addmi	r3, #2
 8002bc4:	6033      	strmi	r3, [r6, #0]
 8002bc6:	6825      	ldr	r5, [r4, #0]
 8002bc8:	f015 0506 	ands.w	r5, r5, #6
 8002bcc:	d106      	bne.n	8002bdc <_printf_common+0x48>
 8002bce:	f104 0a19 	add.w	sl, r4, #25
 8002bd2:	68e3      	ldr	r3, [r4, #12]
 8002bd4:	6832      	ldr	r2, [r6, #0]
 8002bd6:	1a9b      	subs	r3, r3, r2
 8002bd8:	42ab      	cmp	r3, r5
 8002bda:	dc26      	bgt.n	8002c2a <_printf_common+0x96>
 8002bdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002be0:	1e13      	subs	r3, r2, #0
 8002be2:	6822      	ldr	r2, [r4, #0]
 8002be4:	bf18      	it	ne
 8002be6:	2301      	movne	r3, #1
 8002be8:	0692      	lsls	r2, r2, #26
 8002bea:	d42b      	bmi.n	8002c44 <_printf_common+0xb0>
 8002bec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002bf0:	4649      	mov	r1, r9
 8002bf2:	4638      	mov	r0, r7
 8002bf4:	47c0      	blx	r8
 8002bf6:	3001      	adds	r0, #1
 8002bf8:	d01e      	beq.n	8002c38 <_printf_common+0xa4>
 8002bfa:	6823      	ldr	r3, [r4, #0]
 8002bfc:	68e5      	ldr	r5, [r4, #12]
 8002bfe:	6832      	ldr	r2, [r6, #0]
 8002c00:	f003 0306 	and.w	r3, r3, #6
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	bf08      	it	eq
 8002c08:	1aad      	subeq	r5, r5, r2
 8002c0a:	68a3      	ldr	r3, [r4, #8]
 8002c0c:	6922      	ldr	r2, [r4, #16]
 8002c0e:	bf0c      	ite	eq
 8002c10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c14:	2500      	movne	r5, #0
 8002c16:	4293      	cmp	r3, r2
 8002c18:	bfc4      	itt	gt
 8002c1a:	1a9b      	subgt	r3, r3, r2
 8002c1c:	18ed      	addgt	r5, r5, r3
 8002c1e:	2600      	movs	r6, #0
 8002c20:	341a      	adds	r4, #26
 8002c22:	42b5      	cmp	r5, r6
 8002c24:	d11a      	bne.n	8002c5c <_printf_common+0xc8>
 8002c26:	2000      	movs	r0, #0
 8002c28:	e008      	b.n	8002c3c <_printf_common+0xa8>
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	4652      	mov	r2, sl
 8002c2e:	4649      	mov	r1, r9
 8002c30:	4638      	mov	r0, r7
 8002c32:	47c0      	blx	r8
 8002c34:	3001      	adds	r0, #1
 8002c36:	d103      	bne.n	8002c40 <_printf_common+0xac>
 8002c38:	f04f 30ff 	mov.w	r0, #4294967295
 8002c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c40:	3501      	adds	r5, #1
 8002c42:	e7c6      	b.n	8002bd2 <_printf_common+0x3e>
 8002c44:	18e1      	adds	r1, r4, r3
 8002c46:	1c5a      	adds	r2, r3, #1
 8002c48:	2030      	movs	r0, #48	; 0x30
 8002c4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002c4e:	4422      	add	r2, r4
 8002c50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002c54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002c58:	3302      	adds	r3, #2
 8002c5a:	e7c7      	b.n	8002bec <_printf_common+0x58>
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	4622      	mov	r2, r4
 8002c60:	4649      	mov	r1, r9
 8002c62:	4638      	mov	r0, r7
 8002c64:	47c0      	blx	r8
 8002c66:	3001      	adds	r0, #1
 8002c68:	d0e6      	beq.n	8002c38 <_printf_common+0xa4>
 8002c6a:	3601      	adds	r6, #1
 8002c6c:	e7d9      	b.n	8002c22 <_printf_common+0x8e>
	...

08002c70 <_printf_i>:
 8002c70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c74:	460c      	mov	r4, r1
 8002c76:	4691      	mov	r9, r2
 8002c78:	7e27      	ldrb	r7, [r4, #24]
 8002c7a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002c7c:	2f78      	cmp	r7, #120	; 0x78
 8002c7e:	4680      	mov	r8, r0
 8002c80:	469a      	mov	sl, r3
 8002c82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c86:	d807      	bhi.n	8002c98 <_printf_i+0x28>
 8002c88:	2f62      	cmp	r7, #98	; 0x62
 8002c8a:	d80a      	bhi.n	8002ca2 <_printf_i+0x32>
 8002c8c:	2f00      	cmp	r7, #0
 8002c8e:	f000 80d8 	beq.w	8002e42 <_printf_i+0x1d2>
 8002c92:	2f58      	cmp	r7, #88	; 0x58
 8002c94:	f000 80a3 	beq.w	8002dde <_printf_i+0x16e>
 8002c98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002c9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002ca0:	e03a      	b.n	8002d18 <_printf_i+0xa8>
 8002ca2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002ca6:	2b15      	cmp	r3, #21
 8002ca8:	d8f6      	bhi.n	8002c98 <_printf_i+0x28>
 8002caa:	a001      	add	r0, pc, #4	; (adr r0, 8002cb0 <_printf_i+0x40>)
 8002cac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002cb0:	08002d09 	.word	0x08002d09
 8002cb4:	08002d1d 	.word	0x08002d1d
 8002cb8:	08002c99 	.word	0x08002c99
 8002cbc:	08002c99 	.word	0x08002c99
 8002cc0:	08002c99 	.word	0x08002c99
 8002cc4:	08002c99 	.word	0x08002c99
 8002cc8:	08002d1d 	.word	0x08002d1d
 8002ccc:	08002c99 	.word	0x08002c99
 8002cd0:	08002c99 	.word	0x08002c99
 8002cd4:	08002c99 	.word	0x08002c99
 8002cd8:	08002c99 	.word	0x08002c99
 8002cdc:	08002e29 	.word	0x08002e29
 8002ce0:	08002d4d 	.word	0x08002d4d
 8002ce4:	08002e0b 	.word	0x08002e0b
 8002ce8:	08002c99 	.word	0x08002c99
 8002cec:	08002c99 	.word	0x08002c99
 8002cf0:	08002e4b 	.word	0x08002e4b
 8002cf4:	08002c99 	.word	0x08002c99
 8002cf8:	08002d4d 	.word	0x08002d4d
 8002cfc:	08002c99 	.word	0x08002c99
 8002d00:	08002c99 	.word	0x08002c99
 8002d04:	08002e13 	.word	0x08002e13
 8002d08:	680b      	ldr	r3, [r1, #0]
 8002d0a:	1d1a      	adds	r2, r3, #4
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	600a      	str	r2, [r1, #0]
 8002d10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002d14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e0a3      	b.n	8002e64 <_printf_i+0x1f4>
 8002d1c:	6825      	ldr	r5, [r4, #0]
 8002d1e:	6808      	ldr	r0, [r1, #0]
 8002d20:	062e      	lsls	r6, r5, #24
 8002d22:	f100 0304 	add.w	r3, r0, #4
 8002d26:	d50a      	bpl.n	8002d3e <_printf_i+0xce>
 8002d28:	6805      	ldr	r5, [r0, #0]
 8002d2a:	600b      	str	r3, [r1, #0]
 8002d2c:	2d00      	cmp	r5, #0
 8002d2e:	da03      	bge.n	8002d38 <_printf_i+0xc8>
 8002d30:	232d      	movs	r3, #45	; 0x2d
 8002d32:	426d      	negs	r5, r5
 8002d34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d38:	485e      	ldr	r0, [pc, #376]	; (8002eb4 <_printf_i+0x244>)
 8002d3a:	230a      	movs	r3, #10
 8002d3c:	e019      	b.n	8002d72 <_printf_i+0x102>
 8002d3e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002d42:	6805      	ldr	r5, [r0, #0]
 8002d44:	600b      	str	r3, [r1, #0]
 8002d46:	bf18      	it	ne
 8002d48:	b22d      	sxthne	r5, r5
 8002d4a:	e7ef      	b.n	8002d2c <_printf_i+0xbc>
 8002d4c:	680b      	ldr	r3, [r1, #0]
 8002d4e:	6825      	ldr	r5, [r4, #0]
 8002d50:	1d18      	adds	r0, r3, #4
 8002d52:	6008      	str	r0, [r1, #0]
 8002d54:	0628      	lsls	r0, r5, #24
 8002d56:	d501      	bpl.n	8002d5c <_printf_i+0xec>
 8002d58:	681d      	ldr	r5, [r3, #0]
 8002d5a:	e002      	b.n	8002d62 <_printf_i+0xf2>
 8002d5c:	0669      	lsls	r1, r5, #25
 8002d5e:	d5fb      	bpl.n	8002d58 <_printf_i+0xe8>
 8002d60:	881d      	ldrh	r5, [r3, #0]
 8002d62:	4854      	ldr	r0, [pc, #336]	; (8002eb4 <_printf_i+0x244>)
 8002d64:	2f6f      	cmp	r7, #111	; 0x6f
 8002d66:	bf0c      	ite	eq
 8002d68:	2308      	moveq	r3, #8
 8002d6a:	230a      	movne	r3, #10
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002d72:	6866      	ldr	r6, [r4, #4]
 8002d74:	60a6      	str	r6, [r4, #8]
 8002d76:	2e00      	cmp	r6, #0
 8002d78:	bfa2      	ittt	ge
 8002d7a:	6821      	ldrge	r1, [r4, #0]
 8002d7c:	f021 0104 	bicge.w	r1, r1, #4
 8002d80:	6021      	strge	r1, [r4, #0]
 8002d82:	b90d      	cbnz	r5, 8002d88 <_printf_i+0x118>
 8002d84:	2e00      	cmp	r6, #0
 8002d86:	d04d      	beq.n	8002e24 <_printf_i+0x1b4>
 8002d88:	4616      	mov	r6, r2
 8002d8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8002d8e:	fb03 5711 	mls	r7, r3, r1, r5
 8002d92:	5dc7      	ldrb	r7, [r0, r7]
 8002d94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002d98:	462f      	mov	r7, r5
 8002d9a:	42bb      	cmp	r3, r7
 8002d9c:	460d      	mov	r5, r1
 8002d9e:	d9f4      	bls.n	8002d8a <_printf_i+0x11a>
 8002da0:	2b08      	cmp	r3, #8
 8002da2:	d10b      	bne.n	8002dbc <_printf_i+0x14c>
 8002da4:	6823      	ldr	r3, [r4, #0]
 8002da6:	07df      	lsls	r7, r3, #31
 8002da8:	d508      	bpl.n	8002dbc <_printf_i+0x14c>
 8002daa:	6923      	ldr	r3, [r4, #16]
 8002dac:	6861      	ldr	r1, [r4, #4]
 8002dae:	4299      	cmp	r1, r3
 8002db0:	bfde      	ittt	le
 8002db2:	2330      	movle	r3, #48	; 0x30
 8002db4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002db8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002dbc:	1b92      	subs	r2, r2, r6
 8002dbe:	6122      	str	r2, [r4, #16]
 8002dc0:	f8cd a000 	str.w	sl, [sp]
 8002dc4:	464b      	mov	r3, r9
 8002dc6:	aa03      	add	r2, sp, #12
 8002dc8:	4621      	mov	r1, r4
 8002dca:	4640      	mov	r0, r8
 8002dcc:	f7ff fee2 	bl	8002b94 <_printf_common>
 8002dd0:	3001      	adds	r0, #1
 8002dd2:	d14c      	bne.n	8002e6e <_printf_i+0x1fe>
 8002dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002dd8:	b004      	add	sp, #16
 8002dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dde:	4835      	ldr	r0, [pc, #212]	; (8002eb4 <_printf_i+0x244>)
 8002de0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002de4:	6823      	ldr	r3, [r4, #0]
 8002de6:	680e      	ldr	r6, [r1, #0]
 8002de8:	061f      	lsls	r7, r3, #24
 8002dea:	f856 5b04 	ldr.w	r5, [r6], #4
 8002dee:	600e      	str	r6, [r1, #0]
 8002df0:	d514      	bpl.n	8002e1c <_printf_i+0x1ac>
 8002df2:	07d9      	lsls	r1, r3, #31
 8002df4:	bf44      	itt	mi
 8002df6:	f043 0320 	orrmi.w	r3, r3, #32
 8002dfa:	6023      	strmi	r3, [r4, #0]
 8002dfc:	b91d      	cbnz	r5, 8002e06 <_printf_i+0x196>
 8002dfe:	6823      	ldr	r3, [r4, #0]
 8002e00:	f023 0320 	bic.w	r3, r3, #32
 8002e04:	6023      	str	r3, [r4, #0]
 8002e06:	2310      	movs	r3, #16
 8002e08:	e7b0      	b.n	8002d6c <_printf_i+0xfc>
 8002e0a:	6823      	ldr	r3, [r4, #0]
 8002e0c:	f043 0320 	orr.w	r3, r3, #32
 8002e10:	6023      	str	r3, [r4, #0]
 8002e12:	2378      	movs	r3, #120	; 0x78
 8002e14:	4828      	ldr	r0, [pc, #160]	; (8002eb8 <_printf_i+0x248>)
 8002e16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002e1a:	e7e3      	b.n	8002de4 <_printf_i+0x174>
 8002e1c:	065e      	lsls	r6, r3, #25
 8002e1e:	bf48      	it	mi
 8002e20:	b2ad      	uxthmi	r5, r5
 8002e22:	e7e6      	b.n	8002df2 <_printf_i+0x182>
 8002e24:	4616      	mov	r6, r2
 8002e26:	e7bb      	b.n	8002da0 <_printf_i+0x130>
 8002e28:	680b      	ldr	r3, [r1, #0]
 8002e2a:	6826      	ldr	r6, [r4, #0]
 8002e2c:	6960      	ldr	r0, [r4, #20]
 8002e2e:	1d1d      	adds	r5, r3, #4
 8002e30:	600d      	str	r5, [r1, #0]
 8002e32:	0635      	lsls	r5, r6, #24
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	d501      	bpl.n	8002e3c <_printf_i+0x1cc>
 8002e38:	6018      	str	r0, [r3, #0]
 8002e3a:	e002      	b.n	8002e42 <_printf_i+0x1d2>
 8002e3c:	0671      	lsls	r1, r6, #25
 8002e3e:	d5fb      	bpl.n	8002e38 <_printf_i+0x1c8>
 8002e40:	8018      	strh	r0, [r3, #0]
 8002e42:	2300      	movs	r3, #0
 8002e44:	6123      	str	r3, [r4, #16]
 8002e46:	4616      	mov	r6, r2
 8002e48:	e7ba      	b.n	8002dc0 <_printf_i+0x150>
 8002e4a:	680b      	ldr	r3, [r1, #0]
 8002e4c:	1d1a      	adds	r2, r3, #4
 8002e4e:	600a      	str	r2, [r1, #0]
 8002e50:	681e      	ldr	r6, [r3, #0]
 8002e52:	6862      	ldr	r2, [r4, #4]
 8002e54:	2100      	movs	r1, #0
 8002e56:	4630      	mov	r0, r6
 8002e58:	f7fd f9ca 	bl	80001f0 <memchr>
 8002e5c:	b108      	cbz	r0, 8002e62 <_printf_i+0x1f2>
 8002e5e:	1b80      	subs	r0, r0, r6
 8002e60:	6060      	str	r0, [r4, #4]
 8002e62:	6863      	ldr	r3, [r4, #4]
 8002e64:	6123      	str	r3, [r4, #16]
 8002e66:	2300      	movs	r3, #0
 8002e68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e6c:	e7a8      	b.n	8002dc0 <_printf_i+0x150>
 8002e6e:	6923      	ldr	r3, [r4, #16]
 8002e70:	4632      	mov	r2, r6
 8002e72:	4649      	mov	r1, r9
 8002e74:	4640      	mov	r0, r8
 8002e76:	47d0      	blx	sl
 8002e78:	3001      	adds	r0, #1
 8002e7a:	d0ab      	beq.n	8002dd4 <_printf_i+0x164>
 8002e7c:	6823      	ldr	r3, [r4, #0]
 8002e7e:	079b      	lsls	r3, r3, #30
 8002e80:	d413      	bmi.n	8002eaa <_printf_i+0x23a>
 8002e82:	68e0      	ldr	r0, [r4, #12]
 8002e84:	9b03      	ldr	r3, [sp, #12]
 8002e86:	4298      	cmp	r0, r3
 8002e88:	bfb8      	it	lt
 8002e8a:	4618      	movlt	r0, r3
 8002e8c:	e7a4      	b.n	8002dd8 <_printf_i+0x168>
 8002e8e:	2301      	movs	r3, #1
 8002e90:	4632      	mov	r2, r6
 8002e92:	4649      	mov	r1, r9
 8002e94:	4640      	mov	r0, r8
 8002e96:	47d0      	blx	sl
 8002e98:	3001      	adds	r0, #1
 8002e9a:	d09b      	beq.n	8002dd4 <_printf_i+0x164>
 8002e9c:	3501      	adds	r5, #1
 8002e9e:	68e3      	ldr	r3, [r4, #12]
 8002ea0:	9903      	ldr	r1, [sp, #12]
 8002ea2:	1a5b      	subs	r3, r3, r1
 8002ea4:	42ab      	cmp	r3, r5
 8002ea6:	dcf2      	bgt.n	8002e8e <_printf_i+0x21e>
 8002ea8:	e7eb      	b.n	8002e82 <_printf_i+0x212>
 8002eaa:	2500      	movs	r5, #0
 8002eac:	f104 0619 	add.w	r6, r4, #25
 8002eb0:	e7f5      	b.n	8002e9e <_printf_i+0x22e>
 8002eb2:	bf00      	nop
 8002eb4:	08003105 	.word	0x08003105
 8002eb8:	08003116 	.word	0x08003116

08002ebc <_sbrk_r>:
 8002ebc:	b538      	push	{r3, r4, r5, lr}
 8002ebe:	4d06      	ldr	r5, [pc, #24]	; (8002ed8 <_sbrk_r+0x1c>)
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	4604      	mov	r4, r0
 8002ec4:	4608      	mov	r0, r1
 8002ec6:	602b      	str	r3, [r5, #0]
 8002ec8:	f7fd fe6a 	bl	8000ba0 <_sbrk>
 8002ecc:	1c43      	adds	r3, r0, #1
 8002ece:	d102      	bne.n	8002ed6 <_sbrk_r+0x1a>
 8002ed0:	682b      	ldr	r3, [r5, #0]
 8002ed2:	b103      	cbz	r3, 8002ed6 <_sbrk_r+0x1a>
 8002ed4:	6023      	str	r3, [r4, #0]
 8002ed6:	bd38      	pop	{r3, r4, r5, pc}
 8002ed8:	200000ec 	.word	0x200000ec

08002edc <__sread>:
 8002edc:	b510      	push	{r4, lr}
 8002ede:	460c      	mov	r4, r1
 8002ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ee4:	f000 f8a0 	bl	8003028 <_read_r>
 8002ee8:	2800      	cmp	r0, #0
 8002eea:	bfab      	itete	ge
 8002eec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002eee:	89a3      	ldrhlt	r3, [r4, #12]
 8002ef0:	181b      	addge	r3, r3, r0
 8002ef2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002ef6:	bfac      	ite	ge
 8002ef8:	6563      	strge	r3, [r4, #84]	; 0x54
 8002efa:	81a3      	strhlt	r3, [r4, #12]
 8002efc:	bd10      	pop	{r4, pc}

08002efe <__swrite>:
 8002efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f02:	461f      	mov	r7, r3
 8002f04:	898b      	ldrh	r3, [r1, #12]
 8002f06:	05db      	lsls	r3, r3, #23
 8002f08:	4605      	mov	r5, r0
 8002f0a:	460c      	mov	r4, r1
 8002f0c:	4616      	mov	r6, r2
 8002f0e:	d505      	bpl.n	8002f1c <__swrite+0x1e>
 8002f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f14:	2302      	movs	r3, #2
 8002f16:	2200      	movs	r2, #0
 8002f18:	f000 f868 	bl	8002fec <_lseek_r>
 8002f1c:	89a3      	ldrh	r3, [r4, #12]
 8002f1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f26:	81a3      	strh	r3, [r4, #12]
 8002f28:	4632      	mov	r2, r6
 8002f2a:	463b      	mov	r3, r7
 8002f2c:	4628      	mov	r0, r5
 8002f2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f32:	f000 b817 	b.w	8002f64 <_write_r>

08002f36 <__sseek>:
 8002f36:	b510      	push	{r4, lr}
 8002f38:	460c      	mov	r4, r1
 8002f3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f3e:	f000 f855 	bl	8002fec <_lseek_r>
 8002f42:	1c43      	adds	r3, r0, #1
 8002f44:	89a3      	ldrh	r3, [r4, #12]
 8002f46:	bf15      	itete	ne
 8002f48:	6560      	strne	r0, [r4, #84]	; 0x54
 8002f4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002f4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002f52:	81a3      	strheq	r3, [r4, #12]
 8002f54:	bf18      	it	ne
 8002f56:	81a3      	strhne	r3, [r4, #12]
 8002f58:	bd10      	pop	{r4, pc}

08002f5a <__sclose>:
 8002f5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f5e:	f000 b813 	b.w	8002f88 <_close_r>
	...

08002f64 <_write_r>:
 8002f64:	b538      	push	{r3, r4, r5, lr}
 8002f66:	4d07      	ldr	r5, [pc, #28]	; (8002f84 <_write_r+0x20>)
 8002f68:	4604      	mov	r4, r0
 8002f6a:	4608      	mov	r0, r1
 8002f6c:	4611      	mov	r1, r2
 8002f6e:	2200      	movs	r2, #0
 8002f70:	602a      	str	r2, [r5, #0]
 8002f72:	461a      	mov	r2, r3
 8002f74:	f7fd fdc3 	bl	8000afe <_write>
 8002f78:	1c43      	adds	r3, r0, #1
 8002f7a:	d102      	bne.n	8002f82 <_write_r+0x1e>
 8002f7c:	682b      	ldr	r3, [r5, #0]
 8002f7e:	b103      	cbz	r3, 8002f82 <_write_r+0x1e>
 8002f80:	6023      	str	r3, [r4, #0]
 8002f82:	bd38      	pop	{r3, r4, r5, pc}
 8002f84:	200000ec 	.word	0x200000ec

08002f88 <_close_r>:
 8002f88:	b538      	push	{r3, r4, r5, lr}
 8002f8a:	4d06      	ldr	r5, [pc, #24]	; (8002fa4 <_close_r+0x1c>)
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	4604      	mov	r4, r0
 8002f90:	4608      	mov	r0, r1
 8002f92:	602b      	str	r3, [r5, #0]
 8002f94:	f7fd fdcf 	bl	8000b36 <_close>
 8002f98:	1c43      	adds	r3, r0, #1
 8002f9a:	d102      	bne.n	8002fa2 <_close_r+0x1a>
 8002f9c:	682b      	ldr	r3, [r5, #0]
 8002f9e:	b103      	cbz	r3, 8002fa2 <_close_r+0x1a>
 8002fa0:	6023      	str	r3, [r4, #0]
 8002fa2:	bd38      	pop	{r3, r4, r5, pc}
 8002fa4:	200000ec 	.word	0x200000ec

08002fa8 <_fstat_r>:
 8002fa8:	b538      	push	{r3, r4, r5, lr}
 8002faa:	4d07      	ldr	r5, [pc, #28]	; (8002fc8 <_fstat_r+0x20>)
 8002fac:	2300      	movs	r3, #0
 8002fae:	4604      	mov	r4, r0
 8002fb0:	4608      	mov	r0, r1
 8002fb2:	4611      	mov	r1, r2
 8002fb4:	602b      	str	r3, [r5, #0]
 8002fb6:	f7fd fdca 	bl	8000b4e <_fstat>
 8002fba:	1c43      	adds	r3, r0, #1
 8002fbc:	d102      	bne.n	8002fc4 <_fstat_r+0x1c>
 8002fbe:	682b      	ldr	r3, [r5, #0]
 8002fc0:	b103      	cbz	r3, 8002fc4 <_fstat_r+0x1c>
 8002fc2:	6023      	str	r3, [r4, #0]
 8002fc4:	bd38      	pop	{r3, r4, r5, pc}
 8002fc6:	bf00      	nop
 8002fc8:	200000ec 	.word	0x200000ec

08002fcc <_isatty_r>:
 8002fcc:	b538      	push	{r3, r4, r5, lr}
 8002fce:	4d06      	ldr	r5, [pc, #24]	; (8002fe8 <_isatty_r+0x1c>)
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	4604      	mov	r4, r0
 8002fd4:	4608      	mov	r0, r1
 8002fd6:	602b      	str	r3, [r5, #0]
 8002fd8:	f7fd fdc9 	bl	8000b6e <_isatty>
 8002fdc:	1c43      	adds	r3, r0, #1
 8002fde:	d102      	bne.n	8002fe6 <_isatty_r+0x1a>
 8002fe0:	682b      	ldr	r3, [r5, #0]
 8002fe2:	b103      	cbz	r3, 8002fe6 <_isatty_r+0x1a>
 8002fe4:	6023      	str	r3, [r4, #0]
 8002fe6:	bd38      	pop	{r3, r4, r5, pc}
 8002fe8:	200000ec 	.word	0x200000ec

08002fec <_lseek_r>:
 8002fec:	b538      	push	{r3, r4, r5, lr}
 8002fee:	4d07      	ldr	r5, [pc, #28]	; (800300c <_lseek_r+0x20>)
 8002ff0:	4604      	mov	r4, r0
 8002ff2:	4608      	mov	r0, r1
 8002ff4:	4611      	mov	r1, r2
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	602a      	str	r2, [r5, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	f7fd fdc2 	bl	8000b84 <_lseek>
 8003000:	1c43      	adds	r3, r0, #1
 8003002:	d102      	bne.n	800300a <_lseek_r+0x1e>
 8003004:	682b      	ldr	r3, [r5, #0]
 8003006:	b103      	cbz	r3, 800300a <_lseek_r+0x1e>
 8003008:	6023      	str	r3, [r4, #0]
 800300a:	bd38      	pop	{r3, r4, r5, pc}
 800300c:	200000ec 	.word	0x200000ec

08003010 <__malloc_lock>:
 8003010:	4801      	ldr	r0, [pc, #4]	; (8003018 <__malloc_lock+0x8>)
 8003012:	f7ff bb55 	b.w	80026c0 <__retarget_lock_acquire_recursive>
 8003016:	bf00      	nop
 8003018:	200000e4 	.word	0x200000e4

0800301c <__malloc_unlock>:
 800301c:	4801      	ldr	r0, [pc, #4]	; (8003024 <__malloc_unlock+0x8>)
 800301e:	f7ff bb50 	b.w	80026c2 <__retarget_lock_release_recursive>
 8003022:	bf00      	nop
 8003024:	200000e4 	.word	0x200000e4

08003028 <_read_r>:
 8003028:	b538      	push	{r3, r4, r5, lr}
 800302a:	4d07      	ldr	r5, [pc, #28]	; (8003048 <_read_r+0x20>)
 800302c:	4604      	mov	r4, r0
 800302e:	4608      	mov	r0, r1
 8003030:	4611      	mov	r1, r2
 8003032:	2200      	movs	r2, #0
 8003034:	602a      	str	r2, [r5, #0]
 8003036:	461a      	mov	r2, r3
 8003038:	f7fd fd44 	bl	8000ac4 <_read>
 800303c:	1c43      	adds	r3, r0, #1
 800303e:	d102      	bne.n	8003046 <_read_r+0x1e>
 8003040:	682b      	ldr	r3, [r5, #0]
 8003042:	b103      	cbz	r3, 8003046 <_read_r+0x1e>
 8003044:	6023      	str	r3, [r4, #0]
 8003046:	bd38      	pop	{r3, r4, r5, pc}
 8003048:	200000ec 	.word	0x200000ec

0800304c <_init>:
 800304c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800304e:	bf00      	nop
 8003050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003052:	bc08      	pop	{r3}
 8003054:	469e      	mov	lr, r3
 8003056:	4770      	bx	lr

08003058 <_fini>:
 8003058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800305a:	bf00      	nop
 800305c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800305e:	bc08      	pop	{r3}
 8003060:	469e      	mov	lr, r3
 8003062:	4770      	bx	lr
