
cviceni10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018344  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003da0  080184f4  080184f4  000284f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c294  0801c294  00030084  2**0
                  CONTENTS
  4 .ARM          00000008  0801c294  0801c294  0002c294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c29c  0801c29c  00030084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c29c  0801c29c  0002c29c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c2a0  0801c2a0  0002c2a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0801c2a4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030084  2**0
                  CONTENTS
 10 .bss          0000efb0  20000084  20000084  00030084  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000f034  2000f034  00030084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004aac0  00000000  00000000  000300b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008802  00000000  00000000  0007ab74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002280  00000000  00000000  00083378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002120  00000000  00000000  000855f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00035c41  00000000  00000000  00087718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00038010  00000000  00000000  000bd359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00100d6b  00000000  00000000  000f5369  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001f60d4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009874  00000000  00000000  001f6128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000084 	.word	0x20000084
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080184dc 	.word	0x080184dc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000088 	.word	0x20000088
 80001ec:	080184dc 	.word	0x080184dc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000598:	b480      	push	{r7}
 800059a:	b085      	sub	sp, #20
 800059c:	af00      	add	r7, sp, #0
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	4a07      	ldr	r2, [pc, #28]	; (80005c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80005a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005aa:	68bb      	ldr	r3, [r7, #8]
 80005ac:	4a06      	ldr	r2, [pc, #24]	; (80005c8 <vApplicationGetIdleTaskMemory+0x30>)
 80005ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2280      	movs	r2, #128	; 0x80
 80005b4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005b6:	bf00      	nop
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	200000a0 	.word	0x200000a0
 80005c8:	20000154 	.word	0x20000154

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b5b0      	push	{r4, r5, r7, lr}
 80005ce:	b088      	sub	sp, #32
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f000 fdd9 	bl	8001188 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f81d 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005da:	f000 f8af 	bl	800073c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005de:	f000 f883 	bl	80006e8 <MX_USART3_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 80005e2:	4b0a      	ldr	r3, [pc, #40]	; (800060c <main+0x40>)
 80005e4:	1d3c      	adds	r4, r7, #4
 80005e6:	461d      	mov	r5, r3
 80005e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f004 f8dc 	bl	80047b6 <osThreadCreate>
 80005fe:	4603      	mov	r3, r0
 8000600:	4a03      	ldr	r2, [pc, #12]	; (8000610 <main+0x44>)
 8000602:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000604:	f004 f8c0 	bl	8004788 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000608:	e7fe      	b.n	8000608 <main+0x3c>
 800060a:	bf00      	nop
 800060c:	08018500 	.word	0x08018500
 8000610:	2000869c 	.word	0x2000869c

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b094      	sub	sp, #80	; 0x50
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 0320 	add.w	r3, r7, #32
 800061e:	2230      	movs	r2, #48	; 0x30
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f016 fd5d 	bl	80170e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	4b28      	ldr	r3, [pc, #160]	; (80006e0 <SystemClock_Config+0xcc>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	4a27      	ldr	r2, [pc, #156]	; (80006e0 <SystemClock_Config+0xcc>)
 8000642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000646:	6413      	str	r3, [r2, #64]	; 0x40
 8000648:	4b25      	ldr	r3, [pc, #148]	; (80006e0 <SystemClock_Config+0xcc>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000654:	2300      	movs	r3, #0
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <SystemClock_Config+0xd0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a21      	ldr	r2, [pc, #132]	; (80006e4 <SystemClock_Config+0xd0>)
 800065e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <SystemClock_Config+0xd0>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000670:	2301      	movs	r3, #1
 8000672:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000674:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000678:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067a:	2302      	movs	r3, #2
 800067c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000682:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000684:	2304      	movs	r3, #4
 8000686:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000688:	23a8      	movs	r3, #168	; 0xa8
 800068a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800068c:	2302      	movs	r3, #2
 800068e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000690:	2307      	movs	r3, #7
 8000692:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000694:	f107 0320 	add.w	r3, r7, #32
 8000698:	4618      	mov	r0, r3
 800069a:	f002 fa41 	bl	8002b20 <HAL_RCC_OscConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006a4:	f000 f938 	bl	8000918 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a8:	230f      	movs	r3, #15
 80006aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ac:	2302      	movs	r3, #2
 80006ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	2105      	movs	r1, #5
 80006c6:	4618      	mov	r0, r3
 80006c8:	f002 fca2 	bl	8003010 <HAL_RCC_ClockConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006d2:	f000 f921 	bl	8000918 <Error_Handler>
  }
}
 80006d6:	bf00      	nop
 80006d8:	3750      	adds	r7, #80	; 0x50
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000

080006e8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006ec:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_USART3_UART_Init+0x4c>)
 80006ee:	4a12      	ldr	r2, [pc, #72]	; (8000738 <MX_USART3_UART_Init+0x50>)
 80006f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006f2:	4b10      	ldr	r3, [pc, #64]	; (8000734 <MX_USART3_UART_Init+0x4c>)
 80006f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_USART3_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_USART3_UART_Init+0x4c>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000706:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <MX_USART3_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800070c:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_USART3_UART_Init+0x4c>)
 800070e:	220c      	movs	r2, #12
 8000710:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <MX_USART3_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_USART3_UART_Init+0x4c>)
 800071a:	2200      	movs	r2, #0
 800071c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <MX_USART3_UART_Init+0x4c>)
 8000720:	f003 f952 	bl	80039c8 <HAL_UART_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800072a:	f000 f8f5 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	200086a0 	.word	0x200086a0
 8000738:	40004800 	.word	0x40004800

0800073c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08c      	sub	sp, #48	; 0x30
 8000740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	61bb      	str	r3, [r7, #24]
 8000756:	4b5b      	ldr	r3, [pc, #364]	; (80008c4 <MX_GPIO_Init+0x188>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a5a      	ldr	r2, [pc, #360]	; (80008c4 <MX_GPIO_Init+0x188>)
 800075c:	f043 0304 	orr.w	r3, r3, #4
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b58      	ldr	r3, [pc, #352]	; (80008c4 <MX_GPIO_Init+0x188>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0304 	and.w	r3, r3, #4
 800076a:	61bb      	str	r3, [r7, #24]
 800076c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
 8000772:	4b54      	ldr	r3, [pc, #336]	; (80008c4 <MX_GPIO_Init+0x188>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a53      	ldr	r2, [pc, #332]	; (80008c4 <MX_GPIO_Init+0x188>)
 8000778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b51      	ldr	r3, [pc, #324]	; (80008c4 <MX_GPIO_Init+0x188>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000786:	617b      	str	r3, [r7, #20]
 8000788:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	4b4d      	ldr	r3, [pc, #308]	; (80008c4 <MX_GPIO_Init+0x188>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a4c      	ldr	r2, [pc, #304]	; (80008c4 <MX_GPIO_Init+0x188>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b4a      	ldr	r3, [pc, #296]	; (80008c4 <MX_GPIO_Init+0x188>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	4b46      	ldr	r3, [pc, #280]	; (80008c4 <MX_GPIO_Init+0x188>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a45      	ldr	r2, [pc, #276]	; (80008c4 <MX_GPIO_Init+0x188>)
 80007b0:	f043 0302 	orr.w	r3, r3, #2
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b43      	ldr	r3, [pc, #268]	; (80008c4 <MX_GPIO_Init+0x188>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0302 	and.w	r3, r3, #2
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	4b3f      	ldr	r3, [pc, #252]	; (80008c4 <MX_GPIO_Init+0x188>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a3e      	ldr	r2, [pc, #248]	; (80008c4 <MX_GPIO_Init+0x188>)
 80007cc:	f043 0308 	orr.w	r3, r3, #8
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b3c      	ldr	r3, [pc, #240]	; (80008c4 <MX_GPIO_Init+0x188>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0308 	and.w	r3, r3, #8
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b38      	ldr	r3, [pc, #224]	; (80008c4 <MX_GPIO_Init+0x188>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a37      	ldr	r2, [pc, #220]	; (80008c4 <MX_GPIO_Init+0x188>)
 80007e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b35      	ldr	r3, [pc, #212]	; (80008c4 <MX_GPIO_Init+0x188>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	f244 0181 	movw	r1, #16513	; 0x4081
 8000800:	4831      	ldr	r0, [pc, #196]	; (80008c8 <MX_GPIO_Init+0x18c>)
 8000802:	f002 f973 	bl	8002aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	2140      	movs	r1, #64	; 0x40
 800080a:	4830      	ldr	r0, [pc, #192]	; (80008cc <MX_GPIO_Init+0x190>)
 800080c:	f002 f96e 	bl	8002aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000810:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000816:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800081a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000820:	f107 031c 	add.w	r3, r7, #28
 8000824:	4619      	mov	r1, r3
 8000826:	482a      	ldr	r0, [pc, #168]	; (80008d0 <MX_GPIO_Init+0x194>)
 8000828:	f001 ff9c 	bl	8002764 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800082c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000832:	2301      	movs	r3, #1
 8000834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083e:	f107 031c 	add.w	r3, r7, #28
 8000842:	4619      	mov	r1, r3
 8000844:	4820      	ldr	r0, [pc, #128]	; (80008c8 <MX_GPIO_Init+0x18c>)
 8000846:	f001 ff8d 	bl	8002764 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800084a:	2340      	movs	r3, #64	; 0x40
 800084c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084e:	2301      	movs	r3, #1
 8000850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	4619      	mov	r1, r3
 8000860:	481a      	ldr	r0, [pc, #104]	; (80008cc <MX_GPIO_Init+0x190>)
 8000862:	f001 ff7f 	bl	8002764 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000866:	2380      	movs	r3, #128	; 0x80
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800086a:	2300      	movs	r3, #0
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4619      	mov	r1, r3
 8000878:	4814      	ldr	r0, [pc, #80]	; (80008cc <MX_GPIO_Init+0x190>)
 800087a:	f001 ff73 	bl	8002764 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800087e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000884:	2302      	movs	r3, #2
 8000886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088c:	2303      	movs	r3, #3
 800088e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000890:	230a      	movs	r3, #10
 8000892:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	4619      	mov	r1, r3
 800089a:	480e      	ldr	r0, [pc, #56]	; (80008d4 <MX_GPIO_Init+0x198>)
 800089c:	f001 ff62 	bl	8002764 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80008a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a6:	2300      	movs	r3, #0
 80008a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	4619      	mov	r1, r3
 80008b4:	4807      	ldr	r0, [pc, #28]	; (80008d4 <MX_GPIO_Init+0x198>)
 80008b6:	f001 ff55 	bl	8002764 <HAL_GPIO_Init>

}
 80008ba:	bf00      	nop
 80008bc:	3730      	adds	r7, #48	; 0x30
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40020400 	.word	0x40020400
 80008cc:	40021800 	.word	0x40021800
 80008d0:	40020800 	.word	0x40020800
 80008d4:	40020000 	.word	0x40020000

080008d8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80008e0:	f003 fa88 	bl	8003df4 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Initialize tcp echo server */
  tcpecho_init();
 80008e4:	f000 fa52 	bl	8000d8c <tcpecho_init>
  telnet_init();
 80008e8:	f000 fc10 	bl	800110c <telnet_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008ec:	2001      	movs	r0, #1
 80008ee:	f003 ffae 	bl	800484e <osDelay>
 80008f2:	e7fb      	b.n	80008ec <StartDefaultTask+0x14>

080008f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a04      	ldr	r2, [pc, #16]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d101      	bne.n	800090a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000906:	f000 fc61 	bl	80011cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40002000 	.word	0x40002000

08000918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800091c:	b672      	cpsid	i
}
 800091e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000920:	e7fe      	b.n	8000920 <Error_Handler+0x8>
	...

08000924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	4b12      	ldr	r3, [pc, #72]	; (8000978 <HAL_MspInit+0x54>)
 8000930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000932:	4a11      	ldr	r2, [pc, #68]	; (8000978 <HAL_MspInit+0x54>)
 8000934:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000938:	6453      	str	r3, [r2, #68]	; 0x44
 800093a:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <HAL_MspInit+0x54>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	603b      	str	r3, [r7, #0]
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <HAL_MspInit+0x54>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094e:	4a0a      	ldr	r2, [pc, #40]	; (8000978 <HAL_MspInit+0x54>)
 8000950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000954:	6413      	str	r3, [r2, #64]	; 0x40
 8000956:	4b08      	ldr	r3, [pc, #32]	; (8000978 <HAL_MspInit+0x54>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	210f      	movs	r1, #15
 8000966:	f06f 0001 	mvn.w	r0, #1
 800096a:	f000 fd2b 	bl	80013c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40023800 	.word	0x40023800

0800097c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	; 0x28
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a19      	ldr	r2, [pc, #100]	; (8000a00 <HAL_UART_MspInit+0x84>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d12c      	bne.n	80009f8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <HAL_UART_MspInit+0x88>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	4a17      	ldr	r2, [pc, #92]	; (8000a04 <HAL_UART_MspInit+0x88>)
 80009a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009ac:	6413      	str	r3, [r2, #64]	; 0x40
 80009ae:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <HAL_UART_MspInit+0x88>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <HAL_UART_MspInit+0x88>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a10      	ldr	r2, [pc, #64]	; (8000a04 <HAL_UART_MspInit+0x88>)
 80009c4:	f043 0308 	orr.w	r3, r3, #8
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <HAL_UART_MspInit+0x88>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0308 	and.w	r3, r3, #8
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009dc:	2302      	movs	r3, #2
 80009de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e4:	2303      	movs	r3, #3
 80009e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009e8:	2307      	movs	r3, #7
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	4619      	mov	r1, r3
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <HAL_UART_MspInit+0x8c>)
 80009f4:	f001 feb6 	bl	8002764 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009f8:	bf00      	nop
 80009fa:	3728      	adds	r7, #40	; 0x28
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40004800 	.word	0x40004800
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40020c00 	.word	0x40020c00

08000a0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08c      	sub	sp, #48	; 0x30
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	6879      	ldr	r1, [r7, #4]
 8000a20:	202d      	movs	r0, #45	; 0x2d
 8000a22:	f000 fccf 	bl	80013c4 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000a26:	202d      	movs	r0, #45	; 0x2d
 8000a28:	f000 fce8 	bl	80013fc <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <HAL_InitTick+0xa4>)
 8000a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a34:	4a1e      	ldr	r2, [pc, #120]	; (8000ab0 <HAL_InitTick+0xa4>)
 8000a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3c:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <HAL_InitTick+0xa4>)
 8000a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a48:	f107 0210 	add.w	r2, r7, #16
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	4611      	mov	r1, r2
 8000a52:	4618      	mov	r0, r3
 8000a54:	f002 fcd8 	bl	8003408 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a58:	f002 fcae 	bl	80033b8 <HAL_RCC_GetPCLK1Freq>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a64:	4a13      	ldr	r2, [pc, #76]	; (8000ab4 <HAL_InitTick+0xa8>)
 8000a66:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6a:	0c9b      	lsrs	r3, r3, #18
 8000a6c:	3b01      	subs	r3, #1
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <HAL_InitTick+0xac>)
 8000a72:	4a12      	ldr	r2, [pc, #72]	; (8000abc <HAL_InitTick+0xb0>)
 8000a74:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <HAL_InitTick+0xac>)
 8000a78:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a7c:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000a7e:	4a0e      	ldr	r2, [pc, #56]	; (8000ab8 <HAL_InitTick+0xac>)
 8000a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a82:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <HAL_InitTick+0xac>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <HAL_InitTick+0xac>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8000a90:	4809      	ldr	r0, [pc, #36]	; (8000ab8 <HAL_InitTick+0xac>)
 8000a92:	f002 fceb 	bl	800346c <HAL_TIM_Base_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d104      	bne.n	8000aa6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8000a9c:	4806      	ldr	r0, [pc, #24]	; (8000ab8 <HAL_InitTick+0xac>)
 8000a9e:	f002 fd3f 	bl	8003520 <HAL_TIM_Base_Start_IT>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	e000      	b.n	8000aa8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3730      	adds	r7, #48	; 0x30
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	431bde83 	.word	0x431bde83
 8000ab8:	200086e4 	.word	0x200086e4
 8000abc:	40002000 	.word	0x40002000

08000ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <NMI_Handler+0x4>

08000ac6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aca:	e7fe      	b.n	8000aca <HardFault_Handler+0x4>

08000acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <MemManage_Handler+0x4>

08000ad2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <BusFault_Handler+0x4>

08000ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <UsageFault_Handler+0x4>

08000ade <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000af0:	4802      	ldr	r0, [pc, #8]	; (8000afc <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000af2:	f002 fd85 	bl	8003600 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	200086e4 	.word	0x200086e4

08000b00 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000b04:	4802      	ldr	r0, [pc, #8]	; (8000b10 <ETH_IRQHandler+0x10>)
 8000b06:	f001 f86b 	bl	8001be0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	2000a04c 	.word	0x2000a04c

08000b14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
	return 1;
 8000b18:	2301      	movs	r3, #1
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <_kill>:

int _kill(int pid, int sig)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000b2e:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <_kill+0x20>)
 8000b30:	2216      	movs	r2, #22
 8000b32:	601a      	str	r2, [r3, #0]
	return -1;
 8000b34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	2000f020 	.word	0x2000f020

08000b48 <_exit>:

void _exit (int status)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000b50:	f04f 31ff 	mov.w	r1, #4294967295
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f7ff ffe5 	bl	8000b24 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000b5a:	e7fe      	b.n	8000b5a <_exit+0x12>

08000b5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	e00a      	b.n	8000b84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b6e:	f3af 8000 	nop.w
 8000b72:	4601      	mov	r1, r0
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	1c5a      	adds	r2, r3, #1
 8000b78:	60ba      	str	r2, [r7, #8]
 8000b7a:	b2ca      	uxtb	r2, r1
 8000b7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	3301      	adds	r3, #1
 8000b82:	617b      	str	r3, [r7, #20]
 8000b84:	697a      	ldr	r2, [r7, #20]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	dbf0      	blt.n	8000b6e <_read+0x12>
	}

return len;
 8000b8c:	687b      	ldr	r3, [r7, #4]
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3718      	adds	r7, #24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b086      	sub	sp, #24
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	60f8      	str	r0, [r7, #12]
 8000b9e:	60b9      	str	r1, [r7, #8]
 8000ba0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
 8000ba6:	e009      	b.n	8000bbc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	1c5a      	adds	r2, r3, #1
 8000bac:	60ba      	str	r2, [r7, #8]
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	617b      	str	r3, [r7, #20]
 8000bbc:	697a      	ldr	r2, [r7, #20]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	dbf1      	blt.n	8000ba8 <_write+0x12>
	}
	return len;
 8000bc4:	687b      	ldr	r3, [r7, #4]
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3718      	adds	r7, #24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <_close>:

int _close(int file)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b083      	sub	sp, #12
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
	return -1;
 8000bd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000be6:	b480      	push	{r7}
 8000be8:	b083      	sub	sp, #12
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
 8000bee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bf6:	605a      	str	r2, [r3, #4]
	return 0;
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr

08000c06 <_isatty>:

int _isatty(int file)
{
 8000c06:	b480      	push	{r7}
 8000c08:	b083      	sub	sp, #12
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
	return 1;
 8000c0e:	2301      	movs	r3, #1
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
	return 0;
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3714      	adds	r7, #20
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
	...

08000c38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b087      	sub	sp, #28
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c40:	4a14      	ldr	r2, [pc, #80]	; (8000c94 <_sbrk+0x5c>)
 8000c42:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <_sbrk+0x60>)
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c4c:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <_sbrk+0x64>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d102      	bne.n	8000c5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c54:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <_sbrk+0x64>)
 8000c56:	4a12      	ldr	r2, [pc, #72]	; (8000ca0 <_sbrk+0x68>)
 8000c58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c5a:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <_sbrk+0x64>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d205      	bcs.n	8000c74 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000c68:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <_sbrk+0x6c>)
 8000c6a:	220c      	movs	r2, #12
 8000c6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c72:	e009      	b.n	8000c88 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c74:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <_sbrk+0x64>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c7a:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <_sbrk+0x64>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4413      	add	r3, r2
 8000c82:	4a06      	ldr	r2, [pc, #24]	; (8000c9c <_sbrk+0x64>)
 8000c84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c86:	68fb      	ldr	r3, [r7, #12]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	371c      	adds	r7, #28
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	20030000 	.word	0x20030000
 8000c98:	00000400 	.word	0x00000400
 8000c9c:	20000354 	.word	0x20000354
 8000ca0:	2000f038 	.word	0x2000f038
 8000ca4:	2000f020 	.word	0x2000f020

08000ca8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <SystemInit+0x20>)
 8000cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cb2:	4a05      	ldr	r2, [pc, #20]	; (8000cc8 <SystemInit+0x20>)
 8000cb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <tcpecho_thread>:



/*-----------------------------------------------------------------------------------*/
static void tcpecho_thread(void *arg)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08a      	sub	sp, #40	; 0x28
 8000cd0:	af02      	add	r7, sp, #8
 8000cd2:	6078      	str	r0, [r7, #4]
  u16_t len;
      
  LWIP_UNUSED_ARG(arg);

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	2010      	movs	r0, #16
 8000cda:	f006 fd45 	bl	8007768 <netconn_new_with_proto_and_callback>
 8000cde:	61f8      	str	r0, [r7, #28]
  
  if (conn!=NULL)
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d04e      	beq.n	8000d84 <tcpecho_thread+0xb8>
  {  
    /* Bind connection to well known port number 7. */
    err = netconn_bind(conn, NULL, 7);
 8000ce6:	2207      	movs	r2, #7
 8000ce8:	2100      	movs	r1, #0
 8000cea:	69f8      	ldr	r0, [r7, #28]
 8000cec:	f006 fdf6 	bl	80078dc <netconn_bind>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	76fb      	strb	r3, [r7, #27]
    
    if (err == ERR_OK)
 8000cf4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d13f      	bne.n	8000d7c <tcpecho_thread+0xb0>
    {
      /* Tell connection to go into listening mode. */
      netconn_listen(conn);
 8000cfc:	21ff      	movs	r1, #255	; 0xff
 8000cfe:	69f8      	ldr	r0, [r7, #28]
 8000d00:	f006 fe24 	bl	800794c <netconn_listen_with_backlog>
    
      while (1) 
      {
        /* Grab new connection. */
         accept_err = netconn_accept(conn, &newconn);
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	4619      	mov	r1, r3
 8000d0a:	69f8      	ldr	r0, [r7, #28]
 8000d0c:	f006 fe4a 	bl	80079a4 <netconn_accept>
 8000d10:	4603      	mov	r3, r0
 8000d12:	76bb      	strb	r3, [r7, #26]
    
        /* Process the new connection. */
        if (accept_err == ERR_OK) 
 8000d14:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d1f3      	bne.n	8000d04 <tcpecho_thread+0x38>
        {

          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000d1c:	e01b      	b.n	8000d56 <tcpecho_thread+0x8a>
          {
            do 
            {
              netbuf_data(buf, &data, &len);
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	f107 020a 	add.w	r2, r7, #10
 8000d24:	f107 010c 	add.w	r1, r7, #12
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f008 fdd9 	bl	80098e0 <netbuf_data>
              netconn_write(newconn, data, len, NETCONN_COPY);
 8000d2e:	6978      	ldr	r0, [r7, #20]
 8000d30:	68f9      	ldr	r1, [r7, #12]
 8000d32:	897b      	ldrh	r3, [r7, #10]
 8000d34:	461a      	mov	r2, r3
 8000d36:	2300      	movs	r3, #0
 8000d38:	9300      	str	r3, [sp, #0]
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	f007 f8b4 	bl	8007ea8 <netconn_write_partly>
          
            } 
            while (netbuf_next(buf) >= 0);
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f008 fe16 	bl	8009974 <netbuf_next>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	dae7      	bge.n	8000d1e <tcpecho_thread+0x52>
          
            netbuf_delete(buf);
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f008 fda5 	bl	80098a0 <netbuf_delete>
          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	f107 0210 	add.w	r2, r7, #16
 8000d5c:	4611      	mov	r1, r2
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f007 f828 	bl	8007db4 <netconn_recv>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d0d9      	beq.n	8000d1e <tcpecho_thread+0x52>
          }
        
          /* Close connection and discard connection identifier. */
          netconn_close(newconn);
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f007 f99d 	bl	80080ac <netconn_close>
          netconn_delete(newconn);
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f006 fd95 	bl	80078a4 <netconn_delete>
         accept_err = netconn_accept(conn, &newconn);
 8000d7a:	e7c3      	b.n	8000d04 <tcpecho_thread+0x38>
        }
      }
    }
    else
    {
      netconn_delete(newconn);
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f006 fd90 	bl	80078a4 <netconn_delete>
    }
  }
}
 8000d84:	bf00      	nop
 8000d86:	3720      	adds	r7, #32
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <tcpecho_init>:
/*-----------------------------------------------------------------------------------*/

void tcpecho_init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af02      	add	r7, sp, #8
  sys_thread_new("tcpecho_thread", tcpecho_thread, NULL, DEFAULT_THREAD_STACKSIZE, TCPECHO_THREAD_PRIO);
 8000d92:	2304      	movs	r3, #4
 8000d94:	9300      	str	r3, [sp, #0]
 8000d96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	4903      	ldr	r1, [pc, #12]	; (8000dac <tcpecho_init+0x20>)
 8000d9e:	4804      	ldr	r0, [pc, #16]	; (8000db0 <tcpecho_init+0x24>)
 8000da0:	f016 f808 	bl	8016db4 <sys_thread_new>
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	08000ccd 	.word	0x08000ccd
 8000db0:	0801851c 	.word	0x0801851c

08000db4 <telnet_process_command>:
#define TELNET_THREAD_PRIO  ( tskIDLE_PRIORITY + 4 )
#define CMD_BUFFER_LEN	64
//funkce ktera provede parsovani a vykonani povelu
//printf() nejde, musi se pouzit vypisovani pomoci sprintf()
//do textoveho retezce a ten nasledne odeslat pomoci netconn volani
static void telnet_process_command(char *cmd, struct netconn *conn) {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b096      	sub	sp, #88	; 0x58
 8000db8:	af02      	add	r7, sp, #8
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
	char s[64];  // alokovany buffer
	char *saveptr;

	sprintf(s, "PRIJATO: %s\n", cmd);  //retezec povelu co je prijato
 8000dbe:	f107 030c 	add.w	r3, r7, #12
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	4970      	ldr	r1, [pc, #448]	; (8000f88 <telnet_process_command+0x1d4>)
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f016 fb36 	bl	8017438 <siprintf>

	netconn_write(conn, s, strlen(s), NETCONN_COPY); //odeslani retezce
 8000dcc:	f107 030c 	add.w	r3, r7, #12
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff fa0d 	bl	80001f0 <strlen>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	f107 010c 	add.w	r1, r7, #12
 8000ddc:	2300      	movs	r3, #0
 8000dde:	9300      	str	r3, [sp, #0]
 8000de0:	2301      	movs	r3, #1
 8000de2:	6838      	ldr	r0, [r7, #0]
 8000de4:	f007 f860 	bl	8007ea8 <netconn_write_partly>

	char *token;
	token = strtok_r(cmd, " ", &saveptr);
 8000de8:	f107 0308 	add.w	r3, r7, #8
 8000dec:	461a      	mov	r2, r3
 8000dee:	4967      	ldr	r1, [pc, #412]	; (8000f8c <telnet_process_command+0x1d8>)
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f016 fbc9 	bl	8017588 <strtok_r>
 8000df6:	64f8      	str	r0, [r7, #76]	; 0x4c

	if (strcasecmp(token, "HELLO") == 0)  //overeni komunikace
 8000df8:	4965      	ldr	r1, [pc, #404]	; (8000f90 <telnet_process_command+0x1dc>)
 8000dfa:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000dfc:	f016 fb80 	bl	8017500 <strcasecmp>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d103      	bne.n	8000e0e <telnet_process_command+0x5a>
			{
		printf("Komunikace OK\n");
 8000e06:	4863      	ldr	r0, [pc, #396]	; (8000f94 <telnet_process_command+0x1e0>)
 8000e08:	f016 fa54 	bl	80172b4 <puts>
		if (HAL_GPIO_ReadPin(LD3_GPIO_Port, LD3_Pin))
			printf("LED3 ON\n");
		else
			printf("LED3 OFF\n");
	}
}
 8000e0c:	e0b7      	b.n	8000f7e <telnet_process_command+0x1ca>
	} else if (strcasecmp(token, "LED1") == 0)  //prace s LED1
 8000e0e:	4962      	ldr	r1, [pc, #392]	; (8000f98 <telnet_process_command+0x1e4>)
 8000e10:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000e12:	f016 fb75 	bl	8017500 <strcasecmp>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d124      	bne.n	8000e66 <telnet_process_command+0xb2>
		token = strtok_r(NULL, " ", &saveptr);
 8000e1c:	f107 0308 	add.w	r3, r7, #8
 8000e20:	461a      	mov	r2, r3
 8000e22:	495a      	ldr	r1, [pc, #360]	; (8000f8c <telnet_process_command+0x1d8>)
 8000e24:	2000      	movs	r0, #0
 8000e26:	f016 fbaf 	bl	8017588 <strtok_r>
 8000e2a:	64f8      	str	r0, [r7, #76]	; 0x4c
		if (strcasecmp(token, "ON") == 0)
 8000e2c:	495b      	ldr	r1, [pc, #364]	; (8000f9c <telnet_process_command+0x1e8>)
 8000e2e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000e30:	f016 fb66 	bl	8017500 <strcasecmp>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d105      	bne.n	8000e46 <telnet_process_command+0x92>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	4858      	ldr	r0, [pc, #352]	; (8000fa0 <telnet_process_command+0x1ec>)
 8000e40:	f001 fe54 	bl	8002aec <HAL_GPIO_WritePin>
 8000e44:	e00b      	b.n	8000e5e <telnet_process_command+0xaa>
		else if (strcasecmp(token, "OFF") == 0)
 8000e46:	4957      	ldr	r1, [pc, #348]	; (8000fa4 <telnet_process_command+0x1f0>)
 8000e48:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000e4a:	f016 fb59 	bl	8017500 <strcasecmp>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d104      	bne.n	8000e5e <telnet_process_command+0xaa>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2101      	movs	r1, #1
 8000e58:	4851      	ldr	r0, [pc, #324]	; (8000fa0 <telnet_process_command+0x1ec>)
 8000e5a:	f001 fe47 	bl	8002aec <HAL_GPIO_WritePin>
		printf("OK\n");
 8000e5e:	4852      	ldr	r0, [pc, #328]	; (8000fa8 <telnet_process_command+0x1f4>)
 8000e60:	f016 fa28 	bl	80172b4 <puts>
}
 8000e64:	e08b      	b.n	8000f7e <telnet_process_command+0x1ca>
	} else if (strcasecmp(token, "LED2") == 0)  //ovladani LED2
 8000e66:	4951      	ldr	r1, [pc, #324]	; (8000fac <telnet_process_command+0x1f8>)
 8000e68:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000e6a:	f016 fb49 	bl	8017500 <strcasecmp>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d124      	bne.n	8000ebe <telnet_process_command+0x10a>
		token = strtok_r(NULL, " ", &saveptr);
 8000e74:	f107 0308 	add.w	r3, r7, #8
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4944      	ldr	r1, [pc, #272]	; (8000f8c <telnet_process_command+0x1d8>)
 8000e7c:	2000      	movs	r0, #0
 8000e7e:	f016 fb83 	bl	8017588 <strtok_r>
 8000e82:	64f8      	str	r0, [r7, #76]	; 0x4c
		if (strcasecmp(token, "ON") == 0)
 8000e84:	4945      	ldr	r1, [pc, #276]	; (8000f9c <telnet_process_command+0x1e8>)
 8000e86:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000e88:	f016 fb3a 	bl	8017500 <strcasecmp>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d105      	bne.n	8000e9e <telnet_process_command+0xea>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000e92:	2201      	movs	r2, #1
 8000e94:	2180      	movs	r1, #128	; 0x80
 8000e96:	4842      	ldr	r0, [pc, #264]	; (8000fa0 <telnet_process_command+0x1ec>)
 8000e98:	f001 fe28 	bl	8002aec <HAL_GPIO_WritePin>
 8000e9c:	e00b      	b.n	8000eb6 <telnet_process_command+0x102>
		else if (strcasecmp(token, "OFF") == 0)
 8000e9e:	4941      	ldr	r1, [pc, #260]	; (8000fa4 <telnet_process_command+0x1f0>)
 8000ea0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000ea2:	f016 fb2d 	bl	8017500 <strcasecmp>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d104      	bne.n	8000eb6 <telnet_process_command+0x102>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2180      	movs	r1, #128	; 0x80
 8000eb0:	483b      	ldr	r0, [pc, #236]	; (8000fa0 <telnet_process_command+0x1ec>)
 8000eb2:	f001 fe1b 	bl	8002aec <HAL_GPIO_WritePin>
		printf("OK\n");
 8000eb6:	483c      	ldr	r0, [pc, #240]	; (8000fa8 <telnet_process_command+0x1f4>)
 8000eb8:	f016 f9fc 	bl	80172b4 <puts>
}
 8000ebc:	e05f      	b.n	8000f7e <telnet_process_command+0x1ca>
	} else if (strcasecmp(token, "LED3") == 0)  // ovladani LED3
 8000ebe:	493c      	ldr	r1, [pc, #240]	; (8000fb0 <telnet_process_command+0x1fc>)
 8000ec0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000ec2:	f016 fb1d 	bl	8017500 <strcasecmp>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d126      	bne.n	8000f1a <telnet_process_command+0x166>
		token = strtok_r(NULL, " ", &saveptr);
 8000ecc:	f107 0308 	add.w	r3, r7, #8
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	492e      	ldr	r1, [pc, #184]	; (8000f8c <telnet_process_command+0x1d8>)
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	f016 fb57 	bl	8017588 <strtok_r>
 8000eda:	64f8      	str	r0, [r7, #76]	; 0x4c
		if (strcasecmp(token, "ON") == 0)
 8000edc:	492f      	ldr	r1, [pc, #188]	; (8000f9c <telnet_process_command+0x1e8>)
 8000ede:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000ee0:	f016 fb0e 	bl	8017500 <strcasecmp>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d106      	bne.n	8000ef8 <telnet_process_command+0x144>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ef0:	482b      	ldr	r0, [pc, #172]	; (8000fa0 <telnet_process_command+0x1ec>)
 8000ef2:	f001 fdfb 	bl	8002aec <HAL_GPIO_WritePin>
 8000ef6:	e00c      	b.n	8000f12 <telnet_process_command+0x15e>
		else if (strcasecmp(token, "OFF") == 0)
 8000ef8:	492a      	ldr	r1, [pc, #168]	; (8000fa4 <telnet_process_command+0x1f0>)
 8000efa:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000efc:	f016 fb00 	bl	8017500 <strcasecmp>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d105      	bne.n	8000f12 <telnet_process_command+0x15e>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000f06:	2200      	movs	r2, #0
 8000f08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f0c:	4824      	ldr	r0, [pc, #144]	; (8000fa0 <telnet_process_command+0x1ec>)
 8000f0e:	f001 fded 	bl	8002aec <HAL_GPIO_WritePin>
		printf("OK\n");
 8000f12:	4825      	ldr	r0, [pc, #148]	; (8000fa8 <telnet_process_command+0x1f4>)
 8000f14:	f016 f9ce 	bl	80172b4 <puts>
}
 8000f18:	e031      	b.n	8000f7e <telnet_process_command+0x1ca>
	} else if (strcasecmp(token, "STATUS") == 0)  //vygenerovani status LED
 8000f1a:	4926      	ldr	r1, [pc, #152]	; (8000fb4 <telnet_process_command+0x200>)
 8000f1c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000f1e:	f016 faef 	bl	8017500 <strcasecmp>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d12a      	bne.n	8000f7e <telnet_process_command+0x1ca>
		if (HAL_GPIO_ReadPin(LD1_GPIO_Port, LD1_Pin))
 8000f28:	2101      	movs	r1, #1
 8000f2a:	481d      	ldr	r0, [pc, #116]	; (8000fa0 <telnet_process_command+0x1ec>)
 8000f2c:	f001 fdc6 	bl	8002abc <HAL_GPIO_ReadPin>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d003      	beq.n	8000f3e <telnet_process_command+0x18a>
			printf("LED1 ON; ");
 8000f36:	4820      	ldr	r0, [pc, #128]	; (8000fb8 <telnet_process_command+0x204>)
 8000f38:	f016 f936 	bl	80171a8 <iprintf>
 8000f3c:	e002      	b.n	8000f44 <telnet_process_command+0x190>
			printf("LED1 OFF; ");
 8000f3e:	481f      	ldr	r0, [pc, #124]	; (8000fbc <telnet_process_command+0x208>)
 8000f40:	f016 f932 	bl	80171a8 <iprintf>
		if (HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin))
 8000f44:	2180      	movs	r1, #128	; 0x80
 8000f46:	4816      	ldr	r0, [pc, #88]	; (8000fa0 <telnet_process_command+0x1ec>)
 8000f48:	f001 fdb8 	bl	8002abc <HAL_GPIO_ReadPin>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d003      	beq.n	8000f5a <telnet_process_command+0x1a6>
			printf("LED2 ON\n");
 8000f52:	481b      	ldr	r0, [pc, #108]	; (8000fc0 <telnet_process_command+0x20c>)
 8000f54:	f016 f9ae 	bl	80172b4 <puts>
 8000f58:	e002      	b.n	8000f60 <telnet_process_command+0x1ac>
			printf("LED2 OFF\n");
 8000f5a:	481a      	ldr	r0, [pc, #104]	; (8000fc4 <telnet_process_command+0x210>)
 8000f5c:	f016 f9aa 	bl	80172b4 <puts>
		if (HAL_GPIO_ReadPin(LD3_GPIO_Port, LD3_Pin))
 8000f60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f64:	480e      	ldr	r0, [pc, #56]	; (8000fa0 <telnet_process_command+0x1ec>)
 8000f66:	f001 fda9 	bl	8002abc <HAL_GPIO_ReadPin>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d003      	beq.n	8000f78 <telnet_process_command+0x1c4>
			printf("LED3 ON\n");
 8000f70:	4815      	ldr	r0, [pc, #84]	; (8000fc8 <telnet_process_command+0x214>)
 8000f72:	f016 f99f 	bl	80172b4 <puts>
}
 8000f76:	e002      	b.n	8000f7e <telnet_process_command+0x1ca>
			printf("LED3 OFF\n");
 8000f78:	4814      	ldr	r0, [pc, #80]	; (8000fcc <telnet_process_command+0x218>)
 8000f7a:	f016 f99b 	bl	80172b4 <puts>
}
 8000f7e:	bf00      	nop
 8000f80:	3750      	adds	r7, #80	; 0x50
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	0801852c 	.word	0x0801852c
 8000f8c:	0801853c 	.word	0x0801853c
 8000f90:	08018540 	.word	0x08018540
 8000f94:	08018548 	.word	0x08018548
 8000f98:	08018558 	.word	0x08018558
 8000f9c:	08018560 	.word	0x08018560
 8000fa0:	40020400 	.word	0x40020400
 8000fa4:	08018564 	.word	0x08018564
 8000fa8:	08018568 	.word	0x08018568
 8000fac:	0801856c 	.word	0x0801856c
 8000fb0:	08018574 	.word	0x08018574
 8000fb4:	0801857c 	.word	0x0801857c
 8000fb8:	08018584 	.word	0x08018584
 8000fbc:	08018590 	.word	0x08018590
 8000fc0:	0801859c 	.word	0x0801859c
 8000fc4:	080185a4 	.word	0x080185a4
 8000fc8:	080185b0 	.word	0x080185b0
 8000fcc:	080185b8 	.word	0x080185b8

08000fd0 <telnet_byte_available>:

//tato funkce bude reagovat na jednotlive prijate bajty a skladat je do pole
static void telnet_byte_available(uint8_t c, struct netconn *conn) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	6039      	str	r1, [r7, #0]
 8000fda:	71fb      	strb	r3, [r7, #7]
	static uint16_t cnt;
	static char data[CMD_BUFFER_LEN];

	if (cnt < CMD_BUFFER_LEN && c >= 32 && c <= 127)
 8000fdc:	4b15      	ldr	r3, [pc, #84]	; (8001034 <telnet_byte_available+0x64>)
 8000fde:	881b      	ldrh	r3, [r3, #0]
 8000fe0:	2b3f      	cmp	r3, #63	; 0x3f
 8000fe2:	d810      	bhi.n	8001006 <telnet_byte_available+0x36>
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	2b1f      	cmp	r3, #31
 8000fe8:	d90d      	bls.n	8001006 <telnet_byte_available+0x36>
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	db09      	blt.n	8001006 <telnet_byte_available+0x36>
		data[cnt++] = c;
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <telnet_byte_available+0x64>)
 8000ff4:	881b      	ldrh	r3, [r3, #0]
 8000ff6:	1c5a      	adds	r2, r3, #1
 8000ff8:	b291      	uxth	r1, r2
 8000ffa:	4a0e      	ldr	r2, [pc, #56]	; (8001034 <telnet_byte_available+0x64>)
 8000ffc:	8011      	strh	r1, [r2, #0]
 8000ffe:	4619      	mov	r1, r3
 8001000:	4a0d      	ldr	r2, [pc, #52]	; (8001038 <telnet_byte_available+0x68>)
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	5453      	strb	r3, [r2, r1]
	if (c == '\n' || c == '\r') {
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	2b0a      	cmp	r3, #10
 800100a:	d002      	beq.n	8001012 <telnet_byte_available+0x42>
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	2b0d      	cmp	r3, #13
 8001010:	d10c      	bne.n	800102c <telnet_byte_available+0x5c>
		data[cnt] = '\0';
 8001012:	4b08      	ldr	r3, [pc, #32]	; (8001034 <telnet_byte_available+0x64>)
 8001014:	881b      	ldrh	r3, [r3, #0]
 8001016:	461a      	mov	r2, r3
 8001018:	4b07      	ldr	r3, [pc, #28]	; (8001038 <telnet_byte_available+0x68>)
 800101a:	2100      	movs	r1, #0
 800101c:	5499      	strb	r1, [r3, r2]
		telnet_process_command(data, conn);  //zmacknuty enter vola se funkce
 800101e:	6839      	ldr	r1, [r7, #0]
 8001020:	4805      	ldr	r0, [pc, #20]	; (8001038 <telnet_byte_available+0x68>)
 8001022:	f7ff fec7 	bl	8000db4 <telnet_process_command>
		cnt = 0;
 8001026:	4b03      	ldr	r3, [pc, #12]	; (8001034 <telnet_byte_available+0x64>)
 8001028:	2200      	movs	r2, #0
 800102a:	801a      	strh	r2, [r3, #0]
	}
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000358 	.word	0x20000358
 8001038:	2000035c 	.word	0x2000035c

0800103c <telnet_thread>:

/*-----------------------------------------------------------------------------------*/
static void telnet_thread(void *arg) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
	u16_t len;

	LWIP_UNUSED_ARG(arg);

	/* Create a new connection identifier. */
	conn = netconn_new(NETCONN_TCP);
 8001044:	2200      	movs	r2, #0
 8001046:	2100      	movs	r1, #0
 8001048:	2010      	movs	r0, #16
 800104a:	f006 fb8d 	bl	8007768 <netconn_new_with_proto_and_callback>
 800104e:	61f8      	str	r0, [r7, #28]

	if (conn != NULL) {
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d055      	beq.n	8001102 <telnet_thread+0xc6>
		/* Bind connection to well known port number 23. */
		err = netconn_bind(conn, NULL, 23);
 8001056:	2217      	movs	r2, #23
 8001058:	2100      	movs	r1, #0
 800105a:	69f8      	ldr	r0, [r7, #28]
 800105c:	f006 fc3e 	bl	80078dc <netconn_bind>
 8001060:	4603      	mov	r3, r0
 8001062:	76fb      	strb	r3, [r7, #27]

		if (err == ERR_OK) {
 8001064:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d146      	bne.n	80010fa <telnet_thread+0xbe>
			/* Tell connection to go into listening mode. */
			netconn_listen(conn);
 800106c:	21ff      	movs	r1, #255	; 0xff
 800106e:	69f8      	ldr	r0, [r7, #28]
 8001070:	f006 fc6c 	bl	800794c <netconn_listen_with_backlog>

			while (1) {
				/* Grab new connection. */
				accept_err = netconn_accept(conn, &newconn);
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	4619      	mov	r1, r3
 800107a:	69f8      	ldr	r0, [r7, #28]
 800107c:	f006 fc92 	bl	80079a4 <netconn_accept>
 8001080:	4603      	mov	r3, r0
 8001082:	76bb      	strb	r3, [r7, #26]

				/* Process the new connection. */
				if (accept_err == ERR_OK) {
 8001084:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1f3      	bne.n	8001074 <telnet_thread+0x38>

					while (netconn_recv(newconn, &buf) == ERR_OK) {
 800108c:	e022      	b.n	80010d4 <telnet_thread+0x98>
						do {
							//budeme prijimat data typu uint8_t *data
							netbuf_data(buf, &data, &len);
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	f107 020a 	add.w	r2, r7, #10
 8001094:	f107 010c 	add.w	r1, r7, #12
 8001098:	4618      	mov	r0, r3
 800109a:	f008 fc21 	bl	80098e0 <netbuf_data>
							while (len--)
 800109e:	e008      	b.n	80010b2 <telnet_thread+0x76>
								telnet_byte_available(*data++, newconn);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	1c5a      	adds	r2, r3, #1
 80010a4:	60fa      	str	r2, [r7, #12]
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	697a      	ldr	r2, [r7, #20]
 80010aa:	4611      	mov	r1, r2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ff8f 	bl	8000fd0 <telnet_byte_available>
							while (len--)
 80010b2:	897b      	ldrh	r3, [r7, #10]
 80010b4:	1e5a      	subs	r2, r3, #1
 80010b6:	b292      	uxth	r2, r2
 80010b8:	817a      	strh	r2, [r7, #10]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1f0      	bne.n	80010a0 <telnet_thread+0x64>

						} while (netbuf_next(buf) >= 0);
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f008 fc57 	bl	8009974 <netbuf_next>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	dae0      	bge.n	800108e <telnet_thread+0x52>

						netbuf_delete(buf);
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f008 fbe6 	bl	80098a0 <netbuf_delete>
					while (netconn_recv(newconn, &buf) == ERR_OK) {
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	f107 0210 	add.w	r2, r7, #16
 80010da:	4611      	mov	r1, r2
 80010dc:	4618      	mov	r0, r3
 80010de:	f006 fe69 	bl	8007db4 <netconn_recv>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d0d2      	beq.n	800108e <telnet_thread+0x52>
					}

					/* Close connection and discard connection identifier. */
					netconn_close(newconn);
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f006 ffde 	bl	80080ac <netconn_close>
					netconn_delete(newconn);
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f006 fbd6 	bl	80078a4 <netconn_delete>
				accept_err = netconn_accept(conn, &newconn);
 80010f8:	e7bc      	b.n	8001074 <telnet_thread+0x38>
				}
			}
		} else {
			netconn_delete(newconn);
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f006 fbd1 	bl	80078a4 <netconn_delete>
		}
	}
}
 8001102:	bf00      	nop
 8001104:	3720      	adds	r7, #32
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <telnet_init>:
/*-----------------------------------------------------------------------------------*/

void telnet_init(void) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af02      	add	r7, sp, #8
	sys_thread_new("telnet_thread", telnet_thread, NULL,
 8001112:	2304      	movs	r3, #4
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800111a:	2200      	movs	r2, #0
 800111c:	4903      	ldr	r1, [pc, #12]	; (800112c <telnet_init+0x20>)
 800111e:	4804      	ldr	r0, [pc, #16]	; (8001130 <telnet_init+0x24>)
 8001120:	f015 fe48 	bl	8016db4 <sys_thread_new>
			DEFAULT_THREAD_STACKSIZE, TELNET_THREAD_PRIO);
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	0800103d 	.word	0x0800103d
 8001130:	080185c4 	.word	0x080185c4

08001134 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001134:	f8df d034 	ldr.w	sp, [pc, #52]	; 800116c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001138:	480d      	ldr	r0, [pc, #52]	; (8001170 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800113a:	490e      	ldr	r1, [pc, #56]	; (8001174 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800113c:	4a0e      	ldr	r2, [pc, #56]	; (8001178 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001140:	e002      	b.n	8001148 <LoopCopyDataInit>

08001142 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001142:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001144:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001146:	3304      	adds	r3, #4

08001148 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001148:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800114a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800114c:	d3f9      	bcc.n	8001142 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114e:	4a0b      	ldr	r2, [pc, #44]	; (800117c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001150:	4c0b      	ldr	r4, [pc, #44]	; (8001180 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001152:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001154:	e001      	b.n	800115a <LoopFillZerobss>

08001156 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001156:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001158:	3204      	adds	r2, #4

0800115a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800115a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800115c:	d3fb      	bcc.n	8001156 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800115e:	f7ff fda3 	bl	8000ca8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001162:	f015 ff61 	bl	8017028 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001166:	f7ff fa31 	bl	80005cc <main>
  bx  lr    
 800116a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800116c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001170:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001174:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001178:	0801c2a4 	.word	0x0801c2a4
  ldr r2, =_sbss
 800117c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001180:	2000f034 	.word	0x2000f034

08001184 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001184:	e7fe      	b.n	8001184 <ADC_IRQHandler>
	...

08001188 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800118c:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <HAL_Init+0x40>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a0d      	ldr	r2, [pc, #52]	; (80011c8 <HAL_Init+0x40>)
 8001192:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001196:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001198:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <HAL_Init+0x40>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a0a      	ldr	r2, [pc, #40]	; (80011c8 <HAL_Init+0x40>)
 800119e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011a4:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <HAL_Init+0x40>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a07      	ldr	r2, [pc, #28]	; (80011c8 <HAL_Init+0x40>)
 80011aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b0:	2003      	movs	r0, #3
 80011b2:	f000 f8fc 	bl	80013ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011b6:	200f      	movs	r0, #15
 80011b8:	f7ff fc28 	bl	8000a0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011bc:	f7ff fbb2 	bl	8000924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40023c00 	.word	0x40023c00

080011cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_IncTick+0x20>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	461a      	mov	r2, r3
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HAL_IncTick+0x24>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4413      	add	r3, r2
 80011dc:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <HAL_IncTick+0x24>)
 80011de:	6013      	str	r3, [r2, #0]
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	20000008 	.word	0x20000008
 80011f0:	2000872c 	.word	0x2000872c

080011f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  return uwTick;
 80011f8:	4b03      	ldr	r3, [pc, #12]	; (8001208 <HAL_GetTick+0x14>)
 80011fa:	681b      	ldr	r3, [r3, #0]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	2000872c 	.word	0x2000872c

0800120c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001214:	f7ff ffee 	bl	80011f4 <HAL_GetTick>
 8001218:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001224:	d005      	beq.n	8001232 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001226:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <HAL_Delay+0x44>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	461a      	mov	r2, r3
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4413      	add	r3, r2
 8001230:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001232:	bf00      	nop
 8001234:	f7ff ffde 	bl	80011f4 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	68fa      	ldr	r2, [r7, #12]
 8001240:	429a      	cmp	r2, r3
 8001242:	d8f7      	bhi.n	8001234 <HAL_Delay+0x28>
  {
  }
}
 8001244:	bf00      	nop
 8001246:	bf00      	nop
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000008 	.word	0x20000008

08001254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001264:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <__NVIC_SetPriorityGrouping+0x44>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800126a:	68ba      	ldr	r2, [r7, #8]
 800126c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001270:	4013      	ands	r3, r2
 8001272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800127c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001286:	4a04      	ldr	r2, [pc, #16]	; (8001298 <__NVIC_SetPriorityGrouping+0x44>)
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	60d3      	str	r3, [r2, #12]
}
 800128c:	bf00      	nop
 800128e:	3714      	adds	r7, #20
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a0:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <__NVIC_GetPriorityGrouping+0x18>)
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	0a1b      	lsrs	r3, r3, #8
 80012a6:	f003 0307 	and.w	r3, r3, #7
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	db0b      	blt.n	80012e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	f003 021f 	and.w	r2, r3, #31
 80012d0:	4907      	ldr	r1, [pc, #28]	; (80012f0 <__NVIC_EnableIRQ+0x38>)
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	095b      	lsrs	r3, r3, #5
 80012d8:	2001      	movs	r0, #1
 80012da:	fa00 f202 	lsl.w	r2, r0, r2
 80012de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	e000e100 	.word	0xe000e100

080012f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	6039      	str	r1, [r7, #0]
 80012fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001304:	2b00      	cmp	r3, #0
 8001306:	db0a      	blt.n	800131e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	b2da      	uxtb	r2, r3
 800130c:	490c      	ldr	r1, [pc, #48]	; (8001340 <__NVIC_SetPriority+0x4c>)
 800130e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001312:	0112      	lsls	r2, r2, #4
 8001314:	b2d2      	uxtb	r2, r2
 8001316:	440b      	add	r3, r1
 8001318:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800131c:	e00a      	b.n	8001334 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	b2da      	uxtb	r2, r3
 8001322:	4908      	ldr	r1, [pc, #32]	; (8001344 <__NVIC_SetPriority+0x50>)
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	f003 030f 	and.w	r3, r3, #15
 800132a:	3b04      	subs	r3, #4
 800132c:	0112      	lsls	r2, r2, #4
 800132e:	b2d2      	uxtb	r2, r2
 8001330:	440b      	add	r3, r1
 8001332:	761a      	strb	r2, [r3, #24]
}
 8001334:	bf00      	nop
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	e000e100 	.word	0xe000e100
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001348:	b480      	push	{r7}
 800134a:	b089      	sub	sp, #36	; 0x24
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	f1c3 0307 	rsb	r3, r3, #7
 8001362:	2b04      	cmp	r3, #4
 8001364:	bf28      	it	cs
 8001366:	2304      	movcs	r3, #4
 8001368:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	3304      	adds	r3, #4
 800136e:	2b06      	cmp	r3, #6
 8001370:	d902      	bls.n	8001378 <NVIC_EncodePriority+0x30>
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	3b03      	subs	r3, #3
 8001376:	e000      	b.n	800137a <NVIC_EncodePriority+0x32>
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800137c:	f04f 32ff 	mov.w	r2, #4294967295
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43da      	mvns	r2, r3
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	401a      	ands	r2, r3
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001390:	f04f 31ff 	mov.w	r1, #4294967295
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	fa01 f303 	lsl.w	r3, r1, r3
 800139a:	43d9      	mvns	r1, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a0:	4313      	orrs	r3, r2
         );
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3724      	adds	r7, #36	; 0x24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b082      	sub	sp, #8
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff ff4c 	bl	8001254 <__NVIC_SetPriorityGrouping>
}
 80013bc:	bf00      	nop
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
 80013d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013d6:	f7ff ff61 	bl	800129c <__NVIC_GetPriorityGrouping>
 80013da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	68b9      	ldr	r1, [r7, #8]
 80013e0:	6978      	ldr	r0, [r7, #20]
 80013e2:	f7ff ffb1 	bl	8001348 <NVIC_EncodePriority>
 80013e6:	4602      	mov	r2, r0
 80013e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ec:	4611      	mov	r1, r2
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff ff80 	bl	80012f4 <__NVIC_SetPriority>
}
 80013f4:	bf00      	nop
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff ff54 	bl	80012b8 <__NVIC_EnableIRQ>
}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b088      	sub	sp, #32
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001420:	2300      	movs	r3, #0
 8001422:	61fb      	str	r3, [r7, #28]
 8001424:	2300      	movs	r3, #0
 8001426:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001428:	4baa      	ldr	r3, [pc, #680]	; (80016d4 <HAL_ETH_Init+0x2bc>)
 800142a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001430:	2300      	movs	r3, #0
 8001432:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d101      	bne.n	800143e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e183      	b.n	8001746 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2b00      	cmp	r3, #0
 8001448:	d106      	bne.n	8001458 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f002 fd3e 	bl	8003ed4 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001458:	2300      	movs	r3, #0
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	4b9e      	ldr	r3, [pc, #632]	; (80016d8 <HAL_ETH_Init+0x2c0>)
 800145e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001460:	4a9d      	ldr	r2, [pc, #628]	; (80016d8 <HAL_ETH_Init+0x2c0>)
 8001462:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001466:	6453      	str	r3, [r2, #68]	; 0x44
 8001468:	4b9b      	ldr	r3, [pc, #620]	; (80016d8 <HAL_ETH_Init+0x2c0>)
 800146a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001474:	4b99      	ldr	r3, [pc, #612]	; (80016dc <HAL_ETH_Init+0x2c4>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	4a98      	ldr	r2, [pc, #608]	; (80016dc <HAL_ETH_Init+0x2c4>)
 800147a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800147e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001480:	4b96      	ldr	r3, [pc, #600]	; (80016dc <HAL_ETH_Init+0x2c4>)
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6a1b      	ldr	r3, [r3, #32]
 8001488:	4994      	ldr	r1, [pc, #592]	; (80016dc <HAL_ETH_Init+0x2c4>)
 800148a:	4313      	orrs	r3, r2
 800148c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f042 0201 	orr.w	r2, r2, #1
 80014a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014a4:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80014a6:	f7ff fea5 	bl	80011f4 <HAL_GetTick>
 80014aa:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80014ac:	e011      	b.n	80014d2 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80014ae:	f7ff fea1 	bl	80011f4 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014bc:	d909      	bls.n	80014d2 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2203      	movs	r2, #3
 80014c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e139      	b.n	8001746 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1e4      	bne.n	80014ae <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	691b      	ldr	r3, [r3, #16]
 80014ea:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	f023 031c 	bic.w	r3, r3, #28
 80014f2:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80014f4:	f001 ff54 	bl	80033a0 <HAL_RCC_GetHCLKFreq>
 80014f8:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	4a78      	ldr	r2, [pc, #480]	; (80016e0 <HAL_ETH_Init+0x2c8>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d908      	bls.n	8001514 <HAL_ETH_Init+0xfc>
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	4a77      	ldr	r2, [pc, #476]	; (80016e4 <HAL_ETH_Init+0x2cc>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d804      	bhi.n	8001514 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	f043 0308 	orr.w	r3, r3, #8
 8001510:	61fb      	str	r3, [r7, #28]
 8001512:	e027      	b.n	8001564 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	4a73      	ldr	r2, [pc, #460]	; (80016e4 <HAL_ETH_Init+0x2cc>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d908      	bls.n	800152e <HAL_ETH_Init+0x116>
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	4a6d      	ldr	r2, [pc, #436]	; (80016d4 <HAL_ETH_Init+0x2bc>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d204      	bcs.n	800152e <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	f043 030c 	orr.w	r3, r3, #12
 800152a:	61fb      	str	r3, [r7, #28]
 800152c:	e01a      	b.n	8001564 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	4a68      	ldr	r2, [pc, #416]	; (80016d4 <HAL_ETH_Init+0x2bc>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d303      	bcc.n	800153e <HAL_ETH_Init+0x126>
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	4a6b      	ldr	r2, [pc, #428]	; (80016e8 <HAL_ETH_Init+0x2d0>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d911      	bls.n	8001562 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	4a69      	ldr	r2, [pc, #420]	; (80016e8 <HAL_ETH_Init+0x2d0>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d908      	bls.n	8001558 <HAL_ETH_Init+0x140>
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	4a68      	ldr	r2, [pc, #416]	; (80016ec <HAL_ETH_Init+0x2d4>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d804      	bhi.n	8001558 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	f043 0304 	orr.w	r3, r3, #4
 8001554:	61fb      	str	r3, [r7, #28]
 8001556:	e005      	b.n	8001564 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	f043 0310 	orr.w	r3, r3, #16
 800155e:	61fb      	str	r3, [r7, #28]
 8001560:	e000      	b.n	8001564 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001562:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	69fa      	ldr	r2, [r7, #28]
 800156a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800156c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001570:	2100      	movs	r1, #0
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f000 fc17 	bl	8001da6 <HAL_ETH_WritePHYRegister>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00b      	beq.n	8001596 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001582:	6939      	ldr	r1, [r7, #16]
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f000 fdcd 	bl	8002124 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2201      	movs	r2, #1
 800158e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e0d7      	b.n	8001746 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001596:	20ff      	movs	r0, #255	; 0xff
 8001598:	f7ff fe38 	bl	800120c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	f000 80a5 	beq.w	80016f0 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80015a6:	f7ff fe25 	bl	80011f4 <HAL_GetTick>
 80015aa:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80015ac:	f107 030c 	add.w	r3, r7, #12
 80015b0:	461a      	mov	r2, r3
 80015b2:	2101      	movs	r1, #1
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f000 fb8e 	bl	8001cd6 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80015ba:	f7ff fe1b 	bl	80011f4 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d90f      	bls.n	80015ec <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80015d0:	6939      	ldr	r1, [r7, #16]
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f000 fda6 	bl	8002124 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2201      	movs	r2, #1
 80015dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e0ac      	b.n	8001746 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f003 0304 	and.w	r3, r3, #4
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d0da      	beq.n	80015ac <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80015f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015fa:	2100      	movs	r1, #0
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f000 fbd2 	bl	8001da6 <HAL_ETH_WritePHYRegister>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d00b      	beq.n	8001620 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800160c:	6939      	ldr	r1, [r7, #16]
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f000 fd88 	bl	8002124 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800161c:	2301      	movs	r3, #1
 800161e:	e092      	b.n	8001746 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001620:	f7ff fde8 	bl	80011f4 <HAL_GetTick>
 8001624:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001626:	f107 030c 	add.w	r3, r7, #12
 800162a:	461a      	mov	r2, r3
 800162c:	2101      	movs	r1, #1
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f000 fb51 	bl	8001cd6 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001634:	f7ff fdde 	bl	80011f4 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001642:	4293      	cmp	r3, r2
 8001644:	d90f      	bls.n	8001666 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800164a:	6939      	ldr	r1, [r7, #16]
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f000 fd69 	bl	8002124 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2201      	movs	r2, #1
 8001656:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e06f      	b.n	8001746 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f003 0320 	and.w	r3, r3, #32
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0da      	beq.n	8001626 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001670:	f107 030c 	add.w	r3, r7, #12
 8001674:	461a      	mov	r2, r3
 8001676:	2110      	movs	r1, #16
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f000 fb2c 	bl	8001cd6 <HAL_ETH_ReadPHYRegister>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d00b      	beq.n	800169c <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001688:	6939      	ldr	r1, [r7, #16]
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f000 fd4a 	bl	8002124 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001698:	2301      	movs	r3, #1
 800169a:	e054      	b.n	8001746 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f003 0304 	and.w	r3, r3, #4
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d004      	beq.n	80016b0 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	e002      	b.n	80016b6 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d003      	beq.n	80016c8 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	e035      	b.n	8001734 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	e030      	b.n	8001734 <HAL_ETH_Init+0x31c>
 80016d2:	bf00      	nop
 80016d4:	03938700 	.word	0x03938700
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40013800 	.word	0x40013800
 80016e0:	01312cff 	.word	0x01312cff
 80016e4:	02160ebf 	.word	0x02160ebf
 80016e8:	05f5e0ff 	.word	0x05f5e0ff
 80016ec:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	08db      	lsrs	r3, r3, #3
 80016f6:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	085b      	lsrs	r3, r3, #1
 80016fe:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001700:	4313      	orrs	r3, r2
 8001702:	b29b      	uxth	r3, r3
 8001704:	461a      	mov	r2, r3
 8001706:	2100      	movs	r1, #0
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f000 fb4c 	bl	8001da6 <HAL_ETH_WritePHYRegister>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d00b      	beq.n	800172c <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001718:	6939      	ldr	r1, [r7, #16]
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f000 fd02 	bl	8002124 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2201      	movs	r2, #1
 8001724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e00c      	b.n	8001746 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800172c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001730:	f7ff fd6c 	bl	800120c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001734:	6939      	ldr	r1, [r7, #16]
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f000 fcf4 	bl	8002124 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2201      	movs	r2, #1
 8001740:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3720      	adds	r7, #32
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop

08001750 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001750:	b480      	push	{r7}
 8001752:	b087      	sub	sp, #28
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
 800175c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001768:	2b01      	cmp	r3, #1
 800176a:	d101      	bne.n	8001770 <HAL_ETH_DMATxDescListInit+0x20>
 800176c:	2302      	movs	r3, #2
 800176e:	e052      	b.n	8001816 <HAL_ETH_DMATxDescListInit+0xc6>
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2201      	movs	r2, #1
 8001774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2202      	movs	r2, #2
 800177c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	68ba      	ldr	r2, [r7, #8]
 8001784:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
 800178a:	e030      	b.n	80017ee <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	015b      	lsls	r3, r3, #5
 8001790:	68ba      	ldr	r2, [r7, #8]
 8001792:	4413      	add	r3, r2
 8001794:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800179c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80017a4:	fb02 f303 	mul.w	r3, r2, r3
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	4413      	add	r3, r2
 80017ac:	461a      	mov	r2, r3
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d105      	bne.n	80017c6 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	3b01      	subs	r3, #1
 80017ca:	697a      	ldr	r2, [r7, #20]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d208      	bcs.n	80017e2 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	3301      	adds	r3, #1
 80017d4:	015b      	lsls	r3, r3, #5
 80017d6:	68ba      	ldr	r2, [r7, #8]
 80017d8:	4413      	add	r3, r2
 80017da:	461a      	mov	r2, r3
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	60da      	str	r2, [r3, #12]
 80017e0:	e002      	b.n	80017e8 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80017e2:	68ba      	ldr	r2, [r7, #8]
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	3301      	adds	r3, #1
 80017ec:	617b      	str	r3, [r7, #20]
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d3ca      	bcc.n	800178c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	68ba      	ldr	r2, [r7, #8]
 80017fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001800:	3310      	adds	r3, #16
 8001802:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	371c      	adds	r7, #28
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001822:	b480      	push	{r7}
 8001824:	b087      	sub	sp, #28
 8001826:	af00      	add	r7, sp, #0
 8001828:	60f8      	str	r0, [r7, #12]
 800182a:	60b9      	str	r1, [r7, #8]
 800182c:	607a      	str	r2, [r7, #4]
 800182e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800183a:	2b01      	cmp	r3, #1
 800183c:	d101      	bne.n	8001842 <HAL_ETH_DMARxDescListInit+0x20>
 800183e:	2302      	movs	r3, #2
 8001840:	e056      	b.n	80018f0 <HAL_ETH_DMARxDescListInit+0xce>
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2201      	movs	r2, #1
 8001846:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2202      	movs	r2, #2
 800184e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	68ba      	ldr	r2, [r7, #8]
 8001856:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8001858:	2300      	movs	r3, #0
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	e034      	b.n	80018c8 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	015b      	lsls	r3, r3, #5
 8001862:	68ba      	ldr	r2, [r7, #8]
 8001864:	4413      	add	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800186e:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001876:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800187e:	fb02 f303 	mul.w	r3, r2, r3
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	4413      	add	r3, r2
 8001886:	461a      	mov	r2, r3
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d105      	bne.n	80018a0 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	697a      	ldr	r2, [r7, #20]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d208      	bcs.n	80018bc <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	3301      	adds	r3, #1
 80018ae:	015b      	lsls	r3, r3, #5
 80018b0:	68ba      	ldr	r2, [r7, #8]
 80018b2:	4413      	add	r3, r2
 80018b4:	461a      	mov	r2, r3
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	e002      	b.n	80018c2 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80018bc:	68ba      	ldr	r2, [r7, #8]
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	3301      	adds	r3, #1
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	697a      	ldr	r2, [r7, #20]
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d3c6      	bcc.n	800185e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	68ba      	ldr	r2, [r7, #8]
 80018d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018da:	330c      	adds	r3, #12
 80018dc:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2201      	movs	r2, #1
 80018e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	371c      	adds	r7, #28
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b087      	sub	sp, #28
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	2300      	movs	r3, #0
 8001910:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001918:	2b01      	cmp	r3, #1
 800191a:	d101      	bne.n	8001920 <HAL_ETH_TransmitFrame+0x24>
 800191c:	2302      	movs	r3, #2
 800191e:	e0cd      	b.n	8001abc <HAL_ETH_TransmitFrame+0x1c0>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2202      	movs	r2, #2
 800192c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d109      	bne.n	800194a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2201      	movs	r2, #1
 800193a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001946:	2301      	movs	r3, #1
 8001948:	e0b8      	b.n	8001abc <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	da09      	bge.n	8001968 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2212      	movs	r2, #18
 8001958:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e0a9      	b.n	8001abc <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800196e:	4293      	cmp	r3, r2
 8001970:	d915      	bls.n	800199e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	4a54      	ldr	r2, [pc, #336]	; (8001ac8 <HAL_ETH_TransmitFrame+0x1cc>)
 8001976:	fba2 2303 	umull	r2, r3, r2, r3
 800197a:	0a9b      	lsrs	r3, r3, #10
 800197c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	4b51      	ldr	r3, [pc, #324]	; (8001ac8 <HAL_ETH_TransmitFrame+0x1cc>)
 8001982:	fba3 1302 	umull	r1, r3, r3, r2
 8001986:	0a9b      	lsrs	r3, r3, #10
 8001988:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800198c:	fb01 f303 	mul.w	r3, r1, r3
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d005      	beq.n	80019a2 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	3301      	adds	r3, #1
 800199a:	617b      	str	r3, [r7, #20]
 800199c:	e001      	b.n	80019a2 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 800199e:	2301      	movs	r3, #1
 80019a0:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d11c      	bne.n	80019e2 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b2:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80019b6:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80019c2:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ce:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80019d2:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	461a      	mov	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	62da      	str	r2, [r3, #44]	; 0x2c
 80019e0:	e04b      	b.n	8001a7a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 80019e2:	2300      	movs	r3, #0
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	e044      	b.n	8001a72 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019f6:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d107      	bne.n	8001a0e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a08:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a0c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a12:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001a16:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d116      	bne.n	8001a50 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001a30:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	4a25      	ldr	r2, [pc, #148]	; (8001acc <HAL_ETH_TransmitFrame+0x1d0>)
 8001a36:	fb02 f203 	mul.w	r2, r2, r3
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001a42:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a48:	68fa      	ldr	r2, [r7, #12]
 8001a4a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001a4e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a5e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	461a      	mov	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	613b      	str	r3, [r7, #16]
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d3b6      	bcc.n	80019e8 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a82:	3314      	adds	r3, #20
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0304 	and.w	r3, r3, #4
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d00d      	beq.n	8001aaa <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a96:	3314      	adds	r3, #20
 8001a98:	2204      	movs	r2, #4
 8001a9a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	371c      	adds	r7, #28
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	ac02b00b 	.word	0xac02b00b
 8001acc:	fffffa0c 	.word	0xfffffa0c

08001ad0 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d101      	bne.n	8001aea <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	e074      	b.n	8001bd4 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2201      	movs	r2, #1
 8001aee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2202      	movs	r2, #2
 8001af6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001afa:	e05a      	b.n	8001bb2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	3301      	adds	r3, #1
 8001b00:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b10:	d10d      	bne.n	8001b2e <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	461a      	mov	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	629a      	str	r2, [r3, #40]	; 0x28
 8001b2c:	e041      	b.n	8001bb2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d10b      	bne.n	8001b54 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b40:	1c5a      	adds	r2, r3, #1
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	629a      	str	r2, [r3, #40]	; 0x28
 8001b52:	e02e      	b.n	8001bb2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b60:	1c5a      	adds	r2, r3, #1
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d103      	bne.n	8001b76 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	0c1b      	lsrs	r3, r3, #16
 8001b7e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001b82:	1f1a      	subs	r2, r3, #4
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8c:	689a      	ldr	r2, [r3, #8]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	e010      	b.n	8001bd4 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	db02      	blt.n	8001bc2 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2b03      	cmp	r3, #3
 8001bc0:	d99c      	bls.n	8001afc <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bf0:	3314      	adds	r3, #20
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bf8:	2b40      	cmp	r3, #64	; 0x40
 8001bfa:	d112      	bne.n	8001c22 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f002 fa37 	bl	8004070 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c0a:	3314      	adds	r3, #20
 8001c0c:	2240      	movs	r2, #64	; 0x40
 8001c0e:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001c20:	e01b      	b.n	8001c5a <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c2a:	3314      	adds	r3, #20
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d111      	bne.n	8001c5a <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f839 	bl	8001cae <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c44:	3314      	adds	r3, #20
 8001c46:	2201      	movs	r2, #1
 8001c48:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c62:	3314      	adds	r3, #20
 8001c64:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c68:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c72:	3314      	adds	r3, #20
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c7e:	d112      	bne.n	8001ca6 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 f81e 	bl	8001cc2 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c8e:	3314      	adds	r3, #20
 8001c90:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c94:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b086      	sub	sp, #24
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	60f8      	str	r0, [r7, #12]
 8001cde:	460b      	mov	r3, r1
 8001ce0:	607a      	str	r2, [r7, #4]
 8001ce2:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	2b82      	cmp	r3, #130	; 0x82
 8001cf6:	d101      	bne.n	8001cfc <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	e050      	b.n	8001d9e <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2282      	movs	r2, #130	; 0x82
 8001d00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	f003 031c 	and.w	r3, r3, #28
 8001d12:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	8a1b      	ldrh	r3, [r3, #16]
 8001d18:	02db      	lsls	r3, r3, #11
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001d22:	897b      	ldrh	r3, [r7, #10]
 8001d24:	019b      	lsls	r3, r3, #6
 8001d26:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	f023 0302 	bic.w	r3, r3, #2
 8001d36:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	f043 0301 	orr.w	r3, r3, #1
 8001d3e:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001d48:	f7ff fa54 	bl	80011f4 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d4e:	e015      	b.n	8001d7c <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001d50:	f7ff fa50 	bl	80011f4 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d5e:	d309      	bcc.n	8001d74 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e014      	b.n	8001d9e <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1e4      	bne.n	8001d50 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	695b      	ldr	r3, [r3, #20]
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	461a      	mov	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3718      	adds	r7, #24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b086      	sub	sp, #24
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	60f8      	str	r0, [r7, #12]
 8001dae:	460b      	mov	r3, r1
 8001db0:	607a      	str	r2, [r7, #4]
 8001db2:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001db8:	2300      	movs	r3, #0
 8001dba:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b42      	cmp	r3, #66	; 0x42
 8001dc6:	d101      	bne.n	8001dcc <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	e04e      	b.n	8001e6a <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2242      	movs	r2, #66	; 0x42
 8001dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	f003 031c 	and.w	r3, r3, #28
 8001de2:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	8a1b      	ldrh	r3, [r3, #16]
 8001de8:	02db      	lsls	r3, r3, #11
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001df2:	897b      	ldrh	r3, [r7, #10]
 8001df4:	019b      	lsls	r3, r3, #6
 8001df6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	f043 0302 	orr.w	r3, r3, #2
 8001e06:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	f043 0301 	orr.w	r3, r3, #1
 8001e0e:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001e22:	f7ff f9e7 	bl	80011f4 <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e28:	e015      	b.n	8001e56 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001e2a:	f7ff f9e3 	bl	80011f4 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e38:	d309      	bcc.n	8001e4e <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e00d      	b.n	8001e6a <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d1e4      	bne.n	8001e2a <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3718      	adds	r7, #24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b082      	sub	sp, #8
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d101      	bne.n	8001e88 <HAL_ETH_Start+0x16>
 8001e84:	2302      	movs	r3, #2
 8001e86:	e01f      	b.n	8001ec8 <HAL_ETH_Start+0x56>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2202      	movs	r2, #2
 8001e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 fb45 	bl	8002528 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 fb7c 	bl	800259c <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 fc13 	bl	80026d0 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 fbb0 	bl	8002610 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 fbdd 	bl	8002670 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d101      	bne.n	8001ee6 <HAL_ETH_Stop+0x16>
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	e01f      	b.n	8001f26 <HAL_ETH_Stop+0x56>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2202      	movs	r2, #2
 8001ef2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 fba2 	bl	8002640 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 fbcf 	bl	80026a0 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 fb67 	bl	80025d6 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 fbe1 	bl	80026d0 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 fb27 	bl	8002562 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
	...

08001f30 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d101      	bne.n	8001f4c <HAL_ETH_ConfigMAC+0x1c>
 8001f48:	2302      	movs	r3, #2
 8001f4a:	e0e4      	b.n	8002116 <HAL_ETH_ConfigMAC+0x1e6>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2202      	movs	r2, #2
 8001f58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f000 80b1 	beq.w	80020c6 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	4b6c      	ldr	r3, [pc, #432]	; (8002120 <HAL_ETH_ConfigMAC+0x1f0>)
 8001f70:	4013      	ands	r3, r2
 8001f72:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001f7c:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001f82:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001f88:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001f8e:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001f94:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001f9a:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001fa0:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001fa6:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001fac:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001fb2:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001fb8:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001fbe:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fd6:	2001      	movs	r0, #1
 8001fd8:	f7ff f918 	bl	800120c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001fec:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001ff2:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001ff8:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001ffe:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8002004:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800200a:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8002016:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002018:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002022:	2001      	movs	r0, #1
 8002024:	f7ff f8f2 	bl	800120c <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002038:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002042:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002052:	4013      	ands	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800205a:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002060:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8002066:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 800206c:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8002072:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002078:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	4313      	orrs	r3, r2
 800207e:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002090:	2001      	movs	r0, #1
 8002092:	f7ff f8bb 	bl	800120c <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	430a      	orrs	r2, r1
 80020ac:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	69db      	ldr	r3, [r3, #28]
 80020b4:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80020b6:	2001      	movs	r0, #1
 80020b8:	f7ff f8a8 	bl	800120c <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	61da      	str	r2, [r3, #28]
 80020c4:	e01e      	b.n	8002104 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80020d4:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689a      	ldr	r2, [r3, #8]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	4313      	orrs	r3, r2
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80020f6:	2001      	movs	r0, #1
 80020f8:	f7ff f888 	bl	800120c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	ff20810f 	.word	0xff20810f

08002124 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b0b0      	sub	sp, #192	; 0xc0
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800212e:	2300      	movs	r3, #0
 8002130:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d007      	beq.n	800214a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002140:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002148:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800214a:	2300      	movs	r3, #0
 800214c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800214e:	2300      	movs	r3, #0
 8002150:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002152:	2300      	movs	r3, #0
 8002154:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002156:	2300      	movs	r3, #0
 8002158:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800215a:	2300      	movs	r3, #0
 800215c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800215e:	2300      	movs	r3, #0
 8002160:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d103      	bne.n	8002172 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800216a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800216e:	663b      	str	r3, [r7, #96]	; 0x60
 8002170:	e001      	b.n	8002176 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002172:	2300      	movs	r3, #0
 8002174:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002176:	f44f 7300 	mov.w	r3, #512	; 0x200
 800217a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800217c:	2300      	movs	r3, #0
 800217e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002180:	2300      	movs	r3, #0
 8002182:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002184:	2300      	movs	r3, #0
 8002186:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002188:	2300      	movs	r3, #0
 800218a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800218c:	2300      	movs	r3, #0
 800218e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002190:	2340      	movs	r3, #64	; 0x40
 8002192:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002194:	2300      	movs	r3, #0
 8002196:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800219a:	2300      	movs	r3, #0
 800219c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80021a0:	2300      	movs	r3, #0
 80021a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80021a6:	2300      	movs	r3, #0
 80021a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80021ac:	2300      	movs	r3, #0
 80021ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80021b2:	2300      	movs	r3, #0
 80021b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80021b8:	2300      	movs	r3, #0
 80021ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80021be:	2300      	movs	r3, #0
 80021c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80021c4:	2380      	movs	r3, #128	; 0x80
 80021c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80021ca:	2300      	movs	r3, #0
 80021cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80021d0:	2300      	movs	r3, #0
 80021d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80021d6:	2300      	movs	r3, #0
 80021d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80021dc:	2300      	movs	r3, #0
 80021de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80021e2:	2300      	movs	r3, #0
 80021e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80021e8:	2300      	movs	r3, #0
 80021ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80021f8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021fc:	4bac      	ldr	r3, [pc, #688]	; (80024b0 <ETH_MACDMAConfig+0x38c>)
 80021fe:	4013      	ands	r3, r2
 8002200:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002204:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002208:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800220a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800220c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800220e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002210:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002216:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002218:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800221a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800221c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800221e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002224:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002226:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002228:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800222a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800222c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800222e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002230:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002234:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002236:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002238:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800223a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800223e:	4313      	orrs	r3, r2
 8002240:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800224c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002258:	2001      	movs	r0, #1
 800225a:	f7fe ffd7 	bl	800120c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002266:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002268:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800226a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800226c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800226e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002270:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002272:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002276:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002278:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 800227c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800227e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002282:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002284:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002288:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800228c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002294:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002296:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80022a2:	2001      	movs	r0, #1
 80022a4:	f7fe ffb2 	bl	800120c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022b0:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80022ba:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80022c4:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80022d0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022d4:	f64f 7341 	movw	r3, #65345	; 0xff41
 80022d8:	4013      	ands	r3, r2
 80022da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80022de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022e2:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80022e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80022e8:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80022ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80022ee:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80022f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80022f4:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80022f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80022fa:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80022fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002300:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002302:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002306:	4313      	orrs	r3, r2
 8002308:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002314:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002320:	2001      	movs	r0, #1
 8002322:	f7fe ff73 	bl	800120c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800232e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002330:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002334:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	430a      	orrs	r2, r1
 800233e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800234a:	2001      	movs	r0, #1
 800234c:	f7fe ff5e 	bl	800120c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002358:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800235a:	2300      	movs	r3, #0
 800235c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800235e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002362:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002364:	2300      	movs	r3, #0
 8002366:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002368:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800236c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800236e:	2300      	movs	r3, #0
 8002370:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002372:	2300      	movs	r3, #0
 8002374:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002376:	2300      	movs	r3, #0
 8002378:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800237a:	2300      	movs	r3, #0
 800237c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800237e:	2304      	movs	r3, #4
 8002380:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002382:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002386:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002388:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800238c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800238e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002392:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002394:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002398:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800239a:	2380      	movs	r3, #128	; 0x80
 800239c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 800239e:	2300      	movs	r3, #0
 80023a0:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80023a2:	2300      	movs	r3, #0
 80023a4:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ae:	3318      	adds	r3, #24
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80023b6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023ba:	4b3e      	ldr	r3, [pc, #248]	; (80024b4 <ETH_MACDMAConfig+0x390>)
 80023bc:	4013      	ands	r3, r2
 80023be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80023c2:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80023c4:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80023c6:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80023c8:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80023ca:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80023cc:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80023ce:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80023d0:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80023d2:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80023d4:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80023d6:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80023d8:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80023da:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80023dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80023de:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80023e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80023e2:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80023e4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023e8:	4313      	orrs	r3, r2
 80023ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023f6:	3318      	adds	r3, #24
 80023f8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023fc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002406:	3318      	adds	r3, #24
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800240e:	2001      	movs	r0, #1
 8002410:	f7fe fefc 	bl	800120c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800241c:	3318      	adds	r3, #24
 800241e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002422:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002424:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002428:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800242a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800242c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800242e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002430:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002434:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002436:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002438:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800243a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800243c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 800243e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800244c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800245c:	2001      	movs	r0, #1
 800245e:	f7fe fed5 	bl	800120c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800246a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800246e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d10f      	bne.n	8002498 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002480:	331c      	adds	r3, #28
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800248c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002490:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002494:	331c      	adds	r3, #28
 8002496:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	461a      	mov	r2, r3
 800249e:	2100      	movs	r1, #0
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 f809 	bl	80024b8 <ETH_MACAddressConfig>
}
 80024a6:	bf00      	nop
 80024a8:	37c0      	adds	r7, #192	; 0xc0
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	ff20810f 	.word	0xff20810f
 80024b4:	f8de3f23 	.word	0xf8de3f23

080024b8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b087      	sub	sp, #28
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3305      	adds	r3, #5
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	021b      	lsls	r3, r3, #8
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	3204      	adds	r2, #4
 80024d0:	7812      	ldrb	r2, [r2, #0]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	4b11      	ldr	r3, [pc, #68]	; (8002520 <ETH_MACAddressConfig+0x68>)
 80024da:	4413      	add	r3, r2
 80024dc:	461a      	mov	r2, r3
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	3303      	adds	r3, #3
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	061a      	lsls	r2, r3, #24
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	3302      	adds	r3, #2
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	041b      	lsls	r3, r3, #16
 80024f2:	431a      	orrs	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3301      	adds	r3, #1
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	021b      	lsls	r3, r3, #8
 80024fc:	4313      	orrs	r3, r2
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	7812      	ldrb	r2, [r2, #0]
 8002502:	4313      	orrs	r3, r2
 8002504:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002506:	68ba      	ldr	r2, [r7, #8]
 8002508:	4b06      	ldr	r3, [pc, #24]	; (8002524 <ETH_MACAddressConfig+0x6c>)
 800250a:	4413      	add	r3, r2
 800250c:	461a      	mov	r2, r3
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	6013      	str	r3, [r2, #0]
}
 8002512:	bf00      	nop
 8002514:	371c      	adds	r7, #28
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	40028040 	.word	0x40028040
 8002524:	40028044 	.word	0x40028044

08002528 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002530:	2300      	movs	r3, #0
 8002532:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 0208 	orr.w	r2, r2, #8
 8002542:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800254c:	2001      	movs	r0, #1
 800254e:	f000 f8e9 	bl	8002724 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	601a      	str	r2, [r3, #0]
}
 800255a:	bf00      	nop
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002562:	b580      	push	{r7, lr}
 8002564:	b084      	sub	sp, #16
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800256a:	2300      	movs	r3, #0
 800256c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 0208 	bic.w	r2, r2, #8
 800257c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002586:	2001      	movs	r0, #1
 8002588:	f000 f8cc 	bl	8002724 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	601a      	str	r2, [r3, #0]
}
 8002594:	bf00      	nop
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80025a4:	2300      	movs	r3, #0
 80025a6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f042 0204 	orr.w	r2, r2, #4
 80025b6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80025c0:	2001      	movs	r0, #1
 80025c2:	f000 f8af 	bl	8002724 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	601a      	str	r2, [r3, #0]
}
 80025ce:	bf00      	nop
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b084      	sub	sp, #16
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80025de:	2300      	movs	r3, #0
 80025e0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0204 	bic.w	r2, r2, #4
 80025f0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80025fa:	2001      	movs	r0, #1
 80025fc:	f000 f892 	bl	8002724 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	601a      	str	r2, [r3, #0]
}
 8002608:	bf00      	nop
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002620:	3318      	adds	r3, #24
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800262c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002630:	3318      	adds	r3, #24
 8002632:	601a      	str	r2, [r3, #0]
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002650:	3318      	adds	r3, #24
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800265c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002660:	3318      	adds	r3, #24
 8002662:	601a      	str	r2, [r3, #0]
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002680:	3318      	adds	r3, #24
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f042 0202 	orr.w	r2, r2, #2
 800268c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002690:	3318      	adds	r3, #24
 8002692:	601a      	str	r2, [r3, #0]
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026b0:	3318      	adds	r3, #24
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 0202 	bic.w	r2, r2, #2
 80026bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026c0:	3318      	adds	r3, #24
 80026c2:	601a      	str	r2, [r3, #0]
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80026d8:	2300      	movs	r3, #0
 80026da:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026e4:	3318      	adds	r3, #24
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80026f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026f4:	3318      	adds	r3, #24
 80026f6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002700:	3318      	adds	r3, #24
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002706:	2001      	movs	r0, #1
 8002708:	f000 f80c 	bl	8002724 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002716:	3318      	adds	r3, #24
 8002718:	601a      	str	r2, [r3, #0]
}
 800271a:	bf00      	nop
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
	...

08002724 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800272c:	4b0b      	ldr	r3, [pc, #44]	; (800275c <ETH_Delay+0x38>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a0b      	ldr	r2, [pc, #44]	; (8002760 <ETH_Delay+0x3c>)
 8002732:	fba2 2303 	umull	r2, r3, r2, r3
 8002736:	0a5b      	lsrs	r3, r3, #9
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	fb02 f303 	mul.w	r3, r2, r3
 800273e:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002740:	bf00      	nop
  } 
  while (Delay --);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	1e5a      	subs	r2, r3, #1
 8002746:	60fa      	str	r2, [r7, #12]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1f9      	bne.n	8002740 <ETH_Delay+0x1c>
}
 800274c:	bf00      	nop
 800274e:	bf00      	nop
 8002750:	3714      	adds	r7, #20
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	20000000 	.word	0x20000000
 8002760:	10624dd3 	.word	0x10624dd3

08002764 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002764:	b480      	push	{r7}
 8002766:	b089      	sub	sp, #36	; 0x24
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800276e:	2300      	movs	r3, #0
 8002770:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002772:	2300      	movs	r3, #0
 8002774:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002776:	2300      	movs	r3, #0
 8002778:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800277a:	2300      	movs	r3, #0
 800277c:	61fb      	str	r3, [r7, #28]
 800277e:	e177      	b.n	8002a70 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002780:	2201      	movs	r2, #1
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	4013      	ands	r3, r2
 8002792:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	429a      	cmp	r2, r3
 800279a:	f040 8166 	bne.w	8002a6a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f003 0303 	and.w	r3, r3, #3
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d005      	beq.n	80027b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d130      	bne.n	8002818 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	2203      	movs	r2, #3
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	43db      	mvns	r3, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4013      	ands	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4313      	orrs	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027ec:	2201      	movs	r2, #1
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	43db      	mvns	r3, r3
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	4013      	ands	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	091b      	lsrs	r3, r3, #4
 8002802:	f003 0201 	and.w	r2, r3, #1
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4313      	orrs	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 0303 	and.w	r3, r3, #3
 8002820:	2b03      	cmp	r3, #3
 8002822:	d017      	beq.n	8002854 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	2203      	movs	r2, #3
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	43db      	mvns	r3, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4013      	ands	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4313      	orrs	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 0303 	and.w	r3, r3, #3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d123      	bne.n	80028a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	08da      	lsrs	r2, r3, #3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3208      	adds	r2, #8
 8002868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800286c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	220f      	movs	r2, #15
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	43db      	mvns	r3, r3
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	4013      	ands	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	691a      	ldr	r2, [r3, #16]
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	f003 0307 	and.w	r3, r3, #7
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	4313      	orrs	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	08da      	lsrs	r2, r3, #3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	3208      	adds	r2, #8
 80028a2:	69b9      	ldr	r1, [r7, #24]
 80028a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	2203      	movs	r2, #3
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4013      	ands	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f003 0203 	and.w	r2, r3, #3
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 80c0 	beq.w	8002a6a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	4b66      	ldr	r3, [pc, #408]	; (8002a88 <HAL_GPIO_Init+0x324>)
 80028f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f2:	4a65      	ldr	r2, [pc, #404]	; (8002a88 <HAL_GPIO_Init+0x324>)
 80028f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028f8:	6453      	str	r3, [r2, #68]	; 0x44
 80028fa:	4b63      	ldr	r3, [pc, #396]	; (8002a88 <HAL_GPIO_Init+0x324>)
 80028fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002902:	60fb      	str	r3, [r7, #12]
 8002904:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002906:	4a61      	ldr	r2, [pc, #388]	; (8002a8c <HAL_GPIO_Init+0x328>)
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	089b      	lsrs	r3, r3, #2
 800290c:	3302      	adds	r3, #2
 800290e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002912:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	f003 0303 	and.w	r3, r3, #3
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	220f      	movs	r2, #15
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	43db      	mvns	r3, r3
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	4013      	ands	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a58      	ldr	r2, [pc, #352]	; (8002a90 <HAL_GPIO_Init+0x32c>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d037      	beq.n	80029a2 <HAL_GPIO_Init+0x23e>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a57      	ldr	r2, [pc, #348]	; (8002a94 <HAL_GPIO_Init+0x330>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d031      	beq.n	800299e <HAL_GPIO_Init+0x23a>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a56      	ldr	r2, [pc, #344]	; (8002a98 <HAL_GPIO_Init+0x334>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d02b      	beq.n	800299a <HAL_GPIO_Init+0x236>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a55      	ldr	r2, [pc, #340]	; (8002a9c <HAL_GPIO_Init+0x338>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d025      	beq.n	8002996 <HAL_GPIO_Init+0x232>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a54      	ldr	r2, [pc, #336]	; (8002aa0 <HAL_GPIO_Init+0x33c>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d01f      	beq.n	8002992 <HAL_GPIO_Init+0x22e>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a53      	ldr	r2, [pc, #332]	; (8002aa4 <HAL_GPIO_Init+0x340>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d019      	beq.n	800298e <HAL_GPIO_Init+0x22a>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a52      	ldr	r2, [pc, #328]	; (8002aa8 <HAL_GPIO_Init+0x344>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d013      	beq.n	800298a <HAL_GPIO_Init+0x226>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a51      	ldr	r2, [pc, #324]	; (8002aac <HAL_GPIO_Init+0x348>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d00d      	beq.n	8002986 <HAL_GPIO_Init+0x222>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a50      	ldr	r2, [pc, #320]	; (8002ab0 <HAL_GPIO_Init+0x34c>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d007      	beq.n	8002982 <HAL_GPIO_Init+0x21e>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a4f      	ldr	r2, [pc, #316]	; (8002ab4 <HAL_GPIO_Init+0x350>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d101      	bne.n	800297e <HAL_GPIO_Init+0x21a>
 800297a:	2309      	movs	r3, #9
 800297c:	e012      	b.n	80029a4 <HAL_GPIO_Init+0x240>
 800297e:	230a      	movs	r3, #10
 8002980:	e010      	b.n	80029a4 <HAL_GPIO_Init+0x240>
 8002982:	2308      	movs	r3, #8
 8002984:	e00e      	b.n	80029a4 <HAL_GPIO_Init+0x240>
 8002986:	2307      	movs	r3, #7
 8002988:	e00c      	b.n	80029a4 <HAL_GPIO_Init+0x240>
 800298a:	2306      	movs	r3, #6
 800298c:	e00a      	b.n	80029a4 <HAL_GPIO_Init+0x240>
 800298e:	2305      	movs	r3, #5
 8002990:	e008      	b.n	80029a4 <HAL_GPIO_Init+0x240>
 8002992:	2304      	movs	r3, #4
 8002994:	e006      	b.n	80029a4 <HAL_GPIO_Init+0x240>
 8002996:	2303      	movs	r3, #3
 8002998:	e004      	b.n	80029a4 <HAL_GPIO_Init+0x240>
 800299a:	2302      	movs	r3, #2
 800299c:	e002      	b.n	80029a4 <HAL_GPIO_Init+0x240>
 800299e:	2301      	movs	r3, #1
 80029a0:	e000      	b.n	80029a4 <HAL_GPIO_Init+0x240>
 80029a2:	2300      	movs	r3, #0
 80029a4:	69fa      	ldr	r2, [r7, #28]
 80029a6:	f002 0203 	and.w	r2, r2, #3
 80029aa:	0092      	lsls	r2, r2, #2
 80029ac:	4093      	lsls	r3, r2
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029b4:	4935      	ldr	r1, [pc, #212]	; (8002a8c <HAL_GPIO_Init+0x328>)
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	089b      	lsrs	r3, r3, #2
 80029ba:	3302      	adds	r3, #2
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029c2:	4b3d      	ldr	r3, [pc, #244]	; (8002ab8 <HAL_GPIO_Init+0x354>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	43db      	mvns	r3, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4013      	ands	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029e6:	4a34      	ldr	r2, [pc, #208]	; (8002ab8 <HAL_GPIO_Init+0x354>)
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029ec:	4b32      	ldr	r3, [pc, #200]	; (8002ab8 <HAL_GPIO_Init+0x354>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	43db      	mvns	r3, r3
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	4013      	ands	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d003      	beq.n	8002a10 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a10:	4a29      	ldr	r2, [pc, #164]	; (8002ab8 <HAL_GPIO_Init+0x354>)
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a16:	4b28      	ldr	r3, [pc, #160]	; (8002ab8 <HAL_GPIO_Init+0x354>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4013      	ands	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a3a:	4a1f      	ldr	r2, [pc, #124]	; (8002ab8 <HAL_GPIO_Init+0x354>)
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a40:	4b1d      	ldr	r3, [pc, #116]	; (8002ab8 <HAL_GPIO_Init+0x354>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a64:	4a14      	ldr	r2, [pc, #80]	; (8002ab8 <HAL_GPIO_Init+0x354>)
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	61fb      	str	r3, [r7, #28]
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	2b0f      	cmp	r3, #15
 8002a74:	f67f ae84 	bls.w	8002780 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a78:	bf00      	nop
 8002a7a:	bf00      	nop
 8002a7c:	3724      	adds	r7, #36	; 0x24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	40013800 	.word	0x40013800
 8002a90:	40020000 	.word	0x40020000
 8002a94:	40020400 	.word	0x40020400
 8002a98:	40020800 	.word	0x40020800
 8002a9c:	40020c00 	.word	0x40020c00
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	40021400 	.word	0x40021400
 8002aa8:	40021800 	.word	0x40021800
 8002aac:	40021c00 	.word	0x40021c00
 8002ab0:	40022000 	.word	0x40022000
 8002ab4:	40022400 	.word	0x40022400
 8002ab8:	40013c00 	.word	0x40013c00

08002abc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	691a      	ldr	r2, [r3, #16]
 8002acc:	887b      	ldrh	r3, [r7, #2]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d002      	beq.n	8002ada <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	73fb      	strb	r3, [r7, #15]
 8002ad8:	e001      	b.n	8002ade <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ada:	2300      	movs	r3, #0
 8002adc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3714      	adds	r7, #20
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	460b      	mov	r3, r1
 8002af6:	807b      	strh	r3, [r7, #2]
 8002af8:	4613      	mov	r3, r2
 8002afa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002afc:	787b      	ldrb	r3, [r7, #1]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b02:	887a      	ldrh	r2, [r7, #2]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b08:	e003      	b.n	8002b12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b0a:	887b      	ldrh	r3, [r7, #2]
 8002b0c:	041a      	lsls	r2, r3, #16
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	619a      	str	r2, [r3, #24]
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
	...

08002b20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e264      	b.n	8002ffc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d075      	beq.n	8002c2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b3e:	4ba3      	ldr	r3, [pc, #652]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 030c 	and.w	r3, r3, #12
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	d00c      	beq.n	8002b64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b4a:	4ba0      	ldr	r3, [pc, #640]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b52:	2b08      	cmp	r3, #8
 8002b54:	d112      	bne.n	8002b7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b56:	4b9d      	ldr	r3, [pc, #628]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b62:	d10b      	bne.n	8002b7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b64:	4b99      	ldr	r3, [pc, #612]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d05b      	beq.n	8002c28 <HAL_RCC_OscConfig+0x108>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d157      	bne.n	8002c28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e23f      	b.n	8002ffc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b84:	d106      	bne.n	8002b94 <HAL_RCC_OscConfig+0x74>
 8002b86:	4b91      	ldr	r3, [pc, #580]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a90      	ldr	r2, [pc, #576]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b90:	6013      	str	r3, [r2, #0]
 8002b92:	e01d      	b.n	8002bd0 <HAL_RCC_OscConfig+0xb0>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b9c:	d10c      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x98>
 8002b9e:	4b8b      	ldr	r3, [pc, #556]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a8a      	ldr	r2, [pc, #552]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002ba4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ba8:	6013      	str	r3, [r2, #0]
 8002baa:	4b88      	ldr	r3, [pc, #544]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a87      	ldr	r2, [pc, #540]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bb4:	6013      	str	r3, [r2, #0]
 8002bb6:	e00b      	b.n	8002bd0 <HAL_RCC_OscConfig+0xb0>
 8002bb8:	4b84      	ldr	r3, [pc, #528]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a83      	ldr	r2, [pc, #524]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002bbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bc2:	6013      	str	r3, [r2, #0]
 8002bc4:	4b81      	ldr	r3, [pc, #516]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a80      	ldr	r2, [pc, #512]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002bca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d013      	beq.n	8002c00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd8:	f7fe fb0c 	bl	80011f4 <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002be0:	f7fe fb08 	bl	80011f4 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b64      	cmp	r3, #100	; 0x64
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e204      	b.n	8002ffc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bf2:	4b76      	ldr	r3, [pc, #472]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d0f0      	beq.n	8002be0 <HAL_RCC_OscConfig+0xc0>
 8002bfe:	e014      	b.n	8002c2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c00:	f7fe faf8 	bl	80011f4 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c08:	f7fe faf4 	bl	80011f4 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b64      	cmp	r3, #100	; 0x64
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e1f0      	b.n	8002ffc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c1a:	4b6c      	ldr	r3, [pc, #432]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1f0      	bne.n	8002c08 <HAL_RCC_OscConfig+0xe8>
 8002c26:	e000      	b.n	8002c2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d063      	beq.n	8002cfe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c36:	4b65      	ldr	r3, [pc, #404]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 030c 	and.w	r3, r3, #12
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00b      	beq.n	8002c5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c42:	4b62      	ldr	r3, [pc, #392]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c4a:	2b08      	cmp	r3, #8
 8002c4c:	d11c      	bne.n	8002c88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c4e:	4b5f      	ldr	r3, [pc, #380]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d116      	bne.n	8002c88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c5a:	4b5c      	ldr	r3, [pc, #368]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d005      	beq.n	8002c72 <HAL_RCC_OscConfig+0x152>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d001      	beq.n	8002c72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e1c4      	b.n	8002ffc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c72:	4b56      	ldr	r3, [pc, #344]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	4952      	ldr	r1, [pc, #328]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c86:	e03a      	b.n	8002cfe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d020      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c90:	4b4f      	ldr	r3, [pc, #316]	; (8002dd0 <HAL_RCC_OscConfig+0x2b0>)
 8002c92:	2201      	movs	r2, #1
 8002c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c96:	f7fe faad 	bl	80011f4 <HAL_GetTick>
 8002c9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c9c:	e008      	b.n	8002cb0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c9e:	f7fe faa9 	bl	80011f4 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e1a5      	b.n	8002ffc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb0:	4b46      	ldr	r3, [pc, #280]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d0f0      	beq.n	8002c9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cbc:	4b43      	ldr	r3, [pc, #268]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	00db      	lsls	r3, r3, #3
 8002cca:	4940      	ldr	r1, [pc, #256]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	600b      	str	r3, [r1, #0]
 8002cd0:	e015      	b.n	8002cfe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cd2:	4b3f      	ldr	r3, [pc, #252]	; (8002dd0 <HAL_RCC_OscConfig+0x2b0>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd8:	f7fe fa8c 	bl	80011f4 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ce0:	f7fe fa88 	bl	80011f4 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e184      	b.n	8002ffc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cf2:	4b36      	ldr	r3, [pc, #216]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1f0      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d030      	beq.n	8002d6c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d016      	beq.n	8002d40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d12:	4b30      	ldr	r3, [pc, #192]	; (8002dd4 <HAL_RCC_OscConfig+0x2b4>)
 8002d14:	2201      	movs	r2, #1
 8002d16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d18:	f7fe fa6c 	bl	80011f4 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d20:	f7fe fa68 	bl	80011f4 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e164      	b.n	8002ffc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d32:	4b26      	ldr	r3, [pc, #152]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d0f0      	beq.n	8002d20 <HAL_RCC_OscConfig+0x200>
 8002d3e:	e015      	b.n	8002d6c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d40:	4b24      	ldr	r3, [pc, #144]	; (8002dd4 <HAL_RCC_OscConfig+0x2b4>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d46:	f7fe fa55 	bl	80011f4 <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d4e:	f7fe fa51 	bl	80011f4 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e14d      	b.n	8002ffc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d60:	4b1a      	ldr	r3, [pc, #104]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002d62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1f0      	bne.n	8002d4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 80a0 	beq.w	8002eba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d7e:	4b13      	ldr	r3, [pc, #76]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10f      	bne.n	8002daa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60bb      	str	r3, [r7, #8]
 8002d8e:	4b0f      	ldr	r3, [pc, #60]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	4a0e      	ldr	r2, [pc, #56]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d98:	6413      	str	r3, [r2, #64]	; 0x40
 8002d9a:	4b0c      	ldr	r3, [pc, #48]	; (8002dcc <HAL_RCC_OscConfig+0x2ac>)
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da2:	60bb      	str	r3, [r7, #8]
 8002da4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002da6:	2301      	movs	r3, #1
 8002da8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002daa:	4b0b      	ldr	r3, [pc, #44]	; (8002dd8 <HAL_RCC_OscConfig+0x2b8>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d121      	bne.n	8002dfa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002db6:	4b08      	ldr	r3, [pc, #32]	; (8002dd8 <HAL_RCC_OscConfig+0x2b8>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a07      	ldr	r2, [pc, #28]	; (8002dd8 <HAL_RCC_OscConfig+0x2b8>)
 8002dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dc2:	f7fe fa17 	bl	80011f4 <HAL_GetTick>
 8002dc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc8:	e011      	b.n	8002dee <HAL_RCC_OscConfig+0x2ce>
 8002dca:	bf00      	nop
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	42470000 	.word	0x42470000
 8002dd4:	42470e80 	.word	0x42470e80
 8002dd8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ddc:	f7fe fa0a 	bl	80011f4 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e106      	b.n	8002ffc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dee:	4b85      	ldr	r3, [pc, #532]	; (8003004 <HAL_RCC_OscConfig+0x4e4>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d0f0      	beq.n	8002ddc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d106      	bne.n	8002e10 <HAL_RCC_OscConfig+0x2f0>
 8002e02:	4b81      	ldr	r3, [pc, #516]	; (8003008 <HAL_RCC_OscConfig+0x4e8>)
 8002e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e06:	4a80      	ldr	r2, [pc, #512]	; (8003008 <HAL_RCC_OscConfig+0x4e8>)
 8002e08:	f043 0301 	orr.w	r3, r3, #1
 8002e0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e0e:	e01c      	b.n	8002e4a <HAL_RCC_OscConfig+0x32a>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	2b05      	cmp	r3, #5
 8002e16:	d10c      	bne.n	8002e32 <HAL_RCC_OscConfig+0x312>
 8002e18:	4b7b      	ldr	r3, [pc, #492]	; (8003008 <HAL_RCC_OscConfig+0x4e8>)
 8002e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1c:	4a7a      	ldr	r2, [pc, #488]	; (8003008 <HAL_RCC_OscConfig+0x4e8>)
 8002e1e:	f043 0304 	orr.w	r3, r3, #4
 8002e22:	6713      	str	r3, [r2, #112]	; 0x70
 8002e24:	4b78      	ldr	r3, [pc, #480]	; (8003008 <HAL_RCC_OscConfig+0x4e8>)
 8002e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e28:	4a77      	ldr	r2, [pc, #476]	; (8003008 <HAL_RCC_OscConfig+0x4e8>)
 8002e2a:	f043 0301 	orr.w	r3, r3, #1
 8002e2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e30:	e00b      	b.n	8002e4a <HAL_RCC_OscConfig+0x32a>
 8002e32:	4b75      	ldr	r3, [pc, #468]	; (8003008 <HAL_RCC_OscConfig+0x4e8>)
 8002e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e36:	4a74      	ldr	r2, [pc, #464]	; (8003008 <HAL_RCC_OscConfig+0x4e8>)
 8002e38:	f023 0301 	bic.w	r3, r3, #1
 8002e3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e3e:	4b72      	ldr	r3, [pc, #456]	; (8003008 <HAL_RCC_OscConfig+0x4e8>)
 8002e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e42:	4a71      	ldr	r2, [pc, #452]	; (8003008 <HAL_RCC_OscConfig+0x4e8>)
 8002e44:	f023 0304 	bic.w	r3, r3, #4
 8002e48:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d015      	beq.n	8002e7e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e52:	f7fe f9cf 	bl	80011f4 <HAL_GetTick>
 8002e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e58:	e00a      	b.n	8002e70 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e5a:	f7fe f9cb 	bl	80011f4 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d901      	bls.n	8002e70 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e0c5      	b.n	8002ffc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e70:	4b65      	ldr	r3, [pc, #404]	; (8003008 <HAL_RCC_OscConfig+0x4e8>)
 8002e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d0ee      	beq.n	8002e5a <HAL_RCC_OscConfig+0x33a>
 8002e7c:	e014      	b.n	8002ea8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e7e:	f7fe f9b9 	bl	80011f4 <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e84:	e00a      	b.n	8002e9c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e86:	f7fe f9b5 	bl	80011f4 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e0af      	b.n	8002ffc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e9c:	4b5a      	ldr	r3, [pc, #360]	; (8003008 <HAL_RCC_OscConfig+0x4e8>)
 8002e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1ee      	bne.n	8002e86 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ea8:	7dfb      	ldrb	r3, [r7, #23]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d105      	bne.n	8002eba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eae:	4b56      	ldr	r3, [pc, #344]	; (8003008 <HAL_RCC_OscConfig+0x4e8>)
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	4a55      	ldr	r2, [pc, #340]	; (8003008 <HAL_RCC_OscConfig+0x4e8>)
 8002eb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eb8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 809b 	beq.w	8002ffa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ec4:	4b50      	ldr	r3, [pc, #320]	; (8003008 <HAL_RCC_OscConfig+0x4e8>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f003 030c 	and.w	r3, r3, #12
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	d05c      	beq.n	8002f8a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d141      	bne.n	8002f5c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ed8:	4b4c      	ldr	r3, [pc, #304]	; (800300c <HAL_RCC_OscConfig+0x4ec>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ede:	f7fe f989 	bl	80011f4 <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ee4:	e008      	b.n	8002ef8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ee6:	f7fe f985 	bl	80011f4 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e081      	b.n	8002ffc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ef8:	4b43      	ldr	r3, [pc, #268]	; (8003008 <HAL_RCC_OscConfig+0x4e8>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1f0      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	69da      	ldr	r2, [r3, #28]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	019b      	lsls	r3, r3, #6
 8002f14:	431a      	orrs	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1a:	085b      	lsrs	r3, r3, #1
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	041b      	lsls	r3, r3, #16
 8002f20:	431a      	orrs	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f26:	061b      	lsls	r3, r3, #24
 8002f28:	4937      	ldr	r1, [pc, #220]	; (8003008 <HAL_RCC_OscConfig+0x4e8>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f2e:	4b37      	ldr	r3, [pc, #220]	; (800300c <HAL_RCC_OscConfig+0x4ec>)
 8002f30:	2201      	movs	r2, #1
 8002f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f34:	f7fe f95e 	bl	80011f4 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f3c:	f7fe f95a 	bl	80011f4 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e056      	b.n	8002ffc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f4e:	4b2e      	ldr	r3, [pc, #184]	; (8003008 <HAL_RCC_OscConfig+0x4e8>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0f0      	beq.n	8002f3c <HAL_RCC_OscConfig+0x41c>
 8002f5a:	e04e      	b.n	8002ffa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f5c:	4b2b      	ldr	r3, [pc, #172]	; (800300c <HAL_RCC_OscConfig+0x4ec>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f62:	f7fe f947 	bl	80011f4 <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f68:	e008      	b.n	8002f7c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f6a:	f7fe f943 	bl	80011f4 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e03f      	b.n	8002ffc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f7c:	4b22      	ldr	r3, [pc, #136]	; (8003008 <HAL_RCC_OscConfig+0x4e8>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1f0      	bne.n	8002f6a <HAL_RCC_OscConfig+0x44a>
 8002f88:	e037      	b.n	8002ffa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d101      	bne.n	8002f96 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e032      	b.n	8002ffc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f96:	4b1c      	ldr	r3, [pc, #112]	; (8003008 <HAL_RCC_OscConfig+0x4e8>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d028      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d121      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d11a      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fcc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d111      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fdc:	085b      	lsrs	r3, r3, #1
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d107      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d001      	beq.n	8002ffa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e000      	b.n	8002ffc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3718      	adds	r7, #24
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40007000 	.word	0x40007000
 8003008:	40023800 	.word	0x40023800
 800300c:	42470060 	.word	0x42470060

08003010 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e0cc      	b.n	80031be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003024:	4b68      	ldr	r3, [pc, #416]	; (80031c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 030f 	and.w	r3, r3, #15
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	429a      	cmp	r2, r3
 8003030:	d90c      	bls.n	800304c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003032:	4b65      	ldr	r3, [pc, #404]	; (80031c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	b2d2      	uxtb	r2, r2
 8003038:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800303a:	4b63      	ldr	r3, [pc, #396]	; (80031c8 <HAL_RCC_ClockConfig+0x1b8>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	429a      	cmp	r2, r3
 8003046:	d001      	beq.n	800304c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e0b8      	b.n	80031be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d020      	beq.n	800309a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	2b00      	cmp	r3, #0
 8003062:	d005      	beq.n	8003070 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003064:	4b59      	ldr	r3, [pc, #356]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	4a58      	ldr	r2, [pc, #352]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 800306a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800306e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0308 	and.w	r3, r3, #8
 8003078:	2b00      	cmp	r3, #0
 800307a:	d005      	beq.n	8003088 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800307c:	4b53      	ldr	r3, [pc, #332]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	4a52      	ldr	r2, [pc, #328]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 8003082:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003086:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003088:	4b50      	ldr	r3, [pc, #320]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	494d      	ldr	r1, [pc, #308]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 8003096:	4313      	orrs	r3, r2
 8003098:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d044      	beq.n	8003130 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d107      	bne.n	80030be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ae:	4b47      	ldr	r3, [pc, #284]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d119      	bne.n	80030ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e07f      	b.n	80031be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d003      	beq.n	80030ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030ca:	2b03      	cmp	r3, #3
 80030cc:	d107      	bne.n	80030de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ce:	4b3f      	ldr	r3, [pc, #252]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d109      	bne.n	80030ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e06f      	b.n	80031be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030de:	4b3b      	ldr	r3, [pc, #236]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e067      	b.n	80031be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030ee:	4b37      	ldr	r3, [pc, #220]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f023 0203 	bic.w	r2, r3, #3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	4934      	ldr	r1, [pc, #208]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003100:	f7fe f878 	bl	80011f4 <HAL_GetTick>
 8003104:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003106:	e00a      	b.n	800311e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003108:	f7fe f874 	bl	80011f4 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	f241 3288 	movw	r2, #5000	; 0x1388
 8003116:	4293      	cmp	r3, r2
 8003118:	d901      	bls.n	800311e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e04f      	b.n	80031be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800311e:	4b2b      	ldr	r3, [pc, #172]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f003 020c 	and.w	r2, r3, #12
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	429a      	cmp	r2, r3
 800312e:	d1eb      	bne.n	8003108 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003130:	4b25      	ldr	r3, [pc, #148]	; (80031c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 030f 	and.w	r3, r3, #15
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	429a      	cmp	r2, r3
 800313c:	d20c      	bcs.n	8003158 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800313e:	4b22      	ldr	r3, [pc, #136]	; (80031c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003146:	4b20      	ldr	r3, [pc, #128]	; (80031c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	429a      	cmp	r2, r3
 8003152:	d001      	beq.n	8003158 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e032      	b.n	80031be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2b00      	cmp	r3, #0
 8003162:	d008      	beq.n	8003176 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003164:	4b19      	ldr	r3, [pc, #100]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	4916      	ldr	r1, [pc, #88]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 8003172:	4313      	orrs	r3, r2
 8003174:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0308 	and.w	r3, r3, #8
 800317e:	2b00      	cmp	r3, #0
 8003180:	d009      	beq.n	8003196 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003182:	4b12      	ldr	r3, [pc, #72]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	490e      	ldr	r1, [pc, #56]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 8003192:	4313      	orrs	r3, r2
 8003194:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003196:	f000 f821 	bl	80031dc <HAL_RCC_GetSysClockFreq>
 800319a:	4602      	mov	r2, r0
 800319c:	4b0b      	ldr	r3, [pc, #44]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	091b      	lsrs	r3, r3, #4
 80031a2:	f003 030f 	and.w	r3, r3, #15
 80031a6:	490a      	ldr	r1, [pc, #40]	; (80031d0 <HAL_RCC_ClockConfig+0x1c0>)
 80031a8:	5ccb      	ldrb	r3, [r1, r3]
 80031aa:	fa22 f303 	lsr.w	r3, r2, r3
 80031ae:	4a09      	ldr	r2, [pc, #36]	; (80031d4 <HAL_RCC_ClockConfig+0x1c4>)
 80031b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031b2:	4b09      	ldr	r3, [pc, #36]	; (80031d8 <HAL_RCC_ClockConfig+0x1c8>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7fd fc28 	bl	8000a0c <HAL_InitTick>

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	40023c00 	.word	0x40023c00
 80031cc:	40023800 	.word	0x40023800
 80031d0:	0801bee8 	.word	0x0801bee8
 80031d4:	20000000 	.word	0x20000000
 80031d8:	20000004 	.word	0x20000004

080031dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80031e0:	b084      	sub	sp, #16
 80031e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031e4:	2300      	movs	r3, #0
 80031e6:	607b      	str	r3, [r7, #4]
 80031e8:	2300      	movs	r3, #0
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	2300      	movs	r3, #0
 80031ee:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80031f0:	2300      	movs	r3, #0
 80031f2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031f4:	4b67      	ldr	r3, [pc, #412]	; (8003394 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f003 030c 	and.w	r3, r3, #12
 80031fc:	2b08      	cmp	r3, #8
 80031fe:	d00d      	beq.n	800321c <HAL_RCC_GetSysClockFreq+0x40>
 8003200:	2b08      	cmp	r3, #8
 8003202:	f200 80bd 	bhi.w	8003380 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003206:	2b00      	cmp	r3, #0
 8003208:	d002      	beq.n	8003210 <HAL_RCC_GetSysClockFreq+0x34>
 800320a:	2b04      	cmp	r3, #4
 800320c:	d003      	beq.n	8003216 <HAL_RCC_GetSysClockFreq+0x3a>
 800320e:	e0b7      	b.n	8003380 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003210:	4b61      	ldr	r3, [pc, #388]	; (8003398 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003212:	60bb      	str	r3, [r7, #8]
       break;
 8003214:	e0b7      	b.n	8003386 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003216:	4b61      	ldr	r3, [pc, #388]	; (800339c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003218:	60bb      	str	r3, [r7, #8]
      break;
 800321a:	e0b4      	b.n	8003386 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800321c:	4b5d      	ldr	r3, [pc, #372]	; (8003394 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003224:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003226:	4b5b      	ldr	r3, [pc, #364]	; (8003394 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d04d      	beq.n	80032ce <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003232:	4b58      	ldr	r3, [pc, #352]	; (8003394 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	099b      	lsrs	r3, r3, #6
 8003238:	461a      	mov	r2, r3
 800323a:	f04f 0300 	mov.w	r3, #0
 800323e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003242:	f04f 0100 	mov.w	r1, #0
 8003246:	ea02 0800 	and.w	r8, r2, r0
 800324a:	ea03 0901 	and.w	r9, r3, r1
 800324e:	4640      	mov	r0, r8
 8003250:	4649      	mov	r1, r9
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	014b      	lsls	r3, r1, #5
 800325c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003260:	0142      	lsls	r2, r0, #5
 8003262:	4610      	mov	r0, r2
 8003264:	4619      	mov	r1, r3
 8003266:	ebb0 0008 	subs.w	r0, r0, r8
 800326a:	eb61 0109 	sbc.w	r1, r1, r9
 800326e:	f04f 0200 	mov.w	r2, #0
 8003272:	f04f 0300 	mov.w	r3, #0
 8003276:	018b      	lsls	r3, r1, #6
 8003278:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800327c:	0182      	lsls	r2, r0, #6
 800327e:	1a12      	subs	r2, r2, r0
 8003280:	eb63 0301 	sbc.w	r3, r3, r1
 8003284:	f04f 0000 	mov.w	r0, #0
 8003288:	f04f 0100 	mov.w	r1, #0
 800328c:	00d9      	lsls	r1, r3, #3
 800328e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003292:	00d0      	lsls	r0, r2, #3
 8003294:	4602      	mov	r2, r0
 8003296:	460b      	mov	r3, r1
 8003298:	eb12 0208 	adds.w	r2, r2, r8
 800329c:	eb43 0309 	adc.w	r3, r3, r9
 80032a0:	f04f 0000 	mov.w	r0, #0
 80032a4:	f04f 0100 	mov.w	r1, #0
 80032a8:	0259      	lsls	r1, r3, #9
 80032aa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80032ae:	0250      	lsls	r0, r2, #9
 80032b0:	4602      	mov	r2, r0
 80032b2:	460b      	mov	r3, r1
 80032b4:	4610      	mov	r0, r2
 80032b6:	4619      	mov	r1, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	461a      	mov	r2, r3
 80032bc:	f04f 0300 	mov.w	r3, #0
 80032c0:	f7fc ffee 	bl	80002a0 <__aeabi_uldivmod>
 80032c4:	4602      	mov	r2, r0
 80032c6:	460b      	mov	r3, r1
 80032c8:	4613      	mov	r3, r2
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	e04a      	b.n	8003364 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032ce:	4b31      	ldr	r3, [pc, #196]	; (8003394 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	099b      	lsrs	r3, r3, #6
 80032d4:	461a      	mov	r2, r3
 80032d6:	f04f 0300 	mov.w	r3, #0
 80032da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80032de:	f04f 0100 	mov.w	r1, #0
 80032e2:	ea02 0400 	and.w	r4, r2, r0
 80032e6:	ea03 0501 	and.w	r5, r3, r1
 80032ea:	4620      	mov	r0, r4
 80032ec:	4629      	mov	r1, r5
 80032ee:	f04f 0200 	mov.w	r2, #0
 80032f2:	f04f 0300 	mov.w	r3, #0
 80032f6:	014b      	lsls	r3, r1, #5
 80032f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80032fc:	0142      	lsls	r2, r0, #5
 80032fe:	4610      	mov	r0, r2
 8003300:	4619      	mov	r1, r3
 8003302:	1b00      	subs	r0, r0, r4
 8003304:	eb61 0105 	sbc.w	r1, r1, r5
 8003308:	f04f 0200 	mov.w	r2, #0
 800330c:	f04f 0300 	mov.w	r3, #0
 8003310:	018b      	lsls	r3, r1, #6
 8003312:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003316:	0182      	lsls	r2, r0, #6
 8003318:	1a12      	subs	r2, r2, r0
 800331a:	eb63 0301 	sbc.w	r3, r3, r1
 800331e:	f04f 0000 	mov.w	r0, #0
 8003322:	f04f 0100 	mov.w	r1, #0
 8003326:	00d9      	lsls	r1, r3, #3
 8003328:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800332c:	00d0      	lsls	r0, r2, #3
 800332e:	4602      	mov	r2, r0
 8003330:	460b      	mov	r3, r1
 8003332:	1912      	adds	r2, r2, r4
 8003334:	eb45 0303 	adc.w	r3, r5, r3
 8003338:	f04f 0000 	mov.w	r0, #0
 800333c:	f04f 0100 	mov.w	r1, #0
 8003340:	0299      	lsls	r1, r3, #10
 8003342:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003346:	0290      	lsls	r0, r2, #10
 8003348:	4602      	mov	r2, r0
 800334a:	460b      	mov	r3, r1
 800334c:	4610      	mov	r0, r2
 800334e:	4619      	mov	r1, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	461a      	mov	r2, r3
 8003354:	f04f 0300 	mov.w	r3, #0
 8003358:	f7fc ffa2 	bl	80002a0 <__aeabi_uldivmod>
 800335c:	4602      	mov	r2, r0
 800335e:	460b      	mov	r3, r1
 8003360:	4613      	mov	r3, r2
 8003362:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003364:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	0c1b      	lsrs	r3, r3, #16
 800336a:	f003 0303 	and.w	r3, r3, #3
 800336e:	3301      	adds	r3, #1
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	fbb2 f3f3 	udiv	r3, r2, r3
 800337c:	60bb      	str	r3, [r7, #8]
      break;
 800337e:	e002      	b.n	8003386 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003380:	4b05      	ldr	r3, [pc, #20]	; (8003398 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003382:	60bb      	str	r3, [r7, #8]
      break;
 8003384:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003386:	68bb      	ldr	r3, [r7, #8]
}
 8003388:	4618      	mov	r0, r3
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003392:	bf00      	nop
 8003394:	40023800 	.word	0x40023800
 8003398:	00f42400 	.word	0x00f42400
 800339c:	007a1200 	.word	0x007a1200

080033a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033a4:	4b03      	ldr	r3, [pc, #12]	; (80033b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80033a6:	681b      	ldr	r3, [r3, #0]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	20000000 	.word	0x20000000

080033b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033bc:	f7ff fff0 	bl	80033a0 <HAL_RCC_GetHCLKFreq>
 80033c0:	4602      	mov	r2, r0
 80033c2:	4b05      	ldr	r3, [pc, #20]	; (80033d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	0a9b      	lsrs	r3, r3, #10
 80033c8:	f003 0307 	and.w	r3, r3, #7
 80033cc:	4903      	ldr	r1, [pc, #12]	; (80033dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80033ce:	5ccb      	ldrb	r3, [r1, r3]
 80033d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40023800 	.word	0x40023800
 80033dc:	0801bef8 	.word	0x0801bef8

080033e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033e4:	f7ff ffdc 	bl	80033a0 <HAL_RCC_GetHCLKFreq>
 80033e8:	4602      	mov	r2, r0
 80033ea:	4b05      	ldr	r3, [pc, #20]	; (8003400 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	0b5b      	lsrs	r3, r3, #13
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	4903      	ldr	r1, [pc, #12]	; (8003404 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033f6:	5ccb      	ldrb	r3, [r1, r3]
 80033f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	40023800 	.word	0x40023800
 8003404:	0801bef8 	.word	0x0801bef8

08003408 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	220f      	movs	r2, #15
 8003416:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003418:	4b12      	ldr	r3, [pc, #72]	; (8003464 <HAL_RCC_GetClockConfig+0x5c>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f003 0203 	and.w	r2, r3, #3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003424:	4b0f      	ldr	r3, [pc, #60]	; (8003464 <HAL_RCC_GetClockConfig+0x5c>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003430:	4b0c      	ldr	r3, [pc, #48]	; (8003464 <HAL_RCC_GetClockConfig+0x5c>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800343c:	4b09      	ldr	r3, [pc, #36]	; (8003464 <HAL_RCC_GetClockConfig+0x5c>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	08db      	lsrs	r3, r3, #3
 8003442:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800344a:	4b07      	ldr	r3, [pc, #28]	; (8003468 <HAL_RCC_GetClockConfig+0x60>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 020f 	and.w	r2, r3, #15
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	601a      	str	r2, [r3, #0]
}
 8003456:	bf00      	nop
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	40023800 	.word	0x40023800
 8003468:	40023c00 	.word	0x40023c00

0800346c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e041      	b.n	8003502 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d106      	bne.n	8003498 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f839 	bl	800350a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2202      	movs	r2, #2
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3304      	adds	r3, #4
 80034a8:	4619      	mov	r1, r3
 80034aa:	4610      	mov	r0, r2
 80034ac:	f000 f9d8 	bl	8003860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800350a:	b480      	push	{r7}
 800350c:	b083      	sub	sp, #12
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
	...

08003520 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2b01      	cmp	r3, #1
 8003532:	d001      	beq.n	8003538 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e04e      	b.n	80035d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2202      	movs	r2, #2
 800353c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68da      	ldr	r2, [r3, #12]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0201 	orr.w	r2, r2, #1
 800354e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a23      	ldr	r2, [pc, #140]	; (80035e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d022      	beq.n	80035a0 <HAL_TIM_Base_Start_IT+0x80>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003562:	d01d      	beq.n	80035a0 <HAL_TIM_Base_Start_IT+0x80>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a1f      	ldr	r2, [pc, #124]	; (80035e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d018      	beq.n	80035a0 <HAL_TIM_Base_Start_IT+0x80>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a1e      	ldr	r2, [pc, #120]	; (80035ec <HAL_TIM_Base_Start_IT+0xcc>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d013      	beq.n	80035a0 <HAL_TIM_Base_Start_IT+0x80>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a1c      	ldr	r2, [pc, #112]	; (80035f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d00e      	beq.n	80035a0 <HAL_TIM_Base_Start_IT+0x80>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a1b      	ldr	r2, [pc, #108]	; (80035f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d009      	beq.n	80035a0 <HAL_TIM_Base_Start_IT+0x80>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a19      	ldr	r2, [pc, #100]	; (80035f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d004      	beq.n	80035a0 <HAL_TIM_Base_Start_IT+0x80>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a18      	ldr	r2, [pc, #96]	; (80035fc <HAL_TIM_Base_Start_IT+0xdc>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d111      	bne.n	80035c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 0307 	and.w	r3, r3, #7
 80035aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2b06      	cmp	r3, #6
 80035b0:	d010      	beq.n	80035d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f042 0201 	orr.w	r2, r2, #1
 80035c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035c2:	e007      	b.n	80035d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f042 0201 	orr.w	r2, r2, #1
 80035d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3714      	adds	r7, #20
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	40010000 	.word	0x40010000
 80035e8:	40000400 	.word	0x40000400
 80035ec:	40000800 	.word	0x40000800
 80035f0:	40000c00 	.word	0x40000c00
 80035f4:	40010400 	.word	0x40010400
 80035f8:	40014000 	.word	0x40014000
 80035fc:	40001800 	.word	0x40001800

08003600 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b02      	cmp	r3, #2
 8003614:	d122      	bne.n	800365c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b02      	cmp	r3, #2
 8003622:	d11b      	bne.n	800365c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f06f 0202 	mvn.w	r2, #2
 800362c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	f003 0303 	and.w	r3, r3, #3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f8ee 	bl	8003824 <HAL_TIM_IC_CaptureCallback>
 8003648:	e005      	b.n	8003656 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f8e0 	bl	8003810 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 f8f1 	bl	8003838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	f003 0304 	and.w	r3, r3, #4
 8003666:	2b04      	cmp	r3, #4
 8003668:	d122      	bne.n	80036b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f003 0304 	and.w	r3, r3, #4
 8003674:	2b04      	cmp	r3, #4
 8003676:	d11b      	bne.n	80036b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f06f 0204 	mvn.w	r2, #4
 8003680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2202      	movs	r2, #2
 8003686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f8c4 	bl	8003824 <HAL_TIM_IC_CaptureCallback>
 800369c:	e005      	b.n	80036aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f8b6 	bl	8003810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 f8c7 	bl	8003838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	f003 0308 	and.w	r3, r3, #8
 80036ba:	2b08      	cmp	r3, #8
 80036bc:	d122      	bne.n	8003704 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f003 0308 	and.w	r3, r3, #8
 80036c8:	2b08      	cmp	r3, #8
 80036ca:	d11b      	bne.n	8003704 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f06f 0208 	mvn.w	r2, #8
 80036d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2204      	movs	r2, #4
 80036da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	69db      	ldr	r3, [r3, #28]
 80036e2:	f003 0303 	and.w	r3, r3, #3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f89a 	bl	8003824 <HAL_TIM_IC_CaptureCallback>
 80036f0:	e005      	b.n	80036fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f88c 	bl	8003810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f89d 	bl	8003838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	f003 0310 	and.w	r3, r3, #16
 800370e:	2b10      	cmp	r3, #16
 8003710:	d122      	bne.n	8003758 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	f003 0310 	and.w	r3, r3, #16
 800371c:	2b10      	cmp	r3, #16
 800371e:	d11b      	bne.n	8003758 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f06f 0210 	mvn.w	r2, #16
 8003728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2208      	movs	r2, #8
 800372e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f870 	bl	8003824 <HAL_TIM_IC_CaptureCallback>
 8003744:	e005      	b.n	8003752 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f862 	bl	8003810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f873 	bl	8003838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b01      	cmp	r3, #1
 8003764:	d10e      	bne.n	8003784 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	2b01      	cmp	r3, #1
 8003772:	d107      	bne.n	8003784 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f06f 0201 	mvn.w	r2, #1
 800377c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7fd f8b8 	bl	80008f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800378e:	2b80      	cmp	r3, #128	; 0x80
 8003790:	d10e      	bne.n	80037b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800379c:	2b80      	cmp	r3, #128	; 0x80
 800379e:	d107      	bne.n	80037b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f902 	bl	80039b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ba:	2b40      	cmp	r3, #64	; 0x40
 80037bc:	d10e      	bne.n	80037dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c8:	2b40      	cmp	r3, #64	; 0x40
 80037ca:	d107      	bne.n	80037dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f838 	bl	800384c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	f003 0320 	and.w	r3, r3, #32
 80037e6:	2b20      	cmp	r3, #32
 80037e8:	d10e      	bne.n	8003808 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f003 0320 	and.w	r3, r3, #32
 80037f4:	2b20      	cmp	r3, #32
 80037f6:	d107      	bne.n	8003808 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f06f 0220 	mvn.w	r2, #32
 8003800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f8cc 	bl	80039a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003808:	bf00      	nop
 800380a:	3708      	adds	r7, #8
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a40      	ldr	r2, [pc, #256]	; (8003974 <TIM_Base_SetConfig+0x114>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d013      	beq.n	80038a0 <TIM_Base_SetConfig+0x40>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800387e:	d00f      	beq.n	80038a0 <TIM_Base_SetConfig+0x40>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a3d      	ldr	r2, [pc, #244]	; (8003978 <TIM_Base_SetConfig+0x118>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d00b      	beq.n	80038a0 <TIM_Base_SetConfig+0x40>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a3c      	ldr	r2, [pc, #240]	; (800397c <TIM_Base_SetConfig+0x11c>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d007      	beq.n	80038a0 <TIM_Base_SetConfig+0x40>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a3b      	ldr	r2, [pc, #236]	; (8003980 <TIM_Base_SetConfig+0x120>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d003      	beq.n	80038a0 <TIM_Base_SetConfig+0x40>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a3a      	ldr	r2, [pc, #232]	; (8003984 <TIM_Base_SetConfig+0x124>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d108      	bne.n	80038b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a2f      	ldr	r2, [pc, #188]	; (8003974 <TIM_Base_SetConfig+0x114>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d02b      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c0:	d027      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a2c      	ldr	r2, [pc, #176]	; (8003978 <TIM_Base_SetConfig+0x118>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d023      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a2b      	ldr	r2, [pc, #172]	; (800397c <TIM_Base_SetConfig+0x11c>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d01f      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a2a      	ldr	r2, [pc, #168]	; (8003980 <TIM_Base_SetConfig+0x120>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d01b      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a29      	ldr	r2, [pc, #164]	; (8003984 <TIM_Base_SetConfig+0x124>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d017      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a28      	ldr	r2, [pc, #160]	; (8003988 <TIM_Base_SetConfig+0x128>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d013      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a27      	ldr	r2, [pc, #156]	; (800398c <TIM_Base_SetConfig+0x12c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d00f      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a26      	ldr	r2, [pc, #152]	; (8003990 <TIM_Base_SetConfig+0x130>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d00b      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a25      	ldr	r2, [pc, #148]	; (8003994 <TIM_Base_SetConfig+0x134>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d007      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a24      	ldr	r2, [pc, #144]	; (8003998 <TIM_Base_SetConfig+0x138>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d003      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a23      	ldr	r2, [pc, #140]	; (800399c <TIM_Base_SetConfig+0x13c>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d108      	bne.n	8003924 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003918:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	4313      	orrs	r3, r2
 8003922:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	4313      	orrs	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a0a      	ldr	r2, [pc, #40]	; (8003974 <TIM_Base_SetConfig+0x114>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d003      	beq.n	8003958 <TIM_Base_SetConfig+0xf8>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a0c      	ldr	r2, [pc, #48]	; (8003984 <TIM_Base_SetConfig+0x124>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d103      	bne.n	8003960 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	691a      	ldr	r2, [r3, #16]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	615a      	str	r2, [r3, #20]
}
 8003966:	bf00      	nop
 8003968:	3714      	adds	r7, #20
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	40010000 	.word	0x40010000
 8003978:	40000400 	.word	0x40000400
 800397c:	40000800 	.word	0x40000800
 8003980:	40000c00 	.word	0x40000c00
 8003984:	40010400 	.word	0x40010400
 8003988:	40014000 	.word	0x40014000
 800398c:	40014400 	.word	0x40014400
 8003990:	40014800 	.word	0x40014800
 8003994:	40001800 	.word	0x40001800
 8003998:	40001c00 	.word	0x40001c00
 800399c:	40002000 	.word	0x40002000

080039a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e03f      	b.n	8003a5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d106      	bne.n	80039f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f7fc ffc4 	bl	800097c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2224      	movs	r2, #36	; 0x24
 80039f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68da      	ldr	r2, [r3, #12]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 f829 	bl	8003a64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	691a      	ldr	r2, [r3, #16]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	695a      	ldr	r2, [r3, #20]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68da      	ldr	r2, [r3, #12]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2220      	movs	r2, #32
 8003a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
	...

08003a64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a68:	b09f      	sub	sp, #124	; 0x7c
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003a78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a7a:	68d9      	ldr	r1, [r3, #12]
 8003a7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	ea40 0301 	orr.w	r3, r0, r1
 8003a84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a88:	689a      	ldr	r2, [r3, #8]
 8003a8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	431a      	orrs	r2, r3
 8003a96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003a9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003aa8:	f021 010c 	bic.w	r1, r1, #12
 8003aac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ab2:	430b      	orrs	r3, r1
 8003ab4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	695b      	ldr	r3, [r3, #20]
 8003abc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ac2:	6999      	ldr	r1, [r3, #24]
 8003ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	ea40 0301 	orr.w	r3, r0, r1
 8003acc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	4bc5      	ldr	r3, [pc, #788]	; (8003de8 <UART_SetConfig+0x384>)
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d004      	beq.n	8003ae2 <UART_SetConfig+0x7e>
 8003ad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	4bc3      	ldr	r3, [pc, #780]	; (8003dec <UART_SetConfig+0x388>)
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d103      	bne.n	8003aea <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ae2:	f7ff fc7d 	bl	80033e0 <HAL_RCC_GetPCLK2Freq>
 8003ae6:	6778      	str	r0, [r7, #116]	; 0x74
 8003ae8:	e002      	b.n	8003af0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003aea:	f7ff fc65 	bl	80033b8 <HAL_RCC_GetPCLK1Freq>
 8003aee:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003af0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003af2:	69db      	ldr	r3, [r3, #28]
 8003af4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003af8:	f040 80b6 	bne.w	8003c68 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003afc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003afe:	461c      	mov	r4, r3
 8003b00:	f04f 0500 	mov.w	r5, #0
 8003b04:	4622      	mov	r2, r4
 8003b06:	462b      	mov	r3, r5
 8003b08:	1891      	adds	r1, r2, r2
 8003b0a:	6439      	str	r1, [r7, #64]	; 0x40
 8003b0c:	415b      	adcs	r3, r3
 8003b0e:	647b      	str	r3, [r7, #68]	; 0x44
 8003b10:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b14:	1912      	adds	r2, r2, r4
 8003b16:	eb45 0303 	adc.w	r3, r5, r3
 8003b1a:	f04f 0000 	mov.w	r0, #0
 8003b1e:	f04f 0100 	mov.w	r1, #0
 8003b22:	00d9      	lsls	r1, r3, #3
 8003b24:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b28:	00d0      	lsls	r0, r2, #3
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	1911      	adds	r1, r2, r4
 8003b30:	6639      	str	r1, [r7, #96]	; 0x60
 8003b32:	416b      	adcs	r3, r5
 8003b34:	667b      	str	r3, [r7, #100]	; 0x64
 8003b36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	f04f 0300 	mov.w	r3, #0
 8003b40:	1891      	adds	r1, r2, r2
 8003b42:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b44:	415b      	adcs	r3, r3
 8003b46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b4c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003b50:	f7fc fba6 	bl	80002a0 <__aeabi_uldivmod>
 8003b54:	4602      	mov	r2, r0
 8003b56:	460b      	mov	r3, r1
 8003b58:	4ba5      	ldr	r3, [pc, #660]	; (8003df0 <UART_SetConfig+0x38c>)
 8003b5a:	fba3 2302 	umull	r2, r3, r3, r2
 8003b5e:	095b      	lsrs	r3, r3, #5
 8003b60:	011e      	lsls	r6, r3, #4
 8003b62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b64:	461c      	mov	r4, r3
 8003b66:	f04f 0500 	mov.w	r5, #0
 8003b6a:	4622      	mov	r2, r4
 8003b6c:	462b      	mov	r3, r5
 8003b6e:	1891      	adds	r1, r2, r2
 8003b70:	6339      	str	r1, [r7, #48]	; 0x30
 8003b72:	415b      	adcs	r3, r3
 8003b74:	637b      	str	r3, [r7, #52]	; 0x34
 8003b76:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003b7a:	1912      	adds	r2, r2, r4
 8003b7c:	eb45 0303 	adc.w	r3, r5, r3
 8003b80:	f04f 0000 	mov.w	r0, #0
 8003b84:	f04f 0100 	mov.w	r1, #0
 8003b88:	00d9      	lsls	r1, r3, #3
 8003b8a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b8e:	00d0      	lsls	r0, r2, #3
 8003b90:	4602      	mov	r2, r0
 8003b92:	460b      	mov	r3, r1
 8003b94:	1911      	adds	r1, r2, r4
 8003b96:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b98:	416b      	adcs	r3, r5
 8003b9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	f04f 0300 	mov.w	r3, #0
 8003ba6:	1891      	adds	r1, r2, r2
 8003ba8:	62b9      	str	r1, [r7, #40]	; 0x28
 8003baa:	415b      	adcs	r3, r3
 8003bac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003bb2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003bb6:	f7fc fb73 	bl	80002a0 <__aeabi_uldivmod>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	4b8c      	ldr	r3, [pc, #560]	; (8003df0 <UART_SetConfig+0x38c>)
 8003bc0:	fba3 1302 	umull	r1, r3, r3, r2
 8003bc4:	095b      	lsrs	r3, r3, #5
 8003bc6:	2164      	movs	r1, #100	; 0x64
 8003bc8:	fb01 f303 	mul.w	r3, r1, r3
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	3332      	adds	r3, #50	; 0x32
 8003bd2:	4a87      	ldr	r2, [pc, #540]	; (8003df0 <UART_SetConfig+0x38c>)
 8003bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd8:	095b      	lsrs	r3, r3, #5
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003be0:	441e      	add	r6, r3
 8003be2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003be4:	4618      	mov	r0, r3
 8003be6:	f04f 0100 	mov.w	r1, #0
 8003bea:	4602      	mov	r2, r0
 8003bec:	460b      	mov	r3, r1
 8003bee:	1894      	adds	r4, r2, r2
 8003bf0:	623c      	str	r4, [r7, #32]
 8003bf2:	415b      	adcs	r3, r3
 8003bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8003bf6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bfa:	1812      	adds	r2, r2, r0
 8003bfc:	eb41 0303 	adc.w	r3, r1, r3
 8003c00:	f04f 0400 	mov.w	r4, #0
 8003c04:	f04f 0500 	mov.w	r5, #0
 8003c08:	00dd      	lsls	r5, r3, #3
 8003c0a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003c0e:	00d4      	lsls	r4, r2, #3
 8003c10:	4622      	mov	r2, r4
 8003c12:	462b      	mov	r3, r5
 8003c14:	1814      	adds	r4, r2, r0
 8003c16:	653c      	str	r4, [r7, #80]	; 0x50
 8003c18:	414b      	adcs	r3, r1
 8003c1a:	657b      	str	r3, [r7, #84]	; 0x54
 8003c1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	461a      	mov	r2, r3
 8003c22:	f04f 0300 	mov.w	r3, #0
 8003c26:	1891      	adds	r1, r2, r2
 8003c28:	61b9      	str	r1, [r7, #24]
 8003c2a:	415b      	adcs	r3, r3
 8003c2c:	61fb      	str	r3, [r7, #28]
 8003c2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c32:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003c36:	f7fc fb33 	bl	80002a0 <__aeabi_uldivmod>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	4b6c      	ldr	r3, [pc, #432]	; (8003df0 <UART_SetConfig+0x38c>)
 8003c40:	fba3 1302 	umull	r1, r3, r3, r2
 8003c44:	095b      	lsrs	r3, r3, #5
 8003c46:	2164      	movs	r1, #100	; 0x64
 8003c48:	fb01 f303 	mul.w	r3, r1, r3
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	3332      	adds	r3, #50	; 0x32
 8003c52:	4a67      	ldr	r2, [pc, #412]	; (8003df0 <UART_SetConfig+0x38c>)
 8003c54:	fba2 2303 	umull	r2, r3, r2, r3
 8003c58:	095b      	lsrs	r3, r3, #5
 8003c5a:	f003 0207 	and.w	r2, r3, #7
 8003c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4432      	add	r2, r6
 8003c64:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c66:	e0b9      	b.n	8003ddc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c6a:	461c      	mov	r4, r3
 8003c6c:	f04f 0500 	mov.w	r5, #0
 8003c70:	4622      	mov	r2, r4
 8003c72:	462b      	mov	r3, r5
 8003c74:	1891      	adds	r1, r2, r2
 8003c76:	6139      	str	r1, [r7, #16]
 8003c78:	415b      	adcs	r3, r3
 8003c7a:	617b      	str	r3, [r7, #20]
 8003c7c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003c80:	1912      	adds	r2, r2, r4
 8003c82:	eb45 0303 	adc.w	r3, r5, r3
 8003c86:	f04f 0000 	mov.w	r0, #0
 8003c8a:	f04f 0100 	mov.w	r1, #0
 8003c8e:	00d9      	lsls	r1, r3, #3
 8003c90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c94:	00d0      	lsls	r0, r2, #3
 8003c96:	4602      	mov	r2, r0
 8003c98:	460b      	mov	r3, r1
 8003c9a:	eb12 0804 	adds.w	r8, r2, r4
 8003c9e:	eb43 0905 	adc.w	r9, r3, r5
 8003ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f04f 0100 	mov.w	r1, #0
 8003cac:	f04f 0200 	mov.w	r2, #0
 8003cb0:	f04f 0300 	mov.w	r3, #0
 8003cb4:	008b      	lsls	r3, r1, #2
 8003cb6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003cba:	0082      	lsls	r2, r0, #2
 8003cbc:	4640      	mov	r0, r8
 8003cbe:	4649      	mov	r1, r9
 8003cc0:	f7fc faee 	bl	80002a0 <__aeabi_uldivmod>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	4b49      	ldr	r3, [pc, #292]	; (8003df0 <UART_SetConfig+0x38c>)
 8003cca:	fba3 2302 	umull	r2, r3, r3, r2
 8003cce:	095b      	lsrs	r3, r3, #5
 8003cd0:	011e      	lsls	r6, r3, #4
 8003cd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f04f 0100 	mov.w	r1, #0
 8003cda:	4602      	mov	r2, r0
 8003cdc:	460b      	mov	r3, r1
 8003cde:	1894      	adds	r4, r2, r2
 8003ce0:	60bc      	str	r4, [r7, #8]
 8003ce2:	415b      	adcs	r3, r3
 8003ce4:	60fb      	str	r3, [r7, #12]
 8003ce6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cea:	1812      	adds	r2, r2, r0
 8003cec:	eb41 0303 	adc.w	r3, r1, r3
 8003cf0:	f04f 0400 	mov.w	r4, #0
 8003cf4:	f04f 0500 	mov.w	r5, #0
 8003cf8:	00dd      	lsls	r5, r3, #3
 8003cfa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003cfe:	00d4      	lsls	r4, r2, #3
 8003d00:	4622      	mov	r2, r4
 8003d02:	462b      	mov	r3, r5
 8003d04:	1814      	adds	r4, r2, r0
 8003d06:	64bc      	str	r4, [r7, #72]	; 0x48
 8003d08:	414b      	adcs	r3, r1
 8003d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f04f 0100 	mov.w	r1, #0
 8003d16:	f04f 0200 	mov.w	r2, #0
 8003d1a:	f04f 0300 	mov.w	r3, #0
 8003d1e:	008b      	lsls	r3, r1, #2
 8003d20:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003d24:	0082      	lsls	r2, r0, #2
 8003d26:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003d2a:	f7fc fab9 	bl	80002a0 <__aeabi_uldivmod>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	460b      	mov	r3, r1
 8003d32:	4b2f      	ldr	r3, [pc, #188]	; (8003df0 <UART_SetConfig+0x38c>)
 8003d34:	fba3 1302 	umull	r1, r3, r3, r2
 8003d38:	095b      	lsrs	r3, r3, #5
 8003d3a:	2164      	movs	r1, #100	; 0x64
 8003d3c:	fb01 f303 	mul.w	r3, r1, r3
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	011b      	lsls	r3, r3, #4
 8003d44:	3332      	adds	r3, #50	; 0x32
 8003d46:	4a2a      	ldr	r2, [pc, #168]	; (8003df0 <UART_SetConfig+0x38c>)
 8003d48:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4c:	095b      	lsrs	r3, r3, #5
 8003d4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d52:	441e      	add	r6, r3
 8003d54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d56:	4618      	mov	r0, r3
 8003d58:	f04f 0100 	mov.w	r1, #0
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	460b      	mov	r3, r1
 8003d60:	1894      	adds	r4, r2, r2
 8003d62:	603c      	str	r4, [r7, #0]
 8003d64:	415b      	adcs	r3, r3
 8003d66:	607b      	str	r3, [r7, #4]
 8003d68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d6c:	1812      	adds	r2, r2, r0
 8003d6e:	eb41 0303 	adc.w	r3, r1, r3
 8003d72:	f04f 0400 	mov.w	r4, #0
 8003d76:	f04f 0500 	mov.w	r5, #0
 8003d7a:	00dd      	lsls	r5, r3, #3
 8003d7c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003d80:	00d4      	lsls	r4, r2, #3
 8003d82:	4622      	mov	r2, r4
 8003d84:	462b      	mov	r3, r5
 8003d86:	eb12 0a00 	adds.w	sl, r2, r0
 8003d8a:	eb43 0b01 	adc.w	fp, r3, r1
 8003d8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f04f 0100 	mov.w	r1, #0
 8003d98:	f04f 0200 	mov.w	r2, #0
 8003d9c:	f04f 0300 	mov.w	r3, #0
 8003da0:	008b      	lsls	r3, r1, #2
 8003da2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003da6:	0082      	lsls	r2, r0, #2
 8003da8:	4650      	mov	r0, sl
 8003daa:	4659      	mov	r1, fp
 8003dac:	f7fc fa78 	bl	80002a0 <__aeabi_uldivmod>
 8003db0:	4602      	mov	r2, r0
 8003db2:	460b      	mov	r3, r1
 8003db4:	4b0e      	ldr	r3, [pc, #56]	; (8003df0 <UART_SetConfig+0x38c>)
 8003db6:	fba3 1302 	umull	r1, r3, r3, r2
 8003dba:	095b      	lsrs	r3, r3, #5
 8003dbc:	2164      	movs	r1, #100	; 0x64
 8003dbe:	fb01 f303 	mul.w	r3, r1, r3
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	011b      	lsls	r3, r3, #4
 8003dc6:	3332      	adds	r3, #50	; 0x32
 8003dc8:	4a09      	ldr	r2, [pc, #36]	; (8003df0 <UART_SetConfig+0x38c>)
 8003dca:	fba2 2303 	umull	r2, r3, r2, r3
 8003dce:	095b      	lsrs	r3, r3, #5
 8003dd0:	f003 020f 	and.w	r2, r3, #15
 8003dd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4432      	add	r2, r6
 8003dda:	609a      	str	r2, [r3, #8]
}
 8003ddc:	bf00      	nop
 8003dde:	377c      	adds	r7, #124	; 0x7c
 8003de0:	46bd      	mov	sp, r7
 8003de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003de6:	bf00      	nop
 8003de8:	40011000 	.word	0x40011000
 8003dec:	40011400 	.word	0x40011400
 8003df0:	51eb851f 	.word	0x51eb851f

08003df4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003df4:	b5b0      	push	{r4, r5, r7, lr}
 8003df6:	b08e      	sub	sp, #56	; 0x38
 8003df8:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	2000      	movs	r0, #0
 8003dfe:	f005 ff57 	bl	8009cb0 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8003e02:	4b2a      	ldr	r3, [pc, #168]	; (8003eac <MX_LWIP_Init+0xb8>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8003e08:	4b29      	ldr	r3, [pc, #164]	; (8003eb0 <MX_LWIP_Init+0xbc>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8003e0e:	4b29      	ldr	r3, [pc, #164]	; (8003eb4 <MX_LWIP_Init+0xc0>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8003e14:	4b28      	ldr	r3, [pc, #160]	; (8003eb8 <MX_LWIP_Init+0xc4>)
 8003e16:	9302      	str	r3, [sp, #8]
 8003e18:	4b28      	ldr	r3, [pc, #160]	; (8003ebc <MX_LWIP_Init+0xc8>)
 8003e1a:	9301      	str	r3, [sp, #4]
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	9300      	str	r3, [sp, #0]
 8003e20:	4b24      	ldr	r3, [pc, #144]	; (8003eb4 <MX_LWIP_Init+0xc0>)
 8003e22:	4a23      	ldr	r2, [pc, #140]	; (8003eb0 <MX_LWIP_Init+0xbc>)
 8003e24:	4921      	ldr	r1, [pc, #132]	; (8003eac <MX_LWIP_Init+0xb8>)
 8003e26:	4826      	ldr	r0, [pc, #152]	; (8003ec0 <MX_LWIP_Init+0xcc>)
 8003e28:	f006 fcc6 	bl	800a7b8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003e2c:	4824      	ldr	r0, [pc, #144]	; (8003ec0 <MX_LWIP_Init+0xcc>)
 8003e2e:	f006 fe7d 	bl	800ab2c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8003e32:	4b23      	ldr	r3, [pc, #140]	; (8003ec0 <MX_LWIP_Init+0xcc>)
 8003e34:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003e38:	089b      	lsrs	r3, r3, #2
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d003      	beq.n	8003e4c <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003e44:	481e      	ldr	r0, [pc, #120]	; (8003ec0 <MX_LWIP_Init+0xcc>)
 8003e46:	f006 fe81 	bl	800ab4c <netif_set_up>
 8003e4a:	e002      	b.n	8003e52 <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003e4c:	481c      	ldr	r0, [pc, #112]	; (8003ec0 <MX_LWIP_Init+0xcc>)
 8003e4e:	f006 fee9 	bl	800ac24 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8003e52:	491c      	ldr	r1, [pc, #112]	; (8003ec4 <MX_LWIP_Init+0xd0>)
 8003e54:	481a      	ldr	r0, [pc, #104]	; (8003ec0 <MX_LWIP_Init+0xcc>)
 8003e56:	f006 ff7f 	bl	800ad58 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	623b      	str	r3, [r7, #32]
 8003e5e:	2300      	movs	r3, #0
 8003e60:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8003e62:	f107 0320 	add.w	r3, r7, #32
 8003e66:	2101      	movs	r1, #1
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f000 fda1 	bl	80049b0 <osSemaphoreCreate>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	4a15      	ldr	r2, [pc, #84]	; (8003ec8 <MX_LWIP_Init+0xd4>)
 8003e72:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8003e74:	4b15      	ldr	r3, [pc, #84]	; (8003ecc <MX_LWIP_Init+0xd8>)
 8003e76:	4a12      	ldr	r2, [pc, #72]	; (8003ec0 <MX_LWIP_Init+0xcc>)
 8003e78:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8003e7a:	4b13      	ldr	r3, [pc, #76]	; (8003ec8 <MX_LWIP_Init+0xd4>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a13      	ldr	r2, [pc, #76]	; (8003ecc <MX_LWIP_Init+0xd8>)
 8003e80:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8003e82:	4b13      	ldr	r3, [pc, #76]	; (8003ed0 <MX_LWIP_Init+0xdc>)
 8003e84:	1d3c      	adds	r4, r7, #4
 8003e86:	461d      	mov	r5, r3
 8003e88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e8c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003e90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8003e94:	1d3b      	adds	r3, r7, #4
 8003e96:	490d      	ldr	r1, [pc, #52]	; (8003ecc <MX_LWIP_Init+0xd8>)
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f000 fc8c 	bl	80047b6 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8003e9e:	4808      	ldr	r0, [pc, #32]	; (8003ec0 <MX_LWIP_Init+0xcc>)
 8003ea0:	f00e fff2 	bl	8012e88 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003ea4:	bf00      	nop
 8003ea6:	3728      	adds	r7, #40	; 0x28
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bdb0      	pop	{r4, r5, r7, pc}
 8003eac:	20008770 	.word	0x20008770
 8003eb0:	20008774 	.word	0x20008774
 8003eb4:	20008778 	.word	0x20008778
 8003eb8:	08009bc1 	.word	0x08009bc1
 8003ebc:	08004545 	.word	0x08004545
 8003ec0:	20008738 	.word	0x20008738
 8003ec4:	08004629 	.word	0x08004629
 8003ec8:	2000039c 	.word	0x2000039c
 8003ecc:	20008730 	.word	0x20008730
 8003ed0:	080185dc 	.word	0x080185dc

08003ed4 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b08e      	sub	sp, #56	; 0x38
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003edc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]
 8003ee4:	605a      	str	r2, [r3, #4]
 8003ee6:	609a      	str	r2, [r3, #8]
 8003ee8:	60da      	str	r2, [r3, #12]
 8003eea:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a59      	ldr	r2, [pc, #356]	; (8004058 <HAL_ETH_MspInit+0x184>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	f040 80ac 	bne.w	8004050 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003ef8:	2300      	movs	r3, #0
 8003efa:	623b      	str	r3, [r7, #32]
 8003efc:	4b57      	ldr	r3, [pc, #348]	; (800405c <HAL_ETH_MspInit+0x188>)
 8003efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f00:	4a56      	ldr	r2, [pc, #344]	; (800405c <HAL_ETH_MspInit+0x188>)
 8003f02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f06:	6313      	str	r3, [r2, #48]	; 0x30
 8003f08:	4b54      	ldr	r3, [pc, #336]	; (800405c <HAL_ETH_MspInit+0x188>)
 8003f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f10:	623b      	str	r3, [r7, #32]
 8003f12:	6a3b      	ldr	r3, [r7, #32]
 8003f14:	2300      	movs	r3, #0
 8003f16:	61fb      	str	r3, [r7, #28]
 8003f18:	4b50      	ldr	r3, [pc, #320]	; (800405c <HAL_ETH_MspInit+0x188>)
 8003f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1c:	4a4f      	ldr	r2, [pc, #316]	; (800405c <HAL_ETH_MspInit+0x188>)
 8003f1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f22:	6313      	str	r3, [r2, #48]	; 0x30
 8003f24:	4b4d      	ldr	r3, [pc, #308]	; (800405c <HAL_ETH_MspInit+0x188>)
 8003f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f2c:	61fb      	str	r3, [r7, #28]
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	2300      	movs	r3, #0
 8003f32:	61bb      	str	r3, [r7, #24]
 8003f34:	4b49      	ldr	r3, [pc, #292]	; (800405c <HAL_ETH_MspInit+0x188>)
 8003f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f38:	4a48      	ldr	r2, [pc, #288]	; (800405c <HAL_ETH_MspInit+0x188>)
 8003f3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f3e:	6313      	str	r3, [r2, #48]	; 0x30
 8003f40:	4b46      	ldr	r3, [pc, #280]	; (800405c <HAL_ETH_MspInit+0x188>)
 8003f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f48:	61bb      	str	r3, [r7, #24]
 8003f4a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	617b      	str	r3, [r7, #20]
 8003f50:	4b42      	ldr	r3, [pc, #264]	; (800405c <HAL_ETH_MspInit+0x188>)
 8003f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f54:	4a41      	ldr	r2, [pc, #260]	; (800405c <HAL_ETH_MspInit+0x188>)
 8003f56:	f043 0304 	orr.w	r3, r3, #4
 8003f5a:	6313      	str	r3, [r2, #48]	; 0x30
 8003f5c:	4b3f      	ldr	r3, [pc, #252]	; (800405c <HAL_ETH_MspInit+0x188>)
 8003f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f60:	f003 0304 	and.w	r3, r3, #4
 8003f64:	617b      	str	r3, [r7, #20]
 8003f66:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f68:	2300      	movs	r3, #0
 8003f6a:	613b      	str	r3, [r7, #16]
 8003f6c:	4b3b      	ldr	r3, [pc, #236]	; (800405c <HAL_ETH_MspInit+0x188>)
 8003f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f70:	4a3a      	ldr	r2, [pc, #232]	; (800405c <HAL_ETH_MspInit+0x188>)
 8003f72:	f043 0301 	orr.w	r3, r3, #1
 8003f76:	6313      	str	r3, [r2, #48]	; 0x30
 8003f78:	4b38      	ldr	r3, [pc, #224]	; (800405c <HAL_ETH_MspInit+0x188>)
 8003f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	613b      	str	r3, [r7, #16]
 8003f82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f84:	2300      	movs	r3, #0
 8003f86:	60fb      	str	r3, [r7, #12]
 8003f88:	4b34      	ldr	r3, [pc, #208]	; (800405c <HAL_ETH_MspInit+0x188>)
 8003f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8c:	4a33      	ldr	r2, [pc, #204]	; (800405c <HAL_ETH_MspInit+0x188>)
 8003f8e:	f043 0302 	orr.w	r3, r3, #2
 8003f92:	6313      	str	r3, [r2, #48]	; 0x30
 8003f94:	4b31      	ldr	r3, [pc, #196]	; (800405c <HAL_ETH_MspInit+0x188>)
 8003f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	60fb      	str	r3, [r7, #12]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	60bb      	str	r3, [r7, #8]
 8003fa4:	4b2d      	ldr	r3, [pc, #180]	; (800405c <HAL_ETH_MspInit+0x188>)
 8003fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa8:	4a2c      	ldr	r2, [pc, #176]	; (800405c <HAL_ETH_MspInit+0x188>)
 8003faa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fae:	6313      	str	r3, [r2, #48]	; 0x30
 8003fb0:	4b2a      	ldr	r3, [pc, #168]	; (800405c <HAL_ETH_MspInit+0x188>)
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb8:	60bb      	str	r3, [r7, #8]
 8003fba:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003fbc:	2332      	movs	r3, #50	; 0x32
 8003fbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003fcc:	230b      	movs	r3, #11
 8003fce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	4822      	ldr	r0, [pc, #136]	; (8004060 <HAL_ETH_MspInit+0x18c>)
 8003fd8:	f7fe fbc4 	bl	8002764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003fdc:	2386      	movs	r3, #134	; 0x86
 8003fde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003fec:	230b      	movs	r3, #11
 8003fee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ff0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	481b      	ldr	r0, [pc, #108]	; (8004064 <HAL_ETH_MspInit+0x190>)
 8003ff8:	f7fe fbb4 	bl	8002764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003ffc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004000:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004002:	2302      	movs	r3, #2
 8004004:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004006:	2300      	movs	r3, #0
 8004008:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800400a:	2303      	movs	r3, #3
 800400c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800400e:	230b      	movs	r3, #11
 8004010:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004012:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004016:	4619      	mov	r1, r3
 8004018:	4813      	ldr	r0, [pc, #76]	; (8004068 <HAL_ETH_MspInit+0x194>)
 800401a:	f7fe fba3 	bl	8002764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800401e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004022:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004024:	2302      	movs	r3, #2
 8004026:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004028:	2300      	movs	r3, #0
 800402a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800402c:	2303      	movs	r3, #3
 800402e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004030:	230b      	movs	r3, #11
 8004032:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004034:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004038:	4619      	mov	r1, r3
 800403a:	480c      	ldr	r0, [pc, #48]	; (800406c <HAL_ETH_MspInit+0x198>)
 800403c:	f7fe fb92 	bl	8002764 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8004040:	2200      	movs	r2, #0
 8004042:	2105      	movs	r1, #5
 8004044:	203d      	movs	r0, #61	; 0x3d
 8004046:	f7fd f9bd 	bl	80013c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800404a:	203d      	movs	r0, #61	; 0x3d
 800404c:	f7fd f9d6 	bl	80013fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004050:	bf00      	nop
 8004052:	3738      	adds	r7, #56	; 0x38
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	40028000 	.word	0x40028000
 800405c:	40023800 	.word	0x40023800
 8004060:	40020800 	.word	0x40020800
 8004064:	40020000 	.word	0x40020000
 8004068:	40020400 	.word	0x40020400
 800406c:	40021800 	.word	0x40021800

08004070 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8004078:	4b04      	ldr	r3, [pc, #16]	; (800408c <HAL_ETH_RxCpltCallback+0x1c>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4618      	mov	r0, r3
 800407e:	f000 fd17 	bl	8004ab0 <osSemaphoreRelease>
}
 8004082:	bf00      	nop
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	200003a0 	.word	0x200003a0

08004090 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004090:	b5b0      	push	{r4, r5, r7, lr}
 8004092:	b090      	sub	sp, #64	; 0x40
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004098:	2300      	movs	r3, #0
 800409a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800409c:	4b60      	ldr	r3, [pc, #384]	; (8004220 <low_level_init+0x190>)
 800409e:	4a61      	ldr	r2, [pc, #388]	; (8004224 <low_level_init+0x194>)
 80040a0:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80040a2:	4b5f      	ldr	r3, [pc, #380]	; (8004220 <low_level_init+0x190>)
 80040a4:	2201      	movs	r2, #1
 80040a6:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80040a8:	4b5d      	ldr	r3, [pc, #372]	; (8004220 <low_level_init+0x190>)
 80040aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80040ae:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80040b0:	4b5b      	ldr	r3, [pc, #364]	; (8004220 <low_level_init+0x190>)
 80040b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040b6:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80040b8:	4b59      	ldr	r3, [pc, #356]	; (8004220 <low_level_init+0x190>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80040be:	2300      	movs	r3, #0
 80040c0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 80040c4:	2380      	movs	r3, #128	; 0x80
 80040c6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 80040ca:	23e1      	movs	r3, #225	; 0xe1
 80040cc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0xFE;
 80040d0:	23fe      	movs	r3, #254	; 0xfe
 80040d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0xEC;
 80040d6:	23ec      	movs	r3, #236	; 0xec
 80040d8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x75;
 80040dc:	2375      	movs	r3, #117	; 0x75
 80040de:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 80040e2:	4a4f      	ldr	r2, [pc, #316]	; (8004220 <low_level_init+0x190>)
 80040e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80040e8:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80040ea:	4b4d      	ldr	r3, [pc, #308]	; (8004220 <low_level_init+0x190>)
 80040ec:	2201      	movs	r2, #1
 80040ee:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80040f0:	4b4b      	ldr	r3, [pc, #300]	; (8004220 <low_level_init+0x190>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80040f6:	4b4a      	ldr	r3, [pc, #296]	; (8004220 <low_level_init+0x190>)
 80040f8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80040fc:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80040fe:	4848      	ldr	r0, [pc, #288]	; (8004220 <low_level_init+0x190>)
 8004100:	f7fd f98a 	bl	8001418 <HAL_ETH_Init>
 8004104:	4603      	mov	r3, r0
 8004106:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800410a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800410e:	2b00      	cmp	r3, #0
 8004110:	d108      	bne.n	8004124 <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004118:	f043 0304 	orr.w	r3, r3, #4
 800411c:	b2da      	uxtb	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8004124:	2304      	movs	r3, #4
 8004126:	4a40      	ldr	r2, [pc, #256]	; (8004228 <low_level_init+0x198>)
 8004128:	4940      	ldr	r1, [pc, #256]	; (800422c <low_level_init+0x19c>)
 800412a:	483d      	ldr	r0, [pc, #244]	; (8004220 <low_level_init+0x190>)
 800412c:	f7fd fb10 	bl	8001750 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8004130:	2304      	movs	r3, #4
 8004132:	4a3f      	ldr	r2, [pc, #252]	; (8004230 <low_level_init+0x1a0>)
 8004134:	493f      	ldr	r1, [pc, #252]	; (8004234 <low_level_init+0x1a4>)
 8004136:	483a      	ldr	r0, [pc, #232]	; (8004220 <low_level_init+0x190>)
 8004138:	f7fd fb73 	bl	8001822 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2206      	movs	r2, #6
 8004140:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004144:	4b36      	ldr	r3, [pc, #216]	; (8004220 <low_level_init+0x190>)
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	781a      	ldrb	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004150:	4b33      	ldr	r3, [pc, #204]	; (8004220 <low_level_init+0x190>)
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	785a      	ldrb	r2, [r3, #1]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800415c:	4b30      	ldr	r3, [pc, #192]	; (8004220 <low_level_init+0x190>)
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	789a      	ldrb	r2, [r3, #2]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004168:	4b2d      	ldr	r3, [pc, #180]	; (8004220 <low_level_init+0x190>)
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	78da      	ldrb	r2, [r3, #3]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004174:	4b2a      	ldr	r3, [pc, #168]	; (8004220 <low_level_init+0x190>)
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	791a      	ldrb	r2, [r3, #4]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004180:	4b27      	ldr	r3, [pc, #156]	; (8004220 <low_level_init+0x190>)
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	795a      	ldrb	r2, [r3, #5]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004192:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800419a:	f043 030a 	orr.w	r3, r3, #10
 800419e:	b2da      	uxtb	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 80041a6:	2300      	movs	r3, #0
 80041a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80041aa:	2300      	movs	r3, #0
 80041ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 80041ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041b2:	2101      	movs	r1, #1
 80041b4:	4618      	mov	r0, r3
 80041b6:	f000 fbfb 	bl	80049b0 <osSemaphoreCreate>
 80041ba:	4603      	mov	r3, r0
 80041bc:	4a1e      	ldr	r2, [pc, #120]	; (8004238 <low_level_init+0x1a8>)
 80041be:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80041c0:	4b1e      	ldr	r3, [pc, #120]	; (800423c <low_level_init+0x1ac>)
 80041c2:	f107 040c 	add.w	r4, r7, #12
 80041c6:	461d      	mov	r5, r3
 80041c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80041cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80041d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80041d4:	f107 030c 	add.w	r3, r7, #12
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 faeb 	bl	80047b6 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80041e0:	480f      	ldr	r0, [pc, #60]	; (8004220 <low_level_init+0x190>)
 80041e2:	f7fd fe46 	bl	8001e72 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80041e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80041ea:	461a      	mov	r2, r3
 80041ec:	211d      	movs	r1, #29
 80041ee:	480c      	ldr	r0, [pc, #48]	; (8004220 <low_level_init+0x190>)
 80041f0:	f7fd fd71 	bl	8001cd6 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80041f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f6:	f043 030b 	orr.w	r3, r3, #11
 80041fa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80041fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041fe:	461a      	mov	r2, r3
 8004200:	211d      	movs	r1, #29
 8004202:	4807      	ldr	r0, [pc, #28]	; (8004220 <low_level_init+0x190>)
 8004204:	f7fd fdcf 	bl	8001da6 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8004208:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800420c:	461a      	mov	r2, r3
 800420e:	211d      	movs	r1, #29
 8004210:	4803      	ldr	r0, [pc, #12]	; (8004220 <low_level_init+0x190>)
 8004212:	f7fd fd60 	bl	8001cd6 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004216:	bf00      	nop
 8004218:	3740      	adds	r7, #64	; 0x40
 800421a:	46bd      	mov	sp, r7
 800421c:	bdb0      	pop	{r4, r5, r7, pc}
 800421e:	bf00      	nop
 8004220:	2000a04c 	.word	0x2000a04c
 8004224:	40028000 	.word	0x40028000
 8004228:	2000a094 	.word	0x2000a094
 800422c:	2000877c 	.word	0x2000877c
 8004230:	200087fc 	.word	0x200087fc
 8004234:	20009fcc 	.word	0x20009fcc
 8004238:	200003a0 	.word	0x200003a0
 800423c:	08018600 	.word	0x08018600

08004240 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b08a      	sub	sp, #40	; 0x28
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800424a:	4b4b      	ldr	r3, [pc, #300]	; (8004378 <low_level_output+0x138>)
 800424c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8004252:	2300      	movs	r3, #0
 8004254:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8004256:	2300      	movs	r3, #0
 8004258:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800425a:	2300      	movs	r3, #0
 800425c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800425e:	2300      	movs	r3, #0
 8004260:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8004262:	4b45      	ldr	r3, [pc, #276]	; (8004378 <low_level_output+0x138>)
 8004264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004266:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8004268:	2300      	movs	r3, #0
 800426a:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	623b      	str	r3, [r7, #32]
 8004270:	e05a      	b.n	8004328 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	da03      	bge.n	8004282 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800427a:	23f8      	movs	r3, #248	; 0xf8
 800427c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8004280:	e05c      	b.n	800433c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8004282:	6a3b      	ldr	r3, [r7, #32]
 8004284:	895b      	ldrh	r3, [r3, #10]
 8004286:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8004288:	2300      	movs	r3, #0
 800428a:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800428c:	e02f      	b.n	80042ee <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800428e:	69fa      	ldr	r2, [r7, #28]
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	18d0      	adds	r0, r2, r3
 8004294:	6a3b      	ldr	r3, [r7, #32]
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	18d1      	adds	r1, r2, r3
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80042a2:	3304      	adds	r3, #4
 80042a4:	461a      	mov	r2, r3
 80042a6:	f012 fef4 	bl	8017092 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	da03      	bge.n	80042c0 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80042b8:	23f8      	movs	r3, #248	; 0xf8
 80042ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80042be:	e03d      	b.n	800433c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	4413      	add	r3, r2
 80042cc:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80042d0:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80042dc:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80042de:	697a      	ldr	r2, [r7, #20]
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80042e8:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80042ea:	2300      	movs	r3, #0
 80042ec:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	4413      	add	r3, r2
 80042f4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d8c8      	bhi.n	800428e <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80042fc:	69fa      	ldr	r2, [r7, #28]
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	18d0      	adds	r0, r2, r3
 8004302:	6a3b      	ldr	r3, [r7, #32]
 8004304:	685a      	ldr	r2, [r3, #4]
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	4413      	add	r3, r2
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	4619      	mov	r1, r3
 800430e:	f012 fec0 	bl	8017092 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4413      	add	r3, r2
 8004318:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	4413      	add	r3, r2
 8004320:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8004322:	6a3b      	ldr	r3, [r7, #32]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	623b      	str	r3, [r7, #32]
 8004328:	6a3b      	ldr	r3, [r7, #32]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1a1      	bne.n	8004272 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800432e:	6979      	ldr	r1, [r7, #20]
 8004330:	4811      	ldr	r0, [pc, #68]	; (8004378 <low_level_output+0x138>)
 8004332:	f7fd fae3 	bl	80018fc <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8004336:	2300      	movs	r3, #0
 8004338:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800433c:	4b0e      	ldr	r3, [pc, #56]	; (8004378 <low_level_output+0x138>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004344:	3314      	adds	r3, #20
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0320 	and.w	r3, r3, #32
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00d      	beq.n	800436c <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8004350:	4b09      	ldr	r3, [pc, #36]	; (8004378 <low_level_output+0x138>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004358:	3314      	adds	r3, #20
 800435a:	2220      	movs	r2, #32
 800435c:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800435e:	4b06      	ldr	r3, [pc, #24]	; (8004378 <low_level_output+0x138>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004366:	3304      	adds	r3, #4
 8004368:	2200      	movs	r2, #0
 800436a:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800436c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004370:	4618      	mov	r0, r3
 8004372:	3728      	adds	r7, #40	; 0x28
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	2000a04c 	.word	0x2000a04c

0800437c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b08c      	sub	sp, #48	; 0x30
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004384:	2300      	movs	r3, #0
 8004386:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8004388:	2300      	movs	r3, #0
 800438a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800438c:	2300      	movs	r3, #0
 800438e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8004390:	2300      	movs	r3, #0
 8004392:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8004394:	2300      	movs	r3, #0
 8004396:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8004398:	2300      	movs	r3, #0
 800439a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800439c:	2300      	movs	r3, #0
 800439e:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 80043a0:	484f      	ldr	r0, [pc, #316]	; (80044e0 <low_level_input+0x164>)
 80043a2:	f7fd fb95 	bl	8001ad0 <HAL_ETH_GetReceivedFrame_IT>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d001      	beq.n	80043b0 <low_level_input+0x34>

    return NULL;
 80043ac:	2300      	movs	r3, #0
 80043ae:	e092      	b.n	80044d6 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80043b0:	4b4b      	ldr	r3, [pc, #300]	; (80044e0 <low_level_input+0x164>)
 80043b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b4:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80043b6:	4b4a      	ldr	r3, [pc, #296]	; (80044e0 <low_level_input+0x164>)
 80043b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ba:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80043bc:	89fb      	ldrh	r3, [r7, #14]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d007      	beq.n	80043d2 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80043c2:	89fb      	ldrh	r3, [r7, #14]
 80043c4:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80043c8:	4619      	mov	r1, r3
 80043ca:	2000      	movs	r0, #0
 80043cc:	f006 fd8e 	bl	800aeec <pbuf_alloc>
 80043d0:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80043d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d04b      	beq.n	8004470 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80043d8:	4b41      	ldr	r3, [pc, #260]	; (80044e0 <low_level_input+0x164>)
 80043da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043dc:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80043de:	2300      	movs	r3, #0
 80043e0:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80043e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80043e6:	e040      	b.n	800446a <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80043e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ea:	895b      	ldrh	r3, [r3, #10]
 80043ec:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80043ee:	2300      	movs	r3, #0
 80043f0:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80043f2:	e021      	b.n	8004438 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80043f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f6:	685a      	ldr	r2, [r3, #4]
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	18d0      	adds	r0, r2, r3
 80043fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	18d1      	adds	r1, r2, r3
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004408:	3304      	adds	r3, #4
 800440a:	461a      	mov	r2, r3
 800440c:	f012 fe41 	bl	8017092 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8004416:	6a3b      	ldr	r3, [r7, #32]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800441c:	69fa      	ldr	r2, [r7, #28]
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	4413      	add	r3, r2
 8004422:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004426:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004432:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8004434:	2300      	movs	r3, #0
 8004436:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	4413      	add	r3, r2
 800443e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004442:	4293      	cmp	r3, r2
 8004444:	d8d6      	bhi.n	80043f4 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8004446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	18d0      	adds	r0, r2, r3
 800444e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	4413      	add	r3, r2
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	4619      	mov	r1, r3
 8004458:	f012 fe1b 	bl	8017092 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800445c:	69fa      	ldr	r2, [r7, #28]
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	4413      	add	r3, r2
 8004462:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	62bb      	str	r3, [r7, #40]	; 0x28
 800446a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1bb      	bne.n	80043e8 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004470:	4b1b      	ldr	r3, [pc, #108]	; (80044e0 <low_level_input+0x164>)
 8004472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004474:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004476:	2300      	movs	r3, #0
 8004478:	613b      	str	r3, [r7, #16]
 800447a:	e00b      	b.n	8004494 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800447c:	6a3b      	ldr	r3, [r7, #32]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004484:	6a3b      	ldr	r3, [r7, #32]
 8004486:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004488:	6a3b      	ldr	r3, [r7, #32]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	3301      	adds	r3, #1
 8004492:	613b      	str	r3, [r7, #16]
 8004494:	4b12      	ldr	r3, [pc, #72]	; (80044e0 <low_level_input+0x164>)
 8004496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	429a      	cmp	r2, r3
 800449c:	d3ee      	bcc.n	800447c <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800449e:	4b10      	ldr	r3, [pc, #64]	; (80044e0 <low_level_input+0x164>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80044a4:	4b0e      	ldr	r3, [pc, #56]	; (80044e0 <low_level_input+0x164>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044ac:	3314      	adds	r3, #20
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00d      	beq.n	80044d4 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80044b8:	4b09      	ldr	r3, [pc, #36]	; (80044e0 <low_level_input+0x164>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044c0:	3314      	adds	r3, #20
 80044c2:	2280      	movs	r2, #128	; 0x80
 80044c4:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80044c6:	4b06      	ldr	r3, [pc, #24]	; (80044e0 <low_level_input+0x164>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044ce:	3308      	adds	r3, #8
 80044d0:	2200      	movs	r2, #0
 80044d2:	601a      	str	r2, [r3, #0]
  }
  return p;
 80044d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3730      	adds	r7, #48	; 0x30
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	2000a04c 	.word	0x2000a04c

080044e4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80044f0:	4b12      	ldr	r3, [pc, #72]	; (800453c <ethernetif_input+0x58>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f04f 31ff 	mov.w	r1, #4294967295
 80044f8:	4618      	mov	r0, r3
 80044fa:	f000 fa8b 	bl	8004a14 <osSemaphoreWait>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1f5      	bne.n	80044f0 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8004504:	480e      	ldr	r0, [pc, #56]	; (8004540 <ethernetif_input+0x5c>)
 8004506:	f012 fc39 	bl	8016d7c <sys_mutex_lock>
        p = low_level_input( netif );
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f7ff ff36 	bl	800437c <low_level_input>
 8004510:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00a      	beq.n	800452e <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	68f9      	ldr	r1, [r7, #12]
 800451e:	68b8      	ldr	r0, [r7, #8]
 8004520:	4798      	blx	r3
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d002      	beq.n	800452e <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8004528:	68b8      	ldr	r0, [r7, #8]
 800452a:	f006 ffc3 	bl	800b4b4 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800452e:	4804      	ldr	r0, [pc, #16]	; (8004540 <ethernetif_input+0x5c>)
 8004530:	f012 fc33 	bl	8016d9a <sys_mutex_unlock>
      } while(p!=NULL);
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1e4      	bne.n	8004504 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800453a:	e7d9      	b.n	80044f0 <ethernetif_input+0xc>
 800453c:	200003a0 	.word	0x200003a0
 8004540:	2000b8a4 	.word	0x2000b8a4

08004544 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d106      	bne.n	8004560 <ethernetif_init+0x1c>
 8004552:	4b0e      	ldr	r3, [pc, #56]	; (800458c <ethernetif_init+0x48>)
 8004554:	f240 2235 	movw	r2, #565	; 0x235
 8004558:	490d      	ldr	r1, [pc, #52]	; (8004590 <ethernetif_init+0x4c>)
 800455a:	480e      	ldr	r0, [pc, #56]	; (8004594 <ethernetif_init+0x50>)
 800455c:	f012 fe24 	bl	80171a8 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2273      	movs	r2, #115	; 0x73
 8004564:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2274      	movs	r2, #116	; 0x74
 800456c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a09      	ldr	r2, [pc, #36]	; (8004598 <ethernetif_init+0x54>)
 8004574:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a08      	ldr	r2, [pc, #32]	; (800459c <ethernetif_init+0x58>)
 800457a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f7ff fd87 	bl	8004090 <low_level_init>

  return ERR_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3708      	adds	r7, #8
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	0801861c 	.word	0x0801861c
 8004590:	08018638 	.word	0x08018638
 8004594:	08018648 	.word	0x08018648
 8004598:	08014d55 	.word	0x08014d55
 800459c:	08004241 	.word	0x08004241

080045a0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80045a4:	f7fc fe26 	bl	80011f4 <HAL_GetTick>
 80045a8:	4603      	mov	r3, r0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	bd80      	pop	{r7, pc}
	...

080045b0 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80045b8:	2300      	movs	r3, #0
 80045ba:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80045c0:	f107 0308 	add.w	r3, r7, #8
 80045c4:	461a      	mov	r2, r3
 80045c6:	2101      	movs	r1, #1
 80045c8:	4816      	ldr	r0, [pc, #88]	; (8004624 <ethernetif_set_link+0x74>)
 80045ca:	f7fd fb84 	bl	8001cd6 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	f003 0304 	and.w	r3, r3, #4
 80045d4:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80045de:	f003 0304 	and.w	r3, r3, #4
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d108      	bne.n	80045f8 <ethernetif_set_link+0x48>
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d005      	beq.n	80045f8 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f006 fb49 	bl	800ac88 <netif_set_link_up>
 80045f6:	e011      	b.n	800461c <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004600:	089b      	lsrs	r3, r3, #2
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b00      	cmp	r3, #0
 800460a:	d007      	beq.n	800461c <ethernetif_set_link+0x6c>
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d104      	bne.n	800461c <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4618      	mov	r0, r3
 8004618:	f006 fb6e 	bl	800acf8 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 800461c:	20c8      	movs	r0, #200	; 0xc8
 800461e:	f000 f916 	bl	800484e <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004622:	e7cd      	b.n	80045c0 <ethernetif_set_link+0x10>
 8004624:	2000a04c 	.word	0x2000a04c

08004628 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8004630:	2300      	movs	r3, #0
 8004632:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8004634:	2300      	movs	r3, #0
 8004636:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800463e:	089b      	lsrs	r3, r3, #2
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d05d      	beq.n	8004706 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800464a:	4b34      	ldr	r3, [pc, #208]	; (800471c <ethernetif_update_config+0xf4>)
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d03f      	beq.n	80046d2 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8004652:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004656:	2100      	movs	r1, #0
 8004658:	4830      	ldr	r0, [pc, #192]	; (800471c <ethernetif_update_config+0xf4>)
 800465a:	f7fd fba4 	bl	8001da6 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800465e:	f7fc fdc9 	bl	80011f4 <HAL_GetTick>
 8004662:	4603      	mov	r3, r0
 8004664:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004666:	f107 0308 	add.w	r3, r7, #8
 800466a:	461a      	mov	r2, r3
 800466c:	2101      	movs	r1, #1
 800466e:	482b      	ldr	r0, [pc, #172]	; (800471c <ethernetif_update_config+0xf4>)
 8004670:	f7fd fb31 	bl	8001cd6 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8004674:	f7fc fdbe 	bl	80011f4 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004682:	d828      	bhi.n	80046d6 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	f003 0320 	and.w	r3, r3, #32
 800468a:	2b00      	cmp	r3, #0
 800468c:	d0eb      	beq.n	8004666 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800468e:	f107 0308 	add.w	r3, r7, #8
 8004692:	461a      	mov	r2, r3
 8004694:	2110      	movs	r1, #16
 8004696:	4821      	ldr	r0, [pc, #132]	; (800471c <ethernetif_update_config+0xf4>)
 8004698:	f7fd fb1d 	bl	8001cd6 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	f003 0304 	and.w	r3, r3, #4
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d004      	beq.n	80046b0 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80046a6:	4b1d      	ldr	r3, [pc, #116]	; (800471c <ethernetif_update_config+0xf4>)
 80046a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046ac:	60da      	str	r2, [r3, #12]
 80046ae:	e002      	b.n	80046b6 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80046b0:	4b1a      	ldr	r3, [pc, #104]	; (800471c <ethernetif_update_config+0xf4>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	f003 0302 	and.w	r3, r3, #2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d003      	beq.n	80046c8 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80046c0:	4b16      	ldr	r3, [pc, #88]	; (800471c <ethernetif_update_config+0xf4>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	609a      	str	r2, [r3, #8]
 80046c6:	e016      	b.n	80046f6 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80046c8:	4b14      	ldr	r3, [pc, #80]	; (800471c <ethernetif_update_config+0xf4>)
 80046ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80046ce:	609a      	str	r2, [r3, #8]
 80046d0:	e011      	b.n	80046f6 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 80046d2:	bf00      	nop
 80046d4:	e000      	b.n	80046d8 <ethernetif_update_config+0xb0>
          goto error;
 80046d6:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80046d8:	4b10      	ldr	r3, [pc, #64]	; (800471c <ethernetif_update_config+0xf4>)
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	08db      	lsrs	r3, r3, #3
 80046de:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80046e0:	4b0e      	ldr	r3, [pc, #56]	; (800471c <ethernetif_update_config+0xf4>)
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	085b      	lsrs	r3, r3, #1
 80046e6:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80046e8:	4313      	orrs	r3, r2
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	461a      	mov	r2, r3
 80046ee:	2100      	movs	r1, #0
 80046f0:	480a      	ldr	r0, [pc, #40]	; (800471c <ethernetif_update_config+0xf4>)
 80046f2:	f7fd fb58 	bl	8001da6 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80046f6:	2100      	movs	r1, #0
 80046f8:	4808      	ldr	r0, [pc, #32]	; (800471c <ethernetif_update_config+0xf4>)
 80046fa:	f7fd fc19 	bl	8001f30 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 80046fe:	4807      	ldr	r0, [pc, #28]	; (800471c <ethernetif_update_config+0xf4>)
 8004700:	f7fd fbb7 	bl	8001e72 <HAL_ETH_Start>
 8004704:	e002      	b.n	800470c <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8004706:	4805      	ldr	r0, [pc, #20]	; (800471c <ethernetif_update_config+0xf4>)
 8004708:	f7fd fbe2 	bl	8001ed0 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 f807 	bl	8004720 <ethernetif_notify_conn_changed>
}
 8004712:	bf00      	nop
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	2000a04c 	.word	0x2000a04c

08004720 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	4603      	mov	r3, r0
 800473c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800473e:	2300      	movs	r3, #0
 8004740:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004742:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004746:	2b84      	cmp	r3, #132	; 0x84
 8004748:	d005      	beq.n	8004756 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800474a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	4413      	add	r3, r2
 8004752:	3303      	adds	r3, #3
 8004754:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004756:	68fb      	ldr	r3, [r7, #12]
}
 8004758:	4618      	mov	r0, r3
 800475a:	3714      	adds	r7, #20
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800476a:	f3ef 8305 	mrs	r3, IPSR
 800476e:	607b      	str	r3, [r7, #4]
  return(result);
 8004770:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004772:	2b00      	cmp	r3, #0
 8004774:	bf14      	ite	ne
 8004776:	2301      	movne	r3, #1
 8004778:	2300      	moveq	r3, #0
 800477a:	b2db      	uxtb	r3, r3
}
 800477c:	4618      	mov	r0, r3
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800478c:	f001 fd3c 	bl	8006208 <vTaskStartScheduler>
  
  return osOK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	bd80      	pop	{r7, pc}

08004796 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800479a:	f7ff ffe3 	bl	8004764 <inHandlerMode>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d003      	beq.n	80047ac <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80047a4:	f001 fe54 	bl	8006450 <xTaskGetTickCountFromISR>
 80047a8:	4603      	mov	r3, r0
 80047aa:	e002      	b.n	80047b2 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80047ac:	f001 fe40 	bl	8006430 <xTaskGetTickCount>
 80047b0:	4603      	mov	r3, r0
  }
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80047b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047b8:	b089      	sub	sp, #36	; 0x24
 80047ba:	af04      	add	r7, sp, #16
 80047bc:	6078      	str	r0, [r7, #4]
 80047be:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	695b      	ldr	r3, [r3, #20]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d020      	beq.n	800480a <osThreadCreate+0x54>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d01c      	beq.n	800480a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685c      	ldr	r4, [r3, #4]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681d      	ldr	r5, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	691e      	ldr	r6, [r3, #16]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7ff ffa6 	bl	8004734 <makeFreeRtosPriority>
 80047e8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80047f2:	9202      	str	r2, [sp, #8]
 80047f4:	9301      	str	r3, [sp, #4]
 80047f6:	9100      	str	r1, [sp, #0]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	4632      	mov	r2, r6
 80047fc:	4629      	mov	r1, r5
 80047fe:	4620      	mov	r0, r4
 8004800:	f001 fb24 	bl	8005e4c <xTaskCreateStatic>
 8004804:	4603      	mov	r3, r0
 8004806:	60fb      	str	r3, [r7, #12]
 8004808:	e01c      	b.n	8004844 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685c      	ldr	r4, [r3, #4]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004816:	b29e      	uxth	r6, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800481e:	4618      	mov	r0, r3
 8004820:	f7ff ff88 	bl	8004734 <makeFreeRtosPriority>
 8004824:	4602      	mov	r2, r0
 8004826:	f107 030c 	add.w	r3, r7, #12
 800482a:	9301      	str	r3, [sp, #4]
 800482c:	9200      	str	r2, [sp, #0]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	4632      	mov	r2, r6
 8004832:	4629      	mov	r1, r5
 8004834:	4620      	mov	r0, r4
 8004836:	f001 fb66 	bl	8005f06 <xTaskCreate>
 800483a:	4603      	mov	r3, r0
 800483c:	2b01      	cmp	r3, #1
 800483e:	d001      	beq.n	8004844 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004840:	2300      	movs	r3, #0
 8004842:	e000      	b.n	8004846 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004844:	68fb      	ldr	r3, [r7, #12]
}
 8004846:	4618      	mov	r0, r3
 8004848:	3714      	adds	r7, #20
 800484a:	46bd      	mov	sp, r7
 800484c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800484e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b084      	sub	sp, #16
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d001      	beq.n	8004864 <osDelay+0x16>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	e000      	b.n	8004866 <osDelay+0x18>
 8004864:	2301      	movs	r3, #1
 8004866:	4618      	mov	r0, r3
 8004868:	f001 fc9a 	bl	80061a0 <vTaskDelay>
  
  return osOK;
 800486c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b082      	sub	sp, #8
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d007      	beq.n	8004896 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	4619      	mov	r1, r3
 800488c:	2001      	movs	r0, #1
 800488e:	f000 fc7e 	bl	800518e <xQueueCreateMutexStatic>
 8004892:	4603      	mov	r3, r0
 8004894:	e003      	b.n	800489e <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8004896:	2001      	movs	r0, #1
 8004898:	f000 fc61 	bl	800515e <xQueueCreateMutex>
 800489c:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
	...

080048a8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80048b2:	2300      	movs	r3, #0
 80048b4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d101      	bne.n	80048c0 <osMutexWait+0x18>
    return osErrorParameter;
 80048bc:	2380      	movs	r3, #128	; 0x80
 80048be:	e03a      	b.n	8004936 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80048c0:	2300      	movs	r3, #0
 80048c2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ca:	d103      	bne.n	80048d4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80048cc:	f04f 33ff 	mov.w	r3, #4294967295
 80048d0:	60fb      	str	r3, [r7, #12]
 80048d2:	e009      	b.n	80048e8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d006      	beq.n	80048e8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d101      	bne.n	80048e8 <osMutexWait+0x40>
      ticks = 1;
 80048e4:	2301      	movs	r3, #1
 80048e6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80048e8:	f7ff ff3c 	bl	8004764 <inHandlerMode>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d017      	beq.n	8004922 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80048f2:	f107 0308 	add.w	r3, r7, #8
 80048f6:	461a      	mov	r2, r3
 80048f8:	2100      	movs	r1, #0
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f001 f874 	bl	80059e8 <xQueueReceiveFromISR>
 8004900:	4603      	mov	r3, r0
 8004902:	2b01      	cmp	r3, #1
 8004904:	d001      	beq.n	800490a <osMutexWait+0x62>
      return osErrorOS;
 8004906:	23ff      	movs	r3, #255	; 0xff
 8004908:	e015      	b.n	8004936 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d011      	beq.n	8004934 <osMutexWait+0x8c>
 8004910:	4b0b      	ldr	r3, [pc, #44]	; (8004940 <osMutexWait+0x98>)
 8004912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004916:	601a      	str	r2, [r3, #0]
 8004918:	f3bf 8f4f 	dsb	sy
 800491c:	f3bf 8f6f 	isb	sy
 8004920:	e008      	b.n	8004934 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8004922:	68f9      	ldr	r1, [r7, #12]
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 ff53 	bl	80057d0 <xQueueSemaphoreTake>
 800492a:	4603      	mov	r3, r0
 800492c:	2b01      	cmp	r3, #1
 800492e:	d001      	beq.n	8004934 <osMutexWait+0x8c>
    return osErrorOS;
 8004930:	23ff      	movs	r3, #255	; 0xff
 8004932:	e000      	b.n	8004936 <osMutexWait+0x8e>
  }
  
  return osOK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	e000ed04 	.word	0xe000ed04

08004944 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800494c:	2300      	movs	r3, #0
 800494e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004950:	2300      	movs	r3, #0
 8004952:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8004954:	f7ff ff06 	bl	8004764 <inHandlerMode>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d016      	beq.n	800498c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800495e:	f107 0308 	add.w	r3, r7, #8
 8004962:	4619      	mov	r1, r3
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 fdc6 	bl	80054f6 <xQueueGiveFromISR>
 800496a:	4603      	mov	r3, r0
 800496c:	2b01      	cmp	r3, #1
 800496e:	d001      	beq.n	8004974 <osMutexRelease+0x30>
      return osErrorOS;
 8004970:	23ff      	movs	r3, #255	; 0xff
 8004972:	e017      	b.n	80049a4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d013      	beq.n	80049a2 <osMutexRelease+0x5e>
 800497a:	4b0c      	ldr	r3, [pc, #48]	; (80049ac <osMutexRelease+0x68>)
 800497c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004980:	601a      	str	r2, [r3, #0]
 8004982:	f3bf 8f4f 	dsb	sy
 8004986:	f3bf 8f6f 	isb	sy
 800498a:	e00a      	b.n	80049a2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800498c:	2300      	movs	r3, #0
 800498e:	2200      	movs	r2, #0
 8004990:	2100      	movs	r1, #0
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 fc16 	bl	80051c4 <xQueueGenericSend>
 8004998:	4603      	mov	r3, r0
 800499a:	2b01      	cmp	r3, #1
 800499c:	d001      	beq.n	80049a2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800499e:	23ff      	movs	r3, #255	; 0xff
 80049a0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80049a2:	68fb      	ldr	r3, [r7, #12]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3710      	adds	r7, #16
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	e000ed04 	.word	0xe000ed04

080049b0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af02      	add	r7, sp, #8
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00f      	beq.n	80049e2 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d10a      	bne.n	80049de <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	2203      	movs	r2, #3
 80049ce:	9200      	str	r2, [sp, #0]
 80049d0:	2200      	movs	r2, #0
 80049d2:	2100      	movs	r1, #0
 80049d4:	2001      	movs	r0, #1
 80049d6:	f000 fad7 	bl	8004f88 <xQueueGenericCreateStatic>
 80049da:	4603      	mov	r3, r0
 80049dc:	e016      	b.n	8004a0c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80049de:	2300      	movs	r3, #0
 80049e0:	e014      	b.n	8004a0c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d110      	bne.n	8004a0a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80049e8:	2203      	movs	r2, #3
 80049ea:	2100      	movs	r1, #0
 80049ec:	2001      	movs	r0, #1
 80049ee:	f000 fb43 	bl	8005078 <xQueueGenericCreate>
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d005      	beq.n	8004a06 <osSemaphoreCreate+0x56>
 80049fa:	2300      	movs	r3, #0
 80049fc:	2200      	movs	r2, #0
 80049fe:	2100      	movs	r1, #0
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	f000 fbdf 	bl	80051c4 <xQueueGenericSend>
      return sema;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	e000      	b.n	8004a0c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8004a0a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3710      	adds	r7, #16
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004a1e:	2300      	movs	r3, #0
 8004a20:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d101      	bne.n	8004a2c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004a28:	2380      	movs	r3, #128	; 0x80
 8004a2a:	e03a      	b.n	8004aa2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a36:	d103      	bne.n	8004a40 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8004a38:	f04f 33ff 	mov.w	r3, #4294967295
 8004a3c:	60fb      	str	r3, [r7, #12]
 8004a3e:	e009      	b.n	8004a54 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d006      	beq.n	8004a54 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d101      	bne.n	8004a54 <osSemaphoreWait+0x40>
      ticks = 1;
 8004a50:	2301      	movs	r3, #1
 8004a52:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004a54:	f7ff fe86 	bl	8004764 <inHandlerMode>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d017      	beq.n	8004a8e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004a5e:	f107 0308 	add.w	r3, r7, #8
 8004a62:	461a      	mov	r2, r3
 8004a64:	2100      	movs	r1, #0
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 ffbe 	bl	80059e8 <xQueueReceiveFromISR>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d001      	beq.n	8004a76 <osSemaphoreWait+0x62>
      return osErrorOS;
 8004a72:	23ff      	movs	r3, #255	; 0xff
 8004a74:	e015      	b.n	8004aa2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d011      	beq.n	8004aa0 <osSemaphoreWait+0x8c>
 8004a7c:	4b0b      	ldr	r3, [pc, #44]	; (8004aac <osSemaphoreWait+0x98>)
 8004a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a82:	601a      	str	r2, [r3, #0]
 8004a84:	f3bf 8f4f 	dsb	sy
 8004a88:	f3bf 8f6f 	isb	sy
 8004a8c:	e008      	b.n	8004aa0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8004a8e:	68f9      	ldr	r1, [r7, #12]
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 fe9d 	bl	80057d0 <xQueueSemaphoreTake>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d001      	beq.n	8004aa0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8004a9c:	23ff      	movs	r3, #255	; 0xff
 8004a9e:	e000      	b.n	8004aa2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	e000ed04 	.word	0xe000ed04

08004ab0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004abc:	2300      	movs	r3, #0
 8004abe:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8004ac0:	f7ff fe50 	bl	8004764 <inHandlerMode>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d016      	beq.n	8004af8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004aca:	f107 0308 	add.w	r3, r7, #8
 8004ace:	4619      	mov	r1, r3
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 fd10 	bl	80054f6 <xQueueGiveFromISR>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d001      	beq.n	8004ae0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8004adc:	23ff      	movs	r3, #255	; 0xff
 8004ade:	e017      	b.n	8004b10 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d013      	beq.n	8004b0e <osSemaphoreRelease+0x5e>
 8004ae6:	4b0c      	ldr	r3, [pc, #48]	; (8004b18 <osSemaphoreRelease+0x68>)
 8004ae8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aec:	601a      	str	r2, [r3, #0]
 8004aee:	f3bf 8f4f 	dsb	sy
 8004af2:	f3bf 8f6f 	isb	sy
 8004af6:	e00a      	b.n	8004b0e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8004af8:	2300      	movs	r3, #0
 8004afa:	2200      	movs	r2, #0
 8004afc:	2100      	movs	r1, #0
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 fb60 	bl	80051c4 <xQueueGenericSend>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d001      	beq.n	8004b0e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8004b0a:	23ff      	movs	r3, #255	; 0xff
 8004b0c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	e000ed04 	.word	0xe000ed04

08004b1c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8004b24:	f7ff fe1e 	bl	8004764 <inHandlerMode>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d001      	beq.n	8004b32 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8004b2e:	2382      	movs	r3, #130	; 0x82
 8004b30:	e003      	b.n	8004b3a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f001 f814 	bl	8005b60 <vQueueDelete>

  return osOK; 
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3708      	adds	r7, #8
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004b42:	b590      	push	{r4, r7, lr}
 8004b44:	b085      	sub	sp, #20
 8004b46:	af02      	add	r7, sp, #8
 8004b48:	6078      	str	r0, [r7, #4]
 8004b4a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d011      	beq.n	8004b78 <osMessageCreate+0x36>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00d      	beq.n	8004b78 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6818      	ldr	r0, [r3, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6859      	ldr	r1, [r3, #4]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	689a      	ldr	r2, [r3, #8]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	2400      	movs	r4, #0
 8004b6e:	9400      	str	r4, [sp, #0]
 8004b70:	f000 fa0a 	bl	8004f88 <xQueueGenericCreateStatic>
 8004b74:	4603      	mov	r3, r0
 8004b76:	e008      	b.n	8004b8a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6818      	ldr	r0, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	4619      	mov	r1, r3
 8004b84:	f000 fa78 	bl	8005078 <xQueueGenericCreate>
 8004b88:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd90      	pop	{r4, r7, pc}
	...

08004b94 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b086      	sub	sp, #24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d101      	bne.n	8004bb2 <osMessagePut+0x1e>
    ticks = 1;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8004bb2:	f7ff fdd7 	bl	8004764 <inHandlerMode>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d018      	beq.n	8004bee <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004bbc:	f107 0210 	add.w	r2, r7, #16
 8004bc0:	f107 0108 	add.w	r1, r7, #8
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f000 fbfa 	bl	80053c0 <xQueueGenericSendFromISR>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d001      	beq.n	8004bd6 <osMessagePut+0x42>
      return osErrorOS;
 8004bd2:	23ff      	movs	r3, #255	; 0xff
 8004bd4:	e018      	b.n	8004c08 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d014      	beq.n	8004c06 <osMessagePut+0x72>
 8004bdc:	4b0c      	ldr	r3, [pc, #48]	; (8004c10 <osMessagePut+0x7c>)
 8004bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004be2:	601a      	str	r2, [r3, #0]
 8004be4:	f3bf 8f4f 	dsb	sy
 8004be8:	f3bf 8f6f 	isb	sy
 8004bec:	e00b      	b.n	8004c06 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8004bee:	f107 0108 	add.w	r1, r7, #8
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f000 fae4 	bl	80051c4 <xQueueGenericSend>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d001      	beq.n	8004c06 <osMessagePut+0x72>
      return osErrorOS;
 8004c02:	23ff      	movs	r3, #255	; 0xff
 8004c04:	e000      	b.n	8004c08 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3718      	adds	r7, #24
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	e000ed04 	.word	0xe000ed04

08004c14 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004c14:	b590      	push	{r4, r7, lr}
 8004c16:	b08b      	sub	sp, #44	; 0x2c
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8004c24:	2300      	movs	r3, #0
 8004c26:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10a      	bne.n	8004c44 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8004c2e:	2380      	movs	r3, #128	; 0x80
 8004c30:	617b      	str	r3, [r7, #20]
    return event;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	461c      	mov	r4, r3
 8004c36:	f107 0314 	add.w	r3, r7, #20
 8004c3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004c3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004c42:	e054      	b.n	8004cee <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8004c44:	2300      	movs	r3, #0
 8004c46:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c52:	d103      	bne.n	8004c5c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8004c54:	f04f 33ff 	mov.w	r3, #4294967295
 8004c58:	627b      	str	r3, [r7, #36]	; 0x24
 8004c5a:	e009      	b.n	8004c70 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d006      	beq.n	8004c70 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8004c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d101      	bne.n	8004c70 <osMessageGet+0x5c>
      ticks = 1;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8004c70:	f7ff fd78 	bl	8004764 <inHandlerMode>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d01c      	beq.n	8004cb4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8004c7a:	f107 0220 	add.w	r2, r7, #32
 8004c7e:	f107 0314 	add.w	r3, r7, #20
 8004c82:	3304      	adds	r3, #4
 8004c84:	4619      	mov	r1, r3
 8004c86:	68b8      	ldr	r0, [r7, #8]
 8004c88:	f000 feae 	bl	80059e8 <xQueueReceiveFromISR>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d102      	bne.n	8004c98 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8004c92:	2310      	movs	r3, #16
 8004c94:	617b      	str	r3, [r7, #20]
 8004c96:	e001      	b.n	8004c9c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004c9c:	6a3b      	ldr	r3, [r7, #32]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d01d      	beq.n	8004cde <osMessageGet+0xca>
 8004ca2:	4b15      	ldr	r3, [pc, #84]	; (8004cf8 <osMessageGet+0xe4>)
 8004ca4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ca8:	601a      	str	r2, [r3, #0]
 8004caa:	f3bf 8f4f 	dsb	sy
 8004cae:	f3bf 8f6f 	isb	sy
 8004cb2:	e014      	b.n	8004cde <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8004cb4:	f107 0314 	add.w	r3, r7, #20
 8004cb8:	3304      	adds	r3, #4
 8004cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	68b8      	ldr	r0, [r7, #8]
 8004cc0:	f000 fca6 	bl	8005610 <xQueueReceive>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d102      	bne.n	8004cd0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8004cca:	2310      	movs	r3, #16
 8004ccc:	617b      	str	r3, [r7, #20]
 8004cce:	e006      	b.n	8004cde <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <osMessageGet+0xc6>
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	e000      	b.n	8004cdc <osMessageGet+0xc8>
 8004cda:	2340      	movs	r3, #64	; 0x40
 8004cdc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	461c      	mov	r4, r3
 8004ce2:	f107 0314 	add.w	r3, r7, #20
 8004ce6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004cea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	372c      	adds	r7, #44	; 0x2c
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd90      	pop	{r4, r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	e000ed04 	.word	0xe000ed04

08004cfc <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8004d04:	f7ff fd2e 	bl	8004764 <inHandlerMode>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d004      	beq.n	8004d18 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 ff08 	bl	8005b24 <uxQueueMessagesWaitingFromISR>
 8004d14:	4603      	mov	r3, r0
 8004d16:	e003      	b.n	8004d20 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 fee5 	bl	8005ae8 <uxQueueMessagesWaiting>
 8004d1e:	4603      	mov	r3, r0
  }
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3708      	adds	r7, #8
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8004d30:	f7ff fd18 	bl	8004764 <inHandlerMode>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <osMessageDelete+0x16>
    return osErrorISR;
 8004d3a:	2382      	movs	r3, #130	; 0x82
 8004d3c:	e003      	b.n	8004d46 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 ff0e 	bl	8005b60 <vQueueDelete>

  return osOK; 
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b083      	sub	sp, #12
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f103 0208 	add.w	r2, r3, #8
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f04f 32ff 	mov.w	r2, #4294967295
 8004d66:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f103 0208 	add.w	r2, r3, #8
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f103 0208 	add.w	r2, r3, #8
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004d82:	bf00      	nop
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004d8e:	b480      	push	{r7}
 8004d90:	b083      	sub	sp, #12
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d9c:	bf00      	nop
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	689a      	ldr	r2, [r3, #8]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	683a      	ldr	r2, [r7, #0]
 8004dcc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	683a      	ldr	r2, [r7, #0]
 8004dd2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	1c5a      	adds	r2, r3, #1
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	601a      	str	r2, [r3, #0]
}
 8004de4:	bf00      	nop
 8004de6:	3714      	adds	r7, #20
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e06:	d103      	bne.n	8004e10 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	60fb      	str	r3, [r7, #12]
 8004e0e:	e00c      	b.n	8004e2a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	3308      	adds	r3, #8
 8004e14:	60fb      	str	r3, [r7, #12]
 8004e16:	e002      	b.n	8004e1e <vListInsert+0x2e>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	60fb      	str	r3, [r7, #12]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68ba      	ldr	r2, [r7, #8]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d2f6      	bcs.n	8004e18 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	683a      	ldr	r2, [r7, #0]
 8004e38:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	683a      	ldr	r2, [r7, #0]
 8004e44:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	1c5a      	adds	r2, r3, #1
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	601a      	str	r2, [r3, #0]
}
 8004e56:	bf00      	nop
 8004e58:	3714      	adds	r7, #20
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr

08004e62 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004e62:	b480      	push	{r7}
 8004e64:	b085      	sub	sp, #20
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	6892      	ldr	r2, [r2, #8]
 8004e78:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	6852      	ldr	r2, [r2, #4]
 8004e82:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d103      	bne.n	8004e96 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	689a      	ldr	r2, [r3, #8]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	1e5a      	subs	r2, r3, #1
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3714      	adds	r7, #20
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
	...

08004eb8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d10a      	bne.n	8004ee2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed0:	f383 8811 	msr	BASEPRI, r3
 8004ed4:	f3bf 8f6f 	isb	sy
 8004ed8:	f3bf 8f4f 	dsb	sy
 8004edc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004ede:	bf00      	nop
 8004ee0:	e7fe      	b.n	8004ee0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004ee2:	f002 f917 	bl	8007114 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eee:	68f9      	ldr	r1, [r7, #12]
 8004ef0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ef2:	fb01 f303 	mul.w	r3, r1, r3
 8004ef6:	441a      	add	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f12:	3b01      	subs	r3, #1
 8004f14:	68f9      	ldr	r1, [r7, #12]
 8004f16:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004f18:	fb01 f303 	mul.w	r3, r1, r3
 8004f1c:	441a      	add	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	22ff      	movs	r2, #255	; 0xff
 8004f26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	22ff      	movs	r2, #255	; 0xff
 8004f2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d114      	bne.n	8004f62 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d01a      	beq.n	8004f76 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	3310      	adds	r3, #16
 8004f44:	4618      	mov	r0, r3
 8004f46:	f001 fbd3 	bl	80066f0 <xTaskRemoveFromEventList>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d012      	beq.n	8004f76 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004f50:	4b0c      	ldr	r3, [pc, #48]	; (8004f84 <xQueueGenericReset+0xcc>)
 8004f52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f56:	601a      	str	r2, [r3, #0]
 8004f58:	f3bf 8f4f 	dsb	sy
 8004f5c:	f3bf 8f6f 	isb	sy
 8004f60:	e009      	b.n	8004f76 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	3310      	adds	r3, #16
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7ff fef1 	bl	8004d4e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	3324      	adds	r3, #36	; 0x24
 8004f70:	4618      	mov	r0, r3
 8004f72:	f7ff feec 	bl	8004d4e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004f76:	f002 f8fd 	bl	8007174 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004f7a:	2301      	movs	r3, #1
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3710      	adds	r7, #16
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	e000ed04 	.word	0xe000ed04

08004f88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b08e      	sub	sp, #56	; 0x38
 8004f8c:	af02      	add	r7, sp, #8
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
 8004f94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10a      	bne.n	8004fb2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa0:	f383 8811 	msr	BASEPRI, r3
 8004fa4:	f3bf 8f6f 	isb	sy
 8004fa8:	f3bf 8f4f 	dsb	sy
 8004fac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004fae:	bf00      	nop
 8004fb0:	e7fe      	b.n	8004fb0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d10a      	bne.n	8004fce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fbc:	f383 8811 	msr	BASEPRI, r3
 8004fc0:	f3bf 8f6f 	isb	sy
 8004fc4:	f3bf 8f4f 	dsb	sy
 8004fc8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004fca:	bf00      	nop
 8004fcc:	e7fe      	b.n	8004fcc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d002      	beq.n	8004fda <xQueueGenericCreateStatic+0x52>
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d001      	beq.n	8004fde <xQueueGenericCreateStatic+0x56>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e000      	b.n	8004fe0 <xQueueGenericCreateStatic+0x58>
 8004fde:	2300      	movs	r3, #0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10a      	bne.n	8004ffa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe8:	f383 8811 	msr	BASEPRI, r3
 8004fec:	f3bf 8f6f 	isb	sy
 8004ff0:	f3bf 8f4f 	dsb	sy
 8004ff4:	623b      	str	r3, [r7, #32]
}
 8004ff6:	bf00      	nop
 8004ff8:	e7fe      	b.n	8004ff8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d102      	bne.n	8005006 <xQueueGenericCreateStatic+0x7e>
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <xQueueGenericCreateStatic+0x82>
 8005006:	2301      	movs	r3, #1
 8005008:	e000      	b.n	800500c <xQueueGenericCreateStatic+0x84>
 800500a:	2300      	movs	r3, #0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10a      	bne.n	8005026 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005014:	f383 8811 	msr	BASEPRI, r3
 8005018:	f3bf 8f6f 	isb	sy
 800501c:	f3bf 8f4f 	dsb	sy
 8005020:	61fb      	str	r3, [r7, #28]
}
 8005022:	bf00      	nop
 8005024:	e7fe      	b.n	8005024 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005026:	2348      	movs	r3, #72	; 0x48
 8005028:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	2b48      	cmp	r3, #72	; 0x48
 800502e:	d00a      	beq.n	8005046 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005034:	f383 8811 	msr	BASEPRI, r3
 8005038:	f3bf 8f6f 	isb	sy
 800503c:	f3bf 8f4f 	dsb	sy
 8005040:	61bb      	str	r3, [r7, #24]
}
 8005042:	bf00      	nop
 8005044:	e7fe      	b.n	8005044 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005046:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800504c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00d      	beq.n	800506e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005054:	2201      	movs	r2, #1
 8005056:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800505a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800505e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005060:	9300      	str	r3, [sp, #0]
 8005062:	4613      	mov	r3, r2
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	68b9      	ldr	r1, [r7, #8]
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	f000 f83f 	bl	80050ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800506e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005070:	4618      	mov	r0, r3
 8005072:	3730      	adds	r7, #48	; 0x30
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005078:	b580      	push	{r7, lr}
 800507a:	b08a      	sub	sp, #40	; 0x28
 800507c:	af02      	add	r7, sp, #8
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	4613      	mov	r3, r2
 8005084:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d10a      	bne.n	80050a2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800508c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005090:	f383 8811 	msr	BASEPRI, r3
 8005094:	f3bf 8f6f 	isb	sy
 8005098:	f3bf 8f4f 	dsb	sy
 800509c:	613b      	str	r3, [r7, #16]
}
 800509e:	bf00      	nop
 80050a0:	e7fe      	b.n	80050a0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	68ba      	ldr	r2, [r7, #8]
 80050a6:	fb02 f303 	mul.w	r3, r2, r3
 80050aa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	3348      	adds	r3, #72	; 0x48
 80050b0:	4618      	mov	r0, r3
 80050b2:	f002 f951 	bl	8007358 <pvPortMalloc>
 80050b6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d011      	beq.n	80050e2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	3348      	adds	r3, #72	; 0x48
 80050c6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80050d0:	79fa      	ldrb	r2, [r7, #7]
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	4613      	mov	r3, r2
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	68b9      	ldr	r1, [r7, #8]
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f000 f805 	bl	80050ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80050e2:	69bb      	ldr	r3, [r7, #24]
	}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3720      	adds	r7, #32
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
 80050f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d103      	bne.n	8005108 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	69ba      	ldr	r2, [r7, #24]
 8005104:	601a      	str	r2, [r3, #0]
 8005106:	e002      	b.n	800510e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	68ba      	ldr	r2, [r7, #8]
 8005118:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800511a:	2101      	movs	r1, #1
 800511c:	69b8      	ldr	r0, [r7, #24]
 800511e:	f7ff fecb 	bl	8004eb8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005122:	bf00      	nop
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800512a:	b580      	push	{r7, lr}
 800512c:	b082      	sub	sp, #8
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00e      	beq.n	8005156 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800514a:	2300      	movs	r3, #0
 800514c:	2200      	movs	r2, #0
 800514e:	2100      	movs	r1, #0
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 f837 	bl	80051c4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005156:	bf00      	nop
 8005158:	3708      	adds	r7, #8
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800515e:	b580      	push	{r7, lr}
 8005160:	b086      	sub	sp, #24
 8005162:	af00      	add	r7, sp, #0
 8005164:	4603      	mov	r3, r0
 8005166:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005168:	2301      	movs	r3, #1
 800516a:	617b      	str	r3, [r7, #20]
 800516c:	2300      	movs	r3, #0
 800516e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005170:	79fb      	ldrb	r3, [r7, #7]
 8005172:	461a      	mov	r2, r3
 8005174:	6939      	ldr	r1, [r7, #16]
 8005176:	6978      	ldr	r0, [r7, #20]
 8005178:	f7ff ff7e 	bl	8005078 <xQueueGenericCreate>
 800517c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f7ff ffd3 	bl	800512a <prvInitialiseMutex>

		return xNewQueue;
 8005184:	68fb      	ldr	r3, [r7, #12]
	}
 8005186:	4618      	mov	r0, r3
 8005188:	3718      	adds	r7, #24
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800518e:	b580      	push	{r7, lr}
 8005190:	b088      	sub	sp, #32
 8005192:	af02      	add	r7, sp, #8
 8005194:	4603      	mov	r3, r0
 8005196:	6039      	str	r1, [r7, #0]
 8005198:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800519a:	2301      	movs	r3, #1
 800519c:	617b      	str	r3, [r7, #20]
 800519e:	2300      	movs	r3, #0
 80051a0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80051a2:	79fb      	ldrb	r3, [r7, #7]
 80051a4:	9300      	str	r3, [sp, #0]
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	2200      	movs	r2, #0
 80051aa:	6939      	ldr	r1, [r7, #16]
 80051ac:	6978      	ldr	r0, [r7, #20]
 80051ae:	f7ff feeb 	bl	8004f88 <xQueueGenericCreateStatic>
 80051b2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80051b4:	68f8      	ldr	r0, [r7, #12]
 80051b6:	f7ff ffb8 	bl	800512a <prvInitialiseMutex>

		return xNewQueue;
 80051ba:	68fb      	ldr	r3, [r7, #12]
	}
 80051bc:	4618      	mov	r0, r3
 80051be:	3718      	adds	r7, #24
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b08e      	sub	sp, #56	; 0x38
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
 80051d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80051d2:	2300      	movs	r3, #0
 80051d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80051da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d10a      	bne.n	80051f6 <xQueueGenericSend+0x32>
	__asm volatile
 80051e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e4:	f383 8811 	msr	BASEPRI, r3
 80051e8:	f3bf 8f6f 	isb	sy
 80051ec:	f3bf 8f4f 	dsb	sy
 80051f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80051f2:	bf00      	nop
 80051f4:	e7fe      	b.n	80051f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d103      	bne.n	8005204 <xQueueGenericSend+0x40>
 80051fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005200:	2b00      	cmp	r3, #0
 8005202:	d101      	bne.n	8005208 <xQueueGenericSend+0x44>
 8005204:	2301      	movs	r3, #1
 8005206:	e000      	b.n	800520a <xQueueGenericSend+0x46>
 8005208:	2300      	movs	r3, #0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d10a      	bne.n	8005224 <xQueueGenericSend+0x60>
	__asm volatile
 800520e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005212:	f383 8811 	msr	BASEPRI, r3
 8005216:	f3bf 8f6f 	isb	sy
 800521a:	f3bf 8f4f 	dsb	sy
 800521e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005220:	bf00      	nop
 8005222:	e7fe      	b.n	8005222 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	2b02      	cmp	r3, #2
 8005228:	d103      	bne.n	8005232 <xQueueGenericSend+0x6e>
 800522a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800522e:	2b01      	cmp	r3, #1
 8005230:	d101      	bne.n	8005236 <xQueueGenericSend+0x72>
 8005232:	2301      	movs	r3, #1
 8005234:	e000      	b.n	8005238 <xQueueGenericSend+0x74>
 8005236:	2300      	movs	r3, #0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d10a      	bne.n	8005252 <xQueueGenericSend+0x8e>
	__asm volatile
 800523c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005240:	f383 8811 	msr	BASEPRI, r3
 8005244:	f3bf 8f6f 	isb	sy
 8005248:	f3bf 8f4f 	dsb	sy
 800524c:	623b      	str	r3, [r7, #32]
}
 800524e:	bf00      	nop
 8005250:	e7fe      	b.n	8005250 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005252:	f001 fc0d 	bl	8006a70 <xTaskGetSchedulerState>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d102      	bne.n	8005262 <xQueueGenericSend+0x9e>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d101      	bne.n	8005266 <xQueueGenericSend+0xa2>
 8005262:	2301      	movs	r3, #1
 8005264:	e000      	b.n	8005268 <xQueueGenericSend+0xa4>
 8005266:	2300      	movs	r3, #0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d10a      	bne.n	8005282 <xQueueGenericSend+0xbe>
	__asm volatile
 800526c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005270:	f383 8811 	msr	BASEPRI, r3
 8005274:	f3bf 8f6f 	isb	sy
 8005278:	f3bf 8f4f 	dsb	sy
 800527c:	61fb      	str	r3, [r7, #28]
}
 800527e:	bf00      	nop
 8005280:	e7fe      	b.n	8005280 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005282:	f001 ff47 	bl	8007114 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005288:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800528a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800528e:	429a      	cmp	r2, r3
 8005290:	d302      	bcc.n	8005298 <xQueueGenericSend+0xd4>
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2b02      	cmp	r3, #2
 8005296:	d129      	bne.n	80052ec <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005298:	683a      	ldr	r2, [r7, #0]
 800529a:	68b9      	ldr	r1, [r7, #8]
 800529c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800529e:	f000 fc9a 	bl	8005bd6 <prvCopyDataToQueue>
 80052a2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d010      	beq.n	80052ce <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ae:	3324      	adds	r3, #36	; 0x24
 80052b0:	4618      	mov	r0, r3
 80052b2:	f001 fa1d 	bl	80066f0 <xTaskRemoveFromEventList>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d013      	beq.n	80052e4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80052bc:	4b3f      	ldr	r3, [pc, #252]	; (80053bc <xQueueGenericSend+0x1f8>)
 80052be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052c2:	601a      	str	r2, [r3, #0]
 80052c4:	f3bf 8f4f 	dsb	sy
 80052c8:	f3bf 8f6f 	isb	sy
 80052cc:	e00a      	b.n	80052e4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80052ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d007      	beq.n	80052e4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80052d4:	4b39      	ldr	r3, [pc, #228]	; (80053bc <xQueueGenericSend+0x1f8>)
 80052d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052da:	601a      	str	r2, [r3, #0]
 80052dc:	f3bf 8f4f 	dsb	sy
 80052e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80052e4:	f001 ff46 	bl	8007174 <vPortExitCritical>
				return pdPASS;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e063      	b.n	80053b4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d103      	bne.n	80052fa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80052f2:	f001 ff3f 	bl	8007174 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80052f6:	2300      	movs	r3, #0
 80052f8:	e05c      	b.n	80053b4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80052fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d106      	bne.n	800530e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005300:	f107 0314 	add.w	r3, r7, #20
 8005304:	4618      	mov	r0, r3
 8005306:	f001 fa55 	bl	80067b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800530a:	2301      	movs	r3, #1
 800530c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800530e:	f001 ff31 	bl	8007174 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005312:	f000 ffe3 	bl	80062dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005316:	f001 fefd 	bl	8007114 <vPortEnterCritical>
 800531a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005320:	b25b      	sxtb	r3, r3
 8005322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005326:	d103      	bne.n	8005330 <xQueueGenericSend+0x16c>
 8005328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532a:	2200      	movs	r2, #0
 800532c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005332:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005336:	b25b      	sxtb	r3, r3
 8005338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800533c:	d103      	bne.n	8005346 <xQueueGenericSend+0x182>
 800533e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005340:	2200      	movs	r2, #0
 8005342:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005346:	f001 ff15 	bl	8007174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800534a:	1d3a      	adds	r2, r7, #4
 800534c:	f107 0314 	add.w	r3, r7, #20
 8005350:	4611      	mov	r1, r2
 8005352:	4618      	mov	r0, r3
 8005354:	f001 fa44 	bl	80067e0 <xTaskCheckForTimeOut>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d124      	bne.n	80053a8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800535e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005360:	f000 fd31 	bl	8005dc6 <prvIsQueueFull>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d018      	beq.n	800539c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800536a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536c:	3310      	adds	r3, #16
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	4611      	mov	r1, r2
 8005372:	4618      	mov	r0, r3
 8005374:	f001 f998 	bl	80066a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005378:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800537a:	f000 fcbc 	bl	8005cf6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800537e:	f000 ffbb 	bl	80062f8 <xTaskResumeAll>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	f47f af7c 	bne.w	8005282 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800538a:	4b0c      	ldr	r3, [pc, #48]	; (80053bc <xQueueGenericSend+0x1f8>)
 800538c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005390:	601a      	str	r2, [r3, #0]
 8005392:	f3bf 8f4f 	dsb	sy
 8005396:	f3bf 8f6f 	isb	sy
 800539a:	e772      	b.n	8005282 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800539c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800539e:	f000 fcaa 	bl	8005cf6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80053a2:	f000 ffa9 	bl	80062f8 <xTaskResumeAll>
 80053a6:	e76c      	b.n	8005282 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80053a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053aa:	f000 fca4 	bl	8005cf6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80053ae:	f000 ffa3 	bl	80062f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80053b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3738      	adds	r7, #56	; 0x38
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	e000ed04 	.word	0xe000ed04

080053c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b090      	sub	sp, #64	; 0x40
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
 80053cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80053d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d10a      	bne.n	80053ee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80053d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053dc:	f383 8811 	msr	BASEPRI, r3
 80053e0:	f3bf 8f6f 	isb	sy
 80053e4:	f3bf 8f4f 	dsb	sy
 80053e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80053ea:	bf00      	nop
 80053ec:	e7fe      	b.n	80053ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d103      	bne.n	80053fc <xQueueGenericSendFromISR+0x3c>
 80053f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d101      	bne.n	8005400 <xQueueGenericSendFromISR+0x40>
 80053fc:	2301      	movs	r3, #1
 80053fe:	e000      	b.n	8005402 <xQueueGenericSendFromISR+0x42>
 8005400:	2300      	movs	r3, #0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10a      	bne.n	800541c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540a:	f383 8811 	msr	BASEPRI, r3
 800540e:	f3bf 8f6f 	isb	sy
 8005412:	f3bf 8f4f 	dsb	sy
 8005416:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005418:	bf00      	nop
 800541a:	e7fe      	b.n	800541a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	2b02      	cmp	r3, #2
 8005420:	d103      	bne.n	800542a <xQueueGenericSendFromISR+0x6a>
 8005422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005426:	2b01      	cmp	r3, #1
 8005428:	d101      	bne.n	800542e <xQueueGenericSendFromISR+0x6e>
 800542a:	2301      	movs	r3, #1
 800542c:	e000      	b.n	8005430 <xQueueGenericSendFromISR+0x70>
 800542e:	2300      	movs	r3, #0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d10a      	bne.n	800544a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005438:	f383 8811 	msr	BASEPRI, r3
 800543c:	f3bf 8f6f 	isb	sy
 8005440:	f3bf 8f4f 	dsb	sy
 8005444:	623b      	str	r3, [r7, #32]
}
 8005446:	bf00      	nop
 8005448:	e7fe      	b.n	8005448 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800544a:	f001 ff45 	bl	80072d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800544e:	f3ef 8211 	mrs	r2, BASEPRI
 8005452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005456:	f383 8811 	msr	BASEPRI, r3
 800545a:	f3bf 8f6f 	isb	sy
 800545e:	f3bf 8f4f 	dsb	sy
 8005462:	61fa      	str	r2, [r7, #28]
 8005464:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005466:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005468:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800546a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800546e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005472:	429a      	cmp	r2, r3
 8005474:	d302      	bcc.n	800547c <xQueueGenericSendFromISR+0xbc>
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	2b02      	cmp	r3, #2
 800547a:	d12f      	bne.n	80054dc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800547c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800547e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800548c:	683a      	ldr	r2, [r7, #0]
 800548e:	68b9      	ldr	r1, [r7, #8]
 8005490:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005492:	f000 fba0 	bl	8005bd6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005496:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800549a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800549e:	d112      	bne.n	80054c6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d016      	beq.n	80054d6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054aa:	3324      	adds	r3, #36	; 0x24
 80054ac:	4618      	mov	r0, r3
 80054ae:	f001 f91f 	bl	80066f0 <xTaskRemoveFromEventList>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00e      	beq.n	80054d6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00b      	beq.n	80054d6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	e007      	b.n	80054d6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80054c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80054ca:	3301      	adds	r3, #1
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	b25a      	sxtb	r2, r3
 80054d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80054d6:	2301      	movs	r3, #1
 80054d8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80054da:	e001      	b.n	80054e0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80054dc:	2300      	movs	r3, #0
 80054de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80054ea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80054ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3740      	adds	r7, #64	; 0x40
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b08e      	sub	sp, #56	; 0x38
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
 80054fe:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005506:	2b00      	cmp	r3, #0
 8005508:	d10a      	bne.n	8005520 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800550a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550e:	f383 8811 	msr	BASEPRI, r3
 8005512:	f3bf 8f6f 	isb	sy
 8005516:	f3bf 8f4f 	dsb	sy
 800551a:	623b      	str	r3, [r7, #32]
}
 800551c:	bf00      	nop
 800551e:	e7fe      	b.n	800551e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00a      	beq.n	800553e <xQueueGiveFromISR+0x48>
	__asm volatile
 8005528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552c:	f383 8811 	msr	BASEPRI, r3
 8005530:	f3bf 8f6f 	isb	sy
 8005534:	f3bf 8f4f 	dsb	sy
 8005538:	61fb      	str	r3, [r7, #28]
}
 800553a:	bf00      	nop
 800553c:	e7fe      	b.n	800553c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800553e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d103      	bne.n	800554e <xQueueGiveFromISR+0x58>
 8005546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <xQueueGiveFromISR+0x5c>
 800554e:	2301      	movs	r3, #1
 8005550:	e000      	b.n	8005554 <xQueueGiveFromISR+0x5e>
 8005552:	2300      	movs	r3, #0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d10a      	bne.n	800556e <xQueueGiveFromISR+0x78>
	__asm volatile
 8005558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555c:	f383 8811 	msr	BASEPRI, r3
 8005560:	f3bf 8f6f 	isb	sy
 8005564:	f3bf 8f4f 	dsb	sy
 8005568:	61bb      	str	r3, [r7, #24]
}
 800556a:	bf00      	nop
 800556c:	e7fe      	b.n	800556c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800556e:	f001 feb3 	bl	80072d8 <vPortValidateInterruptPriority>
	__asm volatile
 8005572:	f3ef 8211 	mrs	r2, BASEPRI
 8005576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557a:	f383 8811 	msr	BASEPRI, r3
 800557e:	f3bf 8f6f 	isb	sy
 8005582:	f3bf 8f4f 	dsb	sy
 8005586:	617a      	str	r2, [r7, #20]
 8005588:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800558a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800558c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800558e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005592:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005598:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800559a:	429a      	cmp	r2, r3
 800559c:	d22b      	bcs.n	80055f6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800559e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80055a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055aa:	1c5a      	adds	r2, r3, #1
 80055ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ae:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80055b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80055b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b8:	d112      	bne.n	80055e0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d016      	beq.n	80055f0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c4:	3324      	adds	r3, #36	; 0x24
 80055c6:	4618      	mov	r0, r3
 80055c8:	f001 f892 	bl	80066f0 <xTaskRemoveFromEventList>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00e      	beq.n	80055f0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d00b      	beq.n	80055f0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	2201      	movs	r2, #1
 80055dc:	601a      	str	r2, [r3, #0]
 80055de:	e007      	b.n	80055f0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80055e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055e4:	3301      	adds	r3, #1
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	b25a      	sxtb	r2, r3
 80055ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80055f0:	2301      	movs	r3, #1
 80055f2:	637b      	str	r3, [r7, #52]	; 0x34
 80055f4:	e001      	b.n	80055fa <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80055f6:	2300      	movs	r3, #0
 80055f8:	637b      	str	r3, [r7, #52]	; 0x34
 80055fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055fc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f383 8811 	msr	BASEPRI, r3
}
 8005604:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005608:	4618      	mov	r0, r3
 800560a:	3738      	adds	r7, #56	; 0x38
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b08c      	sub	sp, #48	; 0x30
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800561c:	2300      	movs	r3, #0
 800561e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005626:	2b00      	cmp	r3, #0
 8005628:	d10a      	bne.n	8005640 <xQueueReceive+0x30>
	__asm volatile
 800562a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562e:	f383 8811 	msr	BASEPRI, r3
 8005632:	f3bf 8f6f 	isb	sy
 8005636:	f3bf 8f4f 	dsb	sy
 800563a:	623b      	str	r3, [r7, #32]
}
 800563c:	bf00      	nop
 800563e:	e7fe      	b.n	800563e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d103      	bne.n	800564e <xQueueReceive+0x3e>
 8005646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564a:	2b00      	cmp	r3, #0
 800564c:	d101      	bne.n	8005652 <xQueueReceive+0x42>
 800564e:	2301      	movs	r3, #1
 8005650:	e000      	b.n	8005654 <xQueueReceive+0x44>
 8005652:	2300      	movs	r3, #0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d10a      	bne.n	800566e <xQueueReceive+0x5e>
	__asm volatile
 8005658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565c:	f383 8811 	msr	BASEPRI, r3
 8005660:	f3bf 8f6f 	isb	sy
 8005664:	f3bf 8f4f 	dsb	sy
 8005668:	61fb      	str	r3, [r7, #28]
}
 800566a:	bf00      	nop
 800566c:	e7fe      	b.n	800566c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800566e:	f001 f9ff 	bl	8006a70 <xTaskGetSchedulerState>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d102      	bne.n	800567e <xQueueReceive+0x6e>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <xQueueReceive+0x72>
 800567e:	2301      	movs	r3, #1
 8005680:	e000      	b.n	8005684 <xQueueReceive+0x74>
 8005682:	2300      	movs	r3, #0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d10a      	bne.n	800569e <xQueueReceive+0x8e>
	__asm volatile
 8005688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568c:	f383 8811 	msr	BASEPRI, r3
 8005690:	f3bf 8f6f 	isb	sy
 8005694:	f3bf 8f4f 	dsb	sy
 8005698:	61bb      	str	r3, [r7, #24]
}
 800569a:	bf00      	nop
 800569c:	e7fe      	b.n	800569c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800569e:	f001 fd39 	bl	8007114 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80056a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d01f      	beq.n	80056ee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80056ae:	68b9      	ldr	r1, [r7, #8]
 80056b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056b2:	f000 fafa 	bl	8005caa <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80056b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b8:	1e5a      	subs	r2, r3, #1
 80056ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056bc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00f      	beq.n	80056e6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c8:	3310      	adds	r3, #16
 80056ca:	4618      	mov	r0, r3
 80056cc:	f001 f810 	bl	80066f0 <xTaskRemoveFromEventList>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d007      	beq.n	80056e6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80056d6:	4b3d      	ldr	r3, [pc, #244]	; (80057cc <xQueueReceive+0x1bc>)
 80056d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056dc:	601a      	str	r2, [r3, #0]
 80056de:	f3bf 8f4f 	dsb	sy
 80056e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80056e6:	f001 fd45 	bl	8007174 <vPortExitCritical>
				return pdPASS;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e069      	b.n	80057c2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d103      	bne.n	80056fc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80056f4:	f001 fd3e 	bl	8007174 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80056f8:	2300      	movs	r3, #0
 80056fa:	e062      	b.n	80057c2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80056fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d106      	bne.n	8005710 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005702:	f107 0310 	add.w	r3, r7, #16
 8005706:	4618      	mov	r0, r3
 8005708:	f001 f854 	bl	80067b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800570c:	2301      	movs	r3, #1
 800570e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005710:	f001 fd30 	bl	8007174 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005714:	f000 fde2 	bl	80062dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005718:	f001 fcfc 	bl	8007114 <vPortEnterCritical>
 800571c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005722:	b25b      	sxtb	r3, r3
 8005724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005728:	d103      	bne.n	8005732 <xQueueReceive+0x122>
 800572a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572c:	2200      	movs	r2, #0
 800572e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005734:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005738:	b25b      	sxtb	r3, r3
 800573a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800573e:	d103      	bne.n	8005748 <xQueueReceive+0x138>
 8005740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005742:	2200      	movs	r2, #0
 8005744:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005748:	f001 fd14 	bl	8007174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800574c:	1d3a      	adds	r2, r7, #4
 800574e:	f107 0310 	add.w	r3, r7, #16
 8005752:	4611      	mov	r1, r2
 8005754:	4618      	mov	r0, r3
 8005756:	f001 f843 	bl	80067e0 <xTaskCheckForTimeOut>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d123      	bne.n	80057a8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005760:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005762:	f000 fb1a 	bl	8005d9a <prvIsQueueEmpty>
 8005766:	4603      	mov	r3, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d017      	beq.n	800579c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800576c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576e:	3324      	adds	r3, #36	; 0x24
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	4611      	mov	r1, r2
 8005774:	4618      	mov	r0, r3
 8005776:	f000 ff97 	bl	80066a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800577a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800577c:	f000 fabb 	bl	8005cf6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005780:	f000 fdba 	bl	80062f8 <xTaskResumeAll>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d189      	bne.n	800569e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800578a:	4b10      	ldr	r3, [pc, #64]	; (80057cc <xQueueReceive+0x1bc>)
 800578c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005790:	601a      	str	r2, [r3, #0]
 8005792:	f3bf 8f4f 	dsb	sy
 8005796:	f3bf 8f6f 	isb	sy
 800579a:	e780      	b.n	800569e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800579c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800579e:	f000 faaa 	bl	8005cf6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057a2:	f000 fda9 	bl	80062f8 <xTaskResumeAll>
 80057a6:	e77a      	b.n	800569e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80057a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057aa:	f000 faa4 	bl	8005cf6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80057ae:	f000 fda3 	bl	80062f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057b4:	f000 faf1 	bl	8005d9a <prvIsQueueEmpty>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	f43f af6f 	beq.w	800569e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80057c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3730      	adds	r7, #48	; 0x30
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	e000ed04 	.word	0xe000ed04

080057d0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b08e      	sub	sp, #56	; 0x38
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80057da:	2300      	movs	r3, #0
 80057dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80057e2:	2300      	movs	r3, #0
 80057e4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80057e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d10a      	bne.n	8005802 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80057ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f0:	f383 8811 	msr	BASEPRI, r3
 80057f4:	f3bf 8f6f 	isb	sy
 80057f8:	f3bf 8f4f 	dsb	sy
 80057fc:	623b      	str	r3, [r7, #32]
}
 80057fe:	bf00      	nop
 8005800:	e7fe      	b.n	8005800 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00a      	beq.n	8005820 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800580a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580e:	f383 8811 	msr	BASEPRI, r3
 8005812:	f3bf 8f6f 	isb	sy
 8005816:	f3bf 8f4f 	dsb	sy
 800581a:	61fb      	str	r3, [r7, #28]
}
 800581c:	bf00      	nop
 800581e:	e7fe      	b.n	800581e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005820:	f001 f926 	bl	8006a70 <xTaskGetSchedulerState>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d102      	bne.n	8005830 <xQueueSemaphoreTake+0x60>
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d101      	bne.n	8005834 <xQueueSemaphoreTake+0x64>
 8005830:	2301      	movs	r3, #1
 8005832:	e000      	b.n	8005836 <xQueueSemaphoreTake+0x66>
 8005834:	2300      	movs	r3, #0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d10a      	bne.n	8005850 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800583a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583e:	f383 8811 	msr	BASEPRI, r3
 8005842:	f3bf 8f6f 	isb	sy
 8005846:	f3bf 8f4f 	dsb	sy
 800584a:	61bb      	str	r3, [r7, #24]
}
 800584c:	bf00      	nop
 800584e:	e7fe      	b.n	800584e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005850:	f001 fc60 	bl	8007114 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005858:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800585a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585c:	2b00      	cmp	r3, #0
 800585e:	d024      	beq.n	80058aa <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005862:	1e5a      	subs	r2, r3, #1
 8005864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005866:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d104      	bne.n	800587a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005870:	f001 faa6 	bl	8006dc0 <pvTaskIncrementMutexHeldCount>
 8005874:	4602      	mov	r2, r0
 8005876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005878:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800587a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00f      	beq.n	80058a2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005884:	3310      	adds	r3, #16
 8005886:	4618      	mov	r0, r3
 8005888:	f000 ff32 	bl	80066f0 <xTaskRemoveFromEventList>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d007      	beq.n	80058a2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005892:	4b54      	ldr	r3, [pc, #336]	; (80059e4 <xQueueSemaphoreTake+0x214>)
 8005894:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005898:	601a      	str	r2, [r3, #0]
 800589a:	f3bf 8f4f 	dsb	sy
 800589e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80058a2:	f001 fc67 	bl	8007174 <vPortExitCritical>
				return pdPASS;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e097      	b.n	80059da <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d111      	bne.n	80058d4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80058b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00a      	beq.n	80058cc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80058b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ba:	f383 8811 	msr	BASEPRI, r3
 80058be:	f3bf 8f6f 	isb	sy
 80058c2:	f3bf 8f4f 	dsb	sy
 80058c6:	617b      	str	r3, [r7, #20]
}
 80058c8:	bf00      	nop
 80058ca:	e7fe      	b.n	80058ca <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80058cc:	f001 fc52 	bl	8007174 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80058d0:	2300      	movs	r3, #0
 80058d2:	e082      	b.n	80059da <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80058d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d106      	bne.n	80058e8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058da:	f107 030c 	add.w	r3, r7, #12
 80058de:	4618      	mov	r0, r3
 80058e0:	f000 ff68 	bl	80067b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80058e4:	2301      	movs	r3, #1
 80058e6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80058e8:	f001 fc44 	bl	8007174 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80058ec:	f000 fcf6 	bl	80062dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80058f0:	f001 fc10 	bl	8007114 <vPortEnterCritical>
 80058f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058fa:	b25b      	sxtb	r3, r3
 80058fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005900:	d103      	bne.n	800590a <xQueueSemaphoreTake+0x13a>
 8005902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005904:	2200      	movs	r2, #0
 8005906:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800590a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800590c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005910:	b25b      	sxtb	r3, r3
 8005912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005916:	d103      	bne.n	8005920 <xQueueSemaphoreTake+0x150>
 8005918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591a:	2200      	movs	r2, #0
 800591c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005920:	f001 fc28 	bl	8007174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005924:	463a      	mov	r2, r7
 8005926:	f107 030c 	add.w	r3, r7, #12
 800592a:	4611      	mov	r1, r2
 800592c:	4618      	mov	r0, r3
 800592e:	f000 ff57 	bl	80067e0 <xTaskCheckForTimeOut>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d132      	bne.n	800599e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005938:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800593a:	f000 fa2e 	bl	8005d9a <prvIsQueueEmpty>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d026      	beq.n	8005992 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d109      	bne.n	8005960 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800594c:	f001 fbe2 	bl	8007114 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	4618      	mov	r0, r3
 8005956:	f001 f8a9 	bl	8006aac <xTaskPriorityInherit>
 800595a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800595c:	f001 fc0a 	bl	8007174 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005962:	3324      	adds	r3, #36	; 0x24
 8005964:	683a      	ldr	r2, [r7, #0]
 8005966:	4611      	mov	r1, r2
 8005968:	4618      	mov	r0, r3
 800596a:	f000 fe9d 	bl	80066a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800596e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005970:	f000 f9c1 	bl	8005cf6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005974:	f000 fcc0 	bl	80062f8 <xTaskResumeAll>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	f47f af68 	bne.w	8005850 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005980:	4b18      	ldr	r3, [pc, #96]	; (80059e4 <xQueueSemaphoreTake+0x214>)
 8005982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005986:	601a      	str	r2, [r3, #0]
 8005988:	f3bf 8f4f 	dsb	sy
 800598c:	f3bf 8f6f 	isb	sy
 8005990:	e75e      	b.n	8005850 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005992:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005994:	f000 f9af 	bl	8005cf6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005998:	f000 fcae 	bl	80062f8 <xTaskResumeAll>
 800599c:	e758      	b.n	8005850 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800599e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80059a0:	f000 f9a9 	bl	8005cf6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80059a4:	f000 fca8 	bl	80062f8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80059aa:	f000 f9f6 	bl	8005d9a <prvIsQueueEmpty>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f43f af4d 	beq.w	8005850 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80059b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d00d      	beq.n	80059d8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80059bc:	f001 fbaa 	bl	8007114 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80059c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80059c2:	f000 f8f0 	bl	8005ba6 <prvGetDisinheritPriorityAfterTimeout>
 80059c6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80059c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059ce:	4618      	mov	r0, r3
 80059d0:	f001 f968 	bl	8006ca4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80059d4:	f001 fbce 	bl	8007174 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80059d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3738      	adds	r7, #56	; 0x38
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	e000ed04 	.word	0xe000ed04

080059e8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b08e      	sub	sp, #56	; 0x38
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80059f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10a      	bne.n	8005a14 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80059fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a02:	f383 8811 	msr	BASEPRI, r3
 8005a06:	f3bf 8f6f 	isb	sy
 8005a0a:	f3bf 8f4f 	dsb	sy
 8005a0e:	623b      	str	r3, [r7, #32]
}
 8005a10:	bf00      	nop
 8005a12:	e7fe      	b.n	8005a12 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d103      	bne.n	8005a22 <xQueueReceiveFromISR+0x3a>
 8005a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d101      	bne.n	8005a26 <xQueueReceiveFromISR+0x3e>
 8005a22:	2301      	movs	r3, #1
 8005a24:	e000      	b.n	8005a28 <xQueueReceiveFromISR+0x40>
 8005a26:	2300      	movs	r3, #0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10a      	bne.n	8005a42 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a30:	f383 8811 	msr	BASEPRI, r3
 8005a34:	f3bf 8f6f 	isb	sy
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	61fb      	str	r3, [r7, #28]
}
 8005a3e:	bf00      	nop
 8005a40:	e7fe      	b.n	8005a40 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a42:	f001 fc49 	bl	80072d8 <vPortValidateInterruptPriority>
	__asm volatile
 8005a46:	f3ef 8211 	mrs	r2, BASEPRI
 8005a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4e:	f383 8811 	msr	BASEPRI, r3
 8005a52:	f3bf 8f6f 	isb	sy
 8005a56:	f3bf 8f4f 	dsb	sy
 8005a5a:	61ba      	str	r2, [r7, #24]
 8005a5c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005a5e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a60:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a66:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d02f      	beq.n	8005ace <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a78:	68b9      	ldr	r1, [r7, #8]
 8005a7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a7c:	f000 f915 	bl	8005caa <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a82:	1e5a      	subs	r2, r3, #1
 8005a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a86:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005a88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a90:	d112      	bne.n	8005ab8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d016      	beq.n	8005ac8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9c:	3310      	adds	r3, #16
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f000 fe26 	bl	80066f0 <xTaskRemoveFromEventList>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00e      	beq.n	8005ac8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00b      	beq.n	8005ac8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	601a      	str	r2, [r3, #0]
 8005ab6:	e007      	b.n	8005ac8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005ab8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005abc:	3301      	adds	r3, #1
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	b25a      	sxtb	r2, r3
 8005ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	637b      	str	r3, [r7, #52]	; 0x34
 8005acc:	e001      	b.n	8005ad2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	f383 8811 	msr	BASEPRI, r3
}
 8005adc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3738      	adds	r7, #56	; 0x38
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d10a      	bne.n	8005b0c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8005af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afa:	f383 8811 	msr	BASEPRI, r3
 8005afe:	f3bf 8f6f 	isb	sy
 8005b02:	f3bf 8f4f 	dsb	sy
 8005b06:	60bb      	str	r3, [r7, #8]
}
 8005b08:	bf00      	nop
 8005b0a:	e7fe      	b.n	8005b0a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8005b0c:	f001 fb02 	bl	8007114 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b14:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005b16:	f001 fb2d 	bl	8007174 <vPortExitCritical>

	return uxReturn;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3710      	adds	r7, #16
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005b24:	b480      	push	{r7}
 8005b26:	b087      	sub	sp, #28
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10a      	bne.n	8005b4c <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8005b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b3a:	f383 8811 	msr	BASEPRI, r3
 8005b3e:	f3bf 8f6f 	isb	sy
 8005b42:	f3bf 8f4f 	dsb	sy
 8005b46:	60fb      	str	r3, [r7, #12]
}
 8005b48:	bf00      	nop
 8005b4a:	e7fe      	b.n	8005b4a <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b50:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8005b52:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005b54:	4618      	mov	r0, r3
 8005b56:	371c      	adds	r7, #28
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10a      	bne.n	8005b88 <vQueueDelete+0x28>
	__asm volatile
 8005b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b76:	f383 8811 	msr	BASEPRI, r3
 8005b7a:	f3bf 8f6f 	isb	sy
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	60bb      	str	r3, [r7, #8]
}
 8005b84:	bf00      	nop
 8005b86:	e7fe      	b.n	8005b86 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005b88:	68f8      	ldr	r0, [r7, #12]
 8005b8a:	f000 f935 	bl	8005df8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d102      	bne.n	8005b9e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f001 fca9 	bl	80074f0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005b9e:	bf00      	nop
 8005ba0:	3710      	adds	r7, #16
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}

08005ba6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005ba6:	b480      	push	{r7}
 8005ba8:	b085      	sub	sp, #20
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d006      	beq.n	8005bc4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f1c3 0307 	rsb	r3, r3, #7
 8005bc0:	60fb      	str	r3, [r7, #12]
 8005bc2:	e001      	b.n	8005bc8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
	}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3714      	adds	r7, #20
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr

08005bd6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b086      	sub	sp, #24
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	60f8      	str	r0, [r7, #12]
 8005bde:	60b9      	str	r1, [r7, #8]
 8005be0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005be2:	2300      	movs	r3, #0
 8005be4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bea:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d10d      	bne.n	8005c10 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d14d      	bne.n	8005c98 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	4618      	mov	r0, r3
 8005c02:	f000 ffc9 	bl	8006b98 <xTaskPriorityDisinherit>
 8005c06:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	609a      	str	r2, [r3, #8]
 8005c0e:	e043      	b.n	8005c98 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d119      	bne.n	8005c4a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6858      	ldr	r0, [r3, #4]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1e:	461a      	mov	r2, r3
 8005c20:	68b9      	ldr	r1, [r7, #8]
 8005c22:	f011 fa36 	bl	8017092 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	685a      	ldr	r2, [r3, #4]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2e:	441a      	add	r2, r3
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	685a      	ldr	r2, [r3, #4]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d32b      	bcc.n	8005c98 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	605a      	str	r2, [r3, #4]
 8005c48:	e026      	b.n	8005c98 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	68d8      	ldr	r0, [r3, #12]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c52:	461a      	mov	r2, r3
 8005c54:	68b9      	ldr	r1, [r7, #8]
 8005c56:	f011 fa1c 	bl	8017092 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	68da      	ldr	r2, [r3, #12]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c62:	425b      	negs	r3, r3
 8005c64:	441a      	add	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	68da      	ldr	r2, [r3, #12]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d207      	bcs.n	8005c86 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	689a      	ldr	r2, [r3, #8]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7e:	425b      	negs	r3, r3
 8005c80:	441a      	add	r2, r3
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	d105      	bne.n	8005c98 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d002      	beq.n	8005c98 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	3b01      	subs	r3, #1
 8005c96:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	1c5a      	adds	r2, r3, #1
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005ca0:	697b      	ldr	r3, [r7, #20]
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3718      	adds	r7, #24
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b082      	sub	sp, #8
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
 8005cb2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d018      	beq.n	8005cee <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	68da      	ldr	r2, [r3, #12]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc4:	441a      	add	r2, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	68da      	ldr	r2, [r3, #12]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d303      	bcc.n	8005cde <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	68d9      	ldr	r1, [r3, #12]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	6838      	ldr	r0, [r7, #0]
 8005cea:	f011 f9d2 	bl	8017092 <memcpy>
	}
}
 8005cee:	bf00      	nop
 8005cf0:	3708      	adds	r7, #8
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005cf6:	b580      	push	{r7, lr}
 8005cf8:	b084      	sub	sp, #16
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005cfe:	f001 fa09 	bl	8007114 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d08:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d0a:	e011      	b.n	8005d30 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d012      	beq.n	8005d3a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	3324      	adds	r3, #36	; 0x24
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f000 fce9 	bl	80066f0 <xTaskRemoveFromEventList>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d001      	beq.n	8005d28 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005d24:	f000 fdbe 	bl	80068a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005d28:	7bfb      	ldrb	r3, [r7, #15]
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	dce9      	bgt.n	8005d0c <prvUnlockQueue+0x16>
 8005d38:	e000      	b.n	8005d3c <prvUnlockQueue+0x46>
					break;
 8005d3a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	22ff      	movs	r2, #255	; 0xff
 8005d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005d44:	f001 fa16 	bl	8007174 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d48:	f001 f9e4 	bl	8007114 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d52:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d54:	e011      	b.n	8005d7a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d012      	beq.n	8005d84 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	3310      	adds	r3, #16
 8005d62:	4618      	mov	r0, r3
 8005d64:	f000 fcc4 	bl	80066f0 <xTaskRemoveFromEventList>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d001      	beq.n	8005d72 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005d6e:	f000 fd99 	bl	80068a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d72:	7bbb      	ldrb	r3, [r7, #14]
 8005d74:	3b01      	subs	r3, #1
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	dce9      	bgt.n	8005d56 <prvUnlockQueue+0x60>
 8005d82:	e000      	b.n	8005d86 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d84:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	22ff      	movs	r2, #255	; 0xff
 8005d8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005d8e:	f001 f9f1 	bl	8007174 <vPortExitCritical>
}
 8005d92:	bf00      	nop
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b084      	sub	sp, #16
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005da2:	f001 f9b7 	bl	8007114 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d102      	bne.n	8005db4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005dae:	2301      	movs	r3, #1
 8005db0:	60fb      	str	r3, [r7, #12]
 8005db2:	e001      	b.n	8005db8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005db4:	2300      	movs	r3, #0
 8005db6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005db8:	f001 f9dc 	bl	8007174 <vPortExitCritical>

	return xReturn;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b084      	sub	sp, #16
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005dce:	f001 f9a1 	bl	8007114 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d102      	bne.n	8005de4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005dde:	2301      	movs	r3, #1
 8005de0:	60fb      	str	r3, [r7, #12]
 8005de2:	e001      	b.n	8005de8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005de4:	2300      	movs	r3, #0
 8005de6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005de8:	f001 f9c4 	bl	8007174 <vPortExitCritical>

	return xReturn;
 8005dec:	68fb      	ldr	r3, [r7, #12]
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
	...

08005df8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e00:	2300      	movs	r3, #0
 8005e02:	60fb      	str	r3, [r7, #12]
 8005e04:	e016      	b.n	8005e34 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005e06:	4a10      	ldr	r2, [pc, #64]	; (8005e48 <vQueueUnregisterQueue+0x50>)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	00db      	lsls	r3, r3, #3
 8005e0c:	4413      	add	r3, r2
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d10b      	bne.n	8005e2e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005e16:	4a0c      	ldr	r2, [pc, #48]	; (8005e48 <vQueueUnregisterQueue+0x50>)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2100      	movs	r1, #0
 8005e1c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005e20:	4a09      	ldr	r2, [pc, #36]	; (8005e48 <vQueueUnregisterQueue+0x50>)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	00db      	lsls	r3, r3, #3
 8005e26:	4413      	add	r3, r2
 8005e28:	2200      	movs	r2, #0
 8005e2a:	605a      	str	r2, [r3, #4]
				break;
 8005e2c:	e006      	b.n	8005e3c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	3301      	adds	r3, #1
 8005e32:	60fb      	str	r3, [r7, #12]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2b07      	cmp	r3, #7
 8005e38:	d9e5      	bls.n	8005e06 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005e3a:	bf00      	nop
 8005e3c:	bf00      	nop
 8005e3e:	3714      	adds	r7, #20
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr
 8005e48:	2000b864 	.word	0x2000b864

08005e4c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b08e      	sub	sp, #56	; 0x38
 8005e50:	af04      	add	r7, sp, #16
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
 8005e58:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d10a      	bne.n	8005e76 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e64:	f383 8811 	msr	BASEPRI, r3
 8005e68:	f3bf 8f6f 	isb	sy
 8005e6c:	f3bf 8f4f 	dsb	sy
 8005e70:	623b      	str	r3, [r7, #32]
}
 8005e72:	bf00      	nop
 8005e74:	e7fe      	b.n	8005e74 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10a      	bne.n	8005e92 <xTaskCreateStatic+0x46>
	__asm volatile
 8005e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e80:	f383 8811 	msr	BASEPRI, r3
 8005e84:	f3bf 8f6f 	isb	sy
 8005e88:	f3bf 8f4f 	dsb	sy
 8005e8c:	61fb      	str	r3, [r7, #28]
}
 8005e8e:	bf00      	nop
 8005e90:	e7fe      	b.n	8005e90 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005e92:	23b4      	movs	r3, #180	; 0xb4
 8005e94:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	2bb4      	cmp	r3, #180	; 0xb4
 8005e9a:	d00a      	beq.n	8005eb2 <xTaskCreateStatic+0x66>
	__asm volatile
 8005e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea0:	f383 8811 	msr	BASEPRI, r3
 8005ea4:	f3bf 8f6f 	isb	sy
 8005ea8:	f3bf 8f4f 	dsb	sy
 8005eac:	61bb      	str	r3, [r7, #24]
}
 8005eae:	bf00      	nop
 8005eb0:	e7fe      	b.n	8005eb0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005eb2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d01e      	beq.n	8005ef8 <xTaskCreateStatic+0xac>
 8005eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d01b      	beq.n	8005ef8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ec8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ecc:	2202      	movs	r2, #2
 8005ece:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	9303      	str	r3, [sp, #12]
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed8:	9302      	str	r3, [sp, #8]
 8005eda:	f107 0314 	add.w	r3, r7, #20
 8005ede:	9301      	str	r3, [sp, #4]
 8005ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee2:	9300      	str	r3, [sp, #0]
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	68b9      	ldr	r1, [r7, #8]
 8005eea:	68f8      	ldr	r0, [r7, #12]
 8005eec:	f000 f850 	bl	8005f90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ef0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ef2:	f000 f8eb 	bl	80060cc <prvAddNewTaskToReadyList>
 8005ef6:	e001      	b.n	8005efc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005efc:	697b      	ldr	r3, [r7, #20]
	}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3728      	adds	r7, #40	; 0x28
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b08c      	sub	sp, #48	; 0x30
 8005f0a:	af04      	add	r7, sp, #16
 8005f0c:	60f8      	str	r0, [r7, #12]
 8005f0e:	60b9      	str	r1, [r7, #8]
 8005f10:	603b      	str	r3, [r7, #0]
 8005f12:	4613      	mov	r3, r2
 8005f14:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005f16:	88fb      	ldrh	r3, [r7, #6]
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f001 fa1c 	bl	8007358 <pvPortMalloc>
 8005f20:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00e      	beq.n	8005f46 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005f28:	20b4      	movs	r0, #180	; 0xb4
 8005f2a:	f001 fa15 	bl	8007358 <pvPortMalloc>
 8005f2e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d003      	beq.n	8005f3e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	697a      	ldr	r2, [r7, #20]
 8005f3a:	631a      	str	r2, [r3, #48]	; 0x30
 8005f3c:	e005      	b.n	8005f4a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f3e:	6978      	ldr	r0, [r7, #20]
 8005f40:	f001 fad6 	bl	80074f0 <vPortFree>
 8005f44:	e001      	b.n	8005f4a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f46:	2300      	movs	r3, #0
 8005f48:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d017      	beq.n	8005f80 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f58:	88fa      	ldrh	r2, [r7, #6]
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	9303      	str	r3, [sp, #12]
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	9302      	str	r3, [sp, #8]
 8005f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f64:	9301      	str	r3, [sp, #4]
 8005f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f68:	9300      	str	r3, [sp, #0]
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	68b9      	ldr	r1, [r7, #8]
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f000 f80e 	bl	8005f90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f74:	69f8      	ldr	r0, [r7, #28]
 8005f76:	f000 f8a9 	bl	80060cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	61bb      	str	r3, [r7, #24]
 8005f7e:	e002      	b.n	8005f86 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f80:	f04f 33ff 	mov.w	r3, #4294967295
 8005f84:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005f86:	69bb      	ldr	r3, [r7, #24]
	}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3720      	adds	r7, #32
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b088      	sub	sp, #32
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]
 8005f9c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005fa8:	3b01      	subs	r3, #1
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	4413      	add	r3, r2
 8005fae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	f023 0307 	bic.w	r3, r3, #7
 8005fb6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	f003 0307 	and.w	r3, r3, #7
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00a      	beq.n	8005fd8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc6:	f383 8811 	msr	BASEPRI, r3
 8005fca:	f3bf 8f6f 	isb	sy
 8005fce:	f3bf 8f4f 	dsb	sy
 8005fd2:	617b      	str	r3, [r7, #20]
}
 8005fd4:	bf00      	nop
 8005fd6:	e7fe      	b.n	8005fd6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d01f      	beq.n	800601e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fde:	2300      	movs	r3, #0
 8005fe0:	61fb      	str	r3, [r7, #28]
 8005fe2:	e012      	b.n	800600a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	4413      	add	r3, r2
 8005fea:	7819      	ldrb	r1, [r3, #0]
 8005fec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	3334      	adds	r3, #52	; 0x34
 8005ff4:	460a      	mov	r2, r1
 8005ff6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005ff8:	68ba      	ldr	r2, [r7, #8]
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d006      	beq.n	8006012 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	3301      	adds	r3, #1
 8006008:	61fb      	str	r3, [r7, #28]
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	2b0f      	cmp	r3, #15
 800600e:	d9e9      	bls.n	8005fe4 <prvInitialiseNewTask+0x54>
 8006010:	e000      	b.n	8006014 <prvInitialiseNewTask+0x84>
			{
				break;
 8006012:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006016:	2200      	movs	r2, #0
 8006018:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800601c:	e003      	b.n	8006026 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800601e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006020:	2200      	movs	r2, #0
 8006022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006028:	2b06      	cmp	r3, #6
 800602a:	d901      	bls.n	8006030 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800602c:	2306      	movs	r3, #6
 800602e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006032:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006034:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006038:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800603a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800603c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603e:	2200      	movs	r2, #0
 8006040:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006044:	3304      	adds	r3, #4
 8006046:	4618      	mov	r0, r3
 8006048:	f7fe fea1 	bl	8004d8e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800604c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604e:	3318      	adds	r3, #24
 8006050:	4618      	mov	r0, r3
 8006052:	f7fe fe9c 	bl	8004d8e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800605a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800605c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605e:	f1c3 0207 	rsb	r2, r3, #7
 8006062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006064:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800606a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800606c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606e:	2200      	movs	r2, #0
 8006070:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006076:	2200      	movs	r2, #0
 8006078:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800607c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607e:	334c      	adds	r3, #76	; 0x4c
 8006080:	2260      	movs	r2, #96	; 0x60
 8006082:	2100      	movs	r1, #0
 8006084:	4618      	mov	r0, r3
 8006086:	f011 f82c 	bl	80170e2 <memset>
 800608a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608c:	4a0c      	ldr	r2, [pc, #48]	; (80060c0 <prvInitialiseNewTask+0x130>)
 800608e:	651a      	str	r2, [r3, #80]	; 0x50
 8006090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006092:	4a0c      	ldr	r2, [pc, #48]	; (80060c4 <prvInitialiseNewTask+0x134>)
 8006094:	655a      	str	r2, [r3, #84]	; 0x54
 8006096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006098:	4a0b      	ldr	r2, [pc, #44]	; (80060c8 <prvInitialiseNewTask+0x138>)
 800609a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800609c:	683a      	ldr	r2, [r7, #0]
 800609e:	68f9      	ldr	r1, [r7, #12]
 80060a0:	69b8      	ldr	r0, [r7, #24]
 80060a2:	f000 ff07 	bl	8006eb4 <pxPortInitialiseStack>
 80060a6:	4602      	mov	r2, r0
 80060a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060aa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80060ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d002      	beq.n	80060b8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80060b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060b8:	bf00      	nop
 80060ba:	3720      	adds	r7, #32
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	0801c168 	.word	0x0801c168
 80060c4:	0801c188 	.word	0x0801c188
 80060c8:	0801c148 	.word	0x0801c148

080060cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80060d4:	f001 f81e 	bl	8007114 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80060d8:	4b2a      	ldr	r3, [pc, #168]	; (8006184 <prvAddNewTaskToReadyList+0xb8>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	3301      	adds	r3, #1
 80060de:	4a29      	ldr	r2, [pc, #164]	; (8006184 <prvAddNewTaskToReadyList+0xb8>)
 80060e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80060e2:	4b29      	ldr	r3, [pc, #164]	; (8006188 <prvAddNewTaskToReadyList+0xbc>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d109      	bne.n	80060fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80060ea:	4a27      	ldr	r2, [pc, #156]	; (8006188 <prvAddNewTaskToReadyList+0xbc>)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80060f0:	4b24      	ldr	r3, [pc, #144]	; (8006184 <prvAddNewTaskToReadyList+0xb8>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d110      	bne.n	800611a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80060f8:	f000 fbf8 	bl	80068ec <prvInitialiseTaskLists>
 80060fc:	e00d      	b.n	800611a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80060fe:	4b23      	ldr	r3, [pc, #140]	; (800618c <prvAddNewTaskToReadyList+0xc0>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d109      	bne.n	800611a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006106:	4b20      	ldr	r3, [pc, #128]	; (8006188 <prvAddNewTaskToReadyList+0xbc>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006110:	429a      	cmp	r2, r3
 8006112:	d802      	bhi.n	800611a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006114:	4a1c      	ldr	r2, [pc, #112]	; (8006188 <prvAddNewTaskToReadyList+0xbc>)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800611a:	4b1d      	ldr	r3, [pc, #116]	; (8006190 <prvAddNewTaskToReadyList+0xc4>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	3301      	adds	r3, #1
 8006120:	4a1b      	ldr	r2, [pc, #108]	; (8006190 <prvAddNewTaskToReadyList+0xc4>)
 8006122:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006128:	2201      	movs	r2, #1
 800612a:	409a      	lsls	r2, r3
 800612c:	4b19      	ldr	r3, [pc, #100]	; (8006194 <prvAddNewTaskToReadyList+0xc8>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4313      	orrs	r3, r2
 8006132:	4a18      	ldr	r2, [pc, #96]	; (8006194 <prvAddNewTaskToReadyList+0xc8>)
 8006134:	6013      	str	r3, [r2, #0]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800613a:	4613      	mov	r3, r2
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	4413      	add	r3, r2
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	4a15      	ldr	r2, [pc, #84]	; (8006198 <prvAddNewTaskToReadyList+0xcc>)
 8006144:	441a      	add	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	3304      	adds	r3, #4
 800614a:	4619      	mov	r1, r3
 800614c:	4610      	mov	r0, r2
 800614e:	f7fe fe2b 	bl	8004da8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006152:	f001 f80f 	bl	8007174 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006156:	4b0d      	ldr	r3, [pc, #52]	; (800618c <prvAddNewTaskToReadyList+0xc0>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00e      	beq.n	800617c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800615e:	4b0a      	ldr	r3, [pc, #40]	; (8006188 <prvAddNewTaskToReadyList+0xbc>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006168:	429a      	cmp	r2, r3
 800616a:	d207      	bcs.n	800617c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800616c:	4b0b      	ldr	r3, [pc, #44]	; (800619c <prvAddNewTaskToReadyList+0xd0>)
 800616e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006172:	601a      	str	r2, [r3, #0]
 8006174:	f3bf 8f4f 	dsb	sy
 8006178:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800617c:	bf00      	nop
 800617e:	3708      	adds	r7, #8
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	200004a4 	.word	0x200004a4
 8006188:	200003a4 	.word	0x200003a4
 800618c:	200004b0 	.word	0x200004b0
 8006190:	200004c0 	.word	0x200004c0
 8006194:	200004ac 	.word	0x200004ac
 8006198:	200003a8 	.word	0x200003a8
 800619c:	e000ed04 	.word	0xe000ed04

080061a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80061a8:	2300      	movs	r3, #0
 80061aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d017      	beq.n	80061e2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80061b2:	4b13      	ldr	r3, [pc, #76]	; (8006200 <vTaskDelay+0x60>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00a      	beq.n	80061d0 <vTaskDelay+0x30>
	__asm volatile
 80061ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061be:	f383 8811 	msr	BASEPRI, r3
 80061c2:	f3bf 8f6f 	isb	sy
 80061c6:	f3bf 8f4f 	dsb	sy
 80061ca:	60bb      	str	r3, [r7, #8]
}
 80061cc:	bf00      	nop
 80061ce:	e7fe      	b.n	80061ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80061d0:	f000 f884 	bl	80062dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80061d4:	2100      	movs	r1, #0
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 fe06 	bl	8006de8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80061dc:	f000 f88c 	bl	80062f8 <xTaskResumeAll>
 80061e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d107      	bne.n	80061f8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80061e8:	4b06      	ldr	r3, [pc, #24]	; (8006204 <vTaskDelay+0x64>)
 80061ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061ee:	601a      	str	r2, [r3, #0]
 80061f0:	f3bf 8f4f 	dsb	sy
 80061f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80061f8:	bf00      	nop
 80061fa:	3710      	adds	r7, #16
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	200004cc 	.word	0x200004cc
 8006204:	e000ed04 	.word	0xe000ed04

08006208 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b08a      	sub	sp, #40	; 0x28
 800620c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800620e:	2300      	movs	r3, #0
 8006210:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006212:	2300      	movs	r3, #0
 8006214:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006216:	463a      	mov	r2, r7
 8006218:	1d39      	adds	r1, r7, #4
 800621a:	f107 0308 	add.w	r3, r7, #8
 800621e:	4618      	mov	r0, r3
 8006220:	f7fa f9ba 	bl	8000598 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006224:	6839      	ldr	r1, [r7, #0]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	68ba      	ldr	r2, [r7, #8]
 800622a:	9202      	str	r2, [sp, #8]
 800622c:	9301      	str	r3, [sp, #4]
 800622e:	2300      	movs	r3, #0
 8006230:	9300      	str	r3, [sp, #0]
 8006232:	2300      	movs	r3, #0
 8006234:	460a      	mov	r2, r1
 8006236:	4921      	ldr	r1, [pc, #132]	; (80062bc <vTaskStartScheduler+0xb4>)
 8006238:	4821      	ldr	r0, [pc, #132]	; (80062c0 <vTaskStartScheduler+0xb8>)
 800623a:	f7ff fe07 	bl	8005e4c <xTaskCreateStatic>
 800623e:	4603      	mov	r3, r0
 8006240:	4a20      	ldr	r2, [pc, #128]	; (80062c4 <vTaskStartScheduler+0xbc>)
 8006242:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006244:	4b1f      	ldr	r3, [pc, #124]	; (80062c4 <vTaskStartScheduler+0xbc>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d002      	beq.n	8006252 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800624c:	2301      	movs	r3, #1
 800624e:	617b      	str	r3, [r7, #20]
 8006250:	e001      	b.n	8006256 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006252:	2300      	movs	r3, #0
 8006254:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	2b01      	cmp	r3, #1
 800625a:	d11b      	bne.n	8006294 <vTaskStartScheduler+0x8c>
	__asm volatile
 800625c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006260:	f383 8811 	msr	BASEPRI, r3
 8006264:	f3bf 8f6f 	isb	sy
 8006268:	f3bf 8f4f 	dsb	sy
 800626c:	613b      	str	r3, [r7, #16]
}
 800626e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006270:	4b15      	ldr	r3, [pc, #84]	; (80062c8 <vTaskStartScheduler+0xc0>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	334c      	adds	r3, #76	; 0x4c
 8006276:	4a15      	ldr	r2, [pc, #84]	; (80062cc <vTaskStartScheduler+0xc4>)
 8006278:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800627a:	4b15      	ldr	r3, [pc, #84]	; (80062d0 <vTaskStartScheduler+0xc8>)
 800627c:	f04f 32ff 	mov.w	r2, #4294967295
 8006280:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006282:	4b14      	ldr	r3, [pc, #80]	; (80062d4 <vTaskStartScheduler+0xcc>)
 8006284:	2201      	movs	r2, #1
 8006286:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006288:	4b13      	ldr	r3, [pc, #76]	; (80062d8 <vTaskStartScheduler+0xd0>)
 800628a:	2200      	movs	r2, #0
 800628c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800628e:	f000 fe9f 	bl	8006fd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006292:	e00e      	b.n	80062b2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800629a:	d10a      	bne.n	80062b2 <vTaskStartScheduler+0xaa>
	__asm volatile
 800629c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a0:	f383 8811 	msr	BASEPRI, r3
 80062a4:	f3bf 8f6f 	isb	sy
 80062a8:	f3bf 8f4f 	dsb	sy
 80062ac:	60fb      	str	r3, [r7, #12]
}
 80062ae:	bf00      	nop
 80062b0:	e7fe      	b.n	80062b0 <vTaskStartScheduler+0xa8>
}
 80062b2:	bf00      	nop
 80062b4:	3718      	adds	r7, #24
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	08018670 	.word	0x08018670
 80062c0:	080068bd 	.word	0x080068bd
 80062c4:	200004c8 	.word	0x200004c8
 80062c8:	200003a4 	.word	0x200003a4
 80062cc:	20000020 	.word	0x20000020
 80062d0:	200004c4 	.word	0x200004c4
 80062d4:	200004b0 	.word	0x200004b0
 80062d8:	200004a8 	.word	0x200004a8

080062dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80062dc:	b480      	push	{r7}
 80062de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80062e0:	4b04      	ldr	r3, [pc, #16]	; (80062f4 <vTaskSuspendAll+0x18>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	3301      	adds	r3, #1
 80062e6:	4a03      	ldr	r2, [pc, #12]	; (80062f4 <vTaskSuspendAll+0x18>)
 80062e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80062ea:	bf00      	nop
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr
 80062f4:	200004cc 	.word	0x200004cc

080062f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80062fe:	2300      	movs	r3, #0
 8006300:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006302:	2300      	movs	r3, #0
 8006304:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006306:	4b41      	ldr	r3, [pc, #260]	; (800640c <xTaskResumeAll+0x114>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d10a      	bne.n	8006324 <xTaskResumeAll+0x2c>
	__asm volatile
 800630e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006312:	f383 8811 	msr	BASEPRI, r3
 8006316:	f3bf 8f6f 	isb	sy
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	603b      	str	r3, [r7, #0]
}
 8006320:	bf00      	nop
 8006322:	e7fe      	b.n	8006322 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006324:	f000 fef6 	bl	8007114 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006328:	4b38      	ldr	r3, [pc, #224]	; (800640c <xTaskResumeAll+0x114>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	3b01      	subs	r3, #1
 800632e:	4a37      	ldr	r2, [pc, #220]	; (800640c <xTaskResumeAll+0x114>)
 8006330:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006332:	4b36      	ldr	r3, [pc, #216]	; (800640c <xTaskResumeAll+0x114>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d161      	bne.n	80063fe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800633a:	4b35      	ldr	r3, [pc, #212]	; (8006410 <xTaskResumeAll+0x118>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d05d      	beq.n	80063fe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006342:	e02e      	b.n	80063a2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006344:	4b33      	ldr	r3, [pc, #204]	; (8006414 <xTaskResumeAll+0x11c>)
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	3318      	adds	r3, #24
 8006350:	4618      	mov	r0, r3
 8006352:	f7fe fd86 	bl	8004e62 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	3304      	adds	r3, #4
 800635a:	4618      	mov	r0, r3
 800635c:	f7fe fd81 	bl	8004e62 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006364:	2201      	movs	r2, #1
 8006366:	409a      	lsls	r2, r3
 8006368:	4b2b      	ldr	r3, [pc, #172]	; (8006418 <xTaskResumeAll+0x120>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4313      	orrs	r3, r2
 800636e:	4a2a      	ldr	r2, [pc, #168]	; (8006418 <xTaskResumeAll+0x120>)
 8006370:	6013      	str	r3, [r2, #0]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006376:	4613      	mov	r3, r2
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	4413      	add	r3, r2
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	4a27      	ldr	r2, [pc, #156]	; (800641c <xTaskResumeAll+0x124>)
 8006380:	441a      	add	r2, r3
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	3304      	adds	r3, #4
 8006386:	4619      	mov	r1, r3
 8006388:	4610      	mov	r0, r2
 800638a:	f7fe fd0d 	bl	8004da8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006392:	4b23      	ldr	r3, [pc, #140]	; (8006420 <xTaskResumeAll+0x128>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006398:	429a      	cmp	r2, r3
 800639a:	d302      	bcc.n	80063a2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800639c:	4b21      	ldr	r3, [pc, #132]	; (8006424 <xTaskResumeAll+0x12c>)
 800639e:	2201      	movs	r2, #1
 80063a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063a2:	4b1c      	ldr	r3, [pc, #112]	; (8006414 <xTaskResumeAll+0x11c>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d1cc      	bne.n	8006344 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d001      	beq.n	80063b4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80063b0:	f000 fb3e 	bl	8006a30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80063b4:	4b1c      	ldr	r3, [pc, #112]	; (8006428 <xTaskResumeAll+0x130>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d010      	beq.n	80063e2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80063c0:	f000 f858 	bl	8006474 <xTaskIncrementTick>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d002      	beq.n	80063d0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80063ca:	4b16      	ldr	r3, [pc, #88]	; (8006424 <xTaskResumeAll+0x12c>)
 80063cc:	2201      	movs	r2, #1
 80063ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	3b01      	subs	r3, #1
 80063d4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1f1      	bne.n	80063c0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80063dc:	4b12      	ldr	r3, [pc, #72]	; (8006428 <xTaskResumeAll+0x130>)
 80063de:	2200      	movs	r2, #0
 80063e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80063e2:	4b10      	ldr	r3, [pc, #64]	; (8006424 <xTaskResumeAll+0x12c>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d009      	beq.n	80063fe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80063ea:	2301      	movs	r3, #1
 80063ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80063ee:	4b0f      	ldr	r3, [pc, #60]	; (800642c <xTaskResumeAll+0x134>)
 80063f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063f4:	601a      	str	r2, [r3, #0]
 80063f6:	f3bf 8f4f 	dsb	sy
 80063fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80063fe:	f000 feb9 	bl	8007174 <vPortExitCritical>

	return xAlreadyYielded;
 8006402:	68bb      	ldr	r3, [r7, #8]
}
 8006404:	4618      	mov	r0, r3
 8006406:	3710      	adds	r7, #16
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}
 800640c:	200004cc 	.word	0x200004cc
 8006410:	200004a4 	.word	0x200004a4
 8006414:	20000464 	.word	0x20000464
 8006418:	200004ac 	.word	0x200004ac
 800641c:	200003a8 	.word	0x200003a8
 8006420:	200003a4 	.word	0x200003a4
 8006424:	200004b8 	.word	0x200004b8
 8006428:	200004b4 	.word	0x200004b4
 800642c:	e000ed04 	.word	0xe000ed04

08006430 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006436:	4b05      	ldr	r3, [pc, #20]	; (800644c <xTaskGetTickCount+0x1c>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800643c:	687b      	ldr	r3, [r7, #4]
}
 800643e:	4618      	mov	r0, r3
 8006440:	370c      	adds	r7, #12
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	200004a8 	.word	0x200004a8

08006450 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006456:	f000 ff3f 	bl	80072d8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800645a:	2300      	movs	r3, #0
 800645c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800645e:	4b04      	ldr	r3, [pc, #16]	; (8006470 <xTaskGetTickCountFromISR+0x20>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006464:	683b      	ldr	r3, [r7, #0]
}
 8006466:	4618      	mov	r0, r3
 8006468:	3708      	adds	r7, #8
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	200004a8 	.word	0x200004a8

08006474 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800647a:	2300      	movs	r3, #0
 800647c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800647e:	4b4e      	ldr	r3, [pc, #312]	; (80065b8 <xTaskIncrementTick+0x144>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	f040 808e 	bne.w	80065a4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006488:	4b4c      	ldr	r3, [pc, #304]	; (80065bc <xTaskIncrementTick+0x148>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	3301      	adds	r3, #1
 800648e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006490:	4a4a      	ldr	r2, [pc, #296]	; (80065bc <xTaskIncrementTick+0x148>)
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d120      	bne.n	80064de <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800649c:	4b48      	ldr	r3, [pc, #288]	; (80065c0 <xTaskIncrementTick+0x14c>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00a      	beq.n	80064bc <xTaskIncrementTick+0x48>
	__asm volatile
 80064a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064aa:	f383 8811 	msr	BASEPRI, r3
 80064ae:	f3bf 8f6f 	isb	sy
 80064b2:	f3bf 8f4f 	dsb	sy
 80064b6:	603b      	str	r3, [r7, #0]
}
 80064b8:	bf00      	nop
 80064ba:	e7fe      	b.n	80064ba <xTaskIncrementTick+0x46>
 80064bc:	4b40      	ldr	r3, [pc, #256]	; (80065c0 <xTaskIncrementTick+0x14c>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	60fb      	str	r3, [r7, #12]
 80064c2:	4b40      	ldr	r3, [pc, #256]	; (80065c4 <xTaskIncrementTick+0x150>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a3e      	ldr	r2, [pc, #248]	; (80065c0 <xTaskIncrementTick+0x14c>)
 80064c8:	6013      	str	r3, [r2, #0]
 80064ca:	4a3e      	ldr	r2, [pc, #248]	; (80065c4 <xTaskIncrementTick+0x150>)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6013      	str	r3, [r2, #0]
 80064d0:	4b3d      	ldr	r3, [pc, #244]	; (80065c8 <xTaskIncrementTick+0x154>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	3301      	adds	r3, #1
 80064d6:	4a3c      	ldr	r2, [pc, #240]	; (80065c8 <xTaskIncrementTick+0x154>)
 80064d8:	6013      	str	r3, [r2, #0]
 80064da:	f000 faa9 	bl	8006a30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80064de:	4b3b      	ldr	r3, [pc, #236]	; (80065cc <xTaskIncrementTick+0x158>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d348      	bcc.n	800657a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064e8:	4b35      	ldr	r3, [pc, #212]	; (80065c0 <xTaskIncrementTick+0x14c>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d104      	bne.n	80064fc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064f2:	4b36      	ldr	r3, [pc, #216]	; (80065cc <xTaskIncrementTick+0x158>)
 80064f4:	f04f 32ff 	mov.w	r2, #4294967295
 80064f8:	601a      	str	r2, [r3, #0]
					break;
 80064fa:	e03e      	b.n	800657a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064fc:	4b30      	ldr	r3, [pc, #192]	; (80065c0 <xTaskIncrementTick+0x14c>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800650c:	693a      	ldr	r2, [r7, #16]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	429a      	cmp	r2, r3
 8006512:	d203      	bcs.n	800651c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006514:	4a2d      	ldr	r2, [pc, #180]	; (80065cc <xTaskIncrementTick+0x158>)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800651a:	e02e      	b.n	800657a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	3304      	adds	r3, #4
 8006520:	4618      	mov	r0, r3
 8006522:	f7fe fc9e 	bl	8004e62 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800652a:	2b00      	cmp	r3, #0
 800652c:	d004      	beq.n	8006538 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	3318      	adds	r3, #24
 8006532:	4618      	mov	r0, r3
 8006534:	f7fe fc95 	bl	8004e62 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653c:	2201      	movs	r2, #1
 800653e:	409a      	lsls	r2, r3
 8006540:	4b23      	ldr	r3, [pc, #140]	; (80065d0 <xTaskIncrementTick+0x15c>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4313      	orrs	r3, r2
 8006546:	4a22      	ldr	r2, [pc, #136]	; (80065d0 <xTaskIncrementTick+0x15c>)
 8006548:	6013      	str	r3, [r2, #0]
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800654e:	4613      	mov	r3, r2
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	4413      	add	r3, r2
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	4a1f      	ldr	r2, [pc, #124]	; (80065d4 <xTaskIncrementTick+0x160>)
 8006558:	441a      	add	r2, r3
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	3304      	adds	r3, #4
 800655e:	4619      	mov	r1, r3
 8006560:	4610      	mov	r0, r2
 8006562:	f7fe fc21 	bl	8004da8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800656a:	4b1b      	ldr	r3, [pc, #108]	; (80065d8 <xTaskIncrementTick+0x164>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006570:	429a      	cmp	r2, r3
 8006572:	d3b9      	bcc.n	80064e8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006574:	2301      	movs	r3, #1
 8006576:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006578:	e7b6      	b.n	80064e8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800657a:	4b17      	ldr	r3, [pc, #92]	; (80065d8 <xTaskIncrementTick+0x164>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006580:	4914      	ldr	r1, [pc, #80]	; (80065d4 <xTaskIncrementTick+0x160>)
 8006582:	4613      	mov	r3, r2
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	4413      	add	r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	440b      	add	r3, r1
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2b01      	cmp	r3, #1
 8006590:	d901      	bls.n	8006596 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006592:	2301      	movs	r3, #1
 8006594:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006596:	4b11      	ldr	r3, [pc, #68]	; (80065dc <xTaskIncrementTick+0x168>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d007      	beq.n	80065ae <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800659e:	2301      	movs	r3, #1
 80065a0:	617b      	str	r3, [r7, #20]
 80065a2:	e004      	b.n	80065ae <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80065a4:	4b0e      	ldr	r3, [pc, #56]	; (80065e0 <xTaskIncrementTick+0x16c>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	3301      	adds	r3, #1
 80065aa:	4a0d      	ldr	r2, [pc, #52]	; (80065e0 <xTaskIncrementTick+0x16c>)
 80065ac:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80065ae:	697b      	ldr	r3, [r7, #20]
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3718      	adds	r7, #24
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	200004cc 	.word	0x200004cc
 80065bc:	200004a8 	.word	0x200004a8
 80065c0:	2000045c 	.word	0x2000045c
 80065c4:	20000460 	.word	0x20000460
 80065c8:	200004bc 	.word	0x200004bc
 80065cc:	200004c4 	.word	0x200004c4
 80065d0:	200004ac 	.word	0x200004ac
 80065d4:	200003a8 	.word	0x200003a8
 80065d8:	200003a4 	.word	0x200003a4
 80065dc:	200004b8 	.word	0x200004b8
 80065e0:	200004b4 	.word	0x200004b4

080065e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80065e4:	b480      	push	{r7}
 80065e6:	b087      	sub	sp, #28
 80065e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80065ea:	4b29      	ldr	r3, [pc, #164]	; (8006690 <vTaskSwitchContext+0xac>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d003      	beq.n	80065fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80065f2:	4b28      	ldr	r3, [pc, #160]	; (8006694 <vTaskSwitchContext+0xb0>)
 80065f4:	2201      	movs	r2, #1
 80065f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80065f8:	e044      	b.n	8006684 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80065fa:	4b26      	ldr	r3, [pc, #152]	; (8006694 <vTaskSwitchContext+0xb0>)
 80065fc:	2200      	movs	r2, #0
 80065fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006600:	4b25      	ldr	r3, [pc, #148]	; (8006698 <vTaskSwitchContext+0xb4>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	fab3 f383 	clz	r3, r3
 800660c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800660e:	7afb      	ldrb	r3, [r7, #11]
 8006610:	f1c3 031f 	rsb	r3, r3, #31
 8006614:	617b      	str	r3, [r7, #20]
 8006616:	4921      	ldr	r1, [pc, #132]	; (800669c <vTaskSwitchContext+0xb8>)
 8006618:	697a      	ldr	r2, [r7, #20]
 800661a:	4613      	mov	r3, r2
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	4413      	add	r3, r2
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	440b      	add	r3, r1
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10a      	bne.n	8006640 <vTaskSwitchContext+0x5c>
	__asm volatile
 800662a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662e:	f383 8811 	msr	BASEPRI, r3
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	607b      	str	r3, [r7, #4]
}
 800663c:	bf00      	nop
 800663e:	e7fe      	b.n	800663e <vTaskSwitchContext+0x5a>
 8006640:	697a      	ldr	r2, [r7, #20]
 8006642:	4613      	mov	r3, r2
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	4413      	add	r3, r2
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	4a14      	ldr	r2, [pc, #80]	; (800669c <vTaskSwitchContext+0xb8>)
 800664c:	4413      	add	r3, r2
 800664e:	613b      	str	r3, [r7, #16]
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	685a      	ldr	r2, [r3, #4]
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	605a      	str	r2, [r3, #4]
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	685a      	ldr	r2, [r3, #4]
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	3308      	adds	r3, #8
 8006662:	429a      	cmp	r2, r3
 8006664:	d104      	bne.n	8006670 <vTaskSwitchContext+0x8c>
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	685a      	ldr	r2, [r3, #4]
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	605a      	str	r2, [r3, #4]
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	4a0a      	ldr	r2, [pc, #40]	; (80066a0 <vTaskSwitchContext+0xbc>)
 8006678:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800667a:	4b09      	ldr	r3, [pc, #36]	; (80066a0 <vTaskSwitchContext+0xbc>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	334c      	adds	r3, #76	; 0x4c
 8006680:	4a08      	ldr	r2, [pc, #32]	; (80066a4 <vTaskSwitchContext+0xc0>)
 8006682:	6013      	str	r3, [r2, #0]
}
 8006684:	bf00      	nop
 8006686:	371c      	adds	r7, #28
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr
 8006690:	200004cc 	.word	0x200004cc
 8006694:	200004b8 	.word	0x200004b8
 8006698:	200004ac 	.word	0x200004ac
 800669c:	200003a8 	.word	0x200003a8
 80066a0:	200003a4 	.word	0x200003a4
 80066a4:	20000020 	.word	0x20000020

080066a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d10a      	bne.n	80066ce <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80066b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066bc:	f383 8811 	msr	BASEPRI, r3
 80066c0:	f3bf 8f6f 	isb	sy
 80066c4:	f3bf 8f4f 	dsb	sy
 80066c8:	60fb      	str	r3, [r7, #12]
}
 80066ca:	bf00      	nop
 80066cc:	e7fe      	b.n	80066cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80066ce:	4b07      	ldr	r3, [pc, #28]	; (80066ec <vTaskPlaceOnEventList+0x44>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	3318      	adds	r3, #24
 80066d4:	4619      	mov	r1, r3
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f7fe fb8a 	bl	8004df0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80066dc:	2101      	movs	r1, #1
 80066de:	6838      	ldr	r0, [r7, #0]
 80066e0:	f000 fb82 	bl	8006de8 <prvAddCurrentTaskToDelayedList>
}
 80066e4:	bf00      	nop
 80066e6:	3710      	adds	r7, #16
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	200003a4 	.word	0x200003a4

080066f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b086      	sub	sp, #24
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d10a      	bne.n	800671c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670a:	f383 8811 	msr	BASEPRI, r3
 800670e:	f3bf 8f6f 	isb	sy
 8006712:	f3bf 8f4f 	dsb	sy
 8006716:	60fb      	str	r3, [r7, #12]
}
 8006718:	bf00      	nop
 800671a:	e7fe      	b.n	800671a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	3318      	adds	r3, #24
 8006720:	4618      	mov	r0, r3
 8006722:	f7fe fb9e 	bl	8004e62 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006726:	4b1d      	ldr	r3, [pc, #116]	; (800679c <xTaskRemoveFromEventList+0xac>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d11c      	bne.n	8006768 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	3304      	adds	r3, #4
 8006732:	4618      	mov	r0, r3
 8006734:	f7fe fb95 	bl	8004e62 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800673c:	2201      	movs	r2, #1
 800673e:	409a      	lsls	r2, r3
 8006740:	4b17      	ldr	r3, [pc, #92]	; (80067a0 <xTaskRemoveFromEventList+0xb0>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4313      	orrs	r3, r2
 8006746:	4a16      	ldr	r2, [pc, #88]	; (80067a0 <xTaskRemoveFromEventList+0xb0>)
 8006748:	6013      	str	r3, [r2, #0]
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800674e:	4613      	mov	r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	4413      	add	r3, r2
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	4a13      	ldr	r2, [pc, #76]	; (80067a4 <xTaskRemoveFromEventList+0xb4>)
 8006758:	441a      	add	r2, r3
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	3304      	adds	r3, #4
 800675e:	4619      	mov	r1, r3
 8006760:	4610      	mov	r0, r2
 8006762:	f7fe fb21 	bl	8004da8 <vListInsertEnd>
 8006766:	e005      	b.n	8006774 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	3318      	adds	r3, #24
 800676c:	4619      	mov	r1, r3
 800676e:	480e      	ldr	r0, [pc, #56]	; (80067a8 <xTaskRemoveFromEventList+0xb8>)
 8006770:	f7fe fb1a 	bl	8004da8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006778:	4b0c      	ldr	r3, [pc, #48]	; (80067ac <xTaskRemoveFromEventList+0xbc>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677e:	429a      	cmp	r2, r3
 8006780:	d905      	bls.n	800678e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006782:	2301      	movs	r3, #1
 8006784:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006786:	4b0a      	ldr	r3, [pc, #40]	; (80067b0 <xTaskRemoveFromEventList+0xc0>)
 8006788:	2201      	movs	r2, #1
 800678a:	601a      	str	r2, [r3, #0]
 800678c:	e001      	b.n	8006792 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800678e:	2300      	movs	r3, #0
 8006790:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006792:	697b      	ldr	r3, [r7, #20]
}
 8006794:	4618      	mov	r0, r3
 8006796:	3718      	adds	r7, #24
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}
 800679c:	200004cc 	.word	0x200004cc
 80067a0:	200004ac 	.word	0x200004ac
 80067a4:	200003a8 	.word	0x200003a8
 80067a8:	20000464 	.word	0x20000464
 80067ac:	200003a4 	.word	0x200003a4
 80067b0:	200004b8 	.word	0x200004b8

080067b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80067bc:	4b06      	ldr	r3, [pc, #24]	; (80067d8 <vTaskInternalSetTimeOutState+0x24>)
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80067c4:	4b05      	ldr	r3, [pc, #20]	; (80067dc <vTaskInternalSetTimeOutState+0x28>)
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	605a      	str	r2, [r3, #4]
}
 80067cc:	bf00      	nop
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr
 80067d8:	200004bc 	.word	0x200004bc
 80067dc:	200004a8 	.word	0x200004a8

080067e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b088      	sub	sp, #32
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d10a      	bne.n	8006806 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80067f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f4:	f383 8811 	msr	BASEPRI, r3
 80067f8:	f3bf 8f6f 	isb	sy
 80067fc:	f3bf 8f4f 	dsb	sy
 8006800:	613b      	str	r3, [r7, #16]
}
 8006802:	bf00      	nop
 8006804:	e7fe      	b.n	8006804 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d10a      	bne.n	8006822 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800680c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006810:	f383 8811 	msr	BASEPRI, r3
 8006814:	f3bf 8f6f 	isb	sy
 8006818:	f3bf 8f4f 	dsb	sy
 800681c:	60fb      	str	r3, [r7, #12]
}
 800681e:	bf00      	nop
 8006820:	e7fe      	b.n	8006820 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006822:	f000 fc77 	bl	8007114 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006826:	4b1d      	ldr	r3, [pc, #116]	; (800689c <xTaskCheckForTimeOut+0xbc>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	69ba      	ldr	r2, [r7, #24]
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800683e:	d102      	bne.n	8006846 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006840:	2300      	movs	r3, #0
 8006842:	61fb      	str	r3, [r7, #28]
 8006844:	e023      	b.n	800688e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	4b15      	ldr	r3, [pc, #84]	; (80068a0 <xTaskCheckForTimeOut+0xc0>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	429a      	cmp	r2, r3
 8006850:	d007      	beq.n	8006862 <xTaskCheckForTimeOut+0x82>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	69ba      	ldr	r2, [r7, #24]
 8006858:	429a      	cmp	r2, r3
 800685a:	d302      	bcc.n	8006862 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800685c:	2301      	movs	r3, #1
 800685e:	61fb      	str	r3, [r7, #28]
 8006860:	e015      	b.n	800688e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	697a      	ldr	r2, [r7, #20]
 8006868:	429a      	cmp	r2, r3
 800686a:	d20b      	bcs.n	8006884 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	1ad2      	subs	r2, r2, r3
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f7ff ff9b 	bl	80067b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800687e:	2300      	movs	r3, #0
 8006880:	61fb      	str	r3, [r7, #28]
 8006882:	e004      	b.n	800688e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	2200      	movs	r2, #0
 8006888:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800688a:	2301      	movs	r3, #1
 800688c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800688e:	f000 fc71 	bl	8007174 <vPortExitCritical>

	return xReturn;
 8006892:	69fb      	ldr	r3, [r7, #28]
}
 8006894:	4618      	mov	r0, r3
 8006896:	3720      	adds	r7, #32
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}
 800689c:	200004a8 	.word	0x200004a8
 80068a0:	200004bc 	.word	0x200004bc

080068a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80068a4:	b480      	push	{r7}
 80068a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80068a8:	4b03      	ldr	r3, [pc, #12]	; (80068b8 <vTaskMissedYield+0x14>)
 80068aa:	2201      	movs	r2, #1
 80068ac:	601a      	str	r2, [r3, #0]
}
 80068ae:	bf00      	nop
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr
 80068b8:	200004b8 	.word	0x200004b8

080068bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80068c4:	f000 f852 	bl	800696c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80068c8:	4b06      	ldr	r3, [pc, #24]	; (80068e4 <prvIdleTask+0x28>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d9f9      	bls.n	80068c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80068d0:	4b05      	ldr	r3, [pc, #20]	; (80068e8 <prvIdleTask+0x2c>)
 80068d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068d6:	601a      	str	r2, [r3, #0]
 80068d8:	f3bf 8f4f 	dsb	sy
 80068dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80068e0:	e7f0      	b.n	80068c4 <prvIdleTask+0x8>
 80068e2:	bf00      	nop
 80068e4:	200003a8 	.word	0x200003a8
 80068e8:	e000ed04 	.word	0xe000ed04

080068ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068f2:	2300      	movs	r3, #0
 80068f4:	607b      	str	r3, [r7, #4]
 80068f6:	e00c      	b.n	8006912 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	4613      	mov	r3, r2
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	4413      	add	r3, r2
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	4a12      	ldr	r2, [pc, #72]	; (800694c <prvInitialiseTaskLists+0x60>)
 8006904:	4413      	add	r3, r2
 8006906:	4618      	mov	r0, r3
 8006908:	f7fe fa21 	bl	8004d4e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	3301      	adds	r3, #1
 8006910:	607b      	str	r3, [r7, #4]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2b06      	cmp	r3, #6
 8006916:	d9ef      	bls.n	80068f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006918:	480d      	ldr	r0, [pc, #52]	; (8006950 <prvInitialiseTaskLists+0x64>)
 800691a:	f7fe fa18 	bl	8004d4e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800691e:	480d      	ldr	r0, [pc, #52]	; (8006954 <prvInitialiseTaskLists+0x68>)
 8006920:	f7fe fa15 	bl	8004d4e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006924:	480c      	ldr	r0, [pc, #48]	; (8006958 <prvInitialiseTaskLists+0x6c>)
 8006926:	f7fe fa12 	bl	8004d4e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800692a:	480c      	ldr	r0, [pc, #48]	; (800695c <prvInitialiseTaskLists+0x70>)
 800692c:	f7fe fa0f 	bl	8004d4e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006930:	480b      	ldr	r0, [pc, #44]	; (8006960 <prvInitialiseTaskLists+0x74>)
 8006932:	f7fe fa0c 	bl	8004d4e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006936:	4b0b      	ldr	r3, [pc, #44]	; (8006964 <prvInitialiseTaskLists+0x78>)
 8006938:	4a05      	ldr	r2, [pc, #20]	; (8006950 <prvInitialiseTaskLists+0x64>)
 800693a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800693c:	4b0a      	ldr	r3, [pc, #40]	; (8006968 <prvInitialiseTaskLists+0x7c>)
 800693e:	4a05      	ldr	r2, [pc, #20]	; (8006954 <prvInitialiseTaskLists+0x68>)
 8006940:	601a      	str	r2, [r3, #0]
}
 8006942:	bf00      	nop
 8006944:	3708      	adds	r7, #8
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	200003a8 	.word	0x200003a8
 8006950:	20000434 	.word	0x20000434
 8006954:	20000448 	.word	0x20000448
 8006958:	20000464 	.word	0x20000464
 800695c:	20000478 	.word	0x20000478
 8006960:	20000490 	.word	0x20000490
 8006964:	2000045c 	.word	0x2000045c
 8006968:	20000460 	.word	0x20000460

0800696c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006972:	e019      	b.n	80069a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006974:	f000 fbce 	bl	8007114 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006978:	4b10      	ldr	r3, [pc, #64]	; (80069bc <prvCheckTasksWaitingTermination+0x50>)
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	3304      	adds	r3, #4
 8006984:	4618      	mov	r0, r3
 8006986:	f7fe fa6c 	bl	8004e62 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800698a:	4b0d      	ldr	r3, [pc, #52]	; (80069c0 <prvCheckTasksWaitingTermination+0x54>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	3b01      	subs	r3, #1
 8006990:	4a0b      	ldr	r2, [pc, #44]	; (80069c0 <prvCheckTasksWaitingTermination+0x54>)
 8006992:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006994:	4b0b      	ldr	r3, [pc, #44]	; (80069c4 <prvCheckTasksWaitingTermination+0x58>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	3b01      	subs	r3, #1
 800699a:	4a0a      	ldr	r2, [pc, #40]	; (80069c4 <prvCheckTasksWaitingTermination+0x58>)
 800699c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800699e:	f000 fbe9 	bl	8007174 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 f810 	bl	80069c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069a8:	4b06      	ldr	r3, [pc, #24]	; (80069c4 <prvCheckTasksWaitingTermination+0x58>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d1e1      	bne.n	8006974 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80069b0:	bf00      	nop
 80069b2:	bf00      	nop
 80069b4:	3708      	adds	r7, #8
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	20000478 	.word	0x20000478
 80069c0:	200004a4 	.word	0x200004a4
 80069c4:	2000048c 	.word	0x2000048c

080069c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	334c      	adds	r3, #76	; 0x4c
 80069d4:	4618      	mov	r0, r3
 80069d6:	f010 fcc3 	bl	8017360 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d108      	bne.n	80069f6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e8:	4618      	mov	r0, r3
 80069ea:	f000 fd81 	bl	80074f0 <vPortFree>
				vPortFree( pxTCB );
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fd7e 	bl	80074f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80069f4:	e018      	b.n	8006a28 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d103      	bne.n	8006a08 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 fd75 	bl	80074f0 <vPortFree>
	}
 8006a06:	e00f      	b.n	8006a28 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	d00a      	beq.n	8006a28 <prvDeleteTCB+0x60>
	__asm volatile
 8006a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a16:	f383 8811 	msr	BASEPRI, r3
 8006a1a:	f3bf 8f6f 	isb	sy
 8006a1e:	f3bf 8f4f 	dsb	sy
 8006a22:	60fb      	str	r3, [r7, #12]
}
 8006a24:	bf00      	nop
 8006a26:	e7fe      	b.n	8006a26 <prvDeleteTCB+0x5e>
	}
 8006a28:	bf00      	nop
 8006a2a:	3710      	adds	r7, #16
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a36:	4b0c      	ldr	r3, [pc, #48]	; (8006a68 <prvResetNextTaskUnblockTime+0x38>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d104      	bne.n	8006a4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a40:	4b0a      	ldr	r3, [pc, #40]	; (8006a6c <prvResetNextTaskUnblockTime+0x3c>)
 8006a42:	f04f 32ff 	mov.w	r2, #4294967295
 8006a46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006a48:	e008      	b.n	8006a5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a4a:	4b07      	ldr	r3, [pc, #28]	; (8006a68 <prvResetNextTaskUnblockTime+0x38>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	4a04      	ldr	r2, [pc, #16]	; (8006a6c <prvResetNextTaskUnblockTime+0x3c>)
 8006a5a:	6013      	str	r3, [r2, #0]
}
 8006a5c:	bf00      	nop
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr
 8006a68:	2000045c 	.word	0x2000045c
 8006a6c:	200004c4 	.word	0x200004c4

08006a70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006a76:	4b0b      	ldr	r3, [pc, #44]	; (8006aa4 <xTaskGetSchedulerState+0x34>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d102      	bne.n	8006a84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	607b      	str	r3, [r7, #4]
 8006a82:	e008      	b.n	8006a96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a84:	4b08      	ldr	r3, [pc, #32]	; (8006aa8 <xTaskGetSchedulerState+0x38>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d102      	bne.n	8006a92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006a8c:	2302      	movs	r3, #2
 8006a8e:	607b      	str	r3, [r7, #4]
 8006a90:	e001      	b.n	8006a96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006a92:	2300      	movs	r3, #0
 8006a94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006a96:	687b      	ldr	r3, [r7, #4]
	}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr
 8006aa4:	200004b0 	.word	0x200004b0
 8006aa8:	200004cc 	.word	0x200004cc

08006aac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d05e      	beq.n	8006b80 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ac6:	4b31      	ldr	r3, [pc, #196]	; (8006b8c <xTaskPriorityInherit+0xe0>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d24e      	bcs.n	8006b6e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	699b      	ldr	r3, [r3, #24]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	db06      	blt.n	8006ae6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ad8:	4b2c      	ldr	r3, [pc, #176]	; (8006b8c <xTaskPriorityInherit+0xe0>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ade:	f1c3 0207 	rsb	r2, r3, #7
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	6959      	ldr	r1, [r3, #20]
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aee:	4613      	mov	r3, r2
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	4413      	add	r3, r2
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	4a26      	ldr	r2, [pc, #152]	; (8006b90 <xTaskPriorityInherit+0xe4>)
 8006af8:	4413      	add	r3, r2
 8006afa:	4299      	cmp	r1, r3
 8006afc:	d12f      	bne.n	8006b5e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	3304      	adds	r3, #4
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7fe f9ad 	bl	8004e62 <uxListRemove>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d10a      	bne.n	8006b24 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b12:	2201      	movs	r2, #1
 8006b14:	fa02 f303 	lsl.w	r3, r2, r3
 8006b18:	43da      	mvns	r2, r3
 8006b1a:	4b1e      	ldr	r3, [pc, #120]	; (8006b94 <xTaskPriorityInherit+0xe8>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4013      	ands	r3, r2
 8006b20:	4a1c      	ldr	r2, [pc, #112]	; (8006b94 <xTaskPriorityInherit+0xe8>)
 8006b22:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006b24:	4b19      	ldr	r3, [pc, #100]	; (8006b8c <xTaskPriorityInherit+0xe0>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b32:	2201      	movs	r2, #1
 8006b34:	409a      	lsls	r2, r3
 8006b36:	4b17      	ldr	r3, [pc, #92]	; (8006b94 <xTaskPriorityInherit+0xe8>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	4a15      	ldr	r2, [pc, #84]	; (8006b94 <xTaskPriorityInherit+0xe8>)
 8006b3e:	6013      	str	r3, [r2, #0]
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b44:	4613      	mov	r3, r2
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	4413      	add	r3, r2
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	4a10      	ldr	r2, [pc, #64]	; (8006b90 <xTaskPriorityInherit+0xe4>)
 8006b4e:	441a      	add	r2, r3
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	3304      	adds	r3, #4
 8006b54:	4619      	mov	r1, r3
 8006b56:	4610      	mov	r0, r2
 8006b58:	f7fe f926 	bl	8004da8 <vListInsertEnd>
 8006b5c:	e004      	b.n	8006b68 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006b5e:	4b0b      	ldr	r3, [pc, #44]	; (8006b8c <xTaskPriorityInherit+0xe0>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	60fb      	str	r3, [r7, #12]
 8006b6c:	e008      	b.n	8006b80 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b72:	4b06      	ldr	r3, [pc, #24]	; (8006b8c <xTaskPriorityInherit+0xe0>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d201      	bcs.n	8006b80 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b80:	68fb      	ldr	r3, [r7, #12]
	}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3710      	adds	r7, #16
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	200003a4 	.word	0x200003a4
 8006b90:	200003a8 	.word	0x200003a8
 8006b94:	200004ac 	.word	0x200004ac

08006b98 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b086      	sub	sp, #24
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d06e      	beq.n	8006c8c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006bae:	4b3a      	ldr	r3, [pc, #232]	; (8006c98 <xTaskPriorityDisinherit+0x100>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	693a      	ldr	r2, [r7, #16]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d00a      	beq.n	8006bce <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bbc:	f383 8811 	msr	BASEPRI, r3
 8006bc0:	f3bf 8f6f 	isb	sy
 8006bc4:	f3bf 8f4f 	dsb	sy
 8006bc8:	60fb      	str	r3, [r7, #12]
}
 8006bca:	bf00      	nop
 8006bcc:	e7fe      	b.n	8006bcc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d10a      	bne.n	8006bec <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bda:	f383 8811 	msr	BASEPRI, r3
 8006bde:	f3bf 8f6f 	isb	sy
 8006be2:	f3bf 8f4f 	dsb	sy
 8006be6:	60bb      	str	r3, [r7, #8]
}
 8006be8:	bf00      	nop
 8006bea:	e7fe      	b.n	8006bea <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bf0:	1e5a      	subs	r2, r3, #1
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d044      	beq.n	8006c8c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d140      	bne.n	8006c8c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	3304      	adds	r3, #4
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f7fe f927 	bl	8004e62 <uxListRemove>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d115      	bne.n	8006c46 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c1e:	491f      	ldr	r1, [pc, #124]	; (8006c9c <xTaskPriorityDisinherit+0x104>)
 8006c20:	4613      	mov	r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	4413      	add	r3, r2
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	440b      	add	r3, r1
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d10a      	bne.n	8006c46 <xTaskPriorityDisinherit+0xae>
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c34:	2201      	movs	r2, #1
 8006c36:	fa02 f303 	lsl.w	r3, r2, r3
 8006c3a:	43da      	mvns	r2, r3
 8006c3c:	4b18      	ldr	r3, [pc, #96]	; (8006ca0 <xTaskPriorityDisinherit+0x108>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4013      	ands	r3, r2
 8006c42:	4a17      	ldr	r2, [pc, #92]	; (8006ca0 <xTaskPriorityDisinherit+0x108>)
 8006c44:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c52:	f1c3 0207 	rsb	r2, r3, #7
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c5e:	2201      	movs	r2, #1
 8006c60:	409a      	lsls	r2, r3
 8006c62:	4b0f      	ldr	r3, [pc, #60]	; (8006ca0 <xTaskPriorityDisinherit+0x108>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	4a0d      	ldr	r2, [pc, #52]	; (8006ca0 <xTaskPriorityDisinherit+0x108>)
 8006c6a:	6013      	str	r3, [r2, #0]
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c70:	4613      	mov	r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	4413      	add	r3, r2
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	4a08      	ldr	r2, [pc, #32]	; (8006c9c <xTaskPriorityDisinherit+0x104>)
 8006c7a:	441a      	add	r2, r3
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	3304      	adds	r3, #4
 8006c80:	4619      	mov	r1, r3
 8006c82:	4610      	mov	r0, r2
 8006c84:	f7fe f890 	bl	8004da8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006c8c:	697b      	ldr	r3, [r7, #20]
	}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3718      	adds	r7, #24
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	200003a4 	.word	0x200003a4
 8006c9c:	200003a8 	.word	0x200003a8
 8006ca0:	200004ac 	.word	0x200004ac

08006ca4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b088      	sub	sp, #32
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d077      	beq.n	8006dac <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d10a      	bne.n	8006cda <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc8:	f383 8811 	msr	BASEPRI, r3
 8006ccc:	f3bf 8f6f 	isb	sy
 8006cd0:	f3bf 8f4f 	dsb	sy
 8006cd4:	60fb      	str	r3, [r7, #12]
}
 8006cd6:	bf00      	nop
 8006cd8:	e7fe      	b.n	8006cd8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cde:	683a      	ldr	r2, [r7, #0]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d902      	bls.n	8006cea <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	61fb      	str	r3, [r7, #28]
 8006ce8:	e002      	b.n	8006cf0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cee:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf4:	69fa      	ldr	r2, [r7, #28]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d058      	beq.n	8006dac <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cfe:	697a      	ldr	r2, [r7, #20]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d153      	bne.n	8006dac <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006d04:	4b2b      	ldr	r3, [pc, #172]	; (8006db4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	69ba      	ldr	r2, [r7, #24]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d10a      	bne.n	8006d24 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d12:	f383 8811 	msr	BASEPRI, r3
 8006d16:	f3bf 8f6f 	isb	sy
 8006d1a:	f3bf 8f4f 	dsb	sy
 8006d1e:	60bb      	str	r3, [r7, #8]
}
 8006d20:	bf00      	nop
 8006d22:	e7fe      	b.n	8006d22 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d28:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	69fa      	ldr	r2, [r7, #28]
 8006d2e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	699b      	ldr	r3, [r3, #24]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	db04      	blt.n	8006d42 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	f1c3 0207 	rsb	r2, r3, #7
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	6959      	ldr	r1, [r3, #20]
 8006d46:	693a      	ldr	r2, [r7, #16]
 8006d48:	4613      	mov	r3, r2
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	4413      	add	r3, r2
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	4a19      	ldr	r2, [pc, #100]	; (8006db8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006d52:	4413      	add	r3, r2
 8006d54:	4299      	cmp	r1, r3
 8006d56:	d129      	bne.n	8006dac <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	3304      	adds	r3, #4
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f7fe f880 	bl	8004e62 <uxListRemove>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d10a      	bne.n	8006d7e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d72:	43da      	mvns	r2, r3
 8006d74:	4b11      	ldr	r3, [pc, #68]	; (8006dbc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4013      	ands	r3, r2
 8006d7a:	4a10      	ldr	r2, [pc, #64]	; (8006dbc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006d7c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d82:	2201      	movs	r2, #1
 8006d84:	409a      	lsls	r2, r3
 8006d86:	4b0d      	ldr	r3, [pc, #52]	; (8006dbc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	4a0b      	ldr	r2, [pc, #44]	; (8006dbc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006d8e:	6013      	str	r3, [r2, #0]
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d94:	4613      	mov	r3, r2
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	4413      	add	r3, r2
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	4a06      	ldr	r2, [pc, #24]	; (8006db8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006d9e:	441a      	add	r2, r3
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	3304      	adds	r3, #4
 8006da4:	4619      	mov	r1, r3
 8006da6:	4610      	mov	r0, r2
 8006da8:	f7fd fffe 	bl	8004da8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006dac:	bf00      	nop
 8006dae:	3720      	adds	r7, #32
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	200003a4 	.word	0x200003a4
 8006db8:	200003a8 	.word	0x200003a8
 8006dbc:	200004ac 	.word	0x200004ac

08006dc0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006dc0:	b480      	push	{r7}
 8006dc2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006dc4:	4b07      	ldr	r3, [pc, #28]	; (8006de4 <pvTaskIncrementMutexHeldCount+0x24>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d004      	beq.n	8006dd6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006dcc:	4b05      	ldr	r3, [pc, #20]	; (8006de4 <pvTaskIncrementMutexHeldCount+0x24>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006dd2:	3201      	adds	r2, #1
 8006dd4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006dd6:	4b03      	ldr	r3, [pc, #12]	; (8006de4 <pvTaskIncrementMutexHeldCount+0x24>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
	}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr
 8006de4:	200003a4 	.word	0x200003a4

08006de8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006df2:	4b29      	ldr	r3, [pc, #164]	; (8006e98 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006df8:	4b28      	ldr	r3, [pc, #160]	; (8006e9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	3304      	adds	r3, #4
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f7fe f82f 	bl	8004e62 <uxListRemove>
 8006e04:	4603      	mov	r3, r0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d10b      	bne.n	8006e22 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006e0a:	4b24      	ldr	r3, [pc, #144]	; (8006e9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e10:	2201      	movs	r2, #1
 8006e12:	fa02 f303 	lsl.w	r3, r2, r3
 8006e16:	43da      	mvns	r2, r3
 8006e18:	4b21      	ldr	r3, [pc, #132]	; (8006ea0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	4a20      	ldr	r2, [pc, #128]	; (8006ea0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006e20:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e28:	d10a      	bne.n	8006e40 <prvAddCurrentTaskToDelayedList+0x58>
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d007      	beq.n	8006e40 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e30:	4b1a      	ldr	r3, [pc, #104]	; (8006e9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	3304      	adds	r3, #4
 8006e36:	4619      	mov	r1, r3
 8006e38:	481a      	ldr	r0, [pc, #104]	; (8006ea4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006e3a:	f7fd ffb5 	bl	8004da8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006e3e:	e026      	b.n	8006e8e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4413      	add	r3, r2
 8006e46:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006e48:	4b14      	ldr	r3, [pc, #80]	; (8006e9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68ba      	ldr	r2, [r7, #8]
 8006e4e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006e50:	68ba      	ldr	r2, [r7, #8]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d209      	bcs.n	8006e6c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e58:	4b13      	ldr	r3, [pc, #76]	; (8006ea8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	4b0f      	ldr	r3, [pc, #60]	; (8006e9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	3304      	adds	r3, #4
 8006e62:	4619      	mov	r1, r3
 8006e64:	4610      	mov	r0, r2
 8006e66:	f7fd ffc3 	bl	8004df0 <vListInsert>
}
 8006e6a:	e010      	b.n	8006e8e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e6c:	4b0f      	ldr	r3, [pc, #60]	; (8006eac <prvAddCurrentTaskToDelayedList+0xc4>)
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	4b0a      	ldr	r3, [pc, #40]	; (8006e9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	3304      	adds	r3, #4
 8006e76:	4619      	mov	r1, r3
 8006e78:	4610      	mov	r0, r2
 8006e7a:	f7fd ffb9 	bl	8004df0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006e7e:	4b0c      	ldr	r3, [pc, #48]	; (8006eb0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	68ba      	ldr	r2, [r7, #8]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d202      	bcs.n	8006e8e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006e88:	4a09      	ldr	r2, [pc, #36]	; (8006eb0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	6013      	str	r3, [r2, #0]
}
 8006e8e:	bf00      	nop
 8006e90:	3710      	adds	r7, #16
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	200004a8 	.word	0x200004a8
 8006e9c:	200003a4 	.word	0x200003a4
 8006ea0:	200004ac 	.word	0x200004ac
 8006ea4:	20000490 	.word	0x20000490
 8006ea8:	20000460 	.word	0x20000460
 8006eac:	2000045c 	.word	0x2000045c
 8006eb0:	200004c4 	.word	0x200004c4

08006eb4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b085      	sub	sp, #20
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	3b04      	subs	r3, #4
 8006ec4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006ecc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	3b04      	subs	r3, #4
 8006ed2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	f023 0201 	bic.w	r2, r3, #1
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	3b04      	subs	r3, #4
 8006ee2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006ee4:	4a0c      	ldr	r2, [pc, #48]	; (8006f18 <pxPortInitialiseStack+0x64>)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	3b14      	subs	r3, #20
 8006eee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	3b04      	subs	r3, #4
 8006efa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f06f 0202 	mvn.w	r2, #2
 8006f02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	3b20      	subs	r3, #32
 8006f08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3714      	adds	r7, #20
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr
 8006f18:	08006f1d 	.word	0x08006f1d

08006f1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b085      	sub	sp, #20
 8006f20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006f22:	2300      	movs	r3, #0
 8006f24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f26:	4b12      	ldr	r3, [pc, #72]	; (8006f70 <prvTaskExitError+0x54>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f2e:	d00a      	beq.n	8006f46 <prvTaskExitError+0x2a>
	__asm volatile
 8006f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f34:	f383 8811 	msr	BASEPRI, r3
 8006f38:	f3bf 8f6f 	isb	sy
 8006f3c:	f3bf 8f4f 	dsb	sy
 8006f40:	60fb      	str	r3, [r7, #12]
}
 8006f42:	bf00      	nop
 8006f44:	e7fe      	b.n	8006f44 <prvTaskExitError+0x28>
	__asm volatile
 8006f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4a:	f383 8811 	msr	BASEPRI, r3
 8006f4e:	f3bf 8f6f 	isb	sy
 8006f52:	f3bf 8f4f 	dsb	sy
 8006f56:	60bb      	str	r3, [r7, #8]
}
 8006f58:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f5a:	bf00      	nop
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d0fc      	beq.n	8006f5c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f62:	bf00      	nop
 8006f64:	bf00      	nop
 8006f66:	3714      	adds	r7, #20
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr
 8006f70:	2000000c 	.word	0x2000000c
	...

08006f80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006f80:	4b07      	ldr	r3, [pc, #28]	; (8006fa0 <pxCurrentTCBConst2>)
 8006f82:	6819      	ldr	r1, [r3, #0]
 8006f84:	6808      	ldr	r0, [r1, #0]
 8006f86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f8a:	f380 8809 	msr	PSP, r0
 8006f8e:	f3bf 8f6f 	isb	sy
 8006f92:	f04f 0000 	mov.w	r0, #0
 8006f96:	f380 8811 	msr	BASEPRI, r0
 8006f9a:	4770      	bx	lr
 8006f9c:	f3af 8000 	nop.w

08006fa0 <pxCurrentTCBConst2>:
 8006fa0:	200003a4 	.word	0x200003a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006fa4:	bf00      	nop
 8006fa6:	bf00      	nop

08006fa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006fa8:	4808      	ldr	r0, [pc, #32]	; (8006fcc <prvPortStartFirstTask+0x24>)
 8006faa:	6800      	ldr	r0, [r0, #0]
 8006fac:	6800      	ldr	r0, [r0, #0]
 8006fae:	f380 8808 	msr	MSP, r0
 8006fb2:	f04f 0000 	mov.w	r0, #0
 8006fb6:	f380 8814 	msr	CONTROL, r0
 8006fba:	b662      	cpsie	i
 8006fbc:	b661      	cpsie	f
 8006fbe:	f3bf 8f4f 	dsb	sy
 8006fc2:	f3bf 8f6f 	isb	sy
 8006fc6:	df00      	svc	0
 8006fc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006fca:	bf00      	nop
 8006fcc:	e000ed08 	.word	0xe000ed08

08006fd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006fd6:	4b46      	ldr	r3, [pc, #280]	; (80070f0 <xPortStartScheduler+0x120>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a46      	ldr	r2, [pc, #280]	; (80070f4 <xPortStartScheduler+0x124>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d10a      	bne.n	8006ff6 <xPortStartScheduler+0x26>
	__asm volatile
 8006fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe4:	f383 8811 	msr	BASEPRI, r3
 8006fe8:	f3bf 8f6f 	isb	sy
 8006fec:	f3bf 8f4f 	dsb	sy
 8006ff0:	613b      	str	r3, [r7, #16]
}
 8006ff2:	bf00      	nop
 8006ff4:	e7fe      	b.n	8006ff4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006ff6:	4b3e      	ldr	r3, [pc, #248]	; (80070f0 <xPortStartScheduler+0x120>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a3f      	ldr	r2, [pc, #252]	; (80070f8 <xPortStartScheduler+0x128>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d10a      	bne.n	8007016 <xPortStartScheduler+0x46>
	__asm volatile
 8007000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007004:	f383 8811 	msr	BASEPRI, r3
 8007008:	f3bf 8f6f 	isb	sy
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	60fb      	str	r3, [r7, #12]
}
 8007012:	bf00      	nop
 8007014:	e7fe      	b.n	8007014 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007016:	4b39      	ldr	r3, [pc, #228]	; (80070fc <xPortStartScheduler+0x12c>)
 8007018:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	b2db      	uxtb	r3, r3
 8007020:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	22ff      	movs	r2, #255	; 0xff
 8007026:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	b2db      	uxtb	r3, r3
 800702e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007030:	78fb      	ldrb	r3, [r7, #3]
 8007032:	b2db      	uxtb	r3, r3
 8007034:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007038:	b2da      	uxtb	r2, r3
 800703a:	4b31      	ldr	r3, [pc, #196]	; (8007100 <xPortStartScheduler+0x130>)
 800703c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800703e:	4b31      	ldr	r3, [pc, #196]	; (8007104 <xPortStartScheduler+0x134>)
 8007040:	2207      	movs	r2, #7
 8007042:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007044:	e009      	b.n	800705a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007046:	4b2f      	ldr	r3, [pc, #188]	; (8007104 <xPortStartScheduler+0x134>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	3b01      	subs	r3, #1
 800704c:	4a2d      	ldr	r2, [pc, #180]	; (8007104 <xPortStartScheduler+0x134>)
 800704e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007050:	78fb      	ldrb	r3, [r7, #3]
 8007052:	b2db      	uxtb	r3, r3
 8007054:	005b      	lsls	r3, r3, #1
 8007056:	b2db      	uxtb	r3, r3
 8007058:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800705a:	78fb      	ldrb	r3, [r7, #3]
 800705c:	b2db      	uxtb	r3, r3
 800705e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007062:	2b80      	cmp	r3, #128	; 0x80
 8007064:	d0ef      	beq.n	8007046 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007066:	4b27      	ldr	r3, [pc, #156]	; (8007104 <xPortStartScheduler+0x134>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f1c3 0307 	rsb	r3, r3, #7
 800706e:	2b04      	cmp	r3, #4
 8007070:	d00a      	beq.n	8007088 <xPortStartScheduler+0xb8>
	__asm volatile
 8007072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007076:	f383 8811 	msr	BASEPRI, r3
 800707a:	f3bf 8f6f 	isb	sy
 800707e:	f3bf 8f4f 	dsb	sy
 8007082:	60bb      	str	r3, [r7, #8]
}
 8007084:	bf00      	nop
 8007086:	e7fe      	b.n	8007086 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007088:	4b1e      	ldr	r3, [pc, #120]	; (8007104 <xPortStartScheduler+0x134>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	021b      	lsls	r3, r3, #8
 800708e:	4a1d      	ldr	r2, [pc, #116]	; (8007104 <xPortStartScheduler+0x134>)
 8007090:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007092:	4b1c      	ldr	r3, [pc, #112]	; (8007104 <xPortStartScheduler+0x134>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800709a:	4a1a      	ldr	r2, [pc, #104]	; (8007104 <xPortStartScheduler+0x134>)
 800709c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	b2da      	uxtb	r2, r3
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80070a6:	4b18      	ldr	r3, [pc, #96]	; (8007108 <xPortStartScheduler+0x138>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a17      	ldr	r2, [pc, #92]	; (8007108 <xPortStartScheduler+0x138>)
 80070ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80070b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80070b2:	4b15      	ldr	r3, [pc, #84]	; (8007108 <xPortStartScheduler+0x138>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a14      	ldr	r2, [pc, #80]	; (8007108 <xPortStartScheduler+0x138>)
 80070b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80070bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80070be:	f000 f8dd 	bl	800727c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80070c2:	4b12      	ldr	r3, [pc, #72]	; (800710c <xPortStartScheduler+0x13c>)
 80070c4:	2200      	movs	r2, #0
 80070c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80070c8:	f000 f8fc 	bl	80072c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80070cc:	4b10      	ldr	r3, [pc, #64]	; (8007110 <xPortStartScheduler+0x140>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a0f      	ldr	r2, [pc, #60]	; (8007110 <xPortStartScheduler+0x140>)
 80070d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80070d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80070d8:	f7ff ff66 	bl	8006fa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80070dc:	f7ff fa82 	bl	80065e4 <vTaskSwitchContext>
	prvTaskExitError();
 80070e0:	f7ff ff1c 	bl	8006f1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3718      	adds	r7, #24
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	e000ed00 	.word	0xe000ed00
 80070f4:	410fc271 	.word	0x410fc271
 80070f8:	410fc270 	.word	0x410fc270
 80070fc:	e000e400 	.word	0xe000e400
 8007100:	200004d0 	.word	0x200004d0
 8007104:	200004d4 	.word	0x200004d4
 8007108:	e000ed20 	.word	0xe000ed20
 800710c:	2000000c 	.word	0x2000000c
 8007110:	e000ef34 	.word	0xe000ef34

08007114 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
	__asm volatile
 800711a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711e:	f383 8811 	msr	BASEPRI, r3
 8007122:	f3bf 8f6f 	isb	sy
 8007126:	f3bf 8f4f 	dsb	sy
 800712a:	607b      	str	r3, [r7, #4]
}
 800712c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800712e:	4b0f      	ldr	r3, [pc, #60]	; (800716c <vPortEnterCritical+0x58>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	3301      	adds	r3, #1
 8007134:	4a0d      	ldr	r2, [pc, #52]	; (800716c <vPortEnterCritical+0x58>)
 8007136:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007138:	4b0c      	ldr	r3, [pc, #48]	; (800716c <vPortEnterCritical+0x58>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d10f      	bne.n	8007160 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007140:	4b0b      	ldr	r3, [pc, #44]	; (8007170 <vPortEnterCritical+0x5c>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	b2db      	uxtb	r3, r3
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00a      	beq.n	8007160 <vPortEnterCritical+0x4c>
	__asm volatile
 800714a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714e:	f383 8811 	msr	BASEPRI, r3
 8007152:	f3bf 8f6f 	isb	sy
 8007156:	f3bf 8f4f 	dsb	sy
 800715a:	603b      	str	r3, [r7, #0]
}
 800715c:	bf00      	nop
 800715e:	e7fe      	b.n	800715e <vPortEnterCritical+0x4a>
	}
}
 8007160:	bf00      	nop
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr
 800716c:	2000000c 	.word	0x2000000c
 8007170:	e000ed04 	.word	0xe000ed04

08007174 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800717a:	4b12      	ldr	r3, [pc, #72]	; (80071c4 <vPortExitCritical+0x50>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d10a      	bne.n	8007198 <vPortExitCritical+0x24>
	__asm volatile
 8007182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007186:	f383 8811 	msr	BASEPRI, r3
 800718a:	f3bf 8f6f 	isb	sy
 800718e:	f3bf 8f4f 	dsb	sy
 8007192:	607b      	str	r3, [r7, #4]
}
 8007194:	bf00      	nop
 8007196:	e7fe      	b.n	8007196 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007198:	4b0a      	ldr	r3, [pc, #40]	; (80071c4 <vPortExitCritical+0x50>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	3b01      	subs	r3, #1
 800719e:	4a09      	ldr	r2, [pc, #36]	; (80071c4 <vPortExitCritical+0x50>)
 80071a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80071a2:	4b08      	ldr	r3, [pc, #32]	; (80071c4 <vPortExitCritical+0x50>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d105      	bne.n	80071b6 <vPortExitCritical+0x42>
 80071aa:	2300      	movs	r3, #0
 80071ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	f383 8811 	msr	BASEPRI, r3
}
 80071b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80071b6:	bf00      	nop
 80071b8:	370c      	adds	r7, #12
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr
 80071c2:	bf00      	nop
 80071c4:	2000000c 	.word	0x2000000c
	...

080071d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80071d0:	f3ef 8009 	mrs	r0, PSP
 80071d4:	f3bf 8f6f 	isb	sy
 80071d8:	4b15      	ldr	r3, [pc, #84]	; (8007230 <pxCurrentTCBConst>)
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	f01e 0f10 	tst.w	lr, #16
 80071e0:	bf08      	it	eq
 80071e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80071e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ea:	6010      	str	r0, [r2, #0]
 80071ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80071f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80071f4:	f380 8811 	msr	BASEPRI, r0
 80071f8:	f3bf 8f4f 	dsb	sy
 80071fc:	f3bf 8f6f 	isb	sy
 8007200:	f7ff f9f0 	bl	80065e4 <vTaskSwitchContext>
 8007204:	f04f 0000 	mov.w	r0, #0
 8007208:	f380 8811 	msr	BASEPRI, r0
 800720c:	bc09      	pop	{r0, r3}
 800720e:	6819      	ldr	r1, [r3, #0]
 8007210:	6808      	ldr	r0, [r1, #0]
 8007212:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007216:	f01e 0f10 	tst.w	lr, #16
 800721a:	bf08      	it	eq
 800721c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007220:	f380 8809 	msr	PSP, r0
 8007224:	f3bf 8f6f 	isb	sy
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop
 800722c:	f3af 8000 	nop.w

08007230 <pxCurrentTCBConst>:
 8007230:	200003a4 	.word	0x200003a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007234:	bf00      	nop
 8007236:	bf00      	nop

08007238 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
	__asm volatile
 800723e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007242:	f383 8811 	msr	BASEPRI, r3
 8007246:	f3bf 8f6f 	isb	sy
 800724a:	f3bf 8f4f 	dsb	sy
 800724e:	607b      	str	r3, [r7, #4]
}
 8007250:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007252:	f7ff f90f 	bl	8006474 <xTaskIncrementTick>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d003      	beq.n	8007264 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800725c:	4b06      	ldr	r3, [pc, #24]	; (8007278 <SysTick_Handler+0x40>)
 800725e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007262:	601a      	str	r2, [r3, #0]
 8007264:	2300      	movs	r3, #0
 8007266:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	f383 8811 	msr	BASEPRI, r3
}
 800726e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007270:	bf00      	nop
 8007272:	3708      	adds	r7, #8
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	e000ed04 	.word	0xe000ed04

0800727c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800727c:	b480      	push	{r7}
 800727e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007280:	4b0b      	ldr	r3, [pc, #44]	; (80072b0 <vPortSetupTimerInterrupt+0x34>)
 8007282:	2200      	movs	r2, #0
 8007284:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007286:	4b0b      	ldr	r3, [pc, #44]	; (80072b4 <vPortSetupTimerInterrupt+0x38>)
 8007288:	2200      	movs	r2, #0
 800728a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800728c:	4b0a      	ldr	r3, [pc, #40]	; (80072b8 <vPortSetupTimerInterrupt+0x3c>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a0a      	ldr	r2, [pc, #40]	; (80072bc <vPortSetupTimerInterrupt+0x40>)
 8007292:	fba2 2303 	umull	r2, r3, r2, r3
 8007296:	099b      	lsrs	r3, r3, #6
 8007298:	4a09      	ldr	r2, [pc, #36]	; (80072c0 <vPortSetupTimerInterrupt+0x44>)
 800729a:	3b01      	subs	r3, #1
 800729c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800729e:	4b04      	ldr	r3, [pc, #16]	; (80072b0 <vPortSetupTimerInterrupt+0x34>)
 80072a0:	2207      	movs	r2, #7
 80072a2:	601a      	str	r2, [r3, #0]
}
 80072a4:	bf00      	nop
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop
 80072b0:	e000e010 	.word	0xe000e010
 80072b4:	e000e018 	.word	0xe000e018
 80072b8:	20000000 	.word	0x20000000
 80072bc:	10624dd3 	.word	0x10624dd3
 80072c0:	e000e014 	.word	0xe000e014

080072c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80072c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80072d4 <vPortEnableVFP+0x10>
 80072c8:	6801      	ldr	r1, [r0, #0]
 80072ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80072ce:	6001      	str	r1, [r0, #0]
 80072d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80072d2:	bf00      	nop
 80072d4:	e000ed88 	.word	0xe000ed88

080072d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80072d8:	b480      	push	{r7}
 80072da:	b085      	sub	sp, #20
 80072dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80072de:	f3ef 8305 	mrs	r3, IPSR
 80072e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2b0f      	cmp	r3, #15
 80072e8:	d914      	bls.n	8007314 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80072ea:	4a17      	ldr	r2, [pc, #92]	; (8007348 <vPortValidateInterruptPriority+0x70>)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	4413      	add	r3, r2
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80072f4:	4b15      	ldr	r3, [pc, #84]	; (800734c <vPortValidateInterruptPriority+0x74>)
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	7afa      	ldrb	r2, [r7, #11]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d20a      	bcs.n	8007314 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80072fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007302:	f383 8811 	msr	BASEPRI, r3
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	607b      	str	r3, [r7, #4]
}
 8007310:	bf00      	nop
 8007312:	e7fe      	b.n	8007312 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007314:	4b0e      	ldr	r3, [pc, #56]	; (8007350 <vPortValidateInterruptPriority+0x78>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800731c:	4b0d      	ldr	r3, [pc, #52]	; (8007354 <vPortValidateInterruptPriority+0x7c>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	429a      	cmp	r2, r3
 8007322:	d90a      	bls.n	800733a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007328:	f383 8811 	msr	BASEPRI, r3
 800732c:	f3bf 8f6f 	isb	sy
 8007330:	f3bf 8f4f 	dsb	sy
 8007334:	603b      	str	r3, [r7, #0]
}
 8007336:	bf00      	nop
 8007338:	e7fe      	b.n	8007338 <vPortValidateInterruptPriority+0x60>
	}
 800733a:	bf00      	nop
 800733c:	3714      	adds	r7, #20
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	e000e3f0 	.word	0xe000e3f0
 800734c:	200004d0 	.word	0x200004d0
 8007350:	e000ed0c 	.word	0xe000ed0c
 8007354:	200004d4 	.word	0x200004d4

08007358 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b08a      	sub	sp, #40	; 0x28
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007360:	2300      	movs	r3, #0
 8007362:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007364:	f7fe ffba 	bl	80062dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007368:	4b5b      	ldr	r3, [pc, #364]	; (80074d8 <pvPortMalloc+0x180>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d101      	bne.n	8007374 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007370:	f000 f920 	bl	80075b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007374:	4b59      	ldr	r3, [pc, #356]	; (80074dc <pvPortMalloc+0x184>)
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4013      	ands	r3, r2
 800737c:	2b00      	cmp	r3, #0
 800737e:	f040 8093 	bne.w	80074a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d01d      	beq.n	80073c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007388:	2208      	movs	r2, #8
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4413      	add	r3, r2
 800738e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f003 0307 	and.w	r3, r3, #7
 8007396:	2b00      	cmp	r3, #0
 8007398:	d014      	beq.n	80073c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f023 0307 	bic.w	r3, r3, #7
 80073a0:	3308      	adds	r3, #8
 80073a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f003 0307 	and.w	r3, r3, #7
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00a      	beq.n	80073c4 <pvPortMalloc+0x6c>
	__asm volatile
 80073ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b2:	f383 8811 	msr	BASEPRI, r3
 80073b6:	f3bf 8f6f 	isb	sy
 80073ba:	f3bf 8f4f 	dsb	sy
 80073be:	617b      	str	r3, [r7, #20]
}
 80073c0:	bf00      	nop
 80073c2:	e7fe      	b.n	80073c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d06e      	beq.n	80074a8 <pvPortMalloc+0x150>
 80073ca:	4b45      	ldr	r3, [pc, #276]	; (80074e0 <pvPortMalloc+0x188>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d869      	bhi.n	80074a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80073d4:	4b43      	ldr	r3, [pc, #268]	; (80074e4 <pvPortMalloc+0x18c>)
 80073d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80073d8:	4b42      	ldr	r3, [pc, #264]	; (80074e4 <pvPortMalloc+0x18c>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073de:	e004      	b.n	80073ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80073e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80073e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d903      	bls.n	80073fc <pvPortMalloc+0xa4>
 80073f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d1f1      	bne.n	80073e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80073fc:	4b36      	ldr	r3, [pc, #216]	; (80074d8 <pvPortMalloc+0x180>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007402:	429a      	cmp	r2, r3
 8007404:	d050      	beq.n	80074a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007406:	6a3b      	ldr	r3, [r7, #32]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2208      	movs	r2, #8
 800740c:	4413      	add	r3, r2
 800740e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	6a3b      	ldr	r3, [r7, #32]
 8007416:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741a:	685a      	ldr	r2, [r3, #4]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	1ad2      	subs	r2, r2, r3
 8007420:	2308      	movs	r3, #8
 8007422:	005b      	lsls	r3, r3, #1
 8007424:	429a      	cmp	r2, r3
 8007426:	d91f      	bls.n	8007468 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4413      	add	r3, r2
 800742e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007430:	69bb      	ldr	r3, [r7, #24]
 8007432:	f003 0307 	and.w	r3, r3, #7
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00a      	beq.n	8007450 <pvPortMalloc+0xf8>
	__asm volatile
 800743a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743e:	f383 8811 	msr	BASEPRI, r3
 8007442:	f3bf 8f6f 	isb	sy
 8007446:	f3bf 8f4f 	dsb	sy
 800744a:	613b      	str	r3, [r7, #16]
}
 800744c:	bf00      	nop
 800744e:	e7fe      	b.n	800744e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007452:	685a      	ldr	r2, [r3, #4]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	1ad2      	subs	r2, r2, r3
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800745c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007462:	69b8      	ldr	r0, [r7, #24]
 8007464:	f000 f908 	bl	8007678 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007468:	4b1d      	ldr	r3, [pc, #116]	; (80074e0 <pvPortMalloc+0x188>)
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	4a1b      	ldr	r2, [pc, #108]	; (80074e0 <pvPortMalloc+0x188>)
 8007474:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007476:	4b1a      	ldr	r3, [pc, #104]	; (80074e0 <pvPortMalloc+0x188>)
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	4b1b      	ldr	r3, [pc, #108]	; (80074e8 <pvPortMalloc+0x190>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	429a      	cmp	r2, r3
 8007480:	d203      	bcs.n	800748a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007482:	4b17      	ldr	r3, [pc, #92]	; (80074e0 <pvPortMalloc+0x188>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a18      	ldr	r2, [pc, #96]	; (80074e8 <pvPortMalloc+0x190>)
 8007488:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800748a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748c:	685a      	ldr	r2, [r3, #4]
 800748e:	4b13      	ldr	r3, [pc, #76]	; (80074dc <pvPortMalloc+0x184>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	431a      	orrs	r2, r3
 8007494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007496:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749a:	2200      	movs	r2, #0
 800749c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800749e:	4b13      	ldr	r3, [pc, #76]	; (80074ec <pvPortMalloc+0x194>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	3301      	adds	r3, #1
 80074a4:	4a11      	ldr	r2, [pc, #68]	; (80074ec <pvPortMalloc+0x194>)
 80074a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80074a8:	f7fe ff26 	bl	80062f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	f003 0307 	and.w	r3, r3, #7
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d00a      	beq.n	80074cc <pvPortMalloc+0x174>
	__asm volatile
 80074b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ba:	f383 8811 	msr	BASEPRI, r3
 80074be:	f3bf 8f6f 	isb	sy
 80074c2:	f3bf 8f4f 	dsb	sy
 80074c6:	60fb      	str	r3, [r7, #12]
}
 80074c8:	bf00      	nop
 80074ca:	e7fe      	b.n	80074ca <pvPortMalloc+0x172>
	return pvReturn;
 80074cc:	69fb      	ldr	r3, [r7, #28]
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3728      	adds	r7, #40	; 0x28
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	200084e0 	.word	0x200084e0
 80074dc:	200084f4 	.word	0x200084f4
 80074e0:	200084e4 	.word	0x200084e4
 80074e4:	200084d8 	.word	0x200084d8
 80074e8:	200084e8 	.word	0x200084e8
 80074ec:	200084ec 	.word	0x200084ec

080074f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b086      	sub	sp, #24
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d04d      	beq.n	800759e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007502:	2308      	movs	r3, #8
 8007504:	425b      	negs	r3, r3
 8007506:	697a      	ldr	r2, [r7, #20]
 8007508:	4413      	add	r3, r2
 800750a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	685a      	ldr	r2, [r3, #4]
 8007514:	4b24      	ldr	r3, [pc, #144]	; (80075a8 <vPortFree+0xb8>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4013      	ands	r3, r2
 800751a:	2b00      	cmp	r3, #0
 800751c:	d10a      	bne.n	8007534 <vPortFree+0x44>
	__asm volatile
 800751e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007522:	f383 8811 	msr	BASEPRI, r3
 8007526:	f3bf 8f6f 	isb	sy
 800752a:	f3bf 8f4f 	dsb	sy
 800752e:	60fb      	str	r3, [r7, #12]
}
 8007530:	bf00      	nop
 8007532:	e7fe      	b.n	8007532 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00a      	beq.n	8007552 <vPortFree+0x62>
	__asm volatile
 800753c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007540:	f383 8811 	msr	BASEPRI, r3
 8007544:	f3bf 8f6f 	isb	sy
 8007548:	f3bf 8f4f 	dsb	sy
 800754c:	60bb      	str	r3, [r7, #8]
}
 800754e:	bf00      	nop
 8007550:	e7fe      	b.n	8007550 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	685a      	ldr	r2, [r3, #4]
 8007556:	4b14      	ldr	r3, [pc, #80]	; (80075a8 <vPortFree+0xb8>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4013      	ands	r3, r2
 800755c:	2b00      	cmp	r3, #0
 800755e:	d01e      	beq.n	800759e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d11a      	bne.n	800759e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	685a      	ldr	r2, [r3, #4]
 800756c:	4b0e      	ldr	r3, [pc, #56]	; (80075a8 <vPortFree+0xb8>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	43db      	mvns	r3, r3
 8007572:	401a      	ands	r2, r3
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007578:	f7fe feb0 	bl	80062dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	685a      	ldr	r2, [r3, #4]
 8007580:	4b0a      	ldr	r3, [pc, #40]	; (80075ac <vPortFree+0xbc>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4413      	add	r3, r2
 8007586:	4a09      	ldr	r2, [pc, #36]	; (80075ac <vPortFree+0xbc>)
 8007588:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800758a:	6938      	ldr	r0, [r7, #16]
 800758c:	f000 f874 	bl	8007678 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007590:	4b07      	ldr	r3, [pc, #28]	; (80075b0 <vPortFree+0xc0>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	3301      	adds	r3, #1
 8007596:	4a06      	ldr	r2, [pc, #24]	; (80075b0 <vPortFree+0xc0>)
 8007598:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800759a:	f7fe fead 	bl	80062f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800759e:	bf00      	nop
 80075a0:	3718      	adds	r7, #24
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	200084f4 	.word	0x200084f4
 80075ac:	200084e4 	.word	0x200084e4
 80075b0:	200084f0 	.word	0x200084f0

080075b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80075b4:	b480      	push	{r7}
 80075b6:	b085      	sub	sp, #20
 80075b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80075ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80075c0:	4b27      	ldr	r3, [pc, #156]	; (8007660 <prvHeapInit+0xac>)
 80075c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f003 0307 	and.w	r3, r3, #7
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00c      	beq.n	80075e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	3307      	adds	r3, #7
 80075d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f023 0307 	bic.w	r3, r3, #7
 80075da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	4a1f      	ldr	r2, [pc, #124]	; (8007660 <prvHeapInit+0xac>)
 80075e4:	4413      	add	r3, r2
 80075e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80075ec:	4a1d      	ldr	r2, [pc, #116]	; (8007664 <prvHeapInit+0xb0>)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80075f2:	4b1c      	ldr	r3, [pc, #112]	; (8007664 <prvHeapInit+0xb0>)
 80075f4:	2200      	movs	r2, #0
 80075f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	68ba      	ldr	r2, [r7, #8]
 80075fc:	4413      	add	r3, r2
 80075fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007600:	2208      	movs	r2, #8
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	1a9b      	subs	r3, r3, r2
 8007606:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f023 0307 	bic.w	r3, r3, #7
 800760e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	4a15      	ldr	r2, [pc, #84]	; (8007668 <prvHeapInit+0xb4>)
 8007614:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007616:	4b14      	ldr	r3, [pc, #80]	; (8007668 <prvHeapInit+0xb4>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2200      	movs	r2, #0
 800761c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800761e:	4b12      	ldr	r3, [pc, #72]	; (8007668 <prvHeapInit+0xb4>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2200      	movs	r2, #0
 8007624:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	68fa      	ldr	r2, [r7, #12]
 800762e:	1ad2      	subs	r2, r2, r3
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007634:	4b0c      	ldr	r3, [pc, #48]	; (8007668 <prvHeapInit+0xb4>)
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	4a0a      	ldr	r2, [pc, #40]	; (800766c <prvHeapInit+0xb8>)
 8007642:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	4a09      	ldr	r2, [pc, #36]	; (8007670 <prvHeapInit+0xbc>)
 800764a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800764c:	4b09      	ldr	r3, [pc, #36]	; (8007674 <prvHeapInit+0xc0>)
 800764e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007652:	601a      	str	r2, [r3, #0]
}
 8007654:	bf00      	nop
 8007656:	3714      	adds	r7, #20
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr
 8007660:	200004d8 	.word	0x200004d8
 8007664:	200084d8 	.word	0x200084d8
 8007668:	200084e0 	.word	0x200084e0
 800766c:	200084e8 	.word	0x200084e8
 8007670:	200084e4 	.word	0x200084e4
 8007674:	200084f4 	.word	0x200084f4

08007678 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007678:	b480      	push	{r7}
 800767a:	b085      	sub	sp, #20
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007680:	4b28      	ldr	r3, [pc, #160]	; (8007724 <prvInsertBlockIntoFreeList+0xac>)
 8007682:	60fb      	str	r3, [r7, #12]
 8007684:	e002      	b.n	800768c <prvInsertBlockIntoFreeList+0x14>
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	60fb      	str	r3, [r7, #12]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	429a      	cmp	r2, r3
 8007694:	d8f7      	bhi.n	8007686 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	68ba      	ldr	r2, [r7, #8]
 80076a0:	4413      	add	r3, r2
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d108      	bne.n	80076ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	685a      	ldr	r2, [r3, #4]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	441a      	add	r2, r3
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	68ba      	ldr	r2, [r7, #8]
 80076c4:	441a      	add	r2, r3
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d118      	bne.n	8007700 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	4b15      	ldr	r3, [pc, #84]	; (8007728 <prvInsertBlockIntoFreeList+0xb0>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d00d      	beq.n	80076f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	685a      	ldr	r2, [r3, #4]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	441a      	add	r2, r3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	601a      	str	r2, [r3, #0]
 80076f4:	e008      	b.n	8007708 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80076f6:	4b0c      	ldr	r3, [pc, #48]	; (8007728 <prvInsertBlockIntoFreeList+0xb0>)
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	601a      	str	r2, [r3, #0]
 80076fe:	e003      	b.n	8007708 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	429a      	cmp	r2, r3
 800770e:	d002      	beq.n	8007716 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007716:	bf00      	nop
 8007718:	3714      	adds	r7, #20
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr
 8007722:	bf00      	nop
 8007724:	200084d8 	.word	0x200084d8
 8007728:	200084e0 	.word	0x200084e0

0800772c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	330c      	adds	r3, #12
 800773c:	461a      	mov	r2, r3
 800773e:	6839      	ldr	r1, [r7, #0]
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f002 fa9f 	bl	8009c84 <tcpip_send_msg_wait_sem>
 8007746:	4603      	mov	r3, r0
 8007748:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800774a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d103      	bne.n	800775a <netconn_apimsg+0x2e>
    return apimsg->err;
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8007758:	e001      	b.n	800775e <netconn_apimsg+0x32>
  }
  return err;
 800775a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800775e:	4618      	mov	r0, r3
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
	...

08007768 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b08c      	sub	sp, #48	; 0x30
 800776c:	af00      	add	r7, sp, #0
 800776e:	4603      	mov	r3, r0
 8007770:	603a      	str	r2, [r7, #0]
 8007772:	71fb      	strb	r3, [r7, #7]
 8007774:	460b      	mov	r3, r1
 8007776:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8007778:	79fb      	ldrb	r3, [r7, #7]
 800777a:	6839      	ldr	r1, [r7, #0]
 800777c:	4618      	mov	r0, r3
 800777e:	f001 f923 	bl	80089c8 <netconn_alloc>
 8007782:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8007784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007786:	2b00      	cmp	r3, #0
 8007788:	d054      	beq.n	8007834 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800778a:	79bb      	ldrb	r3, [r7, #6]
 800778c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800778e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007790:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8007792:	f107 0308 	add.w	r3, r7, #8
 8007796:	4619      	mov	r1, r3
 8007798:	4829      	ldr	r0, [pc, #164]	; (8007840 <netconn_new_with_proto_and_callback+0xd8>)
 800779a:	f7ff ffc7 	bl	800772c <netconn_apimsg>
 800779e:	4603      	mov	r3, r0
 80077a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 80077a4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d043      	beq.n	8007834 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 80077ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d005      	beq.n	80077c0 <netconn_new_with_proto_and_callback+0x58>
 80077b4:	4b23      	ldr	r3, [pc, #140]	; (8007844 <netconn_new_with_proto_and_callback+0xdc>)
 80077b6:	22a3      	movs	r2, #163	; 0xa3
 80077b8:	4923      	ldr	r1, [pc, #140]	; (8007848 <netconn_new_with_proto_and_callback+0xe0>)
 80077ba:	4824      	ldr	r0, [pc, #144]	; (800784c <netconn_new_with_proto_and_callback+0xe4>)
 80077bc:	f00f fcf4 	bl	80171a8 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80077c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c2:	3310      	adds	r3, #16
 80077c4:	4618      	mov	r0, r3
 80077c6:	f00f fa00 	bl	8016bca <sys_mbox_valid>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d105      	bne.n	80077dc <netconn_new_with_proto_and_callback+0x74>
 80077d0:	4b1c      	ldr	r3, [pc, #112]	; (8007844 <netconn_new_with_proto_and_callback+0xdc>)
 80077d2:	22a4      	movs	r2, #164	; 0xa4
 80077d4:	491e      	ldr	r1, [pc, #120]	; (8007850 <netconn_new_with_proto_and_callback+0xe8>)
 80077d6:	481d      	ldr	r0, [pc, #116]	; (800784c <netconn_new_with_proto_and_callback+0xe4>)
 80077d8:	f00f fce6 	bl	80171a8 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80077dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077de:	3314      	adds	r3, #20
 80077e0:	4618      	mov	r0, r3
 80077e2:	f00f f9f2 	bl	8016bca <sys_mbox_valid>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d005      	beq.n	80077f8 <netconn_new_with_proto_and_callback+0x90>
 80077ec:	4b15      	ldr	r3, [pc, #84]	; (8007844 <netconn_new_with_proto_and_callback+0xdc>)
 80077ee:	22a6      	movs	r2, #166	; 0xa6
 80077f0:	4918      	ldr	r1, [pc, #96]	; (8007854 <netconn_new_with_proto_and_callback+0xec>)
 80077f2:	4816      	ldr	r0, [pc, #88]	; (800784c <netconn_new_with_proto_and_callback+0xe4>)
 80077f4:	f00f fcd8 	bl	80171a8 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80077f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077fa:	330c      	adds	r3, #12
 80077fc:	4618      	mov	r0, r3
 80077fe:	f00f fa75 	bl	8016cec <sys_sem_valid>
 8007802:	4603      	mov	r3, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	d105      	bne.n	8007814 <netconn_new_with_proto_and_callback+0xac>
 8007808:	4b0e      	ldr	r3, [pc, #56]	; (8007844 <netconn_new_with_proto_and_callback+0xdc>)
 800780a:	22a9      	movs	r2, #169	; 0xa9
 800780c:	4912      	ldr	r1, [pc, #72]	; (8007858 <netconn_new_with_proto_and_callback+0xf0>)
 800780e:	480f      	ldr	r0, [pc, #60]	; (800784c <netconn_new_with_proto_and_callback+0xe4>)
 8007810:	f00f fcca 	bl	80171a8 <iprintf>
      sys_sem_free(&conn->op_completed);
 8007814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007816:	330c      	adds	r3, #12
 8007818:	4618      	mov	r0, r3
 800781a:	f00f fa5a 	bl	8016cd2 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800781e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007820:	3310      	adds	r3, #16
 8007822:	4618      	mov	r0, r3
 8007824:	f00f f94a 	bl	8016abc <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8007828:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800782a:	2007      	movs	r0, #7
 800782c:	f002 ff92 	bl	800a754 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8007830:	2300      	movs	r3, #0
 8007832:	e000      	b.n	8007836 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8007834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007836:	4618      	mov	r0, r3
 8007838:	3730      	adds	r7, #48	; 0x30
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	0800899d 	.word	0x0800899d
 8007844:	08018678 	.word	0x08018678
 8007848:	080186ac 	.word	0x080186ac
 800784c:	080186d0 	.word	0x080186d0
 8007850:	080186f8 	.word	0x080186f8
 8007854:	08018710 	.word	0x08018710
 8007858:	08018734 	.word	0x08018734

0800785c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b08c      	sub	sp, #48	; 0x30
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d101      	bne.n	800786e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800786a:	2300      	movs	r3, #0
 800786c:	e014      	b.n	8007898 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8007872:	2329      	movs	r3, #41	; 0x29
 8007874:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8007876:	f107 030c 	add.w	r3, r7, #12
 800787a:	4619      	mov	r1, r3
 800787c:	4808      	ldr	r0, [pc, #32]	; (80078a0 <netconn_prepare_delete+0x44>)
 800787e:	f7ff ff55 	bl	800772c <netconn_apimsg>
 8007882:	4603      	mov	r3, r0
 8007884:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8007888:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800788c:	2b00      	cmp	r3, #0
 800788e:	d002      	beq.n	8007896 <netconn_prepare_delete+0x3a>
    return err;
 8007890:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007894:	e000      	b.n	8007898 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8007896:	2300      	movs	r3, #0
}
 8007898:	4618      	mov	r0, r3
 800789a:	3730      	adds	r7, #48	; 0x30
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	08008f01 	.word	0x08008f01

080078a4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d101      	bne.n	80078b6 <netconn_delete+0x12>
    return ERR_OK;
 80078b2:	2300      	movs	r3, #0
 80078b4:	e00d      	b.n	80078d2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f7ff ffd0 	bl	800785c <netconn_prepare_delete>
 80078bc:	4603      	mov	r3, r0
 80078be:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 80078c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d102      	bne.n	80078ce <netconn_delete+0x2a>
    netconn_free(conn);
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f001 f8eb 	bl	8008aa4 <netconn_free>
  }
  return err;
 80078ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3710      	adds	r7, #16
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
	...

080078dc <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b08e      	sub	sp, #56	; 0x38
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	4613      	mov	r3, r2
 80078e8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d109      	bne.n	8007904 <netconn_bind+0x28>
 80078f0:	4b11      	ldr	r3, [pc, #68]	; (8007938 <netconn_bind+0x5c>)
 80078f2:	f44f 729c 	mov.w	r2, #312	; 0x138
 80078f6:	4911      	ldr	r1, [pc, #68]	; (800793c <netconn_bind+0x60>)
 80078f8:	4811      	ldr	r0, [pc, #68]	; (8007940 <netconn_bind+0x64>)
 80078fa:	f00f fc55 	bl	80171a8 <iprintf>
 80078fe:	f06f 030f 	mvn.w	r3, #15
 8007902:	e015      	b.n	8007930 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d101      	bne.n	800790e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800790a:	4b0e      	ldr	r3, [pc, #56]	; (8007944 <netconn_bind+0x68>)
 800790c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8007916:	88fb      	ldrh	r3, [r7, #6]
 8007918:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800791a:	f107 0314 	add.w	r3, r7, #20
 800791e:	4619      	mov	r1, r3
 8007920:	4809      	ldr	r0, [pc, #36]	; (8007948 <netconn_bind+0x6c>)
 8007922:	f7ff ff03 	bl	800772c <netconn_apimsg>
 8007926:	4603      	mov	r3, r0
 8007928:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800792c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8007930:	4618      	mov	r0, r3
 8007932:	3738      	adds	r7, #56	; 0x38
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}
 8007938:	08018678 	.word	0x08018678
 800793c:	080187b0 	.word	0x080187b0
 8007940:	080186d0 	.word	0x080186d0
 8007944:	0801c024 	.word	0x0801c024
 8007948:	080090c9 	.word	0x080090c9

0800794c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b08c      	sub	sp, #48	; 0x30
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	460b      	mov	r3, r1
 8007956:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d109      	bne.n	8007972 <netconn_listen_with_backlog+0x26>
 800795e:	4b0d      	ldr	r3, [pc, #52]	; (8007994 <netconn_listen_with_backlog+0x48>)
 8007960:	f240 12bb 	movw	r2, #443	; 0x1bb
 8007964:	490c      	ldr	r1, [pc, #48]	; (8007998 <netconn_listen_with_backlog+0x4c>)
 8007966:	480d      	ldr	r0, [pc, #52]	; (800799c <netconn_listen_with_backlog+0x50>)
 8007968:	f00f fc1e 	bl	80171a8 <iprintf>
 800796c:	f06f 030f 	mvn.w	r3, #15
 8007970:	e00c      	b.n	800798c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8007976:	f107 030c 	add.w	r3, r7, #12
 800797a:	4619      	mov	r1, r3
 800797c:	4808      	ldr	r0, [pc, #32]	; (80079a0 <netconn_listen_with_backlog+0x54>)
 800797e:	f7ff fed5 	bl	800772c <netconn_apimsg>
 8007982:	4603      	mov	r3, r0
 8007984:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8007988:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800798c:	4618      	mov	r0, r3
 800798e:	3730      	adds	r7, #48	; 0x30
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}
 8007994:	08018678 	.word	0x08018678
 8007998:	08018830 	.word	0x08018830
 800799c:	080186d0 	.word	0x080186d0
 80079a0:	0800913d 	.word	0x0800913d

080079a4 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b086      	sub	sp, #24
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d109      	bne.n	80079c8 <netconn_accept+0x24>
 80079b4:	4b3d      	ldr	r3, [pc, #244]	; (8007aac <netconn_accept+0x108>)
 80079b6:	f240 12e1 	movw	r2, #481	; 0x1e1
 80079ba:	493d      	ldr	r1, [pc, #244]	; (8007ab0 <netconn_accept+0x10c>)
 80079bc:	483d      	ldr	r0, [pc, #244]	; (8007ab4 <netconn_accept+0x110>)
 80079be:	f00f fbf3 	bl	80171a8 <iprintf>
 80079c2:	f06f 030f 	mvn.w	r3, #15
 80079c6:	e06c      	b.n	8007aa2 <netconn_accept+0xfe>
  *new_conn = NULL;
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	2200      	movs	r2, #0
 80079cc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d109      	bne.n	80079e8 <netconn_accept+0x44>
 80079d4:	4b35      	ldr	r3, [pc, #212]	; (8007aac <netconn_accept+0x108>)
 80079d6:	f240 12e3 	movw	r2, #483	; 0x1e3
 80079da:	4937      	ldr	r1, [pc, #220]	; (8007ab8 <netconn_accept+0x114>)
 80079dc:	4835      	ldr	r0, [pc, #212]	; (8007ab4 <netconn_accept+0x110>)
 80079de:	f00f fbe3 	bl	80171a8 <iprintf>
 80079e2:	f06f 030f 	mvn.w	r3, #15
 80079e6:	e05c      	b.n	8007aa2 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 fb6c 	bl	80080c6 <netconn_err>
 80079ee:	4603      	mov	r3, r0
 80079f0:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 80079f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d002      	beq.n	8007a00 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 80079fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80079fe:	e050      	b.n	8007aa2 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	3314      	adds	r3, #20
 8007a04:	4618      	mov	r0, r3
 8007a06:	f00f f8e0 	bl	8016bca <sys_mbox_valid>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d005      	beq.n	8007a1c <netconn_accept+0x78>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	7f1b      	ldrb	r3, [r3, #28]
 8007a14:	f003 0301 	and.w	r3, r3, #1
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d002      	beq.n	8007a22 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8007a1c:	f06f 030e 	mvn.w	r3, #14
 8007a20:	e03f      	b.n	8007aa2 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	7f1b      	ldrb	r3, [r3, #28]
 8007a26:	f003 0302 	and.w	r3, r3, #2
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00e      	beq.n	8007a4c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	3314      	adds	r3, #20
 8007a32:	f107 020c 	add.w	r2, r7, #12
 8007a36:	4611      	mov	r1, r2
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f00f f8aa 	bl	8016b92 <sys_arch_mbox_tryfetch>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a44:	d10a      	bne.n	8007a5c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8007a46:	f06f 0306 	mvn.w	r3, #6
 8007a4a:	e02a      	b.n	8007aa2 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	3314      	adds	r3, #20
 8007a50:	f107 010c 	add.w	r1, r7, #12
 8007a54:	2200      	movs	r2, #0
 8007a56:	4618      	mov	r0, r3
 8007a58:	f00f f85c 	bl	8016b14 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d005      	beq.n	8007a70 <netconn_accept+0xcc>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a68:	2200      	movs	r2, #0
 8007a6a:	2101      	movs	r1, #1
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f107 0213 	add.w	r2, r7, #19
 8007a76:	4611      	mov	r1, r2
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f000 fb75 	bl	8008168 <lwip_netconn_is_err_msg>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d002      	beq.n	8007a8a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8007a84:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007a88:	e00b      	b.n	8007aa2 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d102      	bne.n	8007a96 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8007a90:	f06f 030e 	mvn.w	r3, #14
 8007a94:	e005      	b.n	8007aa2 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	697a      	ldr	r2, [r7, #20]
 8007a9e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8007aa0:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3718      	adds	r7, #24
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	08018678 	.word	0x08018678
 8007ab0:	08018850 	.word	0x08018850
 8007ab4:	080186d0 	.word	0x080186d0
 8007ab8:	08018870 	.word	0x08018870

08007abc <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b088      	sub	sp, #32
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	4613      	mov	r3, r2
 8007ac8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8007aca:	2300      	movs	r3, #0
 8007acc:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d109      	bne.n	8007ae8 <netconn_recv_data+0x2c>
 8007ad4:	4b58      	ldr	r3, [pc, #352]	; (8007c38 <netconn_recv_data+0x17c>)
 8007ad6:	f44f 7212 	mov.w	r2, #584	; 0x248
 8007ada:	4958      	ldr	r1, [pc, #352]	; (8007c3c <netconn_recv_data+0x180>)
 8007adc:	4858      	ldr	r0, [pc, #352]	; (8007c40 <netconn_recv_data+0x184>)
 8007ade:	f00f fb63 	bl	80171a8 <iprintf>
 8007ae2:	f06f 030f 	mvn.w	r3, #15
 8007ae6:	e0a2      	b.n	8007c2e <netconn_recv_data+0x172>
  *new_buf = NULL;
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	2200      	movs	r2, #0
 8007aec:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d109      	bne.n	8007b08 <netconn_recv_data+0x4c>
 8007af4:	4b50      	ldr	r3, [pc, #320]	; (8007c38 <netconn_recv_data+0x17c>)
 8007af6:	f240 224a 	movw	r2, #586	; 0x24a
 8007afa:	4952      	ldr	r1, [pc, #328]	; (8007c44 <netconn_recv_data+0x188>)
 8007afc:	4850      	ldr	r0, [pc, #320]	; (8007c40 <netconn_recv_data+0x184>)
 8007afe:	f00f fb53 	bl	80171a8 <iprintf>
 8007b02:	f06f 030f 	mvn.w	r3, #15
 8007b06:	e092      	b.n	8007c2e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	3310      	adds	r3, #16
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f00f f85c 	bl	8016bca <sys_mbox_valid>
 8007b12:	4603      	mov	r3, r0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d10e      	bne.n	8007b36 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8007b18:	68f8      	ldr	r0, [r7, #12]
 8007b1a:	f000 fad4 	bl	80080c6 <netconn_err>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8007b22:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d002      	beq.n	8007b30 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8007b2a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8007b2e:	e07e      	b.n	8007c2e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8007b30:	f06f 030a 	mvn.w	r3, #10
 8007b34:	e07b      	b.n	8007c2e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	7f1b      	ldrb	r3, [r3, #28]
 8007b3a:	f003 0302 	and.w	r3, r3, #2
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d10f      	bne.n	8007b62 <netconn_recv_data+0xa6>
 8007b42:	79fb      	ldrb	r3, [r7, #7]
 8007b44:	f003 0304 	and.w	r3, r3, #4
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d10a      	bne.n	8007b62 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	7f1b      	ldrb	r3, [r3, #28]
 8007b50:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d104      	bne.n	8007b62 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d023      	beq.n	8007baa <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	3310      	adds	r3, #16
 8007b66:	f107 0218 	add.w	r2, r7, #24
 8007b6a:	4611      	mov	r1, r2
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f00f f810 	bl	8016b92 <sys_arch_mbox_tryfetch>
 8007b72:	4603      	mov	r3, r0
 8007b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b78:	d11f      	bne.n	8007bba <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8007b7a:	68f8      	ldr	r0, [r7, #12]
 8007b7c:	f000 faa3 	bl	80080c6 <netconn_err>
 8007b80:	4603      	mov	r3, r0
 8007b82:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8007b84:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d002      	beq.n	8007b92 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8007b8c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8007b90:	e04d      	b.n	8007c2e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	7f1b      	ldrb	r3, [r3, #28]
 8007b96:	f003 0301 	and.w	r3, r3, #1
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d002      	beq.n	8007ba4 <netconn_recv_data+0xe8>
        return ERR_CONN;
 8007b9e:	f06f 030a 	mvn.w	r3, #10
 8007ba2:	e044      	b.n	8007c2e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8007ba4:	f06f 0306 	mvn.w	r3, #6
 8007ba8:	e041      	b.n	8007c2e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	3310      	adds	r3, #16
 8007bae:	f107 0118 	add.w	r1, r7, #24
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f00e ffad 	bl	8016b14 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007bc2:	2b10      	cmp	r3, #16
 8007bc4:	d117      	bne.n	8007bf6 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	f107 0217 	add.w	r2, r7, #23
 8007bcc:	4611      	mov	r1, r2
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f000 faca 	bl	8008168 <lwip_netconn_is_err_msg>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d009      	beq.n	8007bee <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8007bda:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007bde:	f113 0f0f 	cmn.w	r3, #15
 8007be2:	d101      	bne.n	8007be8 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8007be4:	2300      	movs	r3, #0
 8007be6:	e022      	b.n	8007c2e <netconn_recv_data+0x172>
      }
      return err;
 8007be8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007bec:	e01f      	b.n	8007c2e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	891b      	ldrh	r3, [r3, #8]
 8007bf2:	83fb      	strh	r3, [r7, #30]
 8007bf4:	e00d      	b.n	8007c12 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8007bf6:	69bb      	ldr	r3, [r7, #24]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d106      	bne.n	8007c0a <netconn_recv_data+0x14e>
 8007bfc:	4b0e      	ldr	r3, [pc, #56]	; (8007c38 <netconn_recv_data+0x17c>)
 8007bfe:	f240 2291 	movw	r2, #657	; 0x291
 8007c02:	4911      	ldr	r1, [pc, #68]	; (8007c48 <netconn_recv_data+0x18c>)
 8007c04:	480e      	ldr	r0, [pc, #56]	; (8007c40 <netconn_recv_data+0x184>)
 8007c06:	f00f facf 	bl	80171a8 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8007c0a:	69bb      	ldr	r3, [r7, #24]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	891b      	ldrh	r3, [r3, #8]
 8007c10:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d005      	beq.n	8007c26 <netconn_recv_data+0x16a>
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1e:	8bfa      	ldrh	r2, [r7, #30]
 8007c20:	2101      	movs	r1, #1
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8007c26:	69ba      	ldr	r2, [r7, #24]
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8007c2c:	2300      	movs	r3, #0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3720      	adds	r7, #32
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
 8007c36:	bf00      	nop
 8007c38:	08018678 	.word	0x08018678
 8007c3c:	08018890 	.word	0x08018890
 8007c40:	080186d0 	.word	0x080186d0
 8007c44:	080188b0 	.word	0x080188b0
 8007c48:	080188cc 	.word	0x080188cc

08007c4c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d005      	beq.n	8007c6a <netconn_tcp_recvd_msg+0x1e>
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c66:	2b10      	cmp	r3, #16
 8007c68:	d009      	beq.n	8007c7e <netconn_tcp_recvd_msg+0x32>
 8007c6a:	4b0c      	ldr	r3, [pc, #48]	; (8007c9c <netconn_tcp_recvd_msg+0x50>)
 8007c6c:	f240 22a7 	movw	r2, #679	; 0x2a7
 8007c70:	490b      	ldr	r1, [pc, #44]	; (8007ca0 <netconn_tcp_recvd_msg+0x54>)
 8007c72:	480c      	ldr	r0, [pc, #48]	; (8007ca4 <netconn_tcp_recvd_msg+0x58>)
 8007c74:	f00f fa98 	bl	80171a8 <iprintf>
 8007c78:	f06f 030f 	mvn.w	r3, #15
 8007c7c:	e00a      	b.n	8007c94 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	68fa      	ldr	r2, [r7, #12]
 8007c82:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	68ba      	ldr	r2, [r7, #8]
 8007c88:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8007c8a:	6879      	ldr	r1, [r7, #4]
 8007c8c:	4806      	ldr	r0, [pc, #24]	; (8007ca8 <netconn_tcp_recvd_msg+0x5c>)
 8007c8e:	f7ff fd4d 	bl	800772c <netconn_apimsg>
 8007c92:	4603      	mov	r3, r0
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3710      	adds	r7, #16
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}
 8007c9c:	08018678 	.word	0x08018678
 8007ca0:	080188d8 	.word	0x080188d8
 8007ca4:	080186d0 	.word	0x080186d0
 8007ca8:	0800926d 	.word	0x0800926d

08007cac <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b090      	sub	sp, #64	; 0x40
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	60f8      	str	r0, [r7, #12]
 8007cb4:	60b9      	str	r1, [r7, #8]
 8007cb6:	4613      	mov	r3, r2
 8007cb8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	3310      	adds	r3, #16
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f00e ff83 	bl	8016bca <sys_mbox_valid>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d102      	bne.n	8007cd0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8007cca:	f06f 030a 	mvn.w	r3, #10
 8007cce:	e06d      	b.n	8007dac <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	7f1b      	ldrb	r3, [r3, #28]
 8007cd4:	b25b      	sxtb	r3, r3
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	da07      	bge.n	8007cea <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	7f1b      	ldrb	r3, [r3, #28]
 8007cde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ce2:	b2da      	uxtb	r2, r3
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8007ce8:	e039      	b.n	8007d5e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8007cea:	79fb      	ldrb	r3, [r7, #7]
 8007cec:	461a      	mov	r2, r3
 8007cee:	68b9      	ldr	r1, [r7, #8]
 8007cf0:	68f8      	ldr	r0, [r7, #12]
 8007cf2:	f7ff fee3 	bl	8007abc <netconn_recv_data>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 8007cfc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d002      	beq.n	8007d0a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8007d04:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007d08:	e050      	b.n	8007dac <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8007d10:	79fb      	ldrb	r3, [r7, #7]
 8007d12:	f003 0308 	and.w	r3, r3, #8
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d10e      	bne.n	8007d38 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8007d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d002      	beq.n	8007d26 <netconn_recv_data_tcp+0x7a>
 8007d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d22:	891b      	ldrh	r3, [r3, #8]
 8007d24:	e000      	b.n	8007d28 <netconn_recv_data_tcp+0x7c>
 8007d26:	2301      	movs	r3, #1
 8007d28:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8007d2a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007d2c:	f107 0214 	add.w	r2, r7, #20
 8007d30:	4619      	mov	r1, r3
 8007d32:	68f8      	ldr	r0, [r7, #12]
 8007d34:	f7ff ff8a 	bl	8007c4c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8007d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d134      	bne.n	8007da8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 8007d3e:	79fb      	ldrb	r3, [r7, #7]
 8007d40:	f003 0310 	and.w	r3, r3, #16
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d009      	beq.n	8007d5c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	7f1b      	ldrb	r3, [r3, #28]
 8007d4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007d50:	b2da      	uxtb	r2, r3
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8007d56:	f06f 0306 	mvn.w	r3, #6
 8007d5a:	e027      	b.n	8007dac <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8007d5c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d005      	beq.n	8007d72 <netconn_recv_data_tcp+0xc6>
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	2101      	movs	r1, #1
 8007d6e:	68f8      	ldr	r0, [r7, #12]
 8007d70:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d10f      	bne.n	8007d9a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8007d7a:	68f8      	ldr	r0, [r7, #12]
 8007d7c:	f000 f9a3 	bl	80080c6 <netconn_err>
 8007d80:	4603      	mov	r3, r0
 8007d82:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8007d86:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d002      	beq.n	8007d94 <netconn_recv_data_tcp+0xe8>
          return err;
 8007d8e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007d92:	e00b      	b.n	8007dac <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8007d94:	f06f 030d 	mvn.w	r3, #13
 8007d98:	e008      	b.n	8007dac <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8007d9a:	2101      	movs	r1, #1
 8007d9c:	68f8      	ldr	r0, [r7, #12]
 8007d9e:	f000 f955 	bl	800804c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8007da2:	f06f 030e 	mvn.w	r3, #14
 8007da6:	e001      	b.n	8007dac <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8007da8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3740      	adds	r7, #64	; 0x40
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b086      	sub	sp, #24
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d109      	bne.n	8007ddc <netconn_recv+0x28>
 8007dc8:	4b32      	ldr	r3, [pc, #200]	; (8007e94 <netconn_recv+0xe0>)
 8007dca:	f240 3263 	movw	r2, #867	; 0x363
 8007dce:	4932      	ldr	r1, [pc, #200]	; (8007e98 <netconn_recv+0xe4>)
 8007dd0:	4832      	ldr	r0, [pc, #200]	; (8007e9c <netconn_recv+0xe8>)
 8007dd2:	f00f f9e9 	bl	80171a8 <iprintf>
 8007dd6:	f06f 030f 	mvn.w	r3, #15
 8007dda:	e056      	b.n	8007e8a <netconn_recv+0xd6>
  *new_buf = NULL;
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	2200      	movs	r2, #0
 8007de0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d109      	bne.n	8007dfc <netconn_recv+0x48>
 8007de8:	4b2a      	ldr	r3, [pc, #168]	; (8007e94 <netconn_recv+0xe0>)
 8007dea:	f240 3265 	movw	r2, #869	; 0x365
 8007dee:	492c      	ldr	r1, [pc, #176]	; (8007ea0 <netconn_recv+0xec>)
 8007df0:	482a      	ldr	r0, [pc, #168]	; (8007e9c <netconn_recv+0xe8>)
 8007df2:	f00f f9d9 	bl	80171a8 <iprintf>
 8007df6:	f06f 030f 	mvn.w	r3, #15
 8007dfa:	e046      	b.n	8007e8a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e04:	2b10      	cmp	r3, #16
 8007e06:	d13a      	bne.n	8007e7e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8007e0c:	2006      	movs	r0, #6
 8007e0e:	f002 fc4f 	bl	800a6b0 <memp_malloc>
 8007e12:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d102      	bne.n	8007e20 <netconn_recv+0x6c>
      return ERR_MEM;
 8007e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e1e:	e034      	b.n	8007e8a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8007e20:	f107 030c 	add.w	r3, r7, #12
 8007e24:	2200      	movs	r2, #0
 8007e26:	4619      	mov	r1, r3
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f7ff ff3f 	bl	8007cac <netconn_recv_data_tcp>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8007e32:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d006      	beq.n	8007e48 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 8007e3a:	6979      	ldr	r1, [r7, #20]
 8007e3c:	2006      	movs	r0, #6
 8007e3e:	f002 fc89 	bl	800a754 <memp_free>
      return err;
 8007e42:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007e46:	e020      	b.n	8007e8a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d106      	bne.n	8007e5c <netconn_recv+0xa8>
 8007e4e:	4b11      	ldr	r3, [pc, #68]	; (8007e94 <netconn_recv+0xe0>)
 8007e50:	f240 3279 	movw	r2, #889	; 0x379
 8007e54:	4913      	ldr	r1, [pc, #76]	; (8007ea4 <netconn_recv+0xf0>)
 8007e56:	4811      	ldr	r0, [pc, #68]	; (8007e9c <netconn_recv+0xe8>)
 8007e58:	f00f f9a6 	bl	80171a8 <iprintf>

    buf->p = p;
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	2200      	movs	r2, #0
 8007e72:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	697a      	ldr	r2, [r7, #20]
 8007e78:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	e005      	b.n	8007e8a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8007e7e:	2200      	movs	r2, #0
 8007e80:	6839      	ldr	r1, [r7, #0]
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f7ff fe1a 	bl	8007abc <netconn_recv_data>
 8007e88:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3718      	adds	r7, #24
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop
 8007e94:	08018678 	.word	0x08018678
 8007e98:	08018890 	.word	0x08018890
 8007e9c:	080186d0 	.word	0x080186d0
 8007ea0:	080188b0 	.word	0x080188b0
 8007ea4:	08018928 	.word	0x08018928

08007ea8 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b088      	sub	sp, #32
 8007eac:	af02      	add	r7, sp, #8
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	607a      	str	r2, [r7, #4]
 8007eb4:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8007ebe:	78fa      	ldrb	r2, [r7, #3]
 8007ec0:	f107 0110 	add.w	r1, r7, #16
 8007ec4:	6a3b      	ldr	r3, [r7, #32]
 8007ec6:	9300      	str	r3, [sp, #0]
 8007ec8:	4613      	mov	r3, r2
 8007eca:	2201      	movs	r2, #1
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f000 f805 	bl	8007edc <netconn_write_vectors_partly>
 8007ed2:	4603      	mov	r3, r0
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3718      	adds	r7, #24
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b092      	sub	sp, #72	; 0x48
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	4611      	mov	r1, r2
 8007ee8:	461a      	mov	r2, r3
 8007eea:	460b      	mov	r3, r1
 8007eec:	80fb      	strh	r3, [r7, #6]
 8007eee:	4613      	mov	r3, r2
 8007ef0:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d109      	bne.n	8007f0c <netconn_write_vectors_partly+0x30>
 8007ef8:	4b4e      	ldr	r3, [pc, #312]	; (8008034 <netconn_write_vectors_partly+0x158>)
 8007efa:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8007efe:	494e      	ldr	r1, [pc, #312]	; (8008038 <netconn_write_vectors_partly+0x15c>)
 8007f00:	484e      	ldr	r0, [pc, #312]	; (800803c <netconn_write_vectors_partly+0x160>)
 8007f02:	f00f f951 	bl	80171a8 <iprintf>
 8007f06:	f06f 030f 	mvn.w	r3, #15
 8007f0a:	e08e      	b.n	800802a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f14:	2b10      	cmp	r3, #16
 8007f16:	d009      	beq.n	8007f2c <netconn_write_vectors_partly+0x50>
 8007f18:	4b46      	ldr	r3, [pc, #280]	; (8008034 <netconn_write_vectors_partly+0x158>)
 8007f1a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8007f1e:	4948      	ldr	r1, [pc, #288]	; (8008040 <netconn_write_vectors_partly+0x164>)
 8007f20:	4846      	ldr	r0, [pc, #280]	; (800803c <netconn_write_vectors_partly+0x160>)
 8007f22:	f00f f941 	bl	80171a8 <iprintf>
 8007f26:	f06f 0305 	mvn.w	r3, #5
 8007f2a:	e07e      	b.n	800802a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	7f1b      	ldrb	r3, [r3, #28]
 8007f30:	f003 0302 	and.w	r3, r3, #2
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d104      	bne.n	8007f42 <netconn_write_vectors_partly+0x66>
 8007f38:	797b      	ldrb	r3, [r7, #5]
 8007f3a:	f003 0304 	and.w	r3, r3, #4
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d001      	beq.n	8007f46 <netconn_write_vectors_partly+0x6a>
 8007f42:	2301      	movs	r3, #1
 8007f44:	e000      	b.n	8007f48 <netconn_write_vectors_partly+0x6c>
 8007f46:	2300      	movs	r3, #0
 8007f48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8007f4c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d005      	beq.n	8007f60 <netconn_write_vectors_partly+0x84>
 8007f54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d102      	bne.n	8007f60 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8007f5a:	f06f 0305 	mvn.w	r3, #5
 8007f5e:	e064      	b.n	800802a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8007f60:	2300      	movs	r3, #0
 8007f62:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8007f64:	2300      	movs	r3, #0
 8007f66:	643b      	str	r3, [r7, #64]	; 0x40
 8007f68:	e015      	b.n	8007f96 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8007f6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f6c:	00db      	lsls	r3, r3, #3
 8007f6e:	68ba      	ldr	r2, [r7, #8]
 8007f70:	4413      	add	r3, r2
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f76:	4413      	add	r3, r2
 8007f78:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8007f7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f7c:	00db      	lsls	r3, r3, #3
 8007f7e:	68ba      	ldr	r2, [r7, #8]
 8007f80:	4413      	add	r3, r2
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d202      	bcs.n	8007f90 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8007f8a:	f06f 0305 	mvn.w	r3, #5
 8007f8e:	e04c      	b.n	800802a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8007f90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f92:	3301      	adds	r3, #1
 8007f94:	643b      	str	r3, [r7, #64]	; 0x40
 8007f96:	88fb      	ldrh	r3, [r7, #6]
 8007f98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	dbe5      	blt.n	8007f6a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8007f9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d101      	bne.n	8007fa8 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	e040      	b.n	800802a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8007fa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	da0a      	bge.n	8007fc4 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8007fae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d102      	bne.n	8007fba <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8007fb4:	f06f 0305 	mvn.w	r3, #5
 8007fb8:	e037      	b.n	800802a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8007fba:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8007fbe:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8007fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc2:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8007fcc:	88fb      	ldrh	r3, [r7, #6]
 8007fce:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8007fd4:	797b      	ldrb	r3, [r7, #5]
 8007fd6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8007fda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fdc:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8007fe2:	f107 0314 	add.w	r3, r7, #20
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	4816      	ldr	r0, [pc, #88]	; (8008044 <netconn_write_vectors_partly+0x168>)
 8007fea:	f7ff fb9f 	bl	800772c <netconn_apimsg>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8007ff4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d114      	bne.n	8008026 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8007ffc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d002      	beq.n	8008008 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8008002:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008004:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008006:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8008008:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800800c:	2b00      	cmp	r3, #0
 800800e:	d10a      	bne.n	8008026 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8008010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008012:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008014:	429a      	cmp	r2, r3
 8008016:	d006      	beq.n	8008026 <netconn_write_vectors_partly+0x14a>
 8008018:	4b06      	ldr	r3, [pc, #24]	; (8008034 <netconn_write_vectors_partly+0x158>)
 800801a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800801e:	490a      	ldr	r1, [pc, #40]	; (8008048 <netconn_write_vectors_partly+0x16c>)
 8008020:	4806      	ldr	r0, [pc, #24]	; (800803c <netconn_write_vectors_partly+0x160>)
 8008022:	f00f f8c1 	bl	80171a8 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8008026:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800802a:	4618      	mov	r0, r3
 800802c:	3748      	adds	r7, #72	; 0x48
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	08018678 	.word	0x08018678
 8008038:	08018950 	.word	0x08018950
 800803c:	080186d0 	.word	0x080186d0
 8008040:	0801896c 	.word	0x0801896c
 8008044:	08009671 	.word	0x08009671
 8008048:	08018990 	.word	0x08018990

0800804c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b08c      	sub	sp, #48	; 0x30
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	460b      	mov	r3, r1
 8008056:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d109      	bne.n	8008072 <netconn_close_shutdown+0x26>
 800805e:	4b0f      	ldr	r3, [pc, #60]	; (800809c <netconn_close_shutdown+0x50>)
 8008060:	f240 4247 	movw	r2, #1095	; 0x447
 8008064:	490e      	ldr	r1, [pc, #56]	; (80080a0 <netconn_close_shutdown+0x54>)
 8008066:	480f      	ldr	r0, [pc, #60]	; (80080a4 <netconn_close_shutdown+0x58>)
 8008068:	f00f f89e 	bl	80171a8 <iprintf>
 800806c:	f06f 030f 	mvn.w	r3, #15
 8008070:	e010      	b.n	8008094 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8008076:	78fb      	ldrb	r3, [r7, #3]
 8008078:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800807a:	2329      	movs	r3, #41	; 0x29
 800807c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800807e:	f107 030c 	add.w	r3, r7, #12
 8008082:	4619      	mov	r1, r3
 8008084:	4808      	ldr	r0, [pc, #32]	; (80080a8 <netconn_close_shutdown+0x5c>)
 8008086:	f7ff fb51 	bl	800772c <netconn_apimsg>
 800808a:	4603      	mov	r3, r0
 800808c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008090:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008094:	4618      	mov	r0, r3
 8008096:	3730      	adds	r7, #48	; 0x30
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}
 800809c:	08018678 	.word	0x08018678
 80080a0:	080189b4 	.word	0x080189b4
 80080a4:	080186d0 	.word	0x080186d0
 80080a8:	08009789 	.word	0x08009789

080080ac <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b082      	sub	sp, #8
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 80080b4:	2103      	movs	r1, #3
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f7ff ffc8 	bl	800804c <netconn_close_shutdown>
 80080bc:	4603      	mov	r3, r0
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3708      	adds	r7, #8
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}

080080c6 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 80080c6:	b580      	push	{r7, lr}
 80080c8:	b084      	sub	sp, #16
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d101      	bne.n	80080d8 <netconn_err+0x12>
    return ERR_OK;
 80080d4:	2300      	movs	r3, #0
 80080d6:	e00d      	b.n	80080f4 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 80080d8:	f00e fe92 	bl	8016e00 <sys_arch_protect>
 80080dc:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	7a1b      	ldrb	r3, [r3, #8]
 80080e2:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2200      	movs	r2, #0
 80080e8:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 80080ea:	68f8      	ldr	r0, [r7, #12]
 80080ec:	f00e fe96 	bl	8016e1c <sys_arch_unprotect>
  return err;
 80080f0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3710      	adds	r7, #16
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	4603      	mov	r3, r0
 8008104:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8008106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800810a:	f113 0f0d 	cmn.w	r3, #13
 800810e:	d009      	beq.n	8008124 <lwip_netconn_err_to_msg+0x28>
 8008110:	f113 0f0d 	cmn.w	r3, #13
 8008114:	dc0c      	bgt.n	8008130 <lwip_netconn_err_to_msg+0x34>
 8008116:	f113 0f0f 	cmn.w	r3, #15
 800811a:	d007      	beq.n	800812c <lwip_netconn_err_to_msg+0x30>
 800811c:	f113 0f0e 	cmn.w	r3, #14
 8008120:	d002      	beq.n	8008128 <lwip_netconn_err_to_msg+0x2c>
 8008122:	e005      	b.n	8008130 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8008124:	4b0a      	ldr	r3, [pc, #40]	; (8008150 <lwip_netconn_err_to_msg+0x54>)
 8008126:	e00e      	b.n	8008146 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8008128:	4b0a      	ldr	r3, [pc, #40]	; (8008154 <lwip_netconn_err_to_msg+0x58>)
 800812a:	e00c      	b.n	8008146 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800812c:	4b0a      	ldr	r3, [pc, #40]	; (8008158 <lwip_netconn_err_to_msg+0x5c>)
 800812e:	e00a      	b.n	8008146 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8008130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d005      	beq.n	8008144 <lwip_netconn_err_to_msg+0x48>
 8008138:	4b08      	ldr	r3, [pc, #32]	; (800815c <lwip_netconn_err_to_msg+0x60>)
 800813a:	227d      	movs	r2, #125	; 0x7d
 800813c:	4908      	ldr	r1, [pc, #32]	; (8008160 <lwip_netconn_err_to_msg+0x64>)
 800813e:	4809      	ldr	r0, [pc, #36]	; (8008164 <lwip_netconn_err_to_msg+0x68>)
 8008140:	f00f f832 	bl	80171a8 <iprintf>
      return NULL;
 8008144:	2300      	movs	r3, #0
  }
}
 8008146:	4618      	mov	r0, r3
 8008148:	3708      	adds	r7, #8
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop
 8008150:	0801bf00 	.word	0x0801bf00
 8008154:	0801bf01 	.word	0x0801bf01
 8008158:	0801bf02 	.word	0x0801bf02
 800815c:	080189d0 	.word	0x080189d0
 8008160:	08018a04 	.word	0x08018a04
 8008164:	08018a14 	.word	0x08018a14

08008168 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d105      	bne.n	8008184 <lwip_netconn_is_err_msg+0x1c>
 8008178:	4b12      	ldr	r3, [pc, #72]	; (80081c4 <lwip_netconn_is_err_msg+0x5c>)
 800817a:	2285      	movs	r2, #133	; 0x85
 800817c:	4912      	ldr	r1, [pc, #72]	; (80081c8 <lwip_netconn_is_err_msg+0x60>)
 800817e:	4813      	ldr	r0, [pc, #76]	; (80081cc <lwip_netconn_is_err_msg+0x64>)
 8008180:	f00f f812 	bl	80171a8 <iprintf>

  if (msg == &netconn_aborted) {
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	4a12      	ldr	r2, [pc, #72]	; (80081d0 <lwip_netconn_is_err_msg+0x68>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d104      	bne.n	8008196 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	22f3      	movs	r2, #243	; 0xf3
 8008190:	701a      	strb	r2, [r3, #0]
    return 1;
 8008192:	2301      	movs	r3, #1
 8008194:	e012      	b.n	80081bc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	4a0e      	ldr	r2, [pc, #56]	; (80081d4 <lwip_netconn_is_err_msg+0x6c>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d104      	bne.n	80081a8 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	22f2      	movs	r2, #242	; 0xf2
 80081a2:	701a      	strb	r2, [r3, #0]
    return 1;
 80081a4:	2301      	movs	r3, #1
 80081a6:	e009      	b.n	80081bc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	4a0b      	ldr	r2, [pc, #44]	; (80081d8 <lwip_netconn_is_err_msg+0x70>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d104      	bne.n	80081ba <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	22f1      	movs	r2, #241	; 0xf1
 80081b4:	701a      	strb	r2, [r3, #0]
    return 1;
 80081b6:	2301      	movs	r3, #1
 80081b8:	e000      	b.n	80081bc <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 80081ba:	2300      	movs	r3, #0
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3708      	adds	r7, #8
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	080189d0 	.word	0x080189d0
 80081c8:	08018a3c 	.word	0x08018a3c
 80081cc:	08018a14 	.word	0x08018a14
 80081d0:	0801bf00 	.word	0x0801bf00
 80081d4:	0801bf01 	.word	0x0801bf01
 80081d8:	0801bf02 	.word	0x0801bf02

080081dc <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b088      	sub	sp, #32
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	60f8      	str	r0, [r7, #12]
 80081e4:	60b9      	str	r1, [r7, #8]
 80081e6:	607a      	str	r2, [r7, #4]
 80081e8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d105      	bne.n	80081fc <recv_udp+0x20>
 80081f0:	4b34      	ldr	r3, [pc, #208]	; (80082c4 <recv_udp+0xe8>)
 80081f2:	22e5      	movs	r2, #229	; 0xe5
 80081f4:	4934      	ldr	r1, [pc, #208]	; (80082c8 <recv_udp+0xec>)
 80081f6:	4835      	ldr	r0, [pc, #212]	; (80082cc <recv_udp+0xf0>)
 80081f8:	f00e ffd6 	bl	80171a8 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d105      	bne.n	800820e <recv_udp+0x32>
 8008202:	4b30      	ldr	r3, [pc, #192]	; (80082c4 <recv_udp+0xe8>)
 8008204:	22e6      	movs	r2, #230	; 0xe6
 8008206:	4932      	ldr	r1, [pc, #200]	; (80082d0 <recv_udp+0xf4>)
 8008208:	4830      	ldr	r0, [pc, #192]	; (80082cc <recv_udp+0xf0>)
 800820a:	f00e ffcd 	bl	80171a8 <iprintf>
  conn = (struct netconn *)arg;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d103      	bne.n	8008220 <recv_udp+0x44>
    pbuf_free(p);
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f003 f94b 	bl	800b4b4 <pbuf_free>
    return;
 800821e:	e04d      	b.n	80082bc <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8008220:	69fb      	ldr	r3, [r7, #28]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	68ba      	ldr	r2, [r7, #8]
 8008226:	429a      	cmp	r2, r3
 8008228:	d005      	beq.n	8008236 <recv_udp+0x5a>
 800822a:	4b26      	ldr	r3, [pc, #152]	; (80082c4 <recv_udp+0xe8>)
 800822c:	22ee      	movs	r2, #238	; 0xee
 800822e:	4929      	ldr	r1, [pc, #164]	; (80082d4 <recv_udp+0xf8>)
 8008230:	4826      	ldr	r0, [pc, #152]	; (80082cc <recv_udp+0xf0>)
 8008232:	f00e ffb9 	bl	80171a8 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008236:	69fb      	ldr	r3, [r7, #28]
 8008238:	3310      	adds	r3, #16
 800823a:	4618      	mov	r0, r3
 800823c:	f00e fcc5 	bl	8016bca <sys_mbox_valid>
 8008240:	4603      	mov	r3, r0
 8008242:	2b00      	cmp	r3, #0
 8008244:	d103      	bne.n	800824e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f003 f934 	bl	800b4b4 <pbuf_free>
    return;
 800824c:	e036      	b.n	80082bc <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800824e:	2006      	movs	r0, #6
 8008250:	f002 fa2e 	bl	800a6b0 <memp_malloc>
 8008254:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8008256:	69bb      	ldr	r3, [r7, #24]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d103      	bne.n	8008264 <recv_udp+0x88>
    pbuf_free(p);
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f003 f929 	bl	800b4b4 <pbuf_free>
    return;
 8008262:	e02b      	b.n	80082bc <recv_udp+0xe0>
  } else {
    buf->p = p;
 8008264:	69bb      	ldr	r3, [r7, #24]
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800826a:	69bb      	ldr	r3, [r7, #24]
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d002      	beq.n	800827c <recv_udp+0xa0>
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	e000      	b.n	800827e <recv_udp+0xa2>
 800827c:	2300      	movs	r3, #0
 800827e:	69ba      	ldr	r2, [r7, #24]
 8008280:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8008282:	69bb      	ldr	r3, [r7, #24]
 8008284:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008286:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	891b      	ldrh	r3, [r3, #8]
 800828c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800828e:	69fb      	ldr	r3, [r7, #28]
 8008290:	3310      	adds	r3, #16
 8008292:	69b9      	ldr	r1, [r7, #24]
 8008294:	4618      	mov	r0, r3
 8008296:	f00e fc23 	bl	8016ae0 <sys_mbox_trypost>
 800829a:	4603      	mov	r3, r0
 800829c:	2b00      	cmp	r3, #0
 800829e:	d003      	beq.n	80082a8 <recv_udp+0xcc>
    netbuf_delete(buf);
 80082a0:	69b8      	ldr	r0, [r7, #24]
 80082a2:	f001 fafd 	bl	80098a0 <netbuf_delete>
    return;
 80082a6:	e009      	b.n	80082bc <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d005      	beq.n	80082bc <recv_udp+0xe0>
 80082b0:	69fb      	ldr	r3, [r7, #28]
 80082b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b4:	8afa      	ldrh	r2, [r7, #22]
 80082b6:	2100      	movs	r1, #0
 80082b8:	69f8      	ldr	r0, [r7, #28]
 80082ba:	4798      	blx	r3
  }
}
 80082bc:	3720      	adds	r7, #32
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop
 80082c4:	080189d0 	.word	0x080189d0
 80082c8:	08018a48 	.word	0x08018a48
 80082cc:	08018a14 	.word	0x08018a14
 80082d0:	08018a6c 	.word	0x08018a6c
 80082d4:	08018a8c 	.word	0x08018a8c

080082d8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b088      	sub	sp, #32
 80082dc:	af00      	add	r7, sp, #0
 80082de:	60f8      	str	r0, [r7, #12]
 80082e0:	60b9      	str	r1, [r7, #8]
 80082e2:	607a      	str	r2, [r7, #4]
 80082e4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d106      	bne.n	80082fa <recv_tcp+0x22>
 80082ec:	4b36      	ldr	r3, [pc, #216]	; (80083c8 <recv_tcp+0xf0>)
 80082ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80082f2:	4936      	ldr	r1, [pc, #216]	; (80083cc <recv_tcp+0xf4>)
 80082f4:	4836      	ldr	r0, [pc, #216]	; (80083d0 <recv_tcp+0xf8>)
 80082f6:	f00e ff57 	bl	80171a8 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d106      	bne.n	800830e <recv_tcp+0x36>
 8008300:	4b31      	ldr	r3, [pc, #196]	; (80083c8 <recv_tcp+0xf0>)
 8008302:	f240 122d 	movw	r2, #301	; 0x12d
 8008306:	4933      	ldr	r1, [pc, #204]	; (80083d4 <recv_tcp+0xfc>)
 8008308:	4831      	ldr	r0, [pc, #196]	; (80083d0 <recv_tcp+0xf8>)
 800830a:	f00e ff4d 	bl	80171a8 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800830e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d006      	beq.n	8008324 <recv_tcp+0x4c>
 8008316:	4b2c      	ldr	r3, [pc, #176]	; (80083c8 <recv_tcp+0xf0>)
 8008318:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800831c:	492e      	ldr	r1, [pc, #184]	; (80083d8 <recv_tcp+0x100>)
 800831e:	482c      	ldr	r0, [pc, #176]	; (80083d0 <recv_tcp+0xf8>)
 8008320:	f00e ff42 	bl	80171a8 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d102      	bne.n	8008334 <recv_tcp+0x5c>
    return ERR_VAL;
 800832e:	f06f 0305 	mvn.w	r3, #5
 8008332:	e045      	b.n	80083c0 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	68ba      	ldr	r2, [r7, #8]
 800833a:	429a      	cmp	r2, r3
 800833c:	d006      	beq.n	800834c <recv_tcp+0x74>
 800833e:	4b22      	ldr	r3, [pc, #136]	; (80083c8 <recv_tcp+0xf0>)
 8008340:	f240 1235 	movw	r2, #309	; 0x135
 8008344:	4925      	ldr	r1, [pc, #148]	; (80083dc <recv_tcp+0x104>)
 8008346:	4822      	ldr	r0, [pc, #136]	; (80083d0 <recv_tcp+0xf8>)
 8008348:	f00e ff2e 	bl	80171a8 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	3310      	adds	r3, #16
 8008350:	4618      	mov	r0, r3
 8008352:	f00e fc3a 	bl	8016bca <sys_mbox_valid>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d10d      	bne.n	8008378 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d008      	beq.n	8008374 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	891b      	ldrh	r3, [r3, #8]
 8008366:	4619      	mov	r1, r3
 8008368:	68b8      	ldr	r0, [r7, #8]
 800836a:	f004 f86b 	bl	800c444 <tcp_recved>
      pbuf_free(p);
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f003 f8a0 	bl	800b4b4 <pbuf_free>
    }
    return ERR_OK;
 8008374:	2300      	movs	r3, #0
 8008376:	e023      	b.n	80083c0 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d005      	beq.n	800838a <recv_tcp+0xb2>
    msg = p;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	891b      	ldrh	r3, [r3, #8]
 8008386:	83fb      	strh	r3, [r7, #30]
 8008388:	e003      	b.n	8008392 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800838a:	4b15      	ldr	r3, [pc, #84]	; (80083e0 <recv_tcp+0x108>)
 800838c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800838e:	2300      	movs	r3, #0
 8008390:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	3310      	adds	r3, #16
 8008396:	69b9      	ldr	r1, [r7, #24]
 8008398:	4618      	mov	r0, r3
 800839a:	f00e fba1 	bl	8016ae0 <sys_mbox_trypost>
 800839e:	4603      	mov	r3, r0
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d002      	beq.n	80083aa <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 80083a4:	f04f 33ff 	mov.w	r3, #4294967295
 80083a8:	e00a      	b.n	80083c0 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d005      	beq.n	80083be <recv_tcp+0xe6>
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b6:	8bfa      	ldrh	r2, [r7, #30]
 80083b8:	2100      	movs	r1, #0
 80083ba:	6978      	ldr	r0, [r7, #20]
 80083bc:	4798      	blx	r3
  }

  return ERR_OK;
 80083be:	2300      	movs	r3, #0
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3720      	adds	r7, #32
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}
 80083c8:	080189d0 	.word	0x080189d0
 80083cc:	08018aac 	.word	0x08018aac
 80083d0:	08018a14 	.word	0x08018a14
 80083d4:	08018ad0 	.word	0x08018ad0
 80083d8:	08018af0 	.word	0x08018af0
 80083dc:	08018b08 	.word	0x08018b08
 80083e0:	0801bf02 	.word	0x0801bf02

080083e4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d106      	bne.n	8008406 <poll_tcp+0x22>
 80083f8:	4b29      	ldr	r3, [pc, #164]	; (80084a0 <poll_tcp+0xbc>)
 80083fa:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 80083fe:	4929      	ldr	r1, [pc, #164]	; (80084a4 <poll_tcp+0xc0>)
 8008400:	4829      	ldr	r0, [pc, #164]	; (80084a8 <poll_tcp+0xc4>)
 8008402:	f00e fed1 	bl	80171a8 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	785b      	ldrb	r3, [r3, #1]
 800840a:	2b01      	cmp	r3, #1
 800840c:	d104      	bne.n	8008418 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800840e:	2101      	movs	r1, #1
 8008410:	68f8      	ldr	r0, [r7, #12]
 8008412:	f000 ff61 	bl	80092d8 <lwip_netconn_do_writemore>
 8008416:	e016      	b.n	8008446 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	785b      	ldrb	r3, [r3, #1]
 800841c:	2b04      	cmp	r3, #4
 800841e:	d112      	bne.n	8008446 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	6a1b      	ldr	r3, [r3, #32]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d00a      	beq.n	800843e <poll_tcp+0x5a>
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	6a1b      	ldr	r3, [r3, #32]
 800842c:	7a5b      	ldrb	r3, [r3, #9]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d005      	beq.n	800843e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	6a1b      	ldr	r3, [r3, #32]
 8008436:	7a5a      	ldrb	r2, [r3, #9]
 8008438:	3a01      	subs	r2, #1
 800843a:	b2d2      	uxtb	r2, r2
 800843c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800843e:	2101      	movs	r1, #1
 8008440:	68f8      	ldr	r0, [r7, #12]
 8008442:	f000 fbf7 	bl	8008c34 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	7f1b      	ldrb	r3, [r3, #28]
 800844a:	f003 0310 	and.w	r3, r3, #16
 800844e:	2b00      	cmp	r3, #0
 8008450:	d021      	beq.n	8008496 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d01d      	beq.n	8008496 <poll_tcp+0xb2>
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008462:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8008466:	d316      	bcc.n	8008496 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008470:	2b04      	cmp	r3, #4
 8008472:	d810      	bhi.n	8008496 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	7f1b      	ldrb	r3, [r3, #28]
 8008478:	f023 0310 	bic.w	r3, r3, #16
 800847c:	b2da      	uxtb	r2, r3
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008486:	2b00      	cmp	r3, #0
 8008488:	d005      	beq.n	8008496 <poll_tcp+0xb2>
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848e:	2200      	movs	r2, #0
 8008490:	2102      	movs	r1, #2
 8008492:	68f8      	ldr	r0, [r7, #12]
 8008494:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008496:	2300      	movs	r3, #0
}
 8008498:	4618      	mov	r0, r3
 800849a:	3710      	adds	r7, #16
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	080189d0 	.word	0x080189d0
 80084a4:	08018b28 	.word	0x08018b28
 80084a8:	08018a14 	.word	0x08018a14

080084ac <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b086      	sub	sp, #24
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	60f8      	str	r0, [r7, #12]
 80084b4:	60b9      	str	r1, [r7, #8]
 80084b6:	4613      	mov	r3, r2
 80084b8:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d106      	bne.n	80084d2 <sent_tcp+0x26>
 80084c4:	4b20      	ldr	r3, [pc, #128]	; (8008548 <sent_tcp+0x9c>)
 80084c6:	f240 1293 	movw	r2, #403	; 0x193
 80084ca:	4920      	ldr	r1, [pc, #128]	; (800854c <sent_tcp+0xa0>)
 80084cc:	4820      	ldr	r0, [pc, #128]	; (8008550 <sent_tcp+0xa4>)
 80084ce:	f00e fe6b 	bl	80171a8 <iprintf>

  if (conn) {
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d032      	beq.n	800853e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	785b      	ldrb	r3, [r3, #1]
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d104      	bne.n	80084ea <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80084e0:	2101      	movs	r1, #1
 80084e2:	6978      	ldr	r0, [r7, #20]
 80084e4:	f000 fef8 	bl	80092d8 <lwip_netconn_do_writemore>
 80084e8:	e007      	b.n	80084fa <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	785b      	ldrb	r3, [r3, #1]
 80084ee:	2b04      	cmp	r3, #4
 80084f0:	d103      	bne.n	80084fa <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80084f2:	2101      	movs	r1, #1
 80084f4:	6978      	ldr	r0, [r7, #20]
 80084f6:	f000 fb9d 	bl	8008c34 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d01d      	beq.n	800853e <sent_tcp+0x92>
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800850a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800850e:	d316      	bcc.n	800853e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008518:	2b04      	cmp	r3, #4
 800851a:	d810      	bhi.n	800853e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	7f1b      	ldrb	r3, [r3, #28]
 8008520:	f023 0310 	bic.w	r3, r3, #16
 8008524:	b2da      	uxtb	r2, r3
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800852e:	2b00      	cmp	r3, #0
 8008530:	d005      	beq.n	800853e <sent_tcp+0x92>
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008536:	88fa      	ldrh	r2, [r7, #6]
 8008538:	2102      	movs	r1, #2
 800853a:	6978      	ldr	r0, [r7, #20]
 800853c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800853e:	2300      	movs	r3, #0
}
 8008540:	4618      	mov	r0, r3
 8008542:	3718      	adds	r7, #24
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}
 8008548:	080189d0 	.word	0x080189d0
 800854c:	08018b28 	.word	0x08018b28
 8008550:	08018a14 	.word	0x08018a14

08008554 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b088      	sub	sp, #32
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	460b      	mov	r3, r1
 800855e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d106      	bne.n	8008578 <err_tcp+0x24>
 800856a:	4b5f      	ldr	r3, [pc, #380]	; (80086e8 <err_tcp+0x194>)
 800856c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8008570:	495e      	ldr	r1, [pc, #376]	; (80086ec <err_tcp+0x198>)
 8008572:	485f      	ldr	r0, [pc, #380]	; (80086f0 <err_tcp+0x19c>)
 8008574:	f00e fe18 	bl	80171a8 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8008578:	f00e fc42 	bl	8016e00 <sys_arch_protect>
 800857c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800857e:	69fb      	ldr	r3, [r7, #28]
 8008580:	2200      	movs	r2, #0
 8008582:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	78fa      	ldrb	r2, [r7, #3]
 8008588:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	7f1b      	ldrb	r3, [r3, #28]
 800858e:	f043 0301 	orr.w	r3, r3, #1
 8008592:	b2da      	uxtb	r2, r3
 8008594:	69fb      	ldr	r3, [r7, #28]
 8008596:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8008598:	69fb      	ldr	r3, [r7, #28]
 800859a:	785b      	ldrb	r3, [r3, #1]
 800859c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800859e:	69fb      	ldr	r3, [r7, #28]
 80085a0:	2200      	movs	r2, #0
 80085a2:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 80085a4:	69b8      	ldr	r0, [r7, #24]
 80085a6:	f00e fc39 	bl	8016e1c <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80085aa:	69fb      	ldr	r3, [r7, #28]
 80085ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d005      	beq.n	80085be <err_tcp+0x6a>
 80085b2:	69fb      	ldr	r3, [r7, #28]
 80085b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b6:	2200      	movs	r2, #0
 80085b8:	2104      	movs	r1, #4
 80085ba:	69f8      	ldr	r0, [r7, #28]
 80085bc:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80085be:	69fb      	ldr	r3, [r7, #28]
 80085c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d005      	beq.n	80085d2 <err_tcp+0x7e>
 80085c6:	69fb      	ldr	r3, [r7, #28]
 80085c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ca:	2200      	movs	r2, #0
 80085cc:	2100      	movs	r1, #0
 80085ce:	69f8      	ldr	r0, [r7, #28]
 80085d0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80085d2:	69fb      	ldr	r3, [r7, #28]
 80085d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d005      	beq.n	80085e6 <err_tcp+0x92>
 80085da:	69fb      	ldr	r3, [r7, #28]
 80085dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085de:	2200      	movs	r2, #0
 80085e0:	2102      	movs	r1, #2
 80085e2:	69f8      	ldr	r0, [r7, #28]
 80085e4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 80085e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7ff fd86 	bl	80080fc <lwip_netconn_err_to_msg>
 80085f0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80085f2:	69fb      	ldr	r3, [r7, #28]
 80085f4:	3310      	adds	r3, #16
 80085f6:	4618      	mov	r0, r3
 80085f8:	f00e fae7 	bl	8016bca <sys_mbox_valid>
 80085fc:	4603      	mov	r3, r0
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d005      	beq.n	800860e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8008602:	69fb      	ldr	r3, [r7, #28]
 8008604:	3310      	adds	r3, #16
 8008606:	6939      	ldr	r1, [r7, #16]
 8008608:	4618      	mov	r0, r3
 800860a:	f00e fa69 	bl	8016ae0 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800860e:	69fb      	ldr	r3, [r7, #28]
 8008610:	3314      	adds	r3, #20
 8008612:	4618      	mov	r0, r3
 8008614:	f00e fad9 	bl	8016bca <sys_mbox_valid>
 8008618:	4603      	mov	r3, r0
 800861a:	2b00      	cmp	r3, #0
 800861c:	d005      	beq.n	800862a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	3314      	adds	r3, #20
 8008622:	6939      	ldr	r1, [r7, #16]
 8008624:	4618      	mov	r0, r3
 8008626:	f00e fa5b 	bl	8016ae0 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800862a:	7dfb      	ldrb	r3, [r7, #23]
 800862c:	2b01      	cmp	r3, #1
 800862e:	d005      	beq.n	800863c <err_tcp+0xe8>
 8008630:	7dfb      	ldrb	r3, [r7, #23]
 8008632:	2b04      	cmp	r3, #4
 8008634:	d002      	beq.n	800863c <err_tcp+0xe8>
 8008636:	7dfb      	ldrb	r3, [r7, #23]
 8008638:	2b03      	cmp	r3, #3
 800863a:	d143      	bne.n	80086c4 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800863c:	69fb      	ldr	r3, [r7, #28]
 800863e:	7f1b      	ldrb	r3, [r3, #28]
 8008640:	f003 0304 	and.w	r3, r3, #4
 8008644:	2b00      	cmp	r3, #0
 8008646:	bf14      	ite	ne
 8008648:	2301      	movne	r3, #1
 800864a:	2300      	moveq	r3, #0
 800864c:	b2db      	uxtb	r3, r3
 800864e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8008650:	69fb      	ldr	r3, [r7, #28]
 8008652:	7f1b      	ldrb	r3, [r3, #28]
 8008654:	f023 0304 	bic.w	r3, r3, #4
 8008658:	b2da      	uxtb	r2, r3
 800865a:	69fb      	ldr	r3, [r7, #28]
 800865c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d13b      	bne.n	80086dc <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008664:	69fb      	ldr	r3, [r7, #28]
 8008666:	6a1b      	ldr	r3, [r3, #32]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d106      	bne.n	800867a <err_tcp+0x126>
 800866c:	4b1e      	ldr	r3, [pc, #120]	; (80086e8 <err_tcp+0x194>)
 800866e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008672:	4920      	ldr	r1, [pc, #128]	; (80086f4 <err_tcp+0x1a0>)
 8008674:	481e      	ldr	r0, [pc, #120]	; (80086f0 <err_tcp+0x19c>)
 8008676:	f00e fd97 	bl	80171a8 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800867a:	7dfb      	ldrb	r3, [r7, #23]
 800867c:	2b04      	cmp	r3, #4
 800867e:	d104      	bne.n	800868a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8008680:	69fb      	ldr	r3, [r7, #28]
 8008682:	6a1b      	ldr	r3, [r3, #32]
 8008684:	2200      	movs	r2, #0
 8008686:	711a      	strb	r2, [r3, #4]
 8008688:	e003      	b.n	8008692 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800868a:	69fb      	ldr	r3, [r7, #28]
 800868c:	6a1b      	ldr	r3, [r3, #32]
 800868e:	78fa      	ldrb	r2, [r7, #3]
 8008690:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008692:	69fb      	ldr	r3, [r7, #28]
 8008694:	6a1b      	ldr	r3, [r3, #32]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	330c      	adds	r3, #12
 800869a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800869c:	68b8      	ldr	r0, [r7, #8]
 800869e:	f00e fb25 	bl	8016cec <sys_sem_valid>
 80086a2:	4603      	mov	r3, r0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d106      	bne.n	80086b6 <err_tcp+0x162>
 80086a8:	4b0f      	ldr	r3, [pc, #60]	; (80086e8 <err_tcp+0x194>)
 80086aa:	f240 12ef 	movw	r2, #495	; 0x1ef
 80086ae:	4912      	ldr	r1, [pc, #72]	; (80086f8 <err_tcp+0x1a4>)
 80086b0:	480f      	ldr	r0, [pc, #60]	; (80086f0 <err_tcp+0x19c>)
 80086b2:	f00e fd79 	bl	80171a8 <iprintf>
      conn->current_msg = NULL;
 80086b6:	69fb      	ldr	r3, [r7, #28]
 80086b8:	2200      	movs	r2, #0
 80086ba:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 80086bc:	68b8      	ldr	r0, [r7, #8]
 80086be:	f00e fafb 	bl	8016cb8 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 80086c2:	e00b      	b.n	80086dc <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80086c4:	69fb      	ldr	r3, [r7, #28]
 80086c6:	6a1b      	ldr	r3, [r3, #32]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d008      	beq.n	80086de <err_tcp+0x18a>
 80086cc:	4b06      	ldr	r3, [pc, #24]	; (80086e8 <err_tcp+0x194>)
 80086ce:	f240 12f7 	movw	r2, #503	; 0x1f7
 80086d2:	490a      	ldr	r1, [pc, #40]	; (80086fc <err_tcp+0x1a8>)
 80086d4:	4806      	ldr	r0, [pc, #24]	; (80086f0 <err_tcp+0x19c>)
 80086d6:	f00e fd67 	bl	80171a8 <iprintf>
  }
}
 80086da:	e000      	b.n	80086de <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 80086dc:	bf00      	nop
}
 80086de:	bf00      	nop
 80086e0:	3720      	adds	r7, #32
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	080189d0 	.word	0x080189d0
 80086ec:	08018b28 	.word	0x08018b28
 80086f0:	08018a14 	.word	0x08018a14
 80086f4:	08018b38 	.word	0x08018b38
 80086f8:	08018b54 	.word	0x08018b54
 80086fc:	08018b70 	.word	0x08018b70

08008700 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b084      	sub	sp, #16
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800870e:	6879      	ldr	r1, [r7, #4]
 8008710:	68f8      	ldr	r0, [r7, #12]
 8008712:	f004 fd5d 	bl	800d1d0 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8008716:	490a      	ldr	r1, [pc, #40]	; (8008740 <setup_tcp+0x40>)
 8008718:	68f8      	ldr	r0, [r7, #12]
 800871a:	f004 fd6b 	bl	800d1f4 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800871e:	4909      	ldr	r1, [pc, #36]	; (8008744 <setup_tcp+0x44>)
 8008720:	68f8      	ldr	r0, [r7, #12]
 8008722:	f004 fd89 	bl	800d238 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8008726:	2202      	movs	r2, #2
 8008728:	4907      	ldr	r1, [pc, #28]	; (8008748 <setup_tcp+0x48>)
 800872a:	68f8      	ldr	r0, [r7, #12]
 800872c:	f004 fde0 	bl	800d2f0 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8008730:	4906      	ldr	r1, [pc, #24]	; (800874c <setup_tcp+0x4c>)
 8008732:	68f8      	ldr	r0, [r7, #12]
 8008734:	f004 fda2 	bl	800d27c <tcp_err>
}
 8008738:	bf00      	nop
 800873a:	3710      	adds	r7, #16
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}
 8008740:	080082d9 	.word	0x080082d9
 8008744:	080084ad 	.word	0x080084ad
 8008748:	080083e5 	.word	0x080083e5
 800874c:	08008555 	.word	0x08008555

08008750 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8008750:	b590      	push	{r4, r7, lr}
 8008752:	b089      	sub	sp, #36	; 0x24
 8008754:	af00      	add	r7, sp, #0
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	60b9      	str	r1, [r7, #8]
 800875a:	4613      	mov	r3, r2
 800875c:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d102      	bne.n	800876e <accept_function+0x1e>
    return ERR_VAL;
 8008768:	f06f 0305 	mvn.w	r3, #5
 800876c:	e0a1      	b.n	80088b2 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800876e:	69fb      	ldr	r3, [r7, #28]
 8008770:	3314      	adds	r3, #20
 8008772:	4618      	mov	r0, r3
 8008774:	f00e fa29 	bl	8016bca <sys_mbox_valid>
 8008778:	4603      	mov	r3, r0
 800877a:	2b00      	cmp	r3, #0
 800877c:	d102      	bne.n	8008784 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800877e:	f06f 0305 	mvn.w	r3, #5
 8008782:	e096      	b.n	80088b2 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d11b      	bne.n	80087c2 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	f103 0414 	add.w	r4, r3, #20
 8008790:	f06f 000c 	mvn.w	r0, #12
 8008794:	f7ff fcb2 	bl	80080fc <lwip_netconn_err_to_msg>
 8008798:	4603      	mov	r3, r0
 800879a:	4619      	mov	r1, r3
 800879c:	4620      	mov	r0, r4
 800879e:	f00e f99f 	bl	8016ae0 <sys_mbox_trypost>
 80087a2:	4603      	mov	r3, r0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d109      	bne.n	80087bc <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80087a8:	69fb      	ldr	r3, [r7, #28]
 80087aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d005      	beq.n	80087bc <accept_function+0x6c>
 80087b0:	69fb      	ldr	r3, [r7, #28]
 80087b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b4:	2200      	movs	r2, #0
 80087b6:	2100      	movs	r1, #0
 80087b8:	69f8      	ldr	r0, [r7, #28]
 80087ba:	4798      	blx	r3
    }
    return ERR_VAL;
 80087bc:	f06f 0305 	mvn.w	r3, #5
 80087c0:	e077      	b.n	80088b2 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 80087c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d006      	beq.n	80087d8 <accept_function+0x88>
 80087ca:	4b3c      	ldr	r3, [pc, #240]	; (80088bc <accept_function+0x16c>)
 80087cc:	f240 222a 	movw	r2, #554	; 0x22a
 80087d0:	493b      	ldr	r1, [pc, #236]	; (80088c0 <accept_function+0x170>)
 80087d2:	483c      	ldr	r0, [pc, #240]	; (80088c4 <accept_function+0x174>)
 80087d4:	f00e fce8 	bl	80171a8 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 80087d8:	69fb      	ldr	r3, [r7, #28]
 80087da:	781a      	ldrb	r2, [r3, #0]
 80087dc:	69fb      	ldr	r3, [r7, #28]
 80087de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e0:	4619      	mov	r1, r3
 80087e2:	4610      	mov	r0, r2
 80087e4:	f000 f8f0 	bl	80089c8 <netconn_alloc>
 80087e8:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 80087ea:	69bb      	ldr	r3, [r7, #24]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d11b      	bne.n	8008828 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 80087f0:	69fb      	ldr	r3, [r7, #28]
 80087f2:	f103 0414 	add.w	r4, r3, #20
 80087f6:	f06f 000c 	mvn.w	r0, #12
 80087fa:	f7ff fc7f 	bl	80080fc <lwip_netconn_err_to_msg>
 80087fe:	4603      	mov	r3, r0
 8008800:	4619      	mov	r1, r3
 8008802:	4620      	mov	r0, r4
 8008804:	f00e f96c 	bl	8016ae0 <sys_mbox_trypost>
 8008808:	4603      	mov	r3, r0
 800880a:	2b00      	cmp	r3, #0
 800880c:	d109      	bne.n	8008822 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800880e:	69fb      	ldr	r3, [r7, #28]
 8008810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008812:	2b00      	cmp	r3, #0
 8008814:	d005      	beq.n	8008822 <accept_function+0xd2>
 8008816:	69fb      	ldr	r3, [r7, #28]
 8008818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800881a:	2200      	movs	r2, #0
 800881c:	2100      	movs	r1, #0
 800881e:	69f8      	ldr	r0, [r7, #28]
 8008820:	4798      	blx	r3
    }
    return ERR_MEM;
 8008822:	f04f 33ff 	mov.w	r3, #4294967295
 8008826:	e044      	b.n	80088b2 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8008828:	69bb      	ldr	r3, [r7, #24]
 800882a:	68ba      	ldr	r2, [r7, #8]
 800882c:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800882e:	69b8      	ldr	r0, [r7, #24]
 8008830:	f7ff ff66 	bl	8008700 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8008834:	69fb      	ldr	r3, [r7, #28]
 8008836:	3314      	adds	r3, #20
 8008838:	69b9      	ldr	r1, [r7, #24]
 800883a:	4618      	mov	r0, r3
 800883c:	f00e f950 	bl	8016ae0 <sys_mbox_trypost>
 8008840:	4603      	mov	r3, r0
 8008842:	2b00      	cmp	r3, #0
 8008844:	d02a      	beq.n	800889c <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8008846:	69bb      	ldr	r3, [r7, #24]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800884c:	2100      	movs	r1, #0
 800884e:	6978      	ldr	r0, [r7, #20]
 8008850:	f004 fcbe 	bl	800d1d0 <tcp_arg>
    tcp_recv(pcb, NULL);
 8008854:	2100      	movs	r1, #0
 8008856:	6978      	ldr	r0, [r7, #20]
 8008858:	f004 fccc 	bl	800d1f4 <tcp_recv>
    tcp_sent(pcb, NULL);
 800885c:	2100      	movs	r1, #0
 800885e:	6978      	ldr	r0, [r7, #20]
 8008860:	f004 fcea 	bl	800d238 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8008864:	2200      	movs	r2, #0
 8008866:	2100      	movs	r1, #0
 8008868:	6978      	ldr	r0, [r7, #20]
 800886a:	f004 fd41 	bl	800d2f0 <tcp_poll>
    tcp_err(pcb, NULL);
 800886e:	2100      	movs	r1, #0
 8008870:	6978      	ldr	r0, [r7, #20]
 8008872:	f004 fd03 	bl	800d27c <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8008876:	69bb      	ldr	r3, [r7, #24]
 8008878:	2200      	movs	r2, #0
 800887a:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800887c:	69bb      	ldr	r3, [r7, #24]
 800887e:	3310      	adds	r3, #16
 8008880:	4618      	mov	r0, r3
 8008882:	f00e f91b 	bl	8016abc <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	3310      	adds	r3, #16
 800888a:	4618      	mov	r0, r3
 800888c:	f00e f9ae 	bl	8016bec <sys_mbox_set_invalid>
    netconn_free(newconn);
 8008890:	69b8      	ldr	r0, [r7, #24]
 8008892:	f000 f907 	bl	8008aa4 <netconn_free>
    return ERR_MEM;
 8008896:	f04f 33ff 	mov.w	r3, #4294967295
 800889a:	e00a      	b.n	80088b2 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800889c:	69fb      	ldr	r3, [r7, #28]
 800889e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d005      	beq.n	80088b0 <accept_function+0x160>
 80088a4:	69fb      	ldr	r3, [r7, #28]
 80088a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a8:	2200      	movs	r2, #0
 80088aa:	2100      	movs	r1, #0
 80088ac:	69f8      	ldr	r0, [r7, #28]
 80088ae:	4798      	blx	r3
  }

  return ERR_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3724      	adds	r7, #36	; 0x24
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd90      	pop	{r4, r7, pc}
 80088ba:	bf00      	nop
 80088bc:	080189d0 	.word	0x080189d0
 80088c0:	08018b8c 	.word	0x08018b8c
 80088c4:	08018a14 	.word	0x08018a14

080088c8 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 80088c8:	b590      	push	{r4, r7, lr}
 80088ca:	b085      	sub	sp, #20
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 80088d0:	2300      	movs	r3, #0
 80088d2:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d006      	beq.n	80088ec <pcb_new+0x24>
 80088de:	4b2b      	ldr	r3, [pc, #172]	; (800898c <pcb_new+0xc4>)
 80088e0:	f240 2265 	movw	r2, #613	; 0x265
 80088e4:	492a      	ldr	r1, [pc, #168]	; (8008990 <pcb_new+0xc8>)
 80088e6:	482b      	ldr	r0, [pc, #172]	; (8008994 <pcb_new+0xcc>)
 80088e8:	f00e fc5e 	bl	80171a8 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80088f6:	2b10      	cmp	r3, #16
 80088f8:	d022      	beq.n	8008940 <pcb_new+0x78>
 80088fa:	2b20      	cmp	r3, #32
 80088fc:	d133      	bne.n	8008966 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681c      	ldr	r4, [r3, #0]
 8008902:	7bfb      	ldrb	r3, [r7, #15]
 8008904:	4618      	mov	r0, r3
 8008906:	f009 ff06 	bl	8012716 <udp_new_ip_type>
 800890a:	4603      	mov	r3, r0
 800890c:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d02a      	beq.n	800896e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	2b22      	cmp	r3, #34	; 0x22
 8008920:	d104      	bne.n	800892c <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	2201      	movs	r2, #1
 800892a:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	6858      	ldr	r0, [r3, #4]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	461a      	mov	r2, r3
 8008938:	4917      	ldr	r1, [pc, #92]	; (8008998 <pcb_new+0xd0>)
 800893a:	f009 fe73 	bl	8012624 <udp_recv>
      }
      break;
 800893e:	e016      	b.n	800896e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681c      	ldr	r4, [r3, #0]
 8008944:	7bfb      	ldrb	r3, [r7, #15]
 8008946:	4618      	mov	r0, r3
 8008948:	f004 fc34 	bl	800d1b4 <tcp_new_ip_type>
 800894c:	4603      	mov	r3, r0
 800894e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d00b      	beq.n	8008972 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4618      	mov	r0, r3
 8008960:	f7ff fece 	bl	8008700 <setup_tcp>
      }
      break;
 8008964:	e005      	b.n	8008972 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	22fa      	movs	r2, #250	; 0xfa
 800896a:	711a      	strb	r2, [r3, #4]
      return;
 800896c:	e00a      	b.n	8008984 <pcb_new+0xbc>
      break;
 800896e:	bf00      	nop
 8008970:	e000      	b.n	8008974 <pcb_new+0xac>
      break;
 8008972:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d102      	bne.n	8008984 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	22ff      	movs	r2, #255	; 0xff
 8008982:	711a      	strb	r2, [r3, #4]
  }
}
 8008984:	3714      	adds	r7, #20
 8008986:	46bd      	mov	sp, r7
 8008988:	bd90      	pop	{r4, r7, pc}
 800898a:	bf00      	nop
 800898c:	080189d0 	.word	0x080189d0
 8008990:	08018bb4 	.word	0x08018bb4
 8008994:	08018a14 	.word	0x08018a14
 8008998:	080081dd 	.word	0x080081dd

0800899c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2200      	movs	r2, #0
 80089ac:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d102      	bne.n	80089be <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 80089b8:	68f8      	ldr	r0, [r7, #12]
 80089ba:	f7ff ff85 	bl	80088c8 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 80089be:	bf00      	nop
 80089c0:	3710      	adds	r7, #16
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
	...

080089c8 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b086      	sub	sp, #24
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	4603      	mov	r3, r0
 80089d0:	6039      	str	r1, [r7, #0]
 80089d2:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 80089d4:	2300      	movs	r3, #0
 80089d6:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 80089d8:	2007      	movs	r0, #7
 80089da:	f001 fe69 	bl	800a6b0 <memp_malloc>
 80089de:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d101      	bne.n	80089ea <netconn_alloc+0x22>
    return NULL;
 80089e6:	2300      	movs	r3, #0
 80089e8:	e052      	b.n	8008a90 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2200      	movs	r2, #0
 80089ee:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	79fa      	ldrb	r2, [r7, #7]
 80089f4:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2200      	movs	r2, #0
 80089fa:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 80089fc:	79fb      	ldrb	r3, [r7, #7]
 80089fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a02:	2b10      	cmp	r3, #16
 8008a04:	d004      	beq.n	8008a10 <netconn_alloc+0x48>
 8008a06:	2b20      	cmp	r3, #32
 8008a08:	d105      	bne.n	8008a16 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8008a0a:	2306      	movs	r3, #6
 8008a0c:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8008a0e:	e00a      	b.n	8008a26 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8008a10:	2306      	movs	r3, #6
 8008a12:	617b      	str	r3, [r7, #20]
      break;
 8008a14:	e007      	b.n	8008a26 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8008a16:	4b20      	ldr	r3, [pc, #128]	; (8008a98 <netconn_alloc+0xd0>)
 8008a18:	f240 22e5 	movw	r2, #741	; 0x2e5
 8008a1c:	491f      	ldr	r1, [pc, #124]	; (8008a9c <netconn_alloc+0xd4>)
 8008a1e:	4820      	ldr	r0, [pc, #128]	; (8008aa0 <netconn_alloc+0xd8>)
 8008a20:	f00e fbc2 	bl	80171a8 <iprintf>
      goto free_and_return;
 8008a24:	e02f      	b.n	8008a86 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	3310      	adds	r3, #16
 8008a2a:	6979      	ldr	r1, [r7, #20]
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f00e f823 	bl	8016a78 <sys_mbox_new>
 8008a32:	4603      	mov	r3, r0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d125      	bne.n	8008a84 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	330c      	adds	r3, #12
 8008a3c:	2100      	movs	r1, #0
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f00e f8e1 	bl	8016c06 <sys_sem_new>
 8008a44:	4603      	mov	r3, r0
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d005      	beq.n	8008a56 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	3310      	adds	r3, #16
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f00e f834 	bl	8016abc <sys_mbox_free>
    goto free_and_return;
 8008a54:	e017      	b.n	8008a86 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	3314      	adds	r3, #20
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f00e f8c6 	bl	8016bec <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2200      	movs	r2, #0
 8008a64:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f04f 32ff 	mov.w	r2, #4294967295
 8008a6c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	683a      	ldr	r2, [r7, #0]
 8008a72:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2200      	movs	r2, #0
 8008a78:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	7cfa      	ldrb	r2, [r7, #19]
 8008a7e:	771a      	strb	r2, [r3, #28]
  return conn;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	e005      	b.n	8008a90 <netconn_alloc+0xc8>
    goto free_and_return;
 8008a84:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8008a86:	68f9      	ldr	r1, [r7, #12]
 8008a88:	2007      	movs	r0, #7
 8008a8a:	f001 fe63 	bl	800a754 <memp_free>
  return NULL;
 8008a8e:	2300      	movs	r3, #0
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3718      	adds	r7, #24
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}
 8008a98:	080189d0 	.word	0x080189d0
 8008a9c:	08018bd4 	.word	0x08018bd4
 8008aa0:	08018a14 	.word	0x08018a14

08008aa4 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d006      	beq.n	8008ac2 <netconn_free+0x1e>
 8008ab4:	4b1b      	ldr	r3, [pc, #108]	; (8008b24 <netconn_free+0x80>)
 8008ab6:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008aba:	491b      	ldr	r1, [pc, #108]	; (8008b28 <netconn_free+0x84>)
 8008abc:	481b      	ldr	r0, [pc, #108]	; (8008b2c <netconn_free+0x88>)
 8008abe:	f00e fb73 	bl	80171a8 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	3310      	adds	r3, #16
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f00e f87f 	bl	8016bca <sys_mbox_valid>
 8008acc:	4603      	mov	r3, r0
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d006      	beq.n	8008ae0 <netconn_free+0x3c>
 8008ad2:	4b14      	ldr	r3, [pc, #80]	; (8008b24 <netconn_free+0x80>)
 8008ad4:	f240 3223 	movw	r2, #803	; 0x323
 8008ad8:	4915      	ldr	r1, [pc, #84]	; (8008b30 <netconn_free+0x8c>)
 8008ada:	4814      	ldr	r0, [pc, #80]	; (8008b2c <netconn_free+0x88>)
 8008adc:	f00e fb64 	bl	80171a8 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	3314      	adds	r3, #20
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f00e f870 	bl	8016bca <sys_mbox_valid>
 8008aea:	4603      	mov	r3, r0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d006      	beq.n	8008afe <netconn_free+0x5a>
 8008af0:	4b0c      	ldr	r3, [pc, #48]	; (8008b24 <netconn_free+0x80>)
 8008af2:	f240 3226 	movw	r2, #806	; 0x326
 8008af6:	490f      	ldr	r1, [pc, #60]	; (8008b34 <netconn_free+0x90>)
 8008af8:	480c      	ldr	r0, [pc, #48]	; (8008b2c <netconn_free+0x88>)
 8008afa:	f00e fb55 	bl	80171a8 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	330c      	adds	r3, #12
 8008b02:	4618      	mov	r0, r3
 8008b04:	f00e f8e5 	bl	8016cd2 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	330c      	adds	r3, #12
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f00e f8fe 	bl	8016d0e <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8008b12:	6879      	ldr	r1, [r7, #4]
 8008b14:	2007      	movs	r0, #7
 8008b16:	f001 fe1d 	bl	800a754 <memp_free>
}
 8008b1a:	bf00      	nop
 8008b1c:	3708      	adds	r7, #8
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	080189d0 	.word	0x080189d0
 8008b28:	08018bfc 	.word	0x08018bfc
 8008b2c:	08018a14 	.word	0x08018a14
 8008b30:	08018c2c 	.word	0x08018c2c
 8008b34:	08018c68 	.word	0x08018c68

08008b38 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b086      	sub	sp, #24
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	3310      	adds	r3, #16
 8008b44:	4618      	mov	r0, r3
 8008b46:	f00e f840 	bl	8016bca <sys_mbox_valid>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d02f      	beq.n	8008bb0 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8008b50:	e018      	b.n	8008b84 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b5a:	2b10      	cmp	r3, #16
 8008b5c:	d10e      	bne.n	8008b7c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	f107 020f 	add.w	r2, r7, #15
 8008b64:	4611      	mov	r1, r2
 8008b66:	4618      	mov	r0, r3
 8008b68:	f7ff fafe 	bl	8008168 <lwip_netconn_is_err_msg>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d108      	bne.n	8008b84 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	4618      	mov	r0, r3
 8008b76:	f002 fc9d 	bl	800b4b4 <pbuf_free>
 8008b7a:	e003      	b.n	8008b84 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f000 fe8e 	bl	80098a0 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	3310      	adds	r3, #16
 8008b88:	f107 0210 	add.w	r2, r7, #16
 8008b8c:	4611      	mov	r1, r2
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f00d ffff 	bl	8016b92 <sys_arch_mbox_tryfetch>
 8008b94:	4603      	mov	r3, r0
 8008b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b9a:	d1da      	bne.n	8008b52 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	3310      	adds	r3, #16
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f00d ff8b 	bl	8016abc <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	3310      	adds	r3, #16
 8008baa:	4618      	mov	r0, r3
 8008bac:	f00e f81e 	bl	8016bec <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	3314      	adds	r3, #20
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f00e f808 	bl	8016bca <sys_mbox_valid>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d034      	beq.n	8008c2a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8008bc0:	e01d      	b.n	8008bfe <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	f107 020e 	add.w	r2, r7, #14
 8008bc8:	4611      	mov	r1, r2
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7ff facc 	bl	8008168 <lwip_netconn_is_err_msg>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d113      	bne.n	8008bfe <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8008bda:	6978      	ldr	r0, [r7, #20]
 8008bdc:	f7ff ffac 	bl	8008b38 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d007      	beq.n	8008bf8 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	4618      	mov	r0, r3
 8008bee:	f003 fa61 	bl	800c0b4 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8008bf8:	6978      	ldr	r0, [r7, #20]
 8008bfa:	f7ff ff53 	bl	8008aa4 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	3314      	adds	r3, #20
 8008c02:	f107 0210 	add.w	r2, r7, #16
 8008c06:	4611      	mov	r1, r2
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f00d ffc2 	bl	8016b92 <sys_arch_mbox_tryfetch>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c14:	d1d5      	bne.n	8008bc2 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	3314      	adds	r3, #20
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f00d ff4e 	bl	8016abc <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	3314      	adds	r3, #20
 8008c24:	4618      	mov	r0, r3
 8008c26:	f00d ffe1 	bl	8016bec <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8008c2a:	bf00      	nop
 8008c2c:	3718      	adds	r7, #24
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
	...

08008c34 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b086      	sub	sp, #24
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8008c40:	2300      	movs	r3, #0
 8008c42:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d106      	bne.n	8008c58 <lwip_netconn_do_close_internal+0x24>
 8008c4a:	4ba1      	ldr	r3, [pc, #644]	; (8008ed0 <lwip_netconn_do_close_internal+0x29c>)
 8008c4c:	f240 32a2 	movw	r2, #930	; 0x3a2
 8008c50:	49a0      	ldr	r1, [pc, #640]	; (8008ed4 <lwip_netconn_do_close_internal+0x2a0>)
 8008c52:	48a1      	ldr	r0, [pc, #644]	; (8008ed8 <lwip_netconn_do_close_internal+0x2a4>)
 8008c54:	f00e faa8 	bl	80171a8 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c60:	2b10      	cmp	r3, #16
 8008c62:	d006      	beq.n	8008c72 <lwip_netconn_do_close_internal+0x3e>
 8008c64:	4b9a      	ldr	r3, [pc, #616]	; (8008ed0 <lwip_netconn_do_close_internal+0x29c>)
 8008c66:	f240 32a3 	movw	r2, #931	; 0x3a3
 8008c6a:	499c      	ldr	r1, [pc, #624]	; (8008edc <lwip_netconn_do_close_internal+0x2a8>)
 8008c6c:	489a      	ldr	r0, [pc, #616]	; (8008ed8 <lwip_netconn_do_close_internal+0x2a4>)
 8008c6e:	f00e fa9b 	bl	80171a8 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	785b      	ldrb	r3, [r3, #1]
 8008c76:	2b04      	cmp	r3, #4
 8008c78:	d006      	beq.n	8008c88 <lwip_netconn_do_close_internal+0x54>
 8008c7a:	4b95      	ldr	r3, [pc, #596]	; (8008ed0 <lwip_netconn_do_close_internal+0x29c>)
 8008c7c:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8008c80:	4997      	ldr	r1, [pc, #604]	; (8008ee0 <lwip_netconn_do_close_internal+0x2ac>)
 8008c82:	4895      	ldr	r0, [pc, #596]	; (8008ed8 <lwip_netconn_do_close_internal+0x2a4>)
 8008c84:	f00e fa90 	bl	80171a8 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d106      	bne.n	8008c9e <lwip_netconn_do_close_internal+0x6a>
 8008c90:	4b8f      	ldr	r3, [pc, #572]	; (8008ed0 <lwip_netconn_do_close_internal+0x29c>)
 8008c92:	f240 32a5 	movw	r2, #933	; 0x3a5
 8008c96:	4993      	ldr	r1, [pc, #588]	; (8008ee4 <lwip_netconn_do_close_internal+0x2b0>)
 8008c98:	488f      	ldr	r0, [pc, #572]	; (8008ed8 <lwip_netconn_do_close_internal+0x2a4>)
 8008c9a:	f00e fa85 	bl	80171a8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6a1b      	ldr	r3, [r3, #32]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d106      	bne.n	8008cb4 <lwip_netconn_do_close_internal+0x80>
 8008ca6:	4b8a      	ldr	r3, [pc, #552]	; (8008ed0 <lwip_netconn_do_close_internal+0x29c>)
 8008ca8:	f240 32a6 	movw	r2, #934	; 0x3a6
 8008cac:	498e      	ldr	r1, [pc, #568]	; (8008ee8 <lwip_netconn_do_close_internal+0x2b4>)
 8008cae:	488a      	ldr	r0, [pc, #552]	; (8008ed8 <lwip_netconn_do_close_internal+0x2a4>)
 8008cb0:	f00e fa7a 	bl	80171a8 <iprintf>

  tpcb = conn->pcb.tcp;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6a1b      	ldr	r3, [r3, #32]
 8008cbe:	7a1b      	ldrb	r3, [r3, #8]
 8008cc0:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8008cc2:	7bfb      	ldrb	r3, [r7, #15]
 8008cc4:	f003 0301 	and.w	r3, r3, #1
 8008cc8:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8008cca:	7bfb      	ldrb	r3, [r7, #15]
 8008ccc:	f003 0302 	and.w	r3, r3, #2
 8008cd0:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8008cd2:	7bfb      	ldrb	r3, [r7, #15]
 8008cd4:	2b03      	cmp	r3, #3
 8008cd6:	d102      	bne.n	8008cde <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	75bb      	strb	r3, [r7, #22]
 8008cdc:	e01f      	b.n	8008d1e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8008cde:	7bbb      	ldrb	r3, [r7, #14]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d00e      	beq.n	8008d02 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8008ce8:	2b05      	cmp	r3, #5
 8008cea:	d007      	beq.n	8008cfc <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8008cf0:	2b06      	cmp	r3, #6
 8008cf2:	d003      	beq.n	8008cfc <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8008cf8:	2b08      	cmp	r3, #8
 8008cfa:	d102      	bne.n	8008d02 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	75bb      	strb	r3, [r7, #22]
 8008d00:	e00d      	b.n	8008d1e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8008d02:	7b7b      	ldrb	r3, [r7, #13]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d008      	beq.n	8008d1a <lwip_netconn_do_close_internal+0xe6>
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	8b5b      	ldrh	r3, [r3, #26]
 8008d0c:	f003 0310 	and.w	r3, r3, #16
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d002      	beq.n	8008d1a <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8008d14:	2301      	movs	r3, #1
 8008d16:	75bb      	strb	r3, [r7, #22]
 8008d18:	e001      	b.n	8008d1e <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8008d1e:	7dbb      	ldrb	r3, [r7, #22]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d003      	beq.n	8008d2c <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8008d24:	2100      	movs	r1, #0
 8008d26:	6938      	ldr	r0, [r7, #16]
 8008d28:	f004 fa52 	bl	800d1d0 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	7d1b      	ldrb	r3, [r3, #20]
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d104      	bne.n	8008d3e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8008d34:	2100      	movs	r1, #0
 8008d36:	6938      	ldr	r0, [r7, #16]
 8008d38:	f004 fac2 	bl	800d2c0 <tcp_accept>
 8008d3c:	e01d      	b.n	8008d7a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8008d3e:	7bbb      	ldrb	r3, [r7, #14]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d007      	beq.n	8008d54 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8008d44:	2100      	movs	r1, #0
 8008d46:	6938      	ldr	r0, [r7, #16]
 8008d48:	f004 fa54 	bl	800d1f4 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	6938      	ldr	r0, [r7, #16]
 8008d50:	f004 fab6 	bl	800d2c0 <tcp_accept>
    }
    if (shut_tx) {
 8008d54:	7b7b      	ldrb	r3, [r7, #13]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d003      	beq.n	8008d62 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8008d5a:	2100      	movs	r1, #0
 8008d5c:	6938      	ldr	r0, [r7, #16]
 8008d5e:	f004 fa6b 	bl	800d238 <tcp_sent>
    }
    if (shut_close) {
 8008d62:	7dbb      	ldrb	r3, [r7, #22]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d008      	beq.n	8008d7a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8008d68:	2200      	movs	r2, #0
 8008d6a:	2100      	movs	r1, #0
 8008d6c:	6938      	ldr	r0, [r7, #16]
 8008d6e:	f004 fabf 	bl	800d2f0 <tcp_poll>
      tcp_err(tpcb, NULL);
 8008d72:	2100      	movs	r1, #0
 8008d74:	6938      	ldr	r0, [r7, #16]
 8008d76:	f004 fa81 	bl	800d27c <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8008d7a:	7dbb      	ldrb	r3, [r7, #22]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d005      	beq.n	8008d8c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8008d80:	6938      	ldr	r0, [r7, #16]
 8008d82:	f003 f851 	bl	800be28 <tcp_close>
 8008d86:	4603      	mov	r3, r0
 8008d88:	75fb      	strb	r3, [r7, #23]
 8008d8a:	e007      	b.n	8008d9c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8008d8c:	7bbb      	ldrb	r3, [r7, #14]
 8008d8e:	7b7a      	ldrb	r2, [r7, #13]
 8008d90:	4619      	mov	r1, r3
 8008d92:	6938      	ldr	r0, [r7, #16]
 8008d94:	f003 f874 	bl	800be80 <tcp_shutdown>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8008d9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d102      	bne.n	8008daa <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8008da4:	2301      	movs	r3, #1
 8008da6:	757b      	strb	r3, [r7, #21]
 8008da8:	e016      	b.n	8008dd8 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8008daa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008db2:	d10f      	bne.n	8008dd4 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6a1b      	ldr	r3, [r3, #32]
 8008db8:	7a5b      	ldrb	r3, [r3, #9]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d10c      	bne.n	8008dd8 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8008dc2:	7dbb      	ldrb	r3, [r7, #22]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d007      	beq.n	8008dd8 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8008dc8:	6938      	ldr	r0, [r7, #16]
 8008dca:	f003 f973 	bl	800c0b4 <tcp_abort>
          err = ERR_OK;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	75fb      	strb	r3, [r7, #23]
 8008dd2:	e001      	b.n	8008dd8 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8008dd8:	7d7b      	ldrb	r3, [r7, #21]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d044      	beq.n	8008e68 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6a1b      	ldr	r3, [r3, #32]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	330c      	adds	r3, #12
 8008de6:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6a1b      	ldr	r3, [r3, #32]
 8008dec:	7dfa      	ldrb	r2, [r7, #23]
 8008dee:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2200      	movs	r2, #0
 8008df4:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8008dfc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d129      	bne.n	8008e58 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8008e04:	7dbb      	ldrb	r3, [r7, #22]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d00c      	beq.n	8008e24 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d005      	beq.n	8008e24 <lwip_netconn_do_close_internal+0x1f0>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	2104      	movs	r1, #4
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	4798      	blx	r3
      }
      if (shut_rx) {
 8008e24:	7bbb      	ldrb	r3, [r7, #14]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d009      	beq.n	8008e3e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d005      	beq.n	8008e3e <lwip_netconn_do_close_internal+0x20a>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e36:	2200      	movs	r2, #0
 8008e38:	2100      	movs	r1, #0
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	4798      	blx	r3
      }
      if (shut_tx) {
 8008e3e:	7b7b      	ldrb	r3, [r7, #13]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d009      	beq.n	8008e58 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d005      	beq.n	8008e58 <lwip_netconn_do_close_internal+0x224>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e50:	2200      	movs	r2, #0
 8008e52:	2102      	movs	r1, #2
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8008e58:	78fb      	ldrb	r3, [r7, #3]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d002      	beq.n	8008e64 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8008e5e:	68b8      	ldr	r0, [r7, #8]
 8008e60:	f00d ff2a 	bl	8016cb8 <sys_sem_signal>
    }
    return ERR_OK;
 8008e64:	2300      	movs	r3, #0
 8008e66:	e02e      	b.n	8008ec6 <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 8008e68:	7d7b      	ldrb	r3, [r7, #21]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d11e      	bne.n	8008eac <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	7d1b      	ldrb	r3, [r3, #20]
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d106      	bne.n	8008e84 <lwip_netconn_do_close_internal+0x250>
 8008e76:	4b16      	ldr	r3, [pc, #88]	; (8008ed0 <lwip_netconn_do_close_internal+0x29c>)
 8008e78:	f240 4241 	movw	r2, #1089	; 0x441
 8008e7c:	491b      	ldr	r1, [pc, #108]	; (8008eec <lwip_netconn_do_close_internal+0x2b8>)
 8008e7e:	4816      	ldr	r0, [pc, #88]	; (8008ed8 <lwip_netconn_do_close_internal+0x2a4>)
 8008e80:	f00e f992 	bl	80171a8 <iprintf>
    if (shut_tx) {
 8008e84:	7b7b      	ldrb	r3, [r7, #13]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d003      	beq.n	8008e92 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 8008e8a:	4919      	ldr	r1, [pc, #100]	; (8008ef0 <lwip_netconn_do_close_internal+0x2bc>)
 8008e8c:	6938      	ldr	r0, [r7, #16]
 8008e8e:	f004 f9d3 	bl	800d238 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8008e92:	2201      	movs	r2, #1
 8008e94:	4917      	ldr	r1, [pc, #92]	; (8008ef4 <lwip_netconn_do_close_internal+0x2c0>)
 8008e96:	6938      	ldr	r0, [r7, #16]
 8008e98:	f004 fa2a 	bl	800d2f0 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8008e9c:	4916      	ldr	r1, [pc, #88]	; (8008ef8 <lwip_netconn_do_close_internal+0x2c4>)
 8008e9e:	6938      	ldr	r0, [r7, #16]
 8008ea0:	f004 f9ec 	bl	800d27c <tcp_err>
    tcp_arg(tpcb, conn);
 8008ea4:	6879      	ldr	r1, [r7, #4]
 8008ea6:	6938      	ldr	r0, [r7, #16]
 8008ea8:	f004 f992 	bl	800d1d0 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8008eac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d106      	bne.n	8008ec2 <lwip_netconn_do_close_internal+0x28e>
 8008eb4:	4b06      	ldr	r3, [pc, #24]	; (8008ed0 <lwip_netconn_do_close_internal+0x29c>)
 8008eb6:	f240 424d 	movw	r2, #1101	; 0x44d
 8008eba:	4910      	ldr	r1, [pc, #64]	; (8008efc <lwip_netconn_do_close_internal+0x2c8>)
 8008ebc:	4806      	ldr	r0, [pc, #24]	; (8008ed8 <lwip_netconn_do_close_internal+0x2a4>)
 8008ebe:	f00e f973 	bl	80171a8 <iprintf>
  return err;
 8008ec2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3718      	adds	r7, #24
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
 8008ece:	bf00      	nop
 8008ed0:	080189d0 	.word	0x080189d0
 8008ed4:	08018ca4 	.word	0x08018ca4
 8008ed8:	08018a14 	.word	0x08018a14
 8008edc:	08018cb4 	.word	0x08018cb4
 8008ee0:	08018cd4 	.word	0x08018cd4
 8008ee4:	08018cf8 	.word	0x08018cf8
 8008ee8:	08018b38 	.word	0x08018b38
 8008eec:	08018d0c 	.word	0x08018d0c
 8008ef0:	080084ad 	.word	0x080084ad
 8008ef4:	080083e5 	.word	0x080083e5
 8008ef8:	08008555 	.word	0x08008555
 8008efc:	08018d30 	.word	0x08018d30

08008f00 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	785b      	ldrb	r3, [r3, #1]
 8008f12:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8008f14:	7afb      	ldrb	r3, [r7, #11]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d00d      	beq.n	8008f36 <lwip_netconn_do_delconn+0x36>
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	781b      	ldrb	r3, [r3, #0]
 8008f20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f24:	2b10      	cmp	r3, #16
 8008f26:	d006      	beq.n	8008f36 <lwip_netconn_do_delconn+0x36>
 8008f28:	4b60      	ldr	r3, [pc, #384]	; (80090ac <lwip_netconn_do_delconn+0x1ac>)
 8008f2a:	f240 425e 	movw	r2, #1118	; 0x45e
 8008f2e:	4960      	ldr	r1, [pc, #384]	; (80090b0 <lwip_netconn_do_delconn+0x1b0>)
 8008f30:	4860      	ldr	r0, [pc, #384]	; (80090b4 <lwip_netconn_do_delconn+0x1b4>)
 8008f32:	f00e f939 	bl	80171a8 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8008f36:	7afb      	ldrb	r3, [r7, #11]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d005      	beq.n	8008f48 <lwip_netconn_do_delconn+0x48>
 8008f3c:	7afb      	ldrb	r3, [r7, #11]
 8008f3e:	2b02      	cmp	r3, #2
 8008f40:	d002      	beq.n	8008f48 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8008f42:	7afb      	ldrb	r3, [r7, #11]
 8008f44:	2b03      	cmp	r3, #3
 8008f46:	d109      	bne.n	8008f5c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8008f48:	7afb      	ldrb	r3, [r7, #11]
 8008f4a:	2b03      	cmp	r3, #3
 8008f4c:	d10a      	bne.n	8008f64 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	7f1b      	ldrb	r3, [r3, #28]
 8008f54:	f003 0304 	and.w	r3, r3, #4
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d103      	bne.n	8008f64 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	22fb      	movs	r2, #251	; 0xfb
 8008f60:	711a      	strb	r2, [r3, #4]
 8008f62:	e097      	b.n	8009094 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8008f64:	7afb      	ldrb	r3, [r7, #11]
 8008f66:	2b03      	cmp	r3, #3
 8008f68:	d10d      	bne.n	8008f86 <lwip_netconn_do_delconn+0x86>
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	7f1b      	ldrb	r3, [r3, #28]
 8008f70:	f003 0304 	and.w	r3, r3, #4
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d106      	bne.n	8008f86 <lwip_netconn_do_delconn+0x86>
 8008f78:	4b4c      	ldr	r3, [pc, #304]	; (80090ac <lwip_netconn_do_delconn+0x1ac>)
 8008f7a:	f240 427a 	movw	r2, #1146	; 0x47a
 8008f7e:	494e      	ldr	r1, [pc, #312]	; (80090b8 <lwip_netconn_do_delconn+0x1b8>)
 8008f80:	484c      	ldr	r0, [pc, #304]	; (80090b4 <lwip_netconn_do_delconn+0x1b4>)
 8008f82:	f00e f911 	bl	80171a8 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4618      	mov	r0, r3
 8008f92:	f7ff fdd1 	bl	8008b38 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d05f      	beq.n	8009060 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008faa:	2b10      	cmp	r3, #16
 8008fac:	d00d      	beq.n	8008fca <lwip_netconn_do_delconn+0xca>
 8008fae:	2b20      	cmp	r3, #32
 8008fb0:	d151      	bne.n	8009056 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f009 fb4e 	bl	8012664 <udp_remove>
          break;
 8008fc8:	e046      	b.n	8009058 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	6a1b      	ldr	r3, [r3, #32]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d006      	beq.n	8008fe2 <lwip_netconn_do_delconn+0xe2>
 8008fd4:	4b35      	ldr	r3, [pc, #212]	; (80090ac <lwip_netconn_do_delconn+0x1ac>)
 8008fd6:	f240 4294 	movw	r2, #1172	; 0x494
 8008fda:	4938      	ldr	r1, [pc, #224]	; (80090bc <lwip_netconn_do_delconn+0x1bc>)
 8008fdc:	4835      	ldr	r0, [pc, #212]	; (80090b4 <lwip_netconn_do_delconn+0x1b4>)
 8008fde:	f00e f8e3 	bl	80171a8 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	2204      	movs	r2, #4
 8008fe8:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2203      	movs	r2, #3
 8008fee:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	68fa      	ldr	r2, [r7, #12]
 8008ff6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	2100      	movs	r1, #0
 8008ffe:	4618      	mov	r0, r3
 8009000:	f7ff fe18 	bl	8008c34 <lwip_netconn_do_close_internal>
 8009004:	4603      	mov	r3, r0
 8009006:	2b00      	cmp	r3, #0
 8009008:	d04b      	beq.n	80090a2 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	785b      	ldrb	r3, [r3, #1]
 8009010:	2b04      	cmp	r3, #4
 8009012:	d006      	beq.n	8009022 <lwip_netconn_do_delconn+0x122>
 8009014:	4b25      	ldr	r3, [pc, #148]	; (80090ac <lwip_netconn_do_delconn+0x1ac>)
 8009016:	f240 429a 	movw	r2, #1178	; 0x49a
 800901a:	4929      	ldr	r1, [pc, #164]	; (80090c0 <lwip_netconn_do_delconn+0x1c0>)
 800901c:	4825      	ldr	r0, [pc, #148]	; (80090b4 <lwip_netconn_do_delconn+0x1b4>)
 800901e:	f00e f8c3 	bl	80171a8 <iprintf>
            UNLOCK_TCPIP_CORE();
 8009022:	4828      	ldr	r0, [pc, #160]	; (80090c4 <lwip_netconn_do_delconn+0x1c4>)
 8009024:	f00d feb9 	bl	8016d9a <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	330c      	adds	r3, #12
 800902e:	2100      	movs	r1, #0
 8009030:	4618      	mov	r0, r3
 8009032:	f00d fe10 	bl	8016c56 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8009036:	4823      	ldr	r0, [pc, #140]	; (80090c4 <lwip_netconn_do_delconn+0x1c4>)
 8009038:	f00d fea0 	bl	8016d7c <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	785b      	ldrb	r3, [r3, #1]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d02d      	beq.n	80090a2 <lwip_netconn_do_delconn+0x1a2>
 8009046:	4b19      	ldr	r3, [pc, #100]	; (80090ac <lwip_netconn_do_delconn+0x1ac>)
 8009048:	f240 429e 	movw	r2, #1182	; 0x49e
 800904c:	491c      	ldr	r1, [pc, #112]	; (80090c0 <lwip_netconn_do_delconn+0x1c0>)
 800904e:	4819      	ldr	r0, [pc, #100]	; (80090b4 <lwip_netconn_do_delconn+0x1b4>)
 8009050:	f00e f8aa 	bl	80171a8 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8009054:	e025      	b.n	80090a2 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8009056:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2200      	movs	r2, #0
 800905e:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009066:	2b00      	cmp	r3, #0
 8009068:	d007      	beq.n	800907a <lwip_netconn_do_delconn+0x17a>
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009070:	68fa      	ldr	r2, [r7, #12]
 8009072:	6810      	ldr	r0, [r2, #0]
 8009074:	2200      	movs	r2, #0
 8009076:	2100      	movs	r1, #0
 8009078:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009080:	2b00      	cmp	r3, #0
 8009082:	d007      	beq.n	8009094 <lwip_netconn_do_delconn+0x194>
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908a:	68fa      	ldr	r2, [r7, #12]
 800908c:	6810      	ldr	r0, [r2, #0]
 800908e:	2200      	movs	r2, #0
 8009090:	2102      	movs	r1, #2
 8009092:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	330c      	adds	r3, #12
 800909a:	4618      	mov	r0, r3
 800909c:	f00d fe26 	bl	8016cec <sys_sem_valid>
 80090a0:	e000      	b.n	80090a4 <lwip_netconn_do_delconn+0x1a4>
          return;
 80090a2:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 80090a4:	3710      	adds	r7, #16
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
 80090aa:	bf00      	nop
 80090ac:	080189d0 	.word	0x080189d0
 80090b0:	08018d40 	.word	0x08018d40
 80090b4:	08018a14 	.word	0x08018a14
 80090b8:	08018d54 	.word	0x08018d54
 80090bc:	08018d74 	.word	0x08018d74
 80090c0:	08018d90 	.word	0x08018d90
 80090c4:	2000b8a4 	.word	0x2000b8a4

080090c8 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b084      	sub	sp, #16
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d025      	beq.n	800912a <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80090e8:	2b10      	cmp	r3, #16
 80090ea:	d00e      	beq.n	800910a <lwip_netconn_do_bind+0x42>
 80090ec:	2b20      	cmp	r3, #32
 80090ee:	d119      	bne.n	8009124 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	6858      	ldr	r0, [r3, #4]
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	6899      	ldr	r1, [r3, #8]
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	899b      	ldrh	r3, [r3, #12]
 80090fe:	461a      	mov	r2, r3
 8009100:	f009 f99a 	bl	8012438 <udp_bind>
 8009104:	4603      	mov	r3, r0
 8009106:	73fb      	strb	r3, [r7, #15]
        break;
 8009108:	e011      	b.n	800912e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	6858      	ldr	r0, [r3, #4]
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	6899      	ldr	r1, [r3, #8]
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	899b      	ldrh	r3, [r3, #12]
 8009118:	461a      	mov	r2, r3
 800911a:	f002 ffd7 	bl	800c0cc <tcp_bind>
 800911e:	4603      	mov	r3, r0
 8009120:	73fb      	strb	r3, [r7, #15]
        break;
 8009122:	e004      	b.n	800912e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8009124:	23fa      	movs	r3, #250	; 0xfa
 8009126:	73fb      	strb	r3, [r7, #15]
        break;
 8009128:	e001      	b.n	800912e <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800912a:	23fa      	movs	r3, #250	; 0xfa
 800912c:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	7bfa      	ldrb	r2, [r7, #15]
 8009132:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8009134:	bf00      	nop
 8009136:	3710      	adds	r7, #16
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b086      	sub	sp, #24
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d07f      	beq.n	8009252 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800915c:	2b10      	cmp	r3, #16
 800915e:	d175      	bne.n	800924c <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	785b      	ldrb	r3, [r3, #1]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d165      	bne.n	8009236 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	7d1b      	ldrb	r3, [r3, #20]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d002      	beq.n	800917c <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 8009176:	23fa      	movs	r3, #250	; 0xfa
 8009178:	72fb      	strb	r3, [r7, #11]
 800917a:	e06c      	b.n	8009256 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800917c:	23ff      	movs	r3, #255	; 0xff
 800917e:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	f107 020b 	add.w	r2, r7, #11
 800918a:	7cf9      	ldrb	r1, [r7, #19]
 800918c:	4618      	mov	r0, r3
 800918e:	f003 f855 	bl	800c23c <tcp_listen_with_backlog_and_err>
 8009192:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d05d      	beq.n	8009256 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	3310      	adds	r3, #16
 80091a0:	4618      	mov	r0, r3
 80091a2:	f00d fd12 	bl	8016bca <sys_mbox_valid>
 80091a6:	4603      	mov	r3, r0
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d00b      	beq.n	80091c4 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	3310      	adds	r3, #16
 80091b2:	4618      	mov	r0, r3
 80091b4:	f00d fc82 	bl	8016abc <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	3310      	adds	r3, #16
 80091be:	4618      	mov	r0, r3
 80091c0:	f00d fd14 	bl	8016bec <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 80091c4:	2300      	movs	r3, #0
 80091c6:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	3314      	adds	r3, #20
 80091ce:	4618      	mov	r0, r3
 80091d0:	f00d fcfb 	bl	8016bca <sys_mbox_valid>
 80091d4:	4603      	mov	r3, r0
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d108      	bne.n	80091ec <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	3314      	adds	r3, #20
 80091e0:	2106      	movs	r1, #6
 80091e2:	4618      	mov	r0, r3
 80091e4:	f00d fc48 	bl	8016a78 <sys_mbox_new>
 80091e8:	4603      	mov	r3, r0
 80091ea:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 80091ec:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d118      	bne.n	8009226 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2202      	movs	r2, #2
 80091fa:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	68fa      	ldr	r2, [r7, #12]
 8009202:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	685a      	ldr	r2, [r3, #4]
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	4619      	mov	r1, r3
 8009210:	4610      	mov	r0, r2
 8009212:	f003 ffdd 	bl	800d1d0 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	4912      	ldr	r1, [pc, #72]	; (8009268 <lwip_netconn_do_listen+0x12c>)
 800921e:	4618      	mov	r0, r3
 8009220:	f004 f84e 	bl	800d2c0 <tcp_accept>
 8009224:	e017      	b.n	8009256 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 8009226:	68f8      	ldr	r0, [r7, #12]
 8009228:	f002 fdfe 	bl	800be28 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2200      	movs	r2, #0
 8009232:	605a      	str	r2, [r3, #4]
 8009234:	e00f      	b.n	8009256 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	785b      	ldrb	r3, [r3, #1]
 800923c:	2b02      	cmp	r3, #2
 800923e:	d102      	bne.n	8009246 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 8009240:	2300      	movs	r3, #0
 8009242:	72fb      	strb	r3, [r7, #11]
 8009244:	e007      	b.n	8009256 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 8009246:	23f5      	movs	r3, #245	; 0xf5
 8009248:	72fb      	strb	r3, [r7, #11]
 800924a:	e004      	b.n	8009256 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800924c:	23f0      	movs	r3, #240	; 0xf0
 800924e:	72fb      	strb	r3, [r7, #11]
 8009250:	e001      	b.n	8009256 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 8009252:	23f5      	movs	r3, #245	; 0xf5
 8009254:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 8009256:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800925e:	bf00      	nop
 8009260:	3718      	adds	r7, #24
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	08008751 	.word	0x08008751

0800926c <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b086      	sub	sp, #24
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	2200      	movs	r2, #0
 800927c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d022      	beq.n	80092ce <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009292:	2b10      	cmp	r3, #16
 8009294:	d11b      	bne.n	80092ce <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	689b      	ldr	r3, [r3, #8]
 800929a:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092a2:	d202      	bcs.n	80092aa <lwip_netconn_do_recv+0x3e>
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	e001      	b.n	80092ae <lwip_netconn_do_recv+0x42>
 80092aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80092ae:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	89fa      	ldrh	r2, [r7, #14]
 80092b8:	4611      	mov	r1, r2
 80092ba:	4618      	mov	r0, r3
 80092bc:	f003 f8c2 	bl	800c444 <tcp_recved>
        remaining -= recved;
 80092c0:	89fb      	ldrh	r3, [r7, #14]
 80092c2:	697a      	ldr	r2, [r7, #20]
 80092c4:	1ad3      	subs	r3, r2, r3
 80092c6:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d1e6      	bne.n	800929c <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 80092ce:	bf00      	nop
 80092d0:	3718      	adds	r7, #24
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
	...

080092d8 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b088      	sub	sp, #32
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	460b      	mov	r3, r1
 80092e2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 80092e4:	2300      	movs	r3, #0
 80092e6:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d106      	bne.n	80092fc <lwip_netconn_do_writemore+0x24>
 80092ee:	4b96      	ldr	r3, [pc, #600]	; (8009548 <lwip_netconn_do_writemore+0x270>)
 80092f0:	f240 6273 	movw	r2, #1651	; 0x673
 80092f4:	4995      	ldr	r1, [pc, #596]	; (800954c <lwip_netconn_do_writemore+0x274>)
 80092f6:	4896      	ldr	r0, [pc, #600]	; (8009550 <lwip_netconn_do_writemore+0x278>)
 80092f8:	f00d ff56 	bl	80171a8 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	785b      	ldrb	r3, [r3, #1]
 8009300:	2b01      	cmp	r3, #1
 8009302:	d006      	beq.n	8009312 <lwip_netconn_do_writemore+0x3a>
 8009304:	4b90      	ldr	r3, [pc, #576]	; (8009548 <lwip_netconn_do_writemore+0x270>)
 8009306:	f240 6274 	movw	r2, #1652	; 0x674
 800930a:	4992      	ldr	r1, [pc, #584]	; (8009554 <lwip_netconn_do_writemore+0x27c>)
 800930c:	4890      	ldr	r0, [pc, #576]	; (8009550 <lwip_netconn_do_writemore+0x278>)
 800930e:	f00d ff4b 	bl	80171a8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6a1b      	ldr	r3, [r3, #32]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d106      	bne.n	8009328 <lwip_netconn_do_writemore+0x50>
 800931a:	4b8b      	ldr	r3, [pc, #556]	; (8009548 <lwip_netconn_do_writemore+0x270>)
 800931c:	f240 6275 	movw	r2, #1653	; 0x675
 8009320:	498d      	ldr	r1, [pc, #564]	; (8009558 <lwip_netconn_do_writemore+0x280>)
 8009322:	488b      	ldr	r0, [pc, #556]	; (8009550 <lwip_netconn_do_writemore+0x278>)
 8009324:	f00d ff40 	bl	80171a8 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d106      	bne.n	800933e <lwip_netconn_do_writemore+0x66>
 8009330:	4b85      	ldr	r3, [pc, #532]	; (8009548 <lwip_netconn_do_writemore+0x270>)
 8009332:	f240 6276 	movw	r2, #1654	; 0x676
 8009336:	4989      	ldr	r1, [pc, #548]	; (800955c <lwip_netconn_do_writemore+0x284>)
 8009338:	4885      	ldr	r0, [pc, #532]	; (8009550 <lwip_netconn_do_writemore+0x278>)
 800933a:	f00d ff35 	bl	80171a8 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6a1b      	ldr	r3, [r3, #32]
 8009342:	699a      	ldr	r2, [r3, #24]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6a1b      	ldr	r3, [r3, #32]
 8009348:	695b      	ldr	r3, [r3, #20]
 800934a:	429a      	cmp	r2, r3
 800934c:	d306      	bcc.n	800935c <lwip_netconn_do_writemore+0x84>
 800934e:	4b7e      	ldr	r3, [pc, #504]	; (8009548 <lwip_netconn_do_writemore+0x270>)
 8009350:	f240 6277 	movw	r2, #1655	; 0x677
 8009354:	4982      	ldr	r1, [pc, #520]	; (8009560 <lwip_netconn_do_writemore+0x288>)
 8009356:	487e      	ldr	r0, [pc, #504]	; (8009550 <lwip_netconn_do_writemore+0x278>)
 8009358:	f00d ff26 	bl	80171a8 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6a1b      	ldr	r3, [r3, #32]
 8009360:	899b      	ldrh	r3, [r3, #12]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d106      	bne.n	8009374 <lwip_netconn_do_writemore+0x9c>
 8009366:	4b78      	ldr	r3, [pc, #480]	; (8009548 <lwip_netconn_do_writemore+0x270>)
 8009368:	f240 6279 	movw	r2, #1657	; 0x679
 800936c:	497d      	ldr	r1, [pc, #500]	; (8009564 <lwip_netconn_do_writemore+0x28c>)
 800936e:	4878      	ldr	r0, [pc, #480]	; (8009550 <lwip_netconn_do_writemore+0x278>)
 8009370:	f00d ff1a 	bl	80171a8 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6a1b      	ldr	r3, [r3, #32]
 8009378:	7f1b      	ldrb	r3, [r3, #28]
 800937a:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	7f1b      	ldrb	r3, [r3, #28]
 8009380:	f003 0302 	and.w	r3, r3, #2
 8009384:	2b00      	cmp	r3, #0
 8009386:	d104      	bne.n	8009392 <lwip_netconn_do_writemore+0xba>
 8009388:	7ebb      	ldrb	r3, [r7, #26]
 800938a:	f003 0304 	and.w	r3, r3, #4
 800938e:	2b00      	cmp	r3, #0
 8009390:	d001      	beq.n	8009396 <lwip_netconn_do_writemore+0xbe>
 8009392:	2301      	movs	r3, #1
 8009394:	e000      	b.n	8009398 <lwip_netconn_do_writemore+0xc0>
 8009396:	2300      	movs	r3, #0
 8009398:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6a1b      	ldr	r3, [r3, #32]
 800939e:	689b      	ldr	r3, [r3, #8]
 80093a0:	681a      	ldr	r2, [r3, #0]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6a1b      	ldr	r3, [r3, #32]
 80093a6:	691b      	ldr	r3, [r3, #16]
 80093a8:	4413      	add	r3, r2
 80093aa:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6a1b      	ldr	r3, [r3, #32]
 80093b0:	689b      	ldr	r3, [r3, #8]
 80093b2:	685a      	ldr	r2, [r3, #4]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6a1b      	ldr	r3, [r3, #32]
 80093b8:	691b      	ldr	r3, [r3, #16]
 80093ba:	1ad3      	subs	r3, r2, r3
 80093bc:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093c4:	d307      	bcc.n	80093d6 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 80093c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80093ca:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80093cc:	7ebb      	ldrb	r3, [r7, #26]
 80093ce:	f043 0302 	orr.w	r3, r3, #2
 80093d2:	76bb      	strb	r3, [r7, #26]
 80093d4:	e001      	b.n	80093da <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80093e2:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 80093e4:	89fa      	ldrh	r2, [r7, #14]
 80093e6:	8bbb      	ldrh	r3, [r7, #28]
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d216      	bcs.n	800941a <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 80093ec:	89fb      	ldrh	r3, [r7, #14]
 80093ee:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 80093f0:	7e3b      	ldrb	r3, [r7, #24]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d00d      	beq.n	8009412 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 80093f6:	8bbb      	ldrh	r3, [r7, #28]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d10e      	bne.n	800941a <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6a1b      	ldr	r3, [r3, #32]
 8009400:	699b      	ldr	r3, [r3, #24]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d102      	bne.n	800940c <lwip_netconn_do_writemore+0x134>
 8009406:	f06f 0306 	mvn.w	r3, #6
 800940a:	e000      	b.n	800940e <lwip_netconn_do_writemore+0x136>
 800940c:	2300      	movs	r3, #0
 800940e:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8009410:	e07d      	b.n	800950e <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8009412:	7ebb      	ldrb	r3, [r7, #26]
 8009414:	f043 0302 	orr.w	r3, r3, #2
 8009418:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6a1b      	ldr	r3, [r3, #32]
 800941e:	691a      	ldr	r2, [r3, #16]
 8009420:	8bbb      	ldrh	r3, [r7, #28]
 8009422:	441a      	add	r2, r3
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6a1b      	ldr	r3, [r3, #32]
 8009428:	689b      	ldr	r3, [r3, #8]
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	429a      	cmp	r2, r3
 800942e:	d906      	bls.n	800943e <lwip_netconn_do_writemore+0x166>
 8009430:	4b45      	ldr	r3, [pc, #276]	; (8009548 <lwip_netconn_do_writemore+0x270>)
 8009432:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8009436:	494c      	ldr	r1, [pc, #304]	; (8009568 <lwip_netconn_do_writemore+0x290>)
 8009438:	4845      	ldr	r0, [pc, #276]	; (8009550 <lwip_netconn_do_writemore+0x278>)
 800943a:	f00d feb5 	bl	80171a8 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800943e:	8bbb      	ldrh	r3, [r7, #28]
 8009440:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009444:	4293      	cmp	r3, r2
 8009446:	d103      	bne.n	8009450 <lwip_netconn_do_writemore+0x178>
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800944e:	d209      	bcs.n	8009464 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8009454:	8bba      	ldrh	r2, [r7, #28]
 8009456:	429a      	cmp	r2, r3
 8009458:	d10b      	bne.n	8009472 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6a1b      	ldr	r3, [r3, #32]
 800945e:	899b      	ldrh	r3, [r3, #12]
 8009460:	2b01      	cmp	r3, #1
 8009462:	d906      	bls.n	8009472 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8009464:	2301      	movs	r3, #1
 8009466:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009468:	7ebb      	ldrb	r3, [r7, #26]
 800946a:	f043 0302 	orr.w	r3, r3, #2
 800946e:	76bb      	strb	r3, [r7, #26]
 8009470:	e001      	b.n	8009476 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 8009472:	2300      	movs	r3, #0
 8009474:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6858      	ldr	r0, [r3, #4]
 800947a:	7ebb      	ldrb	r3, [r7, #26]
 800947c:	8bba      	ldrh	r2, [r7, #28]
 800947e:	6979      	ldr	r1, [r7, #20]
 8009480:	f006 fde4 	bl	801004c <tcp_write>
 8009484:	4603      	mov	r3, r0
 8009486:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8009488:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d12c      	bne.n	80094ea <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6a1b      	ldr	r3, [r3, #32]
 8009494:	6999      	ldr	r1, [r3, #24]
 8009496:	8bba      	ldrh	r2, [r7, #28]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6a1b      	ldr	r3, [r3, #32]
 800949c:	440a      	add	r2, r1
 800949e:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6a1b      	ldr	r3, [r3, #32]
 80094a4:	6919      	ldr	r1, [r3, #16]
 80094a6:	8bba      	ldrh	r2, [r7, #28]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6a1b      	ldr	r3, [r3, #32]
 80094ac:	440a      	add	r2, r1
 80094ae:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6a1b      	ldr	r3, [r3, #32]
 80094b4:	691a      	ldr	r2, [r3, #16]
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6a1b      	ldr	r3, [r3, #32]
 80094ba:	689b      	ldr	r3, [r3, #8]
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	429a      	cmp	r2, r3
 80094c0:	d113      	bne.n	80094ea <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6a1b      	ldr	r3, [r3, #32]
 80094c6:	899a      	ldrh	r2, [r3, #12]
 80094c8:	3a01      	subs	r2, #1
 80094ca:	b292      	uxth	r2, r2
 80094cc:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6a1b      	ldr	r3, [r3, #32]
 80094d2:	899b      	ldrh	r3, [r3, #12]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d008      	beq.n	80094ea <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6a1b      	ldr	r3, [r3, #32]
 80094dc:	689a      	ldr	r2, [r3, #8]
 80094de:	3208      	adds	r2, #8
 80094e0:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6a1b      	ldr	r3, [r3, #32]
 80094e6:	2200      	movs	r2, #0
 80094e8:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 80094ea:	7e7b      	ldrb	r3, [r7, #25]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d004      	beq.n	80094fa <lwip_netconn_do_writemore+0x222>
 80094f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	f43f af50 	beq.w	800939a <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 80094fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d004      	beq.n	800950c <lwip_netconn_do_writemore+0x234>
 8009502:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800950a:	d146      	bne.n	800959a <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800950c:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800950e:	7e3b      	ldrb	r3, [r7, #24]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d02b      	beq.n	800956c <lwip_netconn_do_writemore+0x294>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6a1b      	ldr	r3, [r3, #32]
 8009518:	699a      	ldr	r2, [r3, #24]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6a1b      	ldr	r3, [r3, #32]
 800951e:	695b      	ldr	r3, [r3, #20]
 8009520:	429a      	cmp	r2, r3
 8009522:	d223      	bcs.n	800956c <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009528:	2b00      	cmp	r3, #0
 800952a:	d005      	beq.n	8009538 <lwip_netconn_do_writemore+0x260>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009530:	2200      	movs	r2, #0
 8009532:	2103      	movs	r1, #3
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	7f1b      	ldrb	r3, [r3, #28]
 800953c:	f043 0310 	orr.w	r3, r3, #16
 8009540:	b2da      	uxtb	r2, r3
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	771a      	strb	r2, [r3, #28]
 8009546:	e028      	b.n	800959a <lwip_netconn_do_writemore+0x2c2>
 8009548:	080189d0 	.word	0x080189d0
 800954c:	08018b28 	.word	0x08018b28
 8009550:	08018a14 	.word	0x08018a14
 8009554:	08018e30 	.word	0x08018e30
 8009558:	08018b38 	.word	0x08018b38
 800955c:	08018e50 	.word	0x08018e50
 8009560:	08018e68 	.word	0x08018e68
 8009564:	08018ea8 	.word	0x08018ea8
 8009568:	08018ed0 	.word	0x08018ed0
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009574:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009578:	d305      	bcc.n	8009586 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009582:	2b04      	cmp	r3, #4
 8009584:	d909      	bls.n	800959a <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800958a:	2b00      	cmp	r3, #0
 800958c:	d005      	beq.n	800959a <lwip_netconn_do_writemore+0x2c2>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009592:	2200      	movs	r2, #0
 8009594:	2103      	movs	r1, #3
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800959a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d11d      	bne.n	80095de <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6a1b      	ldr	r3, [r3, #32]
 80095a6:	699a      	ldr	r2, [r3, #24]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6a1b      	ldr	r3, [r3, #32]
 80095ac:	695b      	ldr	r3, [r3, #20]
 80095ae:	429a      	cmp	r2, r3
 80095b0:	d002      	beq.n	80095b8 <lwip_netconn_do_writemore+0x2e0>
 80095b2:	7e3b      	ldrb	r3, [r7, #24]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d001      	beq.n	80095bc <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 80095b8:	2301      	movs	r3, #1
 80095ba:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	4618      	mov	r0, r3
 80095c2:	f007 fb2d 	bl	8010c20 <tcp_output>
 80095c6:	4603      	mov	r3, r0
 80095c8:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 80095ca:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80095ce:	f113 0f04 	cmn.w	r3, #4
 80095d2:	d12c      	bne.n	800962e <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 80095d4:	7b3b      	ldrb	r3, [r7, #12]
 80095d6:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80095d8:	2301      	movs	r3, #1
 80095da:	76fb      	strb	r3, [r7, #27]
 80095dc:	e027      	b.n	800962e <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 80095de:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80095e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095e6:	d120      	bne.n	800962a <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	4618      	mov	r0, r3
 80095ee:	f007 fb17 	bl	8010c20 <tcp_output>
 80095f2:	4603      	mov	r3, r0
 80095f4:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 80095f6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80095fa:	f113 0f04 	cmn.w	r3, #4
 80095fe:	d104      	bne.n	800960a <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8009600:	7b7b      	ldrb	r3, [r7, #13]
 8009602:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009604:	2301      	movs	r3, #1
 8009606:	76fb      	strb	r3, [r7, #27]
 8009608:	e011      	b.n	800962e <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800960a:	7e3b      	ldrb	r3, [r7, #24]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d00e      	beq.n	800962e <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6a1b      	ldr	r3, [r3, #32]
 8009614:	699b      	ldr	r3, [r3, #24]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d102      	bne.n	8009620 <lwip_netconn_do_writemore+0x348>
 800961a:	f06f 0306 	mvn.w	r3, #6
 800961e:	e000      	b.n	8009622 <lwip_netconn_do_writemore+0x34a>
 8009620:	2300      	movs	r3, #0
 8009622:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009624:	2301      	movs	r3, #1
 8009626:	76fb      	strb	r3, [r7, #27]
 8009628:	e001      	b.n	800962e <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800962a:	2301      	movs	r3, #1
 800962c:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800962e:	7efb      	ldrb	r3, [r7, #27]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d015      	beq.n	8009660 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6a1b      	ldr	r3, [r3, #32]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	330c      	adds	r3, #12
 800963c:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6a1b      	ldr	r3, [r3, #32]
 8009642:	7ffa      	ldrb	r2, [r7, #31]
 8009644:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2200      	movs	r2, #0
 800964a:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2200      	movs	r2, #0
 8009650:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009652:	78fb      	ldrb	r3, [r7, #3]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d006      	beq.n	8009666 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8009658:	68b8      	ldr	r0, [r7, #8]
 800965a:	f00d fb2d 	bl	8016cb8 <sys_sem_signal>
 800965e:	e002      	b.n	8009666 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8009660:	f04f 33ff 	mov.w	r3, #4294967295
 8009664:	e000      	b.n	8009668 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8009666:	2300      	movs	r3, #0
}
 8009668:	4618      	mov	r0, r3
 800966a:	3720      	adds	r7, #32
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b084      	sub	sp, #16
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4618      	mov	r0, r3
 8009682:	f7fe fd20 	bl	80080c6 <netconn_err>
 8009686:	4603      	mov	r3, r0
 8009688:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800968a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d166      	bne.n	8009760 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	781b      	ldrb	r3, [r3, #0]
 8009698:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800969c:	2b10      	cmp	r3, #16
 800969e:	d15d      	bne.n	800975c <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	785b      	ldrb	r3, [r3, #1]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d002      	beq.n	80096b0 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 80096aa:	23fb      	movs	r3, #251	; 0xfb
 80096ac:	73fb      	strb	r3, [r7, #15]
 80096ae:	e057      	b.n	8009760 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	685b      	ldr	r3, [r3, #4]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d04d      	beq.n	8009756 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	2201      	movs	r2, #1
 80096c0:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	6a1b      	ldr	r3, [r3, #32]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d006      	beq.n	80096da <lwip_netconn_do_write+0x6a>
 80096cc:	4b28      	ldr	r3, [pc, #160]	; (8009770 <lwip_netconn_do_write+0x100>)
 80096ce:	f240 7223 	movw	r2, #1827	; 0x723
 80096d2:	4928      	ldr	r1, [pc, #160]	; (8009774 <lwip_netconn_do_write+0x104>)
 80096d4:	4828      	ldr	r0, [pc, #160]	; (8009778 <lwip_netconn_do_write+0x108>)
 80096d6:	f00d fd67 	bl	80171a8 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	695b      	ldr	r3, [r3, #20]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d106      	bne.n	80096f0 <lwip_netconn_do_write+0x80>
 80096e2:	4b23      	ldr	r3, [pc, #140]	; (8009770 <lwip_netconn_do_write+0x100>)
 80096e4:	f240 7224 	movw	r2, #1828	; 0x724
 80096e8:	4924      	ldr	r1, [pc, #144]	; (800977c <lwip_netconn_do_write+0x10c>)
 80096ea:	4823      	ldr	r0, [pc, #140]	; (8009778 <lwip_netconn_do_write+0x108>)
 80096ec:	f00d fd5c 	bl	80171a8 <iprintf>
        msg->conn->current_msg = msg;
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	68ba      	ldr	r2, [r7, #8]
 80096f6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	2100      	movs	r1, #0
 80096fe:	4618      	mov	r0, r3
 8009700:	f7ff fdea 	bl	80092d8 <lwip_netconn_do_writemore>
 8009704:	4603      	mov	r3, r0
 8009706:	2b00      	cmp	r3, #0
 8009708:	d02e      	beq.n	8009768 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	785b      	ldrb	r3, [r3, #1]
 8009710:	2b01      	cmp	r3, #1
 8009712:	d006      	beq.n	8009722 <lwip_netconn_do_write+0xb2>
 8009714:	4b16      	ldr	r3, [pc, #88]	; (8009770 <lwip_netconn_do_write+0x100>)
 8009716:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800971a:	4919      	ldr	r1, [pc, #100]	; (8009780 <lwip_netconn_do_write+0x110>)
 800971c:	4816      	ldr	r0, [pc, #88]	; (8009778 <lwip_netconn_do_write+0x108>)
 800971e:	f00d fd43 	bl	80171a8 <iprintf>
          UNLOCK_TCPIP_CORE();
 8009722:	4818      	ldr	r0, [pc, #96]	; (8009784 <lwip_netconn_do_write+0x114>)
 8009724:	f00d fb39 	bl	8016d9a <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	330c      	adds	r3, #12
 800972e:	2100      	movs	r1, #0
 8009730:	4618      	mov	r0, r3
 8009732:	f00d fa90 	bl	8016c56 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8009736:	4813      	ldr	r0, [pc, #76]	; (8009784 <lwip_netconn_do_write+0x114>)
 8009738:	f00d fb20 	bl	8016d7c <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	785b      	ldrb	r3, [r3, #1]
 8009742:	2b01      	cmp	r3, #1
 8009744:	d110      	bne.n	8009768 <lwip_netconn_do_write+0xf8>
 8009746:	4b0a      	ldr	r3, [pc, #40]	; (8009770 <lwip_netconn_do_write+0x100>)
 8009748:	f240 722c 	movw	r2, #1836	; 0x72c
 800974c:	490c      	ldr	r1, [pc, #48]	; (8009780 <lwip_netconn_do_write+0x110>)
 800974e:	480a      	ldr	r0, [pc, #40]	; (8009778 <lwip_netconn_do_write+0x108>)
 8009750:	f00d fd2a 	bl	80171a8 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8009754:	e008      	b.n	8009768 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8009756:	23f5      	movs	r3, #245	; 0xf5
 8009758:	73fb      	strb	r3, [r7, #15]
 800975a:	e001      	b.n	8009760 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800975c:	23fa      	movs	r3, #250	; 0xfa
 800975e:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	7bfa      	ldrb	r2, [r7, #15]
 8009764:	711a      	strb	r2, [r3, #4]
 8009766:	e000      	b.n	800976a <lwip_netconn_do_write+0xfa>
        return;
 8009768:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800976a:	3710      	adds	r7, #16
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}
 8009770:	080189d0 	.word	0x080189d0
 8009774:	08018d74 	.word	0x08018d74
 8009778:	08018a14 	.word	0x08018a14
 800977c:	08018efc 	.word	0x08018efc
 8009780:	08018d90 	.word	0x08018d90
 8009784:	2000b8a4 	.word	0x2000b8a4

08009788 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	785b      	ldrb	r3, [r3, #1]
 800979a:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	685b      	ldr	r3, [r3, #4]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d069      	beq.n	800987a <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 80097b0:	2b10      	cmp	r3, #16
 80097b2:	d162      	bne.n	800987a <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80097b8:	2b03      	cmp	r3, #3
 80097ba:	d002      	beq.n	80097c2 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80097bc:	7afb      	ldrb	r3, [r7, #11]
 80097be:	2b02      	cmp	r3, #2
 80097c0:	d05b      	beq.n	800987a <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 80097c2:	7afb      	ldrb	r3, [r7, #11]
 80097c4:	2b03      	cmp	r3, #3
 80097c6:	d103      	bne.n	80097d0 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	22f5      	movs	r2, #245	; 0xf5
 80097cc:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 80097ce:	e059      	b.n	8009884 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 80097d0:	7afb      	ldrb	r3, [r7, #11]
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d103      	bne.n	80097de <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	22fb      	movs	r2, #251	; 0xfb
 80097da:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 80097dc:	e052      	b.n	8009884 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	7a1b      	ldrb	r3, [r3, #8]
 80097e2:	f003 0301 	and.w	r3, r3, #1
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d004      	beq.n	80097f4 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4618      	mov	r0, r3
 80097f0:	f7ff f9a2 	bl	8008b38 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	6a1b      	ldr	r3, [r3, #32]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d006      	beq.n	800980c <lwip_netconn_do_close+0x84>
 80097fe:	4b23      	ldr	r3, [pc, #140]	; (800988c <lwip_netconn_do_close+0x104>)
 8009800:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8009804:	4922      	ldr	r1, [pc, #136]	; (8009890 <lwip_netconn_do_close+0x108>)
 8009806:	4823      	ldr	r0, [pc, #140]	; (8009894 <lwip_netconn_do_close+0x10c>)
 8009808:	f00d fcce 	bl	80171a8 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	2204      	movs	r2, #4
 8009812:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	68fa      	ldr	r2, [r7, #12]
 800981a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	2100      	movs	r1, #0
 8009822:	4618      	mov	r0, r3
 8009824:	f7ff fa06 	bl	8008c34 <lwip_netconn_do_close_internal>
 8009828:	4603      	mov	r3, r0
 800982a:	2b00      	cmp	r3, #0
 800982c:	d029      	beq.n	8009882 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	785b      	ldrb	r3, [r3, #1]
 8009834:	2b04      	cmp	r3, #4
 8009836:	d006      	beq.n	8009846 <lwip_netconn_do_close+0xbe>
 8009838:	4b14      	ldr	r3, [pc, #80]	; (800988c <lwip_netconn_do_close+0x104>)
 800983a:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800983e:	4916      	ldr	r1, [pc, #88]	; (8009898 <lwip_netconn_do_close+0x110>)
 8009840:	4814      	ldr	r0, [pc, #80]	; (8009894 <lwip_netconn_do_close+0x10c>)
 8009842:	f00d fcb1 	bl	80171a8 <iprintf>
        UNLOCK_TCPIP_CORE();
 8009846:	4815      	ldr	r0, [pc, #84]	; (800989c <lwip_netconn_do_close+0x114>)
 8009848:	f00d faa7 	bl	8016d9a <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	330c      	adds	r3, #12
 8009852:	2100      	movs	r1, #0
 8009854:	4618      	mov	r0, r3
 8009856:	f00d f9fe 	bl	8016c56 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800985a:	4810      	ldr	r0, [pc, #64]	; (800989c <lwip_netconn_do_close+0x114>)
 800985c:	f00d fa8e 	bl	8016d7c <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	785b      	ldrb	r3, [r3, #1]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d00b      	beq.n	8009882 <lwip_netconn_do_close+0xfa>
 800986a:	4b08      	ldr	r3, [pc, #32]	; (800988c <lwip_netconn_do_close+0x104>)
 800986c:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8009870:	4909      	ldr	r1, [pc, #36]	; (8009898 <lwip_netconn_do_close+0x110>)
 8009872:	4808      	ldr	r0, [pc, #32]	; (8009894 <lwip_netconn_do_close+0x10c>)
 8009874:	f00d fc98 	bl	80171a8 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8009878:	e003      	b.n	8009882 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	22f5      	movs	r2, #245	; 0xf5
 800987e:	711a      	strb	r2, [r3, #4]
 8009880:	e000      	b.n	8009884 <lwip_netconn_do_close+0xfc>
      return;
 8009882:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8009884:	3710      	adds	r7, #16
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}
 800988a:	bf00      	nop
 800988c:	080189d0 	.word	0x080189d0
 8009890:	08018d74 	.word	0x08018d74
 8009894:	08018a14 	.word	0x08018a14
 8009898:	08018d90 	.word	0x08018d90
 800989c:	2000b8a4 	.word	0x2000b8a4

080098a0 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b082      	sub	sp, #8
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d013      	beq.n	80098d6 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d00b      	beq.n	80098ce <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4618      	mov	r0, r3
 80098bc:	f001 fdfa 	bl	800b4b4 <pbuf_free>
      buf->p = buf->ptr = NULL;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2200      	movs	r2, #0
 80098c4:	605a      	str	r2, [r3, #4]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	685a      	ldr	r2, [r3, #4]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 80098ce:	6879      	ldr	r1, [r7, #4]
 80098d0:	2006      	movs	r0, #6
 80098d2:	f000 ff3f 	bl	800a754 <memp_free>
  }
}
 80098d6:	bf00      	nop
 80098d8:	3708      	adds	r7, #8
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
	...

080098e0 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	60f8      	str	r0, [r7, #12]
 80098e8:	60b9      	str	r1, [r7, #8]
 80098ea:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d108      	bne.n	8009904 <netbuf_data+0x24>
 80098f2:	4b1b      	ldr	r3, [pc, #108]	; (8009960 <netbuf_data+0x80>)
 80098f4:	22c6      	movs	r2, #198	; 0xc6
 80098f6:	491b      	ldr	r1, [pc, #108]	; (8009964 <netbuf_data+0x84>)
 80098f8:	481b      	ldr	r0, [pc, #108]	; (8009968 <netbuf_data+0x88>)
 80098fa:	f00d fc55 	bl	80171a8 <iprintf>
 80098fe:	f06f 030f 	mvn.w	r3, #15
 8009902:	e029      	b.n	8009958 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d108      	bne.n	800991c <netbuf_data+0x3c>
 800990a:	4b15      	ldr	r3, [pc, #84]	; (8009960 <netbuf_data+0x80>)
 800990c:	22c7      	movs	r2, #199	; 0xc7
 800990e:	4917      	ldr	r1, [pc, #92]	; (800996c <netbuf_data+0x8c>)
 8009910:	4815      	ldr	r0, [pc, #84]	; (8009968 <netbuf_data+0x88>)
 8009912:	f00d fc49 	bl	80171a8 <iprintf>
 8009916:	f06f 030f 	mvn.w	r3, #15
 800991a:	e01d      	b.n	8009958 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d108      	bne.n	8009934 <netbuf_data+0x54>
 8009922:	4b0f      	ldr	r3, [pc, #60]	; (8009960 <netbuf_data+0x80>)
 8009924:	22c8      	movs	r2, #200	; 0xc8
 8009926:	4912      	ldr	r1, [pc, #72]	; (8009970 <netbuf_data+0x90>)
 8009928:	480f      	ldr	r0, [pc, #60]	; (8009968 <netbuf_data+0x88>)
 800992a:	f00d fc3d 	bl	80171a8 <iprintf>
 800992e:	f06f 030f 	mvn.w	r3, #15
 8009932:	e011      	b.n	8009958 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d102      	bne.n	8009942 <netbuf_data+0x62>
    return ERR_BUF;
 800993c:	f06f 0301 	mvn.w	r3, #1
 8009940:	e00a      	b.n	8009958 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	685a      	ldr	r2, [r3, #4]
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	895a      	ldrh	r2, [r3, #10]
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 8009956:	2300      	movs	r3, #0
}
 8009958:	4618      	mov	r0, r3
 800995a:	3710      	adds	r7, #16
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}
 8009960:	08018f28 	.word	0x08018f28
 8009964:	08019030 	.word	0x08019030
 8009968:	08018f78 	.word	0x08018f78
 800996c:	0801904c 	.word	0x0801904c
 8009970:	0801906c 	.word	0x0801906c

08009974 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b082      	sub	sp, #8
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d108      	bne.n	8009994 <netbuf_next+0x20>
 8009982:	4b11      	ldr	r3, [pc, #68]	; (80099c8 <netbuf_next+0x54>)
 8009984:	22e0      	movs	r2, #224	; 0xe0
 8009986:	4911      	ldr	r1, [pc, #68]	; (80099cc <netbuf_next+0x58>)
 8009988:	4811      	ldr	r0, [pc, #68]	; (80099d0 <netbuf_next+0x5c>)
 800998a:	f00d fc0d 	bl	80171a8 <iprintf>
 800998e:	f04f 33ff 	mov.w	r3, #4294967295
 8009992:	e014      	b.n	80099be <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d102      	bne.n	80099a4 <netbuf_next+0x30>
    return -1;
 800999e:	f04f 33ff 	mov.w	r3, #4294967295
 80099a2:	e00c      	b.n	80099be <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	681a      	ldr	r2, [r3, #0]
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d101      	bne.n	80099bc <netbuf_next+0x48>
    return 1;
 80099b8:	2301      	movs	r3, #1
 80099ba:	e000      	b.n	80099be <netbuf_next+0x4a>
  }
  return 0;
 80099bc:	2300      	movs	r3, #0
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3708      	adds	r7, #8
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}
 80099c6:	bf00      	nop
 80099c8:	08018f28 	.word	0x08018f28
 80099cc:	08019088 	.word	0x08019088
 80099d0:	08018f78 	.word	0x08018f78

080099d4 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b084      	sub	sp, #16
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80099de:	f008 f9d7 	bl	8011d90 <sys_timeouts_sleeptime>
 80099e2:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ea:	d10b      	bne.n	8009a04 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 80099ec:	4813      	ldr	r0, [pc, #76]	; (8009a3c <tcpip_timeouts_mbox_fetch+0x68>)
 80099ee:	f00d f9d4 	bl	8016d9a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80099f2:	2200      	movs	r2, #0
 80099f4:	6839      	ldr	r1, [r7, #0]
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f00d f88c 	bl	8016b14 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80099fc:	480f      	ldr	r0, [pc, #60]	; (8009a3c <tcpip_timeouts_mbox_fetch+0x68>)
 80099fe:	f00d f9bd 	bl	8016d7c <sys_mutex_lock>
    return;
 8009a02:	e018      	b.n	8009a36 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d102      	bne.n	8009a10 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8009a0a:	f008 f987 	bl	8011d1c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009a0e:	e7e6      	b.n	80099de <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8009a10:	480a      	ldr	r0, [pc, #40]	; (8009a3c <tcpip_timeouts_mbox_fetch+0x68>)
 8009a12:	f00d f9c2 	bl	8016d9a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8009a16:	68fa      	ldr	r2, [r7, #12]
 8009a18:	6839      	ldr	r1, [r7, #0]
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f00d f87a 	bl	8016b14 <sys_arch_mbox_fetch>
 8009a20:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8009a22:	4806      	ldr	r0, [pc, #24]	; (8009a3c <tcpip_timeouts_mbox_fetch+0x68>)
 8009a24:	f00d f9aa 	bl	8016d7c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a2e:	d102      	bne.n	8009a36 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8009a30:	f008 f974 	bl	8011d1c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009a34:	e7d3      	b.n	80099de <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8009a36:	3710      	adds	r7, #16
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}
 8009a3c:	2000b8a4 	.word	0x2000b8a4

08009a40 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8009a48:	4810      	ldr	r0, [pc, #64]	; (8009a8c <tcpip_thread+0x4c>)
 8009a4a:	f00d f997 	bl	8016d7c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8009a4e:	4b10      	ldr	r3, [pc, #64]	; (8009a90 <tcpip_thread+0x50>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d005      	beq.n	8009a62 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8009a56:	4b0e      	ldr	r3, [pc, #56]	; (8009a90 <tcpip_thread+0x50>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4a0e      	ldr	r2, [pc, #56]	; (8009a94 <tcpip_thread+0x54>)
 8009a5c:	6812      	ldr	r2, [r2, #0]
 8009a5e:	4610      	mov	r0, r2
 8009a60:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009a62:	f107 030c 	add.w	r3, r7, #12
 8009a66:	4619      	mov	r1, r3
 8009a68:	480b      	ldr	r0, [pc, #44]	; (8009a98 <tcpip_thread+0x58>)
 8009a6a:	f7ff ffb3 	bl	80099d4 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d106      	bne.n	8009a82 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009a74:	4b09      	ldr	r3, [pc, #36]	; (8009a9c <tcpip_thread+0x5c>)
 8009a76:	2291      	movs	r2, #145	; 0x91
 8009a78:	4909      	ldr	r1, [pc, #36]	; (8009aa0 <tcpip_thread+0x60>)
 8009a7a:	480a      	ldr	r0, [pc, #40]	; (8009aa4 <tcpip_thread+0x64>)
 8009a7c:	f00d fb94 	bl	80171a8 <iprintf>
      continue;
 8009a80:	e003      	b.n	8009a8a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	4618      	mov	r0, r3
 8009a86:	f000 f80f 	bl	8009aa8 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009a8a:	e7ea      	b.n	8009a62 <tcpip_thread+0x22>
 8009a8c:	2000b8a4 	.word	0x2000b8a4
 8009a90:	200084f8 	.word	0x200084f8
 8009a94:	200084fc 	.word	0x200084fc
 8009a98:	20008500 	.word	0x20008500
 8009a9c:	080190c0 	.word	0x080190c0
 8009aa0:	080190f0 	.word	0x080190f0
 8009aa4:	08019110 	.word	0x08019110

08009aa8 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	781b      	ldrb	r3, [r3, #0]
 8009ab4:	2b02      	cmp	r3, #2
 8009ab6:	d026      	beq.n	8009b06 <tcpip_thread_handle_msg+0x5e>
 8009ab8:	2b02      	cmp	r3, #2
 8009aba:	dc2b      	bgt.n	8009b14 <tcpip_thread_handle_msg+0x6c>
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d002      	beq.n	8009ac6 <tcpip_thread_handle_msg+0x1e>
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d015      	beq.n	8009af0 <tcpip_thread_handle_msg+0x48>
 8009ac4:	e026      	b.n	8009b14 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	68db      	ldr	r3, [r3, #12]
 8009aca:	687a      	ldr	r2, [r7, #4]
 8009acc:	6850      	ldr	r0, [r2, #4]
 8009ace:	687a      	ldr	r2, [r7, #4]
 8009ad0:	6892      	ldr	r2, [r2, #8]
 8009ad2:	4611      	mov	r1, r2
 8009ad4:	4798      	blx	r3
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d004      	beq.n	8009ae6 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	685b      	ldr	r3, [r3, #4]
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f001 fce7 	bl	800b4b4 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009ae6:	6879      	ldr	r1, [r7, #4]
 8009ae8:	2009      	movs	r0, #9
 8009aea:	f000 fe33 	bl	800a754 <memp_free>
      break;
 8009aee:	e018      	b.n	8009b22 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	6892      	ldr	r2, [r2, #8]
 8009af8:	4610      	mov	r0, r2
 8009afa:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009afc:	6879      	ldr	r1, [r7, #4]
 8009afe:	2008      	movs	r0, #8
 8009b00:	f000 fe28 	bl	800a754 <memp_free>
      break;
 8009b04:	e00d      	b.n	8009b22 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	685b      	ldr	r3, [r3, #4]
 8009b0a:	687a      	ldr	r2, [r7, #4]
 8009b0c:	6892      	ldr	r2, [r2, #8]
 8009b0e:	4610      	mov	r0, r2
 8009b10:	4798      	blx	r3
      break;
 8009b12:	e006      	b.n	8009b22 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009b14:	4b05      	ldr	r3, [pc, #20]	; (8009b2c <tcpip_thread_handle_msg+0x84>)
 8009b16:	22cf      	movs	r2, #207	; 0xcf
 8009b18:	4905      	ldr	r1, [pc, #20]	; (8009b30 <tcpip_thread_handle_msg+0x88>)
 8009b1a:	4806      	ldr	r0, [pc, #24]	; (8009b34 <tcpip_thread_handle_msg+0x8c>)
 8009b1c:	f00d fb44 	bl	80171a8 <iprintf>
      break;
 8009b20:	bf00      	nop
  }
}
 8009b22:	bf00      	nop
 8009b24:	3708      	adds	r7, #8
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
 8009b2a:	bf00      	nop
 8009b2c:	080190c0 	.word	0x080190c0
 8009b30:	080190f0 	.word	0x080190f0
 8009b34:	08019110 	.word	0x08019110

08009b38 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b086      	sub	sp, #24
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	60f8      	str	r0, [r7, #12]
 8009b40:	60b9      	str	r1, [r7, #8]
 8009b42:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009b44:	481a      	ldr	r0, [pc, #104]	; (8009bb0 <tcpip_inpkt+0x78>)
 8009b46:	f00d f840 	bl	8016bca <sys_mbox_valid>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d105      	bne.n	8009b5c <tcpip_inpkt+0x24>
 8009b50:	4b18      	ldr	r3, [pc, #96]	; (8009bb4 <tcpip_inpkt+0x7c>)
 8009b52:	22fc      	movs	r2, #252	; 0xfc
 8009b54:	4918      	ldr	r1, [pc, #96]	; (8009bb8 <tcpip_inpkt+0x80>)
 8009b56:	4819      	ldr	r0, [pc, #100]	; (8009bbc <tcpip_inpkt+0x84>)
 8009b58:	f00d fb26 	bl	80171a8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8009b5c:	2009      	movs	r0, #9
 8009b5e:	f000 fda7 	bl	800a6b0 <memp_malloc>
 8009b62:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d102      	bne.n	8009b70 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8009b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8009b6e:	e01a      	b.n	8009ba6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	2200      	movs	r2, #0
 8009b74:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	68fa      	ldr	r2, [r7, #12]
 8009b7a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	68ba      	ldr	r2, [r7, #8]
 8009b80:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009b88:	6979      	ldr	r1, [r7, #20]
 8009b8a:	4809      	ldr	r0, [pc, #36]	; (8009bb0 <tcpip_inpkt+0x78>)
 8009b8c:	f00c ffa8 	bl	8016ae0 <sys_mbox_trypost>
 8009b90:	4603      	mov	r3, r0
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d006      	beq.n	8009ba4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009b96:	6979      	ldr	r1, [r7, #20]
 8009b98:	2009      	movs	r0, #9
 8009b9a:	f000 fddb 	bl	800a754 <memp_free>
    return ERR_MEM;
 8009b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8009ba2:	e000      	b.n	8009ba6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8009ba4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3718      	adds	r7, #24
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	20008500 	.word	0x20008500
 8009bb4:	080190c0 	.word	0x080190c0
 8009bb8:	08019138 	.word	0x08019138
 8009bbc:	08019110 	.word	0x08019110

08009bc0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b082      	sub	sp, #8
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009bd0:	f003 0318 	and.w	r3, r3, #24
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d006      	beq.n	8009be6 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8009bd8:	4a08      	ldr	r2, [pc, #32]	; (8009bfc <tcpip_input+0x3c>)
 8009bda:	6839      	ldr	r1, [r7, #0]
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f7ff ffab 	bl	8009b38 <tcpip_inpkt>
 8009be2:	4603      	mov	r3, r0
 8009be4:	e005      	b.n	8009bf2 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8009be6:	4a06      	ldr	r2, [pc, #24]	; (8009c00 <tcpip_input+0x40>)
 8009be8:	6839      	ldr	r1, [r7, #0]
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f7ff ffa4 	bl	8009b38 <tcpip_inpkt>
 8009bf0:	4603      	mov	r3, r0
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3708      	adds	r7, #8
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
 8009bfa:	bf00      	nop
 8009bfc:	080168cd 	.word	0x080168cd
 8009c00:	080157a5 	.word	0x080157a5

08009c04 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009c0e:	4819      	ldr	r0, [pc, #100]	; (8009c74 <tcpip_try_callback+0x70>)
 8009c10:	f00c ffdb 	bl	8016bca <sys_mbox_valid>
 8009c14:	4603      	mov	r3, r0
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d106      	bne.n	8009c28 <tcpip_try_callback+0x24>
 8009c1a:	4b17      	ldr	r3, [pc, #92]	; (8009c78 <tcpip_try_callback+0x74>)
 8009c1c:	f240 125d 	movw	r2, #349	; 0x15d
 8009c20:	4916      	ldr	r1, [pc, #88]	; (8009c7c <tcpip_try_callback+0x78>)
 8009c22:	4817      	ldr	r0, [pc, #92]	; (8009c80 <tcpip_try_callback+0x7c>)
 8009c24:	f00d fac0 	bl	80171a8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8009c28:	2008      	movs	r0, #8
 8009c2a:	f000 fd41 	bl	800a6b0 <memp_malloc>
 8009c2e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d102      	bne.n	8009c3c <tcpip_try_callback+0x38>
    return ERR_MEM;
 8009c36:	f04f 33ff 	mov.w	r3, #4294967295
 8009c3a:	e017      	b.n	8009c6c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2201      	movs	r2, #1
 8009c40:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	683a      	ldr	r2, [r7, #0]
 8009c4c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009c4e:	68f9      	ldr	r1, [r7, #12]
 8009c50:	4808      	ldr	r0, [pc, #32]	; (8009c74 <tcpip_try_callback+0x70>)
 8009c52:	f00c ff45 	bl	8016ae0 <sys_mbox_trypost>
 8009c56:	4603      	mov	r3, r0
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d006      	beq.n	8009c6a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8009c5c:	68f9      	ldr	r1, [r7, #12]
 8009c5e:	2008      	movs	r0, #8
 8009c60:	f000 fd78 	bl	800a754 <memp_free>
    return ERR_MEM;
 8009c64:	f04f 33ff 	mov.w	r3, #4294967295
 8009c68:	e000      	b.n	8009c6c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8009c6a:	2300      	movs	r3, #0
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3710      	adds	r7, #16
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}
 8009c74:	20008500 	.word	0x20008500
 8009c78:	080190c0 	.word	0x080190c0
 8009c7c:	08019138 	.word	0x08019138
 8009c80:	08019110 	.word	0x08019110

08009c84 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b084      	sub	sp, #16
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	60f8      	str	r0, [r7, #12]
 8009c8c:	60b9      	str	r1, [r7, #8]
 8009c8e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8009c90:	4806      	ldr	r0, [pc, #24]	; (8009cac <tcpip_send_msg_wait_sem+0x28>)
 8009c92:	f00d f873 	bl	8016d7c <sys_mutex_lock>
  fn(apimsg);
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	68b8      	ldr	r0, [r7, #8]
 8009c9a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8009c9c:	4803      	ldr	r0, [pc, #12]	; (8009cac <tcpip_send_msg_wait_sem+0x28>)
 8009c9e:	f00d f87c 	bl	8016d9a <sys_mutex_unlock>
  return ERR_OK;
 8009ca2:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3710      	adds	r7, #16
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}
 8009cac:	2000b8a4 	.word	0x2000b8a4

08009cb0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b084      	sub	sp, #16
 8009cb4:	af02      	add	r7, sp, #8
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	6039      	str	r1, [r7, #0]
  lwip_init();
 8009cba:	f000 f871 	bl	8009da0 <lwip_init>

  tcpip_init_done = initfunc;
 8009cbe:	4a17      	ldr	r2, [pc, #92]	; (8009d1c <tcpip_init+0x6c>)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8009cc4:	4a16      	ldr	r2, [pc, #88]	; (8009d20 <tcpip_init+0x70>)
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8009cca:	2106      	movs	r1, #6
 8009ccc:	4815      	ldr	r0, [pc, #84]	; (8009d24 <tcpip_init+0x74>)
 8009cce:	f00c fed3 	bl	8016a78 <sys_mbox_new>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d006      	beq.n	8009ce6 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8009cd8:	4b13      	ldr	r3, [pc, #76]	; (8009d28 <tcpip_init+0x78>)
 8009cda:	f240 2261 	movw	r2, #609	; 0x261
 8009cde:	4913      	ldr	r1, [pc, #76]	; (8009d2c <tcpip_init+0x7c>)
 8009ce0:	4813      	ldr	r0, [pc, #76]	; (8009d30 <tcpip_init+0x80>)
 8009ce2:	f00d fa61 	bl	80171a8 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8009ce6:	4813      	ldr	r0, [pc, #76]	; (8009d34 <tcpip_init+0x84>)
 8009ce8:	f00d f82c 	bl	8016d44 <sys_mutex_new>
 8009cec:	4603      	mov	r3, r0
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d006      	beq.n	8009d00 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8009cf2:	4b0d      	ldr	r3, [pc, #52]	; (8009d28 <tcpip_init+0x78>)
 8009cf4:	f240 2265 	movw	r2, #613	; 0x265
 8009cf8:	490f      	ldr	r1, [pc, #60]	; (8009d38 <tcpip_init+0x88>)
 8009cfa:	480d      	ldr	r0, [pc, #52]	; (8009d30 <tcpip_init+0x80>)
 8009cfc:	f00d fa54 	bl	80171a8 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8009d00:	2300      	movs	r3, #0
 8009d02:	9300      	str	r3, [sp, #0]
 8009d04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d08:	2200      	movs	r2, #0
 8009d0a:	490c      	ldr	r1, [pc, #48]	; (8009d3c <tcpip_init+0x8c>)
 8009d0c:	480c      	ldr	r0, [pc, #48]	; (8009d40 <tcpip_init+0x90>)
 8009d0e:	f00d f851 	bl	8016db4 <sys_thread_new>
}
 8009d12:	bf00      	nop
 8009d14:	3708      	adds	r7, #8
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}
 8009d1a:	bf00      	nop
 8009d1c:	200084f8 	.word	0x200084f8
 8009d20:	200084fc 	.word	0x200084fc
 8009d24:	20008500 	.word	0x20008500
 8009d28:	080190c0 	.word	0x080190c0
 8009d2c:	08019148 	.word	0x08019148
 8009d30:	08019110 	.word	0x08019110
 8009d34:	2000b8a4 	.word	0x2000b8a4
 8009d38:	0801916c 	.word	0x0801916c
 8009d3c:	08009a41 	.word	0x08009a41
 8009d40:	08019190 	.word	0x08019190

08009d44 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b083      	sub	sp, #12
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8009d4e:	88fb      	ldrh	r3, [r7, #6]
 8009d50:	021b      	lsls	r3, r3, #8
 8009d52:	b21a      	sxth	r2, r3
 8009d54:	88fb      	ldrh	r3, [r7, #6]
 8009d56:	0a1b      	lsrs	r3, r3, #8
 8009d58:	b29b      	uxth	r3, r3
 8009d5a:	b21b      	sxth	r3, r3
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	b21b      	sxth	r3, r3
 8009d60:	b29b      	uxth	r3, r3
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	370c      	adds	r7, #12
 8009d66:	46bd      	mov	sp, r7
 8009d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6c:	4770      	bx	lr

08009d6e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8009d6e:	b480      	push	{r7}
 8009d70:	b083      	sub	sp, #12
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	061a      	lsls	r2, r3, #24
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	021b      	lsls	r3, r3, #8
 8009d7e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009d82:	431a      	orrs	r2, r3
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	0a1b      	lsrs	r3, r3, #8
 8009d88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009d8c:	431a      	orrs	r2, r3
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	0e1b      	lsrs	r3, r3, #24
 8009d92:	4313      	orrs	r3, r2
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	370c      	adds	r7, #12
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr

08009da0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b082      	sub	sp, #8
 8009da4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8009da6:	2300      	movs	r3, #0
 8009da8:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8009daa:	f00c ffbd 	bl	8016d28 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8009dae:	f000 f8d5 	bl	8009f5c <mem_init>
  memp_init();
 8009db2:	f000 fc31 	bl	800a618 <memp_init>
  pbuf_init();
  netif_init();
 8009db6:	f000 fcf7 	bl	800a7a8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009dba:	f008 f821 	bl	8011e00 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8009dbe:	f001 fe23 	bl	800ba08 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8009dc2:	f007 ff63 	bl	8011c8c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8009dc6:	bf00      	nop
 8009dc8:	3708      	adds	r7, #8
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
	...

08009dd0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b083      	sub	sp, #12
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8009dda:	4b05      	ldr	r3, [pc, #20]	; (8009df0 <ptr_to_mem+0x20>)
 8009ddc:	681a      	ldr	r2, [r3, #0]
 8009dde:	88fb      	ldrh	r3, [r7, #6]
 8009de0:	4413      	add	r3, r2
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	370c      	adds	r7, #12
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr
 8009dee:	bf00      	nop
 8009df0:	20008504 	.word	0x20008504

08009df4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b083      	sub	sp, #12
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8009dfc:	4b05      	ldr	r3, [pc, #20]	; (8009e14 <mem_to_ptr+0x20>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	687a      	ldr	r2, [r7, #4]
 8009e02:	1ad3      	subs	r3, r2, r3
 8009e04:	b29b      	uxth	r3, r3
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	370c      	adds	r7, #12
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr
 8009e12:	bf00      	nop
 8009e14:	20008504 	.word	0x20008504

08009e18 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009e18:	b590      	push	{r4, r7, lr}
 8009e1a:	b085      	sub	sp, #20
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009e20:	4b45      	ldr	r3, [pc, #276]	; (8009f38 <plug_holes+0x120>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	429a      	cmp	r2, r3
 8009e28:	d206      	bcs.n	8009e38 <plug_holes+0x20>
 8009e2a:	4b44      	ldr	r3, [pc, #272]	; (8009f3c <plug_holes+0x124>)
 8009e2c:	f240 12df 	movw	r2, #479	; 0x1df
 8009e30:	4943      	ldr	r1, [pc, #268]	; (8009f40 <plug_holes+0x128>)
 8009e32:	4844      	ldr	r0, [pc, #272]	; (8009f44 <plug_holes+0x12c>)
 8009e34:	f00d f9b8 	bl	80171a8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009e38:	4b43      	ldr	r3, [pc, #268]	; (8009f48 <plug_holes+0x130>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	687a      	ldr	r2, [r7, #4]
 8009e3e:	429a      	cmp	r2, r3
 8009e40:	d306      	bcc.n	8009e50 <plug_holes+0x38>
 8009e42:	4b3e      	ldr	r3, [pc, #248]	; (8009f3c <plug_holes+0x124>)
 8009e44:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009e48:	4940      	ldr	r1, [pc, #256]	; (8009f4c <plug_holes+0x134>)
 8009e4a:	483e      	ldr	r0, [pc, #248]	; (8009f44 <plug_holes+0x12c>)
 8009e4c:	f00d f9ac 	bl	80171a8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	791b      	ldrb	r3, [r3, #4]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d006      	beq.n	8009e66 <plug_holes+0x4e>
 8009e58:	4b38      	ldr	r3, [pc, #224]	; (8009f3c <plug_holes+0x124>)
 8009e5a:	f240 12e1 	movw	r2, #481	; 0x1e1
 8009e5e:	493c      	ldr	r1, [pc, #240]	; (8009f50 <plug_holes+0x138>)
 8009e60:	4838      	ldr	r0, [pc, #224]	; (8009f44 <plug_holes+0x12c>)
 8009e62:	f00d f9a1 	bl	80171a8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	881b      	ldrh	r3, [r3, #0]
 8009e6a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009e6e:	d906      	bls.n	8009e7e <plug_holes+0x66>
 8009e70:	4b32      	ldr	r3, [pc, #200]	; (8009f3c <plug_holes+0x124>)
 8009e72:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8009e76:	4937      	ldr	r1, [pc, #220]	; (8009f54 <plug_holes+0x13c>)
 8009e78:	4832      	ldr	r0, [pc, #200]	; (8009f44 <plug_holes+0x12c>)
 8009e7a:	f00d f995 	bl	80171a8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	881b      	ldrh	r3, [r3, #0]
 8009e82:	4618      	mov	r0, r3
 8009e84:	f7ff ffa4 	bl	8009dd0 <ptr_to_mem>
 8009e88:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8009e8a:	687a      	ldr	r2, [r7, #4]
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	d024      	beq.n	8009edc <plug_holes+0xc4>
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	791b      	ldrb	r3, [r3, #4]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d120      	bne.n	8009edc <plug_holes+0xc4>
 8009e9a:	4b2b      	ldr	r3, [pc, #172]	; (8009f48 <plug_holes+0x130>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	68fa      	ldr	r2, [r7, #12]
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	d01b      	beq.n	8009edc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8009ea4:	4b2c      	ldr	r3, [pc, #176]	; (8009f58 <plug_holes+0x140>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	68fa      	ldr	r2, [r7, #12]
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d102      	bne.n	8009eb4 <plug_holes+0x9c>
      lfree = mem;
 8009eae:	4a2a      	ldr	r2, [pc, #168]	; (8009f58 <plug_holes+0x140>)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	881a      	ldrh	r2, [r3, #0]
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	881b      	ldrh	r3, [r3, #0]
 8009ec0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009ec4:	d00a      	beq.n	8009edc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	881b      	ldrh	r3, [r3, #0]
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f7ff ff80 	bl	8009dd0 <ptr_to_mem>
 8009ed0:	4604      	mov	r4, r0
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f7ff ff8e 	bl	8009df4 <mem_to_ptr>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	885b      	ldrh	r3, [r3, #2]
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f7ff ff75 	bl	8009dd0 <ptr_to_mem>
 8009ee6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8009ee8:	68ba      	ldr	r2, [r7, #8]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d01f      	beq.n	8009f30 <plug_holes+0x118>
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	791b      	ldrb	r3, [r3, #4]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d11b      	bne.n	8009f30 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8009ef8:	4b17      	ldr	r3, [pc, #92]	; (8009f58 <plug_holes+0x140>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d102      	bne.n	8009f08 <plug_holes+0xf0>
      lfree = pmem;
 8009f02:	4a15      	ldr	r2, [pc, #84]	; (8009f58 <plug_holes+0x140>)
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	881a      	ldrh	r2, [r3, #0]
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	881b      	ldrh	r3, [r3, #0]
 8009f14:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009f18:	d00a      	beq.n	8009f30 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	881b      	ldrh	r3, [r3, #0]
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f7ff ff56 	bl	8009dd0 <ptr_to_mem>
 8009f24:	4604      	mov	r4, r0
 8009f26:	68b8      	ldr	r0, [r7, #8]
 8009f28:	f7ff ff64 	bl	8009df4 <mem_to_ptr>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8009f30:	bf00      	nop
 8009f32:	3714      	adds	r7, #20
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd90      	pop	{r4, r7, pc}
 8009f38:	20008504 	.word	0x20008504
 8009f3c:	080191a0 	.word	0x080191a0
 8009f40:	080191d0 	.word	0x080191d0
 8009f44:	080191e8 	.word	0x080191e8
 8009f48:	20008508 	.word	0x20008508
 8009f4c:	08019210 	.word	0x08019210
 8009f50:	0801922c 	.word	0x0801922c
 8009f54:	08019248 	.word	0x08019248
 8009f58:	20008510 	.word	0x20008510

08009f5c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b082      	sub	sp, #8
 8009f60:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8009f62:	4b1f      	ldr	r3, [pc, #124]	; (8009fe0 <mem_init+0x84>)
 8009f64:	3303      	adds	r3, #3
 8009f66:	f023 0303 	bic.w	r3, r3, #3
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	4b1d      	ldr	r3, [pc, #116]	; (8009fe4 <mem_init+0x88>)
 8009f6e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8009f70:	4b1c      	ldr	r3, [pc, #112]	; (8009fe4 <mem_init+0x88>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009f7c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2200      	movs	r2, #0
 8009f82:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2200      	movs	r2, #0
 8009f88:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8009f8a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8009f8e:	f7ff ff1f 	bl	8009dd0 <ptr_to_mem>
 8009f92:	4603      	mov	r3, r0
 8009f94:	4a14      	ldr	r2, [pc, #80]	; (8009fe8 <mem_init+0x8c>)
 8009f96:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8009f98:	4b13      	ldr	r3, [pc, #76]	; (8009fe8 <mem_init+0x8c>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8009fa0:	4b11      	ldr	r3, [pc, #68]	; (8009fe8 <mem_init+0x8c>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009fa8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8009faa:	4b0f      	ldr	r3, [pc, #60]	; (8009fe8 <mem_init+0x8c>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009fb2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8009fb4:	4b0b      	ldr	r3, [pc, #44]	; (8009fe4 <mem_init+0x88>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	4a0c      	ldr	r2, [pc, #48]	; (8009fec <mem_init+0x90>)
 8009fba:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8009fbc:	480c      	ldr	r0, [pc, #48]	; (8009ff0 <mem_init+0x94>)
 8009fbe:	f00c fec1 	bl	8016d44 <sys_mutex_new>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d006      	beq.n	8009fd6 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8009fc8:	4b0a      	ldr	r3, [pc, #40]	; (8009ff4 <mem_init+0x98>)
 8009fca:	f240 221f 	movw	r2, #543	; 0x21f
 8009fce:	490a      	ldr	r1, [pc, #40]	; (8009ff8 <mem_init+0x9c>)
 8009fd0:	480a      	ldr	r0, [pc, #40]	; (8009ffc <mem_init+0xa0>)
 8009fd2:	f00d f8e9 	bl	80171a8 <iprintf>
  }
}
 8009fd6:	bf00      	nop
 8009fd8:	3708      	adds	r7, #8
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}
 8009fde:	bf00      	nop
 8009fe0:	2000b8c0 	.word	0x2000b8c0
 8009fe4:	20008504 	.word	0x20008504
 8009fe8:	20008508 	.word	0x20008508
 8009fec:	20008510 	.word	0x20008510
 8009ff0:	2000850c 	.word	0x2000850c
 8009ff4:	080191a0 	.word	0x080191a0
 8009ff8:	08019274 	.word	0x08019274
 8009ffc:	080191e8 	.word	0x080191e8

0800a000 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b086      	sub	sp, #24
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f7ff fef3 	bl	8009df4 <mem_to_ptr>
 800a00e:	4603      	mov	r3, r0
 800a010:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	881b      	ldrh	r3, [r3, #0]
 800a016:	4618      	mov	r0, r3
 800a018:	f7ff feda 	bl	8009dd0 <ptr_to_mem>
 800a01c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	885b      	ldrh	r3, [r3, #2]
 800a022:	4618      	mov	r0, r3
 800a024:	f7ff fed4 	bl	8009dd0 <ptr_to_mem>
 800a028:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	881b      	ldrh	r3, [r3, #0]
 800a02e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a032:	d818      	bhi.n	800a066 <mem_link_valid+0x66>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	885b      	ldrh	r3, [r3, #2]
 800a038:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a03c:	d813      	bhi.n	800a066 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a042:	8afa      	ldrh	r2, [r7, #22]
 800a044:	429a      	cmp	r2, r3
 800a046:	d004      	beq.n	800a052 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	881b      	ldrh	r3, [r3, #0]
 800a04c:	8afa      	ldrh	r2, [r7, #22]
 800a04e:	429a      	cmp	r2, r3
 800a050:	d109      	bne.n	800a066 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a052:	4b08      	ldr	r3, [pc, #32]	; (800a074 <mem_link_valid+0x74>)
 800a054:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a056:	693a      	ldr	r2, [r7, #16]
 800a058:	429a      	cmp	r2, r3
 800a05a:	d006      	beq.n	800a06a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	885b      	ldrh	r3, [r3, #2]
 800a060:	8afa      	ldrh	r2, [r7, #22]
 800a062:	429a      	cmp	r2, r3
 800a064:	d001      	beq.n	800a06a <mem_link_valid+0x6a>
    return 0;
 800a066:	2300      	movs	r3, #0
 800a068:	e000      	b.n	800a06c <mem_link_valid+0x6c>
  }
  return 1;
 800a06a:	2301      	movs	r3, #1
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3718      	adds	r7, #24
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}
 800a074:	20008508 	.word	0x20008508

0800a078 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b088      	sub	sp, #32
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d070      	beq.n	800a168 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f003 0303 	and.w	r3, r3, #3
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d00d      	beq.n	800a0ac <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a090:	4b37      	ldr	r3, [pc, #220]	; (800a170 <mem_free+0xf8>)
 800a092:	f240 2273 	movw	r2, #627	; 0x273
 800a096:	4937      	ldr	r1, [pc, #220]	; (800a174 <mem_free+0xfc>)
 800a098:	4837      	ldr	r0, [pc, #220]	; (800a178 <mem_free+0x100>)
 800a09a:	f00d f885 	bl	80171a8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a09e:	f00c feaf 	bl	8016e00 <sys_arch_protect>
 800a0a2:	60f8      	str	r0, [r7, #12]
 800a0a4:	68f8      	ldr	r0, [r7, #12]
 800a0a6:	f00c feb9 	bl	8016e1c <sys_arch_unprotect>
    return;
 800a0aa:	e05e      	b.n	800a16a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	3b08      	subs	r3, #8
 800a0b0:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a0b2:	4b32      	ldr	r3, [pc, #200]	; (800a17c <mem_free+0x104>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	69fa      	ldr	r2, [r7, #28]
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	d306      	bcc.n	800a0ca <mem_free+0x52>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f103 020c 	add.w	r2, r3, #12
 800a0c2:	4b2f      	ldr	r3, [pc, #188]	; (800a180 <mem_free+0x108>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d90d      	bls.n	800a0e6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a0ca:	4b29      	ldr	r3, [pc, #164]	; (800a170 <mem_free+0xf8>)
 800a0cc:	f240 227f 	movw	r2, #639	; 0x27f
 800a0d0:	492c      	ldr	r1, [pc, #176]	; (800a184 <mem_free+0x10c>)
 800a0d2:	4829      	ldr	r0, [pc, #164]	; (800a178 <mem_free+0x100>)
 800a0d4:	f00d f868 	bl	80171a8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a0d8:	f00c fe92 	bl	8016e00 <sys_arch_protect>
 800a0dc:	6138      	str	r0, [r7, #16]
 800a0de:	6938      	ldr	r0, [r7, #16]
 800a0e0:	f00c fe9c 	bl	8016e1c <sys_arch_unprotect>
    return;
 800a0e4:	e041      	b.n	800a16a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a0e6:	4828      	ldr	r0, [pc, #160]	; (800a188 <mem_free+0x110>)
 800a0e8:	f00c fe48 	bl	8016d7c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800a0ec:	69fb      	ldr	r3, [r7, #28]
 800a0ee:	791b      	ldrb	r3, [r3, #4]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d110      	bne.n	800a116 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a0f4:	4b1e      	ldr	r3, [pc, #120]	; (800a170 <mem_free+0xf8>)
 800a0f6:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800a0fa:	4924      	ldr	r1, [pc, #144]	; (800a18c <mem_free+0x114>)
 800a0fc:	481e      	ldr	r0, [pc, #120]	; (800a178 <mem_free+0x100>)
 800a0fe:	f00d f853 	bl	80171a8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a102:	4821      	ldr	r0, [pc, #132]	; (800a188 <mem_free+0x110>)
 800a104:	f00c fe49 	bl	8016d9a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a108:	f00c fe7a 	bl	8016e00 <sys_arch_protect>
 800a10c:	6178      	str	r0, [r7, #20]
 800a10e:	6978      	ldr	r0, [r7, #20]
 800a110:	f00c fe84 	bl	8016e1c <sys_arch_unprotect>
    return;
 800a114:	e029      	b.n	800a16a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800a116:	69f8      	ldr	r0, [r7, #28]
 800a118:	f7ff ff72 	bl	800a000 <mem_link_valid>
 800a11c:	4603      	mov	r3, r0
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d110      	bne.n	800a144 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a122:	4b13      	ldr	r3, [pc, #76]	; (800a170 <mem_free+0xf8>)
 800a124:	f240 2295 	movw	r2, #661	; 0x295
 800a128:	4919      	ldr	r1, [pc, #100]	; (800a190 <mem_free+0x118>)
 800a12a:	4813      	ldr	r0, [pc, #76]	; (800a178 <mem_free+0x100>)
 800a12c:	f00d f83c 	bl	80171a8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a130:	4815      	ldr	r0, [pc, #84]	; (800a188 <mem_free+0x110>)
 800a132:	f00c fe32 	bl	8016d9a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a136:	f00c fe63 	bl	8016e00 <sys_arch_protect>
 800a13a:	61b8      	str	r0, [r7, #24]
 800a13c:	69b8      	ldr	r0, [r7, #24]
 800a13e:	f00c fe6d 	bl	8016e1c <sys_arch_unprotect>
    return;
 800a142:	e012      	b.n	800a16a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a144:	69fb      	ldr	r3, [r7, #28]
 800a146:	2200      	movs	r2, #0
 800a148:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a14a:	4b12      	ldr	r3, [pc, #72]	; (800a194 <mem_free+0x11c>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	69fa      	ldr	r2, [r7, #28]
 800a150:	429a      	cmp	r2, r3
 800a152:	d202      	bcs.n	800a15a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a154:	4a0f      	ldr	r2, [pc, #60]	; (800a194 <mem_free+0x11c>)
 800a156:	69fb      	ldr	r3, [r7, #28]
 800a158:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a15a:	69f8      	ldr	r0, [r7, #28]
 800a15c:	f7ff fe5c 	bl	8009e18 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a160:	4809      	ldr	r0, [pc, #36]	; (800a188 <mem_free+0x110>)
 800a162:	f00c fe1a 	bl	8016d9a <sys_mutex_unlock>
 800a166:	e000      	b.n	800a16a <mem_free+0xf2>
    return;
 800a168:	bf00      	nop
}
 800a16a:	3720      	adds	r7, #32
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}
 800a170:	080191a0 	.word	0x080191a0
 800a174:	08019290 	.word	0x08019290
 800a178:	080191e8 	.word	0x080191e8
 800a17c:	20008504 	.word	0x20008504
 800a180:	20008508 	.word	0x20008508
 800a184:	080192b4 	.word	0x080192b4
 800a188:	2000850c 	.word	0x2000850c
 800a18c:	080192d0 	.word	0x080192d0
 800a190:	080192f8 	.word	0x080192f8
 800a194:	20008510 	.word	0x20008510

0800a198 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b088      	sub	sp, #32
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a1a4:	887b      	ldrh	r3, [r7, #2]
 800a1a6:	3303      	adds	r3, #3
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	f023 0303 	bic.w	r3, r3, #3
 800a1ae:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a1b0:	8bfb      	ldrh	r3, [r7, #30]
 800a1b2:	2b0b      	cmp	r3, #11
 800a1b4:	d801      	bhi.n	800a1ba <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a1b6:	230c      	movs	r3, #12
 800a1b8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a1ba:	8bfb      	ldrh	r3, [r7, #30]
 800a1bc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a1c0:	d803      	bhi.n	800a1ca <mem_trim+0x32>
 800a1c2:	8bfa      	ldrh	r2, [r7, #30]
 800a1c4:	887b      	ldrh	r3, [r7, #2]
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d201      	bcs.n	800a1ce <mem_trim+0x36>
    return NULL;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	e0d8      	b.n	800a380 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a1ce:	4b6e      	ldr	r3, [pc, #440]	; (800a388 <mem_trim+0x1f0>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d304      	bcc.n	800a1e2 <mem_trim+0x4a>
 800a1d8:	4b6c      	ldr	r3, [pc, #432]	; (800a38c <mem_trim+0x1f4>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	687a      	ldr	r2, [r7, #4]
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	d306      	bcc.n	800a1f0 <mem_trim+0x58>
 800a1e2:	4b6b      	ldr	r3, [pc, #428]	; (800a390 <mem_trim+0x1f8>)
 800a1e4:	f240 22d1 	movw	r2, #721	; 0x2d1
 800a1e8:	496a      	ldr	r1, [pc, #424]	; (800a394 <mem_trim+0x1fc>)
 800a1ea:	486b      	ldr	r0, [pc, #428]	; (800a398 <mem_trim+0x200>)
 800a1ec:	f00c ffdc 	bl	80171a8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a1f0:	4b65      	ldr	r3, [pc, #404]	; (800a388 <mem_trim+0x1f0>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	429a      	cmp	r2, r3
 800a1f8:	d304      	bcc.n	800a204 <mem_trim+0x6c>
 800a1fa:	4b64      	ldr	r3, [pc, #400]	; (800a38c <mem_trim+0x1f4>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	687a      	ldr	r2, [r7, #4]
 800a200:	429a      	cmp	r2, r3
 800a202:	d307      	bcc.n	800a214 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a204:	f00c fdfc 	bl	8016e00 <sys_arch_protect>
 800a208:	60b8      	str	r0, [r7, #8]
 800a20a:	68b8      	ldr	r0, [r7, #8]
 800a20c:	f00c fe06 	bl	8016e1c <sys_arch_unprotect>
    return rmem;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	e0b5      	b.n	800a380 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	3b08      	subs	r3, #8
 800a218:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a21a:	69b8      	ldr	r0, [r7, #24]
 800a21c:	f7ff fdea 	bl	8009df4 <mem_to_ptr>
 800a220:	4603      	mov	r3, r0
 800a222:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a224:	69bb      	ldr	r3, [r7, #24]
 800a226:	881a      	ldrh	r2, [r3, #0]
 800a228:	8afb      	ldrh	r3, [r7, #22]
 800a22a:	1ad3      	subs	r3, r2, r3
 800a22c:	b29b      	uxth	r3, r3
 800a22e:	3b08      	subs	r3, #8
 800a230:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a232:	8bfa      	ldrh	r2, [r7, #30]
 800a234:	8abb      	ldrh	r3, [r7, #20]
 800a236:	429a      	cmp	r2, r3
 800a238:	d906      	bls.n	800a248 <mem_trim+0xb0>
 800a23a:	4b55      	ldr	r3, [pc, #340]	; (800a390 <mem_trim+0x1f8>)
 800a23c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800a240:	4956      	ldr	r1, [pc, #344]	; (800a39c <mem_trim+0x204>)
 800a242:	4855      	ldr	r0, [pc, #340]	; (800a398 <mem_trim+0x200>)
 800a244:	f00c ffb0 	bl	80171a8 <iprintf>
  if (newsize > size) {
 800a248:	8bfa      	ldrh	r2, [r7, #30]
 800a24a:	8abb      	ldrh	r3, [r7, #20]
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d901      	bls.n	800a254 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800a250:	2300      	movs	r3, #0
 800a252:	e095      	b.n	800a380 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800a254:	8bfa      	ldrh	r2, [r7, #30]
 800a256:	8abb      	ldrh	r3, [r7, #20]
 800a258:	429a      	cmp	r2, r3
 800a25a:	d101      	bne.n	800a260 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	e08f      	b.n	800a380 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a260:	484f      	ldr	r0, [pc, #316]	; (800a3a0 <mem_trim+0x208>)
 800a262:	f00c fd8b 	bl	8016d7c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800a266:	69bb      	ldr	r3, [r7, #24]
 800a268:	881b      	ldrh	r3, [r3, #0]
 800a26a:	4618      	mov	r0, r3
 800a26c:	f7ff fdb0 	bl	8009dd0 <ptr_to_mem>
 800a270:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	791b      	ldrb	r3, [r3, #4]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d13f      	bne.n	800a2fa <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a27a:	69bb      	ldr	r3, [r7, #24]
 800a27c:	881b      	ldrh	r3, [r3, #0]
 800a27e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a282:	d106      	bne.n	800a292 <mem_trim+0xfa>
 800a284:	4b42      	ldr	r3, [pc, #264]	; (800a390 <mem_trim+0x1f8>)
 800a286:	f240 22f5 	movw	r2, #757	; 0x2f5
 800a28a:	4946      	ldr	r1, [pc, #280]	; (800a3a4 <mem_trim+0x20c>)
 800a28c:	4842      	ldr	r0, [pc, #264]	; (800a398 <mem_trim+0x200>)
 800a28e:	f00c ff8b 	bl	80171a8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	881b      	ldrh	r3, [r3, #0]
 800a296:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a298:	8afa      	ldrh	r2, [r7, #22]
 800a29a:	8bfb      	ldrh	r3, [r7, #30]
 800a29c:	4413      	add	r3, r2
 800a29e:	b29b      	uxth	r3, r3
 800a2a0:	3308      	adds	r3, #8
 800a2a2:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a2a4:	4b40      	ldr	r3, [pc, #256]	; (800a3a8 <mem_trim+0x210>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	693a      	ldr	r2, [r7, #16]
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	d106      	bne.n	800a2bc <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800a2ae:	89fb      	ldrh	r3, [r7, #14]
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f7ff fd8d 	bl	8009dd0 <ptr_to_mem>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	4a3b      	ldr	r2, [pc, #236]	; (800a3a8 <mem_trim+0x210>)
 800a2ba:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a2bc:	89fb      	ldrh	r3, [r7, #14]
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f7ff fd86 	bl	8009dd0 <ptr_to_mem>
 800a2c4:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	89ba      	ldrh	r2, [r7, #12]
 800a2d0:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	8afa      	ldrh	r2, [r7, #22]
 800a2d6:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a2d8:	69bb      	ldr	r3, [r7, #24]
 800a2da:	89fa      	ldrh	r2, [r7, #14]
 800a2dc:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	881b      	ldrh	r3, [r3, #0]
 800a2e2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a2e6:	d047      	beq.n	800a378 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	881b      	ldrh	r3, [r3, #0]
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f7ff fd6f 	bl	8009dd0 <ptr_to_mem>
 800a2f2:	4602      	mov	r2, r0
 800a2f4:	89fb      	ldrh	r3, [r7, #14]
 800a2f6:	8053      	strh	r3, [r2, #2]
 800a2f8:	e03e      	b.n	800a378 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a2fa:	8bfb      	ldrh	r3, [r7, #30]
 800a2fc:	f103 0214 	add.w	r2, r3, #20
 800a300:	8abb      	ldrh	r3, [r7, #20]
 800a302:	429a      	cmp	r2, r3
 800a304:	d838      	bhi.n	800a378 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a306:	8afa      	ldrh	r2, [r7, #22]
 800a308:	8bfb      	ldrh	r3, [r7, #30]
 800a30a:	4413      	add	r3, r2
 800a30c:	b29b      	uxth	r3, r3
 800a30e:	3308      	adds	r3, #8
 800a310:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a312:	69bb      	ldr	r3, [r7, #24]
 800a314:	881b      	ldrh	r3, [r3, #0]
 800a316:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a31a:	d106      	bne.n	800a32a <mem_trim+0x192>
 800a31c:	4b1c      	ldr	r3, [pc, #112]	; (800a390 <mem_trim+0x1f8>)
 800a31e:	f240 3216 	movw	r2, #790	; 0x316
 800a322:	4920      	ldr	r1, [pc, #128]	; (800a3a4 <mem_trim+0x20c>)
 800a324:	481c      	ldr	r0, [pc, #112]	; (800a398 <mem_trim+0x200>)
 800a326:	f00c ff3f 	bl	80171a8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a32a:	89fb      	ldrh	r3, [r7, #14]
 800a32c:	4618      	mov	r0, r3
 800a32e:	f7ff fd4f 	bl	8009dd0 <ptr_to_mem>
 800a332:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a334:	4b1c      	ldr	r3, [pc, #112]	; (800a3a8 <mem_trim+0x210>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	693a      	ldr	r2, [r7, #16]
 800a33a:	429a      	cmp	r2, r3
 800a33c:	d202      	bcs.n	800a344 <mem_trim+0x1ac>
      lfree = mem2;
 800a33e:	4a1a      	ldr	r2, [pc, #104]	; (800a3a8 <mem_trim+0x210>)
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	2200      	movs	r2, #0
 800a348:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a34a:	69bb      	ldr	r3, [r7, #24]
 800a34c:	881a      	ldrh	r2, [r3, #0]
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	8afa      	ldrh	r2, [r7, #22]
 800a356:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a358:	69bb      	ldr	r3, [r7, #24]
 800a35a:	89fa      	ldrh	r2, [r7, #14]
 800a35c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a35e:	693b      	ldr	r3, [r7, #16]
 800a360:	881b      	ldrh	r3, [r3, #0]
 800a362:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a366:	d007      	beq.n	800a378 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	881b      	ldrh	r3, [r3, #0]
 800a36c:	4618      	mov	r0, r3
 800a36e:	f7ff fd2f 	bl	8009dd0 <ptr_to_mem>
 800a372:	4602      	mov	r2, r0
 800a374:	89fb      	ldrh	r3, [r7, #14]
 800a376:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a378:	4809      	ldr	r0, [pc, #36]	; (800a3a0 <mem_trim+0x208>)
 800a37a:	f00c fd0e 	bl	8016d9a <sys_mutex_unlock>
  return rmem;
 800a37e:	687b      	ldr	r3, [r7, #4]
}
 800a380:	4618      	mov	r0, r3
 800a382:	3720      	adds	r7, #32
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}
 800a388:	20008504 	.word	0x20008504
 800a38c:	20008508 	.word	0x20008508
 800a390:	080191a0 	.word	0x080191a0
 800a394:	0801932c 	.word	0x0801932c
 800a398:	080191e8 	.word	0x080191e8
 800a39c:	08019344 	.word	0x08019344
 800a3a0:	2000850c 	.word	0x2000850c
 800a3a4:	08019364 	.word	0x08019364
 800a3a8:	20008510 	.word	0x20008510

0800a3ac <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b088      	sub	sp, #32
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a3b6:	88fb      	ldrh	r3, [r7, #6]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d101      	bne.n	800a3c0 <mem_malloc+0x14>
    return NULL;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	e0e2      	b.n	800a586 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a3c0:	88fb      	ldrh	r3, [r7, #6]
 800a3c2:	3303      	adds	r3, #3
 800a3c4:	b29b      	uxth	r3, r3
 800a3c6:	f023 0303 	bic.w	r3, r3, #3
 800a3ca:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a3cc:	8bbb      	ldrh	r3, [r7, #28]
 800a3ce:	2b0b      	cmp	r3, #11
 800a3d0:	d801      	bhi.n	800a3d6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a3d2:	230c      	movs	r3, #12
 800a3d4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a3d6:	8bbb      	ldrh	r3, [r7, #28]
 800a3d8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a3dc:	d803      	bhi.n	800a3e6 <mem_malloc+0x3a>
 800a3de:	8bba      	ldrh	r2, [r7, #28]
 800a3e0:	88fb      	ldrh	r3, [r7, #6]
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d201      	bcs.n	800a3ea <mem_malloc+0x3e>
    return NULL;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	e0cd      	b.n	800a586 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800a3ea:	4869      	ldr	r0, [pc, #420]	; (800a590 <mem_malloc+0x1e4>)
 800a3ec:	f00c fcc6 	bl	8016d7c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a3f0:	4b68      	ldr	r3, [pc, #416]	; (800a594 <mem_malloc+0x1e8>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f7ff fcfd 	bl	8009df4 <mem_to_ptr>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	83fb      	strh	r3, [r7, #30]
 800a3fe:	e0b7      	b.n	800a570 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a400:	8bfb      	ldrh	r3, [r7, #30]
 800a402:	4618      	mov	r0, r3
 800a404:	f7ff fce4 	bl	8009dd0 <ptr_to_mem>
 800a408:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	791b      	ldrb	r3, [r3, #4]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	f040 80a7 	bne.w	800a562 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	881b      	ldrh	r3, [r3, #0]
 800a418:	461a      	mov	r2, r3
 800a41a:	8bfb      	ldrh	r3, [r7, #30]
 800a41c:	1ad3      	subs	r3, r2, r3
 800a41e:	f1a3 0208 	sub.w	r2, r3, #8
 800a422:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a424:	429a      	cmp	r2, r3
 800a426:	f0c0 809c 	bcc.w	800a562 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	881b      	ldrh	r3, [r3, #0]
 800a42e:	461a      	mov	r2, r3
 800a430:	8bfb      	ldrh	r3, [r7, #30]
 800a432:	1ad3      	subs	r3, r2, r3
 800a434:	f1a3 0208 	sub.w	r2, r3, #8
 800a438:	8bbb      	ldrh	r3, [r7, #28]
 800a43a:	3314      	adds	r3, #20
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d333      	bcc.n	800a4a8 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a440:	8bfa      	ldrh	r2, [r7, #30]
 800a442:	8bbb      	ldrh	r3, [r7, #28]
 800a444:	4413      	add	r3, r2
 800a446:	b29b      	uxth	r3, r3
 800a448:	3308      	adds	r3, #8
 800a44a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a44c:	8a7b      	ldrh	r3, [r7, #18]
 800a44e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a452:	d106      	bne.n	800a462 <mem_malloc+0xb6>
 800a454:	4b50      	ldr	r3, [pc, #320]	; (800a598 <mem_malloc+0x1ec>)
 800a456:	f240 3287 	movw	r2, #903	; 0x387
 800a45a:	4950      	ldr	r1, [pc, #320]	; (800a59c <mem_malloc+0x1f0>)
 800a45c:	4850      	ldr	r0, [pc, #320]	; (800a5a0 <mem_malloc+0x1f4>)
 800a45e:	f00c fea3 	bl	80171a8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a462:	8a7b      	ldrh	r3, [r7, #18]
 800a464:	4618      	mov	r0, r3
 800a466:	f7ff fcb3 	bl	8009dd0 <ptr_to_mem>
 800a46a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	2200      	movs	r2, #0
 800a470:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	881a      	ldrh	r2, [r3, #0]
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	8bfa      	ldrh	r2, [r7, #30]
 800a47e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	8a7a      	ldrh	r2, [r7, #18]
 800a484:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	2201      	movs	r2, #1
 800a48a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	881b      	ldrh	r3, [r3, #0]
 800a490:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a494:	d00b      	beq.n	800a4ae <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	881b      	ldrh	r3, [r3, #0]
 800a49a:	4618      	mov	r0, r3
 800a49c:	f7ff fc98 	bl	8009dd0 <ptr_to_mem>
 800a4a0:	4602      	mov	r2, r0
 800a4a2:	8a7b      	ldrh	r3, [r7, #18]
 800a4a4:	8053      	strh	r3, [r2, #2]
 800a4a6:	e002      	b.n	800a4ae <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a4ae:	4b39      	ldr	r3, [pc, #228]	; (800a594 <mem_malloc+0x1e8>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	697a      	ldr	r2, [r7, #20]
 800a4b4:	429a      	cmp	r2, r3
 800a4b6:	d127      	bne.n	800a508 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800a4b8:	4b36      	ldr	r3, [pc, #216]	; (800a594 <mem_malloc+0x1e8>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a4be:	e005      	b.n	800a4cc <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800a4c0:	69bb      	ldr	r3, [r7, #24]
 800a4c2:	881b      	ldrh	r3, [r3, #0]
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f7ff fc83 	bl	8009dd0 <ptr_to_mem>
 800a4ca:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800a4cc:	69bb      	ldr	r3, [r7, #24]
 800a4ce:	791b      	ldrb	r3, [r3, #4]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d004      	beq.n	800a4de <mem_malloc+0x132>
 800a4d4:	4b33      	ldr	r3, [pc, #204]	; (800a5a4 <mem_malloc+0x1f8>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	69ba      	ldr	r2, [r7, #24]
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d1f0      	bne.n	800a4c0 <mem_malloc+0x114>
          }
          lfree = cur;
 800a4de:	4a2d      	ldr	r2, [pc, #180]	; (800a594 <mem_malloc+0x1e8>)
 800a4e0:	69bb      	ldr	r3, [r7, #24]
 800a4e2:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a4e4:	4b2b      	ldr	r3, [pc, #172]	; (800a594 <mem_malloc+0x1e8>)
 800a4e6:	681a      	ldr	r2, [r3, #0]
 800a4e8:	4b2e      	ldr	r3, [pc, #184]	; (800a5a4 <mem_malloc+0x1f8>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	d00b      	beq.n	800a508 <mem_malloc+0x15c>
 800a4f0:	4b28      	ldr	r3, [pc, #160]	; (800a594 <mem_malloc+0x1e8>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	791b      	ldrb	r3, [r3, #4]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d006      	beq.n	800a508 <mem_malloc+0x15c>
 800a4fa:	4b27      	ldr	r3, [pc, #156]	; (800a598 <mem_malloc+0x1ec>)
 800a4fc:	f240 32b5 	movw	r2, #949	; 0x3b5
 800a500:	4929      	ldr	r1, [pc, #164]	; (800a5a8 <mem_malloc+0x1fc>)
 800a502:	4827      	ldr	r0, [pc, #156]	; (800a5a0 <mem_malloc+0x1f4>)
 800a504:	f00c fe50 	bl	80171a8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800a508:	4821      	ldr	r0, [pc, #132]	; (800a590 <mem_malloc+0x1e4>)
 800a50a:	f00c fc46 	bl	8016d9a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a50e:	8bba      	ldrh	r2, [r7, #28]
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	4413      	add	r3, r2
 800a514:	3308      	adds	r3, #8
 800a516:	4a23      	ldr	r2, [pc, #140]	; (800a5a4 <mem_malloc+0x1f8>)
 800a518:	6812      	ldr	r2, [r2, #0]
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d906      	bls.n	800a52c <mem_malloc+0x180>
 800a51e:	4b1e      	ldr	r3, [pc, #120]	; (800a598 <mem_malloc+0x1ec>)
 800a520:	f240 32b9 	movw	r2, #953	; 0x3b9
 800a524:	4921      	ldr	r1, [pc, #132]	; (800a5ac <mem_malloc+0x200>)
 800a526:	481e      	ldr	r0, [pc, #120]	; (800a5a0 <mem_malloc+0x1f4>)
 800a528:	f00c fe3e 	bl	80171a8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	f003 0303 	and.w	r3, r3, #3
 800a532:	2b00      	cmp	r3, #0
 800a534:	d006      	beq.n	800a544 <mem_malloc+0x198>
 800a536:	4b18      	ldr	r3, [pc, #96]	; (800a598 <mem_malloc+0x1ec>)
 800a538:	f240 32bb 	movw	r2, #955	; 0x3bb
 800a53c:	491c      	ldr	r1, [pc, #112]	; (800a5b0 <mem_malloc+0x204>)
 800a53e:	4818      	ldr	r0, [pc, #96]	; (800a5a0 <mem_malloc+0x1f4>)
 800a540:	f00c fe32 	bl	80171a8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	f003 0303 	and.w	r3, r3, #3
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d006      	beq.n	800a55c <mem_malloc+0x1b0>
 800a54e:	4b12      	ldr	r3, [pc, #72]	; (800a598 <mem_malloc+0x1ec>)
 800a550:	f240 32bd 	movw	r2, #957	; 0x3bd
 800a554:	4917      	ldr	r1, [pc, #92]	; (800a5b4 <mem_malloc+0x208>)
 800a556:	4812      	ldr	r0, [pc, #72]	; (800a5a0 <mem_malloc+0x1f4>)
 800a558:	f00c fe26 	bl	80171a8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	3308      	adds	r3, #8
 800a560:	e011      	b.n	800a586 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800a562:	8bfb      	ldrh	r3, [r7, #30]
 800a564:	4618      	mov	r0, r3
 800a566:	f7ff fc33 	bl	8009dd0 <ptr_to_mem>
 800a56a:	4603      	mov	r3, r0
 800a56c:	881b      	ldrh	r3, [r3, #0]
 800a56e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a570:	8bfa      	ldrh	r2, [r7, #30]
 800a572:	8bbb      	ldrh	r3, [r7, #28]
 800a574:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800a578:	429a      	cmp	r2, r3
 800a57a:	f4ff af41 	bcc.w	800a400 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800a57e:	4804      	ldr	r0, [pc, #16]	; (800a590 <mem_malloc+0x1e4>)
 800a580:	f00c fc0b 	bl	8016d9a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800a584:	2300      	movs	r3, #0
}
 800a586:	4618      	mov	r0, r3
 800a588:	3720      	adds	r7, #32
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}
 800a58e:	bf00      	nop
 800a590:	2000850c 	.word	0x2000850c
 800a594:	20008510 	.word	0x20008510
 800a598:	080191a0 	.word	0x080191a0
 800a59c:	08019364 	.word	0x08019364
 800a5a0:	080191e8 	.word	0x080191e8
 800a5a4:	20008508 	.word	0x20008508
 800a5a8:	08019378 	.word	0x08019378
 800a5ac:	08019394 	.word	0x08019394
 800a5b0:	080193c4 	.word	0x080193c4
 800a5b4:	080193f4 	.word	0x080193f4

0800a5b8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b085      	sub	sp, #20
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	689b      	ldr	r3, [r3, #8]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	685b      	ldr	r3, [r3, #4]
 800a5cc:	3303      	adds	r3, #3
 800a5ce:	f023 0303 	bic.w	r3, r3, #3
 800a5d2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	60fb      	str	r3, [r7, #12]
 800a5d8:	e011      	b.n	800a5fe <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	689b      	ldr	r3, [r3, #8]
 800a5de:	681a      	ldr	r2, [r3, #0]
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	689b      	ldr	r3, [r3, #8]
 800a5e8:	68ba      	ldr	r2, [r7, #8]
 800a5ea:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	881b      	ldrh	r3, [r3, #0]
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	4413      	add	r3, r2
 800a5f6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	3301      	adds	r3, #1
 800a5fc:	60fb      	str	r3, [r7, #12]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	885b      	ldrh	r3, [r3, #2]
 800a602:	461a      	mov	r2, r3
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	4293      	cmp	r3, r2
 800a608:	dbe7      	blt.n	800a5da <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800a60a:	bf00      	nop
 800a60c:	bf00      	nop
 800a60e:	3714      	adds	r7, #20
 800a610:	46bd      	mov	sp, r7
 800a612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a616:	4770      	bx	lr

0800a618 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b082      	sub	sp, #8
 800a61c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a61e:	2300      	movs	r3, #0
 800a620:	80fb      	strh	r3, [r7, #6]
 800a622:	e009      	b.n	800a638 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800a624:	88fb      	ldrh	r3, [r7, #6]
 800a626:	4a08      	ldr	r2, [pc, #32]	; (800a648 <memp_init+0x30>)
 800a628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a62c:	4618      	mov	r0, r3
 800a62e:	f7ff ffc3 	bl	800a5b8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a632:	88fb      	ldrh	r3, [r7, #6]
 800a634:	3301      	adds	r3, #1
 800a636:	80fb      	strh	r3, [r7, #6]
 800a638:	88fb      	ldrh	r3, [r7, #6]
 800a63a:	2b0c      	cmp	r3, #12
 800a63c:	d9f2      	bls.n	800a624 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800a63e:	bf00      	nop
 800a640:	bf00      	nop
 800a642:	3708      	adds	r7, #8
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}
 800a648:	0801bfa0 	.word	0x0801bfa0

0800a64c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800a654:	f00c fbd4 	bl	8016e00 <sys_arch_protect>
 800a658:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	689b      	ldr	r3, [r3, #8]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d015      	beq.n	800a694 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	689b      	ldr	r3, [r3, #8]
 800a66c:	68ba      	ldr	r2, [r7, #8]
 800a66e:	6812      	ldr	r2, [r2, #0]
 800a670:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	f003 0303 	and.w	r3, r3, #3
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d006      	beq.n	800a68a <do_memp_malloc_pool+0x3e>
 800a67c:	4b09      	ldr	r3, [pc, #36]	; (800a6a4 <do_memp_malloc_pool+0x58>)
 800a67e:	f44f 728c 	mov.w	r2, #280	; 0x118
 800a682:	4909      	ldr	r1, [pc, #36]	; (800a6a8 <do_memp_malloc_pool+0x5c>)
 800a684:	4809      	ldr	r0, [pc, #36]	; (800a6ac <do_memp_malloc_pool+0x60>)
 800a686:	f00c fd8f 	bl	80171a8 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800a68a:	68f8      	ldr	r0, [r7, #12]
 800a68c:	f00c fbc6 	bl	8016e1c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	e003      	b.n	800a69c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800a694:	68f8      	ldr	r0, [r7, #12]
 800a696:	f00c fbc1 	bl	8016e1c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800a69a:	2300      	movs	r3, #0
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3710      	adds	r7, #16
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}
 800a6a4:	08019418 	.word	0x08019418
 800a6a8:	08019448 	.word	0x08019448
 800a6ac:	0801946c 	.word	0x0801946c

0800a6b0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b084      	sub	sp, #16
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800a6ba:	79fb      	ldrb	r3, [r7, #7]
 800a6bc:	2b0c      	cmp	r3, #12
 800a6be:	d908      	bls.n	800a6d2 <memp_malloc+0x22>
 800a6c0:	4b0a      	ldr	r3, [pc, #40]	; (800a6ec <memp_malloc+0x3c>)
 800a6c2:	f240 1257 	movw	r2, #343	; 0x157
 800a6c6:	490a      	ldr	r1, [pc, #40]	; (800a6f0 <memp_malloc+0x40>)
 800a6c8:	480a      	ldr	r0, [pc, #40]	; (800a6f4 <memp_malloc+0x44>)
 800a6ca:	f00c fd6d 	bl	80171a8 <iprintf>
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	e008      	b.n	800a6e4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800a6d2:	79fb      	ldrb	r3, [r7, #7]
 800a6d4:	4a08      	ldr	r2, [pc, #32]	; (800a6f8 <memp_malloc+0x48>)
 800a6d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f7ff ffb6 	bl	800a64c <do_memp_malloc_pool>
 800a6e0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3710      	adds	r7, #16
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}
 800a6ec:	08019418 	.word	0x08019418
 800a6f0:	080194a8 	.word	0x080194a8
 800a6f4:	0801946c 	.word	0x0801946c
 800a6f8:	0801bfa0 	.word	0x0801bfa0

0800a6fc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b084      	sub	sp, #16
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	f003 0303 	and.w	r3, r3, #3
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d006      	beq.n	800a71e <do_memp_free_pool+0x22>
 800a710:	4b0d      	ldr	r3, [pc, #52]	; (800a748 <do_memp_free_pool+0x4c>)
 800a712:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800a716:	490d      	ldr	r1, [pc, #52]	; (800a74c <do_memp_free_pool+0x50>)
 800a718:	480d      	ldr	r0, [pc, #52]	; (800a750 <do_memp_free_pool+0x54>)
 800a71a:	f00c fd45 	bl	80171a8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800a722:	f00c fb6d 	bl	8016e00 <sys_arch_protect>
 800a726:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	689b      	ldr	r3, [r3, #8]
 800a72c:	681a      	ldr	r2, [r3, #0]
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	689b      	ldr	r3, [r3, #8]
 800a736:	68fa      	ldr	r2, [r7, #12]
 800a738:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800a73a:	68b8      	ldr	r0, [r7, #8]
 800a73c:	f00c fb6e 	bl	8016e1c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800a740:	bf00      	nop
 800a742:	3710      	adds	r7, #16
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}
 800a748:	08019418 	.word	0x08019418
 800a74c:	080194c8 	.word	0x080194c8
 800a750:	0801946c 	.word	0x0801946c

0800a754 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b082      	sub	sp, #8
 800a758:	af00      	add	r7, sp, #0
 800a75a:	4603      	mov	r3, r0
 800a75c:	6039      	str	r1, [r7, #0]
 800a75e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800a760:	79fb      	ldrb	r3, [r7, #7]
 800a762:	2b0c      	cmp	r3, #12
 800a764:	d907      	bls.n	800a776 <memp_free+0x22>
 800a766:	4b0c      	ldr	r3, [pc, #48]	; (800a798 <memp_free+0x44>)
 800a768:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800a76c:	490b      	ldr	r1, [pc, #44]	; (800a79c <memp_free+0x48>)
 800a76e:	480c      	ldr	r0, [pc, #48]	; (800a7a0 <memp_free+0x4c>)
 800a770:	f00c fd1a 	bl	80171a8 <iprintf>
 800a774:	e00c      	b.n	800a790 <memp_free+0x3c>

  if (mem == NULL) {
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d008      	beq.n	800a78e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800a77c:	79fb      	ldrb	r3, [r7, #7]
 800a77e:	4a09      	ldr	r2, [pc, #36]	; (800a7a4 <memp_free+0x50>)
 800a780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a784:	6839      	ldr	r1, [r7, #0]
 800a786:	4618      	mov	r0, r3
 800a788:	f7ff ffb8 	bl	800a6fc <do_memp_free_pool>
 800a78c:	e000      	b.n	800a790 <memp_free+0x3c>
    return;
 800a78e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800a790:	3708      	adds	r7, #8
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}
 800a796:	bf00      	nop
 800a798:	08019418 	.word	0x08019418
 800a79c:	080194e8 	.word	0x080194e8
 800a7a0:	0801946c 	.word	0x0801946c
 800a7a4:	0801bfa0 	.word	0x0801bfa0

0800a7a8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800a7ac:	bf00      	nop
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr
	...

0800a7b8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b086      	sub	sp, #24
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	60f8      	str	r0, [r7, #12]
 800a7c0:	60b9      	str	r1, [r7, #8]
 800a7c2:	607a      	str	r2, [r7, #4]
 800a7c4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d108      	bne.n	800a7de <netif_add+0x26>
 800a7cc:	4b5b      	ldr	r3, [pc, #364]	; (800a93c <netif_add+0x184>)
 800a7ce:	f240 1227 	movw	r2, #295	; 0x127
 800a7d2:	495b      	ldr	r1, [pc, #364]	; (800a940 <netif_add+0x188>)
 800a7d4:	485b      	ldr	r0, [pc, #364]	; (800a944 <netif_add+0x18c>)
 800a7d6:	f00c fce7 	bl	80171a8 <iprintf>
 800a7da:	2300      	movs	r3, #0
 800a7dc:	e0a9      	b.n	800a932 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800a7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d108      	bne.n	800a7f6 <netif_add+0x3e>
 800a7e4:	4b55      	ldr	r3, [pc, #340]	; (800a93c <netif_add+0x184>)
 800a7e6:	f44f 7294 	mov.w	r2, #296	; 0x128
 800a7ea:	4957      	ldr	r1, [pc, #348]	; (800a948 <netif_add+0x190>)
 800a7ec:	4855      	ldr	r0, [pc, #340]	; (800a944 <netif_add+0x18c>)
 800a7ee:	f00c fcdb 	bl	80171a8 <iprintf>
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	e09d      	b.n	800a932 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d101      	bne.n	800a800 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800a7fc:	4b53      	ldr	r3, [pc, #332]	; (800a94c <netif_add+0x194>)
 800a7fe:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d101      	bne.n	800a80a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800a806:	4b51      	ldr	r3, [pc, #324]	; (800a94c <netif_add+0x194>)
 800a808:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d101      	bne.n	800a814 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800a810:	4b4e      	ldr	r3, [pc, #312]	; (800a94c <netif_add+0x194>)
 800a812:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2200      	movs	r2, #0
 800a818:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	2200      	movs	r2, #0
 800a81e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	2200      	movs	r2, #0
 800a824:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	4a49      	ldr	r2, [pc, #292]	; (800a950 <netif_add+0x198>)
 800a82a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	2200      	movs	r2, #0
 800a830:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	2200      	movs	r2, #0
 800a836:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	3324      	adds	r3, #36	; 0x24
 800a83e:	2204      	movs	r2, #4
 800a840:	2100      	movs	r1, #0
 800a842:	4618      	mov	r0, r3
 800a844:	f00c fc4d 	bl	80170e2 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2200      	movs	r2, #0
 800a84c:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	6a3a      	ldr	r2, [r7, #32]
 800a852:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800a854:	4b3f      	ldr	r3, [pc, #252]	; (800a954 <netif_add+0x19c>)
 800a856:	781a      	ldrb	r2, [r3, #0]
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a862:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	687a      	ldr	r2, [r7, #4]
 800a868:	68b9      	ldr	r1, [r7, #8]
 800a86a:	68f8      	ldr	r0, [r7, #12]
 800a86c:	f000 f914 	bl	800aa98 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800a870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a872:	68f8      	ldr	r0, [r7, #12]
 800a874:	4798      	blx	r3
 800a876:	4603      	mov	r3, r0
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d001      	beq.n	800a880 <netif_add+0xc8>
    return NULL;
 800a87c:	2300      	movs	r3, #0
 800a87e:	e058      	b.n	800a932 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a886:	2bff      	cmp	r3, #255	; 0xff
 800a888:	d103      	bne.n	800a892 <netif_add+0xda>
        netif->num = 0;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	2200      	movs	r2, #0
 800a88e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800a892:	2300      	movs	r3, #0
 800a894:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a896:	4b30      	ldr	r3, [pc, #192]	; (800a958 <netif_add+0x1a0>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	617b      	str	r3, [r7, #20]
 800a89c:	e02b      	b.n	800a8f6 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800a89e:	697a      	ldr	r2, [r7, #20]
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d106      	bne.n	800a8b4 <netif_add+0xfc>
 800a8a6:	4b25      	ldr	r3, [pc, #148]	; (800a93c <netif_add+0x184>)
 800a8a8:	f240 128b 	movw	r2, #395	; 0x18b
 800a8ac:	492b      	ldr	r1, [pc, #172]	; (800a95c <netif_add+0x1a4>)
 800a8ae:	4825      	ldr	r0, [pc, #148]	; (800a944 <netif_add+0x18c>)
 800a8b0:	f00c fc7a 	bl	80171a8 <iprintf>
        num_netifs++;
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	3301      	adds	r3, #1
 800a8b8:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	2bff      	cmp	r3, #255	; 0xff
 800a8be:	dd06      	ble.n	800a8ce <netif_add+0x116>
 800a8c0:	4b1e      	ldr	r3, [pc, #120]	; (800a93c <netif_add+0x184>)
 800a8c2:	f240 128d 	movw	r2, #397	; 0x18d
 800a8c6:	4926      	ldr	r1, [pc, #152]	; (800a960 <netif_add+0x1a8>)
 800a8c8:	481e      	ldr	r0, [pc, #120]	; (800a944 <netif_add+0x18c>)
 800a8ca:	f00c fc6d 	bl	80171a8 <iprintf>
        if (netif2->num == netif->num) {
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a8da:	429a      	cmp	r2, r3
 800a8dc:	d108      	bne.n	800a8f0 <netif_add+0x138>
          netif->num++;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a8e4:	3301      	adds	r3, #1
 800a8e6:	b2da      	uxtb	r2, r3
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800a8ee:	e005      	b.n	800a8fc <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	617b      	str	r3, [r7, #20]
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d1d0      	bne.n	800a89e <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d1be      	bne.n	800a880 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a908:	2bfe      	cmp	r3, #254	; 0xfe
 800a90a:	d103      	bne.n	800a914 <netif_add+0x15c>
    netif_num = 0;
 800a90c:	4b11      	ldr	r3, [pc, #68]	; (800a954 <netif_add+0x19c>)
 800a90e:	2200      	movs	r2, #0
 800a910:	701a      	strb	r2, [r3, #0]
 800a912:	e006      	b.n	800a922 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a91a:	3301      	adds	r3, #1
 800a91c:	b2da      	uxtb	r2, r3
 800a91e:	4b0d      	ldr	r3, [pc, #52]	; (800a954 <netif_add+0x19c>)
 800a920:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800a922:	4b0d      	ldr	r3, [pc, #52]	; (800a958 <netif_add+0x1a0>)
 800a924:	681a      	ldr	r2, [r3, #0]
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800a92a:	4a0b      	ldr	r2, [pc, #44]	; (800a958 <netif_add+0x1a0>)
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800a930:	68fb      	ldr	r3, [r7, #12]
}
 800a932:	4618      	mov	r0, r3
 800a934:	3718      	adds	r7, #24
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}
 800a93a:	bf00      	nop
 800a93c:	08019504 	.word	0x08019504
 800a940:	08019598 	.word	0x08019598
 800a944:	08019554 	.word	0x08019554
 800a948:	080195b4 	.word	0x080195b4
 800a94c:	0801c024 	.word	0x0801c024
 800a950:	0800ad7b 	.word	0x0800ad7b
 800a954:	20008548 	.word	0x20008548
 800a958:	2000efcc 	.word	0x2000efcc
 800a95c:	080195d8 	.word	0x080195d8
 800a960:	080195ec 	.word	0x080195ec

0800a964 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b082      	sub	sp, #8
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
 800a96c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800a96e:	6839      	ldr	r1, [r7, #0]
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f002 fe63 	bl	800d63c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800a976:	6839      	ldr	r1, [r7, #0]
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f007 fed9 	bl	8012730 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800a97e:	bf00      	nop
 800a980:	3708      	adds	r7, #8
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}
	...

0800a988 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b086      	sub	sp, #24
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	60f8      	str	r0, [r7, #12]
 800a990:	60b9      	str	r1, [r7, #8]
 800a992:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d106      	bne.n	800a9a8 <netif_do_set_ipaddr+0x20>
 800a99a:	4b1d      	ldr	r3, [pc, #116]	; (800aa10 <netif_do_set_ipaddr+0x88>)
 800a99c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800a9a0:	491c      	ldr	r1, [pc, #112]	; (800aa14 <netif_do_set_ipaddr+0x8c>)
 800a9a2:	481d      	ldr	r0, [pc, #116]	; (800aa18 <netif_do_set_ipaddr+0x90>)
 800a9a4:	f00c fc00 	bl	80171a8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d106      	bne.n	800a9bc <netif_do_set_ipaddr+0x34>
 800a9ae:	4b18      	ldr	r3, [pc, #96]	; (800aa10 <netif_do_set_ipaddr+0x88>)
 800a9b0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800a9b4:	4917      	ldr	r1, [pc, #92]	; (800aa14 <netif_do_set_ipaddr+0x8c>)
 800a9b6:	4818      	ldr	r0, [pc, #96]	; (800aa18 <netif_do_set_ipaddr+0x90>)
 800a9b8:	f00c fbf6 	bl	80171a8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	681a      	ldr	r2, [r3, #0]
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	3304      	adds	r3, #4
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d01c      	beq.n	800aa04 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	3304      	adds	r3, #4
 800a9d4:	681a      	ldr	r2, [r3, #0]
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800a9da:	f107 0314 	add.w	r3, r7, #20
 800a9de:	4619      	mov	r1, r3
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f7ff ffbf 	bl	800a964 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d002      	beq.n	800a9f2 <netif_do_set_ipaddr+0x6a>
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	e000      	b.n	800a9f4 <netif_do_set_ipaddr+0x6c>
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	68fa      	ldr	r2, [r7, #12]
 800a9f6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800a9f8:	2101      	movs	r1, #1
 800a9fa:	68f8      	ldr	r0, [r7, #12]
 800a9fc:	f000 f8d2 	bl	800aba4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800aa00:	2301      	movs	r3, #1
 800aa02:	e000      	b.n	800aa06 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800aa04:	2300      	movs	r3, #0
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	3718      	adds	r7, #24
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}
 800aa0e:	bf00      	nop
 800aa10:	08019504 	.word	0x08019504
 800aa14:	0801961c 	.word	0x0801961c
 800aa18:	08019554 	.word	0x08019554

0800aa1c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b085      	sub	sp, #20
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	60f8      	str	r0, [r7, #12]
 800aa24:	60b9      	str	r1, [r7, #8]
 800aa26:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	681a      	ldr	r2, [r3, #0]
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	3308      	adds	r3, #8
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	429a      	cmp	r2, r3
 800aa34:	d00a      	beq.n	800aa4c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d002      	beq.n	800aa42 <netif_do_set_netmask+0x26>
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	e000      	b.n	800aa44 <netif_do_set_netmask+0x28>
 800aa42:	2300      	movs	r3, #0
 800aa44:	68fa      	ldr	r2, [r7, #12]
 800aa46:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800aa48:	2301      	movs	r3, #1
 800aa4a:	e000      	b.n	800aa4e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800aa4c:	2300      	movs	r3, #0
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3714      	adds	r7, #20
 800aa52:	46bd      	mov	sp, r7
 800aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa58:	4770      	bx	lr

0800aa5a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800aa5a:	b480      	push	{r7}
 800aa5c:	b085      	sub	sp, #20
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	60f8      	str	r0, [r7, #12]
 800aa62:	60b9      	str	r1, [r7, #8]
 800aa64:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	681a      	ldr	r2, [r3, #0]
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	330c      	adds	r3, #12
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d00a      	beq.n	800aa8a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d002      	beq.n	800aa80 <netif_do_set_gw+0x26>
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	e000      	b.n	800aa82 <netif_do_set_gw+0x28>
 800aa80:	2300      	movs	r3, #0
 800aa82:	68fa      	ldr	r2, [r7, #12]
 800aa84:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800aa86:	2301      	movs	r3, #1
 800aa88:	e000      	b.n	800aa8c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800aa8a:	2300      	movs	r3, #0
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3714      	adds	r7, #20
 800aa90:	46bd      	mov	sp, r7
 800aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa96:	4770      	bx	lr

0800aa98 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b088      	sub	sp, #32
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	60f8      	str	r0, [r7, #12]
 800aaa0:	60b9      	str	r1, [r7, #8]
 800aaa2:	607a      	str	r2, [r7, #4]
 800aaa4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d101      	bne.n	800aab8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800aab4:	4b1c      	ldr	r3, [pc, #112]	; (800ab28 <netif_set_addr+0x90>)
 800aab6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d101      	bne.n	800aac2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800aabe:	4b1a      	ldr	r3, [pc, #104]	; (800ab28 <netif_set_addr+0x90>)
 800aac0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d101      	bne.n	800aacc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800aac8:	4b17      	ldr	r3, [pc, #92]	; (800ab28 <netif_set_addr+0x90>)
 800aaca:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d003      	beq.n	800aada <netif_set_addr+0x42>
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d101      	bne.n	800aade <netif_set_addr+0x46>
 800aada:	2301      	movs	r3, #1
 800aadc:	e000      	b.n	800aae0 <netif_set_addr+0x48>
 800aade:	2300      	movs	r3, #0
 800aae0:	617b      	str	r3, [r7, #20]
  if (remove) {
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d006      	beq.n	800aaf6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800aae8:	f107 0310 	add.w	r3, r7, #16
 800aaec:	461a      	mov	r2, r3
 800aaee:	68b9      	ldr	r1, [r7, #8]
 800aaf0:	68f8      	ldr	r0, [r7, #12]
 800aaf2:	f7ff ff49 	bl	800a988 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800aaf6:	69fa      	ldr	r2, [r7, #28]
 800aaf8:	6879      	ldr	r1, [r7, #4]
 800aafa:	68f8      	ldr	r0, [r7, #12]
 800aafc:	f7ff ff8e 	bl	800aa1c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800ab00:	69ba      	ldr	r2, [r7, #24]
 800ab02:	6839      	ldr	r1, [r7, #0]
 800ab04:	68f8      	ldr	r0, [r7, #12]
 800ab06:	f7ff ffa8 	bl	800aa5a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d106      	bne.n	800ab1e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ab10:	f107 0310 	add.w	r3, r7, #16
 800ab14:	461a      	mov	r2, r3
 800ab16:	68b9      	ldr	r1, [r7, #8]
 800ab18:	68f8      	ldr	r0, [r7, #12]
 800ab1a:	f7ff ff35 	bl	800a988 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800ab1e:	bf00      	nop
 800ab20:	3720      	adds	r7, #32
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}
 800ab26:	bf00      	nop
 800ab28:	0801c024 	.word	0x0801c024

0800ab2c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b083      	sub	sp, #12
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ab34:	4a04      	ldr	r2, [pc, #16]	; (800ab48 <netif_set_default+0x1c>)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ab3a:	bf00      	nop
 800ab3c:	370c      	adds	r7, #12
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab44:	4770      	bx	lr
 800ab46:	bf00      	nop
 800ab48:	2000efd0 	.word	0x2000efd0

0800ab4c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b082      	sub	sp, #8
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d107      	bne.n	800ab6a <netif_set_up+0x1e>
 800ab5a:	4b0f      	ldr	r3, [pc, #60]	; (800ab98 <netif_set_up+0x4c>)
 800ab5c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800ab60:	490e      	ldr	r1, [pc, #56]	; (800ab9c <netif_set_up+0x50>)
 800ab62:	480f      	ldr	r0, [pc, #60]	; (800aba0 <netif_set_up+0x54>)
 800ab64:	f00c fb20 	bl	80171a8 <iprintf>
 800ab68:	e013      	b.n	800ab92 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ab70:	f003 0301 	and.w	r3, r3, #1
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d10c      	bne.n	800ab92 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ab7e:	f043 0301 	orr.w	r3, r3, #1
 800ab82:	b2da      	uxtb	r2, r3
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ab8a:	2103      	movs	r1, #3
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	f000 f809 	bl	800aba4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800ab92:	3708      	adds	r7, #8
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}
 800ab98:	08019504 	.word	0x08019504
 800ab9c:	0801968c 	.word	0x0801968c
 800aba0:	08019554 	.word	0x08019554

0800aba4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b082      	sub	sp, #8
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
 800abac:	460b      	mov	r3, r1
 800abae:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d106      	bne.n	800abc4 <netif_issue_reports+0x20>
 800abb6:	4b18      	ldr	r3, [pc, #96]	; (800ac18 <netif_issue_reports+0x74>)
 800abb8:	f240 326d 	movw	r2, #877	; 0x36d
 800abbc:	4917      	ldr	r1, [pc, #92]	; (800ac1c <netif_issue_reports+0x78>)
 800abbe:	4818      	ldr	r0, [pc, #96]	; (800ac20 <netif_issue_reports+0x7c>)
 800abc0:	f00c faf2 	bl	80171a8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800abca:	f003 0304 	and.w	r3, r3, #4
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d01e      	beq.n	800ac10 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800abd8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d017      	beq.n	800ac10 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800abe0:	78fb      	ldrb	r3, [r7, #3]
 800abe2:	f003 0301 	and.w	r3, r3, #1
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d013      	beq.n	800ac12 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	3304      	adds	r3, #4
 800abee:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d00e      	beq.n	800ac12 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800abfa:	f003 0308 	and.w	r3, r3, #8
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d007      	beq.n	800ac12 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	3304      	adds	r3, #4
 800ac06:	4619      	mov	r1, r3
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f00a fb91 	bl	8015330 <etharp_request>
 800ac0e:	e000      	b.n	800ac12 <netif_issue_reports+0x6e>
    return;
 800ac10:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800ac12:	3708      	adds	r7, #8
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}
 800ac18:	08019504 	.word	0x08019504
 800ac1c:	080196a8 	.word	0x080196a8
 800ac20:	08019554 	.word	0x08019554

0800ac24 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b082      	sub	sp, #8
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d107      	bne.n	800ac42 <netif_set_down+0x1e>
 800ac32:	4b12      	ldr	r3, [pc, #72]	; (800ac7c <netif_set_down+0x58>)
 800ac34:	f240 329b 	movw	r2, #923	; 0x39b
 800ac38:	4911      	ldr	r1, [pc, #68]	; (800ac80 <netif_set_down+0x5c>)
 800ac3a:	4812      	ldr	r0, [pc, #72]	; (800ac84 <netif_set_down+0x60>)
 800ac3c:	f00c fab4 	bl	80171a8 <iprintf>
 800ac40:	e019      	b.n	800ac76 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ac48:	f003 0301 	and.w	r3, r3, #1
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d012      	beq.n	800ac76 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ac56:	f023 0301 	bic.w	r3, r3, #1
 800ac5a:	b2da      	uxtb	r2, r3
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ac68:	f003 0308 	and.w	r3, r3, #8
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d002      	beq.n	800ac76 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f009 ff17 	bl	8014aa4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800ac76:	3708      	adds	r7, #8
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}
 800ac7c:	08019504 	.word	0x08019504
 800ac80:	080196cc 	.word	0x080196cc
 800ac84:	08019554 	.word	0x08019554

0800ac88 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b082      	sub	sp, #8
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d107      	bne.n	800aca6 <netif_set_link_up+0x1e>
 800ac96:	4b15      	ldr	r3, [pc, #84]	; (800acec <netif_set_link_up+0x64>)
 800ac98:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800ac9c:	4914      	ldr	r1, [pc, #80]	; (800acf0 <netif_set_link_up+0x68>)
 800ac9e:	4815      	ldr	r0, [pc, #84]	; (800acf4 <netif_set_link_up+0x6c>)
 800aca0:	f00c fa82 	bl	80171a8 <iprintf>
 800aca4:	e01e      	b.n	800ace4 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800acac:	f003 0304 	and.w	r3, r3, #4
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d117      	bne.n	800ace4 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800acba:	f043 0304 	orr.w	r3, r3, #4
 800acbe:	b2da      	uxtb	r2, r3
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f008 f95c 	bl	8012f84 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800accc:	2103      	movs	r1, #3
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f7ff ff68 	bl	800aba4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	69db      	ldr	r3, [r3, #28]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d003      	beq.n	800ace4 <netif_set_link_up+0x5c>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	69db      	ldr	r3, [r3, #28]
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ace4:	3708      	adds	r7, #8
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}
 800acea:	bf00      	nop
 800acec:	08019504 	.word	0x08019504
 800acf0:	080196ec 	.word	0x080196ec
 800acf4:	08019554 	.word	0x08019554

0800acf8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b082      	sub	sp, #8
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d107      	bne.n	800ad16 <netif_set_link_down+0x1e>
 800ad06:	4b11      	ldr	r3, [pc, #68]	; (800ad4c <netif_set_link_down+0x54>)
 800ad08:	f240 4206 	movw	r2, #1030	; 0x406
 800ad0c:	4910      	ldr	r1, [pc, #64]	; (800ad50 <netif_set_link_down+0x58>)
 800ad0e:	4811      	ldr	r0, [pc, #68]	; (800ad54 <netif_set_link_down+0x5c>)
 800ad10:	f00c fa4a 	bl	80171a8 <iprintf>
 800ad14:	e017      	b.n	800ad46 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ad1c:	f003 0304 	and.w	r3, r3, #4
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d010      	beq.n	800ad46 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ad2a:	f023 0304 	bic.w	r3, r3, #4
 800ad2e:	b2da      	uxtb	r2, r3
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	69db      	ldr	r3, [r3, #28]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d003      	beq.n	800ad46 <netif_set_link_down+0x4e>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	69db      	ldr	r3, [r3, #28]
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ad46:	3708      	adds	r7, #8
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}
 800ad4c:	08019504 	.word	0x08019504
 800ad50:	08019710 	.word	0x08019710
 800ad54:	08019554 	.word	0x08019554

0800ad58 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b083      	sub	sp, #12
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
 800ad60:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d002      	beq.n	800ad6e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	683a      	ldr	r2, [r7, #0]
 800ad6c:	61da      	str	r2, [r3, #28]
  }
}
 800ad6e:	bf00      	nop
 800ad70:	370c      	adds	r7, #12
 800ad72:	46bd      	mov	sp, r7
 800ad74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad78:	4770      	bx	lr

0800ad7a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800ad7a:	b480      	push	{r7}
 800ad7c:	b085      	sub	sp, #20
 800ad7e:	af00      	add	r7, sp, #0
 800ad80:	60f8      	str	r0, [r7, #12]
 800ad82:	60b9      	str	r1, [r7, #8]
 800ad84:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800ad86:	f06f 030b 	mvn.w	r3, #11
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3714      	adds	r7, #20
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad94:	4770      	bx	lr
	...

0800ad98 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800ad98:	b480      	push	{r7}
 800ad9a:	b085      	sub	sp, #20
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	4603      	mov	r3, r0
 800ada0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800ada2:	79fb      	ldrb	r3, [r7, #7]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d013      	beq.n	800add0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800ada8:	4b0d      	ldr	r3, [pc, #52]	; (800ade0 <netif_get_by_index+0x48>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	60fb      	str	r3, [r7, #12]
 800adae:	e00c      	b.n	800adca <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800adb6:	3301      	adds	r3, #1
 800adb8:	b2db      	uxtb	r3, r3
 800adba:	79fa      	ldrb	r2, [r7, #7]
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d101      	bne.n	800adc4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	e006      	b.n	800add2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	60fb      	str	r3, [r7, #12]
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d1ef      	bne.n	800adb0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800add0:	2300      	movs	r3, #0
}
 800add2:	4618      	mov	r0, r3
 800add4:	3714      	adds	r7, #20
 800add6:	46bd      	mov	sp, r7
 800add8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800addc:	4770      	bx	lr
 800adde:	bf00      	nop
 800ade0:	2000efcc 	.word	0x2000efcc

0800ade4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b082      	sub	sp, #8
 800ade8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800adea:	f00c f809 	bl	8016e00 <sys_arch_protect>
 800adee:	6038      	str	r0, [r7, #0]
 800adf0:	4b0d      	ldr	r3, [pc, #52]	; (800ae28 <pbuf_free_ooseq+0x44>)
 800adf2:	2200      	movs	r2, #0
 800adf4:	701a      	strb	r2, [r3, #0]
 800adf6:	6838      	ldr	r0, [r7, #0]
 800adf8:	f00c f810 	bl	8016e1c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800adfc:	4b0b      	ldr	r3, [pc, #44]	; (800ae2c <pbuf_free_ooseq+0x48>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	607b      	str	r3, [r7, #4]
 800ae02:	e00a      	b.n	800ae1a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d003      	beq.n	800ae14 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f002 fc53 	bl	800d6b8 <tcp_free_ooseq>
      return;
 800ae12:	e005      	b.n	800ae20 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	68db      	ldr	r3, [r3, #12]
 800ae18:	607b      	str	r3, [r7, #4]
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d1f1      	bne.n	800ae04 <pbuf_free_ooseq+0x20>
    }
  }
}
 800ae20:	3708      	adds	r7, #8
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}
 800ae26:	bf00      	nop
 800ae28:	2000efd4 	.word	0x2000efd4
 800ae2c:	2000efdc 	.word	0x2000efdc

0800ae30 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b082      	sub	sp, #8
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800ae38:	f7ff ffd4 	bl	800ade4 <pbuf_free_ooseq>
}
 800ae3c:	bf00      	nop
 800ae3e:	3708      	adds	r7, #8
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}

0800ae44 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b082      	sub	sp, #8
 800ae48:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800ae4a:	f00b ffd9 	bl	8016e00 <sys_arch_protect>
 800ae4e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800ae50:	4b0f      	ldr	r3, [pc, #60]	; (800ae90 <pbuf_pool_is_empty+0x4c>)
 800ae52:	781b      	ldrb	r3, [r3, #0]
 800ae54:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800ae56:	4b0e      	ldr	r3, [pc, #56]	; (800ae90 <pbuf_pool_is_empty+0x4c>)
 800ae58:	2201      	movs	r2, #1
 800ae5a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f00b ffdd 	bl	8016e1c <sys_arch_unprotect>

  if (!queued) {
 800ae62:	78fb      	ldrb	r3, [r7, #3]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d10f      	bne.n	800ae88 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800ae68:	2100      	movs	r1, #0
 800ae6a:	480a      	ldr	r0, [pc, #40]	; (800ae94 <pbuf_pool_is_empty+0x50>)
 800ae6c:	f7fe feca 	bl	8009c04 <tcpip_try_callback>
 800ae70:	4603      	mov	r3, r0
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d008      	beq.n	800ae88 <pbuf_pool_is_empty+0x44>
 800ae76:	f00b ffc3 	bl	8016e00 <sys_arch_protect>
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	4b04      	ldr	r3, [pc, #16]	; (800ae90 <pbuf_pool_is_empty+0x4c>)
 800ae7e:	2200      	movs	r2, #0
 800ae80:	701a      	strb	r2, [r3, #0]
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f00b ffca 	bl	8016e1c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800ae88:	bf00      	nop
 800ae8a:	3708      	adds	r7, #8
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}
 800ae90:	2000efd4 	.word	0x2000efd4
 800ae94:	0800ae31 	.word	0x0800ae31

0800ae98 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b085      	sub	sp, #20
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	60f8      	str	r0, [r7, #12]
 800aea0:	60b9      	str	r1, [r7, #8]
 800aea2:	4611      	mov	r1, r2
 800aea4:	461a      	mov	r2, r3
 800aea6:	460b      	mov	r3, r1
 800aea8:	80fb      	strh	r3, [r7, #6]
 800aeaa:	4613      	mov	r3, r2
 800aeac:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	68ba      	ldr	r2, [r7, #8]
 800aeb8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	88fa      	ldrh	r2, [r7, #6]
 800aebe:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	88ba      	ldrh	r2, [r7, #4]
 800aec4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800aec6:	8b3b      	ldrh	r3, [r7, #24]
 800aec8:	b2da      	uxtb	r2, r3
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	7f3a      	ldrb	r2, [r7, #28]
 800aed2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	2201      	movs	r2, #1
 800aed8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	2200      	movs	r2, #0
 800aede:	73da      	strb	r2, [r3, #15]
}
 800aee0:	bf00      	nop
 800aee2:	3714      	adds	r7, #20
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr

0800aeec <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b08c      	sub	sp, #48	; 0x30
 800aef0:	af02      	add	r7, sp, #8
 800aef2:	4603      	mov	r3, r0
 800aef4:	71fb      	strb	r3, [r7, #7]
 800aef6:	460b      	mov	r3, r1
 800aef8:	80bb      	strh	r3, [r7, #4]
 800aefa:	4613      	mov	r3, r2
 800aefc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800aefe:	79fb      	ldrb	r3, [r7, #7]
 800af00:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800af02:	887b      	ldrh	r3, [r7, #2]
 800af04:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800af08:	d07f      	beq.n	800b00a <pbuf_alloc+0x11e>
 800af0a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800af0e:	f300 80c8 	bgt.w	800b0a2 <pbuf_alloc+0x1b6>
 800af12:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800af16:	d010      	beq.n	800af3a <pbuf_alloc+0x4e>
 800af18:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800af1c:	f300 80c1 	bgt.w	800b0a2 <pbuf_alloc+0x1b6>
 800af20:	2b01      	cmp	r3, #1
 800af22:	d002      	beq.n	800af2a <pbuf_alloc+0x3e>
 800af24:	2b41      	cmp	r3, #65	; 0x41
 800af26:	f040 80bc 	bne.w	800b0a2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800af2a:	887a      	ldrh	r2, [r7, #2]
 800af2c:	88bb      	ldrh	r3, [r7, #4]
 800af2e:	4619      	mov	r1, r3
 800af30:	2000      	movs	r0, #0
 800af32:	f000 f8d1 	bl	800b0d8 <pbuf_alloc_reference>
 800af36:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800af38:	e0bd      	b.n	800b0b6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800af3a:	2300      	movs	r3, #0
 800af3c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800af3e:	2300      	movs	r3, #0
 800af40:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800af42:	88bb      	ldrh	r3, [r7, #4]
 800af44:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800af46:	200c      	movs	r0, #12
 800af48:	f7ff fbb2 	bl	800a6b0 <memp_malloc>
 800af4c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d109      	bne.n	800af68 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800af54:	f7ff ff76 	bl	800ae44 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800af58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d002      	beq.n	800af64 <pbuf_alloc+0x78>
            pbuf_free(p);
 800af5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800af60:	f000 faa8 	bl	800b4b4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800af64:	2300      	movs	r3, #0
 800af66:	e0a7      	b.n	800b0b8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800af68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800af6a:	3303      	adds	r3, #3
 800af6c:	b29b      	uxth	r3, r3
 800af6e:	f023 0303 	bic.w	r3, r3, #3
 800af72:	b29b      	uxth	r3, r3
 800af74:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800af78:	b29b      	uxth	r3, r3
 800af7a:	8b7a      	ldrh	r2, [r7, #26]
 800af7c:	4293      	cmp	r3, r2
 800af7e:	bf28      	it	cs
 800af80:	4613      	movcs	r3, r2
 800af82:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800af84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800af86:	3310      	adds	r3, #16
 800af88:	693a      	ldr	r2, [r7, #16]
 800af8a:	4413      	add	r3, r2
 800af8c:	3303      	adds	r3, #3
 800af8e:	f023 0303 	bic.w	r3, r3, #3
 800af92:	4618      	mov	r0, r3
 800af94:	89f9      	ldrh	r1, [r7, #14]
 800af96:	8b7a      	ldrh	r2, [r7, #26]
 800af98:	2300      	movs	r3, #0
 800af9a:	9301      	str	r3, [sp, #4]
 800af9c:	887b      	ldrh	r3, [r7, #2]
 800af9e:	9300      	str	r3, [sp, #0]
 800afa0:	460b      	mov	r3, r1
 800afa2:	4601      	mov	r1, r0
 800afa4:	6938      	ldr	r0, [r7, #16]
 800afa6:	f7ff ff77 	bl	800ae98 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	685b      	ldr	r3, [r3, #4]
 800afae:	f003 0303 	and.w	r3, r3, #3
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d006      	beq.n	800afc4 <pbuf_alloc+0xd8>
 800afb6:	4b42      	ldr	r3, [pc, #264]	; (800b0c0 <pbuf_alloc+0x1d4>)
 800afb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800afbc:	4941      	ldr	r1, [pc, #260]	; (800b0c4 <pbuf_alloc+0x1d8>)
 800afbe:	4842      	ldr	r0, [pc, #264]	; (800b0c8 <pbuf_alloc+0x1dc>)
 800afc0:	f00c f8f2 	bl	80171a8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800afc4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800afc6:	3303      	adds	r3, #3
 800afc8:	f023 0303 	bic.w	r3, r3, #3
 800afcc:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800afd0:	d106      	bne.n	800afe0 <pbuf_alloc+0xf4>
 800afd2:	4b3b      	ldr	r3, [pc, #236]	; (800b0c0 <pbuf_alloc+0x1d4>)
 800afd4:	f44f 7281 	mov.w	r2, #258	; 0x102
 800afd8:	493c      	ldr	r1, [pc, #240]	; (800b0cc <pbuf_alloc+0x1e0>)
 800afda:	483b      	ldr	r0, [pc, #236]	; (800b0c8 <pbuf_alloc+0x1dc>)
 800afdc:	f00c f8e4 	bl	80171a8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800afe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d102      	bne.n	800afec <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	627b      	str	r3, [r7, #36]	; 0x24
 800afea:	e002      	b.n	800aff2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800afec:	69fb      	ldr	r3, [r7, #28]
 800afee:	693a      	ldr	r2, [r7, #16]
 800aff0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800aff6:	8b7a      	ldrh	r2, [r7, #26]
 800aff8:	89fb      	ldrh	r3, [r7, #14]
 800affa:	1ad3      	subs	r3, r2, r3
 800affc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800affe:	2300      	movs	r3, #0
 800b000:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800b002:	8b7b      	ldrh	r3, [r7, #26]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d19e      	bne.n	800af46 <pbuf_alloc+0x5a>
      break;
 800b008:	e055      	b.n	800b0b6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b00a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b00c:	3303      	adds	r3, #3
 800b00e:	b29b      	uxth	r3, r3
 800b010:	f023 0303 	bic.w	r3, r3, #3
 800b014:	b29a      	uxth	r2, r3
 800b016:	88bb      	ldrh	r3, [r7, #4]
 800b018:	3303      	adds	r3, #3
 800b01a:	b29b      	uxth	r3, r3
 800b01c:	f023 0303 	bic.w	r3, r3, #3
 800b020:	b29b      	uxth	r3, r3
 800b022:	4413      	add	r3, r2
 800b024:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b026:	8b3b      	ldrh	r3, [r7, #24]
 800b028:	3310      	adds	r3, #16
 800b02a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b02c:	8b3a      	ldrh	r2, [r7, #24]
 800b02e:	88bb      	ldrh	r3, [r7, #4]
 800b030:	3303      	adds	r3, #3
 800b032:	f023 0303 	bic.w	r3, r3, #3
 800b036:	429a      	cmp	r2, r3
 800b038:	d306      	bcc.n	800b048 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b03a:	8afa      	ldrh	r2, [r7, #22]
 800b03c:	88bb      	ldrh	r3, [r7, #4]
 800b03e:	3303      	adds	r3, #3
 800b040:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b044:	429a      	cmp	r2, r3
 800b046:	d201      	bcs.n	800b04c <pbuf_alloc+0x160>
        return NULL;
 800b048:	2300      	movs	r3, #0
 800b04a:	e035      	b.n	800b0b8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b04c:	8afb      	ldrh	r3, [r7, #22]
 800b04e:	4618      	mov	r0, r3
 800b050:	f7ff f9ac 	bl	800a3ac <mem_malloc>
 800b054:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800b056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d101      	bne.n	800b060 <pbuf_alloc+0x174>
        return NULL;
 800b05c:	2300      	movs	r3, #0
 800b05e:	e02b      	b.n	800b0b8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b060:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b062:	3310      	adds	r3, #16
 800b064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b066:	4413      	add	r3, r2
 800b068:	3303      	adds	r3, #3
 800b06a:	f023 0303 	bic.w	r3, r3, #3
 800b06e:	4618      	mov	r0, r3
 800b070:	88b9      	ldrh	r1, [r7, #4]
 800b072:	88ba      	ldrh	r2, [r7, #4]
 800b074:	2300      	movs	r3, #0
 800b076:	9301      	str	r3, [sp, #4]
 800b078:	887b      	ldrh	r3, [r7, #2]
 800b07a:	9300      	str	r3, [sp, #0]
 800b07c:	460b      	mov	r3, r1
 800b07e:	4601      	mov	r1, r0
 800b080:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b082:	f7ff ff09 	bl	800ae98 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b088:	685b      	ldr	r3, [r3, #4]
 800b08a:	f003 0303 	and.w	r3, r3, #3
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d010      	beq.n	800b0b4 <pbuf_alloc+0x1c8>
 800b092:	4b0b      	ldr	r3, [pc, #44]	; (800b0c0 <pbuf_alloc+0x1d4>)
 800b094:	f44f 7291 	mov.w	r2, #290	; 0x122
 800b098:	490d      	ldr	r1, [pc, #52]	; (800b0d0 <pbuf_alloc+0x1e4>)
 800b09a:	480b      	ldr	r0, [pc, #44]	; (800b0c8 <pbuf_alloc+0x1dc>)
 800b09c:	f00c f884 	bl	80171a8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b0a0:	e008      	b.n	800b0b4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b0a2:	4b07      	ldr	r3, [pc, #28]	; (800b0c0 <pbuf_alloc+0x1d4>)
 800b0a4:	f240 1227 	movw	r2, #295	; 0x127
 800b0a8:	490a      	ldr	r1, [pc, #40]	; (800b0d4 <pbuf_alloc+0x1e8>)
 800b0aa:	4807      	ldr	r0, [pc, #28]	; (800b0c8 <pbuf_alloc+0x1dc>)
 800b0ac:	f00c f87c 	bl	80171a8 <iprintf>
      return NULL;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	e001      	b.n	800b0b8 <pbuf_alloc+0x1cc>
      break;
 800b0b4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3728      	adds	r7, #40	; 0x28
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}
 800b0c0:	08019734 	.word	0x08019734
 800b0c4:	08019764 	.word	0x08019764
 800b0c8:	08019794 	.word	0x08019794
 800b0cc:	080197bc 	.word	0x080197bc
 800b0d0:	080197f0 	.word	0x080197f0
 800b0d4:	0801981c 	.word	0x0801981c

0800b0d8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b086      	sub	sp, #24
 800b0dc:	af02      	add	r7, sp, #8
 800b0de:	6078      	str	r0, [r7, #4]
 800b0e0:	460b      	mov	r3, r1
 800b0e2:	807b      	strh	r3, [r7, #2]
 800b0e4:	4613      	mov	r3, r2
 800b0e6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b0e8:	883b      	ldrh	r3, [r7, #0]
 800b0ea:	2b41      	cmp	r3, #65	; 0x41
 800b0ec:	d009      	beq.n	800b102 <pbuf_alloc_reference+0x2a>
 800b0ee:	883b      	ldrh	r3, [r7, #0]
 800b0f0:	2b01      	cmp	r3, #1
 800b0f2:	d006      	beq.n	800b102 <pbuf_alloc_reference+0x2a>
 800b0f4:	4b0f      	ldr	r3, [pc, #60]	; (800b134 <pbuf_alloc_reference+0x5c>)
 800b0f6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800b0fa:	490f      	ldr	r1, [pc, #60]	; (800b138 <pbuf_alloc_reference+0x60>)
 800b0fc:	480f      	ldr	r0, [pc, #60]	; (800b13c <pbuf_alloc_reference+0x64>)
 800b0fe:	f00c f853 	bl	80171a8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b102:	200b      	movs	r0, #11
 800b104:	f7ff fad4 	bl	800a6b0 <memp_malloc>
 800b108:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d101      	bne.n	800b114 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b110:	2300      	movs	r3, #0
 800b112:	e00b      	b.n	800b12c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b114:	8879      	ldrh	r1, [r7, #2]
 800b116:	887a      	ldrh	r2, [r7, #2]
 800b118:	2300      	movs	r3, #0
 800b11a:	9301      	str	r3, [sp, #4]
 800b11c:	883b      	ldrh	r3, [r7, #0]
 800b11e:	9300      	str	r3, [sp, #0]
 800b120:	460b      	mov	r3, r1
 800b122:	6879      	ldr	r1, [r7, #4]
 800b124:	68f8      	ldr	r0, [r7, #12]
 800b126:	f7ff feb7 	bl	800ae98 <pbuf_init_alloced_pbuf>
  return p;
 800b12a:	68fb      	ldr	r3, [r7, #12]
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3710      	adds	r7, #16
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}
 800b134:	08019734 	.word	0x08019734
 800b138:	08019838 	.word	0x08019838
 800b13c:	08019794 	.word	0x08019794

0800b140 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b088      	sub	sp, #32
 800b144:	af02      	add	r7, sp, #8
 800b146:	607b      	str	r3, [r7, #4]
 800b148:	4603      	mov	r3, r0
 800b14a:	73fb      	strb	r3, [r7, #15]
 800b14c:	460b      	mov	r3, r1
 800b14e:	81bb      	strh	r3, [r7, #12]
 800b150:	4613      	mov	r3, r2
 800b152:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b154:	7bfb      	ldrb	r3, [r7, #15]
 800b156:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b158:	8a7b      	ldrh	r3, [r7, #18]
 800b15a:	3303      	adds	r3, #3
 800b15c:	f023 0203 	bic.w	r2, r3, #3
 800b160:	89bb      	ldrh	r3, [r7, #12]
 800b162:	441a      	add	r2, r3
 800b164:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b166:	429a      	cmp	r2, r3
 800b168:	d901      	bls.n	800b16e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b16a:	2300      	movs	r3, #0
 800b16c:	e018      	b.n	800b1a0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b16e:	6a3b      	ldr	r3, [r7, #32]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d007      	beq.n	800b184 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b174:	8a7b      	ldrh	r3, [r7, #18]
 800b176:	3303      	adds	r3, #3
 800b178:	f023 0303 	bic.w	r3, r3, #3
 800b17c:	6a3a      	ldr	r2, [r7, #32]
 800b17e:	4413      	add	r3, r2
 800b180:	617b      	str	r3, [r7, #20]
 800b182:	e001      	b.n	800b188 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b184:	2300      	movs	r3, #0
 800b186:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	89b9      	ldrh	r1, [r7, #12]
 800b18c:	89ba      	ldrh	r2, [r7, #12]
 800b18e:	2302      	movs	r3, #2
 800b190:	9301      	str	r3, [sp, #4]
 800b192:	897b      	ldrh	r3, [r7, #10]
 800b194:	9300      	str	r3, [sp, #0]
 800b196:	460b      	mov	r3, r1
 800b198:	6979      	ldr	r1, [r7, #20]
 800b19a:	f7ff fe7d 	bl	800ae98 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b19e:	687b      	ldr	r3, [r7, #4]
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3718      	adds	r7, #24
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}

0800b1a8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b084      	sub	sp, #16
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	460b      	mov	r3, r1
 800b1b2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d106      	bne.n	800b1c8 <pbuf_realloc+0x20>
 800b1ba:	4b3a      	ldr	r3, [pc, #232]	; (800b2a4 <pbuf_realloc+0xfc>)
 800b1bc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b1c0:	4939      	ldr	r1, [pc, #228]	; (800b2a8 <pbuf_realloc+0x100>)
 800b1c2:	483a      	ldr	r0, [pc, #232]	; (800b2ac <pbuf_realloc+0x104>)
 800b1c4:	f00b fff0 	bl	80171a8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	891b      	ldrh	r3, [r3, #8]
 800b1cc:	887a      	ldrh	r2, [r7, #2]
 800b1ce:	429a      	cmp	r2, r3
 800b1d0:	d263      	bcs.n	800b29a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	891a      	ldrh	r2, [r3, #8]
 800b1d6:	887b      	ldrh	r3, [r7, #2]
 800b1d8:	1ad3      	subs	r3, r2, r3
 800b1da:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b1dc:	887b      	ldrh	r3, [r7, #2]
 800b1de:	817b      	strh	r3, [r7, #10]
  q = p;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b1e4:	e018      	b.n	800b218 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	895b      	ldrh	r3, [r3, #10]
 800b1ea:	897a      	ldrh	r2, [r7, #10]
 800b1ec:	1ad3      	subs	r3, r2, r3
 800b1ee:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	891a      	ldrh	r2, [r3, #8]
 800b1f4:	893b      	ldrh	r3, [r7, #8]
 800b1f6:	1ad3      	subs	r3, r2, r3
 800b1f8:	b29a      	uxth	r2, r3
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d106      	bne.n	800b218 <pbuf_realloc+0x70>
 800b20a:	4b26      	ldr	r3, [pc, #152]	; (800b2a4 <pbuf_realloc+0xfc>)
 800b20c:	f240 12af 	movw	r2, #431	; 0x1af
 800b210:	4927      	ldr	r1, [pc, #156]	; (800b2b0 <pbuf_realloc+0x108>)
 800b212:	4826      	ldr	r0, [pc, #152]	; (800b2ac <pbuf_realloc+0x104>)
 800b214:	f00b ffc8 	bl	80171a8 <iprintf>
  while (rem_len > q->len) {
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	895b      	ldrh	r3, [r3, #10]
 800b21c:	897a      	ldrh	r2, [r7, #10]
 800b21e:	429a      	cmp	r2, r3
 800b220:	d8e1      	bhi.n	800b1e6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	7b1b      	ldrb	r3, [r3, #12]
 800b226:	f003 030f 	and.w	r3, r3, #15
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d121      	bne.n	800b272 <pbuf_realloc+0xca>
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	895b      	ldrh	r3, [r3, #10]
 800b232:	897a      	ldrh	r2, [r7, #10]
 800b234:	429a      	cmp	r2, r3
 800b236:	d01c      	beq.n	800b272 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	7b5b      	ldrb	r3, [r3, #13]
 800b23c:	f003 0302 	and.w	r3, r3, #2
 800b240:	2b00      	cmp	r3, #0
 800b242:	d116      	bne.n	800b272 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	685a      	ldr	r2, [r3, #4]
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	1ad3      	subs	r3, r2, r3
 800b24c:	b29a      	uxth	r2, r3
 800b24e:	897b      	ldrh	r3, [r7, #10]
 800b250:	4413      	add	r3, r2
 800b252:	b29b      	uxth	r3, r3
 800b254:	4619      	mov	r1, r3
 800b256:	68f8      	ldr	r0, [r7, #12]
 800b258:	f7fe ff9e 	bl	800a198 <mem_trim>
 800b25c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d106      	bne.n	800b272 <pbuf_realloc+0xca>
 800b264:	4b0f      	ldr	r3, [pc, #60]	; (800b2a4 <pbuf_realloc+0xfc>)
 800b266:	f240 12bd 	movw	r2, #445	; 0x1bd
 800b26a:	4912      	ldr	r1, [pc, #72]	; (800b2b4 <pbuf_realloc+0x10c>)
 800b26c:	480f      	ldr	r0, [pc, #60]	; (800b2ac <pbuf_realloc+0x104>)
 800b26e:	f00b ff9b 	bl	80171a8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	897a      	ldrh	r2, [r7, #10]
 800b276:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	895a      	ldrh	r2, [r3, #10]
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d004      	beq.n	800b292 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	4618      	mov	r0, r3
 800b28e:	f000 f911 	bl	800b4b4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	2200      	movs	r2, #0
 800b296:	601a      	str	r2, [r3, #0]
 800b298:	e000      	b.n	800b29c <pbuf_realloc+0xf4>
    return;
 800b29a:	bf00      	nop

}
 800b29c:	3710      	adds	r7, #16
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}
 800b2a2:	bf00      	nop
 800b2a4:	08019734 	.word	0x08019734
 800b2a8:	0801984c 	.word	0x0801984c
 800b2ac:	08019794 	.word	0x08019794
 800b2b0:	08019864 	.word	0x08019864
 800b2b4:	0801987c 	.word	0x0801987c

0800b2b8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b086      	sub	sp, #24
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	60f8      	str	r0, [r7, #12]
 800b2c0:	60b9      	str	r1, [r7, #8]
 800b2c2:	4613      	mov	r3, r2
 800b2c4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d106      	bne.n	800b2da <pbuf_add_header_impl+0x22>
 800b2cc:	4b2b      	ldr	r3, [pc, #172]	; (800b37c <pbuf_add_header_impl+0xc4>)
 800b2ce:	f240 12df 	movw	r2, #479	; 0x1df
 800b2d2:	492b      	ldr	r1, [pc, #172]	; (800b380 <pbuf_add_header_impl+0xc8>)
 800b2d4:	482b      	ldr	r0, [pc, #172]	; (800b384 <pbuf_add_header_impl+0xcc>)
 800b2d6:	f00b ff67 	bl	80171a8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d003      	beq.n	800b2e8 <pbuf_add_header_impl+0x30>
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2e6:	d301      	bcc.n	800b2ec <pbuf_add_header_impl+0x34>
    return 1;
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	e043      	b.n	800b374 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d101      	bne.n	800b2f6 <pbuf_add_header_impl+0x3e>
    return 0;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	e03e      	b.n	800b374 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	891a      	ldrh	r2, [r3, #8]
 800b2fe:	8a7b      	ldrh	r3, [r7, #18]
 800b300:	4413      	add	r3, r2
 800b302:	b29b      	uxth	r3, r3
 800b304:	8a7a      	ldrh	r2, [r7, #18]
 800b306:	429a      	cmp	r2, r3
 800b308:	d901      	bls.n	800b30e <pbuf_add_header_impl+0x56>
    return 1;
 800b30a:	2301      	movs	r3, #1
 800b30c:	e032      	b.n	800b374 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	7b1b      	ldrb	r3, [r3, #12]
 800b312:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b314:	8a3b      	ldrh	r3, [r7, #16]
 800b316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d00c      	beq.n	800b338 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	685a      	ldr	r2, [r3, #4]
 800b322:	68bb      	ldr	r3, [r7, #8]
 800b324:	425b      	negs	r3, r3
 800b326:	4413      	add	r3, r2
 800b328:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	3310      	adds	r3, #16
 800b32e:	697a      	ldr	r2, [r7, #20]
 800b330:	429a      	cmp	r2, r3
 800b332:	d20d      	bcs.n	800b350 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b334:	2301      	movs	r3, #1
 800b336:	e01d      	b.n	800b374 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b338:	79fb      	ldrb	r3, [r7, #7]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d006      	beq.n	800b34c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	685a      	ldr	r2, [r3, #4]
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	425b      	negs	r3, r3
 800b346:	4413      	add	r3, r2
 800b348:	617b      	str	r3, [r7, #20]
 800b34a:	e001      	b.n	800b350 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b34c:	2301      	movs	r3, #1
 800b34e:	e011      	b.n	800b374 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	697a      	ldr	r2, [r7, #20]
 800b354:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	895a      	ldrh	r2, [r3, #10]
 800b35a:	8a7b      	ldrh	r3, [r7, #18]
 800b35c:	4413      	add	r3, r2
 800b35e:	b29a      	uxth	r2, r3
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	891a      	ldrh	r2, [r3, #8]
 800b368:	8a7b      	ldrh	r3, [r7, #18]
 800b36a:	4413      	add	r3, r2
 800b36c:	b29a      	uxth	r2, r3
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	811a      	strh	r2, [r3, #8]


  return 0;
 800b372:	2300      	movs	r3, #0
}
 800b374:	4618      	mov	r0, r3
 800b376:	3718      	adds	r7, #24
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}
 800b37c:	08019734 	.word	0x08019734
 800b380:	08019898 	.word	0x08019898
 800b384:	08019794 	.word	0x08019794

0800b388 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b082      	sub	sp, #8
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b392:	2200      	movs	r2, #0
 800b394:	6839      	ldr	r1, [r7, #0]
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f7ff ff8e 	bl	800b2b8 <pbuf_add_header_impl>
 800b39c:	4603      	mov	r3, r0
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3708      	adds	r7, #8
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}
	...

0800b3a8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b084      	sub	sp, #16
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
 800b3b0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d106      	bne.n	800b3c6 <pbuf_remove_header+0x1e>
 800b3b8:	4b20      	ldr	r3, [pc, #128]	; (800b43c <pbuf_remove_header+0x94>)
 800b3ba:	f240 224b 	movw	r2, #587	; 0x24b
 800b3be:	4920      	ldr	r1, [pc, #128]	; (800b440 <pbuf_remove_header+0x98>)
 800b3c0:	4820      	ldr	r0, [pc, #128]	; (800b444 <pbuf_remove_header+0x9c>)
 800b3c2:	f00b fef1 	bl	80171a8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d003      	beq.n	800b3d4 <pbuf_remove_header+0x2c>
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3d2:	d301      	bcc.n	800b3d8 <pbuf_remove_header+0x30>
    return 1;
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	e02c      	b.n	800b432 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d101      	bne.n	800b3e2 <pbuf_remove_header+0x3a>
    return 0;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	e027      	b.n	800b432 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	895b      	ldrh	r3, [r3, #10]
 800b3ea:	89fa      	ldrh	r2, [r7, #14]
 800b3ec:	429a      	cmp	r2, r3
 800b3ee:	d908      	bls.n	800b402 <pbuf_remove_header+0x5a>
 800b3f0:	4b12      	ldr	r3, [pc, #72]	; (800b43c <pbuf_remove_header+0x94>)
 800b3f2:	f240 2255 	movw	r2, #597	; 0x255
 800b3f6:	4914      	ldr	r1, [pc, #80]	; (800b448 <pbuf_remove_header+0xa0>)
 800b3f8:	4812      	ldr	r0, [pc, #72]	; (800b444 <pbuf_remove_header+0x9c>)
 800b3fa:	f00b fed5 	bl	80171a8 <iprintf>
 800b3fe:	2301      	movs	r3, #1
 800b400:	e017      	b.n	800b432 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	685b      	ldr	r3, [r3, #4]
 800b406:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	685a      	ldr	r2, [r3, #4]
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	441a      	add	r2, r3
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	895a      	ldrh	r2, [r3, #10]
 800b418:	89fb      	ldrh	r3, [r7, #14]
 800b41a:	1ad3      	subs	r3, r2, r3
 800b41c:	b29a      	uxth	r2, r3
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	891a      	ldrh	r2, [r3, #8]
 800b426:	89fb      	ldrh	r3, [r7, #14]
 800b428:	1ad3      	subs	r3, r2, r3
 800b42a:	b29a      	uxth	r2, r3
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b430:	2300      	movs	r3, #0
}
 800b432:	4618      	mov	r0, r3
 800b434:	3710      	adds	r7, #16
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}
 800b43a:	bf00      	nop
 800b43c:	08019734 	.word	0x08019734
 800b440:	08019898 	.word	0x08019898
 800b444:	08019794 	.word	0x08019794
 800b448:	080198a4 	.word	0x080198a4

0800b44c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b082      	sub	sp, #8
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	460b      	mov	r3, r1
 800b456:	807b      	strh	r3, [r7, #2]
 800b458:	4613      	mov	r3, r2
 800b45a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800b45c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b460:	2b00      	cmp	r3, #0
 800b462:	da08      	bge.n	800b476 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b464:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b468:	425b      	negs	r3, r3
 800b46a:	4619      	mov	r1, r3
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f7ff ff9b 	bl	800b3a8 <pbuf_remove_header>
 800b472:	4603      	mov	r3, r0
 800b474:	e007      	b.n	800b486 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b476:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b47a:	787a      	ldrb	r2, [r7, #1]
 800b47c:	4619      	mov	r1, r3
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f7ff ff1a 	bl	800b2b8 <pbuf_add_header_impl>
 800b484:	4603      	mov	r3, r0
  }
}
 800b486:	4618      	mov	r0, r3
 800b488:	3708      	adds	r7, #8
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}

0800b48e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b48e:	b580      	push	{r7, lr}
 800b490:	b082      	sub	sp, #8
 800b492:	af00      	add	r7, sp, #0
 800b494:	6078      	str	r0, [r7, #4]
 800b496:	460b      	mov	r3, r1
 800b498:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800b49a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b49e:	2201      	movs	r2, #1
 800b4a0:	4619      	mov	r1, r3
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f7ff ffd2 	bl	800b44c <pbuf_header_impl>
 800b4a8:	4603      	mov	r3, r0
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3708      	adds	r7, #8
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
	...

0800b4b4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b088      	sub	sp, #32
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d10b      	bne.n	800b4da <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d106      	bne.n	800b4d6 <pbuf_free+0x22>
 800b4c8:	4b3b      	ldr	r3, [pc, #236]	; (800b5b8 <pbuf_free+0x104>)
 800b4ca:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800b4ce:	493b      	ldr	r1, [pc, #236]	; (800b5bc <pbuf_free+0x108>)
 800b4d0:	483b      	ldr	r0, [pc, #236]	; (800b5c0 <pbuf_free+0x10c>)
 800b4d2:	f00b fe69 	bl	80171a8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	e069      	b.n	800b5ae <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800b4de:	e062      	b.n	800b5a6 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800b4e0:	f00b fc8e 	bl	8016e00 <sys_arch_protect>
 800b4e4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	7b9b      	ldrb	r3, [r3, #14]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d106      	bne.n	800b4fc <pbuf_free+0x48>
 800b4ee:	4b32      	ldr	r3, [pc, #200]	; (800b5b8 <pbuf_free+0x104>)
 800b4f0:	f240 22f1 	movw	r2, #753	; 0x2f1
 800b4f4:	4933      	ldr	r1, [pc, #204]	; (800b5c4 <pbuf_free+0x110>)
 800b4f6:	4832      	ldr	r0, [pc, #200]	; (800b5c0 <pbuf_free+0x10c>)
 800b4f8:	f00b fe56 	bl	80171a8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	7b9b      	ldrb	r3, [r3, #14]
 800b500:	3b01      	subs	r3, #1
 800b502:	b2da      	uxtb	r2, r3
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	739a      	strb	r2, [r3, #14]
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	7b9b      	ldrb	r3, [r3, #14]
 800b50c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800b50e:	69b8      	ldr	r0, [r7, #24]
 800b510:	f00b fc84 	bl	8016e1c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800b514:	7dfb      	ldrb	r3, [r7, #23]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d143      	bne.n	800b5a2 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	7b1b      	ldrb	r3, [r3, #12]
 800b524:	f003 030f 	and.w	r3, r3, #15
 800b528:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	7b5b      	ldrb	r3, [r3, #13]
 800b52e:	f003 0302 	and.w	r3, r3, #2
 800b532:	2b00      	cmp	r3, #0
 800b534:	d011      	beq.n	800b55a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	691b      	ldr	r3, [r3, #16]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d106      	bne.n	800b550 <pbuf_free+0x9c>
 800b542:	4b1d      	ldr	r3, [pc, #116]	; (800b5b8 <pbuf_free+0x104>)
 800b544:	f240 22ff 	movw	r2, #767	; 0x2ff
 800b548:	491f      	ldr	r1, [pc, #124]	; (800b5c8 <pbuf_free+0x114>)
 800b54a:	481d      	ldr	r0, [pc, #116]	; (800b5c0 <pbuf_free+0x10c>)
 800b54c:	f00b fe2c 	bl	80171a8 <iprintf>
        pc->custom_free_function(p);
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	691b      	ldr	r3, [r3, #16]
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	4798      	blx	r3
 800b558:	e01d      	b.n	800b596 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800b55a:	7bfb      	ldrb	r3, [r7, #15]
 800b55c:	2b02      	cmp	r3, #2
 800b55e:	d104      	bne.n	800b56a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800b560:	6879      	ldr	r1, [r7, #4]
 800b562:	200c      	movs	r0, #12
 800b564:	f7ff f8f6 	bl	800a754 <memp_free>
 800b568:	e015      	b.n	800b596 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800b56a:	7bfb      	ldrb	r3, [r7, #15]
 800b56c:	2b01      	cmp	r3, #1
 800b56e:	d104      	bne.n	800b57a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800b570:	6879      	ldr	r1, [r7, #4]
 800b572:	200b      	movs	r0, #11
 800b574:	f7ff f8ee 	bl	800a754 <memp_free>
 800b578:	e00d      	b.n	800b596 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800b57a:	7bfb      	ldrb	r3, [r7, #15]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d103      	bne.n	800b588 <pbuf_free+0xd4>
          mem_free(p);
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f7fe fd79 	bl	800a078 <mem_free>
 800b586:	e006      	b.n	800b596 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800b588:	4b0b      	ldr	r3, [pc, #44]	; (800b5b8 <pbuf_free+0x104>)
 800b58a:	f240 320f 	movw	r2, #783	; 0x30f
 800b58e:	490f      	ldr	r1, [pc, #60]	; (800b5cc <pbuf_free+0x118>)
 800b590:	480b      	ldr	r0, [pc, #44]	; (800b5c0 <pbuf_free+0x10c>)
 800b592:	f00b fe09 	bl	80171a8 <iprintf>
        }
      }
      count++;
 800b596:	7ffb      	ldrb	r3, [r7, #31]
 800b598:	3301      	adds	r3, #1
 800b59a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800b59c:	693b      	ldr	r3, [r7, #16]
 800b59e:	607b      	str	r3, [r7, #4]
 800b5a0:	e001      	b.n	800b5a6 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d199      	bne.n	800b4e0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800b5ac:	7ffb      	ldrb	r3, [r7, #31]
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3720      	adds	r7, #32
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}
 800b5b6:	bf00      	nop
 800b5b8:	08019734 	.word	0x08019734
 800b5bc:	08019898 	.word	0x08019898
 800b5c0:	08019794 	.word	0x08019794
 800b5c4:	080198c4 	.word	0x080198c4
 800b5c8:	080198dc 	.word	0x080198dc
 800b5cc:	08019900 	.word	0x08019900

0800b5d0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b085      	sub	sp, #20
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800b5dc:	e005      	b.n	800b5ea <pbuf_clen+0x1a>
    ++len;
 800b5de:	89fb      	ldrh	r3, [r7, #14]
 800b5e0:	3301      	adds	r3, #1
 800b5e2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d1f6      	bne.n	800b5de <pbuf_clen+0xe>
  }
  return len;
 800b5f0:	89fb      	ldrh	r3, [r7, #14]
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3714      	adds	r7, #20
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fc:	4770      	bx	lr
	...

0800b600 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b084      	sub	sp, #16
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d016      	beq.n	800b63c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800b60e:	f00b fbf7 	bl	8016e00 <sys_arch_protect>
 800b612:	60f8      	str	r0, [r7, #12]
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	7b9b      	ldrb	r3, [r3, #14]
 800b618:	3301      	adds	r3, #1
 800b61a:	b2da      	uxtb	r2, r3
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	739a      	strb	r2, [r3, #14]
 800b620:	68f8      	ldr	r0, [r7, #12]
 800b622:	f00b fbfb 	bl	8016e1c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	7b9b      	ldrb	r3, [r3, #14]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d106      	bne.n	800b63c <pbuf_ref+0x3c>
 800b62e:	4b05      	ldr	r3, [pc, #20]	; (800b644 <pbuf_ref+0x44>)
 800b630:	f240 3242 	movw	r2, #834	; 0x342
 800b634:	4904      	ldr	r1, [pc, #16]	; (800b648 <pbuf_ref+0x48>)
 800b636:	4805      	ldr	r0, [pc, #20]	; (800b64c <pbuf_ref+0x4c>)
 800b638:	f00b fdb6 	bl	80171a8 <iprintf>
  }
}
 800b63c:	bf00      	nop
 800b63e:	3710      	adds	r7, #16
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}
 800b644:	08019734 	.word	0x08019734
 800b648:	08019914 	.word	0x08019914
 800b64c:	08019794 	.word	0x08019794

0800b650 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b084      	sub	sp, #16
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
 800b658:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d002      	beq.n	800b666 <pbuf_cat+0x16>
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d107      	bne.n	800b676 <pbuf_cat+0x26>
 800b666:	4b20      	ldr	r3, [pc, #128]	; (800b6e8 <pbuf_cat+0x98>)
 800b668:	f240 3259 	movw	r2, #857	; 0x359
 800b66c:	491f      	ldr	r1, [pc, #124]	; (800b6ec <pbuf_cat+0x9c>)
 800b66e:	4820      	ldr	r0, [pc, #128]	; (800b6f0 <pbuf_cat+0xa0>)
 800b670:	f00b fd9a 	bl	80171a8 <iprintf>
 800b674:	e034      	b.n	800b6e0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	60fb      	str	r3, [r7, #12]
 800b67a:	e00a      	b.n	800b692 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	891a      	ldrh	r2, [r3, #8]
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	891b      	ldrh	r3, [r3, #8]
 800b684:	4413      	add	r3, r2
 800b686:	b29a      	uxth	r2, r3
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	60fb      	str	r3, [r7, #12]
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d1f0      	bne.n	800b67c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	891a      	ldrh	r2, [r3, #8]
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	895b      	ldrh	r3, [r3, #10]
 800b6a2:	429a      	cmp	r2, r3
 800b6a4:	d006      	beq.n	800b6b4 <pbuf_cat+0x64>
 800b6a6:	4b10      	ldr	r3, [pc, #64]	; (800b6e8 <pbuf_cat+0x98>)
 800b6a8:	f240 3262 	movw	r2, #866	; 0x362
 800b6ac:	4911      	ldr	r1, [pc, #68]	; (800b6f4 <pbuf_cat+0xa4>)
 800b6ae:	4810      	ldr	r0, [pc, #64]	; (800b6f0 <pbuf_cat+0xa0>)
 800b6b0:	f00b fd7a 	bl	80171a8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d006      	beq.n	800b6ca <pbuf_cat+0x7a>
 800b6bc:	4b0a      	ldr	r3, [pc, #40]	; (800b6e8 <pbuf_cat+0x98>)
 800b6be:	f240 3263 	movw	r2, #867	; 0x363
 800b6c2:	490d      	ldr	r1, [pc, #52]	; (800b6f8 <pbuf_cat+0xa8>)
 800b6c4:	480a      	ldr	r0, [pc, #40]	; (800b6f0 <pbuf_cat+0xa0>)
 800b6c6:	f00b fd6f 	bl	80171a8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	891a      	ldrh	r2, [r3, #8]
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	891b      	ldrh	r3, [r3, #8]
 800b6d2:	4413      	add	r3, r2
 800b6d4:	b29a      	uxth	r2, r3
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	683a      	ldr	r2, [r7, #0]
 800b6de:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800b6e0:	3710      	adds	r7, #16
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}
 800b6e6:	bf00      	nop
 800b6e8:	08019734 	.word	0x08019734
 800b6ec:	08019928 	.word	0x08019928
 800b6f0:	08019794 	.word	0x08019794
 800b6f4:	08019960 	.word	0x08019960
 800b6f8:	08019990 	.word	0x08019990

0800b6fc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b082      	sub	sp, #8
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800b706:	6839      	ldr	r1, [r7, #0]
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f7ff ffa1 	bl	800b650 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800b70e:	6838      	ldr	r0, [r7, #0]
 800b710:	f7ff ff76 	bl	800b600 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800b714:	bf00      	nop
 800b716:	3708      	adds	r7, #8
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}

0800b71c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b086      	sub	sp, #24
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
 800b724:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800b726:	2300      	movs	r3, #0
 800b728:	617b      	str	r3, [r7, #20]
 800b72a:	2300      	movs	r3, #0
 800b72c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d008      	beq.n	800b746 <pbuf_copy+0x2a>
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d005      	beq.n	800b746 <pbuf_copy+0x2a>
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	891a      	ldrh	r2, [r3, #8]
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	891b      	ldrh	r3, [r3, #8]
 800b742:	429a      	cmp	r2, r3
 800b744:	d209      	bcs.n	800b75a <pbuf_copy+0x3e>
 800b746:	4b57      	ldr	r3, [pc, #348]	; (800b8a4 <pbuf_copy+0x188>)
 800b748:	f240 32c9 	movw	r2, #969	; 0x3c9
 800b74c:	4956      	ldr	r1, [pc, #344]	; (800b8a8 <pbuf_copy+0x18c>)
 800b74e:	4857      	ldr	r0, [pc, #348]	; (800b8ac <pbuf_copy+0x190>)
 800b750:	f00b fd2a 	bl	80171a8 <iprintf>
 800b754:	f06f 030f 	mvn.w	r3, #15
 800b758:	e09f      	b.n	800b89a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	895b      	ldrh	r3, [r3, #10]
 800b75e:	461a      	mov	r2, r3
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	1ad2      	subs	r2, r2, r3
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	895b      	ldrh	r3, [r3, #10]
 800b768:	4619      	mov	r1, r3
 800b76a:	693b      	ldr	r3, [r7, #16]
 800b76c:	1acb      	subs	r3, r1, r3
 800b76e:	429a      	cmp	r2, r3
 800b770:	d306      	bcc.n	800b780 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	895b      	ldrh	r3, [r3, #10]
 800b776:	461a      	mov	r2, r3
 800b778:	693b      	ldr	r3, [r7, #16]
 800b77a:	1ad3      	subs	r3, r2, r3
 800b77c:	60fb      	str	r3, [r7, #12]
 800b77e:	e005      	b.n	800b78c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	895b      	ldrh	r3, [r3, #10]
 800b784:	461a      	mov	r2, r3
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	1ad3      	subs	r3, r2, r3
 800b78a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	685a      	ldr	r2, [r3, #4]
 800b790:	697b      	ldr	r3, [r7, #20]
 800b792:	18d0      	adds	r0, r2, r3
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	685a      	ldr	r2, [r3, #4]
 800b798:	693b      	ldr	r3, [r7, #16]
 800b79a:	4413      	add	r3, r2
 800b79c:	68fa      	ldr	r2, [r7, #12]
 800b79e:	4619      	mov	r1, r3
 800b7a0:	f00b fc77 	bl	8017092 <memcpy>
    offset_to += len;
 800b7a4:	697a      	ldr	r2, [r7, #20]
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	4413      	add	r3, r2
 800b7aa:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800b7ac:	693a      	ldr	r2, [r7, #16]
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	4413      	add	r3, r2
 800b7b2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	895b      	ldrh	r3, [r3, #10]
 800b7b8:	461a      	mov	r2, r3
 800b7ba:	697b      	ldr	r3, [r7, #20]
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	d906      	bls.n	800b7ce <pbuf_copy+0xb2>
 800b7c0:	4b38      	ldr	r3, [pc, #224]	; (800b8a4 <pbuf_copy+0x188>)
 800b7c2:	f240 32d9 	movw	r2, #985	; 0x3d9
 800b7c6:	493a      	ldr	r1, [pc, #232]	; (800b8b0 <pbuf_copy+0x194>)
 800b7c8:	4838      	ldr	r0, [pc, #224]	; (800b8ac <pbuf_copy+0x190>)
 800b7ca:	f00b fced 	bl	80171a8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	895b      	ldrh	r3, [r3, #10]
 800b7d2:	461a      	mov	r2, r3
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	d906      	bls.n	800b7e8 <pbuf_copy+0xcc>
 800b7da:	4b32      	ldr	r3, [pc, #200]	; (800b8a4 <pbuf_copy+0x188>)
 800b7dc:	f240 32da 	movw	r2, #986	; 0x3da
 800b7e0:	4934      	ldr	r1, [pc, #208]	; (800b8b4 <pbuf_copy+0x198>)
 800b7e2:	4832      	ldr	r0, [pc, #200]	; (800b8ac <pbuf_copy+0x190>)
 800b7e4:	f00b fce0 	bl	80171a8 <iprintf>
    if (offset_from >= p_from->len) {
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	895b      	ldrh	r3, [r3, #10]
 800b7ec:	461a      	mov	r2, r3
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	d304      	bcc.n	800b7fe <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	895b      	ldrh	r3, [r3, #10]
 800b802:	461a      	mov	r2, r3
 800b804:	697b      	ldr	r3, [r7, #20]
 800b806:	4293      	cmp	r3, r2
 800b808:	d114      	bne.n	800b834 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800b80a:	2300      	movs	r3, #0
 800b80c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d10c      	bne.n	800b834 <pbuf_copy+0x118>
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d009      	beq.n	800b834 <pbuf_copy+0x118>
 800b820:	4b20      	ldr	r3, [pc, #128]	; (800b8a4 <pbuf_copy+0x188>)
 800b822:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800b826:	4924      	ldr	r1, [pc, #144]	; (800b8b8 <pbuf_copy+0x19c>)
 800b828:	4820      	ldr	r0, [pc, #128]	; (800b8ac <pbuf_copy+0x190>)
 800b82a:	f00b fcbd 	bl	80171a8 <iprintf>
 800b82e:	f06f 030f 	mvn.w	r3, #15
 800b832:	e032      	b.n	800b89a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d013      	beq.n	800b862 <pbuf_copy+0x146>
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	895a      	ldrh	r2, [r3, #10]
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	891b      	ldrh	r3, [r3, #8]
 800b842:	429a      	cmp	r2, r3
 800b844:	d10d      	bne.n	800b862 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d009      	beq.n	800b862 <pbuf_copy+0x146>
 800b84e:	4b15      	ldr	r3, [pc, #84]	; (800b8a4 <pbuf_copy+0x188>)
 800b850:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800b854:	4919      	ldr	r1, [pc, #100]	; (800b8bc <pbuf_copy+0x1a0>)
 800b856:	4815      	ldr	r0, [pc, #84]	; (800b8ac <pbuf_copy+0x190>)
 800b858:	f00b fca6 	bl	80171a8 <iprintf>
 800b85c:	f06f 0305 	mvn.w	r3, #5
 800b860:	e01b      	b.n	800b89a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d013      	beq.n	800b890 <pbuf_copy+0x174>
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	895a      	ldrh	r2, [r3, #10]
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	891b      	ldrh	r3, [r3, #8]
 800b870:	429a      	cmp	r2, r3
 800b872:	d10d      	bne.n	800b890 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d009      	beq.n	800b890 <pbuf_copy+0x174>
 800b87c:	4b09      	ldr	r3, [pc, #36]	; (800b8a4 <pbuf_copy+0x188>)
 800b87e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800b882:	490e      	ldr	r1, [pc, #56]	; (800b8bc <pbuf_copy+0x1a0>)
 800b884:	4809      	ldr	r0, [pc, #36]	; (800b8ac <pbuf_copy+0x190>)
 800b886:	f00b fc8f 	bl	80171a8 <iprintf>
 800b88a:	f06f 0305 	mvn.w	r3, #5
 800b88e:	e004      	b.n	800b89a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	2b00      	cmp	r3, #0
 800b894:	f47f af61 	bne.w	800b75a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800b898:	2300      	movs	r3, #0
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	3718      	adds	r7, #24
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}
 800b8a2:	bf00      	nop
 800b8a4:	08019734 	.word	0x08019734
 800b8a8:	080199dc 	.word	0x080199dc
 800b8ac:	08019794 	.word	0x08019794
 800b8b0:	08019a0c 	.word	0x08019a0c
 800b8b4:	08019a24 	.word	0x08019a24
 800b8b8:	08019a40 	.word	0x08019a40
 800b8bc:	08019a50 	.word	0x08019a50

0800b8c0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b088      	sub	sp, #32
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	60f8      	str	r0, [r7, #12]
 800b8c8:	60b9      	str	r1, [r7, #8]
 800b8ca:	4611      	mov	r1, r2
 800b8cc:	461a      	mov	r2, r3
 800b8ce:	460b      	mov	r3, r1
 800b8d0:	80fb      	strh	r3, [r7, #6]
 800b8d2:	4613      	mov	r3, r2
 800b8d4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800b8da:	2300      	movs	r3, #0
 800b8dc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d108      	bne.n	800b8f6 <pbuf_copy_partial+0x36>
 800b8e4:	4b2b      	ldr	r3, [pc, #172]	; (800b994 <pbuf_copy_partial+0xd4>)
 800b8e6:	f240 420a 	movw	r2, #1034	; 0x40a
 800b8ea:	492b      	ldr	r1, [pc, #172]	; (800b998 <pbuf_copy_partial+0xd8>)
 800b8ec:	482b      	ldr	r0, [pc, #172]	; (800b99c <pbuf_copy_partial+0xdc>)
 800b8ee:	f00b fc5b 	bl	80171a8 <iprintf>
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	e04a      	b.n	800b98c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d108      	bne.n	800b90e <pbuf_copy_partial+0x4e>
 800b8fc:	4b25      	ldr	r3, [pc, #148]	; (800b994 <pbuf_copy_partial+0xd4>)
 800b8fe:	f240 420b 	movw	r2, #1035	; 0x40b
 800b902:	4927      	ldr	r1, [pc, #156]	; (800b9a0 <pbuf_copy_partial+0xe0>)
 800b904:	4825      	ldr	r0, [pc, #148]	; (800b99c <pbuf_copy_partial+0xdc>)
 800b906:	f00b fc4f 	bl	80171a8 <iprintf>
 800b90a:	2300      	movs	r3, #0
 800b90c:	e03e      	b.n	800b98c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	61fb      	str	r3, [r7, #28]
 800b912:	e034      	b.n	800b97e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800b914:	88bb      	ldrh	r3, [r7, #4]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d00a      	beq.n	800b930 <pbuf_copy_partial+0x70>
 800b91a:	69fb      	ldr	r3, [r7, #28]
 800b91c:	895b      	ldrh	r3, [r3, #10]
 800b91e:	88ba      	ldrh	r2, [r7, #4]
 800b920:	429a      	cmp	r2, r3
 800b922:	d305      	bcc.n	800b930 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800b924:	69fb      	ldr	r3, [r7, #28]
 800b926:	895b      	ldrh	r3, [r3, #10]
 800b928:	88ba      	ldrh	r2, [r7, #4]
 800b92a:	1ad3      	subs	r3, r2, r3
 800b92c:	80bb      	strh	r3, [r7, #4]
 800b92e:	e023      	b.n	800b978 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800b930:	69fb      	ldr	r3, [r7, #28]
 800b932:	895a      	ldrh	r2, [r3, #10]
 800b934:	88bb      	ldrh	r3, [r7, #4]
 800b936:	1ad3      	subs	r3, r2, r3
 800b938:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800b93a:	8b3a      	ldrh	r2, [r7, #24]
 800b93c:	88fb      	ldrh	r3, [r7, #6]
 800b93e:	429a      	cmp	r2, r3
 800b940:	d901      	bls.n	800b946 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800b942:	88fb      	ldrh	r3, [r7, #6]
 800b944:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800b946:	8b7b      	ldrh	r3, [r7, #26]
 800b948:	68ba      	ldr	r2, [r7, #8]
 800b94a:	18d0      	adds	r0, r2, r3
 800b94c:	69fb      	ldr	r3, [r7, #28]
 800b94e:	685a      	ldr	r2, [r3, #4]
 800b950:	88bb      	ldrh	r3, [r7, #4]
 800b952:	4413      	add	r3, r2
 800b954:	8b3a      	ldrh	r2, [r7, #24]
 800b956:	4619      	mov	r1, r3
 800b958:	f00b fb9b 	bl	8017092 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800b95c:	8afa      	ldrh	r2, [r7, #22]
 800b95e:	8b3b      	ldrh	r3, [r7, #24]
 800b960:	4413      	add	r3, r2
 800b962:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800b964:	8b7a      	ldrh	r2, [r7, #26]
 800b966:	8b3b      	ldrh	r3, [r7, #24]
 800b968:	4413      	add	r3, r2
 800b96a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800b96c:	88fa      	ldrh	r2, [r7, #6]
 800b96e:	8b3b      	ldrh	r3, [r7, #24]
 800b970:	1ad3      	subs	r3, r2, r3
 800b972:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800b974:	2300      	movs	r3, #0
 800b976:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b978:	69fb      	ldr	r3, [r7, #28]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	61fb      	str	r3, [r7, #28]
 800b97e:	88fb      	ldrh	r3, [r7, #6]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d002      	beq.n	800b98a <pbuf_copy_partial+0xca>
 800b984:	69fb      	ldr	r3, [r7, #28]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d1c4      	bne.n	800b914 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800b98a:	8afb      	ldrh	r3, [r7, #22]
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	3720      	adds	r7, #32
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}
 800b994:	08019734 	.word	0x08019734
 800b998:	08019a7c 	.word	0x08019a7c
 800b99c:	08019794 	.word	0x08019794
 800b9a0:	08019a9c 	.word	0x08019a9c

0800b9a4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b084      	sub	sp, #16
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	603a      	str	r2, [r7, #0]
 800b9ae:	71fb      	strb	r3, [r7, #7]
 800b9b0:	460b      	mov	r3, r1
 800b9b2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	8919      	ldrh	r1, [r3, #8]
 800b9b8:	88ba      	ldrh	r2, [r7, #4]
 800b9ba:	79fb      	ldrb	r3, [r7, #7]
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f7ff fa95 	bl	800aeec <pbuf_alloc>
 800b9c2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d101      	bne.n	800b9ce <pbuf_clone+0x2a>
    return NULL;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	e011      	b.n	800b9f2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800b9ce:	6839      	ldr	r1, [r7, #0]
 800b9d0:	68f8      	ldr	r0, [r7, #12]
 800b9d2:	f7ff fea3 	bl	800b71c <pbuf_copy>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800b9da:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d006      	beq.n	800b9f0 <pbuf_clone+0x4c>
 800b9e2:	4b06      	ldr	r3, [pc, #24]	; (800b9fc <pbuf_clone+0x58>)
 800b9e4:	f240 5224 	movw	r2, #1316	; 0x524
 800b9e8:	4905      	ldr	r1, [pc, #20]	; (800ba00 <pbuf_clone+0x5c>)
 800b9ea:	4806      	ldr	r0, [pc, #24]	; (800ba04 <pbuf_clone+0x60>)
 800b9ec:	f00b fbdc 	bl	80171a8 <iprintf>
  return q;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	3710      	adds	r7, #16
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	bd80      	pop	{r7, pc}
 800b9fa:	bf00      	nop
 800b9fc:	08019734 	.word	0x08019734
 800ba00:	08019ba8 	.word	0x08019ba8
 800ba04:	08019794 	.word	0x08019794

0800ba08 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ba0c:	f00b fc5a 	bl	80172c4 <rand>
 800ba10:	4603      	mov	r3, r0
 800ba12:	b29b      	uxth	r3, r3
 800ba14:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ba18:	b29b      	uxth	r3, r3
 800ba1a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800ba1e:	b29a      	uxth	r2, r3
 800ba20:	4b01      	ldr	r3, [pc, #4]	; (800ba28 <tcp_init+0x20>)
 800ba22:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ba24:	bf00      	nop
 800ba26:	bd80      	pop	{r7, pc}
 800ba28:	20000010 	.word	0x20000010

0800ba2c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b082      	sub	sp, #8
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	7d1b      	ldrb	r3, [r3, #20]
 800ba38:	2b01      	cmp	r3, #1
 800ba3a:	d105      	bne.n	800ba48 <tcp_free+0x1c>
 800ba3c:	4b06      	ldr	r3, [pc, #24]	; (800ba58 <tcp_free+0x2c>)
 800ba3e:	22d4      	movs	r2, #212	; 0xd4
 800ba40:	4906      	ldr	r1, [pc, #24]	; (800ba5c <tcp_free+0x30>)
 800ba42:	4807      	ldr	r0, [pc, #28]	; (800ba60 <tcp_free+0x34>)
 800ba44:	f00b fbb0 	bl	80171a8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800ba48:	6879      	ldr	r1, [r7, #4]
 800ba4a:	2001      	movs	r0, #1
 800ba4c:	f7fe fe82 	bl	800a754 <memp_free>
}
 800ba50:	bf00      	nop
 800ba52:	3708      	adds	r7, #8
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}
 800ba58:	08019c34 	.word	0x08019c34
 800ba5c:	08019c64 	.word	0x08019c64
 800ba60:	08019c78 	.word	0x08019c78

0800ba64 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b082      	sub	sp, #8
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	7d1b      	ldrb	r3, [r3, #20]
 800ba70:	2b01      	cmp	r3, #1
 800ba72:	d105      	bne.n	800ba80 <tcp_free_listen+0x1c>
 800ba74:	4b06      	ldr	r3, [pc, #24]	; (800ba90 <tcp_free_listen+0x2c>)
 800ba76:	22df      	movs	r2, #223	; 0xdf
 800ba78:	4906      	ldr	r1, [pc, #24]	; (800ba94 <tcp_free_listen+0x30>)
 800ba7a:	4807      	ldr	r0, [pc, #28]	; (800ba98 <tcp_free_listen+0x34>)
 800ba7c:	f00b fb94 	bl	80171a8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800ba80:	6879      	ldr	r1, [r7, #4]
 800ba82:	2002      	movs	r0, #2
 800ba84:	f7fe fe66 	bl	800a754 <memp_free>
}
 800ba88:	bf00      	nop
 800ba8a:	3708      	adds	r7, #8
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}
 800ba90:	08019c34 	.word	0x08019c34
 800ba94:	08019ca0 	.word	0x08019ca0
 800ba98:	08019c78 	.word	0x08019c78

0800ba9c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800baa0:	f001 f8a6 	bl	800cbf0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800baa4:	4b07      	ldr	r3, [pc, #28]	; (800bac4 <tcp_tmr+0x28>)
 800baa6:	781b      	ldrb	r3, [r3, #0]
 800baa8:	3301      	adds	r3, #1
 800baaa:	b2da      	uxtb	r2, r3
 800baac:	4b05      	ldr	r3, [pc, #20]	; (800bac4 <tcp_tmr+0x28>)
 800baae:	701a      	strb	r2, [r3, #0]
 800bab0:	4b04      	ldr	r3, [pc, #16]	; (800bac4 <tcp_tmr+0x28>)
 800bab2:	781b      	ldrb	r3, [r3, #0]
 800bab4:	f003 0301 	and.w	r3, r3, #1
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d001      	beq.n	800bac0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800babc:	f000 fd58 	bl	800c570 <tcp_slowtmr>
  }
}
 800bac0:	bf00      	nop
 800bac2:	bd80      	pop	{r7, pc}
 800bac4:	20008549 	.word	0x20008549

0800bac8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b084      	sub	sp, #16
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
 800bad0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d105      	bne.n	800bae4 <tcp_remove_listener+0x1c>
 800bad8:	4b0d      	ldr	r3, [pc, #52]	; (800bb10 <tcp_remove_listener+0x48>)
 800bada:	22ff      	movs	r2, #255	; 0xff
 800badc:	490d      	ldr	r1, [pc, #52]	; (800bb14 <tcp_remove_listener+0x4c>)
 800bade:	480e      	ldr	r0, [pc, #56]	; (800bb18 <tcp_remove_listener+0x50>)
 800bae0:	f00b fb62 	bl	80171a8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	60fb      	str	r3, [r7, #12]
 800bae8:	e00a      	b.n	800bb00 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800baee:	683a      	ldr	r2, [r7, #0]
 800baf0:	429a      	cmp	r2, r3
 800baf2:	d102      	bne.n	800bafa <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	2200      	movs	r2, #0
 800baf8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	68db      	ldr	r3, [r3, #12]
 800bafe:	60fb      	str	r3, [r7, #12]
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d1f1      	bne.n	800baea <tcp_remove_listener+0x22>
    }
  }
}
 800bb06:	bf00      	nop
 800bb08:	bf00      	nop
 800bb0a:	3710      	adds	r7, #16
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}
 800bb10:	08019c34 	.word	0x08019c34
 800bb14:	08019cbc 	.word	0x08019cbc
 800bb18:	08019c78 	.word	0x08019c78

0800bb1c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b084      	sub	sp, #16
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d106      	bne.n	800bb38 <tcp_listen_closed+0x1c>
 800bb2a:	4b14      	ldr	r3, [pc, #80]	; (800bb7c <tcp_listen_closed+0x60>)
 800bb2c:	f240 1211 	movw	r2, #273	; 0x111
 800bb30:	4913      	ldr	r1, [pc, #76]	; (800bb80 <tcp_listen_closed+0x64>)
 800bb32:	4814      	ldr	r0, [pc, #80]	; (800bb84 <tcp_listen_closed+0x68>)
 800bb34:	f00b fb38 	bl	80171a8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	7d1b      	ldrb	r3, [r3, #20]
 800bb3c:	2b01      	cmp	r3, #1
 800bb3e:	d006      	beq.n	800bb4e <tcp_listen_closed+0x32>
 800bb40:	4b0e      	ldr	r3, [pc, #56]	; (800bb7c <tcp_listen_closed+0x60>)
 800bb42:	f44f 7289 	mov.w	r2, #274	; 0x112
 800bb46:	4910      	ldr	r1, [pc, #64]	; (800bb88 <tcp_listen_closed+0x6c>)
 800bb48:	480e      	ldr	r0, [pc, #56]	; (800bb84 <tcp_listen_closed+0x68>)
 800bb4a:	f00b fb2d 	bl	80171a8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bb4e:	2301      	movs	r3, #1
 800bb50:	60fb      	str	r3, [r7, #12]
 800bb52:	e00b      	b.n	800bb6c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800bb54:	4a0d      	ldr	r2, [pc, #52]	; (800bb8c <tcp_listen_closed+0x70>)
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	6879      	ldr	r1, [r7, #4]
 800bb60:	4618      	mov	r0, r3
 800bb62:	f7ff ffb1 	bl	800bac8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	3301      	adds	r3, #1
 800bb6a:	60fb      	str	r3, [r7, #12]
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	2b03      	cmp	r3, #3
 800bb70:	d9f0      	bls.n	800bb54 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800bb72:	bf00      	nop
 800bb74:	bf00      	nop
 800bb76:	3710      	adds	r7, #16
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}
 800bb7c:	08019c34 	.word	0x08019c34
 800bb80:	08019ce4 	.word	0x08019ce4
 800bb84:	08019c78 	.word	0x08019c78
 800bb88:	08019cf0 	.word	0x08019cf0
 800bb8c:	0801bfec 	.word	0x0801bfec

0800bb90 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800bb90:	b5b0      	push	{r4, r5, r7, lr}
 800bb92:	b088      	sub	sp, #32
 800bb94:	af04      	add	r7, sp, #16
 800bb96:	6078      	str	r0, [r7, #4]
 800bb98:	460b      	mov	r3, r1
 800bb9a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d106      	bne.n	800bbb0 <tcp_close_shutdown+0x20>
 800bba2:	4b63      	ldr	r3, [pc, #396]	; (800bd30 <tcp_close_shutdown+0x1a0>)
 800bba4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800bba8:	4962      	ldr	r1, [pc, #392]	; (800bd34 <tcp_close_shutdown+0x1a4>)
 800bbaa:	4863      	ldr	r0, [pc, #396]	; (800bd38 <tcp_close_shutdown+0x1a8>)
 800bbac:	f00b fafc 	bl	80171a8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800bbb0:	78fb      	ldrb	r3, [r7, #3]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d066      	beq.n	800bc84 <tcp_close_shutdown+0xf4>
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	7d1b      	ldrb	r3, [r3, #20]
 800bbba:	2b04      	cmp	r3, #4
 800bbbc:	d003      	beq.n	800bbc6 <tcp_close_shutdown+0x36>
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	7d1b      	ldrb	r3, [r3, #20]
 800bbc2:	2b07      	cmp	r3, #7
 800bbc4:	d15e      	bne.n	800bc84 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d104      	bne.n	800bbd8 <tcp_close_shutdown+0x48>
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbd2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bbd6:	d055      	beq.n	800bc84 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	8b5b      	ldrh	r3, [r3, #26]
 800bbdc:	f003 0310 	and.w	r3, r3, #16
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d106      	bne.n	800bbf2 <tcp_close_shutdown+0x62>
 800bbe4:	4b52      	ldr	r3, [pc, #328]	; (800bd30 <tcp_close_shutdown+0x1a0>)
 800bbe6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800bbea:	4954      	ldr	r1, [pc, #336]	; (800bd3c <tcp_close_shutdown+0x1ac>)
 800bbec:	4852      	ldr	r0, [pc, #328]	; (800bd38 <tcp_close_shutdown+0x1a8>)
 800bbee:	f00b fadb 	bl	80171a8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800bbfa:	687d      	ldr	r5, [r7, #4]
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	3304      	adds	r3, #4
 800bc00:	687a      	ldr	r2, [r7, #4]
 800bc02:	8ad2      	ldrh	r2, [r2, #22]
 800bc04:	6879      	ldr	r1, [r7, #4]
 800bc06:	8b09      	ldrh	r1, [r1, #24]
 800bc08:	9102      	str	r1, [sp, #8]
 800bc0a:	9201      	str	r2, [sp, #4]
 800bc0c:	9300      	str	r3, [sp, #0]
 800bc0e:	462b      	mov	r3, r5
 800bc10:	4622      	mov	r2, r4
 800bc12:	4601      	mov	r1, r0
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f005 fdb7 	bl	8011788 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f001 fb98 	bl	800d350 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800bc20:	4b47      	ldr	r3, [pc, #284]	; (800bd40 <tcp_close_shutdown+0x1b0>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	687a      	ldr	r2, [r7, #4]
 800bc26:	429a      	cmp	r2, r3
 800bc28:	d105      	bne.n	800bc36 <tcp_close_shutdown+0xa6>
 800bc2a:	4b45      	ldr	r3, [pc, #276]	; (800bd40 <tcp_close_shutdown+0x1b0>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	68db      	ldr	r3, [r3, #12]
 800bc30:	4a43      	ldr	r2, [pc, #268]	; (800bd40 <tcp_close_shutdown+0x1b0>)
 800bc32:	6013      	str	r3, [r2, #0]
 800bc34:	e013      	b.n	800bc5e <tcp_close_shutdown+0xce>
 800bc36:	4b42      	ldr	r3, [pc, #264]	; (800bd40 <tcp_close_shutdown+0x1b0>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	60fb      	str	r3, [r7, #12]
 800bc3c:	e00c      	b.n	800bc58 <tcp_close_shutdown+0xc8>
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	68db      	ldr	r3, [r3, #12]
 800bc42:	687a      	ldr	r2, [r7, #4]
 800bc44:	429a      	cmp	r2, r3
 800bc46:	d104      	bne.n	800bc52 <tcp_close_shutdown+0xc2>
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	68da      	ldr	r2, [r3, #12]
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	60da      	str	r2, [r3, #12]
 800bc50:	e005      	b.n	800bc5e <tcp_close_shutdown+0xce>
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	68db      	ldr	r3, [r3, #12]
 800bc56:	60fb      	str	r3, [r7, #12]
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d1ef      	bne.n	800bc3e <tcp_close_shutdown+0xae>
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2200      	movs	r2, #0
 800bc62:	60da      	str	r2, [r3, #12]
 800bc64:	4b37      	ldr	r3, [pc, #220]	; (800bd44 <tcp_close_shutdown+0x1b4>)
 800bc66:	2201      	movs	r2, #1
 800bc68:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800bc6a:	4b37      	ldr	r3, [pc, #220]	; (800bd48 <tcp_close_shutdown+0x1b8>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	687a      	ldr	r2, [r7, #4]
 800bc70:	429a      	cmp	r2, r3
 800bc72:	d102      	bne.n	800bc7a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800bc74:	f004 f82c 	bl	800fcd0 <tcp_trigger_input_pcb_close>
 800bc78:	e002      	b.n	800bc80 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f7ff fed6 	bl	800ba2c <tcp_free>
      }
      return ERR_OK;
 800bc80:	2300      	movs	r3, #0
 800bc82:	e050      	b.n	800bd26 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	7d1b      	ldrb	r3, [r3, #20]
 800bc88:	2b02      	cmp	r3, #2
 800bc8a:	d03b      	beq.n	800bd04 <tcp_close_shutdown+0x174>
 800bc8c:	2b02      	cmp	r3, #2
 800bc8e:	dc44      	bgt.n	800bd1a <tcp_close_shutdown+0x18a>
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d002      	beq.n	800bc9a <tcp_close_shutdown+0x10a>
 800bc94:	2b01      	cmp	r3, #1
 800bc96:	d02a      	beq.n	800bcee <tcp_close_shutdown+0x15e>
 800bc98:	e03f      	b.n	800bd1a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	8adb      	ldrh	r3, [r3, #22]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d021      	beq.n	800bce6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800bca2:	4b2a      	ldr	r3, [pc, #168]	; (800bd4c <tcp_close_shutdown+0x1bc>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	687a      	ldr	r2, [r7, #4]
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	d105      	bne.n	800bcb8 <tcp_close_shutdown+0x128>
 800bcac:	4b27      	ldr	r3, [pc, #156]	; (800bd4c <tcp_close_shutdown+0x1bc>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	68db      	ldr	r3, [r3, #12]
 800bcb2:	4a26      	ldr	r2, [pc, #152]	; (800bd4c <tcp_close_shutdown+0x1bc>)
 800bcb4:	6013      	str	r3, [r2, #0]
 800bcb6:	e013      	b.n	800bce0 <tcp_close_shutdown+0x150>
 800bcb8:	4b24      	ldr	r3, [pc, #144]	; (800bd4c <tcp_close_shutdown+0x1bc>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	60bb      	str	r3, [r7, #8]
 800bcbe:	e00c      	b.n	800bcda <tcp_close_shutdown+0x14a>
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	68db      	ldr	r3, [r3, #12]
 800bcc4:	687a      	ldr	r2, [r7, #4]
 800bcc6:	429a      	cmp	r2, r3
 800bcc8:	d104      	bne.n	800bcd4 <tcp_close_shutdown+0x144>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	68da      	ldr	r2, [r3, #12]
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	60da      	str	r2, [r3, #12]
 800bcd2:	e005      	b.n	800bce0 <tcp_close_shutdown+0x150>
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	68db      	ldr	r3, [r3, #12]
 800bcd8:	60bb      	str	r3, [r7, #8]
 800bcda:	68bb      	ldr	r3, [r7, #8]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d1ef      	bne.n	800bcc0 <tcp_close_shutdown+0x130>
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2200      	movs	r2, #0
 800bce4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f7ff fea0 	bl	800ba2c <tcp_free>
      break;
 800bcec:	e01a      	b.n	800bd24 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f7ff ff14 	bl	800bb1c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800bcf4:	6879      	ldr	r1, [r7, #4]
 800bcf6:	4816      	ldr	r0, [pc, #88]	; (800bd50 <tcp_close_shutdown+0x1c0>)
 800bcf8:	f001 fb7a 	bl	800d3f0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	f7ff feb1 	bl	800ba64 <tcp_free_listen>
      break;
 800bd02:	e00f      	b.n	800bd24 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800bd04:	6879      	ldr	r1, [r7, #4]
 800bd06:	480e      	ldr	r0, [pc, #56]	; (800bd40 <tcp_close_shutdown+0x1b0>)
 800bd08:	f001 fb72 	bl	800d3f0 <tcp_pcb_remove>
 800bd0c:	4b0d      	ldr	r3, [pc, #52]	; (800bd44 <tcp_close_shutdown+0x1b4>)
 800bd0e:	2201      	movs	r2, #1
 800bd10:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f7ff fe8a 	bl	800ba2c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800bd18:	e004      	b.n	800bd24 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f000 f81a 	bl	800bd54 <tcp_close_shutdown_fin>
 800bd20:	4603      	mov	r3, r0
 800bd22:	e000      	b.n	800bd26 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800bd24:	2300      	movs	r3, #0
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	3710      	adds	r7, #16
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bdb0      	pop	{r4, r5, r7, pc}
 800bd2e:	bf00      	nop
 800bd30:	08019c34 	.word	0x08019c34
 800bd34:	08019d08 	.word	0x08019d08
 800bd38:	08019c78 	.word	0x08019c78
 800bd3c:	08019d28 	.word	0x08019d28
 800bd40:	2000efdc 	.word	0x2000efdc
 800bd44:	2000efd8 	.word	0x2000efd8
 800bd48:	2000eff0 	.word	0x2000eff0
 800bd4c:	2000efe8 	.word	0x2000efe8
 800bd50:	2000efe4 	.word	0x2000efe4

0800bd54 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b084      	sub	sp, #16
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d106      	bne.n	800bd70 <tcp_close_shutdown_fin+0x1c>
 800bd62:	4b2e      	ldr	r3, [pc, #184]	; (800be1c <tcp_close_shutdown_fin+0xc8>)
 800bd64:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800bd68:	492d      	ldr	r1, [pc, #180]	; (800be20 <tcp_close_shutdown_fin+0xcc>)
 800bd6a:	482e      	ldr	r0, [pc, #184]	; (800be24 <tcp_close_shutdown_fin+0xd0>)
 800bd6c:	f00b fa1c 	bl	80171a8 <iprintf>

  switch (pcb->state) {
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	7d1b      	ldrb	r3, [r3, #20]
 800bd74:	2b07      	cmp	r3, #7
 800bd76:	d020      	beq.n	800bdba <tcp_close_shutdown_fin+0x66>
 800bd78:	2b07      	cmp	r3, #7
 800bd7a:	dc2b      	bgt.n	800bdd4 <tcp_close_shutdown_fin+0x80>
 800bd7c:	2b03      	cmp	r3, #3
 800bd7e:	d002      	beq.n	800bd86 <tcp_close_shutdown_fin+0x32>
 800bd80:	2b04      	cmp	r3, #4
 800bd82:	d00d      	beq.n	800bda0 <tcp_close_shutdown_fin+0x4c>
 800bd84:	e026      	b.n	800bdd4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f004 fe0c 	bl	80109a4 <tcp_send_fin>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bd90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d11f      	bne.n	800bdd8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2205      	movs	r2, #5
 800bd9c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bd9e:	e01b      	b.n	800bdd8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f004 fdff 	bl	80109a4 <tcp_send_fin>
 800bda6:	4603      	mov	r3, r0
 800bda8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bdaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d114      	bne.n	800bddc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2205      	movs	r2, #5
 800bdb6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bdb8:	e010      	b.n	800bddc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f004 fdf2 	bl	80109a4 <tcp_send_fin>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bdc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d109      	bne.n	800bde0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2209      	movs	r2, #9
 800bdd0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bdd2:	e005      	b.n	800bde0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	e01c      	b.n	800be12 <tcp_close_shutdown_fin+0xbe>
      break;
 800bdd8:	bf00      	nop
 800bdda:	e002      	b.n	800bde2 <tcp_close_shutdown_fin+0x8e>
      break;
 800bddc:	bf00      	nop
 800bdde:	e000      	b.n	800bde2 <tcp_close_shutdown_fin+0x8e>
      break;
 800bde0:	bf00      	nop
  }

  if (err == ERR_OK) {
 800bde2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d103      	bne.n	800bdf2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f004 ff18 	bl	8010c20 <tcp_output>
 800bdf0:	e00d      	b.n	800be0e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800bdf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bdf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdfa:	d108      	bne.n	800be0e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	8b5b      	ldrh	r3, [r3, #26]
 800be00:	f043 0308 	orr.w	r3, r3, #8
 800be04:	b29a      	uxth	r2, r3
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800be0a:	2300      	movs	r3, #0
 800be0c:	e001      	b.n	800be12 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800be0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800be12:	4618      	mov	r0, r3
 800be14:	3710      	adds	r7, #16
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}
 800be1a:	bf00      	nop
 800be1c:	08019c34 	.word	0x08019c34
 800be20:	08019ce4 	.word	0x08019ce4
 800be24:	08019c78 	.word	0x08019c78

0800be28 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b082      	sub	sp, #8
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d109      	bne.n	800be4a <tcp_close+0x22>
 800be36:	4b0f      	ldr	r3, [pc, #60]	; (800be74 <tcp_close+0x4c>)
 800be38:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800be3c:	490e      	ldr	r1, [pc, #56]	; (800be78 <tcp_close+0x50>)
 800be3e:	480f      	ldr	r0, [pc, #60]	; (800be7c <tcp_close+0x54>)
 800be40:	f00b f9b2 	bl	80171a8 <iprintf>
 800be44:	f06f 030f 	mvn.w	r3, #15
 800be48:	e00f      	b.n	800be6a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	7d1b      	ldrb	r3, [r3, #20]
 800be4e:	2b01      	cmp	r3, #1
 800be50:	d006      	beq.n	800be60 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	8b5b      	ldrh	r3, [r3, #26]
 800be56:	f043 0310 	orr.w	r3, r3, #16
 800be5a:	b29a      	uxth	r2, r3
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800be60:	2101      	movs	r1, #1
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f7ff fe94 	bl	800bb90 <tcp_close_shutdown>
 800be68:	4603      	mov	r3, r0
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	3708      	adds	r7, #8
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd80      	pop	{r7, pc}
 800be72:	bf00      	nop
 800be74:	08019c34 	.word	0x08019c34
 800be78:	08019d44 	.word	0x08019d44
 800be7c:	08019c78 	.word	0x08019c78

0800be80 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b084      	sub	sp, #16
 800be84:	af00      	add	r7, sp, #0
 800be86:	60f8      	str	r0, [r7, #12]
 800be88:	60b9      	str	r1, [r7, #8]
 800be8a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d109      	bne.n	800bea6 <tcp_shutdown+0x26>
 800be92:	4b26      	ldr	r3, [pc, #152]	; (800bf2c <tcp_shutdown+0xac>)
 800be94:	f240 2207 	movw	r2, #519	; 0x207
 800be98:	4925      	ldr	r1, [pc, #148]	; (800bf30 <tcp_shutdown+0xb0>)
 800be9a:	4826      	ldr	r0, [pc, #152]	; (800bf34 <tcp_shutdown+0xb4>)
 800be9c:	f00b f984 	bl	80171a8 <iprintf>
 800bea0:	f06f 030f 	mvn.w	r3, #15
 800bea4:	e03d      	b.n	800bf22 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	7d1b      	ldrb	r3, [r3, #20]
 800beaa:	2b01      	cmp	r3, #1
 800beac:	d102      	bne.n	800beb4 <tcp_shutdown+0x34>
    return ERR_CONN;
 800beae:	f06f 030a 	mvn.w	r3, #10
 800beb2:	e036      	b.n	800bf22 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d01b      	beq.n	800bef2 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	8b5b      	ldrh	r3, [r3, #26]
 800bebe:	f043 0310 	orr.w	r3, r3, #16
 800bec2:	b29a      	uxth	r2, r3
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d005      	beq.n	800beda <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800bece:	2101      	movs	r1, #1
 800bed0:	68f8      	ldr	r0, [r7, #12]
 800bed2:	f7ff fe5d 	bl	800bb90 <tcp_close_shutdown>
 800bed6:	4603      	mov	r3, r0
 800bed8:	e023      	b.n	800bf22 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d007      	beq.n	800bef2 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bee6:	4618      	mov	r0, r3
 800bee8:	f7ff fae4 	bl	800b4b4 <pbuf_free>
      pcb->refused_data = NULL;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	2200      	movs	r2, #0
 800bef0:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d013      	beq.n	800bf20 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	7d1b      	ldrb	r3, [r3, #20]
 800befc:	2b04      	cmp	r3, #4
 800befe:	dc02      	bgt.n	800bf06 <tcp_shutdown+0x86>
 800bf00:	2b03      	cmp	r3, #3
 800bf02:	da02      	bge.n	800bf0a <tcp_shutdown+0x8a>
 800bf04:	e009      	b.n	800bf1a <tcp_shutdown+0x9a>
 800bf06:	2b07      	cmp	r3, #7
 800bf08:	d107      	bne.n	800bf1a <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	b2db      	uxtb	r3, r3
 800bf0e:	4619      	mov	r1, r3
 800bf10:	68f8      	ldr	r0, [r7, #12]
 800bf12:	f7ff fe3d 	bl	800bb90 <tcp_close_shutdown>
 800bf16:	4603      	mov	r3, r0
 800bf18:	e003      	b.n	800bf22 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800bf1a:	f06f 030a 	mvn.w	r3, #10
 800bf1e:	e000      	b.n	800bf22 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800bf20:	2300      	movs	r3, #0
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3710      	adds	r7, #16
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}
 800bf2a:	bf00      	nop
 800bf2c:	08019c34 	.word	0x08019c34
 800bf30:	08019d5c 	.word	0x08019d5c
 800bf34:	08019c78 	.word	0x08019c78

0800bf38 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b08e      	sub	sp, #56	; 0x38
 800bf3c:	af04      	add	r7, sp, #16
 800bf3e:	6078      	str	r0, [r7, #4]
 800bf40:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d107      	bne.n	800bf58 <tcp_abandon+0x20>
 800bf48:	4b52      	ldr	r3, [pc, #328]	; (800c094 <tcp_abandon+0x15c>)
 800bf4a:	f240 223d 	movw	r2, #573	; 0x23d
 800bf4e:	4952      	ldr	r1, [pc, #328]	; (800c098 <tcp_abandon+0x160>)
 800bf50:	4852      	ldr	r0, [pc, #328]	; (800c09c <tcp_abandon+0x164>)
 800bf52:	f00b f929 	bl	80171a8 <iprintf>
 800bf56:	e099      	b.n	800c08c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	7d1b      	ldrb	r3, [r3, #20]
 800bf5c:	2b01      	cmp	r3, #1
 800bf5e:	d106      	bne.n	800bf6e <tcp_abandon+0x36>
 800bf60:	4b4c      	ldr	r3, [pc, #304]	; (800c094 <tcp_abandon+0x15c>)
 800bf62:	f44f 7210 	mov.w	r2, #576	; 0x240
 800bf66:	494e      	ldr	r1, [pc, #312]	; (800c0a0 <tcp_abandon+0x168>)
 800bf68:	484c      	ldr	r0, [pc, #304]	; (800c09c <tcp_abandon+0x164>)
 800bf6a:	f00b f91d 	bl	80171a8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	7d1b      	ldrb	r3, [r3, #20]
 800bf72:	2b0a      	cmp	r3, #10
 800bf74:	d107      	bne.n	800bf86 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800bf76:	6879      	ldr	r1, [r7, #4]
 800bf78:	484a      	ldr	r0, [pc, #296]	; (800c0a4 <tcp_abandon+0x16c>)
 800bf7a:	f001 fa39 	bl	800d3f0 <tcp_pcb_remove>
    tcp_free(pcb);
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f7ff fd54 	bl	800ba2c <tcp_free>
 800bf84:	e082      	b.n	800c08c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800bf86:	2300      	movs	r3, #0
 800bf88:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf92:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf98:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bfa0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	691b      	ldr	r3, [r3, #16]
 800bfa6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	7d1b      	ldrb	r3, [r3, #20]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d126      	bne.n	800bffe <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	8adb      	ldrh	r3, [r3, #22]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d02e      	beq.n	800c016 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800bfb8:	4b3b      	ldr	r3, [pc, #236]	; (800c0a8 <tcp_abandon+0x170>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	687a      	ldr	r2, [r7, #4]
 800bfbe:	429a      	cmp	r2, r3
 800bfc0:	d105      	bne.n	800bfce <tcp_abandon+0x96>
 800bfc2:	4b39      	ldr	r3, [pc, #228]	; (800c0a8 <tcp_abandon+0x170>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	68db      	ldr	r3, [r3, #12]
 800bfc8:	4a37      	ldr	r2, [pc, #220]	; (800c0a8 <tcp_abandon+0x170>)
 800bfca:	6013      	str	r3, [r2, #0]
 800bfcc:	e013      	b.n	800bff6 <tcp_abandon+0xbe>
 800bfce:	4b36      	ldr	r3, [pc, #216]	; (800c0a8 <tcp_abandon+0x170>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	61fb      	str	r3, [r7, #28]
 800bfd4:	e00c      	b.n	800bff0 <tcp_abandon+0xb8>
 800bfd6:	69fb      	ldr	r3, [r7, #28]
 800bfd8:	68db      	ldr	r3, [r3, #12]
 800bfda:	687a      	ldr	r2, [r7, #4]
 800bfdc:	429a      	cmp	r2, r3
 800bfde:	d104      	bne.n	800bfea <tcp_abandon+0xb2>
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	68da      	ldr	r2, [r3, #12]
 800bfe4:	69fb      	ldr	r3, [r7, #28]
 800bfe6:	60da      	str	r2, [r3, #12]
 800bfe8:	e005      	b.n	800bff6 <tcp_abandon+0xbe>
 800bfea:	69fb      	ldr	r3, [r7, #28]
 800bfec:	68db      	ldr	r3, [r3, #12]
 800bfee:	61fb      	str	r3, [r7, #28]
 800bff0:	69fb      	ldr	r3, [r7, #28]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d1ef      	bne.n	800bfd6 <tcp_abandon+0x9e>
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2200      	movs	r2, #0
 800bffa:	60da      	str	r2, [r3, #12]
 800bffc:	e00b      	b.n	800c016 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	8adb      	ldrh	r3, [r3, #22]
 800c006:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c008:	6879      	ldr	r1, [r7, #4]
 800c00a:	4828      	ldr	r0, [pc, #160]	; (800c0ac <tcp_abandon+0x174>)
 800c00c:	f001 f9f0 	bl	800d3f0 <tcp_pcb_remove>
 800c010:	4b27      	ldr	r3, [pc, #156]	; (800c0b0 <tcp_abandon+0x178>)
 800c012:	2201      	movs	r2, #1
 800c014:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d004      	beq.n	800c028 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c022:	4618      	mov	r0, r3
 800c024:	f000 fec4 	bl	800cdb0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d004      	beq.n	800c03a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c034:	4618      	mov	r0, r3
 800c036:	f000 febb 	bl	800cdb0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d004      	beq.n	800c04c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c046:	4618      	mov	r0, r3
 800c048:	f000 feb2 	bl	800cdb0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d00e      	beq.n	800c070 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c052:	6879      	ldr	r1, [r7, #4]
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	3304      	adds	r3, #4
 800c058:	687a      	ldr	r2, [r7, #4]
 800c05a:	8b12      	ldrh	r2, [r2, #24]
 800c05c:	9202      	str	r2, [sp, #8]
 800c05e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c060:	9201      	str	r2, [sp, #4]
 800c062:	9300      	str	r3, [sp, #0]
 800c064:	460b      	mov	r3, r1
 800c066:	697a      	ldr	r2, [r7, #20]
 800c068:	69b9      	ldr	r1, [r7, #24]
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f005 fb8c 	bl	8011788 <tcp_rst>
    }
    last_state = pcb->state;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	7d1b      	ldrb	r3, [r3, #20]
 800c074:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f7ff fcd8 	bl	800ba2c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c07c:	693b      	ldr	r3, [r7, #16]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d004      	beq.n	800c08c <tcp_abandon+0x154>
 800c082:	693b      	ldr	r3, [r7, #16]
 800c084:	f06f 010c 	mvn.w	r1, #12
 800c088:	68f8      	ldr	r0, [r7, #12]
 800c08a:	4798      	blx	r3
  }
}
 800c08c:	3728      	adds	r7, #40	; 0x28
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}
 800c092:	bf00      	nop
 800c094:	08019c34 	.word	0x08019c34
 800c098:	08019d78 	.word	0x08019d78
 800c09c:	08019c78 	.word	0x08019c78
 800c0a0:	08019d94 	.word	0x08019d94
 800c0a4:	2000efec 	.word	0x2000efec
 800c0a8:	2000efe8 	.word	0x2000efe8
 800c0ac:	2000efdc 	.word	0x2000efdc
 800c0b0:	2000efd8 	.word	0x2000efd8

0800c0b4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b082      	sub	sp, #8
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c0bc:	2101      	movs	r1, #1
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f7ff ff3a 	bl	800bf38 <tcp_abandon>
}
 800c0c4:	bf00      	nop
 800c0c6:	3708      	adds	r7, #8
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}

0800c0cc <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b088      	sub	sp, #32
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	60f8      	str	r0, [r7, #12]
 800c0d4:	60b9      	str	r1, [r7, #8]
 800c0d6:	4613      	mov	r3, r2
 800c0d8:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800c0da:	2304      	movs	r3, #4
 800c0dc:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d101      	bne.n	800c0e8 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800c0e4:	4b3e      	ldr	r3, [pc, #248]	; (800c1e0 <tcp_bind+0x114>)
 800c0e6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d109      	bne.n	800c102 <tcp_bind+0x36>
 800c0ee:	4b3d      	ldr	r3, [pc, #244]	; (800c1e4 <tcp_bind+0x118>)
 800c0f0:	f240 22a9 	movw	r2, #681	; 0x2a9
 800c0f4:	493c      	ldr	r1, [pc, #240]	; (800c1e8 <tcp_bind+0x11c>)
 800c0f6:	483d      	ldr	r0, [pc, #244]	; (800c1ec <tcp_bind+0x120>)
 800c0f8:	f00b f856 	bl	80171a8 <iprintf>
 800c0fc:	f06f 030f 	mvn.w	r3, #15
 800c100:	e06a      	b.n	800c1d8 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	7d1b      	ldrb	r3, [r3, #20]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d009      	beq.n	800c11e <tcp_bind+0x52>
 800c10a:	4b36      	ldr	r3, [pc, #216]	; (800c1e4 <tcp_bind+0x118>)
 800c10c:	f240 22ab 	movw	r2, #683	; 0x2ab
 800c110:	4937      	ldr	r1, [pc, #220]	; (800c1f0 <tcp_bind+0x124>)
 800c112:	4836      	ldr	r0, [pc, #216]	; (800c1ec <tcp_bind+0x120>)
 800c114:	f00b f848 	bl	80171a8 <iprintf>
 800c118:	f06f 0305 	mvn.w	r3, #5
 800c11c:	e05c      	b.n	800c1d8 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800c11e:	88fb      	ldrh	r3, [r7, #6]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d109      	bne.n	800c138 <tcp_bind+0x6c>
    port = tcp_new_port();
 800c124:	f000 f9de 	bl	800c4e4 <tcp_new_port>
 800c128:	4603      	mov	r3, r0
 800c12a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c12c:	88fb      	ldrh	r3, [r7, #6]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d135      	bne.n	800c19e <tcp_bind+0xd2>
      return ERR_BUF;
 800c132:	f06f 0301 	mvn.w	r3, #1
 800c136:	e04f      	b.n	800c1d8 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800c138:	2300      	movs	r3, #0
 800c13a:	61fb      	str	r3, [r7, #28]
 800c13c:	e02b      	b.n	800c196 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c13e:	4a2d      	ldr	r2, [pc, #180]	; (800c1f4 <tcp_bind+0x128>)
 800c140:	69fb      	ldr	r3, [r7, #28]
 800c142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	61bb      	str	r3, [r7, #24]
 800c14a:	e01e      	b.n	800c18a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800c14c:	69bb      	ldr	r3, [r7, #24]
 800c14e:	8adb      	ldrh	r3, [r3, #22]
 800c150:	88fa      	ldrh	r2, [r7, #6]
 800c152:	429a      	cmp	r2, r3
 800c154:	d116      	bne.n	800c184 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800c156:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d010      	beq.n	800c17e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800c15c:	69bb      	ldr	r3, [r7, #24]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d00c      	beq.n	800c17e <tcp_bind+0xb2>
 800c164:	68bb      	ldr	r3, [r7, #8]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d009      	beq.n	800c17e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d005      	beq.n	800c17e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800c172:	69bb      	ldr	r3, [r7, #24]
 800c174:	681a      	ldr	r2, [r3, #0]
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c17a:	429a      	cmp	r2, r3
 800c17c:	d102      	bne.n	800c184 <tcp_bind+0xb8>
              return ERR_USE;
 800c17e:	f06f 0307 	mvn.w	r3, #7
 800c182:	e029      	b.n	800c1d8 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c184:	69bb      	ldr	r3, [r7, #24]
 800c186:	68db      	ldr	r3, [r3, #12]
 800c188:	61bb      	str	r3, [r7, #24]
 800c18a:	69bb      	ldr	r3, [r7, #24]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d1dd      	bne.n	800c14c <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800c190:	69fb      	ldr	r3, [r7, #28]
 800c192:	3301      	adds	r3, #1
 800c194:	61fb      	str	r3, [r7, #28]
 800c196:	69fa      	ldr	r2, [r7, #28]
 800c198:	697b      	ldr	r3, [r7, #20]
 800c19a:	429a      	cmp	r2, r3
 800c19c:	dbcf      	blt.n	800c13e <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d00c      	beq.n	800c1be <tcp_bind+0xf2>
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d008      	beq.n	800c1be <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d002      	beq.n	800c1b8 <tcp_bind+0xec>
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	e000      	b.n	800c1ba <tcp_bind+0xee>
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	68fa      	ldr	r2, [r7, #12]
 800c1bc:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	88fa      	ldrh	r2, [r7, #6]
 800c1c2:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800c1c4:	4b0c      	ldr	r3, [pc, #48]	; (800c1f8 <tcp_bind+0x12c>)
 800c1c6:	681a      	ldr	r2, [r3, #0]
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	60da      	str	r2, [r3, #12]
 800c1cc:	4a0a      	ldr	r2, [pc, #40]	; (800c1f8 <tcp_bind+0x12c>)
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	6013      	str	r3, [r2, #0]
 800c1d2:	f005 fc9b 	bl	8011b0c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800c1d6:	2300      	movs	r3, #0
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	3720      	adds	r7, #32
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}
 800c1e0:	0801c024 	.word	0x0801c024
 800c1e4:	08019c34 	.word	0x08019c34
 800c1e8:	08019dc8 	.word	0x08019dc8
 800c1ec:	08019c78 	.word	0x08019c78
 800c1f0:	08019de0 	.word	0x08019de0
 800c1f4:	0801bfec 	.word	0x0801bfec
 800c1f8:	2000efe8 	.word	0x2000efe8

0800c1fc <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b084      	sub	sp, #16
 800c200:	af00      	add	r7, sp, #0
 800c202:	60f8      	str	r0, [r7, #12]
 800c204:	60b9      	str	r1, [r7, #8]
 800c206:	4613      	mov	r3, r2
 800c208:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d106      	bne.n	800c21e <tcp_accept_null+0x22>
 800c210:	4b07      	ldr	r3, [pc, #28]	; (800c230 <tcp_accept_null+0x34>)
 800c212:	f240 320f 	movw	r2, #783	; 0x30f
 800c216:	4907      	ldr	r1, [pc, #28]	; (800c234 <tcp_accept_null+0x38>)
 800c218:	4807      	ldr	r0, [pc, #28]	; (800c238 <tcp_accept_null+0x3c>)
 800c21a:	f00a ffc5 	bl	80171a8 <iprintf>

  tcp_abort(pcb);
 800c21e:	68b8      	ldr	r0, [r7, #8]
 800c220:	f7ff ff48 	bl	800c0b4 <tcp_abort>

  return ERR_ABRT;
 800c224:	f06f 030c 	mvn.w	r3, #12
}
 800c228:	4618      	mov	r0, r3
 800c22a:	3710      	adds	r7, #16
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}
 800c230:	08019c34 	.word	0x08019c34
 800c234:	08019e08 	.word	0x08019e08
 800c238:	08019c78 	.word	0x08019c78

0800c23c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b088      	sub	sp, #32
 800c240:	af00      	add	r7, sp, #0
 800c242:	60f8      	str	r0, [r7, #12]
 800c244:	460b      	mov	r3, r1
 800c246:	607a      	str	r2, [r7, #4]
 800c248:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800c24a:	2300      	movs	r3, #0
 800c24c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d109      	bne.n	800c268 <tcp_listen_with_backlog_and_err+0x2c>
 800c254:	4b47      	ldr	r3, [pc, #284]	; (800c374 <tcp_listen_with_backlog_and_err+0x138>)
 800c256:	f240 3259 	movw	r2, #857	; 0x359
 800c25a:	4947      	ldr	r1, [pc, #284]	; (800c378 <tcp_listen_with_backlog_and_err+0x13c>)
 800c25c:	4847      	ldr	r0, [pc, #284]	; (800c37c <tcp_listen_with_backlog_and_err+0x140>)
 800c25e:	f00a ffa3 	bl	80171a8 <iprintf>
 800c262:	23f0      	movs	r3, #240	; 0xf0
 800c264:	76fb      	strb	r3, [r7, #27]
 800c266:	e079      	b.n	800c35c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	7d1b      	ldrb	r3, [r3, #20]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d009      	beq.n	800c284 <tcp_listen_with_backlog_and_err+0x48>
 800c270:	4b40      	ldr	r3, [pc, #256]	; (800c374 <tcp_listen_with_backlog_and_err+0x138>)
 800c272:	f240 325a 	movw	r2, #858	; 0x35a
 800c276:	4942      	ldr	r1, [pc, #264]	; (800c380 <tcp_listen_with_backlog_and_err+0x144>)
 800c278:	4840      	ldr	r0, [pc, #256]	; (800c37c <tcp_listen_with_backlog_and_err+0x140>)
 800c27a:	f00a ff95 	bl	80171a8 <iprintf>
 800c27e:	23f1      	movs	r3, #241	; 0xf1
 800c280:	76fb      	strb	r3, [r7, #27]
 800c282:	e06b      	b.n	800c35c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	7d1b      	ldrb	r3, [r3, #20]
 800c288:	2b01      	cmp	r3, #1
 800c28a:	d104      	bne.n	800c296 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800c290:	23f7      	movs	r3, #247	; 0xf7
 800c292:	76fb      	strb	r3, [r7, #27]
    goto done;
 800c294:	e062      	b.n	800c35c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800c296:	2002      	movs	r0, #2
 800c298:	f7fe fa0a 	bl	800a6b0 <memp_malloc>
 800c29c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800c29e:	69fb      	ldr	r3, [r7, #28]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d102      	bne.n	800c2aa <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800c2a4:	23ff      	movs	r3, #255	; 0xff
 800c2a6:	76fb      	strb	r3, [r7, #27]
    goto done;
 800c2a8:	e058      	b.n	800c35c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	691a      	ldr	r2, [r3, #16]
 800c2ae:	69fb      	ldr	r3, [r7, #28]
 800c2b0:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	8ada      	ldrh	r2, [r3, #22]
 800c2b6:	69fb      	ldr	r3, [r7, #28]
 800c2b8:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800c2ba:	69fb      	ldr	r3, [r7, #28]
 800c2bc:	2201      	movs	r2, #1
 800c2be:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	7d5a      	ldrb	r2, [r3, #21]
 800c2c4:	69fb      	ldr	r3, [r7, #28]
 800c2c6:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	7a5a      	ldrb	r2, [r3, #9]
 800c2cc:	69fb      	ldr	r3, [r7, #28]
 800c2ce:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800c2d0:	69fb      	ldr	r3, [r7, #28]
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	7ada      	ldrb	r2, [r3, #11]
 800c2da:	69fb      	ldr	r3, [r7, #28]
 800c2dc:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	7a9a      	ldrb	r2, [r3, #10]
 800c2e2:	69fb      	ldr	r3, [r7, #28]
 800c2e4:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	681a      	ldr	r2, [r3, #0]
 800c2ea:	69fb      	ldr	r3, [r7, #28]
 800c2ec:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	8adb      	ldrh	r3, [r3, #22]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d021      	beq.n	800c33a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800c2f6:	4b23      	ldr	r3, [pc, #140]	; (800c384 <tcp_listen_with_backlog_and_err+0x148>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	68fa      	ldr	r2, [r7, #12]
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d105      	bne.n	800c30c <tcp_listen_with_backlog_and_err+0xd0>
 800c300:	4b20      	ldr	r3, [pc, #128]	; (800c384 <tcp_listen_with_backlog_and_err+0x148>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	68db      	ldr	r3, [r3, #12]
 800c306:	4a1f      	ldr	r2, [pc, #124]	; (800c384 <tcp_listen_with_backlog_and_err+0x148>)
 800c308:	6013      	str	r3, [r2, #0]
 800c30a:	e013      	b.n	800c334 <tcp_listen_with_backlog_and_err+0xf8>
 800c30c:	4b1d      	ldr	r3, [pc, #116]	; (800c384 <tcp_listen_with_backlog_and_err+0x148>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	617b      	str	r3, [r7, #20]
 800c312:	e00c      	b.n	800c32e <tcp_listen_with_backlog_and_err+0xf2>
 800c314:	697b      	ldr	r3, [r7, #20]
 800c316:	68db      	ldr	r3, [r3, #12]
 800c318:	68fa      	ldr	r2, [r7, #12]
 800c31a:	429a      	cmp	r2, r3
 800c31c:	d104      	bne.n	800c328 <tcp_listen_with_backlog_and_err+0xec>
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	68da      	ldr	r2, [r3, #12]
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	60da      	str	r2, [r3, #12]
 800c326:	e005      	b.n	800c334 <tcp_listen_with_backlog_and_err+0xf8>
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	68db      	ldr	r3, [r3, #12]
 800c32c:	617b      	str	r3, [r7, #20]
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d1ef      	bne.n	800c314 <tcp_listen_with_backlog_and_err+0xd8>
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	2200      	movs	r2, #0
 800c338:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800c33a:	68f8      	ldr	r0, [r7, #12]
 800c33c:	f7ff fb76 	bl	800ba2c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800c340:	69fb      	ldr	r3, [r7, #28]
 800c342:	4a11      	ldr	r2, [pc, #68]	; (800c388 <tcp_listen_with_backlog_and_err+0x14c>)
 800c344:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800c346:	4b11      	ldr	r3, [pc, #68]	; (800c38c <tcp_listen_with_backlog_and_err+0x150>)
 800c348:	681a      	ldr	r2, [r3, #0]
 800c34a:	69fb      	ldr	r3, [r7, #28]
 800c34c:	60da      	str	r2, [r3, #12]
 800c34e:	4a0f      	ldr	r2, [pc, #60]	; (800c38c <tcp_listen_with_backlog_and_err+0x150>)
 800c350:	69fb      	ldr	r3, [r7, #28]
 800c352:	6013      	str	r3, [r2, #0]
 800c354:	f005 fbda 	bl	8011b0c <tcp_timer_needed>
  res = ERR_OK;
 800c358:	2300      	movs	r3, #0
 800c35a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d002      	beq.n	800c368 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	7efa      	ldrb	r2, [r7, #27]
 800c366:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800c368:	69fb      	ldr	r3, [r7, #28]
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	3720      	adds	r7, #32
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}
 800c372:	bf00      	nop
 800c374:	08019c34 	.word	0x08019c34
 800c378:	08019e28 	.word	0x08019e28
 800c37c:	08019c78 	.word	0x08019c78
 800c380:	08019e58 	.word	0x08019e58
 800c384:	2000efe8 	.word	0x2000efe8
 800c388:	0800c1fd 	.word	0x0800c1fd
 800c38c:	2000efe4 	.word	0x2000efe4

0800c390 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b084      	sub	sp, #16
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d106      	bne.n	800c3ac <tcp_update_rcv_ann_wnd+0x1c>
 800c39e:	4b25      	ldr	r3, [pc, #148]	; (800c434 <tcp_update_rcv_ann_wnd+0xa4>)
 800c3a0:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c3a4:	4924      	ldr	r1, [pc, #144]	; (800c438 <tcp_update_rcv_ann_wnd+0xa8>)
 800c3a6:	4825      	ldr	r0, [pc, #148]	; (800c43c <tcp_update_rcv_ann_wnd+0xac>)
 800c3a8:	f00a fefe 	bl	80171a8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3b0:	687a      	ldr	r2, [r7, #4]
 800c3b2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c3b4:	4413      	add	r3, r2
 800c3b6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3bc:	687a      	ldr	r2, [r7, #4]
 800c3be:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800c3c0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800c3c4:	bf28      	it	cs
 800c3c6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800c3ca:	b292      	uxth	r2, r2
 800c3cc:	4413      	add	r3, r2
 800c3ce:	68fa      	ldr	r2, [r7, #12]
 800c3d0:	1ad3      	subs	r3, r2, r3
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	db08      	blt.n	800c3e8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3e2:	68fa      	ldr	r2, [r7, #12]
 800c3e4:	1ad3      	subs	r3, r2, r3
 800c3e6:	e020      	b.n	800c42a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3f0:	1ad3      	subs	r3, r2, r3
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	dd03      	ble.n	800c3fe <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c3fc:	e014      	b.n	800c428 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c406:	1ad3      	subs	r3, r2, r3
 800c408:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c410:	d306      	bcc.n	800c420 <tcp_update_rcv_ann_wnd+0x90>
 800c412:	4b08      	ldr	r3, [pc, #32]	; (800c434 <tcp_update_rcv_ann_wnd+0xa4>)
 800c414:	f240 32b6 	movw	r2, #950	; 0x3b6
 800c418:	4909      	ldr	r1, [pc, #36]	; (800c440 <tcp_update_rcv_ann_wnd+0xb0>)
 800c41a:	4808      	ldr	r0, [pc, #32]	; (800c43c <tcp_update_rcv_ann_wnd+0xac>)
 800c41c:	f00a fec4 	bl	80171a8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	b29a      	uxth	r2, r3
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800c428:	2300      	movs	r3, #0
  }
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3710      	adds	r7, #16
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}
 800c432:	bf00      	nop
 800c434:	08019c34 	.word	0x08019c34
 800c438:	08019e90 	.word	0x08019e90
 800c43c:	08019c78 	.word	0x08019c78
 800c440:	08019eb4 	.word	0x08019eb4

0800c444 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b084      	sub	sp, #16
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
 800c44c:	460b      	mov	r3, r1
 800c44e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d107      	bne.n	800c466 <tcp_recved+0x22>
 800c456:	4b1f      	ldr	r3, [pc, #124]	; (800c4d4 <tcp_recved+0x90>)
 800c458:	f240 32cf 	movw	r2, #975	; 0x3cf
 800c45c:	491e      	ldr	r1, [pc, #120]	; (800c4d8 <tcp_recved+0x94>)
 800c45e:	481f      	ldr	r0, [pc, #124]	; (800c4dc <tcp_recved+0x98>)
 800c460:	f00a fea2 	bl	80171a8 <iprintf>
 800c464:	e032      	b.n	800c4cc <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	7d1b      	ldrb	r3, [r3, #20]
 800c46a:	2b01      	cmp	r3, #1
 800c46c:	d106      	bne.n	800c47c <tcp_recved+0x38>
 800c46e:	4b19      	ldr	r3, [pc, #100]	; (800c4d4 <tcp_recved+0x90>)
 800c470:	f240 32d2 	movw	r2, #978	; 0x3d2
 800c474:	491a      	ldr	r1, [pc, #104]	; (800c4e0 <tcp_recved+0x9c>)
 800c476:	4819      	ldr	r0, [pc, #100]	; (800c4dc <tcp_recved+0x98>)
 800c478:	f00a fe96 	bl	80171a8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c480:	887b      	ldrh	r3, [r7, #2]
 800c482:	4413      	add	r3, r2
 800c484:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c486:	89fb      	ldrh	r3, [r7, #14]
 800c488:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c48c:	d804      	bhi.n	800c498 <tcp_recved+0x54>
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c492:	89fa      	ldrh	r2, [r7, #14]
 800c494:	429a      	cmp	r2, r3
 800c496:	d204      	bcs.n	800c4a2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c49e:	851a      	strh	r2, [r3, #40]	; 0x28
 800c4a0:	e002      	b.n	800c4a8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	89fa      	ldrh	r2, [r7, #14]
 800c4a6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	f7ff ff71 	bl	800c390 <tcp_update_rcv_ann_wnd>
 800c4ae:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c4b6:	d309      	bcc.n	800c4cc <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	8b5b      	ldrh	r3, [r3, #26]
 800c4bc:	f043 0302 	orr.w	r3, r3, #2
 800c4c0:	b29a      	uxth	r2, r3
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	f004 fbaa 	bl	8010c20 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c4cc:	3710      	adds	r7, #16
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}
 800c4d2:	bf00      	nop
 800c4d4:	08019c34 	.word	0x08019c34
 800c4d8:	08019ed0 	.word	0x08019ed0
 800c4dc:	08019c78 	.word	0x08019c78
 800c4e0:	08019ee8 	.word	0x08019ee8

0800c4e4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800c4e4:	b480      	push	{r7}
 800c4e6:	b083      	sub	sp, #12
 800c4e8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800c4ee:	4b1e      	ldr	r3, [pc, #120]	; (800c568 <tcp_new_port+0x84>)
 800c4f0:	881b      	ldrh	r3, [r3, #0]
 800c4f2:	3301      	adds	r3, #1
 800c4f4:	b29a      	uxth	r2, r3
 800c4f6:	4b1c      	ldr	r3, [pc, #112]	; (800c568 <tcp_new_port+0x84>)
 800c4f8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800c4fa:	4b1b      	ldr	r3, [pc, #108]	; (800c568 <tcp_new_port+0x84>)
 800c4fc:	881b      	ldrh	r3, [r3, #0]
 800c4fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c502:	4293      	cmp	r3, r2
 800c504:	d103      	bne.n	800c50e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800c506:	4b18      	ldr	r3, [pc, #96]	; (800c568 <tcp_new_port+0x84>)
 800c508:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800c50c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c50e:	2300      	movs	r3, #0
 800c510:	71fb      	strb	r3, [r7, #7]
 800c512:	e01e      	b.n	800c552 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c514:	79fb      	ldrb	r3, [r7, #7]
 800c516:	4a15      	ldr	r2, [pc, #84]	; (800c56c <tcp_new_port+0x88>)
 800c518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	603b      	str	r3, [r7, #0]
 800c520:	e011      	b.n	800c546 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	8ada      	ldrh	r2, [r3, #22]
 800c526:	4b10      	ldr	r3, [pc, #64]	; (800c568 <tcp_new_port+0x84>)
 800c528:	881b      	ldrh	r3, [r3, #0]
 800c52a:	429a      	cmp	r2, r3
 800c52c:	d108      	bne.n	800c540 <tcp_new_port+0x5c>
        n++;
 800c52e:	88bb      	ldrh	r3, [r7, #4]
 800c530:	3301      	adds	r3, #1
 800c532:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800c534:	88bb      	ldrh	r3, [r7, #4]
 800c536:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c53a:	d3d8      	bcc.n	800c4ee <tcp_new_port+0xa>
          return 0;
 800c53c:	2300      	movs	r3, #0
 800c53e:	e00d      	b.n	800c55c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	68db      	ldr	r3, [r3, #12]
 800c544:	603b      	str	r3, [r7, #0]
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d1ea      	bne.n	800c522 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c54c:	79fb      	ldrb	r3, [r7, #7]
 800c54e:	3301      	adds	r3, #1
 800c550:	71fb      	strb	r3, [r7, #7]
 800c552:	79fb      	ldrb	r3, [r7, #7]
 800c554:	2b03      	cmp	r3, #3
 800c556:	d9dd      	bls.n	800c514 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800c558:	4b03      	ldr	r3, [pc, #12]	; (800c568 <tcp_new_port+0x84>)
 800c55a:	881b      	ldrh	r3, [r3, #0]
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	370c      	adds	r7, #12
 800c560:	46bd      	mov	sp, r7
 800c562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c566:	4770      	bx	lr
 800c568:	20000010 	.word	0x20000010
 800c56c:	0801bfec 	.word	0x0801bfec

0800c570 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c570:	b5b0      	push	{r4, r5, r7, lr}
 800c572:	b090      	sub	sp, #64	; 0x40
 800c574:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c576:	2300      	movs	r3, #0
 800c578:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800c57c:	4b94      	ldr	r3, [pc, #592]	; (800c7d0 <tcp_slowtmr+0x260>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	3301      	adds	r3, #1
 800c582:	4a93      	ldr	r2, [pc, #588]	; (800c7d0 <tcp_slowtmr+0x260>)
 800c584:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c586:	4b93      	ldr	r3, [pc, #588]	; (800c7d4 <tcp_slowtmr+0x264>)
 800c588:	781b      	ldrb	r3, [r3, #0]
 800c58a:	3301      	adds	r3, #1
 800c58c:	b2da      	uxtb	r2, r3
 800c58e:	4b91      	ldr	r3, [pc, #580]	; (800c7d4 <tcp_slowtmr+0x264>)
 800c590:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800c592:	2300      	movs	r3, #0
 800c594:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800c596:	4b90      	ldr	r3, [pc, #576]	; (800c7d8 <tcp_slowtmr+0x268>)
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800c59c:	e29f      	b.n	800cade <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c59e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5a0:	7d1b      	ldrb	r3, [r3, #20]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d106      	bne.n	800c5b4 <tcp_slowtmr+0x44>
 800c5a6:	4b8d      	ldr	r3, [pc, #564]	; (800c7dc <tcp_slowtmr+0x26c>)
 800c5a8:	f240 42be 	movw	r2, #1214	; 0x4be
 800c5ac:	498c      	ldr	r1, [pc, #560]	; (800c7e0 <tcp_slowtmr+0x270>)
 800c5ae:	488d      	ldr	r0, [pc, #564]	; (800c7e4 <tcp_slowtmr+0x274>)
 800c5b0:	f00a fdfa 	bl	80171a8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800c5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5b6:	7d1b      	ldrb	r3, [r3, #20]
 800c5b8:	2b01      	cmp	r3, #1
 800c5ba:	d106      	bne.n	800c5ca <tcp_slowtmr+0x5a>
 800c5bc:	4b87      	ldr	r3, [pc, #540]	; (800c7dc <tcp_slowtmr+0x26c>)
 800c5be:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800c5c2:	4989      	ldr	r1, [pc, #548]	; (800c7e8 <tcp_slowtmr+0x278>)
 800c5c4:	4887      	ldr	r0, [pc, #540]	; (800c7e4 <tcp_slowtmr+0x274>)
 800c5c6:	f00a fdef 	bl	80171a8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c5ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5cc:	7d1b      	ldrb	r3, [r3, #20]
 800c5ce:	2b0a      	cmp	r3, #10
 800c5d0:	d106      	bne.n	800c5e0 <tcp_slowtmr+0x70>
 800c5d2:	4b82      	ldr	r3, [pc, #520]	; (800c7dc <tcp_slowtmr+0x26c>)
 800c5d4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800c5d8:	4984      	ldr	r1, [pc, #528]	; (800c7ec <tcp_slowtmr+0x27c>)
 800c5da:	4882      	ldr	r0, [pc, #520]	; (800c7e4 <tcp_slowtmr+0x274>)
 800c5dc:	f00a fde4 	bl	80171a8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800c5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5e2:	7f9a      	ldrb	r2, [r3, #30]
 800c5e4:	4b7b      	ldr	r3, [pc, #492]	; (800c7d4 <tcp_slowtmr+0x264>)
 800c5e6:	781b      	ldrb	r3, [r3, #0]
 800c5e8:	429a      	cmp	r2, r3
 800c5ea:	d105      	bne.n	800c5f8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800c5ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ee:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c5f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5f2:	68db      	ldr	r3, [r3, #12]
 800c5f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800c5f6:	e272      	b.n	800cade <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800c5f8:	4b76      	ldr	r3, [pc, #472]	; (800c7d4 <tcp_slowtmr+0x264>)
 800c5fa:	781a      	ldrb	r2, [r3, #0]
 800c5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5fe:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800c600:	2300      	movs	r3, #0
 800c602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800c606:	2300      	movs	r3, #0
 800c608:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800c60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c60e:	7d1b      	ldrb	r3, [r3, #20]
 800c610:	2b02      	cmp	r3, #2
 800c612:	d10a      	bne.n	800c62a <tcp_slowtmr+0xba>
 800c614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c616:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c61a:	2b05      	cmp	r3, #5
 800c61c:	d905      	bls.n	800c62a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800c61e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c622:	3301      	adds	r3, #1
 800c624:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c628:	e11e      	b.n	800c868 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800c62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c62c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c630:	2b0b      	cmp	r3, #11
 800c632:	d905      	bls.n	800c640 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800c634:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c638:	3301      	adds	r3, #1
 800c63a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c63e:	e113      	b.n	800c868 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800c640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c642:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c646:	2b00      	cmp	r3, #0
 800c648:	d075      	beq.n	800c736 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800c64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c64c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d006      	beq.n	800c660 <tcp_slowtmr+0xf0>
 800c652:	4b62      	ldr	r3, [pc, #392]	; (800c7dc <tcp_slowtmr+0x26c>)
 800c654:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800c658:	4965      	ldr	r1, [pc, #404]	; (800c7f0 <tcp_slowtmr+0x280>)
 800c65a:	4862      	ldr	r0, [pc, #392]	; (800c7e4 <tcp_slowtmr+0x274>)
 800c65c:	f00a fda4 	bl	80171a8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800c660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c664:	2b00      	cmp	r3, #0
 800c666:	d106      	bne.n	800c676 <tcp_slowtmr+0x106>
 800c668:	4b5c      	ldr	r3, [pc, #368]	; (800c7dc <tcp_slowtmr+0x26c>)
 800c66a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800c66e:	4961      	ldr	r1, [pc, #388]	; (800c7f4 <tcp_slowtmr+0x284>)
 800c670:	485c      	ldr	r0, [pc, #368]	; (800c7e4 <tcp_slowtmr+0x274>)
 800c672:	f00a fd99 	bl	80171a8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800c676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c678:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c67c:	2b0b      	cmp	r3, #11
 800c67e:	d905      	bls.n	800c68c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800c680:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c684:	3301      	adds	r3, #1
 800c686:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c68a:	e0ed      	b.n	800c868 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800c68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c68e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c692:	3b01      	subs	r3, #1
 800c694:	4a58      	ldr	r2, [pc, #352]	; (800c7f8 <tcp_slowtmr+0x288>)
 800c696:	5cd3      	ldrb	r3, [r2, r3]
 800c698:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800c69a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c69c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c6a0:	7c7a      	ldrb	r2, [r7, #17]
 800c6a2:	429a      	cmp	r2, r3
 800c6a4:	d907      	bls.n	800c6b6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800c6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6a8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c6ac:	3301      	adds	r3, #1
 800c6ae:	b2da      	uxtb	r2, r3
 800c6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6b2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800c6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6b8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c6bc:	7c7a      	ldrb	r2, [r7, #17]
 800c6be:	429a      	cmp	r2, r3
 800c6c0:	f200 80d2 	bhi.w	800c868 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800c6c4:	2301      	movs	r3, #1
 800c6c6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800c6c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d108      	bne.n	800c6e4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800c6d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c6d4:	f005 f94c 	bl	8011970 <tcp_zero_window_probe>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d014      	beq.n	800c708 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800c6de:	2300      	movs	r3, #0
 800c6e0:	623b      	str	r3, [r7, #32]
 800c6e2:	e011      	b.n	800c708 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800c6e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c6ea:	4619      	mov	r1, r3
 800c6ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c6ee:	f004 f811 	bl	8010714 <tcp_split_unsent_seg>
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d107      	bne.n	800c708 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800c6f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c6fa:	f004 fa91 	bl	8010c20 <tcp_output>
 800c6fe:	4603      	mov	r3, r0
 800c700:	2b00      	cmp	r3, #0
 800c702:	d101      	bne.n	800c708 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800c704:	2300      	movs	r3, #0
 800c706:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800c708:	6a3b      	ldr	r3, [r7, #32]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	f000 80ac 	beq.w	800c868 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800c710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c712:	2200      	movs	r2, #0
 800c714:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800c718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c71a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c71e:	2b06      	cmp	r3, #6
 800c720:	f200 80a2 	bhi.w	800c868 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800c724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c726:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c72a:	3301      	adds	r3, #1
 800c72c:	b2da      	uxtb	r2, r3
 800c72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c730:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800c734:	e098      	b.n	800c868 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800c736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c738:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	db0f      	blt.n	800c760 <tcp_slowtmr+0x1f0>
 800c740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c742:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c746:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c74a:	4293      	cmp	r3, r2
 800c74c:	d008      	beq.n	800c760 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800c74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c750:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c754:	b29b      	uxth	r3, r3
 800c756:	3301      	adds	r3, #1
 800c758:	b29b      	uxth	r3, r3
 800c75a:	b21a      	sxth	r2, r3
 800c75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c75e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800c760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c762:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800c766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c768:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c76c:	429a      	cmp	r2, r3
 800c76e:	db7b      	blt.n	800c868 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800c770:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c772:	f004 fd47 	bl	8011204 <tcp_rexmit_rto_prepare>
 800c776:	4603      	mov	r3, r0
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d007      	beq.n	800c78c <tcp_slowtmr+0x21c>
 800c77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c77e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c780:	2b00      	cmp	r3, #0
 800c782:	d171      	bne.n	800c868 <tcp_slowtmr+0x2f8>
 800c784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c786:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d06d      	beq.n	800c868 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800c78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c78e:	7d1b      	ldrb	r3, [r3, #20]
 800c790:	2b02      	cmp	r3, #2
 800c792:	d03a      	beq.n	800c80a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800c794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c796:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c79a:	2b0c      	cmp	r3, #12
 800c79c:	bf28      	it	cs
 800c79e:	230c      	movcs	r3, #12
 800c7a0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800c7a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7a4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c7a8:	10db      	asrs	r3, r3, #3
 800c7aa:	b21b      	sxth	r3, r3
 800c7ac:	461a      	mov	r2, r3
 800c7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7b0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c7b4:	4413      	add	r3, r2
 800c7b6:	7efa      	ldrb	r2, [r7, #27]
 800c7b8:	4910      	ldr	r1, [pc, #64]	; (800c7fc <tcp_slowtmr+0x28c>)
 800c7ba:	5c8a      	ldrb	r2, [r1, r2]
 800c7bc:	4093      	lsls	r3, r2
 800c7be:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800c7c0:	697b      	ldr	r3, [r7, #20]
 800c7c2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800c7c6:	4293      	cmp	r3, r2
 800c7c8:	dc1a      	bgt.n	800c800 <tcp_slowtmr+0x290>
 800c7ca:	697b      	ldr	r3, [r7, #20]
 800c7cc:	b21a      	sxth	r2, r3
 800c7ce:	e019      	b.n	800c804 <tcp_slowtmr+0x294>
 800c7d0:	2000efe0 	.word	0x2000efe0
 800c7d4:	2000854a 	.word	0x2000854a
 800c7d8:	2000efdc 	.word	0x2000efdc
 800c7dc:	08019c34 	.word	0x08019c34
 800c7e0:	08019f78 	.word	0x08019f78
 800c7e4:	08019c78 	.word	0x08019c78
 800c7e8:	08019fa4 	.word	0x08019fa4
 800c7ec:	08019fd0 	.word	0x08019fd0
 800c7f0:	0801a000 	.word	0x0801a000
 800c7f4:	0801a034 	.word	0x0801a034
 800c7f8:	0801bfe4 	.word	0x0801bfe4
 800c7fc:	0801bfd4 	.word	0x0801bfd4
 800c800:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c806:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800c80a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c80c:	2200      	movs	r2, #0
 800c80e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800c810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c812:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c818:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c81c:	4293      	cmp	r3, r2
 800c81e:	bf28      	it	cs
 800c820:	4613      	movcs	r3, r2
 800c822:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800c824:	8a7b      	ldrh	r3, [r7, #18]
 800c826:	085b      	lsrs	r3, r3, #1
 800c828:	b29a      	uxth	r2, r3
 800c82a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c82c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800c830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c832:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c838:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c83a:	005b      	lsls	r3, r3, #1
 800c83c:	b29b      	uxth	r3, r3
 800c83e:	429a      	cmp	r2, r3
 800c840:	d206      	bcs.n	800c850 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800c842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c844:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c846:	005b      	lsls	r3, r3, #1
 800c848:	b29a      	uxth	r2, r3
 800c84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c84c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800c850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c852:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800c854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c856:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800c85a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c85c:	2200      	movs	r2, #0
 800c85e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800c862:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c864:	f004 fd3e 	bl	80112e4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800c868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c86a:	7d1b      	ldrb	r3, [r3, #20]
 800c86c:	2b06      	cmp	r3, #6
 800c86e:	d111      	bne.n	800c894 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800c870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c872:	8b5b      	ldrh	r3, [r3, #26]
 800c874:	f003 0310 	and.w	r3, r3, #16
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d00b      	beq.n	800c894 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c87c:	4b9d      	ldr	r3, [pc, #628]	; (800caf4 <tcp_slowtmr+0x584>)
 800c87e:	681a      	ldr	r2, [r3, #0]
 800c880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c882:	6a1b      	ldr	r3, [r3, #32]
 800c884:	1ad3      	subs	r3, r2, r3
 800c886:	2b28      	cmp	r3, #40	; 0x28
 800c888:	d904      	bls.n	800c894 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800c88a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c88e:	3301      	adds	r3, #1
 800c890:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c896:	7a5b      	ldrb	r3, [r3, #9]
 800c898:	f003 0308 	and.w	r3, r3, #8
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d04c      	beq.n	800c93a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800c8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8a2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c8a4:	2b04      	cmp	r3, #4
 800c8a6:	d003      	beq.n	800c8b0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800c8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8aa:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800c8ac:	2b07      	cmp	r3, #7
 800c8ae:	d144      	bne.n	800c93a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c8b0:	4b90      	ldr	r3, [pc, #576]	; (800caf4 <tcp_slowtmr+0x584>)
 800c8b2:	681a      	ldr	r2, [r3, #0]
 800c8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8b6:	6a1b      	ldr	r3, [r3, #32]
 800c8b8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800c8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c8c0:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800c8c4:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800c8c8:	498b      	ldr	r1, [pc, #556]	; (800caf8 <tcp_slowtmr+0x588>)
 800c8ca:	fba1 1303 	umull	r1, r3, r1, r3
 800c8ce:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c8d0:	429a      	cmp	r2, r3
 800c8d2:	d90a      	bls.n	800c8ea <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800c8d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8d8:	3301      	adds	r3, #1
 800c8da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800c8de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c8e2:	3301      	adds	r3, #1
 800c8e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c8e8:	e027      	b.n	800c93a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c8ea:	4b82      	ldr	r3, [pc, #520]	; (800caf4 <tcp_slowtmr+0x584>)
 800c8ec:	681a      	ldr	r2, [r3, #0]
 800c8ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f0:	6a1b      	ldr	r3, [r3, #32]
 800c8f2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800c8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c8fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8fc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c900:	4618      	mov	r0, r3
 800c902:	4b7e      	ldr	r3, [pc, #504]	; (800cafc <tcp_slowtmr+0x58c>)
 800c904:	fb03 f300 	mul.w	r3, r3, r0
 800c908:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800c90a:	497b      	ldr	r1, [pc, #492]	; (800caf8 <tcp_slowtmr+0x588>)
 800c90c:	fba1 1303 	umull	r1, r3, r1, r3
 800c910:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c912:	429a      	cmp	r2, r3
 800c914:	d911      	bls.n	800c93a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800c916:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c918:	f004 ffea 	bl	80118f0 <tcp_keepalive>
 800c91c:	4603      	mov	r3, r0
 800c91e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800c922:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c926:	2b00      	cmp	r3, #0
 800c928:	d107      	bne.n	800c93a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800c92a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c92c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c930:	3301      	adds	r3, #1
 800c932:	b2da      	uxtb	r2, r3
 800c934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c936:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800c93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c93c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d011      	beq.n	800c966 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800c942:	4b6c      	ldr	r3, [pc, #432]	; (800caf4 <tcp_slowtmr+0x584>)
 800c944:	681a      	ldr	r2, [r3, #0]
 800c946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c948:	6a1b      	ldr	r3, [r3, #32]
 800c94a:	1ad2      	subs	r2, r2, r3
 800c94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c94e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c952:	4619      	mov	r1, r3
 800c954:	460b      	mov	r3, r1
 800c956:	005b      	lsls	r3, r3, #1
 800c958:	440b      	add	r3, r1
 800c95a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800c95c:	429a      	cmp	r2, r3
 800c95e:	d302      	bcc.n	800c966 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800c960:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c962:	f000 fea9 	bl	800d6b8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800c966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c968:	7d1b      	ldrb	r3, [r3, #20]
 800c96a:	2b03      	cmp	r3, #3
 800c96c:	d10b      	bne.n	800c986 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c96e:	4b61      	ldr	r3, [pc, #388]	; (800caf4 <tcp_slowtmr+0x584>)
 800c970:	681a      	ldr	r2, [r3, #0]
 800c972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c974:	6a1b      	ldr	r3, [r3, #32]
 800c976:	1ad3      	subs	r3, r2, r3
 800c978:	2b28      	cmp	r3, #40	; 0x28
 800c97a:	d904      	bls.n	800c986 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800c97c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c980:	3301      	adds	r3, #1
 800c982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800c986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c988:	7d1b      	ldrb	r3, [r3, #20]
 800c98a:	2b09      	cmp	r3, #9
 800c98c:	d10b      	bne.n	800c9a6 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c98e:	4b59      	ldr	r3, [pc, #356]	; (800caf4 <tcp_slowtmr+0x584>)
 800c990:	681a      	ldr	r2, [r3, #0]
 800c992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c994:	6a1b      	ldr	r3, [r3, #32]
 800c996:	1ad3      	subs	r3, r2, r3
 800c998:	2bf0      	cmp	r3, #240	; 0xf0
 800c99a:	d904      	bls.n	800c9a6 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800c99c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9a0:	3301      	adds	r3, #1
 800c9a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c9a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d060      	beq.n	800ca70 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800c9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c9b4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800c9b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c9b8:	f000 fcca 	bl	800d350 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800c9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d010      	beq.n	800c9e4 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800c9c2:	4b4f      	ldr	r3, [pc, #316]	; (800cb00 <tcp_slowtmr+0x590>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9c8:	429a      	cmp	r2, r3
 800c9ca:	d106      	bne.n	800c9da <tcp_slowtmr+0x46a>
 800c9cc:	4b4d      	ldr	r3, [pc, #308]	; (800cb04 <tcp_slowtmr+0x594>)
 800c9ce:	f240 526d 	movw	r2, #1389	; 0x56d
 800c9d2:	494d      	ldr	r1, [pc, #308]	; (800cb08 <tcp_slowtmr+0x598>)
 800c9d4:	484d      	ldr	r0, [pc, #308]	; (800cb0c <tcp_slowtmr+0x59c>)
 800c9d6:	f00a fbe7 	bl	80171a8 <iprintf>
        prev->next = pcb->next;
 800c9da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9dc:	68da      	ldr	r2, [r3, #12]
 800c9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e0:	60da      	str	r2, [r3, #12]
 800c9e2:	e00f      	b.n	800ca04 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800c9e4:	4b46      	ldr	r3, [pc, #280]	; (800cb00 <tcp_slowtmr+0x590>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9ea:	429a      	cmp	r2, r3
 800c9ec:	d006      	beq.n	800c9fc <tcp_slowtmr+0x48c>
 800c9ee:	4b45      	ldr	r3, [pc, #276]	; (800cb04 <tcp_slowtmr+0x594>)
 800c9f0:	f240 5271 	movw	r2, #1393	; 0x571
 800c9f4:	4946      	ldr	r1, [pc, #280]	; (800cb10 <tcp_slowtmr+0x5a0>)
 800c9f6:	4845      	ldr	r0, [pc, #276]	; (800cb0c <tcp_slowtmr+0x59c>)
 800c9f8:	f00a fbd6 	bl	80171a8 <iprintf>
        tcp_active_pcbs = pcb->next;
 800c9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9fe:	68db      	ldr	r3, [r3, #12]
 800ca00:	4a3f      	ldr	r2, [pc, #252]	; (800cb00 <tcp_slowtmr+0x590>)
 800ca02:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800ca04:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d013      	beq.n	800ca34 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ca0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca0e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ca10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca12:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ca14:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800ca16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca18:	3304      	adds	r3, #4
 800ca1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca1c:	8ad2      	ldrh	r2, [r2, #22]
 800ca1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ca20:	8b09      	ldrh	r1, [r1, #24]
 800ca22:	9102      	str	r1, [sp, #8]
 800ca24:	9201      	str	r2, [sp, #4]
 800ca26:	9300      	str	r3, [sp, #0]
 800ca28:	462b      	mov	r3, r5
 800ca2a:	4622      	mov	r2, r4
 800ca2c:	4601      	mov	r1, r0
 800ca2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca30:	f004 feaa 	bl	8011788 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800ca34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca36:	691b      	ldr	r3, [r3, #16]
 800ca38:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800ca3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca3c:	7d1b      	ldrb	r3, [r3, #20]
 800ca3e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800ca40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca42:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ca44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca46:	68db      	ldr	r3, [r3, #12]
 800ca48:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ca4a:	6838      	ldr	r0, [r7, #0]
 800ca4c:	f7fe ffee 	bl	800ba2c <tcp_free>

      tcp_active_pcbs_changed = 0;
 800ca50:	4b30      	ldr	r3, [pc, #192]	; (800cb14 <tcp_slowtmr+0x5a4>)
 800ca52:	2200      	movs	r2, #0
 800ca54:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d004      	beq.n	800ca66 <tcp_slowtmr+0x4f6>
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	f06f 010c 	mvn.w	r1, #12
 800ca62:	68b8      	ldr	r0, [r7, #8]
 800ca64:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ca66:	4b2b      	ldr	r3, [pc, #172]	; (800cb14 <tcp_slowtmr+0x5a4>)
 800ca68:	781b      	ldrb	r3, [r3, #0]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d037      	beq.n	800cade <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800ca6e:	e590      	b.n	800c592 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800ca70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca72:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ca74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca76:	68db      	ldr	r3, [r3, #12]
 800ca78:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800ca7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca7c:	7f1b      	ldrb	r3, [r3, #28]
 800ca7e:	3301      	adds	r3, #1
 800ca80:	b2da      	uxtb	r2, r3
 800ca82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca84:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ca86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca88:	7f1a      	ldrb	r2, [r3, #28]
 800ca8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca8c:	7f5b      	ldrb	r3, [r3, #29]
 800ca8e:	429a      	cmp	r2, r3
 800ca90:	d325      	bcc.n	800cade <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800ca92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca94:	2200      	movs	r2, #0
 800ca96:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800ca98:	4b1e      	ldr	r3, [pc, #120]	; (800cb14 <tcp_slowtmr+0x5a4>)
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ca9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d00b      	beq.n	800cac0 <tcp_slowtmr+0x550>
 800caa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800caae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cab0:	6912      	ldr	r2, [r2, #16]
 800cab2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cab4:	4610      	mov	r0, r2
 800cab6:	4798      	blx	r3
 800cab8:	4603      	mov	r3, r0
 800caba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800cabe:	e002      	b.n	800cac6 <tcp_slowtmr+0x556>
 800cac0:	2300      	movs	r3, #0
 800cac2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800cac6:	4b13      	ldr	r3, [pc, #76]	; (800cb14 <tcp_slowtmr+0x5a4>)
 800cac8:	781b      	ldrb	r3, [r3, #0]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d000      	beq.n	800cad0 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800cace:	e560      	b.n	800c592 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800cad0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d102      	bne.n	800cade <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800cad8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cada:	f004 f8a1 	bl	8010c20 <tcp_output>
  while (pcb != NULL) {
 800cade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	f47f ad5c 	bne.w	800c59e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800cae6:	2300      	movs	r3, #0
 800cae8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800caea:	4b0b      	ldr	r3, [pc, #44]	; (800cb18 <tcp_slowtmr+0x5a8>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800caf0:	e067      	b.n	800cbc2 <tcp_slowtmr+0x652>
 800caf2:	bf00      	nop
 800caf4:	2000efe0 	.word	0x2000efe0
 800caf8:	10624dd3 	.word	0x10624dd3
 800cafc:	000124f8 	.word	0x000124f8
 800cb00:	2000efdc 	.word	0x2000efdc
 800cb04:	08019c34 	.word	0x08019c34
 800cb08:	0801a06c 	.word	0x0801a06c
 800cb0c:	08019c78 	.word	0x08019c78
 800cb10:	0801a098 	.word	0x0801a098
 800cb14:	2000efd8 	.word	0x2000efd8
 800cb18:	2000efec 	.word	0x2000efec
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cb1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb1e:	7d1b      	ldrb	r3, [r3, #20]
 800cb20:	2b0a      	cmp	r3, #10
 800cb22:	d006      	beq.n	800cb32 <tcp_slowtmr+0x5c2>
 800cb24:	4b2b      	ldr	r3, [pc, #172]	; (800cbd4 <tcp_slowtmr+0x664>)
 800cb26:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800cb2a:	492b      	ldr	r1, [pc, #172]	; (800cbd8 <tcp_slowtmr+0x668>)
 800cb2c:	482b      	ldr	r0, [pc, #172]	; (800cbdc <tcp_slowtmr+0x66c>)
 800cb2e:	f00a fb3b 	bl	80171a8 <iprintf>
    pcb_remove = 0;
 800cb32:	2300      	movs	r3, #0
 800cb34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cb38:	4b29      	ldr	r3, [pc, #164]	; (800cbe0 <tcp_slowtmr+0x670>)
 800cb3a:	681a      	ldr	r2, [r3, #0]
 800cb3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb3e:	6a1b      	ldr	r3, [r3, #32]
 800cb40:	1ad3      	subs	r3, r2, r3
 800cb42:	2bf0      	cmp	r3, #240	; 0xf0
 800cb44:	d904      	bls.n	800cb50 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800cb46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb4a:	3301      	adds	r3, #1
 800cb4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cb50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d02f      	beq.n	800cbb8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800cb58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb5a:	f000 fbf9 	bl	800d350 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800cb5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d010      	beq.n	800cb86 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800cb64:	4b1f      	ldr	r3, [pc, #124]	; (800cbe4 <tcp_slowtmr+0x674>)
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb6a:	429a      	cmp	r2, r3
 800cb6c:	d106      	bne.n	800cb7c <tcp_slowtmr+0x60c>
 800cb6e:	4b19      	ldr	r3, [pc, #100]	; (800cbd4 <tcp_slowtmr+0x664>)
 800cb70:	f240 52af 	movw	r2, #1455	; 0x5af
 800cb74:	491c      	ldr	r1, [pc, #112]	; (800cbe8 <tcp_slowtmr+0x678>)
 800cb76:	4819      	ldr	r0, [pc, #100]	; (800cbdc <tcp_slowtmr+0x66c>)
 800cb78:	f00a fb16 	bl	80171a8 <iprintf>
        prev->next = pcb->next;
 800cb7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb7e:	68da      	ldr	r2, [r3, #12]
 800cb80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb82:	60da      	str	r2, [r3, #12]
 800cb84:	e00f      	b.n	800cba6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800cb86:	4b17      	ldr	r3, [pc, #92]	; (800cbe4 <tcp_slowtmr+0x674>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb8c:	429a      	cmp	r2, r3
 800cb8e:	d006      	beq.n	800cb9e <tcp_slowtmr+0x62e>
 800cb90:	4b10      	ldr	r3, [pc, #64]	; (800cbd4 <tcp_slowtmr+0x664>)
 800cb92:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800cb96:	4915      	ldr	r1, [pc, #84]	; (800cbec <tcp_slowtmr+0x67c>)
 800cb98:	4810      	ldr	r0, [pc, #64]	; (800cbdc <tcp_slowtmr+0x66c>)
 800cb9a:	f00a fb05 	bl	80171a8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800cb9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cba0:	68db      	ldr	r3, [r3, #12]
 800cba2:	4a10      	ldr	r2, [pc, #64]	; (800cbe4 <tcp_slowtmr+0x674>)
 800cba4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800cba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cba8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800cbaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbac:	68db      	ldr	r3, [r3, #12]
 800cbae:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800cbb0:	69f8      	ldr	r0, [r7, #28]
 800cbb2:	f7fe ff3b 	bl	800ba2c <tcp_free>
 800cbb6:	e004      	b.n	800cbc2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800cbb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbba:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800cbbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbbe:	68db      	ldr	r3, [r3, #12]
 800cbc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800cbc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d1a9      	bne.n	800cb1c <tcp_slowtmr+0x5ac>
    }
  }
}
 800cbc8:	bf00      	nop
 800cbca:	bf00      	nop
 800cbcc:	3730      	adds	r7, #48	; 0x30
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bdb0      	pop	{r4, r5, r7, pc}
 800cbd2:	bf00      	nop
 800cbd4:	08019c34 	.word	0x08019c34
 800cbd8:	0801a0c4 	.word	0x0801a0c4
 800cbdc:	08019c78 	.word	0x08019c78
 800cbe0:	2000efe0 	.word	0x2000efe0
 800cbe4:	2000efec 	.word	0x2000efec
 800cbe8:	0801a0f4 	.word	0x0801a0f4
 800cbec:	0801a11c 	.word	0x0801a11c

0800cbf0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b082      	sub	sp, #8
 800cbf4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800cbf6:	4b2d      	ldr	r3, [pc, #180]	; (800ccac <tcp_fasttmr+0xbc>)
 800cbf8:	781b      	ldrb	r3, [r3, #0]
 800cbfa:	3301      	adds	r3, #1
 800cbfc:	b2da      	uxtb	r2, r3
 800cbfe:	4b2b      	ldr	r3, [pc, #172]	; (800ccac <tcp_fasttmr+0xbc>)
 800cc00:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800cc02:	4b2b      	ldr	r3, [pc, #172]	; (800ccb0 <tcp_fasttmr+0xc0>)
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800cc08:	e048      	b.n	800cc9c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	7f9a      	ldrb	r2, [r3, #30]
 800cc0e:	4b27      	ldr	r3, [pc, #156]	; (800ccac <tcp_fasttmr+0xbc>)
 800cc10:	781b      	ldrb	r3, [r3, #0]
 800cc12:	429a      	cmp	r2, r3
 800cc14:	d03f      	beq.n	800cc96 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800cc16:	4b25      	ldr	r3, [pc, #148]	; (800ccac <tcp_fasttmr+0xbc>)
 800cc18:	781a      	ldrb	r2, [r3, #0]
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	8b5b      	ldrh	r3, [r3, #26]
 800cc22:	f003 0301 	and.w	r3, r3, #1
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d010      	beq.n	800cc4c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	8b5b      	ldrh	r3, [r3, #26]
 800cc2e:	f043 0302 	orr.w	r3, r3, #2
 800cc32:	b29a      	uxth	r2, r3
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800cc38:	6878      	ldr	r0, [r7, #4]
 800cc3a:	f003 fff1 	bl	8010c20 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	8b5b      	ldrh	r3, [r3, #26]
 800cc42:	f023 0303 	bic.w	r3, r3, #3
 800cc46:	b29a      	uxth	r2, r3
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	8b5b      	ldrh	r3, [r3, #26]
 800cc50:	f003 0308 	and.w	r3, r3, #8
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d009      	beq.n	800cc6c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	8b5b      	ldrh	r3, [r3, #26]
 800cc5c:	f023 0308 	bic.w	r3, r3, #8
 800cc60:	b29a      	uxth	r2, r3
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	f7ff f874 	bl	800bd54 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	68db      	ldr	r3, [r3, #12]
 800cc70:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d00a      	beq.n	800cc90 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800cc7a:	4b0e      	ldr	r3, [pc, #56]	; (800ccb4 <tcp_fasttmr+0xc4>)
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800cc80:	6878      	ldr	r0, [r7, #4]
 800cc82:	f000 f819 	bl	800ccb8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800cc86:	4b0b      	ldr	r3, [pc, #44]	; (800ccb4 <tcp_fasttmr+0xc4>)
 800cc88:	781b      	ldrb	r3, [r3, #0]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d000      	beq.n	800cc90 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800cc8e:	e7b8      	b.n	800cc02 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	607b      	str	r3, [r7, #4]
 800cc94:	e002      	b.n	800cc9c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	68db      	ldr	r3, [r3, #12]
 800cc9a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d1b3      	bne.n	800cc0a <tcp_fasttmr+0x1a>
    }
  }
}
 800cca2:	bf00      	nop
 800cca4:	bf00      	nop
 800cca6:	3708      	adds	r7, #8
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd80      	pop	{r7, pc}
 800ccac:	2000854a 	.word	0x2000854a
 800ccb0:	2000efdc 	.word	0x2000efdc
 800ccb4:	2000efd8 	.word	0x2000efd8

0800ccb8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800ccb8:	b590      	push	{r4, r7, lr}
 800ccba:	b085      	sub	sp, #20
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d109      	bne.n	800ccda <tcp_process_refused_data+0x22>
 800ccc6:	4b37      	ldr	r3, [pc, #220]	; (800cda4 <tcp_process_refused_data+0xec>)
 800ccc8:	f240 6209 	movw	r2, #1545	; 0x609
 800cccc:	4936      	ldr	r1, [pc, #216]	; (800cda8 <tcp_process_refused_data+0xf0>)
 800ccce:	4837      	ldr	r0, [pc, #220]	; (800cdac <tcp_process_refused_data+0xf4>)
 800ccd0:	f00a fa6a 	bl	80171a8 <iprintf>
 800ccd4:	f06f 030f 	mvn.w	r3, #15
 800ccd8:	e060      	b.n	800cd9c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ccde:	7b5b      	ldrb	r3, [r3, #13]
 800cce0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cce6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2200      	movs	r2, #0
 800ccec:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d00b      	beq.n	800cd10 <tcp_process_refused_data+0x58>
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	6918      	ldr	r0, [r3, #16]
 800cd02:	2300      	movs	r3, #0
 800cd04:	68ba      	ldr	r2, [r7, #8]
 800cd06:	6879      	ldr	r1, [r7, #4]
 800cd08:	47a0      	blx	r4
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	73fb      	strb	r3, [r7, #15]
 800cd0e:	e007      	b.n	800cd20 <tcp_process_refused_data+0x68>
 800cd10:	2300      	movs	r3, #0
 800cd12:	68ba      	ldr	r2, [r7, #8]
 800cd14:	6879      	ldr	r1, [r7, #4]
 800cd16:	2000      	movs	r0, #0
 800cd18:	f000 f8a4 	bl	800ce64 <tcp_recv_null>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800cd20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d12a      	bne.n	800cd7e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800cd28:	7bbb      	ldrb	r3, [r7, #14]
 800cd2a:	f003 0320 	and.w	r3, r3, #32
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d033      	beq.n	800cd9a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd36:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800cd3a:	d005      	beq.n	800cd48 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd40:	3301      	adds	r3, #1
 800cd42:	b29a      	uxth	r2, r3
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d00b      	beq.n	800cd6a <tcp_process_refused_data+0xb2>
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	6918      	ldr	r0, [r3, #16]
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	2200      	movs	r2, #0
 800cd60:	6879      	ldr	r1, [r7, #4]
 800cd62:	47a0      	blx	r4
 800cd64:	4603      	mov	r3, r0
 800cd66:	73fb      	strb	r3, [r7, #15]
 800cd68:	e001      	b.n	800cd6e <tcp_process_refused_data+0xb6>
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800cd6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd72:	f113 0f0d 	cmn.w	r3, #13
 800cd76:	d110      	bne.n	800cd9a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800cd78:	f06f 030c 	mvn.w	r3, #12
 800cd7c:	e00e      	b.n	800cd9c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800cd7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd82:	f113 0f0d 	cmn.w	r3, #13
 800cd86:	d102      	bne.n	800cd8e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800cd88:	f06f 030c 	mvn.w	r3, #12
 800cd8c:	e006      	b.n	800cd9c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	68ba      	ldr	r2, [r7, #8]
 800cd92:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800cd94:	f06f 0304 	mvn.w	r3, #4
 800cd98:	e000      	b.n	800cd9c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800cd9a:	2300      	movs	r3, #0
}
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	3714      	adds	r7, #20
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd90      	pop	{r4, r7, pc}
 800cda4:	08019c34 	.word	0x08019c34
 800cda8:	0801a144 	.word	0x0801a144
 800cdac:	08019c78 	.word	0x08019c78

0800cdb0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b084      	sub	sp, #16
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800cdb8:	e007      	b.n	800cdca <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800cdc0:	6878      	ldr	r0, [r7, #4]
 800cdc2:	f000 f80a 	bl	800cdda <tcp_seg_free>
    seg = next;
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d1f4      	bne.n	800cdba <tcp_segs_free+0xa>
  }
}
 800cdd0:	bf00      	nop
 800cdd2:	bf00      	nop
 800cdd4:	3710      	adds	r7, #16
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}

0800cdda <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800cdda:	b580      	push	{r7, lr}
 800cddc:	b082      	sub	sp, #8
 800cdde:	af00      	add	r7, sp, #0
 800cde0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d00c      	beq.n	800ce02 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	685b      	ldr	r3, [r3, #4]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d004      	beq.n	800cdfa <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	685b      	ldr	r3, [r3, #4]
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f7fe fb5d 	bl	800b4b4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800cdfa:	6879      	ldr	r1, [r7, #4]
 800cdfc:	2003      	movs	r0, #3
 800cdfe:	f7fd fca9 	bl	800a754 <memp_free>
  }
}
 800ce02:	bf00      	nop
 800ce04:	3708      	adds	r7, #8
 800ce06:	46bd      	mov	sp, r7
 800ce08:	bd80      	pop	{r7, pc}
	...

0800ce0c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b084      	sub	sp, #16
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d106      	bne.n	800ce28 <tcp_seg_copy+0x1c>
 800ce1a:	4b0f      	ldr	r3, [pc, #60]	; (800ce58 <tcp_seg_copy+0x4c>)
 800ce1c:	f240 6282 	movw	r2, #1666	; 0x682
 800ce20:	490e      	ldr	r1, [pc, #56]	; (800ce5c <tcp_seg_copy+0x50>)
 800ce22:	480f      	ldr	r0, [pc, #60]	; (800ce60 <tcp_seg_copy+0x54>)
 800ce24:	f00a f9c0 	bl	80171a8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800ce28:	2003      	movs	r0, #3
 800ce2a:	f7fd fc41 	bl	800a6b0 <memp_malloc>
 800ce2e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d101      	bne.n	800ce3a <tcp_seg_copy+0x2e>
    return NULL;
 800ce36:	2300      	movs	r3, #0
 800ce38:	e00a      	b.n	800ce50 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ce3a:	2210      	movs	r2, #16
 800ce3c:	6879      	ldr	r1, [r7, #4]
 800ce3e:	68f8      	ldr	r0, [r7, #12]
 800ce40:	f00a f927 	bl	8017092 <memcpy>
  pbuf_ref(cseg->p);
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	685b      	ldr	r3, [r3, #4]
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f7fe fbd9 	bl	800b600 <pbuf_ref>
  return cseg;
 800ce4e:	68fb      	ldr	r3, [r7, #12]
}
 800ce50:	4618      	mov	r0, r3
 800ce52:	3710      	adds	r7, #16
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}
 800ce58:	08019c34 	.word	0x08019c34
 800ce5c:	0801a188 	.word	0x0801a188
 800ce60:	08019c78 	.word	0x08019c78

0800ce64 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b084      	sub	sp, #16
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	60f8      	str	r0, [r7, #12]
 800ce6c:	60b9      	str	r1, [r7, #8]
 800ce6e:	607a      	str	r2, [r7, #4]
 800ce70:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d109      	bne.n	800ce8c <tcp_recv_null+0x28>
 800ce78:	4b12      	ldr	r3, [pc, #72]	; (800cec4 <tcp_recv_null+0x60>)
 800ce7a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ce7e:	4912      	ldr	r1, [pc, #72]	; (800cec8 <tcp_recv_null+0x64>)
 800ce80:	4812      	ldr	r0, [pc, #72]	; (800cecc <tcp_recv_null+0x68>)
 800ce82:	f00a f991 	bl	80171a8 <iprintf>
 800ce86:	f06f 030f 	mvn.w	r3, #15
 800ce8a:	e016      	b.n	800ceba <tcp_recv_null+0x56>

  if (p != NULL) {
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d009      	beq.n	800cea6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	891b      	ldrh	r3, [r3, #8]
 800ce96:	4619      	mov	r1, r3
 800ce98:	68b8      	ldr	r0, [r7, #8]
 800ce9a:	f7ff fad3 	bl	800c444 <tcp_recved>
    pbuf_free(p);
 800ce9e:	6878      	ldr	r0, [r7, #4]
 800cea0:	f7fe fb08 	bl	800b4b4 <pbuf_free>
 800cea4:	e008      	b.n	800ceb8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800cea6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d104      	bne.n	800ceb8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800ceae:	68b8      	ldr	r0, [r7, #8]
 800ceb0:	f7fe ffba 	bl	800be28 <tcp_close>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	e000      	b.n	800ceba <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800ceb8:	2300      	movs	r3, #0
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	3710      	adds	r7, #16
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}
 800cec2:	bf00      	nop
 800cec4:	08019c34 	.word	0x08019c34
 800cec8:	0801a1a4 	.word	0x0801a1a4
 800cecc:	08019c78 	.word	0x08019c78

0800ced0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b086      	sub	sp, #24
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	4603      	mov	r3, r0
 800ced8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ceda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	db01      	blt.n	800cee6 <tcp_kill_prio+0x16>
 800cee2:	79fb      	ldrb	r3, [r7, #7]
 800cee4:	e000      	b.n	800cee8 <tcp_kill_prio+0x18>
 800cee6:	237f      	movs	r3, #127	; 0x7f
 800cee8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ceea:	7afb      	ldrb	r3, [r7, #11]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d034      	beq.n	800cf5a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800cef0:	7afb      	ldrb	r3, [r7, #11]
 800cef2:	3b01      	subs	r3, #1
 800cef4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800cef6:	2300      	movs	r3, #0
 800cef8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800cefa:	2300      	movs	r3, #0
 800cefc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cefe:	4b19      	ldr	r3, [pc, #100]	; (800cf64 <tcp_kill_prio+0x94>)
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	617b      	str	r3, [r7, #20]
 800cf04:	e01f      	b.n	800cf46 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800cf06:	697b      	ldr	r3, [r7, #20]
 800cf08:	7d5b      	ldrb	r3, [r3, #21]
 800cf0a:	7afa      	ldrb	r2, [r7, #11]
 800cf0c:	429a      	cmp	r2, r3
 800cf0e:	d80c      	bhi.n	800cf2a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800cf10:	697b      	ldr	r3, [r7, #20]
 800cf12:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800cf14:	7afa      	ldrb	r2, [r7, #11]
 800cf16:	429a      	cmp	r2, r3
 800cf18:	d112      	bne.n	800cf40 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800cf1a:	4b13      	ldr	r3, [pc, #76]	; (800cf68 <tcp_kill_prio+0x98>)
 800cf1c:	681a      	ldr	r2, [r3, #0]
 800cf1e:	697b      	ldr	r3, [r7, #20]
 800cf20:	6a1b      	ldr	r3, [r3, #32]
 800cf22:	1ad3      	subs	r3, r2, r3
 800cf24:	68fa      	ldr	r2, [r7, #12]
 800cf26:	429a      	cmp	r2, r3
 800cf28:	d80a      	bhi.n	800cf40 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800cf2a:	4b0f      	ldr	r3, [pc, #60]	; (800cf68 <tcp_kill_prio+0x98>)
 800cf2c:	681a      	ldr	r2, [r3, #0]
 800cf2e:	697b      	ldr	r3, [r7, #20]
 800cf30:	6a1b      	ldr	r3, [r3, #32]
 800cf32:	1ad3      	subs	r3, r2, r3
 800cf34:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800cf36:	697b      	ldr	r3, [r7, #20]
 800cf38:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	7d5b      	ldrb	r3, [r3, #21]
 800cf3e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	68db      	ldr	r3, [r3, #12]
 800cf44:	617b      	str	r3, [r7, #20]
 800cf46:	697b      	ldr	r3, [r7, #20]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d1dc      	bne.n	800cf06 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800cf4c:	693b      	ldr	r3, [r7, #16]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d004      	beq.n	800cf5c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800cf52:	6938      	ldr	r0, [r7, #16]
 800cf54:	f7ff f8ae 	bl	800c0b4 <tcp_abort>
 800cf58:	e000      	b.n	800cf5c <tcp_kill_prio+0x8c>
    return;
 800cf5a:	bf00      	nop
  }
}
 800cf5c:	3718      	adds	r7, #24
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}
 800cf62:	bf00      	nop
 800cf64:	2000efdc 	.word	0x2000efdc
 800cf68:	2000efe0 	.word	0x2000efe0

0800cf6c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b086      	sub	sp, #24
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	4603      	mov	r3, r0
 800cf74:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800cf76:	79fb      	ldrb	r3, [r7, #7]
 800cf78:	2b08      	cmp	r3, #8
 800cf7a:	d009      	beq.n	800cf90 <tcp_kill_state+0x24>
 800cf7c:	79fb      	ldrb	r3, [r7, #7]
 800cf7e:	2b09      	cmp	r3, #9
 800cf80:	d006      	beq.n	800cf90 <tcp_kill_state+0x24>
 800cf82:	4b1a      	ldr	r3, [pc, #104]	; (800cfec <tcp_kill_state+0x80>)
 800cf84:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800cf88:	4919      	ldr	r1, [pc, #100]	; (800cff0 <tcp_kill_state+0x84>)
 800cf8a:	481a      	ldr	r0, [pc, #104]	; (800cff4 <tcp_kill_state+0x88>)
 800cf8c:	f00a f90c 	bl	80171a8 <iprintf>

  inactivity = 0;
 800cf90:	2300      	movs	r3, #0
 800cf92:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800cf94:	2300      	movs	r3, #0
 800cf96:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cf98:	4b17      	ldr	r3, [pc, #92]	; (800cff8 <tcp_kill_state+0x8c>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	617b      	str	r3, [r7, #20]
 800cf9e:	e017      	b.n	800cfd0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800cfa0:	697b      	ldr	r3, [r7, #20]
 800cfa2:	7d1b      	ldrb	r3, [r3, #20]
 800cfa4:	79fa      	ldrb	r2, [r7, #7]
 800cfa6:	429a      	cmp	r2, r3
 800cfa8:	d10f      	bne.n	800cfca <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800cfaa:	4b14      	ldr	r3, [pc, #80]	; (800cffc <tcp_kill_state+0x90>)
 800cfac:	681a      	ldr	r2, [r3, #0]
 800cfae:	697b      	ldr	r3, [r7, #20]
 800cfb0:	6a1b      	ldr	r3, [r3, #32]
 800cfb2:	1ad3      	subs	r3, r2, r3
 800cfb4:	68fa      	ldr	r2, [r7, #12]
 800cfb6:	429a      	cmp	r2, r3
 800cfb8:	d807      	bhi.n	800cfca <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800cfba:	4b10      	ldr	r3, [pc, #64]	; (800cffc <tcp_kill_state+0x90>)
 800cfbc:	681a      	ldr	r2, [r3, #0]
 800cfbe:	697b      	ldr	r3, [r7, #20]
 800cfc0:	6a1b      	ldr	r3, [r3, #32]
 800cfc2:	1ad3      	subs	r3, r2, r3
 800cfc4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800cfc6:	697b      	ldr	r3, [r7, #20]
 800cfc8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cfca:	697b      	ldr	r3, [r7, #20]
 800cfcc:	68db      	ldr	r3, [r3, #12]
 800cfce:	617b      	str	r3, [r7, #20]
 800cfd0:	697b      	ldr	r3, [r7, #20]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d1e4      	bne.n	800cfa0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800cfd6:	693b      	ldr	r3, [r7, #16]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d003      	beq.n	800cfe4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800cfdc:	2100      	movs	r1, #0
 800cfde:	6938      	ldr	r0, [r7, #16]
 800cfe0:	f7fe ffaa 	bl	800bf38 <tcp_abandon>
  }
}
 800cfe4:	bf00      	nop
 800cfe6:	3718      	adds	r7, #24
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	bd80      	pop	{r7, pc}
 800cfec:	08019c34 	.word	0x08019c34
 800cff0:	0801a1c0 	.word	0x0801a1c0
 800cff4:	08019c78 	.word	0x08019c78
 800cff8:	2000efdc 	.word	0x2000efdc
 800cffc:	2000efe0 	.word	0x2000efe0

0800d000 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b084      	sub	sp, #16
 800d004:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d006:	2300      	movs	r3, #0
 800d008:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d00a:	2300      	movs	r3, #0
 800d00c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d00e:	4b12      	ldr	r3, [pc, #72]	; (800d058 <tcp_kill_timewait+0x58>)
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	60fb      	str	r3, [r7, #12]
 800d014:	e012      	b.n	800d03c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d016:	4b11      	ldr	r3, [pc, #68]	; (800d05c <tcp_kill_timewait+0x5c>)
 800d018:	681a      	ldr	r2, [r3, #0]
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	6a1b      	ldr	r3, [r3, #32]
 800d01e:	1ad3      	subs	r3, r2, r3
 800d020:	687a      	ldr	r2, [r7, #4]
 800d022:	429a      	cmp	r2, r3
 800d024:	d807      	bhi.n	800d036 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d026:	4b0d      	ldr	r3, [pc, #52]	; (800d05c <tcp_kill_timewait+0x5c>)
 800d028:	681a      	ldr	r2, [r3, #0]
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	6a1b      	ldr	r3, [r3, #32]
 800d02e:	1ad3      	subs	r3, r2, r3
 800d030:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	68db      	ldr	r3, [r3, #12]
 800d03a:	60fb      	str	r3, [r7, #12]
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d1e9      	bne.n	800d016 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d042:	68bb      	ldr	r3, [r7, #8]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d002      	beq.n	800d04e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d048:	68b8      	ldr	r0, [r7, #8]
 800d04a:	f7ff f833 	bl	800c0b4 <tcp_abort>
  }
}
 800d04e:	bf00      	nop
 800d050:	3710      	adds	r7, #16
 800d052:	46bd      	mov	sp, r7
 800d054:	bd80      	pop	{r7, pc}
 800d056:	bf00      	nop
 800d058:	2000efec 	.word	0x2000efec
 800d05c:	2000efe0 	.word	0x2000efe0

0800d060 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d060:	b580      	push	{r7, lr}
 800d062:	b082      	sub	sp, #8
 800d064:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d066:	4b10      	ldr	r3, [pc, #64]	; (800d0a8 <tcp_handle_closepend+0x48>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d06c:	e014      	b.n	800d098 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	68db      	ldr	r3, [r3, #12]
 800d072:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	8b5b      	ldrh	r3, [r3, #26]
 800d078:	f003 0308 	and.w	r3, r3, #8
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d009      	beq.n	800d094 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	8b5b      	ldrh	r3, [r3, #26]
 800d084:	f023 0308 	bic.w	r3, r3, #8
 800d088:	b29a      	uxth	r2, r3
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d08e:	6878      	ldr	r0, [r7, #4]
 800d090:	f7fe fe60 	bl	800bd54 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d1e7      	bne.n	800d06e <tcp_handle_closepend+0xe>
  }
}
 800d09e:	bf00      	nop
 800d0a0:	bf00      	nop
 800d0a2:	3708      	adds	r7, #8
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bd80      	pop	{r7, pc}
 800d0a8:	2000efdc 	.word	0x2000efdc

0800d0ac <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b084      	sub	sp, #16
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d0b6:	2001      	movs	r0, #1
 800d0b8:	f7fd fafa 	bl	800a6b0 <memp_malloc>
 800d0bc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d126      	bne.n	800d112 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d0c4:	f7ff ffcc 	bl	800d060 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d0c8:	f7ff ff9a 	bl	800d000 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d0cc:	2001      	movs	r0, #1
 800d0ce:	f7fd faef 	bl	800a6b0 <memp_malloc>
 800d0d2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d11b      	bne.n	800d112 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d0da:	2009      	movs	r0, #9
 800d0dc:	f7ff ff46 	bl	800cf6c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d0e0:	2001      	movs	r0, #1
 800d0e2:	f7fd fae5 	bl	800a6b0 <memp_malloc>
 800d0e6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d111      	bne.n	800d112 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d0ee:	2008      	movs	r0, #8
 800d0f0:	f7ff ff3c 	bl	800cf6c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d0f4:	2001      	movs	r0, #1
 800d0f6:	f7fd fadb 	bl	800a6b0 <memp_malloc>
 800d0fa:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d107      	bne.n	800d112 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d102:	79fb      	ldrb	r3, [r7, #7]
 800d104:	4618      	mov	r0, r3
 800d106:	f7ff fee3 	bl	800ced0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d10a:	2001      	movs	r0, #1
 800d10c:	f7fd fad0 	bl	800a6b0 <memp_malloc>
 800d110:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d03f      	beq.n	800d198 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d118:	229c      	movs	r2, #156	; 0x9c
 800d11a:	2100      	movs	r1, #0
 800d11c:	68f8      	ldr	r0, [r7, #12]
 800d11e:	f009 ffe0 	bl	80170e2 <memset>
    pcb->prio = prio;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	79fa      	ldrb	r2, [r7, #7]
 800d126:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d12e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d138:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	22ff      	movs	r2, #255	; 0xff
 800d146:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d14e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	2206      	movs	r2, #6
 800d154:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	2206      	movs	r2, #6
 800d15c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d164:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	2201      	movs	r2, #1
 800d16a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800d16e:	4b0d      	ldr	r3, [pc, #52]	; (800d1a4 <tcp_alloc+0xf8>)
 800d170:	681a      	ldr	r2, [r3, #0]
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d176:	4b0c      	ldr	r3, [pc, #48]	; (800d1a8 <tcp_alloc+0xfc>)
 800d178:	781a      	ldrb	r2, [r3, #0]
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d184:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	4a08      	ldr	r2, [pc, #32]	; (800d1ac <tcp_alloc+0x100>)
 800d18c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	4a07      	ldr	r2, [pc, #28]	; (800d1b0 <tcp_alloc+0x104>)
 800d194:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d198:	68fb      	ldr	r3, [r7, #12]
}
 800d19a:	4618      	mov	r0, r3
 800d19c:	3710      	adds	r7, #16
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bd80      	pop	{r7, pc}
 800d1a2:	bf00      	nop
 800d1a4:	2000efe0 	.word	0x2000efe0
 800d1a8:	2000854a 	.word	0x2000854a
 800d1ac:	0800ce65 	.word	0x0800ce65
 800d1b0:	006ddd00 	.word	0x006ddd00

0800d1b4 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b084      	sub	sp, #16
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800d1be:	2040      	movs	r0, #64	; 0x40
 800d1c0:	f7ff ff74 	bl	800d0ac <tcp_alloc>
 800d1c4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
}
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	3710      	adds	r7, #16
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	bd80      	pop	{r7, pc}

0800d1d0 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800d1d0:	b480      	push	{r7}
 800d1d2:	b083      	sub	sp, #12
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
 800d1d8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d002      	beq.n	800d1e6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	683a      	ldr	r2, [r7, #0]
 800d1e4:	611a      	str	r2, [r3, #16]
  }
}
 800d1e6:	bf00      	nop
 800d1e8:	370c      	adds	r7, #12
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f0:	4770      	bx	lr
	...

0800d1f4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b082      	sub	sp, #8
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
 800d1fc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d00e      	beq.n	800d222 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	7d1b      	ldrb	r3, [r3, #20]
 800d208:	2b01      	cmp	r3, #1
 800d20a:	d106      	bne.n	800d21a <tcp_recv+0x26>
 800d20c:	4b07      	ldr	r3, [pc, #28]	; (800d22c <tcp_recv+0x38>)
 800d20e:	f240 72df 	movw	r2, #2015	; 0x7df
 800d212:	4907      	ldr	r1, [pc, #28]	; (800d230 <tcp_recv+0x3c>)
 800d214:	4807      	ldr	r0, [pc, #28]	; (800d234 <tcp_recv+0x40>)
 800d216:	f009 ffc7 	bl	80171a8 <iprintf>
    pcb->recv = recv;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	683a      	ldr	r2, [r7, #0]
 800d21e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800d222:	bf00      	nop
 800d224:	3708      	adds	r7, #8
 800d226:	46bd      	mov	sp, r7
 800d228:	bd80      	pop	{r7, pc}
 800d22a:	bf00      	nop
 800d22c:	08019c34 	.word	0x08019c34
 800d230:	0801a1d0 	.word	0x0801a1d0
 800d234:	08019c78 	.word	0x08019c78

0800d238 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b082      	sub	sp, #8
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
 800d240:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d00e      	beq.n	800d266 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	7d1b      	ldrb	r3, [r3, #20]
 800d24c:	2b01      	cmp	r3, #1
 800d24e:	d106      	bne.n	800d25e <tcp_sent+0x26>
 800d250:	4b07      	ldr	r3, [pc, #28]	; (800d270 <tcp_sent+0x38>)
 800d252:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800d256:	4907      	ldr	r1, [pc, #28]	; (800d274 <tcp_sent+0x3c>)
 800d258:	4807      	ldr	r0, [pc, #28]	; (800d278 <tcp_sent+0x40>)
 800d25a:	f009 ffa5 	bl	80171a8 <iprintf>
    pcb->sent = sent;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	683a      	ldr	r2, [r7, #0]
 800d262:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800d266:	bf00      	nop
 800d268:	3708      	adds	r7, #8
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}
 800d26e:	bf00      	nop
 800d270:	08019c34 	.word	0x08019c34
 800d274:	0801a1f8 	.word	0x0801a1f8
 800d278:	08019c78 	.word	0x08019c78

0800d27c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b082      	sub	sp, #8
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
 800d284:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d00e      	beq.n	800d2aa <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	7d1b      	ldrb	r3, [r3, #20]
 800d290:	2b01      	cmp	r3, #1
 800d292:	d106      	bne.n	800d2a2 <tcp_err+0x26>
 800d294:	4b07      	ldr	r3, [pc, #28]	; (800d2b4 <tcp_err+0x38>)
 800d296:	f640 020d 	movw	r2, #2061	; 0x80d
 800d29a:	4907      	ldr	r1, [pc, #28]	; (800d2b8 <tcp_err+0x3c>)
 800d29c:	4807      	ldr	r0, [pc, #28]	; (800d2bc <tcp_err+0x40>)
 800d29e:	f009 ff83 	bl	80171a8 <iprintf>
    pcb->errf = err;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	683a      	ldr	r2, [r7, #0]
 800d2a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800d2aa:	bf00      	nop
 800d2ac:	3708      	adds	r7, #8
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}
 800d2b2:	bf00      	nop
 800d2b4:	08019c34 	.word	0x08019c34
 800d2b8:	0801a220 	.word	0x0801a220
 800d2bc:	08019c78 	.word	0x08019c78

0800d2c0 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800d2c0:	b480      	push	{r7}
 800d2c2:	b085      	sub	sp, #20
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
 800d2c8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d008      	beq.n	800d2e2 <tcp_accept+0x22>
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	7d1b      	ldrb	r3, [r3, #20]
 800d2d4:	2b01      	cmp	r3, #1
 800d2d6:	d104      	bne.n	800d2e2 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	683a      	ldr	r2, [r7, #0]
 800d2e0:	619a      	str	r2, [r3, #24]
  }
}
 800d2e2:	bf00      	nop
 800d2e4:	3714      	adds	r7, #20
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ec:	4770      	bx	lr
	...

0800d2f0 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b084      	sub	sp, #16
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	60f8      	str	r0, [r7, #12]
 800d2f8:	60b9      	str	r1, [r7, #8]
 800d2fa:	4613      	mov	r3, r2
 800d2fc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d107      	bne.n	800d314 <tcp_poll+0x24>
 800d304:	4b0e      	ldr	r3, [pc, #56]	; (800d340 <tcp_poll+0x50>)
 800d306:	f640 023d 	movw	r2, #2109	; 0x83d
 800d30a:	490e      	ldr	r1, [pc, #56]	; (800d344 <tcp_poll+0x54>)
 800d30c:	480e      	ldr	r0, [pc, #56]	; (800d348 <tcp_poll+0x58>)
 800d30e:	f009 ff4b 	bl	80171a8 <iprintf>
 800d312:	e011      	b.n	800d338 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	7d1b      	ldrb	r3, [r3, #20]
 800d318:	2b01      	cmp	r3, #1
 800d31a:	d106      	bne.n	800d32a <tcp_poll+0x3a>
 800d31c:	4b08      	ldr	r3, [pc, #32]	; (800d340 <tcp_poll+0x50>)
 800d31e:	f640 023e 	movw	r2, #2110	; 0x83e
 800d322:	490a      	ldr	r1, [pc, #40]	; (800d34c <tcp_poll+0x5c>)
 800d324:	4808      	ldr	r0, [pc, #32]	; (800d348 <tcp_poll+0x58>)
 800d326:	f009 ff3f 	bl	80171a8 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	68ba      	ldr	r2, [r7, #8]
 800d32e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	79fa      	ldrb	r2, [r7, #7]
 800d336:	775a      	strb	r2, [r3, #29]
}
 800d338:	3710      	adds	r7, #16
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bd80      	pop	{r7, pc}
 800d33e:	bf00      	nop
 800d340:	08019c34 	.word	0x08019c34
 800d344:	0801a248 	.word	0x0801a248
 800d348:	08019c78 	.word	0x08019c78
 800d34c:	0801a260 	.word	0x0801a260

0800d350 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b082      	sub	sp, #8
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d107      	bne.n	800d36e <tcp_pcb_purge+0x1e>
 800d35e:	4b21      	ldr	r3, [pc, #132]	; (800d3e4 <tcp_pcb_purge+0x94>)
 800d360:	f640 0251 	movw	r2, #2129	; 0x851
 800d364:	4920      	ldr	r1, [pc, #128]	; (800d3e8 <tcp_pcb_purge+0x98>)
 800d366:	4821      	ldr	r0, [pc, #132]	; (800d3ec <tcp_pcb_purge+0x9c>)
 800d368:	f009 ff1e 	bl	80171a8 <iprintf>
 800d36c:	e037      	b.n	800d3de <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	7d1b      	ldrb	r3, [r3, #20]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d033      	beq.n	800d3de <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d37a:	2b0a      	cmp	r3, #10
 800d37c:	d02f      	beq.n	800d3de <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800d382:	2b01      	cmp	r3, #1
 800d384:	d02b      	beq.n	800d3de <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d007      	beq.n	800d39e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d392:	4618      	mov	r0, r3
 800d394:	f7fe f88e 	bl	800b4b4 <pbuf_free>
      pcb->refused_data = NULL;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2200      	movs	r2, #0
 800d39c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d002      	beq.n	800d3ac <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800d3a6:	6878      	ldr	r0, [r7, #4]
 800d3a8:	f000 f986 	bl	800d6b8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d3b2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f7ff fcf9 	bl	800cdb0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	f7ff fcf4 	bl	800cdb0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	66da      	str	r2, [r3, #108]	; 0x6c
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2200      	movs	r2, #0
 800d3da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800d3de:	3708      	adds	r7, #8
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bd80      	pop	{r7, pc}
 800d3e4:	08019c34 	.word	0x08019c34
 800d3e8:	0801a280 	.word	0x0801a280
 800d3ec:	08019c78 	.word	0x08019c78

0800d3f0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b084      	sub	sp, #16
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
 800d3f8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d3fa:	683b      	ldr	r3, [r7, #0]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d106      	bne.n	800d40e <tcp_pcb_remove+0x1e>
 800d400:	4b3e      	ldr	r3, [pc, #248]	; (800d4fc <tcp_pcb_remove+0x10c>)
 800d402:	f640 0283 	movw	r2, #2179	; 0x883
 800d406:	493e      	ldr	r1, [pc, #248]	; (800d500 <tcp_pcb_remove+0x110>)
 800d408:	483e      	ldr	r0, [pc, #248]	; (800d504 <tcp_pcb_remove+0x114>)
 800d40a:	f009 fecd 	bl	80171a8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d106      	bne.n	800d422 <tcp_pcb_remove+0x32>
 800d414:	4b39      	ldr	r3, [pc, #228]	; (800d4fc <tcp_pcb_remove+0x10c>)
 800d416:	f640 0284 	movw	r2, #2180	; 0x884
 800d41a:	493b      	ldr	r1, [pc, #236]	; (800d508 <tcp_pcb_remove+0x118>)
 800d41c:	4839      	ldr	r0, [pc, #228]	; (800d504 <tcp_pcb_remove+0x114>)
 800d41e:	f009 fec3 	bl	80171a8 <iprintf>

  TCP_RMV(pcblist, pcb);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	683a      	ldr	r2, [r7, #0]
 800d428:	429a      	cmp	r2, r3
 800d42a:	d105      	bne.n	800d438 <tcp_pcb_remove+0x48>
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	68da      	ldr	r2, [r3, #12]
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	601a      	str	r2, [r3, #0]
 800d436:	e013      	b.n	800d460 <tcp_pcb_remove+0x70>
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	60fb      	str	r3, [r7, #12]
 800d43e:	e00c      	b.n	800d45a <tcp_pcb_remove+0x6a>
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	68db      	ldr	r3, [r3, #12]
 800d444:	683a      	ldr	r2, [r7, #0]
 800d446:	429a      	cmp	r2, r3
 800d448:	d104      	bne.n	800d454 <tcp_pcb_remove+0x64>
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	68da      	ldr	r2, [r3, #12]
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	60da      	str	r2, [r3, #12]
 800d452:	e005      	b.n	800d460 <tcp_pcb_remove+0x70>
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	68db      	ldr	r3, [r3, #12]
 800d458:	60fb      	str	r3, [r7, #12]
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d1ef      	bne.n	800d440 <tcp_pcb_remove+0x50>
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	2200      	movs	r2, #0
 800d464:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800d466:	6838      	ldr	r0, [r7, #0]
 800d468:	f7ff ff72 	bl	800d350 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	7d1b      	ldrb	r3, [r3, #20]
 800d470:	2b0a      	cmp	r3, #10
 800d472:	d013      	beq.n	800d49c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800d474:	683b      	ldr	r3, [r7, #0]
 800d476:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800d478:	2b01      	cmp	r3, #1
 800d47a:	d00f      	beq.n	800d49c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	8b5b      	ldrh	r3, [r3, #26]
 800d480:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800d484:	2b00      	cmp	r3, #0
 800d486:	d009      	beq.n	800d49c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	8b5b      	ldrh	r3, [r3, #26]
 800d48c:	f043 0302 	orr.w	r3, r3, #2
 800d490:	b29a      	uxth	r2, r3
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d496:	6838      	ldr	r0, [r7, #0]
 800d498:	f003 fbc2 	bl	8010c20 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	7d1b      	ldrb	r3, [r3, #20]
 800d4a0:	2b01      	cmp	r3, #1
 800d4a2:	d020      	beq.n	800d4e6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d006      	beq.n	800d4ba <tcp_pcb_remove+0xca>
 800d4ac:	4b13      	ldr	r3, [pc, #76]	; (800d4fc <tcp_pcb_remove+0x10c>)
 800d4ae:	f640 0293 	movw	r2, #2195	; 0x893
 800d4b2:	4916      	ldr	r1, [pc, #88]	; (800d50c <tcp_pcb_remove+0x11c>)
 800d4b4:	4813      	ldr	r0, [pc, #76]	; (800d504 <tcp_pcb_remove+0x114>)
 800d4b6:	f009 fe77 	bl	80171a8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d006      	beq.n	800d4d0 <tcp_pcb_remove+0xe0>
 800d4c2:	4b0e      	ldr	r3, [pc, #56]	; (800d4fc <tcp_pcb_remove+0x10c>)
 800d4c4:	f640 0294 	movw	r2, #2196	; 0x894
 800d4c8:	4911      	ldr	r1, [pc, #68]	; (800d510 <tcp_pcb_remove+0x120>)
 800d4ca:	480e      	ldr	r0, [pc, #56]	; (800d504 <tcp_pcb_remove+0x114>)
 800d4cc:	f009 fe6c 	bl	80171a8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d006      	beq.n	800d4e6 <tcp_pcb_remove+0xf6>
 800d4d8:	4b08      	ldr	r3, [pc, #32]	; (800d4fc <tcp_pcb_remove+0x10c>)
 800d4da:	f640 0296 	movw	r2, #2198	; 0x896
 800d4de:	490d      	ldr	r1, [pc, #52]	; (800d514 <tcp_pcb_remove+0x124>)
 800d4e0:	4808      	ldr	r0, [pc, #32]	; (800d504 <tcp_pcb_remove+0x114>)
 800d4e2:	f009 fe61 	bl	80171a8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d4ec:	683b      	ldr	r3, [r7, #0]
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800d4f2:	bf00      	nop
 800d4f4:	3710      	adds	r7, #16
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}
 800d4fa:	bf00      	nop
 800d4fc:	08019c34 	.word	0x08019c34
 800d500:	0801a29c 	.word	0x0801a29c
 800d504:	08019c78 	.word	0x08019c78
 800d508:	0801a2b8 	.word	0x0801a2b8
 800d50c:	0801a2d8 	.word	0x0801a2d8
 800d510:	0801a2f0 	.word	0x0801a2f0
 800d514:	0801a30c 	.word	0x0801a30c

0800d518 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b082      	sub	sp, #8
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d106      	bne.n	800d534 <tcp_next_iss+0x1c>
 800d526:	4b0a      	ldr	r3, [pc, #40]	; (800d550 <tcp_next_iss+0x38>)
 800d528:	f640 02af 	movw	r2, #2223	; 0x8af
 800d52c:	4909      	ldr	r1, [pc, #36]	; (800d554 <tcp_next_iss+0x3c>)
 800d52e:	480a      	ldr	r0, [pc, #40]	; (800d558 <tcp_next_iss+0x40>)
 800d530:	f009 fe3a 	bl	80171a8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d534:	4b09      	ldr	r3, [pc, #36]	; (800d55c <tcp_next_iss+0x44>)
 800d536:	681a      	ldr	r2, [r3, #0]
 800d538:	4b09      	ldr	r3, [pc, #36]	; (800d560 <tcp_next_iss+0x48>)
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	4413      	add	r3, r2
 800d53e:	4a07      	ldr	r2, [pc, #28]	; (800d55c <tcp_next_iss+0x44>)
 800d540:	6013      	str	r3, [r2, #0]
  return iss;
 800d542:	4b06      	ldr	r3, [pc, #24]	; (800d55c <tcp_next_iss+0x44>)
 800d544:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d546:	4618      	mov	r0, r3
 800d548:	3708      	adds	r7, #8
 800d54a:	46bd      	mov	sp, r7
 800d54c:	bd80      	pop	{r7, pc}
 800d54e:	bf00      	nop
 800d550:	08019c34 	.word	0x08019c34
 800d554:	0801a324 	.word	0x0801a324
 800d558:	08019c78 	.word	0x08019c78
 800d55c:	20000014 	.word	0x20000014
 800d560:	2000efe0 	.word	0x2000efe0

0800d564 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b086      	sub	sp, #24
 800d568:	af00      	add	r7, sp, #0
 800d56a:	4603      	mov	r3, r0
 800d56c:	60b9      	str	r1, [r7, #8]
 800d56e:	607a      	str	r2, [r7, #4]
 800d570:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d106      	bne.n	800d586 <tcp_eff_send_mss_netif+0x22>
 800d578:	4b14      	ldr	r3, [pc, #80]	; (800d5cc <tcp_eff_send_mss_netif+0x68>)
 800d57a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800d57e:	4914      	ldr	r1, [pc, #80]	; (800d5d0 <tcp_eff_send_mss_netif+0x6c>)
 800d580:	4814      	ldr	r0, [pc, #80]	; (800d5d4 <tcp_eff_send_mss_netif+0x70>)
 800d582:	f009 fe11 	bl	80171a8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d586:	68bb      	ldr	r3, [r7, #8]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d101      	bne.n	800d590 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800d58c:	89fb      	ldrh	r3, [r7, #14]
 800d58e:	e019      	b.n	800d5c4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800d590:	68bb      	ldr	r3, [r7, #8]
 800d592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d594:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d596:	8afb      	ldrh	r3, [r7, #22]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d012      	beq.n	800d5c2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800d59c:	2328      	movs	r3, #40	; 0x28
 800d59e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800d5a0:	8afa      	ldrh	r2, [r7, #22]
 800d5a2:	8abb      	ldrh	r3, [r7, #20]
 800d5a4:	429a      	cmp	r2, r3
 800d5a6:	d904      	bls.n	800d5b2 <tcp_eff_send_mss_netif+0x4e>
 800d5a8:	8afa      	ldrh	r2, [r7, #22]
 800d5aa:	8abb      	ldrh	r3, [r7, #20]
 800d5ac:	1ad3      	subs	r3, r2, r3
 800d5ae:	b29b      	uxth	r3, r3
 800d5b0:	e000      	b.n	800d5b4 <tcp_eff_send_mss_netif+0x50>
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d5b6:	8a7a      	ldrh	r2, [r7, #18]
 800d5b8:	89fb      	ldrh	r3, [r7, #14]
 800d5ba:	4293      	cmp	r3, r2
 800d5bc:	bf28      	it	cs
 800d5be:	4613      	movcs	r3, r2
 800d5c0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800d5c2:	89fb      	ldrh	r3, [r7, #14]
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	3718      	adds	r7, #24
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}
 800d5cc:	08019c34 	.word	0x08019c34
 800d5d0:	0801a340 	.word	0x0801a340
 800d5d4:	08019c78 	.word	0x08019c78

0800d5d8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b084      	sub	sp, #16
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
 800d5e0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d119      	bne.n	800d620 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800d5ec:	4b10      	ldr	r3, [pc, #64]	; (800d630 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800d5ee:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800d5f2:	4910      	ldr	r1, [pc, #64]	; (800d634 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800d5f4:	4810      	ldr	r0, [pc, #64]	; (800d638 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800d5f6:	f009 fdd7 	bl	80171a8 <iprintf>

  while (pcb != NULL) {
 800d5fa:	e011      	b.n	800d620 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	681a      	ldr	r2, [r3, #0]
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	429a      	cmp	r2, r3
 800d606:	d108      	bne.n	800d61a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	68db      	ldr	r3, [r3, #12]
 800d60c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800d60e:	68f8      	ldr	r0, [r7, #12]
 800d610:	f7fe fd50 	bl	800c0b4 <tcp_abort>
      pcb = next;
 800d614:	68bb      	ldr	r3, [r7, #8]
 800d616:	60fb      	str	r3, [r7, #12]
 800d618:	e002      	b.n	800d620 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	68db      	ldr	r3, [r3, #12]
 800d61e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d1ea      	bne.n	800d5fc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800d626:	bf00      	nop
 800d628:	bf00      	nop
 800d62a:	3710      	adds	r7, #16
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}
 800d630:	08019c34 	.word	0x08019c34
 800d634:	0801a368 	.word	0x0801a368
 800d638:	08019c78 	.word	0x08019c78

0800d63c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b084      	sub	sp, #16
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
 800d644:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d02a      	beq.n	800d6a2 <tcp_netif_ip_addr_changed+0x66>
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d026      	beq.n	800d6a2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800d654:	4b15      	ldr	r3, [pc, #84]	; (800d6ac <tcp_netif_ip_addr_changed+0x70>)
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	4619      	mov	r1, r3
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	f7ff ffbc 	bl	800d5d8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800d660:	4b13      	ldr	r3, [pc, #76]	; (800d6b0 <tcp_netif_ip_addr_changed+0x74>)
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	4619      	mov	r1, r3
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	f7ff ffb6 	bl	800d5d8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d017      	beq.n	800d6a2 <tcp_netif_ip_addr_changed+0x66>
 800d672:	683b      	ldr	r3, [r7, #0]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d013      	beq.n	800d6a2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d67a:	4b0e      	ldr	r3, [pc, #56]	; (800d6b4 <tcp_netif_ip_addr_changed+0x78>)
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	60fb      	str	r3, [r7, #12]
 800d680:	e00c      	b.n	800d69c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	681a      	ldr	r2, [r3, #0]
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	429a      	cmp	r2, r3
 800d68c:	d103      	bne.n	800d696 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	681a      	ldr	r2, [r3, #0]
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	68db      	ldr	r3, [r3, #12]
 800d69a:	60fb      	str	r3, [r7, #12]
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d1ef      	bne.n	800d682 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800d6a2:	bf00      	nop
 800d6a4:	3710      	adds	r7, #16
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd80      	pop	{r7, pc}
 800d6aa:	bf00      	nop
 800d6ac:	2000efdc 	.word	0x2000efdc
 800d6b0:	2000efe8 	.word	0x2000efe8
 800d6b4:	2000efe4 	.word	0x2000efe4

0800d6b8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b082      	sub	sp, #8
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d007      	beq.n	800d6d8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f7ff fb6f 	bl	800cdb0 <tcp_segs_free>
    pcb->ooseq = NULL;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800d6d8:	bf00      	nop
 800d6da:	3708      	adds	r7, #8
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	bd80      	pop	{r7, pc}

0800d6e0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800d6e0:	b590      	push	{r4, r7, lr}
 800d6e2:	b08d      	sub	sp, #52	; 0x34
 800d6e4:	af04      	add	r7, sp, #16
 800d6e6:	6078      	str	r0, [r7, #4]
 800d6e8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d105      	bne.n	800d6fc <tcp_input+0x1c>
 800d6f0:	4b9b      	ldr	r3, [pc, #620]	; (800d960 <tcp_input+0x280>)
 800d6f2:	2283      	movs	r2, #131	; 0x83
 800d6f4:	499b      	ldr	r1, [pc, #620]	; (800d964 <tcp_input+0x284>)
 800d6f6:	489c      	ldr	r0, [pc, #624]	; (800d968 <tcp_input+0x288>)
 800d6f8:	f009 fd56 	bl	80171a8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	685b      	ldr	r3, [r3, #4]
 800d700:	4a9a      	ldr	r2, [pc, #616]	; (800d96c <tcp_input+0x28c>)
 800d702:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	895b      	ldrh	r3, [r3, #10]
 800d708:	2b13      	cmp	r3, #19
 800d70a:	f240 83c4 	bls.w	800de96 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d70e:	4b98      	ldr	r3, [pc, #608]	; (800d970 <tcp_input+0x290>)
 800d710:	695b      	ldr	r3, [r3, #20]
 800d712:	4a97      	ldr	r2, [pc, #604]	; (800d970 <tcp_input+0x290>)
 800d714:	6812      	ldr	r2, [r2, #0]
 800d716:	4611      	mov	r1, r2
 800d718:	4618      	mov	r0, r3
 800d71a:	f008 fa5d 	bl	8015bd8 <ip4_addr_isbroadcast_u32>
 800d71e:	4603      	mov	r3, r0
 800d720:	2b00      	cmp	r3, #0
 800d722:	f040 83ba 	bne.w	800de9a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800d726:	4b92      	ldr	r3, [pc, #584]	; (800d970 <tcp_input+0x290>)
 800d728:	695b      	ldr	r3, [r3, #20]
 800d72a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d72e:	2be0      	cmp	r3, #224	; 0xe0
 800d730:	f000 83b3 	beq.w	800de9a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800d734:	4b8d      	ldr	r3, [pc, #564]	; (800d96c <tcp_input+0x28c>)
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	899b      	ldrh	r3, [r3, #12]
 800d73a:	b29b      	uxth	r3, r3
 800d73c:	4618      	mov	r0, r3
 800d73e:	f7fc fb01 	bl	8009d44 <lwip_htons>
 800d742:	4603      	mov	r3, r0
 800d744:	0b1b      	lsrs	r3, r3, #12
 800d746:	b29b      	uxth	r3, r3
 800d748:	b2db      	uxtb	r3, r3
 800d74a:	009b      	lsls	r3, r3, #2
 800d74c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800d74e:	7cbb      	ldrb	r3, [r7, #18]
 800d750:	2b13      	cmp	r3, #19
 800d752:	f240 83a4 	bls.w	800de9e <tcp_input+0x7be>
 800d756:	7cbb      	ldrb	r3, [r7, #18]
 800d758:	b29a      	uxth	r2, r3
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	891b      	ldrh	r3, [r3, #8]
 800d75e:	429a      	cmp	r2, r3
 800d760:	f200 839d 	bhi.w	800de9e <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800d764:	7cbb      	ldrb	r3, [r7, #18]
 800d766:	b29b      	uxth	r3, r3
 800d768:	3b14      	subs	r3, #20
 800d76a:	b29a      	uxth	r2, r3
 800d76c:	4b81      	ldr	r3, [pc, #516]	; (800d974 <tcp_input+0x294>)
 800d76e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800d770:	4b81      	ldr	r3, [pc, #516]	; (800d978 <tcp_input+0x298>)
 800d772:	2200      	movs	r2, #0
 800d774:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	895a      	ldrh	r2, [r3, #10]
 800d77a:	7cbb      	ldrb	r3, [r7, #18]
 800d77c:	b29b      	uxth	r3, r3
 800d77e:	429a      	cmp	r2, r3
 800d780:	d309      	bcc.n	800d796 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800d782:	4b7c      	ldr	r3, [pc, #496]	; (800d974 <tcp_input+0x294>)
 800d784:	881a      	ldrh	r2, [r3, #0]
 800d786:	4b7d      	ldr	r3, [pc, #500]	; (800d97c <tcp_input+0x29c>)
 800d788:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800d78a:	7cbb      	ldrb	r3, [r7, #18]
 800d78c:	4619      	mov	r1, r3
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	f7fd fe0a 	bl	800b3a8 <pbuf_remove_header>
 800d794:	e04e      	b.n	800d834 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d105      	bne.n	800d7aa <tcp_input+0xca>
 800d79e:	4b70      	ldr	r3, [pc, #448]	; (800d960 <tcp_input+0x280>)
 800d7a0:	22c2      	movs	r2, #194	; 0xc2
 800d7a2:	4977      	ldr	r1, [pc, #476]	; (800d980 <tcp_input+0x2a0>)
 800d7a4:	4870      	ldr	r0, [pc, #448]	; (800d968 <tcp_input+0x288>)
 800d7a6:	f009 fcff 	bl	80171a8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800d7aa:	2114      	movs	r1, #20
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	f7fd fdfb 	bl	800b3a8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	895a      	ldrh	r2, [r3, #10]
 800d7b6:	4b71      	ldr	r3, [pc, #452]	; (800d97c <tcp_input+0x29c>)
 800d7b8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800d7ba:	4b6e      	ldr	r3, [pc, #440]	; (800d974 <tcp_input+0x294>)
 800d7bc:	881a      	ldrh	r2, [r3, #0]
 800d7be:	4b6f      	ldr	r3, [pc, #444]	; (800d97c <tcp_input+0x29c>)
 800d7c0:	881b      	ldrh	r3, [r3, #0]
 800d7c2:	1ad3      	subs	r3, r2, r3
 800d7c4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800d7c6:	4b6d      	ldr	r3, [pc, #436]	; (800d97c <tcp_input+0x29c>)
 800d7c8:	881b      	ldrh	r3, [r3, #0]
 800d7ca:	4619      	mov	r1, r3
 800d7cc:	6878      	ldr	r0, [r7, #4]
 800d7ce:	f7fd fdeb 	bl	800b3a8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	895b      	ldrh	r3, [r3, #10]
 800d7d8:	8a3a      	ldrh	r2, [r7, #16]
 800d7da:	429a      	cmp	r2, r3
 800d7dc:	f200 8361 	bhi.w	800dea2 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	685b      	ldr	r3, [r3, #4]
 800d7e6:	4a64      	ldr	r2, [pc, #400]	; (800d978 <tcp_input+0x298>)
 800d7e8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	8a3a      	ldrh	r2, [r7, #16]
 800d7f0:	4611      	mov	r1, r2
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	f7fd fdd8 	bl	800b3a8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	891a      	ldrh	r2, [r3, #8]
 800d7fc:	8a3b      	ldrh	r3, [r7, #16]
 800d7fe:	1ad3      	subs	r3, r2, r3
 800d800:	b29a      	uxth	r2, r3
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	895b      	ldrh	r3, [r3, #10]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d005      	beq.n	800d81a <tcp_input+0x13a>
 800d80e:	4b54      	ldr	r3, [pc, #336]	; (800d960 <tcp_input+0x280>)
 800d810:	22df      	movs	r2, #223	; 0xdf
 800d812:	495c      	ldr	r1, [pc, #368]	; (800d984 <tcp_input+0x2a4>)
 800d814:	4854      	ldr	r0, [pc, #336]	; (800d968 <tcp_input+0x288>)
 800d816:	f009 fcc7 	bl	80171a8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	891a      	ldrh	r2, [r3, #8]
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	891b      	ldrh	r3, [r3, #8]
 800d824:	429a      	cmp	r2, r3
 800d826:	d005      	beq.n	800d834 <tcp_input+0x154>
 800d828:	4b4d      	ldr	r3, [pc, #308]	; (800d960 <tcp_input+0x280>)
 800d82a:	22e0      	movs	r2, #224	; 0xe0
 800d82c:	4956      	ldr	r1, [pc, #344]	; (800d988 <tcp_input+0x2a8>)
 800d82e:	484e      	ldr	r0, [pc, #312]	; (800d968 <tcp_input+0x288>)
 800d830:	f009 fcba 	bl	80171a8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800d834:	4b4d      	ldr	r3, [pc, #308]	; (800d96c <tcp_input+0x28c>)
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	881b      	ldrh	r3, [r3, #0]
 800d83a:	b29b      	uxth	r3, r3
 800d83c:	4a4b      	ldr	r2, [pc, #300]	; (800d96c <tcp_input+0x28c>)
 800d83e:	6814      	ldr	r4, [r2, #0]
 800d840:	4618      	mov	r0, r3
 800d842:	f7fc fa7f 	bl	8009d44 <lwip_htons>
 800d846:	4603      	mov	r3, r0
 800d848:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800d84a:	4b48      	ldr	r3, [pc, #288]	; (800d96c <tcp_input+0x28c>)
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	885b      	ldrh	r3, [r3, #2]
 800d850:	b29b      	uxth	r3, r3
 800d852:	4a46      	ldr	r2, [pc, #280]	; (800d96c <tcp_input+0x28c>)
 800d854:	6814      	ldr	r4, [r2, #0]
 800d856:	4618      	mov	r0, r3
 800d858:	f7fc fa74 	bl	8009d44 <lwip_htons>
 800d85c:	4603      	mov	r3, r0
 800d85e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800d860:	4b42      	ldr	r3, [pc, #264]	; (800d96c <tcp_input+0x28c>)
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	685b      	ldr	r3, [r3, #4]
 800d866:	4a41      	ldr	r2, [pc, #260]	; (800d96c <tcp_input+0x28c>)
 800d868:	6814      	ldr	r4, [r2, #0]
 800d86a:	4618      	mov	r0, r3
 800d86c:	f7fc fa7f 	bl	8009d6e <lwip_htonl>
 800d870:	4603      	mov	r3, r0
 800d872:	6063      	str	r3, [r4, #4]
 800d874:	6863      	ldr	r3, [r4, #4]
 800d876:	4a45      	ldr	r2, [pc, #276]	; (800d98c <tcp_input+0x2ac>)
 800d878:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800d87a:	4b3c      	ldr	r3, [pc, #240]	; (800d96c <tcp_input+0x28c>)
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	689b      	ldr	r3, [r3, #8]
 800d880:	4a3a      	ldr	r2, [pc, #232]	; (800d96c <tcp_input+0x28c>)
 800d882:	6814      	ldr	r4, [r2, #0]
 800d884:	4618      	mov	r0, r3
 800d886:	f7fc fa72 	bl	8009d6e <lwip_htonl>
 800d88a:	4603      	mov	r3, r0
 800d88c:	60a3      	str	r3, [r4, #8]
 800d88e:	68a3      	ldr	r3, [r4, #8]
 800d890:	4a3f      	ldr	r2, [pc, #252]	; (800d990 <tcp_input+0x2b0>)
 800d892:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800d894:	4b35      	ldr	r3, [pc, #212]	; (800d96c <tcp_input+0x28c>)
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	89db      	ldrh	r3, [r3, #14]
 800d89a:	b29b      	uxth	r3, r3
 800d89c:	4a33      	ldr	r2, [pc, #204]	; (800d96c <tcp_input+0x28c>)
 800d89e:	6814      	ldr	r4, [r2, #0]
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	f7fc fa4f 	bl	8009d44 <lwip_htons>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800d8aa:	4b30      	ldr	r3, [pc, #192]	; (800d96c <tcp_input+0x28c>)
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	899b      	ldrh	r3, [r3, #12]
 800d8b0:	b29b      	uxth	r3, r3
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	f7fc fa46 	bl	8009d44 <lwip_htons>
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	b2db      	uxtb	r3, r3
 800d8bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d8c0:	b2da      	uxtb	r2, r3
 800d8c2:	4b34      	ldr	r3, [pc, #208]	; (800d994 <tcp_input+0x2b4>)
 800d8c4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	891a      	ldrh	r2, [r3, #8]
 800d8ca:	4b33      	ldr	r3, [pc, #204]	; (800d998 <tcp_input+0x2b8>)
 800d8cc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800d8ce:	4b31      	ldr	r3, [pc, #196]	; (800d994 <tcp_input+0x2b4>)
 800d8d0:	781b      	ldrb	r3, [r3, #0]
 800d8d2:	f003 0303 	and.w	r3, r3, #3
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d00c      	beq.n	800d8f4 <tcp_input+0x214>
    tcplen++;
 800d8da:	4b2f      	ldr	r3, [pc, #188]	; (800d998 <tcp_input+0x2b8>)
 800d8dc:	881b      	ldrh	r3, [r3, #0]
 800d8de:	3301      	adds	r3, #1
 800d8e0:	b29a      	uxth	r2, r3
 800d8e2:	4b2d      	ldr	r3, [pc, #180]	; (800d998 <tcp_input+0x2b8>)
 800d8e4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	891a      	ldrh	r2, [r3, #8]
 800d8ea:	4b2b      	ldr	r3, [pc, #172]	; (800d998 <tcp_input+0x2b8>)
 800d8ec:	881b      	ldrh	r3, [r3, #0]
 800d8ee:	429a      	cmp	r2, r3
 800d8f0:	f200 82d9 	bhi.w	800dea6 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d8f8:	4b28      	ldr	r3, [pc, #160]	; (800d99c <tcp_input+0x2bc>)
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	61fb      	str	r3, [r7, #28]
 800d8fe:	e09d      	b.n	800da3c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800d900:	69fb      	ldr	r3, [r7, #28]
 800d902:	7d1b      	ldrb	r3, [r3, #20]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d105      	bne.n	800d914 <tcp_input+0x234>
 800d908:	4b15      	ldr	r3, [pc, #84]	; (800d960 <tcp_input+0x280>)
 800d90a:	22fb      	movs	r2, #251	; 0xfb
 800d90c:	4924      	ldr	r1, [pc, #144]	; (800d9a0 <tcp_input+0x2c0>)
 800d90e:	4816      	ldr	r0, [pc, #88]	; (800d968 <tcp_input+0x288>)
 800d910:	f009 fc4a 	bl	80171a8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800d914:	69fb      	ldr	r3, [r7, #28]
 800d916:	7d1b      	ldrb	r3, [r3, #20]
 800d918:	2b0a      	cmp	r3, #10
 800d91a:	d105      	bne.n	800d928 <tcp_input+0x248>
 800d91c:	4b10      	ldr	r3, [pc, #64]	; (800d960 <tcp_input+0x280>)
 800d91e:	22fc      	movs	r2, #252	; 0xfc
 800d920:	4920      	ldr	r1, [pc, #128]	; (800d9a4 <tcp_input+0x2c4>)
 800d922:	4811      	ldr	r0, [pc, #68]	; (800d968 <tcp_input+0x288>)
 800d924:	f009 fc40 	bl	80171a8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800d928:	69fb      	ldr	r3, [r7, #28]
 800d92a:	7d1b      	ldrb	r3, [r3, #20]
 800d92c:	2b01      	cmp	r3, #1
 800d92e:	d105      	bne.n	800d93c <tcp_input+0x25c>
 800d930:	4b0b      	ldr	r3, [pc, #44]	; (800d960 <tcp_input+0x280>)
 800d932:	22fd      	movs	r2, #253	; 0xfd
 800d934:	491c      	ldr	r1, [pc, #112]	; (800d9a8 <tcp_input+0x2c8>)
 800d936:	480c      	ldr	r0, [pc, #48]	; (800d968 <tcp_input+0x288>)
 800d938:	f009 fc36 	bl	80171a8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d93c:	69fb      	ldr	r3, [r7, #28]
 800d93e:	7a1b      	ldrb	r3, [r3, #8]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d033      	beq.n	800d9ac <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d944:	69fb      	ldr	r3, [r7, #28]
 800d946:	7a1a      	ldrb	r2, [r3, #8]
 800d948:	4b09      	ldr	r3, [pc, #36]	; (800d970 <tcp_input+0x290>)
 800d94a:	685b      	ldr	r3, [r3, #4]
 800d94c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d950:	3301      	adds	r3, #1
 800d952:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d954:	429a      	cmp	r2, r3
 800d956:	d029      	beq.n	800d9ac <tcp_input+0x2cc>
      prev = pcb;
 800d958:	69fb      	ldr	r3, [r7, #28]
 800d95a:	61bb      	str	r3, [r7, #24]
      continue;
 800d95c:	e06b      	b.n	800da36 <tcp_input+0x356>
 800d95e:	bf00      	nop
 800d960:	0801a39c 	.word	0x0801a39c
 800d964:	0801a3d0 	.word	0x0801a3d0
 800d968:	0801a3e8 	.word	0x0801a3e8
 800d96c:	2000855c 	.word	0x2000855c
 800d970:	2000b8a8 	.word	0x2000b8a8
 800d974:	20008560 	.word	0x20008560
 800d978:	20008564 	.word	0x20008564
 800d97c:	20008562 	.word	0x20008562
 800d980:	0801a410 	.word	0x0801a410
 800d984:	0801a420 	.word	0x0801a420
 800d988:	0801a42c 	.word	0x0801a42c
 800d98c:	2000856c 	.word	0x2000856c
 800d990:	20008570 	.word	0x20008570
 800d994:	20008578 	.word	0x20008578
 800d998:	20008576 	.word	0x20008576
 800d99c:	2000efdc 	.word	0x2000efdc
 800d9a0:	0801a44c 	.word	0x0801a44c
 800d9a4:	0801a474 	.word	0x0801a474
 800d9a8:	0801a4a0 	.word	0x0801a4a0
    }

    if (pcb->remote_port == tcphdr->src &&
 800d9ac:	69fb      	ldr	r3, [r7, #28]
 800d9ae:	8b1a      	ldrh	r2, [r3, #24]
 800d9b0:	4b94      	ldr	r3, [pc, #592]	; (800dc04 <tcp_input+0x524>)
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	881b      	ldrh	r3, [r3, #0]
 800d9b6:	b29b      	uxth	r3, r3
 800d9b8:	429a      	cmp	r2, r3
 800d9ba:	d13a      	bne.n	800da32 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800d9bc:	69fb      	ldr	r3, [r7, #28]
 800d9be:	8ada      	ldrh	r2, [r3, #22]
 800d9c0:	4b90      	ldr	r3, [pc, #576]	; (800dc04 <tcp_input+0x524>)
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	885b      	ldrh	r3, [r3, #2]
 800d9c6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800d9c8:	429a      	cmp	r2, r3
 800d9ca:	d132      	bne.n	800da32 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d9cc:	69fb      	ldr	r3, [r7, #28]
 800d9ce:	685a      	ldr	r2, [r3, #4]
 800d9d0:	4b8d      	ldr	r3, [pc, #564]	; (800dc08 <tcp_input+0x528>)
 800d9d2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800d9d4:	429a      	cmp	r2, r3
 800d9d6:	d12c      	bne.n	800da32 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d9d8:	69fb      	ldr	r3, [r7, #28]
 800d9da:	681a      	ldr	r2, [r3, #0]
 800d9dc:	4b8a      	ldr	r3, [pc, #552]	; (800dc08 <tcp_input+0x528>)
 800d9de:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d9e0:	429a      	cmp	r2, r3
 800d9e2:	d126      	bne.n	800da32 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800d9e4:	69fb      	ldr	r3, [r7, #28]
 800d9e6:	68db      	ldr	r3, [r3, #12]
 800d9e8:	69fa      	ldr	r2, [r7, #28]
 800d9ea:	429a      	cmp	r2, r3
 800d9ec:	d106      	bne.n	800d9fc <tcp_input+0x31c>
 800d9ee:	4b87      	ldr	r3, [pc, #540]	; (800dc0c <tcp_input+0x52c>)
 800d9f0:	f240 120d 	movw	r2, #269	; 0x10d
 800d9f4:	4986      	ldr	r1, [pc, #536]	; (800dc10 <tcp_input+0x530>)
 800d9f6:	4887      	ldr	r0, [pc, #540]	; (800dc14 <tcp_input+0x534>)
 800d9f8:	f009 fbd6 	bl	80171a8 <iprintf>
      if (prev != NULL) {
 800d9fc:	69bb      	ldr	r3, [r7, #24]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d00a      	beq.n	800da18 <tcp_input+0x338>
        prev->next = pcb->next;
 800da02:	69fb      	ldr	r3, [r7, #28]
 800da04:	68da      	ldr	r2, [r3, #12]
 800da06:	69bb      	ldr	r3, [r7, #24]
 800da08:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800da0a:	4b83      	ldr	r3, [pc, #524]	; (800dc18 <tcp_input+0x538>)
 800da0c:	681a      	ldr	r2, [r3, #0]
 800da0e:	69fb      	ldr	r3, [r7, #28]
 800da10:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800da12:	4a81      	ldr	r2, [pc, #516]	; (800dc18 <tcp_input+0x538>)
 800da14:	69fb      	ldr	r3, [r7, #28]
 800da16:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800da18:	69fb      	ldr	r3, [r7, #28]
 800da1a:	68db      	ldr	r3, [r3, #12]
 800da1c:	69fa      	ldr	r2, [r7, #28]
 800da1e:	429a      	cmp	r2, r3
 800da20:	d111      	bne.n	800da46 <tcp_input+0x366>
 800da22:	4b7a      	ldr	r3, [pc, #488]	; (800dc0c <tcp_input+0x52c>)
 800da24:	f240 1215 	movw	r2, #277	; 0x115
 800da28:	497c      	ldr	r1, [pc, #496]	; (800dc1c <tcp_input+0x53c>)
 800da2a:	487a      	ldr	r0, [pc, #488]	; (800dc14 <tcp_input+0x534>)
 800da2c:	f009 fbbc 	bl	80171a8 <iprintf>
      break;
 800da30:	e009      	b.n	800da46 <tcp_input+0x366>
    }
    prev = pcb;
 800da32:	69fb      	ldr	r3, [r7, #28]
 800da34:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800da36:	69fb      	ldr	r3, [r7, #28]
 800da38:	68db      	ldr	r3, [r3, #12]
 800da3a:	61fb      	str	r3, [r7, #28]
 800da3c:	69fb      	ldr	r3, [r7, #28]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	f47f af5e 	bne.w	800d900 <tcp_input+0x220>
 800da44:	e000      	b.n	800da48 <tcp_input+0x368>
      break;
 800da46:	bf00      	nop
  }

  if (pcb == NULL) {
 800da48:	69fb      	ldr	r3, [r7, #28]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	f040 8095 	bne.w	800db7a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800da50:	4b73      	ldr	r3, [pc, #460]	; (800dc20 <tcp_input+0x540>)
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	61fb      	str	r3, [r7, #28]
 800da56:	e03f      	b.n	800dad8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800da58:	69fb      	ldr	r3, [r7, #28]
 800da5a:	7d1b      	ldrb	r3, [r3, #20]
 800da5c:	2b0a      	cmp	r3, #10
 800da5e:	d006      	beq.n	800da6e <tcp_input+0x38e>
 800da60:	4b6a      	ldr	r3, [pc, #424]	; (800dc0c <tcp_input+0x52c>)
 800da62:	f240 121f 	movw	r2, #287	; 0x11f
 800da66:	496f      	ldr	r1, [pc, #444]	; (800dc24 <tcp_input+0x544>)
 800da68:	486a      	ldr	r0, [pc, #424]	; (800dc14 <tcp_input+0x534>)
 800da6a:	f009 fb9d 	bl	80171a8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800da6e:	69fb      	ldr	r3, [r7, #28]
 800da70:	7a1b      	ldrb	r3, [r3, #8]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d009      	beq.n	800da8a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800da76:	69fb      	ldr	r3, [r7, #28]
 800da78:	7a1a      	ldrb	r2, [r3, #8]
 800da7a:	4b63      	ldr	r3, [pc, #396]	; (800dc08 <tcp_input+0x528>)
 800da7c:	685b      	ldr	r3, [r3, #4]
 800da7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800da82:	3301      	adds	r3, #1
 800da84:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800da86:	429a      	cmp	r2, r3
 800da88:	d122      	bne.n	800dad0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800da8a:	69fb      	ldr	r3, [r7, #28]
 800da8c:	8b1a      	ldrh	r2, [r3, #24]
 800da8e:	4b5d      	ldr	r3, [pc, #372]	; (800dc04 <tcp_input+0x524>)
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	881b      	ldrh	r3, [r3, #0]
 800da94:	b29b      	uxth	r3, r3
 800da96:	429a      	cmp	r2, r3
 800da98:	d11b      	bne.n	800dad2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800da9a:	69fb      	ldr	r3, [r7, #28]
 800da9c:	8ada      	ldrh	r2, [r3, #22]
 800da9e:	4b59      	ldr	r3, [pc, #356]	; (800dc04 <tcp_input+0x524>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	885b      	ldrh	r3, [r3, #2]
 800daa4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800daa6:	429a      	cmp	r2, r3
 800daa8:	d113      	bne.n	800dad2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800daaa:	69fb      	ldr	r3, [r7, #28]
 800daac:	685a      	ldr	r2, [r3, #4]
 800daae:	4b56      	ldr	r3, [pc, #344]	; (800dc08 <tcp_input+0x528>)
 800dab0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800dab2:	429a      	cmp	r2, r3
 800dab4:	d10d      	bne.n	800dad2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800dab6:	69fb      	ldr	r3, [r7, #28]
 800dab8:	681a      	ldr	r2, [r3, #0]
 800daba:	4b53      	ldr	r3, [pc, #332]	; (800dc08 <tcp_input+0x528>)
 800dabc:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dabe:	429a      	cmp	r2, r3
 800dac0:	d107      	bne.n	800dad2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800dac2:	69f8      	ldr	r0, [r7, #28]
 800dac4:	f000 fb54 	bl	800e170 <tcp_timewait_input>
        }
        pbuf_free(p);
 800dac8:	6878      	ldr	r0, [r7, #4]
 800daca:	f7fd fcf3 	bl	800b4b4 <pbuf_free>
        return;
 800dace:	e1f0      	b.n	800deb2 <tcp_input+0x7d2>
        continue;
 800dad0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dad2:	69fb      	ldr	r3, [r7, #28]
 800dad4:	68db      	ldr	r3, [r3, #12]
 800dad6:	61fb      	str	r3, [r7, #28]
 800dad8:	69fb      	ldr	r3, [r7, #28]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d1bc      	bne.n	800da58 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800dade:	2300      	movs	r3, #0
 800dae0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dae2:	4b51      	ldr	r3, [pc, #324]	; (800dc28 <tcp_input+0x548>)
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	617b      	str	r3, [r7, #20]
 800dae8:	e02a      	b.n	800db40 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800daea:	697b      	ldr	r3, [r7, #20]
 800daec:	7a1b      	ldrb	r3, [r3, #8]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d00c      	beq.n	800db0c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800daf2:	697b      	ldr	r3, [r7, #20]
 800daf4:	7a1a      	ldrb	r2, [r3, #8]
 800daf6:	4b44      	ldr	r3, [pc, #272]	; (800dc08 <tcp_input+0x528>)
 800daf8:	685b      	ldr	r3, [r3, #4]
 800dafa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dafe:	3301      	adds	r3, #1
 800db00:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800db02:	429a      	cmp	r2, r3
 800db04:	d002      	beq.n	800db0c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800db06:	697b      	ldr	r3, [r7, #20]
 800db08:	61bb      	str	r3, [r7, #24]
        continue;
 800db0a:	e016      	b.n	800db3a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800db0c:	697b      	ldr	r3, [r7, #20]
 800db0e:	8ada      	ldrh	r2, [r3, #22]
 800db10:	4b3c      	ldr	r3, [pc, #240]	; (800dc04 <tcp_input+0x524>)
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	885b      	ldrh	r3, [r3, #2]
 800db16:	b29b      	uxth	r3, r3
 800db18:	429a      	cmp	r2, r3
 800db1a:	d10c      	bne.n	800db36 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800db1c:	697b      	ldr	r3, [r7, #20]
 800db1e:	681a      	ldr	r2, [r3, #0]
 800db20:	4b39      	ldr	r3, [pc, #228]	; (800dc08 <tcp_input+0x528>)
 800db22:	695b      	ldr	r3, [r3, #20]
 800db24:	429a      	cmp	r2, r3
 800db26:	d00f      	beq.n	800db48 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800db28:	697b      	ldr	r3, [r7, #20]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d00d      	beq.n	800db4a <tcp_input+0x46a>
 800db2e:	697b      	ldr	r3, [r7, #20]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d009      	beq.n	800db4a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800db36:	697b      	ldr	r3, [r7, #20]
 800db38:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800db3a:	697b      	ldr	r3, [r7, #20]
 800db3c:	68db      	ldr	r3, [r3, #12]
 800db3e:	617b      	str	r3, [r7, #20]
 800db40:	697b      	ldr	r3, [r7, #20]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d1d1      	bne.n	800daea <tcp_input+0x40a>
 800db46:	e000      	b.n	800db4a <tcp_input+0x46a>
            break;
 800db48:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800db4a:	697b      	ldr	r3, [r7, #20]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d014      	beq.n	800db7a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800db50:	69bb      	ldr	r3, [r7, #24]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d00a      	beq.n	800db6c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800db56:	697b      	ldr	r3, [r7, #20]
 800db58:	68da      	ldr	r2, [r3, #12]
 800db5a:	69bb      	ldr	r3, [r7, #24]
 800db5c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800db5e:	4b32      	ldr	r3, [pc, #200]	; (800dc28 <tcp_input+0x548>)
 800db60:	681a      	ldr	r2, [r3, #0]
 800db62:	697b      	ldr	r3, [r7, #20]
 800db64:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800db66:	4a30      	ldr	r2, [pc, #192]	; (800dc28 <tcp_input+0x548>)
 800db68:	697b      	ldr	r3, [r7, #20]
 800db6a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800db6c:	6978      	ldr	r0, [r7, #20]
 800db6e:	f000 fa01 	bl	800df74 <tcp_listen_input>
      }
      pbuf_free(p);
 800db72:	6878      	ldr	r0, [r7, #4]
 800db74:	f7fd fc9e 	bl	800b4b4 <pbuf_free>
      return;
 800db78:	e19b      	b.n	800deb2 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800db7a:	69fb      	ldr	r3, [r7, #28]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	f000 8160 	beq.w	800de42 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800db82:	4b2a      	ldr	r3, [pc, #168]	; (800dc2c <tcp_input+0x54c>)
 800db84:	2200      	movs	r2, #0
 800db86:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	891a      	ldrh	r2, [r3, #8]
 800db8c:	4b27      	ldr	r3, [pc, #156]	; (800dc2c <tcp_input+0x54c>)
 800db8e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800db90:	4a26      	ldr	r2, [pc, #152]	; (800dc2c <tcp_input+0x54c>)
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800db96:	4b1b      	ldr	r3, [pc, #108]	; (800dc04 <tcp_input+0x524>)
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	4a24      	ldr	r2, [pc, #144]	; (800dc2c <tcp_input+0x54c>)
 800db9c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800db9e:	4b24      	ldr	r3, [pc, #144]	; (800dc30 <tcp_input+0x550>)
 800dba0:	2200      	movs	r2, #0
 800dba2:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800dba4:	4b23      	ldr	r3, [pc, #140]	; (800dc34 <tcp_input+0x554>)
 800dba6:	2200      	movs	r2, #0
 800dba8:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800dbaa:	4b23      	ldr	r3, [pc, #140]	; (800dc38 <tcp_input+0x558>)
 800dbac:	2200      	movs	r2, #0
 800dbae:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800dbb0:	4b22      	ldr	r3, [pc, #136]	; (800dc3c <tcp_input+0x55c>)
 800dbb2:	781b      	ldrb	r3, [r3, #0]
 800dbb4:	f003 0308 	and.w	r3, r3, #8
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d006      	beq.n	800dbca <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	7b5b      	ldrb	r3, [r3, #13]
 800dbc0:	f043 0301 	orr.w	r3, r3, #1
 800dbc4:	b2da      	uxtb	r2, r3
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800dbca:	69fb      	ldr	r3, [r7, #28]
 800dbcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d038      	beq.n	800dc44 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800dbd2:	69f8      	ldr	r0, [r7, #28]
 800dbd4:	f7ff f870 	bl	800ccb8 <tcp_process_refused_data>
 800dbd8:	4603      	mov	r3, r0
 800dbda:	f113 0f0d 	cmn.w	r3, #13
 800dbde:	d007      	beq.n	800dbf0 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800dbe0:	69fb      	ldr	r3, [r7, #28]
 800dbe2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d02d      	beq.n	800dc44 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800dbe8:	4b15      	ldr	r3, [pc, #84]	; (800dc40 <tcp_input+0x560>)
 800dbea:	881b      	ldrh	r3, [r3, #0]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d029      	beq.n	800dc44 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800dbf0:	69fb      	ldr	r3, [r7, #28]
 800dbf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	f040 8104 	bne.w	800de02 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800dbfa:	69f8      	ldr	r0, [r7, #28]
 800dbfc:	f003 fe16 	bl	801182c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800dc00:	e0ff      	b.n	800de02 <tcp_input+0x722>
 800dc02:	bf00      	nop
 800dc04:	2000855c 	.word	0x2000855c
 800dc08:	2000b8a8 	.word	0x2000b8a8
 800dc0c:	0801a39c 	.word	0x0801a39c
 800dc10:	0801a4c8 	.word	0x0801a4c8
 800dc14:	0801a3e8 	.word	0x0801a3e8
 800dc18:	2000efdc 	.word	0x2000efdc
 800dc1c:	0801a4f4 	.word	0x0801a4f4
 800dc20:	2000efec 	.word	0x2000efec
 800dc24:	0801a520 	.word	0x0801a520
 800dc28:	2000efe4 	.word	0x2000efe4
 800dc2c:	2000854c 	.word	0x2000854c
 800dc30:	2000857c 	.word	0x2000857c
 800dc34:	20008579 	.word	0x20008579
 800dc38:	20008574 	.word	0x20008574
 800dc3c:	20008578 	.word	0x20008578
 800dc40:	20008576 	.word	0x20008576
      }
    }
    tcp_input_pcb = pcb;
 800dc44:	4a9c      	ldr	r2, [pc, #624]	; (800deb8 <tcp_input+0x7d8>)
 800dc46:	69fb      	ldr	r3, [r7, #28]
 800dc48:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800dc4a:	69f8      	ldr	r0, [r7, #28]
 800dc4c:	f000 fb0a 	bl	800e264 <tcp_process>
 800dc50:	4603      	mov	r3, r0
 800dc52:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800dc54:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dc58:	f113 0f0d 	cmn.w	r3, #13
 800dc5c:	f000 80d3 	beq.w	800de06 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800dc60:	4b96      	ldr	r3, [pc, #600]	; (800debc <tcp_input+0x7dc>)
 800dc62:	781b      	ldrb	r3, [r3, #0]
 800dc64:	f003 0308 	and.w	r3, r3, #8
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d015      	beq.n	800dc98 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800dc6c:	69fb      	ldr	r3, [r7, #28]
 800dc6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d008      	beq.n	800dc88 <tcp_input+0x5a8>
 800dc76:	69fb      	ldr	r3, [r7, #28]
 800dc78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc7c:	69fa      	ldr	r2, [r7, #28]
 800dc7e:	6912      	ldr	r2, [r2, #16]
 800dc80:	f06f 010d 	mvn.w	r1, #13
 800dc84:	4610      	mov	r0, r2
 800dc86:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800dc88:	69f9      	ldr	r1, [r7, #28]
 800dc8a:	488d      	ldr	r0, [pc, #564]	; (800dec0 <tcp_input+0x7e0>)
 800dc8c:	f7ff fbb0 	bl	800d3f0 <tcp_pcb_remove>
        tcp_free(pcb);
 800dc90:	69f8      	ldr	r0, [r7, #28]
 800dc92:	f7fd fecb 	bl	800ba2c <tcp_free>
 800dc96:	e0c1      	b.n	800de1c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800dc98:	2300      	movs	r3, #0
 800dc9a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800dc9c:	4b89      	ldr	r3, [pc, #548]	; (800dec4 <tcp_input+0x7e4>)
 800dc9e:	881b      	ldrh	r3, [r3, #0]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d01d      	beq.n	800dce0 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800dca4:	4b87      	ldr	r3, [pc, #540]	; (800dec4 <tcp_input+0x7e4>)
 800dca6:	881b      	ldrh	r3, [r3, #0]
 800dca8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800dcaa:	69fb      	ldr	r3, [r7, #28]
 800dcac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d00a      	beq.n	800dcca <tcp_input+0x5ea>
 800dcb4:	69fb      	ldr	r3, [r7, #28]
 800dcb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dcba:	69fa      	ldr	r2, [r7, #28]
 800dcbc:	6910      	ldr	r0, [r2, #16]
 800dcbe:	89fa      	ldrh	r2, [r7, #14]
 800dcc0:	69f9      	ldr	r1, [r7, #28]
 800dcc2:	4798      	blx	r3
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	74fb      	strb	r3, [r7, #19]
 800dcc8:	e001      	b.n	800dcce <tcp_input+0x5ee>
 800dcca:	2300      	movs	r3, #0
 800dccc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800dcce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dcd2:	f113 0f0d 	cmn.w	r3, #13
 800dcd6:	f000 8098 	beq.w	800de0a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800dcda:	4b7a      	ldr	r3, [pc, #488]	; (800dec4 <tcp_input+0x7e4>)
 800dcdc:	2200      	movs	r2, #0
 800dcde:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800dce0:	69f8      	ldr	r0, [r7, #28]
 800dce2:	f000 f907 	bl	800def4 <tcp_input_delayed_close>
 800dce6:	4603      	mov	r3, r0
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	f040 8090 	bne.w	800de0e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800dcee:	4b76      	ldr	r3, [pc, #472]	; (800dec8 <tcp_input+0x7e8>)
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d041      	beq.n	800dd7a <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800dcf6:	69fb      	ldr	r3, [r7, #28]
 800dcf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d006      	beq.n	800dd0c <tcp_input+0x62c>
 800dcfe:	4b73      	ldr	r3, [pc, #460]	; (800decc <tcp_input+0x7ec>)
 800dd00:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800dd04:	4972      	ldr	r1, [pc, #456]	; (800ded0 <tcp_input+0x7f0>)
 800dd06:	4873      	ldr	r0, [pc, #460]	; (800ded4 <tcp_input+0x7f4>)
 800dd08:	f009 fa4e 	bl	80171a8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800dd0c:	69fb      	ldr	r3, [r7, #28]
 800dd0e:	8b5b      	ldrh	r3, [r3, #26]
 800dd10:	f003 0310 	and.w	r3, r3, #16
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d008      	beq.n	800dd2a <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800dd18:	4b6b      	ldr	r3, [pc, #428]	; (800dec8 <tcp_input+0x7e8>)
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	f7fd fbc9 	bl	800b4b4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800dd22:	69f8      	ldr	r0, [r7, #28]
 800dd24:	f7fe f9c6 	bl	800c0b4 <tcp_abort>
            goto aborted;
 800dd28:	e078      	b.n	800de1c <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800dd2a:	69fb      	ldr	r3, [r7, #28]
 800dd2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d00c      	beq.n	800dd4e <tcp_input+0x66e>
 800dd34:	69fb      	ldr	r3, [r7, #28]
 800dd36:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800dd3a:	69fb      	ldr	r3, [r7, #28]
 800dd3c:	6918      	ldr	r0, [r3, #16]
 800dd3e:	4b62      	ldr	r3, [pc, #392]	; (800dec8 <tcp_input+0x7e8>)
 800dd40:	681a      	ldr	r2, [r3, #0]
 800dd42:	2300      	movs	r3, #0
 800dd44:	69f9      	ldr	r1, [r7, #28]
 800dd46:	47a0      	blx	r4
 800dd48:	4603      	mov	r3, r0
 800dd4a:	74fb      	strb	r3, [r7, #19]
 800dd4c:	e008      	b.n	800dd60 <tcp_input+0x680>
 800dd4e:	4b5e      	ldr	r3, [pc, #376]	; (800dec8 <tcp_input+0x7e8>)
 800dd50:	681a      	ldr	r2, [r3, #0]
 800dd52:	2300      	movs	r3, #0
 800dd54:	69f9      	ldr	r1, [r7, #28]
 800dd56:	2000      	movs	r0, #0
 800dd58:	f7ff f884 	bl	800ce64 <tcp_recv_null>
 800dd5c:	4603      	mov	r3, r0
 800dd5e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800dd60:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dd64:	f113 0f0d 	cmn.w	r3, #13
 800dd68:	d053      	beq.n	800de12 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800dd6a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d003      	beq.n	800dd7a <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800dd72:	4b55      	ldr	r3, [pc, #340]	; (800dec8 <tcp_input+0x7e8>)
 800dd74:	681a      	ldr	r2, [r3, #0]
 800dd76:	69fb      	ldr	r3, [r7, #28]
 800dd78:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800dd7a:	4b50      	ldr	r3, [pc, #320]	; (800debc <tcp_input+0x7dc>)
 800dd7c:	781b      	ldrb	r3, [r3, #0]
 800dd7e:	f003 0320 	and.w	r3, r3, #32
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d030      	beq.n	800dde8 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800dd86:	69fb      	ldr	r3, [r7, #28]
 800dd88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d009      	beq.n	800dda2 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800dd8e:	69fb      	ldr	r3, [r7, #28]
 800dd90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dd92:	7b5a      	ldrb	r2, [r3, #13]
 800dd94:	69fb      	ldr	r3, [r7, #28]
 800dd96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dd98:	f042 0220 	orr.w	r2, r2, #32
 800dd9c:	b2d2      	uxtb	r2, r2
 800dd9e:	735a      	strb	r2, [r3, #13]
 800dda0:	e022      	b.n	800dde8 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800dda2:	69fb      	ldr	r3, [r7, #28]
 800dda4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dda6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ddaa:	d005      	beq.n	800ddb8 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800ddac:	69fb      	ldr	r3, [r7, #28]
 800ddae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ddb0:	3301      	adds	r3, #1
 800ddb2:	b29a      	uxth	r2, r3
 800ddb4:	69fb      	ldr	r3, [r7, #28]
 800ddb6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800ddb8:	69fb      	ldr	r3, [r7, #28]
 800ddba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d00b      	beq.n	800ddda <tcp_input+0x6fa>
 800ddc2:	69fb      	ldr	r3, [r7, #28]
 800ddc4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ddc8:	69fb      	ldr	r3, [r7, #28]
 800ddca:	6918      	ldr	r0, [r3, #16]
 800ddcc:	2300      	movs	r3, #0
 800ddce:	2200      	movs	r2, #0
 800ddd0:	69f9      	ldr	r1, [r7, #28]
 800ddd2:	47a0      	blx	r4
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	74fb      	strb	r3, [r7, #19]
 800ddd8:	e001      	b.n	800ddde <tcp_input+0x6fe>
 800ddda:	2300      	movs	r3, #0
 800dddc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ddde:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dde2:	f113 0f0d 	cmn.w	r3, #13
 800dde6:	d016      	beq.n	800de16 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800dde8:	4b33      	ldr	r3, [pc, #204]	; (800deb8 <tcp_input+0x7d8>)
 800ddea:	2200      	movs	r2, #0
 800ddec:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ddee:	69f8      	ldr	r0, [r7, #28]
 800ddf0:	f000 f880 	bl	800def4 <tcp_input_delayed_close>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d10f      	bne.n	800de1a <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800ddfa:	69f8      	ldr	r0, [r7, #28]
 800ddfc:	f002 ff10 	bl	8010c20 <tcp_output>
 800de00:	e00c      	b.n	800de1c <tcp_input+0x73c>
        goto aborted;
 800de02:	bf00      	nop
 800de04:	e00a      	b.n	800de1c <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800de06:	bf00      	nop
 800de08:	e008      	b.n	800de1c <tcp_input+0x73c>
              goto aborted;
 800de0a:	bf00      	nop
 800de0c:	e006      	b.n	800de1c <tcp_input+0x73c>
          goto aborted;
 800de0e:	bf00      	nop
 800de10:	e004      	b.n	800de1c <tcp_input+0x73c>
            goto aborted;
 800de12:	bf00      	nop
 800de14:	e002      	b.n	800de1c <tcp_input+0x73c>
              goto aborted;
 800de16:	bf00      	nop
 800de18:	e000      	b.n	800de1c <tcp_input+0x73c>
          goto aborted;
 800de1a:	bf00      	nop
    tcp_input_pcb = NULL;
 800de1c:	4b26      	ldr	r3, [pc, #152]	; (800deb8 <tcp_input+0x7d8>)
 800de1e:	2200      	movs	r2, #0
 800de20:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800de22:	4b29      	ldr	r3, [pc, #164]	; (800dec8 <tcp_input+0x7e8>)
 800de24:	2200      	movs	r2, #0
 800de26:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800de28:	4b2b      	ldr	r3, [pc, #172]	; (800ded8 <tcp_input+0x7f8>)
 800de2a:	685b      	ldr	r3, [r3, #4]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d03f      	beq.n	800deb0 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800de30:	4b29      	ldr	r3, [pc, #164]	; (800ded8 <tcp_input+0x7f8>)
 800de32:	685b      	ldr	r3, [r3, #4]
 800de34:	4618      	mov	r0, r3
 800de36:	f7fd fb3d 	bl	800b4b4 <pbuf_free>
      inseg.p = NULL;
 800de3a:	4b27      	ldr	r3, [pc, #156]	; (800ded8 <tcp_input+0x7f8>)
 800de3c:	2200      	movs	r2, #0
 800de3e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800de40:	e036      	b.n	800deb0 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800de42:	4b26      	ldr	r3, [pc, #152]	; (800dedc <tcp_input+0x7fc>)
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	899b      	ldrh	r3, [r3, #12]
 800de48:	b29b      	uxth	r3, r3
 800de4a:	4618      	mov	r0, r3
 800de4c:	f7fb ff7a 	bl	8009d44 <lwip_htons>
 800de50:	4603      	mov	r3, r0
 800de52:	b2db      	uxtb	r3, r3
 800de54:	f003 0304 	and.w	r3, r3, #4
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d118      	bne.n	800de8e <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800de5c:	4b20      	ldr	r3, [pc, #128]	; (800dee0 <tcp_input+0x800>)
 800de5e:	6819      	ldr	r1, [r3, #0]
 800de60:	4b20      	ldr	r3, [pc, #128]	; (800dee4 <tcp_input+0x804>)
 800de62:	881b      	ldrh	r3, [r3, #0]
 800de64:	461a      	mov	r2, r3
 800de66:	4b20      	ldr	r3, [pc, #128]	; (800dee8 <tcp_input+0x808>)
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800de6c:	4b1b      	ldr	r3, [pc, #108]	; (800dedc <tcp_input+0x7fc>)
 800de6e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800de70:	885b      	ldrh	r3, [r3, #2]
 800de72:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800de74:	4a19      	ldr	r2, [pc, #100]	; (800dedc <tcp_input+0x7fc>)
 800de76:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800de78:	8812      	ldrh	r2, [r2, #0]
 800de7a:	b292      	uxth	r2, r2
 800de7c:	9202      	str	r2, [sp, #8]
 800de7e:	9301      	str	r3, [sp, #4]
 800de80:	4b1a      	ldr	r3, [pc, #104]	; (800deec <tcp_input+0x80c>)
 800de82:	9300      	str	r3, [sp, #0]
 800de84:	4b1a      	ldr	r3, [pc, #104]	; (800def0 <tcp_input+0x810>)
 800de86:	4602      	mov	r2, r0
 800de88:	2000      	movs	r0, #0
 800de8a:	f003 fc7d 	bl	8011788 <tcp_rst>
    pbuf_free(p);
 800de8e:	6878      	ldr	r0, [r7, #4]
 800de90:	f7fd fb10 	bl	800b4b4 <pbuf_free>
  return;
 800de94:	e00c      	b.n	800deb0 <tcp_input+0x7d0>
    goto dropped;
 800de96:	bf00      	nop
 800de98:	e006      	b.n	800dea8 <tcp_input+0x7c8>
    goto dropped;
 800de9a:	bf00      	nop
 800de9c:	e004      	b.n	800dea8 <tcp_input+0x7c8>
    goto dropped;
 800de9e:	bf00      	nop
 800dea0:	e002      	b.n	800dea8 <tcp_input+0x7c8>
      goto dropped;
 800dea2:	bf00      	nop
 800dea4:	e000      	b.n	800dea8 <tcp_input+0x7c8>
      goto dropped;
 800dea6:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800dea8:	6878      	ldr	r0, [r7, #4]
 800deaa:	f7fd fb03 	bl	800b4b4 <pbuf_free>
 800deae:	e000      	b.n	800deb2 <tcp_input+0x7d2>
  return;
 800deb0:	bf00      	nop
}
 800deb2:	3724      	adds	r7, #36	; 0x24
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd90      	pop	{r4, r7, pc}
 800deb8:	2000eff0 	.word	0x2000eff0
 800debc:	20008579 	.word	0x20008579
 800dec0:	2000efdc 	.word	0x2000efdc
 800dec4:	20008574 	.word	0x20008574
 800dec8:	2000857c 	.word	0x2000857c
 800decc:	0801a39c 	.word	0x0801a39c
 800ded0:	0801a550 	.word	0x0801a550
 800ded4:	0801a3e8 	.word	0x0801a3e8
 800ded8:	2000854c 	.word	0x2000854c
 800dedc:	2000855c 	.word	0x2000855c
 800dee0:	20008570 	.word	0x20008570
 800dee4:	20008576 	.word	0x20008576
 800dee8:	2000856c 	.word	0x2000856c
 800deec:	2000b8b8 	.word	0x2000b8b8
 800def0:	2000b8bc 	.word	0x2000b8bc

0800def4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b082      	sub	sp, #8
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d106      	bne.n	800df10 <tcp_input_delayed_close+0x1c>
 800df02:	4b17      	ldr	r3, [pc, #92]	; (800df60 <tcp_input_delayed_close+0x6c>)
 800df04:	f240 225a 	movw	r2, #602	; 0x25a
 800df08:	4916      	ldr	r1, [pc, #88]	; (800df64 <tcp_input_delayed_close+0x70>)
 800df0a:	4817      	ldr	r0, [pc, #92]	; (800df68 <tcp_input_delayed_close+0x74>)
 800df0c:	f009 f94c 	bl	80171a8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800df10:	4b16      	ldr	r3, [pc, #88]	; (800df6c <tcp_input_delayed_close+0x78>)
 800df12:	781b      	ldrb	r3, [r3, #0]
 800df14:	f003 0310 	and.w	r3, r3, #16
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d01c      	beq.n	800df56 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	8b5b      	ldrh	r3, [r3, #26]
 800df20:	f003 0310 	and.w	r3, r3, #16
 800df24:	2b00      	cmp	r3, #0
 800df26:	d10d      	bne.n	800df44 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d008      	beq.n	800df44 <tcp_input_delayed_close+0x50>
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df38:	687a      	ldr	r2, [r7, #4]
 800df3a:	6912      	ldr	r2, [r2, #16]
 800df3c:	f06f 010e 	mvn.w	r1, #14
 800df40:	4610      	mov	r0, r2
 800df42:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800df44:	6879      	ldr	r1, [r7, #4]
 800df46:	480a      	ldr	r0, [pc, #40]	; (800df70 <tcp_input_delayed_close+0x7c>)
 800df48:	f7ff fa52 	bl	800d3f0 <tcp_pcb_remove>
    tcp_free(pcb);
 800df4c:	6878      	ldr	r0, [r7, #4]
 800df4e:	f7fd fd6d 	bl	800ba2c <tcp_free>
    return 1;
 800df52:	2301      	movs	r3, #1
 800df54:	e000      	b.n	800df58 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800df56:	2300      	movs	r3, #0
}
 800df58:	4618      	mov	r0, r3
 800df5a:	3708      	adds	r7, #8
 800df5c:	46bd      	mov	sp, r7
 800df5e:	bd80      	pop	{r7, pc}
 800df60:	0801a39c 	.word	0x0801a39c
 800df64:	0801a56c 	.word	0x0801a56c
 800df68:	0801a3e8 	.word	0x0801a3e8
 800df6c:	20008579 	.word	0x20008579
 800df70:	2000efdc 	.word	0x2000efdc

0800df74 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800df74:	b590      	push	{r4, r7, lr}
 800df76:	b08b      	sub	sp, #44	; 0x2c
 800df78:	af04      	add	r7, sp, #16
 800df7a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800df7c:	4b6f      	ldr	r3, [pc, #444]	; (800e13c <tcp_listen_input+0x1c8>)
 800df7e:	781b      	ldrb	r3, [r3, #0]
 800df80:	f003 0304 	and.w	r3, r3, #4
 800df84:	2b00      	cmp	r3, #0
 800df86:	f040 80d2 	bne.w	800e12e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d106      	bne.n	800df9e <tcp_listen_input+0x2a>
 800df90:	4b6b      	ldr	r3, [pc, #428]	; (800e140 <tcp_listen_input+0x1cc>)
 800df92:	f240 2281 	movw	r2, #641	; 0x281
 800df96:	496b      	ldr	r1, [pc, #428]	; (800e144 <tcp_listen_input+0x1d0>)
 800df98:	486b      	ldr	r0, [pc, #428]	; (800e148 <tcp_listen_input+0x1d4>)
 800df9a:	f009 f905 	bl	80171a8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800df9e:	4b67      	ldr	r3, [pc, #412]	; (800e13c <tcp_listen_input+0x1c8>)
 800dfa0:	781b      	ldrb	r3, [r3, #0]
 800dfa2:	f003 0310 	and.w	r3, r3, #16
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d019      	beq.n	800dfde <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dfaa:	4b68      	ldr	r3, [pc, #416]	; (800e14c <tcp_listen_input+0x1d8>)
 800dfac:	6819      	ldr	r1, [r3, #0]
 800dfae:	4b68      	ldr	r3, [pc, #416]	; (800e150 <tcp_listen_input+0x1dc>)
 800dfb0:	881b      	ldrh	r3, [r3, #0]
 800dfb2:	461a      	mov	r2, r3
 800dfb4:	4b67      	ldr	r3, [pc, #412]	; (800e154 <tcp_listen_input+0x1e0>)
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dfba:	4b67      	ldr	r3, [pc, #412]	; (800e158 <tcp_listen_input+0x1e4>)
 800dfbc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dfbe:	885b      	ldrh	r3, [r3, #2]
 800dfc0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dfc2:	4a65      	ldr	r2, [pc, #404]	; (800e158 <tcp_listen_input+0x1e4>)
 800dfc4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dfc6:	8812      	ldrh	r2, [r2, #0]
 800dfc8:	b292      	uxth	r2, r2
 800dfca:	9202      	str	r2, [sp, #8]
 800dfcc:	9301      	str	r3, [sp, #4]
 800dfce:	4b63      	ldr	r3, [pc, #396]	; (800e15c <tcp_listen_input+0x1e8>)
 800dfd0:	9300      	str	r3, [sp, #0]
 800dfd2:	4b63      	ldr	r3, [pc, #396]	; (800e160 <tcp_listen_input+0x1ec>)
 800dfd4:	4602      	mov	r2, r0
 800dfd6:	6878      	ldr	r0, [r7, #4]
 800dfd8:	f003 fbd6 	bl	8011788 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800dfdc:	e0a9      	b.n	800e132 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800dfde:	4b57      	ldr	r3, [pc, #348]	; (800e13c <tcp_listen_input+0x1c8>)
 800dfe0:	781b      	ldrb	r3, [r3, #0]
 800dfe2:	f003 0302 	and.w	r3, r3, #2
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	f000 80a3 	beq.w	800e132 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	7d5b      	ldrb	r3, [r3, #21]
 800dff0:	4618      	mov	r0, r3
 800dff2:	f7ff f85b 	bl	800d0ac <tcp_alloc>
 800dff6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800dff8:	697b      	ldr	r3, [r7, #20]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d111      	bne.n	800e022 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	699b      	ldr	r3, [r3, #24]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d00a      	beq.n	800e01c <tcp_listen_input+0xa8>
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	699b      	ldr	r3, [r3, #24]
 800e00a:	687a      	ldr	r2, [r7, #4]
 800e00c:	6910      	ldr	r0, [r2, #16]
 800e00e:	f04f 32ff 	mov.w	r2, #4294967295
 800e012:	2100      	movs	r1, #0
 800e014:	4798      	blx	r3
 800e016:	4603      	mov	r3, r0
 800e018:	73bb      	strb	r3, [r7, #14]
      return;
 800e01a:	e08b      	b.n	800e134 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e01c:	23f0      	movs	r3, #240	; 0xf0
 800e01e:	73bb      	strb	r3, [r7, #14]
      return;
 800e020:	e088      	b.n	800e134 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e022:	4b50      	ldr	r3, [pc, #320]	; (800e164 <tcp_listen_input+0x1f0>)
 800e024:	695a      	ldr	r2, [r3, #20]
 800e026:	697b      	ldr	r3, [r7, #20]
 800e028:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e02a:	4b4e      	ldr	r3, [pc, #312]	; (800e164 <tcp_listen_input+0x1f0>)
 800e02c:	691a      	ldr	r2, [r3, #16]
 800e02e:	697b      	ldr	r3, [r7, #20]
 800e030:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	8ada      	ldrh	r2, [r3, #22]
 800e036:	697b      	ldr	r3, [r7, #20]
 800e038:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e03a:	4b47      	ldr	r3, [pc, #284]	; (800e158 <tcp_listen_input+0x1e4>)
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	881b      	ldrh	r3, [r3, #0]
 800e040:	b29a      	uxth	r2, r3
 800e042:	697b      	ldr	r3, [r7, #20]
 800e044:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e046:	697b      	ldr	r3, [r7, #20]
 800e048:	2203      	movs	r2, #3
 800e04a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e04c:	4b41      	ldr	r3, [pc, #260]	; (800e154 <tcp_listen_input+0x1e0>)
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	1c5a      	adds	r2, r3, #1
 800e052:	697b      	ldr	r3, [r7, #20]
 800e054:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e056:	697b      	ldr	r3, [r7, #20]
 800e058:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e05a:	697b      	ldr	r3, [r7, #20]
 800e05c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800e05e:	6978      	ldr	r0, [r7, #20]
 800e060:	f7ff fa5a 	bl	800d518 <tcp_next_iss>
 800e064:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e066:	697b      	ldr	r3, [r7, #20]
 800e068:	693a      	ldr	r2, [r7, #16]
 800e06a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800e06c:	697b      	ldr	r3, [r7, #20]
 800e06e:	693a      	ldr	r2, [r7, #16]
 800e070:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800e072:	697b      	ldr	r3, [r7, #20]
 800e074:	693a      	ldr	r2, [r7, #16]
 800e076:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800e078:	697b      	ldr	r3, [r7, #20]
 800e07a:	693a      	ldr	r2, [r7, #16]
 800e07c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e07e:	4b35      	ldr	r3, [pc, #212]	; (800e154 <tcp_listen_input+0x1e0>)
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	1e5a      	subs	r2, r3, #1
 800e084:	697b      	ldr	r3, [r7, #20]
 800e086:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	691a      	ldr	r2, [r3, #16]
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e090:	697b      	ldr	r3, [r7, #20]
 800e092:	687a      	ldr	r2, [r7, #4]
 800e094:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	7a5b      	ldrb	r3, [r3, #9]
 800e09a:	f003 030c 	and.w	r3, r3, #12
 800e09e:	b2da      	uxtb	r2, r3
 800e0a0:	697b      	ldr	r3, [r7, #20]
 800e0a2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	7a1a      	ldrb	r2, [r3, #8]
 800e0a8:	697b      	ldr	r3, [r7, #20]
 800e0aa:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e0ac:	4b2e      	ldr	r3, [pc, #184]	; (800e168 <tcp_listen_input+0x1f4>)
 800e0ae:	681a      	ldr	r2, [r3, #0]
 800e0b0:	697b      	ldr	r3, [r7, #20]
 800e0b2:	60da      	str	r2, [r3, #12]
 800e0b4:	4a2c      	ldr	r2, [pc, #176]	; (800e168 <tcp_listen_input+0x1f4>)
 800e0b6:	697b      	ldr	r3, [r7, #20]
 800e0b8:	6013      	str	r3, [r2, #0]
 800e0ba:	f003 fd27 	bl	8011b0c <tcp_timer_needed>
 800e0be:	4b2b      	ldr	r3, [pc, #172]	; (800e16c <tcp_listen_input+0x1f8>)
 800e0c0:	2201      	movs	r2, #1
 800e0c2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e0c4:	6978      	ldr	r0, [r7, #20]
 800e0c6:	f001 fd8d 	bl	800fbe4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e0ca:	4b23      	ldr	r3, [pc, #140]	; (800e158 <tcp_listen_input+0x1e4>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	89db      	ldrh	r3, [r3, #14]
 800e0d0:	b29a      	uxth	r2, r3
 800e0d2:	697b      	ldr	r3, [r7, #20]
 800e0d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e0d8:	697b      	ldr	r3, [r7, #20]
 800e0da:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e0de:	697b      	ldr	r3, [r7, #20]
 800e0e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e0e4:	697b      	ldr	r3, [r7, #20]
 800e0e6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e0e8:	697b      	ldr	r3, [r7, #20]
 800e0ea:	3304      	adds	r3, #4
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	f007 fabf 	bl	8015670 <ip4_route>
 800e0f2:	4601      	mov	r1, r0
 800e0f4:	697b      	ldr	r3, [r7, #20]
 800e0f6:	3304      	adds	r3, #4
 800e0f8:	461a      	mov	r2, r3
 800e0fa:	4620      	mov	r0, r4
 800e0fc:	f7ff fa32 	bl	800d564 <tcp_eff_send_mss_netif>
 800e100:	4603      	mov	r3, r0
 800e102:	461a      	mov	r2, r3
 800e104:	697b      	ldr	r3, [r7, #20]
 800e106:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e108:	2112      	movs	r1, #18
 800e10a:	6978      	ldr	r0, [r7, #20]
 800e10c:	f002 fc9a 	bl	8010a44 <tcp_enqueue_flags>
 800e110:	4603      	mov	r3, r0
 800e112:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e114:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d004      	beq.n	800e126 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e11c:	2100      	movs	r1, #0
 800e11e:	6978      	ldr	r0, [r7, #20]
 800e120:	f7fd ff0a 	bl	800bf38 <tcp_abandon>
      return;
 800e124:	e006      	b.n	800e134 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e126:	6978      	ldr	r0, [r7, #20]
 800e128:	f002 fd7a 	bl	8010c20 <tcp_output>
  return;
 800e12c:	e001      	b.n	800e132 <tcp_listen_input+0x1be>
    return;
 800e12e:	bf00      	nop
 800e130:	e000      	b.n	800e134 <tcp_listen_input+0x1c0>
  return;
 800e132:	bf00      	nop
}
 800e134:	371c      	adds	r7, #28
 800e136:	46bd      	mov	sp, r7
 800e138:	bd90      	pop	{r4, r7, pc}
 800e13a:	bf00      	nop
 800e13c:	20008578 	.word	0x20008578
 800e140:	0801a39c 	.word	0x0801a39c
 800e144:	0801a594 	.word	0x0801a594
 800e148:	0801a3e8 	.word	0x0801a3e8
 800e14c:	20008570 	.word	0x20008570
 800e150:	20008576 	.word	0x20008576
 800e154:	2000856c 	.word	0x2000856c
 800e158:	2000855c 	.word	0x2000855c
 800e15c:	2000b8b8 	.word	0x2000b8b8
 800e160:	2000b8bc 	.word	0x2000b8bc
 800e164:	2000b8a8 	.word	0x2000b8a8
 800e168:	2000efdc 	.word	0x2000efdc
 800e16c:	2000efd8 	.word	0x2000efd8

0800e170 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b086      	sub	sp, #24
 800e174:	af04      	add	r7, sp, #16
 800e176:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e178:	4b2f      	ldr	r3, [pc, #188]	; (800e238 <tcp_timewait_input+0xc8>)
 800e17a:	781b      	ldrb	r3, [r3, #0]
 800e17c:	f003 0304 	and.w	r3, r3, #4
 800e180:	2b00      	cmp	r3, #0
 800e182:	d153      	bne.n	800e22c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d106      	bne.n	800e198 <tcp_timewait_input+0x28>
 800e18a:	4b2c      	ldr	r3, [pc, #176]	; (800e23c <tcp_timewait_input+0xcc>)
 800e18c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e190:	492b      	ldr	r1, [pc, #172]	; (800e240 <tcp_timewait_input+0xd0>)
 800e192:	482c      	ldr	r0, [pc, #176]	; (800e244 <tcp_timewait_input+0xd4>)
 800e194:	f009 f808 	bl	80171a8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e198:	4b27      	ldr	r3, [pc, #156]	; (800e238 <tcp_timewait_input+0xc8>)
 800e19a:	781b      	ldrb	r3, [r3, #0]
 800e19c:	f003 0302 	and.w	r3, r3, #2
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d02a      	beq.n	800e1fa <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e1a4:	4b28      	ldr	r3, [pc, #160]	; (800e248 <tcp_timewait_input+0xd8>)
 800e1a6:	681a      	ldr	r2, [r3, #0]
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1ac:	1ad3      	subs	r3, r2, r3
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	db2d      	blt.n	800e20e <tcp_timewait_input+0x9e>
 800e1b2:	4b25      	ldr	r3, [pc, #148]	; (800e248 <tcp_timewait_input+0xd8>)
 800e1b4:	681a      	ldr	r2, [r3, #0]
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1ba:	6879      	ldr	r1, [r7, #4]
 800e1bc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e1be:	440b      	add	r3, r1
 800e1c0:	1ad3      	subs	r3, r2, r3
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	dc23      	bgt.n	800e20e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e1c6:	4b21      	ldr	r3, [pc, #132]	; (800e24c <tcp_timewait_input+0xdc>)
 800e1c8:	6819      	ldr	r1, [r3, #0]
 800e1ca:	4b21      	ldr	r3, [pc, #132]	; (800e250 <tcp_timewait_input+0xe0>)
 800e1cc:	881b      	ldrh	r3, [r3, #0]
 800e1ce:	461a      	mov	r2, r3
 800e1d0:	4b1d      	ldr	r3, [pc, #116]	; (800e248 <tcp_timewait_input+0xd8>)
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e1d6:	4b1f      	ldr	r3, [pc, #124]	; (800e254 <tcp_timewait_input+0xe4>)
 800e1d8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e1da:	885b      	ldrh	r3, [r3, #2]
 800e1dc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e1de:	4a1d      	ldr	r2, [pc, #116]	; (800e254 <tcp_timewait_input+0xe4>)
 800e1e0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e1e2:	8812      	ldrh	r2, [r2, #0]
 800e1e4:	b292      	uxth	r2, r2
 800e1e6:	9202      	str	r2, [sp, #8]
 800e1e8:	9301      	str	r3, [sp, #4]
 800e1ea:	4b1b      	ldr	r3, [pc, #108]	; (800e258 <tcp_timewait_input+0xe8>)
 800e1ec:	9300      	str	r3, [sp, #0]
 800e1ee:	4b1b      	ldr	r3, [pc, #108]	; (800e25c <tcp_timewait_input+0xec>)
 800e1f0:	4602      	mov	r2, r0
 800e1f2:	6878      	ldr	r0, [r7, #4]
 800e1f4:	f003 fac8 	bl	8011788 <tcp_rst>
      return;
 800e1f8:	e01b      	b.n	800e232 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e1fa:	4b0f      	ldr	r3, [pc, #60]	; (800e238 <tcp_timewait_input+0xc8>)
 800e1fc:	781b      	ldrb	r3, [r3, #0]
 800e1fe:	f003 0301 	and.w	r3, r3, #1
 800e202:	2b00      	cmp	r3, #0
 800e204:	d003      	beq.n	800e20e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e206:	4b16      	ldr	r3, [pc, #88]	; (800e260 <tcp_timewait_input+0xf0>)
 800e208:	681a      	ldr	r2, [r3, #0]
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e20e:	4b10      	ldr	r3, [pc, #64]	; (800e250 <tcp_timewait_input+0xe0>)
 800e210:	881b      	ldrh	r3, [r3, #0]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d00c      	beq.n	800e230 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	8b5b      	ldrh	r3, [r3, #26]
 800e21a:	f043 0302 	orr.w	r3, r3, #2
 800e21e:	b29a      	uxth	r2, r3
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e224:	6878      	ldr	r0, [r7, #4]
 800e226:	f002 fcfb 	bl	8010c20 <tcp_output>
  }
  return;
 800e22a:	e001      	b.n	800e230 <tcp_timewait_input+0xc0>
    return;
 800e22c:	bf00      	nop
 800e22e:	e000      	b.n	800e232 <tcp_timewait_input+0xc2>
  return;
 800e230:	bf00      	nop
}
 800e232:	3708      	adds	r7, #8
 800e234:	46bd      	mov	sp, r7
 800e236:	bd80      	pop	{r7, pc}
 800e238:	20008578 	.word	0x20008578
 800e23c:	0801a39c 	.word	0x0801a39c
 800e240:	0801a5b4 	.word	0x0801a5b4
 800e244:	0801a3e8 	.word	0x0801a3e8
 800e248:	2000856c 	.word	0x2000856c
 800e24c:	20008570 	.word	0x20008570
 800e250:	20008576 	.word	0x20008576
 800e254:	2000855c 	.word	0x2000855c
 800e258:	2000b8b8 	.word	0x2000b8b8
 800e25c:	2000b8bc 	.word	0x2000b8bc
 800e260:	2000efe0 	.word	0x2000efe0

0800e264 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e264:	b590      	push	{r4, r7, lr}
 800e266:	b08d      	sub	sp, #52	; 0x34
 800e268:	af04      	add	r7, sp, #16
 800e26a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e26c:	2300      	movs	r3, #0
 800e26e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e270:	2300      	movs	r3, #0
 800e272:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d106      	bne.n	800e288 <tcp_process+0x24>
 800e27a:	4ba5      	ldr	r3, [pc, #660]	; (800e510 <tcp_process+0x2ac>)
 800e27c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e280:	49a4      	ldr	r1, [pc, #656]	; (800e514 <tcp_process+0x2b0>)
 800e282:	48a5      	ldr	r0, [pc, #660]	; (800e518 <tcp_process+0x2b4>)
 800e284:	f008 ff90 	bl	80171a8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e288:	4ba4      	ldr	r3, [pc, #656]	; (800e51c <tcp_process+0x2b8>)
 800e28a:	781b      	ldrb	r3, [r3, #0]
 800e28c:	f003 0304 	and.w	r3, r3, #4
 800e290:	2b00      	cmp	r3, #0
 800e292:	d04e      	beq.n	800e332 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	7d1b      	ldrb	r3, [r3, #20]
 800e298:	2b02      	cmp	r3, #2
 800e29a:	d108      	bne.n	800e2ae <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e2a0:	4b9f      	ldr	r3, [pc, #636]	; (800e520 <tcp_process+0x2bc>)
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	429a      	cmp	r2, r3
 800e2a6:	d123      	bne.n	800e2f0 <tcp_process+0x8c>
        acceptable = 1;
 800e2a8:	2301      	movs	r3, #1
 800e2aa:	76fb      	strb	r3, [r7, #27]
 800e2ac:	e020      	b.n	800e2f0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e2b2:	4b9c      	ldr	r3, [pc, #624]	; (800e524 <tcp_process+0x2c0>)
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	429a      	cmp	r2, r3
 800e2b8:	d102      	bne.n	800e2c0 <tcp_process+0x5c>
        acceptable = 1;
 800e2ba:	2301      	movs	r3, #1
 800e2bc:	76fb      	strb	r3, [r7, #27]
 800e2be:	e017      	b.n	800e2f0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e2c0:	4b98      	ldr	r3, [pc, #608]	; (800e524 <tcp_process+0x2c0>)
 800e2c2:	681a      	ldr	r2, [r3, #0]
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2c8:	1ad3      	subs	r3, r2, r3
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	db10      	blt.n	800e2f0 <tcp_process+0x8c>
 800e2ce:	4b95      	ldr	r3, [pc, #596]	; (800e524 <tcp_process+0x2c0>)
 800e2d0:	681a      	ldr	r2, [r3, #0]
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2d6:	6879      	ldr	r1, [r7, #4]
 800e2d8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e2da:	440b      	add	r3, r1
 800e2dc:	1ad3      	subs	r3, r2, r3
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	dc06      	bgt.n	800e2f0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	8b5b      	ldrh	r3, [r3, #26]
 800e2e6:	f043 0302 	orr.w	r3, r3, #2
 800e2ea:	b29a      	uxth	r2, r3
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e2f0:	7efb      	ldrb	r3, [r7, #27]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d01b      	beq.n	800e32e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	7d1b      	ldrb	r3, [r3, #20]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d106      	bne.n	800e30c <tcp_process+0xa8>
 800e2fe:	4b84      	ldr	r3, [pc, #528]	; (800e510 <tcp_process+0x2ac>)
 800e300:	f44f 724e 	mov.w	r2, #824	; 0x338
 800e304:	4988      	ldr	r1, [pc, #544]	; (800e528 <tcp_process+0x2c4>)
 800e306:	4884      	ldr	r0, [pc, #528]	; (800e518 <tcp_process+0x2b4>)
 800e308:	f008 ff4e 	bl	80171a8 <iprintf>
      recv_flags |= TF_RESET;
 800e30c:	4b87      	ldr	r3, [pc, #540]	; (800e52c <tcp_process+0x2c8>)
 800e30e:	781b      	ldrb	r3, [r3, #0]
 800e310:	f043 0308 	orr.w	r3, r3, #8
 800e314:	b2da      	uxtb	r2, r3
 800e316:	4b85      	ldr	r3, [pc, #532]	; (800e52c <tcp_process+0x2c8>)
 800e318:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	8b5b      	ldrh	r3, [r3, #26]
 800e31e:	f023 0301 	bic.w	r3, r3, #1
 800e322:	b29a      	uxth	r2, r3
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e328:	f06f 030d 	mvn.w	r3, #13
 800e32c:	e37a      	b.n	800ea24 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e32e:	2300      	movs	r3, #0
 800e330:	e378      	b.n	800ea24 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e332:	4b7a      	ldr	r3, [pc, #488]	; (800e51c <tcp_process+0x2b8>)
 800e334:	781b      	ldrb	r3, [r3, #0]
 800e336:	f003 0302 	and.w	r3, r3, #2
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d010      	beq.n	800e360 <tcp_process+0xfc>
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	7d1b      	ldrb	r3, [r3, #20]
 800e342:	2b02      	cmp	r3, #2
 800e344:	d00c      	beq.n	800e360 <tcp_process+0xfc>
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	7d1b      	ldrb	r3, [r3, #20]
 800e34a:	2b03      	cmp	r3, #3
 800e34c:	d008      	beq.n	800e360 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	8b5b      	ldrh	r3, [r3, #26]
 800e352:	f043 0302 	orr.w	r3, r3, #2
 800e356:	b29a      	uxth	r2, r3
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e35c:	2300      	movs	r3, #0
 800e35e:	e361      	b.n	800ea24 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	8b5b      	ldrh	r3, [r3, #26]
 800e364:	f003 0310 	and.w	r3, r3, #16
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d103      	bne.n	800e374 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e36c:	4b70      	ldr	r3, [pc, #448]	; (800e530 <tcp_process+0x2cc>)
 800e36e:	681a      	ldr	r2, [r3, #0]
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	2200      	movs	r2, #0
 800e378:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	2200      	movs	r2, #0
 800e380:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800e384:	6878      	ldr	r0, [r7, #4]
 800e386:	f001 fc2d 	bl	800fbe4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	7d1b      	ldrb	r3, [r3, #20]
 800e38e:	3b02      	subs	r3, #2
 800e390:	2b07      	cmp	r3, #7
 800e392:	f200 8337 	bhi.w	800ea04 <tcp_process+0x7a0>
 800e396:	a201      	add	r2, pc, #4	; (adr r2, 800e39c <tcp_process+0x138>)
 800e398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e39c:	0800e3bd 	.word	0x0800e3bd
 800e3a0:	0800e5ed 	.word	0x0800e5ed
 800e3a4:	0800e765 	.word	0x0800e765
 800e3a8:	0800e78f 	.word	0x0800e78f
 800e3ac:	0800e8b3 	.word	0x0800e8b3
 800e3b0:	0800e765 	.word	0x0800e765
 800e3b4:	0800e93f 	.word	0x0800e93f
 800e3b8:	0800e9cf 	.word	0x0800e9cf
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e3bc:	4b57      	ldr	r3, [pc, #348]	; (800e51c <tcp_process+0x2b8>)
 800e3be:	781b      	ldrb	r3, [r3, #0]
 800e3c0:	f003 0310 	and.w	r3, r3, #16
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	f000 80e4 	beq.w	800e592 <tcp_process+0x32e>
 800e3ca:	4b54      	ldr	r3, [pc, #336]	; (800e51c <tcp_process+0x2b8>)
 800e3cc:	781b      	ldrb	r3, [r3, #0]
 800e3ce:	f003 0302 	and.w	r3, r3, #2
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	f000 80dd 	beq.w	800e592 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3dc:	1c5a      	adds	r2, r3, #1
 800e3de:	4b50      	ldr	r3, [pc, #320]	; (800e520 <tcp_process+0x2bc>)
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	429a      	cmp	r2, r3
 800e3e4:	f040 80d5 	bne.w	800e592 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800e3e8:	4b4e      	ldr	r3, [pc, #312]	; (800e524 <tcp_process+0x2c0>)
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	1c5a      	adds	r2, r3, #1
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800e3fa:	4b49      	ldr	r3, [pc, #292]	; (800e520 <tcp_process+0x2bc>)
 800e3fc:	681a      	ldr	r2, [r3, #0]
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800e402:	4b4c      	ldr	r3, [pc, #304]	; (800e534 <tcp_process+0x2d0>)
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	89db      	ldrh	r3, [r3, #14]
 800e408:	b29a      	uxth	r2, r3
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e41c:	4b41      	ldr	r3, [pc, #260]	; (800e524 <tcp_process+0x2c0>)
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	1e5a      	subs	r2, r3, #1
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	2204      	movs	r2, #4
 800e42a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	3304      	adds	r3, #4
 800e434:	4618      	mov	r0, r3
 800e436:	f007 f91b 	bl	8015670 <ip4_route>
 800e43a:	4601      	mov	r1, r0
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	3304      	adds	r3, #4
 800e440:	461a      	mov	r2, r3
 800e442:	4620      	mov	r0, r4
 800e444:	f7ff f88e 	bl	800d564 <tcp_eff_send_mss_netif>
 800e448:	4603      	mov	r3, r0
 800e44a:	461a      	mov	r2, r3
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e454:	009a      	lsls	r2, r3, #2
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e45a:	005b      	lsls	r3, r3, #1
 800e45c:	f241 111c 	movw	r1, #4380	; 0x111c
 800e460:	428b      	cmp	r3, r1
 800e462:	bf38      	it	cc
 800e464:	460b      	movcc	r3, r1
 800e466:	429a      	cmp	r2, r3
 800e468:	d204      	bcs.n	800e474 <tcp_process+0x210>
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e46e:	009b      	lsls	r3, r3, #2
 800e470:	b29b      	uxth	r3, r3
 800e472:	e00d      	b.n	800e490 <tcp_process+0x22c>
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e478:	005b      	lsls	r3, r3, #1
 800e47a:	f241 121c 	movw	r2, #4380	; 0x111c
 800e47e:	4293      	cmp	r3, r2
 800e480:	d904      	bls.n	800e48c <tcp_process+0x228>
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e486:	005b      	lsls	r3, r3, #1
 800e488:	b29b      	uxth	r3, r3
 800e48a:	e001      	b.n	800e490 <tcp_process+0x22c>
 800e48c:	f241 131c 	movw	r3, #4380	; 0x111c
 800e490:	687a      	ldr	r2, [r7, #4]
 800e492:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d106      	bne.n	800e4ae <tcp_process+0x24a>
 800e4a0:	4b1b      	ldr	r3, [pc, #108]	; (800e510 <tcp_process+0x2ac>)
 800e4a2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800e4a6:	4924      	ldr	r1, [pc, #144]	; (800e538 <tcp_process+0x2d4>)
 800e4a8:	481b      	ldr	r0, [pc, #108]	; (800e518 <tcp_process+0x2b4>)
 800e4aa:	f008 fe7d 	bl	80171a8 <iprintf>
        --pcb->snd_queuelen;
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e4b4:	3b01      	subs	r3, #1
 800e4b6:	b29a      	uxth	r2, r3
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4c2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800e4c4:	69fb      	ldr	r3, [r7, #28]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d111      	bne.n	800e4ee <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4ce:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e4d0:	69fb      	ldr	r3, [r7, #28]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d106      	bne.n	800e4e4 <tcp_process+0x280>
 800e4d6:	4b0e      	ldr	r3, [pc, #56]	; (800e510 <tcp_process+0x2ac>)
 800e4d8:	f44f 725d 	mov.w	r2, #884	; 0x374
 800e4dc:	4917      	ldr	r1, [pc, #92]	; (800e53c <tcp_process+0x2d8>)
 800e4de:	480e      	ldr	r0, [pc, #56]	; (800e518 <tcp_process+0x2b4>)
 800e4e0:	f008 fe62 	bl	80171a8 <iprintf>
          pcb->unsent = rseg->next;
 800e4e4:	69fb      	ldr	r3, [r7, #28]
 800e4e6:	681a      	ldr	r2, [r3, #0]
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	66da      	str	r2, [r3, #108]	; 0x6c
 800e4ec:	e003      	b.n	800e4f6 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800e4ee:	69fb      	ldr	r3, [r7, #28]
 800e4f0:	681a      	ldr	r2, [r3, #0]
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800e4f6:	69f8      	ldr	r0, [r7, #28]
 800e4f8:	f7fe fc6f 	bl	800cdda <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e500:	2b00      	cmp	r3, #0
 800e502:	d11d      	bne.n	800e540 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e50a:	861a      	strh	r2, [r3, #48]	; 0x30
 800e50c:	e01f      	b.n	800e54e <tcp_process+0x2ea>
 800e50e:	bf00      	nop
 800e510:	0801a39c 	.word	0x0801a39c
 800e514:	0801a5d4 	.word	0x0801a5d4
 800e518:	0801a3e8 	.word	0x0801a3e8
 800e51c:	20008578 	.word	0x20008578
 800e520:	20008570 	.word	0x20008570
 800e524:	2000856c 	.word	0x2000856c
 800e528:	0801a5f0 	.word	0x0801a5f0
 800e52c:	20008579 	.word	0x20008579
 800e530:	2000efe0 	.word	0x2000efe0
 800e534:	2000855c 	.word	0x2000855c
 800e538:	0801a610 	.word	0x0801a610
 800e53c:	0801a628 	.word	0x0801a628
        } else {
          pcb->rtime = 0;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	2200      	movs	r2, #0
 800e544:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	2200      	movs	r2, #0
 800e54a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e554:	2b00      	cmp	r3, #0
 800e556:	d00a      	beq.n	800e56e <tcp_process+0x30a>
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e55e:	687a      	ldr	r2, [r7, #4]
 800e560:	6910      	ldr	r0, [r2, #16]
 800e562:	2200      	movs	r2, #0
 800e564:	6879      	ldr	r1, [r7, #4]
 800e566:	4798      	blx	r3
 800e568:	4603      	mov	r3, r0
 800e56a:	76bb      	strb	r3, [r7, #26]
 800e56c:	e001      	b.n	800e572 <tcp_process+0x30e>
 800e56e:	2300      	movs	r3, #0
 800e570:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800e572:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e576:	f113 0f0d 	cmn.w	r3, #13
 800e57a:	d102      	bne.n	800e582 <tcp_process+0x31e>
          return ERR_ABRT;
 800e57c:	f06f 030c 	mvn.w	r3, #12
 800e580:	e250      	b.n	800ea24 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	8b5b      	ldrh	r3, [r3, #26]
 800e586:	f043 0302 	orr.w	r3, r3, #2
 800e58a:	b29a      	uxth	r2, r3
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800e590:	e23a      	b.n	800ea08 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800e592:	4b9d      	ldr	r3, [pc, #628]	; (800e808 <tcp_process+0x5a4>)
 800e594:	781b      	ldrb	r3, [r3, #0]
 800e596:	f003 0310 	and.w	r3, r3, #16
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	f000 8234 	beq.w	800ea08 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e5a0:	4b9a      	ldr	r3, [pc, #616]	; (800e80c <tcp_process+0x5a8>)
 800e5a2:	6819      	ldr	r1, [r3, #0]
 800e5a4:	4b9a      	ldr	r3, [pc, #616]	; (800e810 <tcp_process+0x5ac>)
 800e5a6:	881b      	ldrh	r3, [r3, #0]
 800e5a8:	461a      	mov	r2, r3
 800e5aa:	4b9a      	ldr	r3, [pc, #616]	; (800e814 <tcp_process+0x5b0>)
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e5b0:	4b99      	ldr	r3, [pc, #612]	; (800e818 <tcp_process+0x5b4>)
 800e5b2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e5b4:	885b      	ldrh	r3, [r3, #2]
 800e5b6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e5b8:	4a97      	ldr	r2, [pc, #604]	; (800e818 <tcp_process+0x5b4>)
 800e5ba:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e5bc:	8812      	ldrh	r2, [r2, #0]
 800e5be:	b292      	uxth	r2, r2
 800e5c0:	9202      	str	r2, [sp, #8]
 800e5c2:	9301      	str	r3, [sp, #4]
 800e5c4:	4b95      	ldr	r3, [pc, #596]	; (800e81c <tcp_process+0x5b8>)
 800e5c6:	9300      	str	r3, [sp, #0]
 800e5c8:	4b95      	ldr	r3, [pc, #596]	; (800e820 <tcp_process+0x5bc>)
 800e5ca:	4602      	mov	r2, r0
 800e5cc:	6878      	ldr	r0, [r7, #4]
 800e5ce:	f003 f8db 	bl	8011788 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e5d8:	2b05      	cmp	r3, #5
 800e5da:	f200 8215 	bhi.w	800ea08 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800e5e4:	6878      	ldr	r0, [r7, #4]
 800e5e6:	f002 fea5 	bl	8011334 <tcp_rexmit_rto>
      break;
 800e5ea:	e20d      	b.n	800ea08 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800e5ec:	4b86      	ldr	r3, [pc, #536]	; (800e808 <tcp_process+0x5a4>)
 800e5ee:	781b      	ldrb	r3, [r3, #0]
 800e5f0:	f003 0310 	and.w	r3, r3, #16
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	f000 80a1 	beq.w	800e73c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e5fa:	4b84      	ldr	r3, [pc, #528]	; (800e80c <tcp_process+0x5a8>)
 800e5fc:	681a      	ldr	r2, [r3, #0]
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e602:	1ad3      	subs	r3, r2, r3
 800e604:	3b01      	subs	r3, #1
 800e606:	2b00      	cmp	r3, #0
 800e608:	db7e      	blt.n	800e708 <tcp_process+0x4a4>
 800e60a:	4b80      	ldr	r3, [pc, #512]	; (800e80c <tcp_process+0x5a8>)
 800e60c:	681a      	ldr	r2, [r3, #0]
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e612:	1ad3      	subs	r3, r2, r3
 800e614:	2b00      	cmp	r3, #0
 800e616:	dc77      	bgt.n	800e708 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	2204      	movs	r2, #4
 800e61c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e622:	2b00      	cmp	r3, #0
 800e624:	d102      	bne.n	800e62c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800e626:	23fa      	movs	r3, #250	; 0xfa
 800e628:	76bb      	strb	r3, [r7, #26]
 800e62a:	e01d      	b.n	800e668 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e630:	699b      	ldr	r3, [r3, #24]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d106      	bne.n	800e644 <tcp_process+0x3e0>
 800e636:	4b7b      	ldr	r3, [pc, #492]	; (800e824 <tcp_process+0x5c0>)
 800e638:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800e63c:	497a      	ldr	r1, [pc, #488]	; (800e828 <tcp_process+0x5c4>)
 800e63e:	487b      	ldr	r0, [pc, #492]	; (800e82c <tcp_process+0x5c8>)
 800e640:	f008 fdb2 	bl	80171a8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e648:	699b      	ldr	r3, [r3, #24]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d00a      	beq.n	800e664 <tcp_process+0x400>
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e652:	699b      	ldr	r3, [r3, #24]
 800e654:	687a      	ldr	r2, [r7, #4]
 800e656:	6910      	ldr	r0, [r2, #16]
 800e658:	2200      	movs	r2, #0
 800e65a:	6879      	ldr	r1, [r7, #4]
 800e65c:	4798      	blx	r3
 800e65e:	4603      	mov	r3, r0
 800e660:	76bb      	strb	r3, [r7, #26]
 800e662:	e001      	b.n	800e668 <tcp_process+0x404>
 800e664:	23f0      	movs	r3, #240	; 0xf0
 800e666:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800e668:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d00a      	beq.n	800e686 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800e670:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e674:	f113 0f0d 	cmn.w	r3, #13
 800e678:	d002      	beq.n	800e680 <tcp_process+0x41c>
              tcp_abort(pcb);
 800e67a:	6878      	ldr	r0, [r7, #4]
 800e67c:	f7fd fd1a 	bl	800c0b4 <tcp_abort>
            }
            return ERR_ABRT;
 800e680:	f06f 030c 	mvn.w	r3, #12
 800e684:	e1ce      	b.n	800ea24 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800e686:	6878      	ldr	r0, [r7, #4]
 800e688:	f000 fae0 	bl	800ec4c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800e68c:	4b68      	ldr	r3, [pc, #416]	; (800e830 <tcp_process+0x5cc>)
 800e68e:	881b      	ldrh	r3, [r3, #0]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d005      	beq.n	800e6a0 <tcp_process+0x43c>
            recv_acked--;
 800e694:	4b66      	ldr	r3, [pc, #408]	; (800e830 <tcp_process+0x5cc>)
 800e696:	881b      	ldrh	r3, [r3, #0]
 800e698:	3b01      	subs	r3, #1
 800e69a:	b29a      	uxth	r2, r3
 800e69c:	4b64      	ldr	r3, [pc, #400]	; (800e830 <tcp_process+0x5cc>)
 800e69e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e6a4:	009a      	lsls	r2, r3, #2
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e6aa:	005b      	lsls	r3, r3, #1
 800e6ac:	f241 111c 	movw	r1, #4380	; 0x111c
 800e6b0:	428b      	cmp	r3, r1
 800e6b2:	bf38      	it	cc
 800e6b4:	460b      	movcc	r3, r1
 800e6b6:	429a      	cmp	r2, r3
 800e6b8:	d204      	bcs.n	800e6c4 <tcp_process+0x460>
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e6be:	009b      	lsls	r3, r3, #2
 800e6c0:	b29b      	uxth	r3, r3
 800e6c2:	e00d      	b.n	800e6e0 <tcp_process+0x47c>
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e6c8:	005b      	lsls	r3, r3, #1
 800e6ca:	f241 121c 	movw	r2, #4380	; 0x111c
 800e6ce:	4293      	cmp	r3, r2
 800e6d0:	d904      	bls.n	800e6dc <tcp_process+0x478>
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e6d6:	005b      	lsls	r3, r3, #1
 800e6d8:	b29b      	uxth	r3, r3
 800e6da:	e001      	b.n	800e6e0 <tcp_process+0x47c>
 800e6dc:	f241 131c 	movw	r3, #4380	; 0x111c
 800e6e0:	687a      	ldr	r2, [r7, #4]
 800e6e2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800e6e6:	4b53      	ldr	r3, [pc, #332]	; (800e834 <tcp_process+0x5d0>)
 800e6e8:	781b      	ldrb	r3, [r3, #0]
 800e6ea:	f003 0320 	and.w	r3, r3, #32
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d037      	beq.n	800e762 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	8b5b      	ldrh	r3, [r3, #26]
 800e6f6:	f043 0302 	orr.w	r3, r3, #2
 800e6fa:	b29a      	uxth	r2, r3
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	2207      	movs	r2, #7
 800e704:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800e706:	e02c      	b.n	800e762 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e708:	4b40      	ldr	r3, [pc, #256]	; (800e80c <tcp_process+0x5a8>)
 800e70a:	6819      	ldr	r1, [r3, #0]
 800e70c:	4b40      	ldr	r3, [pc, #256]	; (800e810 <tcp_process+0x5ac>)
 800e70e:	881b      	ldrh	r3, [r3, #0]
 800e710:	461a      	mov	r2, r3
 800e712:	4b40      	ldr	r3, [pc, #256]	; (800e814 <tcp_process+0x5b0>)
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e718:	4b3f      	ldr	r3, [pc, #252]	; (800e818 <tcp_process+0x5b4>)
 800e71a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e71c:	885b      	ldrh	r3, [r3, #2]
 800e71e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e720:	4a3d      	ldr	r2, [pc, #244]	; (800e818 <tcp_process+0x5b4>)
 800e722:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e724:	8812      	ldrh	r2, [r2, #0]
 800e726:	b292      	uxth	r2, r2
 800e728:	9202      	str	r2, [sp, #8]
 800e72a:	9301      	str	r3, [sp, #4]
 800e72c:	4b3b      	ldr	r3, [pc, #236]	; (800e81c <tcp_process+0x5b8>)
 800e72e:	9300      	str	r3, [sp, #0]
 800e730:	4b3b      	ldr	r3, [pc, #236]	; (800e820 <tcp_process+0x5bc>)
 800e732:	4602      	mov	r2, r0
 800e734:	6878      	ldr	r0, [r7, #4]
 800e736:	f003 f827 	bl	8011788 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800e73a:	e167      	b.n	800ea0c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800e73c:	4b32      	ldr	r3, [pc, #200]	; (800e808 <tcp_process+0x5a4>)
 800e73e:	781b      	ldrb	r3, [r3, #0]
 800e740:	f003 0302 	and.w	r3, r3, #2
 800e744:	2b00      	cmp	r3, #0
 800e746:	f000 8161 	beq.w	800ea0c <tcp_process+0x7a8>
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e74e:	1e5a      	subs	r2, r3, #1
 800e750:	4b30      	ldr	r3, [pc, #192]	; (800e814 <tcp_process+0x5b0>)
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	429a      	cmp	r2, r3
 800e756:	f040 8159 	bne.w	800ea0c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800e75a:	6878      	ldr	r0, [r7, #4]
 800e75c:	f002 fe0c 	bl	8011378 <tcp_rexmit>
      break;
 800e760:	e154      	b.n	800ea0c <tcp_process+0x7a8>
 800e762:	e153      	b.n	800ea0c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800e764:	6878      	ldr	r0, [r7, #4]
 800e766:	f000 fa71 	bl	800ec4c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800e76a:	4b32      	ldr	r3, [pc, #200]	; (800e834 <tcp_process+0x5d0>)
 800e76c:	781b      	ldrb	r3, [r3, #0]
 800e76e:	f003 0320 	and.w	r3, r3, #32
 800e772:	2b00      	cmp	r3, #0
 800e774:	f000 814c 	beq.w	800ea10 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	8b5b      	ldrh	r3, [r3, #26]
 800e77c:	f043 0302 	orr.w	r3, r3, #2
 800e780:	b29a      	uxth	r2, r3
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	2207      	movs	r2, #7
 800e78a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e78c:	e140      	b.n	800ea10 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800e78e:	6878      	ldr	r0, [r7, #4]
 800e790:	f000 fa5c 	bl	800ec4c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e794:	4b27      	ldr	r3, [pc, #156]	; (800e834 <tcp_process+0x5d0>)
 800e796:	781b      	ldrb	r3, [r3, #0]
 800e798:	f003 0320 	and.w	r3, r3, #32
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d071      	beq.n	800e884 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e7a0:	4b19      	ldr	r3, [pc, #100]	; (800e808 <tcp_process+0x5a4>)
 800e7a2:	781b      	ldrb	r3, [r3, #0]
 800e7a4:	f003 0310 	and.w	r3, r3, #16
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d060      	beq.n	800e86e <tcp_process+0x60a>
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e7b0:	4b16      	ldr	r3, [pc, #88]	; (800e80c <tcp_process+0x5a8>)
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	429a      	cmp	r2, r3
 800e7b6:	d15a      	bne.n	800e86e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d156      	bne.n	800e86e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	8b5b      	ldrh	r3, [r3, #26]
 800e7c4:	f043 0302 	orr.w	r3, r3, #2
 800e7c8:	b29a      	uxth	r2, r3
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800e7ce:	6878      	ldr	r0, [r7, #4]
 800e7d0:	f7fe fdbe 	bl	800d350 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800e7d4:	4b18      	ldr	r3, [pc, #96]	; (800e838 <tcp_process+0x5d4>)
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	687a      	ldr	r2, [r7, #4]
 800e7da:	429a      	cmp	r2, r3
 800e7dc:	d105      	bne.n	800e7ea <tcp_process+0x586>
 800e7de:	4b16      	ldr	r3, [pc, #88]	; (800e838 <tcp_process+0x5d4>)
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	68db      	ldr	r3, [r3, #12]
 800e7e4:	4a14      	ldr	r2, [pc, #80]	; (800e838 <tcp_process+0x5d4>)
 800e7e6:	6013      	str	r3, [r2, #0]
 800e7e8:	e02e      	b.n	800e848 <tcp_process+0x5e4>
 800e7ea:	4b13      	ldr	r3, [pc, #76]	; (800e838 <tcp_process+0x5d4>)
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	617b      	str	r3, [r7, #20]
 800e7f0:	e027      	b.n	800e842 <tcp_process+0x5de>
 800e7f2:	697b      	ldr	r3, [r7, #20]
 800e7f4:	68db      	ldr	r3, [r3, #12]
 800e7f6:	687a      	ldr	r2, [r7, #4]
 800e7f8:	429a      	cmp	r2, r3
 800e7fa:	d11f      	bne.n	800e83c <tcp_process+0x5d8>
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	68da      	ldr	r2, [r3, #12]
 800e800:	697b      	ldr	r3, [r7, #20]
 800e802:	60da      	str	r2, [r3, #12]
 800e804:	e020      	b.n	800e848 <tcp_process+0x5e4>
 800e806:	bf00      	nop
 800e808:	20008578 	.word	0x20008578
 800e80c:	20008570 	.word	0x20008570
 800e810:	20008576 	.word	0x20008576
 800e814:	2000856c 	.word	0x2000856c
 800e818:	2000855c 	.word	0x2000855c
 800e81c:	2000b8b8 	.word	0x2000b8b8
 800e820:	2000b8bc 	.word	0x2000b8bc
 800e824:	0801a39c 	.word	0x0801a39c
 800e828:	0801a63c 	.word	0x0801a63c
 800e82c:	0801a3e8 	.word	0x0801a3e8
 800e830:	20008574 	.word	0x20008574
 800e834:	20008579 	.word	0x20008579
 800e838:	2000efdc 	.word	0x2000efdc
 800e83c:	697b      	ldr	r3, [r7, #20]
 800e83e:	68db      	ldr	r3, [r3, #12]
 800e840:	617b      	str	r3, [r7, #20]
 800e842:	697b      	ldr	r3, [r7, #20]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d1d4      	bne.n	800e7f2 <tcp_process+0x58e>
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	2200      	movs	r2, #0
 800e84c:	60da      	str	r2, [r3, #12]
 800e84e:	4b77      	ldr	r3, [pc, #476]	; (800ea2c <tcp_process+0x7c8>)
 800e850:	2201      	movs	r2, #1
 800e852:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	220a      	movs	r2, #10
 800e858:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800e85a:	4b75      	ldr	r3, [pc, #468]	; (800ea30 <tcp_process+0x7cc>)
 800e85c:	681a      	ldr	r2, [r3, #0]
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	60da      	str	r2, [r3, #12]
 800e862:	4a73      	ldr	r2, [pc, #460]	; (800ea30 <tcp_process+0x7cc>)
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	6013      	str	r3, [r2, #0]
 800e868:	f003 f950 	bl	8011b0c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800e86c:	e0d2      	b.n	800ea14 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	8b5b      	ldrh	r3, [r3, #26]
 800e872:	f043 0302 	orr.w	r3, r3, #2
 800e876:	b29a      	uxth	r2, r3
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	2208      	movs	r2, #8
 800e880:	751a      	strb	r2, [r3, #20]
      break;
 800e882:	e0c7      	b.n	800ea14 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e884:	4b6b      	ldr	r3, [pc, #428]	; (800ea34 <tcp_process+0x7d0>)
 800e886:	781b      	ldrb	r3, [r3, #0]
 800e888:	f003 0310 	and.w	r3, r3, #16
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	f000 80c1 	beq.w	800ea14 <tcp_process+0x7b0>
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e896:	4b68      	ldr	r3, [pc, #416]	; (800ea38 <tcp_process+0x7d4>)
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	429a      	cmp	r2, r3
 800e89c:	f040 80ba 	bne.w	800ea14 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	f040 80b5 	bne.w	800ea14 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	2206      	movs	r2, #6
 800e8ae:	751a      	strb	r2, [r3, #20]
      break;
 800e8b0:	e0b0      	b.n	800ea14 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800e8b2:	6878      	ldr	r0, [r7, #4]
 800e8b4:	f000 f9ca 	bl	800ec4c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e8b8:	4b60      	ldr	r3, [pc, #384]	; (800ea3c <tcp_process+0x7d8>)
 800e8ba:	781b      	ldrb	r3, [r3, #0]
 800e8bc:	f003 0320 	and.w	r3, r3, #32
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	f000 80a9 	beq.w	800ea18 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	8b5b      	ldrh	r3, [r3, #26]
 800e8ca:	f043 0302 	orr.w	r3, r3, #2
 800e8ce:	b29a      	uxth	r2, r3
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800e8d4:	6878      	ldr	r0, [r7, #4]
 800e8d6:	f7fe fd3b 	bl	800d350 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e8da:	4b59      	ldr	r3, [pc, #356]	; (800ea40 <tcp_process+0x7dc>)
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	687a      	ldr	r2, [r7, #4]
 800e8e0:	429a      	cmp	r2, r3
 800e8e2:	d105      	bne.n	800e8f0 <tcp_process+0x68c>
 800e8e4:	4b56      	ldr	r3, [pc, #344]	; (800ea40 <tcp_process+0x7dc>)
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	68db      	ldr	r3, [r3, #12]
 800e8ea:	4a55      	ldr	r2, [pc, #340]	; (800ea40 <tcp_process+0x7dc>)
 800e8ec:	6013      	str	r3, [r2, #0]
 800e8ee:	e013      	b.n	800e918 <tcp_process+0x6b4>
 800e8f0:	4b53      	ldr	r3, [pc, #332]	; (800ea40 <tcp_process+0x7dc>)
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	613b      	str	r3, [r7, #16]
 800e8f6:	e00c      	b.n	800e912 <tcp_process+0x6ae>
 800e8f8:	693b      	ldr	r3, [r7, #16]
 800e8fa:	68db      	ldr	r3, [r3, #12]
 800e8fc:	687a      	ldr	r2, [r7, #4]
 800e8fe:	429a      	cmp	r2, r3
 800e900:	d104      	bne.n	800e90c <tcp_process+0x6a8>
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	68da      	ldr	r2, [r3, #12]
 800e906:	693b      	ldr	r3, [r7, #16]
 800e908:	60da      	str	r2, [r3, #12]
 800e90a:	e005      	b.n	800e918 <tcp_process+0x6b4>
 800e90c:	693b      	ldr	r3, [r7, #16]
 800e90e:	68db      	ldr	r3, [r3, #12]
 800e910:	613b      	str	r3, [r7, #16]
 800e912:	693b      	ldr	r3, [r7, #16]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d1ef      	bne.n	800e8f8 <tcp_process+0x694>
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	2200      	movs	r2, #0
 800e91c:	60da      	str	r2, [r3, #12]
 800e91e:	4b43      	ldr	r3, [pc, #268]	; (800ea2c <tcp_process+0x7c8>)
 800e920:	2201      	movs	r2, #1
 800e922:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	220a      	movs	r2, #10
 800e928:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e92a:	4b41      	ldr	r3, [pc, #260]	; (800ea30 <tcp_process+0x7cc>)
 800e92c:	681a      	ldr	r2, [r3, #0]
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	60da      	str	r2, [r3, #12]
 800e932:	4a3f      	ldr	r2, [pc, #252]	; (800ea30 <tcp_process+0x7cc>)
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	6013      	str	r3, [r2, #0]
 800e938:	f003 f8e8 	bl	8011b0c <tcp_timer_needed>
      }
      break;
 800e93c:	e06c      	b.n	800ea18 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800e93e:	6878      	ldr	r0, [r7, #4]
 800e940:	f000 f984 	bl	800ec4c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e944:	4b3b      	ldr	r3, [pc, #236]	; (800ea34 <tcp_process+0x7d0>)
 800e946:	781b      	ldrb	r3, [r3, #0]
 800e948:	f003 0310 	and.w	r3, r3, #16
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d065      	beq.n	800ea1c <tcp_process+0x7b8>
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e954:	4b38      	ldr	r3, [pc, #224]	; (800ea38 <tcp_process+0x7d4>)
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	429a      	cmp	r2, r3
 800e95a:	d15f      	bne.n	800ea1c <tcp_process+0x7b8>
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e960:	2b00      	cmp	r3, #0
 800e962:	d15b      	bne.n	800ea1c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800e964:	6878      	ldr	r0, [r7, #4]
 800e966:	f7fe fcf3 	bl	800d350 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e96a:	4b35      	ldr	r3, [pc, #212]	; (800ea40 <tcp_process+0x7dc>)
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	687a      	ldr	r2, [r7, #4]
 800e970:	429a      	cmp	r2, r3
 800e972:	d105      	bne.n	800e980 <tcp_process+0x71c>
 800e974:	4b32      	ldr	r3, [pc, #200]	; (800ea40 <tcp_process+0x7dc>)
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	68db      	ldr	r3, [r3, #12]
 800e97a:	4a31      	ldr	r2, [pc, #196]	; (800ea40 <tcp_process+0x7dc>)
 800e97c:	6013      	str	r3, [r2, #0]
 800e97e:	e013      	b.n	800e9a8 <tcp_process+0x744>
 800e980:	4b2f      	ldr	r3, [pc, #188]	; (800ea40 <tcp_process+0x7dc>)
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	60fb      	str	r3, [r7, #12]
 800e986:	e00c      	b.n	800e9a2 <tcp_process+0x73e>
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	68db      	ldr	r3, [r3, #12]
 800e98c:	687a      	ldr	r2, [r7, #4]
 800e98e:	429a      	cmp	r2, r3
 800e990:	d104      	bne.n	800e99c <tcp_process+0x738>
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	68da      	ldr	r2, [r3, #12]
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	60da      	str	r2, [r3, #12]
 800e99a:	e005      	b.n	800e9a8 <tcp_process+0x744>
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	68db      	ldr	r3, [r3, #12]
 800e9a0:	60fb      	str	r3, [r7, #12]
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d1ef      	bne.n	800e988 <tcp_process+0x724>
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	60da      	str	r2, [r3, #12]
 800e9ae:	4b1f      	ldr	r3, [pc, #124]	; (800ea2c <tcp_process+0x7c8>)
 800e9b0:	2201      	movs	r2, #1
 800e9b2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	220a      	movs	r2, #10
 800e9b8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e9ba:	4b1d      	ldr	r3, [pc, #116]	; (800ea30 <tcp_process+0x7cc>)
 800e9bc:	681a      	ldr	r2, [r3, #0]
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	60da      	str	r2, [r3, #12]
 800e9c2:	4a1b      	ldr	r2, [pc, #108]	; (800ea30 <tcp_process+0x7cc>)
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	6013      	str	r3, [r2, #0]
 800e9c8:	f003 f8a0 	bl	8011b0c <tcp_timer_needed>
      }
      break;
 800e9cc:	e026      	b.n	800ea1c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800e9ce:	6878      	ldr	r0, [r7, #4]
 800e9d0:	f000 f93c 	bl	800ec4c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e9d4:	4b17      	ldr	r3, [pc, #92]	; (800ea34 <tcp_process+0x7d0>)
 800e9d6:	781b      	ldrb	r3, [r3, #0]
 800e9d8:	f003 0310 	and.w	r3, r3, #16
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d01f      	beq.n	800ea20 <tcp_process+0x7bc>
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e9e4:	4b14      	ldr	r3, [pc, #80]	; (800ea38 <tcp_process+0x7d4>)
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	429a      	cmp	r2, r3
 800e9ea:	d119      	bne.n	800ea20 <tcp_process+0x7bc>
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d115      	bne.n	800ea20 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800e9f4:	4b11      	ldr	r3, [pc, #68]	; (800ea3c <tcp_process+0x7d8>)
 800e9f6:	781b      	ldrb	r3, [r3, #0]
 800e9f8:	f043 0310 	orr.w	r3, r3, #16
 800e9fc:	b2da      	uxtb	r2, r3
 800e9fe:	4b0f      	ldr	r3, [pc, #60]	; (800ea3c <tcp_process+0x7d8>)
 800ea00:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ea02:	e00d      	b.n	800ea20 <tcp_process+0x7bc>
    default:
      break;
 800ea04:	bf00      	nop
 800ea06:	e00c      	b.n	800ea22 <tcp_process+0x7be>
      break;
 800ea08:	bf00      	nop
 800ea0a:	e00a      	b.n	800ea22 <tcp_process+0x7be>
      break;
 800ea0c:	bf00      	nop
 800ea0e:	e008      	b.n	800ea22 <tcp_process+0x7be>
      break;
 800ea10:	bf00      	nop
 800ea12:	e006      	b.n	800ea22 <tcp_process+0x7be>
      break;
 800ea14:	bf00      	nop
 800ea16:	e004      	b.n	800ea22 <tcp_process+0x7be>
      break;
 800ea18:	bf00      	nop
 800ea1a:	e002      	b.n	800ea22 <tcp_process+0x7be>
      break;
 800ea1c:	bf00      	nop
 800ea1e:	e000      	b.n	800ea22 <tcp_process+0x7be>
      break;
 800ea20:	bf00      	nop
  }
  return ERR_OK;
 800ea22:	2300      	movs	r3, #0
}
 800ea24:	4618      	mov	r0, r3
 800ea26:	3724      	adds	r7, #36	; 0x24
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	bd90      	pop	{r4, r7, pc}
 800ea2c:	2000efd8 	.word	0x2000efd8
 800ea30:	2000efec 	.word	0x2000efec
 800ea34:	20008578 	.word	0x20008578
 800ea38:	20008570 	.word	0x20008570
 800ea3c:	20008579 	.word	0x20008579
 800ea40:	2000efdc 	.word	0x2000efdc

0800ea44 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ea44:	b590      	push	{r4, r7, lr}
 800ea46:	b085      	sub	sp, #20
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
 800ea4c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d106      	bne.n	800ea62 <tcp_oos_insert_segment+0x1e>
 800ea54:	4b3b      	ldr	r3, [pc, #236]	; (800eb44 <tcp_oos_insert_segment+0x100>)
 800ea56:	f240 421f 	movw	r2, #1055	; 0x41f
 800ea5a:	493b      	ldr	r1, [pc, #236]	; (800eb48 <tcp_oos_insert_segment+0x104>)
 800ea5c:	483b      	ldr	r0, [pc, #236]	; (800eb4c <tcp_oos_insert_segment+0x108>)
 800ea5e:	f008 fba3 	bl	80171a8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	68db      	ldr	r3, [r3, #12]
 800ea66:	899b      	ldrh	r3, [r3, #12]
 800ea68:	b29b      	uxth	r3, r3
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	f7fb f96a 	bl	8009d44 <lwip_htons>
 800ea70:	4603      	mov	r3, r0
 800ea72:	b2db      	uxtb	r3, r3
 800ea74:	f003 0301 	and.w	r3, r3, #1
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d028      	beq.n	800eace <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800ea7c:	6838      	ldr	r0, [r7, #0]
 800ea7e:	f7fe f997 	bl	800cdb0 <tcp_segs_free>
    next = NULL;
 800ea82:	2300      	movs	r3, #0
 800ea84:	603b      	str	r3, [r7, #0]
 800ea86:	e056      	b.n	800eb36 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ea88:	683b      	ldr	r3, [r7, #0]
 800ea8a:	68db      	ldr	r3, [r3, #12]
 800ea8c:	899b      	ldrh	r3, [r3, #12]
 800ea8e:	b29b      	uxth	r3, r3
 800ea90:	4618      	mov	r0, r3
 800ea92:	f7fb f957 	bl	8009d44 <lwip_htons>
 800ea96:	4603      	mov	r3, r0
 800ea98:	b2db      	uxtb	r3, r3
 800ea9a:	f003 0301 	and.w	r3, r3, #1
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d00d      	beq.n	800eabe <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	68db      	ldr	r3, [r3, #12]
 800eaa6:	899b      	ldrh	r3, [r3, #12]
 800eaa8:	b29c      	uxth	r4, r3
 800eaaa:	2001      	movs	r0, #1
 800eaac:	f7fb f94a 	bl	8009d44 <lwip_htons>
 800eab0:	4603      	mov	r3, r0
 800eab2:	461a      	mov	r2, r3
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	68db      	ldr	r3, [r3, #12]
 800eab8:	4322      	orrs	r2, r4
 800eaba:	b292      	uxth	r2, r2
 800eabc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800eabe:	683b      	ldr	r3, [r7, #0]
 800eac0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800eac8:	68f8      	ldr	r0, [r7, #12]
 800eaca:	f7fe f986 	bl	800cdda <tcp_seg_free>
    while (next &&
 800eace:	683b      	ldr	r3, [r7, #0]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d00e      	beq.n	800eaf2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	891b      	ldrh	r3, [r3, #8]
 800ead8:	461a      	mov	r2, r3
 800eada:	4b1d      	ldr	r3, [pc, #116]	; (800eb50 <tcp_oos_insert_segment+0x10c>)
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	441a      	add	r2, r3
 800eae0:	683b      	ldr	r3, [r7, #0]
 800eae2:	68db      	ldr	r3, [r3, #12]
 800eae4:	685b      	ldr	r3, [r3, #4]
 800eae6:	6839      	ldr	r1, [r7, #0]
 800eae8:	8909      	ldrh	r1, [r1, #8]
 800eaea:	440b      	add	r3, r1
 800eaec:	1ad3      	subs	r3, r2, r3
    while (next &&
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	daca      	bge.n	800ea88 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800eaf2:	683b      	ldr	r3, [r7, #0]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d01e      	beq.n	800eb36 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	891b      	ldrh	r3, [r3, #8]
 800eafc:	461a      	mov	r2, r3
 800eafe:	4b14      	ldr	r3, [pc, #80]	; (800eb50 <tcp_oos_insert_segment+0x10c>)
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	441a      	add	r2, r3
 800eb04:	683b      	ldr	r3, [r7, #0]
 800eb06:	68db      	ldr	r3, [r3, #12]
 800eb08:	685b      	ldr	r3, [r3, #4]
 800eb0a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	dd12      	ble.n	800eb36 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	68db      	ldr	r3, [r3, #12]
 800eb14:	685b      	ldr	r3, [r3, #4]
 800eb16:	b29a      	uxth	r2, r3
 800eb18:	4b0d      	ldr	r3, [pc, #52]	; (800eb50 <tcp_oos_insert_segment+0x10c>)
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	b29b      	uxth	r3, r3
 800eb1e:	1ad3      	subs	r3, r2, r3
 800eb20:	b29a      	uxth	r2, r3
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	685a      	ldr	r2, [r3, #4]
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	891b      	ldrh	r3, [r3, #8]
 800eb2e:	4619      	mov	r1, r3
 800eb30:	4610      	mov	r0, r2
 800eb32:	f7fc fb39 	bl	800b1a8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	683a      	ldr	r2, [r7, #0]
 800eb3a:	601a      	str	r2, [r3, #0]
}
 800eb3c:	bf00      	nop
 800eb3e:	3714      	adds	r7, #20
 800eb40:	46bd      	mov	sp, r7
 800eb42:	bd90      	pop	{r4, r7, pc}
 800eb44:	0801a39c 	.word	0x0801a39c
 800eb48:	0801a65c 	.word	0x0801a65c
 800eb4c:	0801a3e8 	.word	0x0801a3e8
 800eb50:	2000856c 	.word	0x2000856c

0800eb54 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800eb54:	b5b0      	push	{r4, r5, r7, lr}
 800eb56:	b086      	sub	sp, #24
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	60f8      	str	r0, [r7, #12]
 800eb5c:	60b9      	str	r1, [r7, #8]
 800eb5e:	607a      	str	r2, [r7, #4]
 800eb60:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800eb62:	e03e      	b.n	800ebe2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800eb64:	68bb      	ldr	r3, [r7, #8]
 800eb66:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800eb68:	68bb      	ldr	r3, [r7, #8]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800eb6e:	697b      	ldr	r3, [r7, #20]
 800eb70:	685b      	ldr	r3, [r3, #4]
 800eb72:	4618      	mov	r0, r3
 800eb74:	f7fc fd2c 	bl	800b5d0 <pbuf_clen>
 800eb78:	4603      	mov	r3, r0
 800eb7a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eb82:	8a7a      	ldrh	r2, [r7, #18]
 800eb84:	429a      	cmp	r2, r3
 800eb86:	d906      	bls.n	800eb96 <tcp_free_acked_segments+0x42>
 800eb88:	4b2a      	ldr	r3, [pc, #168]	; (800ec34 <tcp_free_acked_segments+0xe0>)
 800eb8a:	f240 4257 	movw	r2, #1111	; 0x457
 800eb8e:	492a      	ldr	r1, [pc, #168]	; (800ec38 <tcp_free_acked_segments+0xe4>)
 800eb90:	482a      	ldr	r0, [pc, #168]	; (800ec3c <tcp_free_acked_segments+0xe8>)
 800eb92:	f008 fb09 	bl	80171a8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800eb9c:	8a7b      	ldrh	r3, [r7, #18]
 800eb9e:	1ad3      	subs	r3, r2, r3
 800eba0:	b29a      	uxth	r2, r3
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800eba8:	697b      	ldr	r3, [r7, #20]
 800ebaa:	891a      	ldrh	r2, [r3, #8]
 800ebac:	4b24      	ldr	r3, [pc, #144]	; (800ec40 <tcp_free_acked_segments+0xec>)
 800ebae:	881b      	ldrh	r3, [r3, #0]
 800ebb0:	4413      	add	r3, r2
 800ebb2:	b29a      	uxth	r2, r3
 800ebb4:	4b22      	ldr	r3, [pc, #136]	; (800ec40 <tcp_free_acked_segments+0xec>)
 800ebb6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800ebb8:	6978      	ldr	r0, [r7, #20]
 800ebba:	f7fe f90e 	bl	800cdda <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d00c      	beq.n	800ebe2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800ebc8:	68bb      	ldr	r3, [r7, #8]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d109      	bne.n	800ebe2 <tcp_free_acked_segments+0x8e>
 800ebce:	683b      	ldr	r3, [r7, #0]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d106      	bne.n	800ebe2 <tcp_free_acked_segments+0x8e>
 800ebd4:	4b17      	ldr	r3, [pc, #92]	; (800ec34 <tcp_free_acked_segments+0xe0>)
 800ebd6:	f240 4261 	movw	r2, #1121	; 0x461
 800ebda:	491a      	ldr	r1, [pc, #104]	; (800ec44 <tcp_free_acked_segments+0xf0>)
 800ebdc:	4817      	ldr	r0, [pc, #92]	; (800ec3c <tcp_free_acked_segments+0xe8>)
 800ebde:	f008 fae3 	bl	80171a8 <iprintf>
  while (seg_list != NULL &&
 800ebe2:	68bb      	ldr	r3, [r7, #8]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d020      	beq.n	800ec2a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ebe8:	68bb      	ldr	r3, [r7, #8]
 800ebea:	68db      	ldr	r3, [r3, #12]
 800ebec:	685b      	ldr	r3, [r3, #4]
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f7fb f8bd 	bl	8009d6e <lwip_htonl>
 800ebf4:	4604      	mov	r4, r0
 800ebf6:	68bb      	ldr	r3, [r7, #8]
 800ebf8:	891b      	ldrh	r3, [r3, #8]
 800ebfa:	461d      	mov	r5, r3
 800ebfc:	68bb      	ldr	r3, [r7, #8]
 800ebfe:	68db      	ldr	r3, [r3, #12]
 800ec00:	899b      	ldrh	r3, [r3, #12]
 800ec02:	b29b      	uxth	r3, r3
 800ec04:	4618      	mov	r0, r3
 800ec06:	f7fb f89d 	bl	8009d44 <lwip_htons>
 800ec0a:	4603      	mov	r3, r0
 800ec0c:	b2db      	uxtb	r3, r3
 800ec0e:	f003 0303 	and.w	r3, r3, #3
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d001      	beq.n	800ec1a <tcp_free_acked_segments+0xc6>
 800ec16:	2301      	movs	r3, #1
 800ec18:	e000      	b.n	800ec1c <tcp_free_acked_segments+0xc8>
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	442b      	add	r3, r5
 800ec1e:	18e2      	adds	r2, r4, r3
 800ec20:	4b09      	ldr	r3, [pc, #36]	; (800ec48 <tcp_free_acked_segments+0xf4>)
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	dd9c      	ble.n	800eb64 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800ec2a:	68bb      	ldr	r3, [r7, #8]
}
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	3718      	adds	r7, #24
 800ec30:	46bd      	mov	sp, r7
 800ec32:	bdb0      	pop	{r4, r5, r7, pc}
 800ec34:	0801a39c 	.word	0x0801a39c
 800ec38:	0801a684 	.word	0x0801a684
 800ec3c:	0801a3e8 	.word	0x0801a3e8
 800ec40:	20008574 	.word	0x20008574
 800ec44:	0801a6ac 	.word	0x0801a6ac
 800ec48:	20008570 	.word	0x20008570

0800ec4c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ec4c:	b5b0      	push	{r4, r5, r7, lr}
 800ec4e:	b094      	sub	sp, #80	; 0x50
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ec54:	2300      	movs	r3, #0
 800ec56:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d106      	bne.n	800ec6c <tcp_receive+0x20>
 800ec5e:	4ba6      	ldr	r3, [pc, #664]	; (800eef8 <tcp_receive+0x2ac>)
 800ec60:	f240 427b 	movw	r2, #1147	; 0x47b
 800ec64:	49a5      	ldr	r1, [pc, #660]	; (800eefc <tcp_receive+0x2b0>)
 800ec66:	48a6      	ldr	r0, [pc, #664]	; (800ef00 <tcp_receive+0x2b4>)
 800ec68:	f008 fa9e 	bl	80171a8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	7d1b      	ldrb	r3, [r3, #20]
 800ec70:	2b03      	cmp	r3, #3
 800ec72:	d806      	bhi.n	800ec82 <tcp_receive+0x36>
 800ec74:	4ba0      	ldr	r3, [pc, #640]	; (800eef8 <tcp_receive+0x2ac>)
 800ec76:	f240 427c 	movw	r2, #1148	; 0x47c
 800ec7a:	49a2      	ldr	r1, [pc, #648]	; (800ef04 <tcp_receive+0x2b8>)
 800ec7c:	48a0      	ldr	r0, [pc, #640]	; (800ef00 <tcp_receive+0x2b4>)
 800ec7e:	f008 fa93 	bl	80171a8 <iprintf>

  if (flags & TCP_ACK) {
 800ec82:	4ba1      	ldr	r3, [pc, #644]	; (800ef08 <tcp_receive+0x2bc>)
 800ec84:	781b      	ldrb	r3, [r3, #0]
 800ec86:	f003 0310 	and.w	r3, r3, #16
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	f000 8263 	beq.w	800f156 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ec96:	461a      	mov	r2, r3
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec9c:	4413      	add	r3, r2
 800ec9e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eca4:	4b99      	ldr	r3, [pc, #612]	; (800ef0c <tcp_receive+0x2c0>)
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	1ad3      	subs	r3, r2, r3
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	db1b      	blt.n	800ece6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ecb2:	4b96      	ldr	r3, [pc, #600]	; (800ef0c <tcp_receive+0x2c0>)
 800ecb4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ecb6:	429a      	cmp	r2, r3
 800ecb8:	d106      	bne.n	800ecc8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ecbe:	4b94      	ldr	r3, [pc, #592]	; (800ef10 <tcp_receive+0x2c4>)
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	1ad3      	subs	r3, r2, r3
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	db0e      	blt.n	800ece6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800eccc:	4b90      	ldr	r3, [pc, #576]	; (800ef10 <tcp_receive+0x2c4>)
 800ecce:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ecd0:	429a      	cmp	r2, r3
 800ecd2:	d125      	bne.n	800ed20 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ecd4:	4b8f      	ldr	r3, [pc, #572]	; (800ef14 <tcp_receive+0x2c8>)
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	89db      	ldrh	r3, [r3, #14]
 800ecda:	b29a      	uxth	r2, r3
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ece2:	429a      	cmp	r2, r3
 800ece4:	d91c      	bls.n	800ed20 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800ece6:	4b8b      	ldr	r3, [pc, #556]	; (800ef14 <tcp_receive+0x2c8>)
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	89db      	ldrh	r3, [r3, #14]
 800ecec:	b29a      	uxth	r2, r3
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ed00:	429a      	cmp	r2, r3
 800ed02:	d205      	bcs.n	800ed10 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800ed10:	4b7e      	ldr	r3, [pc, #504]	; (800ef0c <tcp_receive+0x2c0>)
 800ed12:	681a      	ldr	r2, [r3, #0]
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800ed18:	4b7d      	ldr	r3, [pc, #500]	; (800ef10 <tcp_receive+0x2c4>)
 800ed1a:	681a      	ldr	r2, [r3, #0]
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800ed20:	4b7b      	ldr	r3, [pc, #492]	; (800ef10 <tcp_receive+0x2c4>)
 800ed22:	681a      	ldr	r2, [r3, #0]
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed28:	1ad3      	subs	r3, r2, r3
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	dc58      	bgt.n	800ede0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800ed2e:	4b7a      	ldr	r3, [pc, #488]	; (800ef18 <tcp_receive+0x2cc>)
 800ed30:	881b      	ldrh	r3, [r3, #0]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d14b      	bne.n	800edce <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed3a:	687a      	ldr	r2, [r7, #4]
 800ed3c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800ed40:	4413      	add	r3, r2
 800ed42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed44:	429a      	cmp	r2, r3
 800ed46:	d142      	bne.n	800edce <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	db3d      	blt.n	800edce <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ed56:	4b6e      	ldr	r3, [pc, #440]	; (800ef10 <tcp_receive+0x2c4>)
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	429a      	cmp	r2, r3
 800ed5c:	d137      	bne.n	800edce <tcp_receive+0x182>
              found_dupack = 1;
 800ed5e:	2301      	movs	r3, #1
 800ed60:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ed68:	2bff      	cmp	r3, #255	; 0xff
 800ed6a:	d007      	beq.n	800ed7c <tcp_receive+0x130>
                ++pcb->dupacks;
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ed72:	3301      	adds	r3, #1
 800ed74:	b2da      	uxtb	r2, r3
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ed82:	2b03      	cmp	r3, #3
 800ed84:	d91b      	bls.n	800edbe <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed90:	4413      	add	r3, r2
 800ed92:	b29a      	uxth	r2, r3
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ed9a:	429a      	cmp	r2, r3
 800ed9c:	d30a      	bcc.n	800edb4 <tcp_receive+0x168>
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eda8:	4413      	add	r3, r2
 800edaa:	b29a      	uxth	r2, r3
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800edb2:	e004      	b.n	800edbe <tcp_receive+0x172>
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800edba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800edc4:	2b02      	cmp	r3, #2
 800edc6:	d902      	bls.n	800edce <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800edc8:	6878      	ldr	r0, [r7, #4]
 800edca:	f002 fb41 	bl	8011450 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800edce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	f040 8160 	bne.w	800f096 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	2200      	movs	r2, #0
 800edda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800edde:	e15a      	b.n	800f096 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ede0:	4b4b      	ldr	r3, [pc, #300]	; (800ef10 <tcp_receive+0x2c4>)
 800ede2:	681a      	ldr	r2, [r3, #0]
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ede8:	1ad3      	subs	r3, r2, r3
 800edea:	3b01      	subs	r3, #1
 800edec:	2b00      	cmp	r3, #0
 800edee:	f2c0 814d 	blt.w	800f08c <tcp_receive+0x440>
 800edf2:	4b47      	ldr	r3, [pc, #284]	; (800ef10 <tcp_receive+0x2c4>)
 800edf4:	681a      	ldr	r2, [r3, #0]
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800edfa:	1ad3      	subs	r3, r2, r3
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	f300 8145 	bgt.w	800f08c <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	8b5b      	ldrh	r3, [r3, #26]
 800ee06:	f003 0304 	and.w	r3, r3, #4
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d010      	beq.n	800ee30 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	8b5b      	ldrh	r3, [r3, #26]
 800ee12:	f023 0304 	bic.w	r3, r3, #4
 800ee16:	b29a      	uxth	r2, r3
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	2200      	movs	r2, #0
 800ee34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ee3e:	10db      	asrs	r3, r3, #3
 800ee40:	b21b      	sxth	r3, r3
 800ee42:	b29a      	uxth	r2, r3
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ee4a:	b29b      	uxth	r3, r3
 800ee4c:	4413      	add	r3, r2
 800ee4e:	b29b      	uxth	r3, r3
 800ee50:	b21a      	sxth	r2, r3
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800ee58:	4b2d      	ldr	r3, [pc, #180]	; (800ef10 <tcp_receive+0x2c4>)
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	b29a      	uxth	r2, r3
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee62:	b29b      	uxth	r3, r3
 800ee64:	1ad3      	subs	r3, r2, r3
 800ee66:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800ee70:	4b27      	ldr	r3, [pc, #156]	; (800ef10 <tcp_receive+0x2c4>)
 800ee72:	681a      	ldr	r2, [r3, #0]
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	7d1b      	ldrb	r3, [r3, #20]
 800ee7c:	2b03      	cmp	r3, #3
 800ee7e:	f240 8096 	bls.w	800efae <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ee8e:	429a      	cmp	r2, r3
 800ee90:	d244      	bcs.n	800ef1c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	8b5b      	ldrh	r3, [r3, #26]
 800ee96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d001      	beq.n	800eea2 <tcp_receive+0x256>
 800ee9e:	2301      	movs	r3, #1
 800eea0:	e000      	b.n	800eea4 <tcp_receive+0x258>
 800eea2:	2302      	movs	r3, #2
 800eea4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800eea8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800eeac:	b29a      	uxth	r2, r3
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eeb2:	fb12 f303 	smulbb	r3, r2, r3
 800eeb6:	b29b      	uxth	r3, r3
 800eeb8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800eeba:	4293      	cmp	r3, r2
 800eebc:	bf28      	it	cs
 800eebe:	4613      	movcs	r3, r2
 800eec0:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800eec8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800eeca:	4413      	add	r3, r2
 800eecc:	b29a      	uxth	r2, r3
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800eed4:	429a      	cmp	r2, r3
 800eed6:	d309      	bcc.n	800eeec <tcp_receive+0x2a0>
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800eede:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800eee0:	4413      	add	r3, r2
 800eee2:	b29a      	uxth	r2, r3
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800eeea:	e060      	b.n	800efae <tcp_receive+0x362>
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eef2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800eef6:	e05a      	b.n	800efae <tcp_receive+0x362>
 800eef8:	0801a39c 	.word	0x0801a39c
 800eefc:	0801a6cc 	.word	0x0801a6cc
 800ef00:	0801a3e8 	.word	0x0801a3e8
 800ef04:	0801a6e8 	.word	0x0801a6e8
 800ef08:	20008578 	.word	0x20008578
 800ef0c:	2000856c 	.word	0x2000856c
 800ef10:	20008570 	.word	0x20008570
 800ef14:	2000855c 	.word	0x2000855c
 800ef18:	20008576 	.word	0x20008576
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ef22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ef24:	4413      	add	r3, r2
 800ef26:	b29a      	uxth	r2, r3
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ef2e:	429a      	cmp	r2, r3
 800ef30:	d309      	bcc.n	800ef46 <tcp_receive+0x2fa>
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ef38:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ef3a:	4413      	add	r3, r2
 800ef3c:	b29a      	uxth	r2, r3
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ef44:	e004      	b.n	800ef50 <tcp_receive+0x304>
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ef5c:	429a      	cmp	r2, r3
 800ef5e:	d326      	bcc.n	800efae <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ef6c:	1ad3      	subs	r3, r2, r3
 800ef6e:	b29a      	uxth	r2, r3
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ef80:	4413      	add	r3, r2
 800ef82:	b29a      	uxth	r2, r3
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ef8a:	429a      	cmp	r2, r3
 800ef8c:	d30a      	bcc.n	800efa4 <tcp_receive+0x358>
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ef98:	4413      	add	r3, r2
 800ef9a:	b29a      	uxth	r2, r3
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800efa2:	e004      	b.n	800efae <tcp_receive+0x362>
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800efaa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efb6:	4a98      	ldr	r2, [pc, #608]	; (800f218 <tcp_receive+0x5cc>)
 800efb8:	6878      	ldr	r0, [r7, #4]
 800efba:	f7ff fdcb 	bl	800eb54 <tcp_free_acked_segments>
 800efbe:	4602      	mov	r2, r0
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800efcc:	4a93      	ldr	r2, [pc, #588]	; (800f21c <tcp_receive+0x5d0>)
 800efce:	6878      	ldr	r0, [r7, #4]
 800efd0:	f7ff fdc0 	bl	800eb54 <tcp_free_acked_segments>
 800efd4:	4602      	mov	r2, r0
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d104      	bne.n	800efec <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800efe8:	861a      	strh	r2, [r3, #48]	; 0x30
 800efea:	e002      	b.n	800eff2 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	2200      	movs	r2, #0
 800eff0:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	2200      	movs	r2, #0
 800eff6:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800effc:	2b00      	cmp	r3, #0
 800effe:	d103      	bne.n	800f008 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	2200      	movs	r2, #0
 800f004:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800f00e:	4b84      	ldr	r3, [pc, #528]	; (800f220 <tcp_receive+0x5d4>)
 800f010:	881b      	ldrh	r3, [r3, #0]
 800f012:	4413      	add	r3, r2
 800f014:	b29a      	uxth	r2, r3
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	8b5b      	ldrh	r3, [r3, #26]
 800f020:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f024:	2b00      	cmp	r3, #0
 800f026:	d035      	beq.n	800f094 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d118      	bne.n	800f062 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f034:	2b00      	cmp	r3, #0
 800f036:	d00c      	beq.n	800f052 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f040:	68db      	ldr	r3, [r3, #12]
 800f042:	685b      	ldr	r3, [r3, #4]
 800f044:	4618      	mov	r0, r3
 800f046:	f7fa fe92 	bl	8009d6e <lwip_htonl>
 800f04a:	4603      	mov	r3, r0
 800f04c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f04e:	2b00      	cmp	r3, #0
 800f050:	dc20      	bgt.n	800f094 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	8b5b      	ldrh	r3, [r3, #26]
 800f056:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f05a:	b29a      	uxth	r2, r3
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f060:	e018      	b.n	800f094 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f06a:	68db      	ldr	r3, [r3, #12]
 800f06c:	685b      	ldr	r3, [r3, #4]
 800f06e:	4618      	mov	r0, r3
 800f070:	f7fa fe7d 	bl	8009d6e <lwip_htonl>
 800f074:	4603      	mov	r3, r0
 800f076:	1ae3      	subs	r3, r4, r3
 800f078:	2b00      	cmp	r3, #0
 800f07a:	dc0b      	bgt.n	800f094 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	8b5b      	ldrh	r3, [r3, #26]
 800f080:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f084:	b29a      	uxth	r2, r3
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f08a:	e003      	b.n	800f094 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f08c:	6878      	ldr	r0, [r7, #4]
 800f08e:	f002 fbcd 	bl	801182c <tcp_send_empty_ack>
 800f092:	e000      	b.n	800f096 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f094:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d05b      	beq.n	800f156 <tcp_receive+0x50a>
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f0a2:	4b60      	ldr	r3, [pc, #384]	; (800f224 <tcp_receive+0x5d8>)
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	1ad3      	subs	r3, r2, r3
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	da54      	bge.n	800f156 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f0ac:	4b5e      	ldr	r3, [pc, #376]	; (800f228 <tcp_receive+0x5dc>)
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	b29a      	uxth	r2, r3
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0b6:	b29b      	uxth	r3, r3
 800f0b8:	1ad3      	subs	r3, r2, r3
 800f0ba:	b29b      	uxth	r3, r3
 800f0bc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f0c0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f0ca:	10db      	asrs	r3, r3, #3
 800f0cc:	b21b      	sxth	r3, r3
 800f0ce:	b29b      	uxth	r3, r3
 800f0d0:	1ad3      	subs	r3, r2, r3
 800f0d2:	b29b      	uxth	r3, r3
 800f0d4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f0de:	b29a      	uxth	r2, r3
 800f0e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f0e4:	4413      	add	r3, r2
 800f0e6:	b29b      	uxth	r3, r3
 800f0e8:	b21a      	sxth	r2, r3
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800f0ee:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	da05      	bge.n	800f102 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800f0f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f0fa:	425b      	negs	r3, r3
 800f0fc:	b29b      	uxth	r3, r3
 800f0fe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f102:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f10c:	109b      	asrs	r3, r3, #2
 800f10e:	b21b      	sxth	r3, r3
 800f110:	b29b      	uxth	r3, r3
 800f112:	1ad3      	subs	r3, r2, r3
 800f114:	b29b      	uxth	r3, r3
 800f116:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f120:	b29a      	uxth	r2, r3
 800f122:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f126:	4413      	add	r3, r2
 800f128:	b29b      	uxth	r3, r3
 800f12a:	b21a      	sxth	r2, r3
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f136:	10db      	asrs	r3, r3, #3
 800f138:	b21b      	sxth	r3, r3
 800f13a:	b29a      	uxth	r2, r3
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f142:	b29b      	uxth	r3, r3
 800f144:	4413      	add	r3, r2
 800f146:	b29b      	uxth	r3, r3
 800f148:	b21a      	sxth	r2, r3
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	2200      	movs	r2, #0
 800f154:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f156:	4b35      	ldr	r3, [pc, #212]	; (800f22c <tcp_receive+0x5e0>)
 800f158:	881b      	ldrh	r3, [r3, #0]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	f000 84e1 	beq.w	800fb22 <tcp_receive+0xed6>
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	7d1b      	ldrb	r3, [r3, #20]
 800f164:	2b06      	cmp	r3, #6
 800f166:	f200 84dc 	bhi.w	800fb22 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f16e:	4b30      	ldr	r3, [pc, #192]	; (800f230 <tcp_receive+0x5e4>)
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	1ad3      	subs	r3, r2, r3
 800f174:	3b01      	subs	r3, #1
 800f176:	2b00      	cmp	r3, #0
 800f178:	f2c0 808e 	blt.w	800f298 <tcp_receive+0x64c>
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f180:	4b2a      	ldr	r3, [pc, #168]	; (800f22c <tcp_receive+0x5e0>)
 800f182:	881b      	ldrh	r3, [r3, #0]
 800f184:	4619      	mov	r1, r3
 800f186:	4b2a      	ldr	r3, [pc, #168]	; (800f230 <tcp_receive+0x5e4>)
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	440b      	add	r3, r1
 800f18c:	1ad3      	subs	r3, r2, r3
 800f18e:	3301      	adds	r3, #1
 800f190:	2b00      	cmp	r3, #0
 800f192:	f300 8081 	bgt.w	800f298 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f196:	4b27      	ldr	r3, [pc, #156]	; (800f234 <tcp_receive+0x5e8>)
 800f198:	685b      	ldr	r3, [r3, #4]
 800f19a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f1a0:	4b23      	ldr	r3, [pc, #140]	; (800f230 <tcp_receive+0x5e4>)
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	1ad3      	subs	r3, r2, r3
 800f1a6:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f1a8:	4b22      	ldr	r3, [pc, #136]	; (800f234 <tcp_receive+0x5e8>)
 800f1aa:	685b      	ldr	r3, [r3, #4]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d106      	bne.n	800f1be <tcp_receive+0x572>
 800f1b0:	4b21      	ldr	r3, [pc, #132]	; (800f238 <tcp_receive+0x5ec>)
 800f1b2:	f240 5294 	movw	r2, #1428	; 0x594
 800f1b6:	4921      	ldr	r1, [pc, #132]	; (800f23c <tcp_receive+0x5f0>)
 800f1b8:	4821      	ldr	r0, [pc, #132]	; (800f240 <tcp_receive+0x5f4>)
 800f1ba:	f007 fff5 	bl	80171a8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1c0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f1c4:	4293      	cmp	r3, r2
 800f1c6:	d906      	bls.n	800f1d6 <tcp_receive+0x58a>
 800f1c8:	4b1b      	ldr	r3, [pc, #108]	; (800f238 <tcp_receive+0x5ec>)
 800f1ca:	f240 5295 	movw	r2, #1429	; 0x595
 800f1ce:	491d      	ldr	r1, [pc, #116]	; (800f244 <tcp_receive+0x5f8>)
 800f1d0:	481b      	ldr	r0, [pc, #108]	; (800f240 <tcp_receive+0x5f4>)
 800f1d2:	f007 ffe9 	bl	80171a8 <iprintf>
      off = (u16_t)off32;
 800f1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1d8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f1dc:	4b15      	ldr	r3, [pc, #84]	; (800f234 <tcp_receive+0x5e8>)
 800f1de:	685b      	ldr	r3, [r3, #4]
 800f1e0:	891b      	ldrh	r3, [r3, #8]
 800f1e2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f1e6:	429a      	cmp	r2, r3
 800f1e8:	d906      	bls.n	800f1f8 <tcp_receive+0x5ac>
 800f1ea:	4b13      	ldr	r3, [pc, #76]	; (800f238 <tcp_receive+0x5ec>)
 800f1ec:	f240 5297 	movw	r2, #1431	; 0x597
 800f1f0:	4915      	ldr	r1, [pc, #84]	; (800f248 <tcp_receive+0x5fc>)
 800f1f2:	4813      	ldr	r0, [pc, #76]	; (800f240 <tcp_receive+0x5f4>)
 800f1f4:	f007 ffd8 	bl	80171a8 <iprintf>
      inseg.len -= off;
 800f1f8:	4b0e      	ldr	r3, [pc, #56]	; (800f234 <tcp_receive+0x5e8>)
 800f1fa:	891a      	ldrh	r2, [r3, #8]
 800f1fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f200:	1ad3      	subs	r3, r2, r3
 800f202:	b29a      	uxth	r2, r3
 800f204:	4b0b      	ldr	r3, [pc, #44]	; (800f234 <tcp_receive+0x5e8>)
 800f206:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f208:	4b0a      	ldr	r3, [pc, #40]	; (800f234 <tcp_receive+0x5e8>)
 800f20a:	685b      	ldr	r3, [r3, #4]
 800f20c:	891a      	ldrh	r2, [r3, #8]
 800f20e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f212:	1ad3      	subs	r3, r2, r3
 800f214:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800f216:	e029      	b.n	800f26c <tcp_receive+0x620>
 800f218:	0801a704 	.word	0x0801a704
 800f21c:	0801a70c 	.word	0x0801a70c
 800f220:	20008574 	.word	0x20008574
 800f224:	20008570 	.word	0x20008570
 800f228:	2000efe0 	.word	0x2000efe0
 800f22c:	20008576 	.word	0x20008576
 800f230:	2000856c 	.word	0x2000856c
 800f234:	2000854c 	.word	0x2000854c
 800f238:	0801a39c 	.word	0x0801a39c
 800f23c:	0801a714 	.word	0x0801a714
 800f240:	0801a3e8 	.word	0x0801a3e8
 800f244:	0801a724 	.word	0x0801a724
 800f248:	0801a734 	.word	0x0801a734
        off -= p->len;
 800f24c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f24e:	895b      	ldrh	r3, [r3, #10]
 800f250:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f254:	1ad3      	subs	r3, r2, r3
 800f256:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f25a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f25c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f25e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f262:	2200      	movs	r2, #0
 800f264:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f266:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800f26c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f26e:	895b      	ldrh	r3, [r3, #10]
 800f270:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f274:	429a      	cmp	r2, r3
 800f276:	d8e9      	bhi.n	800f24c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f278:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f27c:	4619      	mov	r1, r3
 800f27e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f280:	f7fc f892 	bl	800b3a8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f288:	4a91      	ldr	r2, [pc, #580]	; (800f4d0 <tcp_receive+0x884>)
 800f28a:	6013      	str	r3, [r2, #0]
 800f28c:	4b91      	ldr	r3, [pc, #580]	; (800f4d4 <tcp_receive+0x888>)
 800f28e:	68db      	ldr	r3, [r3, #12]
 800f290:	4a8f      	ldr	r2, [pc, #572]	; (800f4d0 <tcp_receive+0x884>)
 800f292:	6812      	ldr	r2, [r2, #0]
 800f294:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f296:	e00d      	b.n	800f2b4 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f298:	4b8d      	ldr	r3, [pc, #564]	; (800f4d0 <tcp_receive+0x884>)
 800f29a:	681a      	ldr	r2, [r3, #0]
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2a0:	1ad3      	subs	r3, r2, r3
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	da06      	bge.n	800f2b4 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	8b5b      	ldrh	r3, [r3, #26]
 800f2aa:	f043 0302 	orr.w	r3, r3, #2
 800f2ae:	b29a      	uxth	r2, r3
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f2b4:	4b86      	ldr	r3, [pc, #536]	; (800f4d0 <tcp_receive+0x884>)
 800f2b6:	681a      	ldr	r2, [r3, #0]
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2bc:	1ad3      	subs	r3, r2, r3
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	f2c0 842a 	blt.w	800fb18 <tcp_receive+0xecc>
 800f2c4:	4b82      	ldr	r3, [pc, #520]	; (800f4d0 <tcp_receive+0x884>)
 800f2c6:	681a      	ldr	r2, [r3, #0]
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2cc:	6879      	ldr	r1, [r7, #4]
 800f2ce:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f2d0:	440b      	add	r3, r1
 800f2d2:	1ad3      	subs	r3, r2, r3
 800f2d4:	3301      	adds	r3, #1
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	f300 841e 	bgt.w	800fb18 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f2e0:	4b7b      	ldr	r3, [pc, #492]	; (800f4d0 <tcp_receive+0x884>)
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	429a      	cmp	r2, r3
 800f2e6:	f040 829a 	bne.w	800f81e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f2ea:	4b7a      	ldr	r3, [pc, #488]	; (800f4d4 <tcp_receive+0x888>)
 800f2ec:	891c      	ldrh	r4, [r3, #8]
 800f2ee:	4b79      	ldr	r3, [pc, #484]	; (800f4d4 <tcp_receive+0x888>)
 800f2f0:	68db      	ldr	r3, [r3, #12]
 800f2f2:	899b      	ldrh	r3, [r3, #12]
 800f2f4:	b29b      	uxth	r3, r3
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	f7fa fd24 	bl	8009d44 <lwip_htons>
 800f2fc:	4603      	mov	r3, r0
 800f2fe:	b2db      	uxtb	r3, r3
 800f300:	f003 0303 	and.w	r3, r3, #3
 800f304:	2b00      	cmp	r3, #0
 800f306:	d001      	beq.n	800f30c <tcp_receive+0x6c0>
 800f308:	2301      	movs	r3, #1
 800f30a:	e000      	b.n	800f30e <tcp_receive+0x6c2>
 800f30c:	2300      	movs	r3, #0
 800f30e:	4423      	add	r3, r4
 800f310:	b29a      	uxth	r2, r3
 800f312:	4b71      	ldr	r3, [pc, #452]	; (800f4d8 <tcp_receive+0x88c>)
 800f314:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f31a:	4b6f      	ldr	r3, [pc, #444]	; (800f4d8 <tcp_receive+0x88c>)
 800f31c:	881b      	ldrh	r3, [r3, #0]
 800f31e:	429a      	cmp	r2, r3
 800f320:	d275      	bcs.n	800f40e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f322:	4b6c      	ldr	r3, [pc, #432]	; (800f4d4 <tcp_receive+0x888>)
 800f324:	68db      	ldr	r3, [r3, #12]
 800f326:	899b      	ldrh	r3, [r3, #12]
 800f328:	b29b      	uxth	r3, r3
 800f32a:	4618      	mov	r0, r3
 800f32c:	f7fa fd0a 	bl	8009d44 <lwip_htons>
 800f330:	4603      	mov	r3, r0
 800f332:	b2db      	uxtb	r3, r3
 800f334:	f003 0301 	and.w	r3, r3, #1
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d01f      	beq.n	800f37c <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f33c:	4b65      	ldr	r3, [pc, #404]	; (800f4d4 <tcp_receive+0x888>)
 800f33e:	68db      	ldr	r3, [r3, #12]
 800f340:	899b      	ldrh	r3, [r3, #12]
 800f342:	b29b      	uxth	r3, r3
 800f344:	b21b      	sxth	r3, r3
 800f346:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f34a:	b21c      	sxth	r4, r3
 800f34c:	4b61      	ldr	r3, [pc, #388]	; (800f4d4 <tcp_receive+0x888>)
 800f34e:	68db      	ldr	r3, [r3, #12]
 800f350:	899b      	ldrh	r3, [r3, #12]
 800f352:	b29b      	uxth	r3, r3
 800f354:	4618      	mov	r0, r3
 800f356:	f7fa fcf5 	bl	8009d44 <lwip_htons>
 800f35a:	4603      	mov	r3, r0
 800f35c:	b2db      	uxtb	r3, r3
 800f35e:	b29b      	uxth	r3, r3
 800f360:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f364:	b29b      	uxth	r3, r3
 800f366:	4618      	mov	r0, r3
 800f368:	f7fa fcec 	bl	8009d44 <lwip_htons>
 800f36c:	4603      	mov	r3, r0
 800f36e:	b21b      	sxth	r3, r3
 800f370:	4323      	orrs	r3, r4
 800f372:	b21a      	sxth	r2, r3
 800f374:	4b57      	ldr	r3, [pc, #348]	; (800f4d4 <tcp_receive+0x888>)
 800f376:	68db      	ldr	r3, [r3, #12]
 800f378:	b292      	uxth	r2, r2
 800f37a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f380:	4b54      	ldr	r3, [pc, #336]	; (800f4d4 <tcp_receive+0x888>)
 800f382:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f384:	4b53      	ldr	r3, [pc, #332]	; (800f4d4 <tcp_receive+0x888>)
 800f386:	68db      	ldr	r3, [r3, #12]
 800f388:	899b      	ldrh	r3, [r3, #12]
 800f38a:	b29b      	uxth	r3, r3
 800f38c:	4618      	mov	r0, r3
 800f38e:	f7fa fcd9 	bl	8009d44 <lwip_htons>
 800f392:	4603      	mov	r3, r0
 800f394:	b2db      	uxtb	r3, r3
 800f396:	f003 0302 	and.w	r3, r3, #2
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d005      	beq.n	800f3aa <tcp_receive+0x75e>
            inseg.len -= 1;
 800f39e:	4b4d      	ldr	r3, [pc, #308]	; (800f4d4 <tcp_receive+0x888>)
 800f3a0:	891b      	ldrh	r3, [r3, #8]
 800f3a2:	3b01      	subs	r3, #1
 800f3a4:	b29a      	uxth	r2, r3
 800f3a6:	4b4b      	ldr	r3, [pc, #300]	; (800f4d4 <tcp_receive+0x888>)
 800f3a8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f3aa:	4b4a      	ldr	r3, [pc, #296]	; (800f4d4 <tcp_receive+0x888>)
 800f3ac:	685b      	ldr	r3, [r3, #4]
 800f3ae:	4a49      	ldr	r2, [pc, #292]	; (800f4d4 <tcp_receive+0x888>)
 800f3b0:	8912      	ldrh	r2, [r2, #8]
 800f3b2:	4611      	mov	r1, r2
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	f7fb fef7 	bl	800b1a8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f3ba:	4b46      	ldr	r3, [pc, #280]	; (800f4d4 <tcp_receive+0x888>)
 800f3bc:	891c      	ldrh	r4, [r3, #8]
 800f3be:	4b45      	ldr	r3, [pc, #276]	; (800f4d4 <tcp_receive+0x888>)
 800f3c0:	68db      	ldr	r3, [r3, #12]
 800f3c2:	899b      	ldrh	r3, [r3, #12]
 800f3c4:	b29b      	uxth	r3, r3
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	f7fa fcbc 	bl	8009d44 <lwip_htons>
 800f3cc:	4603      	mov	r3, r0
 800f3ce:	b2db      	uxtb	r3, r3
 800f3d0:	f003 0303 	and.w	r3, r3, #3
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d001      	beq.n	800f3dc <tcp_receive+0x790>
 800f3d8:	2301      	movs	r3, #1
 800f3da:	e000      	b.n	800f3de <tcp_receive+0x792>
 800f3dc:	2300      	movs	r3, #0
 800f3de:	4423      	add	r3, r4
 800f3e0:	b29a      	uxth	r2, r3
 800f3e2:	4b3d      	ldr	r3, [pc, #244]	; (800f4d8 <tcp_receive+0x88c>)
 800f3e4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f3e6:	4b3c      	ldr	r3, [pc, #240]	; (800f4d8 <tcp_receive+0x88c>)
 800f3e8:	881b      	ldrh	r3, [r3, #0]
 800f3ea:	461a      	mov	r2, r3
 800f3ec:	4b38      	ldr	r3, [pc, #224]	; (800f4d0 <tcp_receive+0x884>)
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	441a      	add	r2, r3
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3f6:	6879      	ldr	r1, [r7, #4]
 800f3f8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f3fa:	440b      	add	r3, r1
 800f3fc:	429a      	cmp	r2, r3
 800f3fe:	d006      	beq.n	800f40e <tcp_receive+0x7c2>
 800f400:	4b36      	ldr	r3, [pc, #216]	; (800f4dc <tcp_receive+0x890>)
 800f402:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800f406:	4936      	ldr	r1, [pc, #216]	; (800f4e0 <tcp_receive+0x894>)
 800f408:	4836      	ldr	r0, [pc, #216]	; (800f4e4 <tcp_receive+0x898>)
 800f40a:	f007 fecd 	bl	80171a8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f412:	2b00      	cmp	r3, #0
 800f414:	f000 80e7 	beq.w	800f5e6 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f418:	4b2e      	ldr	r3, [pc, #184]	; (800f4d4 <tcp_receive+0x888>)
 800f41a:	68db      	ldr	r3, [r3, #12]
 800f41c:	899b      	ldrh	r3, [r3, #12]
 800f41e:	b29b      	uxth	r3, r3
 800f420:	4618      	mov	r0, r3
 800f422:	f7fa fc8f 	bl	8009d44 <lwip_htons>
 800f426:	4603      	mov	r3, r0
 800f428:	b2db      	uxtb	r3, r3
 800f42a:	f003 0301 	and.w	r3, r3, #1
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d010      	beq.n	800f454 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800f432:	e00a      	b.n	800f44a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f438:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f43e:	681a      	ldr	r2, [r3, #0]
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800f444:	68f8      	ldr	r0, [r7, #12]
 800f446:	f7fd fcc8 	bl	800cdda <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d1f0      	bne.n	800f434 <tcp_receive+0x7e8>
 800f452:	e0c8      	b.n	800f5e6 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f458:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800f45a:	e052      	b.n	800f502 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f45c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f45e:	68db      	ldr	r3, [r3, #12]
 800f460:	899b      	ldrh	r3, [r3, #12]
 800f462:	b29b      	uxth	r3, r3
 800f464:	4618      	mov	r0, r3
 800f466:	f7fa fc6d 	bl	8009d44 <lwip_htons>
 800f46a:	4603      	mov	r3, r0
 800f46c:	b2db      	uxtb	r3, r3
 800f46e:	f003 0301 	and.w	r3, r3, #1
 800f472:	2b00      	cmp	r3, #0
 800f474:	d03d      	beq.n	800f4f2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800f476:	4b17      	ldr	r3, [pc, #92]	; (800f4d4 <tcp_receive+0x888>)
 800f478:	68db      	ldr	r3, [r3, #12]
 800f47a:	899b      	ldrh	r3, [r3, #12]
 800f47c:	b29b      	uxth	r3, r3
 800f47e:	4618      	mov	r0, r3
 800f480:	f7fa fc60 	bl	8009d44 <lwip_htons>
 800f484:	4603      	mov	r3, r0
 800f486:	b2db      	uxtb	r3, r3
 800f488:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d130      	bne.n	800f4f2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f490:	4b10      	ldr	r3, [pc, #64]	; (800f4d4 <tcp_receive+0x888>)
 800f492:	68db      	ldr	r3, [r3, #12]
 800f494:	899b      	ldrh	r3, [r3, #12]
 800f496:	b29c      	uxth	r4, r3
 800f498:	2001      	movs	r0, #1
 800f49a:	f7fa fc53 	bl	8009d44 <lwip_htons>
 800f49e:	4603      	mov	r3, r0
 800f4a0:	461a      	mov	r2, r3
 800f4a2:	4b0c      	ldr	r3, [pc, #48]	; (800f4d4 <tcp_receive+0x888>)
 800f4a4:	68db      	ldr	r3, [r3, #12]
 800f4a6:	4322      	orrs	r2, r4
 800f4a8:	b292      	uxth	r2, r2
 800f4aa:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f4ac:	4b09      	ldr	r3, [pc, #36]	; (800f4d4 <tcp_receive+0x888>)
 800f4ae:	891c      	ldrh	r4, [r3, #8]
 800f4b0:	4b08      	ldr	r3, [pc, #32]	; (800f4d4 <tcp_receive+0x888>)
 800f4b2:	68db      	ldr	r3, [r3, #12]
 800f4b4:	899b      	ldrh	r3, [r3, #12]
 800f4b6:	b29b      	uxth	r3, r3
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	f7fa fc43 	bl	8009d44 <lwip_htons>
 800f4be:	4603      	mov	r3, r0
 800f4c0:	b2db      	uxtb	r3, r3
 800f4c2:	f003 0303 	and.w	r3, r3, #3
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d00e      	beq.n	800f4e8 <tcp_receive+0x89c>
 800f4ca:	2301      	movs	r3, #1
 800f4cc:	e00d      	b.n	800f4ea <tcp_receive+0x89e>
 800f4ce:	bf00      	nop
 800f4d0:	2000856c 	.word	0x2000856c
 800f4d4:	2000854c 	.word	0x2000854c
 800f4d8:	20008576 	.word	0x20008576
 800f4dc:	0801a39c 	.word	0x0801a39c
 800f4e0:	0801a744 	.word	0x0801a744
 800f4e4:	0801a3e8 	.word	0x0801a3e8
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	4423      	add	r3, r4
 800f4ec:	b29a      	uxth	r2, r3
 800f4ee:	4b98      	ldr	r3, [pc, #608]	; (800f750 <tcp_receive+0xb04>)
 800f4f0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800f4f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4f4:	613b      	str	r3, [r7, #16]
              next = next->next;
 800f4f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800f4fc:	6938      	ldr	r0, [r7, #16]
 800f4fe:	f7fd fc6c 	bl	800cdda <tcp_seg_free>
            while (next &&
 800f502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f504:	2b00      	cmp	r3, #0
 800f506:	d00e      	beq.n	800f526 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f508:	4b91      	ldr	r3, [pc, #580]	; (800f750 <tcp_receive+0xb04>)
 800f50a:	881b      	ldrh	r3, [r3, #0]
 800f50c:	461a      	mov	r2, r3
 800f50e:	4b91      	ldr	r3, [pc, #580]	; (800f754 <tcp_receive+0xb08>)
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	441a      	add	r2, r3
 800f514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f516:	68db      	ldr	r3, [r3, #12]
 800f518:	685b      	ldr	r3, [r3, #4]
 800f51a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f51c:	8909      	ldrh	r1, [r1, #8]
 800f51e:	440b      	add	r3, r1
 800f520:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f522:	2b00      	cmp	r3, #0
 800f524:	da9a      	bge.n	800f45c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d059      	beq.n	800f5e0 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800f52c:	4b88      	ldr	r3, [pc, #544]	; (800f750 <tcp_receive+0xb04>)
 800f52e:	881b      	ldrh	r3, [r3, #0]
 800f530:	461a      	mov	r2, r3
 800f532:	4b88      	ldr	r3, [pc, #544]	; (800f754 <tcp_receive+0xb08>)
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	441a      	add	r2, r3
 800f538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f53a:	68db      	ldr	r3, [r3, #12]
 800f53c:	685b      	ldr	r3, [r3, #4]
 800f53e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f540:	2b00      	cmp	r3, #0
 800f542:	dd4d      	ble.n	800f5e0 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f546:	68db      	ldr	r3, [r3, #12]
 800f548:	685b      	ldr	r3, [r3, #4]
 800f54a:	b29a      	uxth	r2, r3
 800f54c:	4b81      	ldr	r3, [pc, #516]	; (800f754 <tcp_receive+0xb08>)
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	b29b      	uxth	r3, r3
 800f552:	1ad3      	subs	r3, r2, r3
 800f554:	b29a      	uxth	r2, r3
 800f556:	4b80      	ldr	r3, [pc, #512]	; (800f758 <tcp_receive+0xb0c>)
 800f558:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f55a:	4b7f      	ldr	r3, [pc, #508]	; (800f758 <tcp_receive+0xb0c>)
 800f55c:	68db      	ldr	r3, [r3, #12]
 800f55e:	899b      	ldrh	r3, [r3, #12]
 800f560:	b29b      	uxth	r3, r3
 800f562:	4618      	mov	r0, r3
 800f564:	f7fa fbee 	bl	8009d44 <lwip_htons>
 800f568:	4603      	mov	r3, r0
 800f56a:	b2db      	uxtb	r3, r3
 800f56c:	f003 0302 	and.w	r3, r3, #2
 800f570:	2b00      	cmp	r3, #0
 800f572:	d005      	beq.n	800f580 <tcp_receive+0x934>
                inseg.len -= 1;
 800f574:	4b78      	ldr	r3, [pc, #480]	; (800f758 <tcp_receive+0xb0c>)
 800f576:	891b      	ldrh	r3, [r3, #8]
 800f578:	3b01      	subs	r3, #1
 800f57a:	b29a      	uxth	r2, r3
 800f57c:	4b76      	ldr	r3, [pc, #472]	; (800f758 <tcp_receive+0xb0c>)
 800f57e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800f580:	4b75      	ldr	r3, [pc, #468]	; (800f758 <tcp_receive+0xb0c>)
 800f582:	685b      	ldr	r3, [r3, #4]
 800f584:	4a74      	ldr	r2, [pc, #464]	; (800f758 <tcp_receive+0xb0c>)
 800f586:	8912      	ldrh	r2, [r2, #8]
 800f588:	4611      	mov	r1, r2
 800f58a:	4618      	mov	r0, r3
 800f58c:	f7fb fe0c 	bl	800b1a8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f590:	4b71      	ldr	r3, [pc, #452]	; (800f758 <tcp_receive+0xb0c>)
 800f592:	891c      	ldrh	r4, [r3, #8]
 800f594:	4b70      	ldr	r3, [pc, #448]	; (800f758 <tcp_receive+0xb0c>)
 800f596:	68db      	ldr	r3, [r3, #12]
 800f598:	899b      	ldrh	r3, [r3, #12]
 800f59a:	b29b      	uxth	r3, r3
 800f59c:	4618      	mov	r0, r3
 800f59e:	f7fa fbd1 	bl	8009d44 <lwip_htons>
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	b2db      	uxtb	r3, r3
 800f5a6:	f003 0303 	and.w	r3, r3, #3
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d001      	beq.n	800f5b2 <tcp_receive+0x966>
 800f5ae:	2301      	movs	r3, #1
 800f5b0:	e000      	b.n	800f5b4 <tcp_receive+0x968>
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	4423      	add	r3, r4
 800f5b6:	b29a      	uxth	r2, r3
 800f5b8:	4b65      	ldr	r3, [pc, #404]	; (800f750 <tcp_receive+0xb04>)
 800f5ba:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f5bc:	4b64      	ldr	r3, [pc, #400]	; (800f750 <tcp_receive+0xb04>)
 800f5be:	881b      	ldrh	r3, [r3, #0]
 800f5c0:	461a      	mov	r2, r3
 800f5c2:	4b64      	ldr	r3, [pc, #400]	; (800f754 <tcp_receive+0xb08>)
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	441a      	add	r2, r3
 800f5c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5ca:	68db      	ldr	r3, [r3, #12]
 800f5cc:	685b      	ldr	r3, [r3, #4]
 800f5ce:	429a      	cmp	r2, r3
 800f5d0:	d006      	beq.n	800f5e0 <tcp_receive+0x994>
 800f5d2:	4b62      	ldr	r3, [pc, #392]	; (800f75c <tcp_receive+0xb10>)
 800f5d4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800f5d8:	4961      	ldr	r1, [pc, #388]	; (800f760 <tcp_receive+0xb14>)
 800f5da:	4862      	ldr	r0, [pc, #392]	; (800f764 <tcp_receive+0xb18>)
 800f5dc:	f007 fde4 	bl	80171a8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f5e4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800f5e6:	4b5a      	ldr	r3, [pc, #360]	; (800f750 <tcp_receive+0xb04>)
 800f5e8:	881b      	ldrh	r3, [r3, #0]
 800f5ea:	461a      	mov	r2, r3
 800f5ec:	4b59      	ldr	r3, [pc, #356]	; (800f754 <tcp_receive+0xb08>)
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	441a      	add	r2, r3
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f5fa:	4b55      	ldr	r3, [pc, #340]	; (800f750 <tcp_receive+0xb04>)
 800f5fc:	881b      	ldrh	r3, [r3, #0]
 800f5fe:	429a      	cmp	r2, r3
 800f600:	d206      	bcs.n	800f610 <tcp_receive+0x9c4>
 800f602:	4b56      	ldr	r3, [pc, #344]	; (800f75c <tcp_receive+0xb10>)
 800f604:	f240 6207 	movw	r2, #1543	; 0x607
 800f608:	4957      	ldr	r1, [pc, #348]	; (800f768 <tcp_receive+0xb1c>)
 800f60a:	4856      	ldr	r0, [pc, #344]	; (800f764 <tcp_receive+0xb18>)
 800f60c:	f007 fdcc 	bl	80171a8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f614:	4b4e      	ldr	r3, [pc, #312]	; (800f750 <tcp_receive+0xb04>)
 800f616:	881b      	ldrh	r3, [r3, #0]
 800f618:	1ad3      	subs	r3, r2, r3
 800f61a:	b29a      	uxth	r2, r3
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800f620:	6878      	ldr	r0, [r7, #4]
 800f622:	f7fc feb5 	bl	800c390 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800f626:	4b4c      	ldr	r3, [pc, #304]	; (800f758 <tcp_receive+0xb0c>)
 800f628:	685b      	ldr	r3, [r3, #4]
 800f62a:	891b      	ldrh	r3, [r3, #8]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d006      	beq.n	800f63e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800f630:	4b49      	ldr	r3, [pc, #292]	; (800f758 <tcp_receive+0xb0c>)
 800f632:	685b      	ldr	r3, [r3, #4]
 800f634:	4a4d      	ldr	r2, [pc, #308]	; (800f76c <tcp_receive+0xb20>)
 800f636:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800f638:	4b47      	ldr	r3, [pc, #284]	; (800f758 <tcp_receive+0xb0c>)
 800f63a:	2200      	movs	r2, #0
 800f63c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f63e:	4b46      	ldr	r3, [pc, #280]	; (800f758 <tcp_receive+0xb0c>)
 800f640:	68db      	ldr	r3, [r3, #12]
 800f642:	899b      	ldrh	r3, [r3, #12]
 800f644:	b29b      	uxth	r3, r3
 800f646:	4618      	mov	r0, r3
 800f648:	f7fa fb7c 	bl	8009d44 <lwip_htons>
 800f64c:	4603      	mov	r3, r0
 800f64e:	b2db      	uxtb	r3, r3
 800f650:	f003 0301 	and.w	r3, r3, #1
 800f654:	2b00      	cmp	r3, #0
 800f656:	f000 80b8 	beq.w	800f7ca <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800f65a:	4b45      	ldr	r3, [pc, #276]	; (800f770 <tcp_receive+0xb24>)
 800f65c:	781b      	ldrb	r3, [r3, #0]
 800f65e:	f043 0320 	orr.w	r3, r3, #32
 800f662:	b2da      	uxtb	r2, r3
 800f664:	4b42      	ldr	r3, [pc, #264]	; (800f770 <tcp_receive+0xb24>)
 800f666:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800f668:	e0af      	b.n	800f7ca <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f66e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f674:	68db      	ldr	r3, [r3, #12]
 800f676:	685b      	ldr	r3, [r3, #4]
 800f678:	4a36      	ldr	r2, [pc, #216]	; (800f754 <tcp_receive+0xb08>)
 800f67a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f67c:	68bb      	ldr	r3, [r7, #8]
 800f67e:	891b      	ldrh	r3, [r3, #8]
 800f680:	461c      	mov	r4, r3
 800f682:	68bb      	ldr	r3, [r7, #8]
 800f684:	68db      	ldr	r3, [r3, #12]
 800f686:	899b      	ldrh	r3, [r3, #12]
 800f688:	b29b      	uxth	r3, r3
 800f68a:	4618      	mov	r0, r3
 800f68c:	f7fa fb5a 	bl	8009d44 <lwip_htons>
 800f690:	4603      	mov	r3, r0
 800f692:	b2db      	uxtb	r3, r3
 800f694:	f003 0303 	and.w	r3, r3, #3
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d001      	beq.n	800f6a0 <tcp_receive+0xa54>
 800f69c:	2301      	movs	r3, #1
 800f69e:	e000      	b.n	800f6a2 <tcp_receive+0xa56>
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	191a      	adds	r2, r3, r4
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6a8:	441a      	add	r2, r3
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f6b2:	461c      	mov	r4, r3
 800f6b4:	68bb      	ldr	r3, [r7, #8]
 800f6b6:	891b      	ldrh	r3, [r3, #8]
 800f6b8:	461d      	mov	r5, r3
 800f6ba:	68bb      	ldr	r3, [r7, #8]
 800f6bc:	68db      	ldr	r3, [r3, #12]
 800f6be:	899b      	ldrh	r3, [r3, #12]
 800f6c0:	b29b      	uxth	r3, r3
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	f7fa fb3e 	bl	8009d44 <lwip_htons>
 800f6c8:	4603      	mov	r3, r0
 800f6ca:	b2db      	uxtb	r3, r3
 800f6cc:	f003 0303 	and.w	r3, r3, #3
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d001      	beq.n	800f6d8 <tcp_receive+0xa8c>
 800f6d4:	2301      	movs	r3, #1
 800f6d6:	e000      	b.n	800f6da <tcp_receive+0xa8e>
 800f6d8:	2300      	movs	r3, #0
 800f6da:	442b      	add	r3, r5
 800f6dc:	429c      	cmp	r4, r3
 800f6de:	d206      	bcs.n	800f6ee <tcp_receive+0xaa2>
 800f6e0:	4b1e      	ldr	r3, [pc, #120]	; (800f75c <tcp_receive+0xb10>)
 800f6e2:	f240 622b 	movw	r2, #1579	; 0x62b
 800f6e6:	4923      	ldr	r1, [pc, #140]	; (800f774 <tcp_receive+0xb28>)
 800f6e8:	481e      	ldr	r0, [pc, #120]	; (800f764 <tcp_receive+0xb18>)
 800f6ea:	f007 fd5d 	bl	80171a8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800f6ee:	68bb      	ldr	r3, [r7, #8]
 800f6f0:	891b      	ldrh	r3, [r3, #8]
 800f6f2:	461c      	mov	r4, r3
 800f6f4:	68bb      	ldr	r3, [r7, #8]
 800f6f6:	68db      	ldr	r3, [r3, #12]
 800f6f8:	899b      	ldrh	r3, [r3, #12]
 800f6fa:	b29b      	uxth	r3, r3
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	f7fa fb21 	bl	8009d44 <lwip_htons>
 800f702:	4603      	mov	r3, r0
 800f704:	b2db      	uxtb	r3, r3
 800f706:	f003 0303 	and.w	r3, r3, #3
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d001      	beq.n	800f712 <tcp_receive+0xac6>
 800f70e:	2301      	movs	r3, #1
 800f710:	e000      	b.n	800f714 <tcp_receive+0xac8>
 800f712:	2300      	movs	r3, #0
 800f714:	1919      	adds	r1, r3, r4
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f71a:	b28b      	uxth	r3, r1
 800f71c:	1ad3      	subs	r3, r2, r3
 800f71e:	b29a      	uxth	r2, r3
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800f724:	6878      	ldr	r0, [r7, #4]
 800f726:	f7fc fe33 	bl	800c390 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800f72a:	68bb      	ldr	r3, [r7, #8]
 800f72c:	685b      	ldr	r3, [r3, #4]
 800f72e:	891b      	ldrh	r3, [r3, #8]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d028      	beq.n	800f786 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800f734:	4b0d      	ldr	r3, [pc, #52]	; (800f76c <tcp_receive+0xb20>)
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d01d      	beq.n	800f778 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800f73c:	4b0b      	ldr	r3, [pc, #44]	; (800f76c <tcp_receive+0xb20>)
 800f73e:	681a      	ldr	r2, [r3, #0]
 800f740:	68bb      	ldr	r3, [r7, #8]
 800f742:	685b      	ldr	r3, [r3, #4]
 800f744:	4619      	mov	r1, r3
 800f746:	4610      	mov	r0, r2
 800f748:	f7fb ff82 	bl	800b650 <pbuf_cat>
 800f74c:	e018      	b.n	800f780 <tcp_receive+0xb34>
 800f74e:	bf00      	nop
 800f750:	20008576 	.word	0x20008576
 800f754:	2000856c 	.word	0x2000856c
 800f758:	2000854c 	.word	0x2000854c
 800f75c:	0801a39c 	.word	0x0801a39c
 800f760:	0801a77c 	.word	0x0801a77c
 800f764:	0801a3e8 	.word	0x0801a3e8
 800f768:	0801a7b8 	.word	0x0801a7b8
 800f76c:	2000857c 	.word	0x2000857c
 800f770:	20008579 	.word	0x20008579
 800f774:	0801a7d8 	.word	0x0801a7d8
            } else {
              recv_data = cseg->p;
 800f778:	68bb      	ldr	r3, [r7, #8]
 800f77a:	685b      	ldr	r3, [r3, #4]
 800f77c:	4a70      	ldr	r2, [pc, #448]	; (800f940 <tcp_receive+0xcf4>)
 800f77e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800f780:	68bb      	ldr	r3, [r7, #8]
 800f782:	2200      	movs	r2, #0
 800f784:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f786:	68bb      	ldr	r3, [r7, #8]
 800f788:	68db      	ldr	r3, [r3, #12]
 800f78a:	899b      	ldrh	r3, [r3, #12]
 800f78c:	b29b      	uxth	r3, r3
 800f78e:	4618      	mov	r0, r3
 800f790:	f7fa fad8 	bl	8009d44 <lwip_htons>
 800f794:	4603      	mov	r3, r0
 800f796:	b2db      	uxtb	r3, r3
 800f798:	f003 0301 	and.w	r3, r3, #1
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d00d      	beq.n	800f7bc <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800f7a0:	4b68      	ldr	r3, [pc, #416]	; (800f944 <tcp_receive+0xcf8>)
 800f7a2:	781b      	ldrb	r3, [r3, #0]
 800f7a4:	f043 0320 	orr.w	r3, r3, #32
 800f7a8:	b2da      	uxtb	r2, r3
 800f7aa:	4b66      	ldr	r3, [pc, #408]	; (800f944 <tcp_receive+0xcf8>)
 800f7ac:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	7d1b      	ldrb	r3, [r3, #20]
 800f7b2:	2b04      	cmp	r3, #4
 800f7b4:	d102      	bne.n	800f7bc <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	2207      	movs	r2, #7
 800f7ba:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800f7bc:	68bb      	ldr	r3, [r7, #8]
 800f7be:	681a      	ldr	r2, [r3, #0]
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800f7c4:	68b8      	ldr	r0, [r7, #8]
 800f7c6:	f7fd fb08 	bl	800cdda <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d008      	beq.n	800f7e4 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f7d6:	68db      	ldr	r3, [r3, #12]
 800f7d8:	685a      	ldr	r2, [r3, #4]
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800f7de:	429a      	cmp	r2, r3
 800f7e0:	f43f af43 	beq.w	800f66a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	8b5b      	ldrh	r3, [r3, #26]
 800f7e8:	f003 0301 	and.w	r3, r3, #1
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d00e      	beq.n	800f80e <tcp_receive+0xbc2>
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	8b5b      	ldrh	r3, [r3, #26]
 800f7f4:	f023 0301 	bic.w	r3, r3, #1
 800f7f8:	b29a      	uxth	r2, r3
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	835a      	strh	r2, [r3, #26]
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	8b5b      	ldrh	r3, [r3, #26]
 800f802:	f043 0302 	orr.w	r3, r3, #2
 800f806:	b29a      	uxth	r2, r3
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f80c:	e188      	b.n	800fb20 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	8b5b      	ldrh	r3, [r3, #26]
 800f812:	f043 0301 	orr.w	r3, r3, #1
 800f816:	b29a      	uxth	r2, r3
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f81c:	e180      	b.n	800fb20 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f822:	2b00      	cmp	r3, #0
 800f824:	d106      	bne.n	800f834 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800f826:	4848      	ldr	r0, [pc, #288]	; (800f948 <tcp_receive+0xcfc>)
 800f828:	f7fd faf0 	bl	800ce0c <tcp_seg_copy>
 800f82c:	4602      	mov	r2, r0
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	675a      	str	r2, [r3, #116]	; 0x74
 800f832:	e16d      	b.n	800fb10 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800f834:	2300      	movs	r3, #0
 800f836:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f83c:	63bb      	str	r3, [r7, #56]	; 0x38
 800f83e:	e157      	b.n	800faf0 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800f840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f842:	68db      	ldr	r3, [r3, #12]
 800f844:	685a      	ldr	r2, [r3, #4]
 800f846:	4b41      	ldr	r3, [pc, #260]	; (800f94c <tcp_receive+0xd00>)
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	429a      	cmp	r2, r3
 800f84c:	d11d      	bne.n	800f88a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800f84e:	4b3e      	ldr	r3, [pc, #248]	; (800f948 <tcp_receive+0xcfc>)
 800f850:	891a      	ldrh	r2, [r3, #8]
 800f852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f854:	891b      	ldrh	r3, [r3, #8]
 800f856:	429a      	cmp	r2, r3
 800f858:	f240 814f 	bls.w	800fafa <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f85c:	483a      	ldr	r0, [pc, #232]	; (800f948 <tcp_receive+0xcfc>)
 800f85e:	f7fd fad5 	bl	800ce0c <tcp_seg_copy>
 800f862:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800f864:	697b      	ldr	r3, [r7, #20]
 800f866:	2b00      	cmp	r3, #0
 800f868:	f000 8149 	beq.w	800fafe <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800f86c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d003      	beq.n	800f87a <tcp_receive+0xc2e>
                    prev->next = cseg;
 800f872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f874:	697a      	ldr	r2, [r7, #20]
 800f876:	601a      	str	r2, [r3, #0]
 800f878:	e002      	b.n	800f880 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	697a      	ldr	r2, [r7, #20]
 800f87e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800f880:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f882:	6978      	ldr	r0, [r7, #20]
 800f884:	f7ff f8de 	bl	800ea44 <tcp_oos_insert_segment>
                }
                break;
 800f888:	e139      	b.n	800fafe <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800f88a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d117      	bne.n	800f8c0 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800f890:	4b2e      	ldr	r3, [pc, #184]	; (800f94c <tcp_receive+0xd00>)
 800f892:	681a      	ldr	r2, [r3, #0]
 800f894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f896:	68db      	ldr	r3, [r3, #12]
 800f898:	685b      	ldr	r3, [r3, #4]
 800f89a:	1ad3      	subs	r3, r2, r3
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	da57      	bge.n	800f950 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f8a0:	4829      	ldr	r0, [pc, #164]	; (800f948 <tcp_receive+0xcfc>)
 800f8a2:	f7fd fab3 	bl	800ce0c <tcp_seg_copy>
 800f8a6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800f8a8:	69bb      	ldr	r3, [r7, #24]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	f000 8129 	beq.w	800fb02 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	69ba      	ldr	r2, [r7, #24]
 800f8b4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800f8b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f8b8:	69b8      	ldr	r0, [r7, #24]
 800f8ba:	f7ff f8c3 	bl	800ea44 <tcp_oos_insert_segment>
                  }
                  break;
 800f8be:	e120      	b.n	800fb02 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800f8c0:	4b22      	ldr	r3, [pc, #136]	; (800f94c <tcp_receive+0xd00>)
 800f8c2:	681a      	ldr	r2, [r3, #0]
 800f8c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8c6:	68db      	ldr	r3, [r3, #12]
 800f8c8:	685b      	ldr	r3, [r3, #4]
 800f8ca:	1ad3      	subs	r3, r2, r3
 800f8cc:	3b01      	subs	r3, #1
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	db3e      	blt.n	800f950 <tcp_receive+0xd04>
 800f8d2:	4b1e      	ldr	r3, [pc, #120]	; (800f94c <tcp_receive+0xd00>)
 800f8d4:	681a      	ldr	r2, [r3, #0]
 800f8d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8d8:	68db      	ldr	r3, [r3, #12]
 800f8da:	685b      	ldr	r3, [r3, #4]
 800f8dc:	1ad3      	subs	r3, r2, r3
 800f8de:	3301      	adds	r3, #1
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	dc35      	bgt.n	800f950 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f8e4:	4818      	ldr	r0, [pc, #96]	; (800f948 <tcp_receive+0xcfc>)
 800f8e6:	f7fd fa91 	bl	800ce0c <tcp_seg_copy>
 800f8ea:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800f8ec:	69fb      	ldr	r3, [r7, #28]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	f000 8109 	beq.w	800fb06 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800f8f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8f6:	68db      	ldr	r3, [r3, #12]
 800f8f8:	685b      	ldr	r3, [r3, #4]
 800f8fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f8fc:	8912      	ldrh	r2, [r2, #8]
 800f8fe:	441a      	add	r2, r3
 800f900:	4b12      	ldr	r3, [pc, #72]	; (800f94c <tcp_receive+0xd00>)
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	1ad3      	subs	r3, r2, r3
 800f906:	2b00      	cmp	r3, #0
 800f908:	dd12      	ble.n	800f930 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800f90a:	4b10      	ldr	r3, [pc, #64]	; (800f94c <tcp_receive+0xd00>)
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	b29a      	uxth	r2, r3
 800f910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f912:	68db      	ldr	r3, [r3, #12]
 800f914:	685b      	ldr	r3, [r3, #4]
 800f916:	b29b      	uxth	r3, r3
 800f918:	1ad3      	subs	r3, r2, r3
 800f91a:	b29a      	uxth	r2, r3
 800f91c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f91e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800f920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f922:	685a      	ldr	r2, [r3, #4]
 800f924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f926:	891b      	ldrh	r3, [r3, #8]
 800f928:	4619      	mov	r1, r3
 800f92a:	4610      	mov	r0, r2
 800f92c:	f7fb fc3c 	bl	800b1a8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800f930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f932:	69fa      	ldr	r2, [r7, #28]
 800f934:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800f936:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f938:	69f8      	ldr	r0, [r7, #28]
 800f93a:	f7ff f883 	bl	800ea44 <tcp_oos_insert_segment>
                  }
                  break;
 800f93e:	e0e2      	b.n	800fb06 <tcp_receive+0xeba>
 800f940:	2000857c 	.word	0x2000857c
 800f944:	20008579 	.word	0x20008579
 800f948:	2000854c 	.word	0x2000854c
 800f94c:	2000856c 	.word	0x2000856c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800f950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f952:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800f954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	f040 80c6 	bne.w	800faea <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800f95e:	4b80      	ldr	r3, [pc, #512]	; (800fb60 <tcp_receive+0xf14>)
 800f960:	681a      	ldr	r2, [r3, #0]
 800f962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f964:	68db      	ldr	r3, [r3, #12]
 800f966:	685b      	ldr	r3, [r3, #4]
 800f968:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	f340 80bd 	ble.w	800faea <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f972:	68db      	ldr	r3, [r3, #12]
 800f974:	899b      	ldrh	r3, [r3, #12]
 800f976:	b29b      	uxth	r3, r3
 800f978:	4618      	mov	r0, r3
 800f97a:	f7fa f9e3 	bl	8009d44 <lwip_htons>
 800f97e:	4603      	mov	r3, r0
 800f980:	b2db      	uxtb	r3, r3
 800f982:	f003 0301 	and.w	r3, r3, #1
 800f986:	2b00      	cmp	r3, #0
 800f988:	f040 80bf 	bne.w	800fb0a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800f98c:	4875      	ldr	r0, [pc, #468]	; (800fb64 <tcp_receive+0xf18>)
 800f98e:	f7fd fa3d 	bl	800ce0c <tcp_seg_copy>
 800f992:	4602      	mov	r2, r0
 800f994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f996:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800f998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	f000 80b6 	beq.w	800fb0e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800f9a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9a4:	68db      	ldr	r3, [r3, #12]
 800f9a6:	685b      	ldr	r3, [r3, #4]
 800f9a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f9aa:	8912      	ldrh	r2, [r2, #8]
 800f9ac:	441a      	add	r2, r3
 800f9ae:	4b6c      	ldr	r3, [pc, #432]	; (800fb60 <tcp_receive+0xf14>)
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	1ad3      	subs	r3, r2, r3
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	dd12      	ble.n	800f9de <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800f9b8:	4b69      	ldr	r3, [pc, #420]	; (800fb60 <tcp_receive+0xf14>)
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	b29a      	uxth	r2, r3
 800f9be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9c0:	68db      	ldr	r3, [r3, #12]
 800f9c2:	685b      	ldr	r3, [r3, #4]
 800f9c4:	b29b      	uxth	r3, r3
 800f9c6:	1ad3      	subs	r3, r2, r3
 800f9c8:	b29a      	uxth	r2, r3
 800f9ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9cc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800f9ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9d0:	685a      	ldr	r2, [r3, #4]
 800f9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9d4:	891b      	ldrh	r3, [r3, #8]
 800f9d6:	4619      	mov	r1, r3
 800f9d8:	4610      	mov	r0, r2
 800f9da:	f7fb fbe5 	bl	800b1a8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800f9de:	4b62      	ldr	r3, [pc, #392]	; (800fb68 <tcp_receive+0xf1c>)
 800f9e0:	881b      	ldrh	r3, [r3, #0]
 800f9e2:	461a      	mov	r2, r3
 800f9e4:	4b5e      	ldr	r3, [pc, #376]	; (800fb60 <tcp_receive+0xf14>)
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	441a      	add	r2, r3
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9ee:	6879      	ldr	r1, [r7, #4]
 800f9f0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f9f2:	440b      	add	r3, r1
 800f9f4:	1ad3      	subs	r3, r2, r3
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	f340 8089 	ble.w	800fb0e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800f9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	68db      	ldr	r3, [r3, #12]
 800fa02:	899b      	ldrh	r3, [r3, #12]
 800fa04:	b29b      	uxth	r3, r3
 800fa06:	4618      	mov	r0, r3
 800fa08:	f7fa f99c 	bl	8009d44 <lwip_htons>
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	b2db      	uxtb	r3, r3
 800fa10:	f003 0301 	and.w	r3, r3, #1
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d022      	beq.n	800fa5e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800fa18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	68db      	ldr	r3, [r3, #12]
 800fa1e:	899b      	ldrh	r3, [r3, #12]
 800fa20:	b29b      	uxth	r3, r3
 800fa22:	b21b      	sxth	r3, r3
 800fa24:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fa28:	b21c      	sxth	r4, r3
 800fa2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	68db      	ldr	r3, [r3, #12]
 800fa30:	899b      	ldrh	r3, [r3, #12]
 800fa32:	b29b      	uxth	r3, r3
 800fa34:	4618      	mov	r0, r3
 800fa36:	f7fa f985 	bl	8009d44 <lwip_htons>
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	b2db      	uxtb	r3, r3
 800fa3e:	b29b      	uxth	r3, r3
 800fa40:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800fa44:	b29b      	uxth	r3, r3
 800fa46:	4618      	mov	r0, r3
 800fa48:	f7fa f97c 	bl	8009d44 <lwip_htons>
 800fa4c:	4603      	mov	r3, r0
 800fa4e:	b21b      	sxth	r3, r3
 800fa50:	4323      	orrs	r3, r4
 800fa52:	b21a      	sxth	r2, r3
 800fa54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	68db      	ldr	r3, [r3, #12]
 800fa5a:	b292      	uxth	r2, r2
 800fa5c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa62:	b29a      	uxth	r2, r3
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fa68:	4413      	add	r3, r2
 800fa6a:	b299      	uxth	r1, r3
 800fa6c:	4b3c      	ldr	r3, [pc, #240]	; (800fb60 <tcp_receive+0xf14>)
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	b29a      	uxth	r2, r3
 800fa72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	1a8a      	subs	r2, r1, r2
 800fa78:	b292      	uxth	r2, r2
 800fa7a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800fa7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	685a      	ldr	r2, [r3, #4]
 800fa82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	891b      	ldrh	r3, [r3, #8]
 800fa88:	4619      	mov	r1, r3
 800fa8a:	4610      	mov	r0, r2
 800fa8c:	f7fb fb8c 	bl	800b1a8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800fa90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	891c      	ldrh	r4, [r3, #8]
 800fa96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	68db      	ldr	r3, [r3, #12]
 800fa9c:	899b      	ldrh	r3, [r3, #12]
 800fa9e:	b29b      	uxth	r3, r3
 800faa0:	4618      	mov	r0, r3
 800faa2:	f7fa f94f 	bl	8009d44 <lwip_htons>
 800faa6:	4603      	mov	r3, r0
 800faa8:	b2db      	uxtb	r3, r3
 800faaa:	f003 0303 	and.w	r3, r3, #3
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d001      	beq.n	800fab6 <tcp_receive+0xe6a>
 800fab2:	2301      	movs	r3, #1
 800fab4:	e000      	b.n	800fab8 <tcp_receive+0xe6c>
 800fab6:	2300      	movs	r3, #0
 800fab8:	4423      	add	r3, r4
 800faba:	b29a      	uxth	r2, r3
 800fabc:	4b2a      	ldr	r3, [pc, #168]	; (800fb68 <tcp_receive+0xf1c>)
 800fabe:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fac0:	4b29      	ldr	r3, [pc, #164]	; (800fb68 <tcp_receive+0xf1c>)
 800fac2:	881b      	ldrh	r3, [r3, #0]
 800fac4:	461a      	mov	r2, r3
 800fac6:	4b26      	ldr	r3, [pc, #152]	; (800fb60 <tcp_receive+0xf14>)
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	441a      	add	r2, r3
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fad0:	6879      	ldr	r1, [r7, #4]
 800fad2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fad4:	440b      	add	r3, r1
 800fad6:	429a      	cmp	r2, r3
 800fad8:	d019      	beq.n	800fb0e <tcp_receive+0xec2>
 800fada:	4b24      	ldr	r3, [pc, #144]	; (800fb6c <tcp_receive+0xf20>)
 800fadc:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800fae0:	4923      	ldr	r1, [pc, #140]	; (800fb70 <tcp_receive+0xf24>)
 800fae2:	4824      	ldr	r0, [pc, #144]	; (800fb74 <tcp_receive+0xf28>)
 800fae4:	f007 fb60 	bl	80171a8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800fae8:	e011      	b.n	800fb0e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800faea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	63bb      	str	r3, [r7, #56]	; 0x38
 800faf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	f47f aea4 	bne.w	800f840 <tcp_receive+0xbf4>
 800faf8:	e00a      	b.n	800fb10 <tcp_receive+0xec4>
                break;
 800fafa:	bf00      	nop
 800fafc:	e008      	b.n	800fb10 <tcp_receive+0xec4>
                break;
 800fafe:	bf00      	nop
 800fb00:	e006      	b.n	800fb10 <tcp_receive+0xec4>
                  break;
 800fb02:	bf00      	nop
 800fb04:	e004      	b.n	800fb10 <tcp_receive+0xec4>
                  break;
 800fb06:	bf00      	nop
 800fb08:	e002      	b.n	800fb10 <tcp_receive+0xec4>
                  break;
 800fb0a:	bf00      	nop
 800fb0c:	e000      	b.n	800fb10 <tcp_receive+0xec4>
                break;
 800fb0e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800fb10:	6878      	ldr	r0, [r7, #4]
 800fb12:	f001 fe8b 	bl	801182c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800fb16:	e003      	b.n	800fb20 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800fb18:	6878      	ldr	r0, [r7, #4]
 800fb1a:	f001 fe87 	bl	801182c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fb1e:	e01a      	b.n	800fb56 <tcp_receive+0xf0a>
 800fb20:	e019      	b.n	800fb56 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800fb22:	4b0f      	ldr	r3, [pc, #60]	; (800fb60 <tcp_receive+0xf14>)
 800fb24:	681a      	ldr	r2, [r3, #0]
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb2a:	1ad3      	subs	r3, r2, r3
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	db0a      	blt.n	800fb46 <tcp_receive+0xefa>
 800fb30:	4b0b      	ldr	r3, [pc, #44]	; (800fb60 <tcp_receive+0xf14>)
 800fb32:	681a      	ldr	r2, [r3, #0]
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb38:	6879      	ldr	r1, [r7, #4]
 800fb3a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fb3c:	440b      	add	r3, r1
 800fb3e:	1ad3      	subs	r3, r2, r3
 800fb40:	3301      	adds	r3, #1
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	dd07      	ble.n	800fb56 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	8b5b      	ldrh	r3, [r3, #26]
 800fb4a:	f043 0302 	orr.w	r3, r3, #2
 800fb4e:	b29a      	uxth	r2, r3
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800fb54:	e7ff      	b.n	800fb56 <tcp_receive+0xf0a>
 800fb56:	bf00      	nop
 800fb58:	3750      	adds	r7, #80	; 0x50
 800fb5a:	46bd      	mov	sp, r7
 800fb5c:	bdb0      	pop	{r4, r5, r7, pc}
 800fb5e:	bf00      	nop
 800fb60:	2000856c 	.word	0x2000856c
 800fb64:	2000854c 	.word	0x2000854c
 800fb68:	20008576 	.word	0x20008576
 800fb6c:	0801a39c 	.word	0x0801a39c
 800fb70:	0801a744 	.word	0x0801a744
 800fb74:	0801a3e8 	.word	0x0801a3e8

0800fb78 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800fb78:	b480      	push	{r7}
 800fb7a:	b083      	sub	sp, #12
 800fb7c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800fb7e:	4b15      	ldr	r3, [pc, #84]	; (800fbd4 <tcp_get_next_optbyte+0x5c>)
 800fb80:	881b      	ldrh	r3, [r3, #0]
 800fb82:	1c5a      	adds	r2, r3, #1
 800fb84:	b291      	uxth	r1, r2
 800fb86:	4a13      	ldr	r2, [pc, #76]	; (800fbd4 <tcp_get_next_optbyte+0x5c>)
 800fb88:	8011      	strh	r1, [r2, #0]
 800fb8a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800fb8c:	4b12      	ldr	r3, [pc, #72]	; (800fbd8 <tcp_get_next_optbyte+0x60>)
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d004      	beq.n	800fb9e <tcp_get_next_optbyte+0x26>
 800fb94:	4b11      	ldr	r3, [pc, #68]	; (800fbdc <tcp_get_next_optbyte+0x64>)
 800fb96:	881b      	ldrh	r3, [r3, #0]
 800fb98:	88fa      	ldrh	r2, [r7, #6]
 800fb9a:	429a      	cmp	r2, r3
 800fb9c:	d208      	bcs.n	800fbb0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800fb9e:	4b10      	ldr	r3, [pc, #64]	; (800fbe0 <tcp_get_next_optbyte+0x68>)
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	3314      	adds	r3, #20
 800fba4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800fba6:	88fb      	ldrh	r3, [r7, #6]
 800fba8:	683a      	ldr	r2, [r7, #0]
 800fbaa:	4413      	add	r3, r2
 800fbac:	781b      	ldrb	r3, [r3, #0]
 800fbae:	e00b      	b.n	800fbc8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800fbb0:	88fb      	ldrh	r3, [r7, #6]
 800fbb2:	b2da      	uxtb	r2, r3
 800fbb4:	4b09      	ldr	r3, [pc, #36]	; (800fbdc <tcp_get_next_optbyte+0x64>)
 800fbb6:	881b      	ldrh	r3, [r3, #0]
 800fbb8:	b2db      	uxtb	r3, r3
 800fbba:	1ad3      	subs	r3, r2, r3
 800fbbc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800fbbe:	4b06      	ldr	r3, [pc, #24]	; (800fbd8 <tcp_get_next_optbyte+0x60>)
 800fbc0:	681a      	ldr	r2, [r3, #0]
 800fbc2:	797b      	ldrb	r3, [r7, #5]
 800fbc4:	4413      	add	r3, r2
 800fbc6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fbc8:	4618      	mov	r0, r3
 800fbca:	370c      	adds	r7, #12
 800fbcc:	46bd      	mov	sp, r7
 800fbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd2:	4770      	bx	lr
 800fbd4:	20008568 	.word	0x20008568
 800fbd8:	20008564 	.word	0x20008564
 800fbdc:	20008562 	.word	0x20008562
 800fbe0:	2000855c 	.word	0x2000855c

0800fbe4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	b084      	sub	sp, #16
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d106      	bne.n	800fc00 <tcp_parseopt+0x1c>
 800fbf2:	4b32      	ldr	r3, [pc, #200]	; (800fcbc <tcp_parseopt+0xd8>)
 800fbf4:	f240 727d 	movw	r2, #1917	; 0x77d
 800fbf8:	4931      	ldr	r1, [pc, #196]	; (800fcc0 <tcp_parseopt+0xdc>)
 800fbfa:	4832      	ldr	r0, [pc, #200]	; (800fcc4 <tcp_parseopt+0xe0>)
 800fbfc:	f007 fad4 	bl	80171a8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800fc00:	4b31      	ldr	r3, [pc, #196]	; (800fcc8 <tcp_parseopt+0xe4>)
 800fc02:	881b      	ldrh	r3, [r3, #0]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d055      	beq.n	800fcb4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fc08:	4b30      	ldr	r3, [pc, #192]	; (800fccc <tcp_parseopt+0xe8>)
 800fc0a:	2200      	movs	r2, #0
 800fc0c:	801a      	strh	r2, [r3, #0]
 800fc0e:	e045      	b.n	800fc9c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800fc10:	f7ff ffb2 	bl	800fb78 <tcp_get_next_optbyte>
 800fc14:	4603      	mov	r3, r0
 800fc16:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800fc18:	7bfb      	ldrb	r3, [r7, #15]
 800fc1a:	2b02      	cmp	r3, #2
 800fc1c:	d006      	beq.n	800fc2c <tcp_parseopt+0x48>
 800fc1e:	2b02      	cmp	r3, #2
 800fc20:	dc2b      	bgt.n	800fc7a <tcp_parseopt+0x96>
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d041      	beq.n	800fcaa <tcp_parseopt+0xc6>
 800fc26:	2b01      	cmp	r3, #1
 800fc28:	d127      	bne.n	800fc7a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800fc2a:	e037      	b.n	800fc9c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800fc2c:	f7ff ffa4 	bl	800fb78 <tcp_get_next_optbyte>
 800fc30:	4603      	mov	r3, r0
 800fc32:	2b04      	cmp	r3, #4
 800fc34:	d13b      	bne.n	800fcae <tcp_parseopt+0xca>
 800fc36:	4b25      	ldr	r3, [pc, #148]	; (800fccc <tcp_parseopt+0xe8>)
 800fc38:	881b      	ldrh	r3, [r3, #0]
 800fc3a:	3301      	adds	r3, #1
 800fc3c:	4a22      	ldr	r2, [pc, #136]	; (800fcc8 <tcp_parseopt+0xe4>)
 800fc3e:	8812      	ldrh	r2, [r2, #0]
 800fc40:	4293      	cmp	r3, r2
 800fc42:	da34      	bge.n	800fcae <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800fc44:	f7ff ff98 	bl	800fb78 <tcp_get_next_optbyte>
 800fc48:	4603      	mov	r3, r0
 800fc4a:	b29b      	uxth	r3, r3
 800fc4c:	021b      	lsls	r3, r3, #8
 800fc4e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800fc50:	f7ff ff92 	bl	800fb78 <tcp_get_next_optbyte>
 800fc54:	4603      	mov	r3, r0
 800fc56:	b29a      	uxth	r2, r3
 800fc58:	89bb      	ldrh	r3, [r7, #12]
 800fc5a:	4313      	orrs	r3, r2
 800fc5c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800fc5e:	89bb      	ldrh	r3, [r7, #12]
 800fc60:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800fc64:	d804      	bhi.n	800fc70 <tcp_parseopt+0x8c>
 800fc66:	89bb      	ldrh	r3, [r7, #12]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d001      	beq.n	800fc70 <tcp_parseopt+0x8c>
 800fc6c:	89ba      	ldrh	r2, [r7, #12]
 800fc6e:	e001      	b.n	800fc74 <tcp_parseopt+0x90>
 800fc70:	f44f 7206 	mov.w	r2, #536	; 0x218
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800fc78:	e010      	b.n	800fc9c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800fc7a:	f7ff ff7d 	bl	800fb78 <tcp_get_next_optbyte>
 800fc7e:	4603      	mov	r3, r0
 800fc80:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800fc82:	7afb      	ldrb	r3, [r7, #11]
 800fc84:	2b01      	cmp	r3, #1
 800fc86:	d914      	bls.n	800fcb2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800fc88:	7afb      	ldrb	r3, [r7, #11]
 800fc8a:	b29a      	uxth	r2, r3
 800fc8c:	4b0f      	ldr	r3, [pc, #60]	; (800fccc <tcp_parseopt+0xe8>)
 800fc8e:	881b      	ldrh	r3, [r3, #0]
 800fc90:	4413      	add	r3, r2
 800fc92:	b29b      	uxth	r3, r3
 800fc94:	3b02      	subs	r3, #2
 800fc96:	b29a      	uxth	r2, r3
 800fc98:	4b0c      	ldr	r3, [pc, #48]	; (800fccc <tcp_parseopt+0xe8>)
 800fc9a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fc9c:	4b0b      	ldr	r3, [pc, #44]	; (800fccc <tcp_parseopt+0xe8>)
 800fc9e:	881a      	ldrh	r2, [r3, #0]
 800fca0:	4b09      	ldr	r3, [pc, #36]	; (800fcc8 <tcp_parseopt+0xe4>)
 800fca2:	881b      	ldrh	r3, [r3, #0]
 800fca4:	429a      	cmp	r2, r3
 800fca6:	d3b3      	bcc.n	800fc10 <tcp_parseopt+0x2c>
 800fca8:	e004      	b.n	800fcb4 <tcp_parseopt+0xd0>
          return;
 800fcaa:	bf00      	nop
 800fcac:	e002      	b.n	800fcb4 <tcp_parseopt+0xd0>
            return;
 800fcae:	bf00      	nop
 800fcb0:	e000      	b.n	800fcb4 <tcp_parseopt+0xd0>
            return;
 800fcb2:	bf00      	nop
      }
    }
  }
}
 800fcb4:	3710      	adds	r7, #16
 800fcb6:	46bd      	mov	sp, r7
 800fcb8:	bd80      	pop	{r7, pc}
 800fcba:	bf00      	nop
 800fcbc:	0801a39c 	.word	0x0801a39c
 800fcc0:	0801a800 	.word	0x0801a800
 800fcc4:	0801a3e8 	.word	0x0801a3e8
 800fcc8:	20008560 	.word	0x20008560
 800fccc:	20008568 	.word	0x20008568

0800fcd0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800fcd0:	b480      	push	{r7}
 800fcd2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800fcd4:	4b05      	ldr	r3, [pc, #20]	; (800fcec <tcp_trigger_input_pcb_close+0x1c>)
 800fcd6:	781b      	ldrb	r3, [r3, #0]
 800fcd8:	f043 0310 	orr.w	r3, r3, #16
 800fcdc:	b2da      	uxtb	r2, r3
 800fcde:	4b03      	ldr	r3, [pc, #12]	; (800fcec <tcp_trigger_input_pcb_close+0x1c>)
 800fce0:	701a      	strb	r2, [r3, #0]
}
 800fce2:	bf00      	nop
 800fce4:	46bd      	mov	sp, r7
 800fce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcea:	4770      	bx	lr
 800fcec:	20008579 	.word	0x20008579

0800fcf0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800fcf0:	b580      	push	{r7, lr}
 800fcf2:	b084      	sub	sp, #16
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	60f8      	str	r0, [r7, #12]
 800fcf8:	60b9      	str	r1, [r7, #8]
 800fcfa:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d00a      	beq.n	800fd18 <tcp_route+0x28>
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	7a1b      	ldrb	r3, [r3, #8]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d006      	beq.n	800fd18 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	7a1b      	ldrb	r3, [r3, #8]
 800fd0e:	4618      	mov	r0, r3
 800fd10:	f7fb f842 	bl	800ad98 <netif_get_by_index>
 800fd14:	4603      	mov	r3, r0
 800fd16:	e003      	b.n	800fd20 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800fd18:	6878      	ldr	r0, [r7, #4]
 800fd1a:	f005 fca9 	bl	8015670 <ip4_route>
 800fd1e:	4603      	mov	r3, r0
  }
}
 800fd20:	4618      	mov	r0, r3
 800fd22:	3710      	adds	r7, #16
 800fd24:	46bd      	mov	sp, r7
 800fd26:	bd80      	pop	{r7, pc}

0800fd28 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800fd28:	b590      	push	{r4, r7, lr}
 800fd2a:	b087      	sub	sp, #28
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	60f8      	str	r0, [r7, #12]
 800fd30:	60b9      	str	r1, [r7, #8]
 800fd32:	603b      	str	r3, [r7, #0]
 800fd34:	4613      	mov	r3, r2
 800fd36:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d105      	bne.n	800fd4a <tcp_create_segment+0x22>
 800fd3e:	4b44      	ldr	r3, [pc, #272]	; (800fe50 <tcp_create_segment+0x128>)
 800fd40:	22a3      	movs	r2, #163	; 0xa3
 800fd42:	4944      	ldr	r1, [pc, #272]	; (800fe54 <tcp_create_segment+0x12c>)
 800fd44:	4844      	ldr	r0, [pc, #272]	; (800fe58 <tcp_create_segment+0x130>)
 800fd46:	f007 fa2f 	bl	80171a8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800fd4a:	68bb      	ldr	r3, [r7, #8]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d105      	bne.n	800fd5c <tcp_create_segment+0x34>
 800fd50:	4b3f      	ldr	r3, [pc, #252]	; (800fe50 <tcp_create_segment+0x128>)
 800fd52:	22a4      	movs	r2, #164	; 0xa4
 800fd54:	4941      	ldr	r1, [pc, #260]	; (800fe5c <tcp_create_segment+0x134>)
 800fd56:	4840      	ldr	r0, [pc, #256]	; (800fe58 <tcp_create_segment+0x130>)
 800fd58:	f007 fa26 	bl	80171a8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fd5c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fd60:	009b      	lsls	r3, r3, #2
 800fd62:	b2db      	uxtb	r3, r3
 800fd64:	f003 0304 	and.w	r3, r3, #4
 800fd68:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800fd6a:	2003      	movs	r0, #3
 800fd6c:	f7fa fca0 	bl	800a6b0 <memp_malloc>
 800fd70:	6138      	str	r0, [r7, #16]
 800fd72:	693b      	ldr	r3, [r7, #16]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d104      	bne.n	800fd82 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800fd78:	68b8      	ldr	r0, [r7, #8]
 800fd7a:	f7fb fb9b 	bl	800b4b4 <pbuf_free>
    return NULL;
 800fd7e:	2300      	movs	r3, #0
 800fd80:	e061      	b.n	800fe46 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800fd82:	693b      	ldr	r3, [r7, #16]
 800fd84:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800fd88:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800fd8a:	693b      	ldr	r3, [r7, #16]
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800fd90:	693b      	ldr	r3, [r7, #16]
 800fd92:	68ba      	ldr	r2, [r7, #8]
 800fd94:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800fd96:	68bb      	ldr	r3, [r7, #8]
 800fd98:	891a      	ldrh	r2, [r3, #8]
 800fd9a:	7dfb      	ldrb	r3, [r7, #23]
 800fd9c:	b29b      	uxth	r3, r3
 800fd9e:	429a      	cmp	r2, r3
 800fda0:	d205      	bcs.n	800fdae <tcp_create_segment+0x86>
 800fda2:	4b2b      	ldr	r3, [pc, #172]	; (800fe50 <tcp_create_segment+0x128>)
 800fda4:	22b0      	movs	r2, #176	; 0xb0
 800fda6:	492e      	ldr	r1, [pc, #184]	; (800fe60 <tcp_create_segment+0x138>)
 800fda8:	482b      	ldr	r0, [pc, #172]	; (800fe58 <tcp_create_segment+0x130>)
 800fdaa:	f007 f9fd 	bl	80171a8 <iprintf>
  seg->len = p->tot_len - optlen;
 800fdae:	68bb      	ldr	r3, [r7, #8]
 800fdb0:	891a      	ldrh	r2, [r3, #8]
 800fdb2:	7dfb      	ldrb	r3, [r7, #23]
 800fdb4:	b29b      	uxth	r3, r3
 800fdb6:	1ad3      	subs	r3, r2, r3
 800fdb8:	b29a      	uxth	r2, r3
 800fdba:	693b      	ldr	r3, [r7, #16]
 800fdbc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800fdbe:	2114      	movs	r1, #20
 800fdc0:	68b8      	ldr	r0, [r7, #8]
 800fdc2:	f7fb fae1 	bl	800b388 <pbuf_add_header>
 800fdc6:	4603      	mov	r3, r0
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d004      	beq.n	800fdd6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800fdcc:	6938      	ldr	r0, [r7, #16]
 800fdce:	f7fd f804 	bl	800cdda <tcp_seg_free>
    return NULL;
 800fdd2:	2300      	movs	r3, #0
 800fdd4:	e037      	b.n	800fe46 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800fdd6:	693b      	ldr	r3, [r7, #16]
 800fdd8:	685b      	ldr	r3, [r3, #4]
 800fdda:	685a      	ldr	r2, [r3, #4]
 800fddc:	693b      	ldr	r3, [r7, #16]
 800fdde:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	8ada      	ldrh	r2, [r3, #22]
 800fde4:	693b      	ldr	r3, [r7, #16]
 800fde6:	68dc      	ldr	r4, [r3, #12]
 800fde8:	4610      	mov	r0, r2
 800fdea:	f7f9 ffab 	bl	8009d44 <lwip_htons>
 800fdee:	4603      	mov	r3, r0
 800fdf0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	8b1a      	ldrh	r2, [r3, #24]
 800fdf6:	693b      	ldr	r3, [r7, #16]
 800fdf8:	68dc      	ldr	r4, [r3, #12]
 800fdfa:	4610      	mov	r0, r2
 800fdfc:	f7f9 ffa2 	bl	8009d44 <lwip_htons>
 800fe00:	4603      	mov	r3, r0
 800fe02:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800fe04:	693b      	ldr	r3, [r7, #16]
 800fe06:	68dc      	ldr	r4, [r3, #12]
 800fe08:	6838      	ldr	r0, [r7, #0]
 800fe0a:	f7f9 ffb0 	bl	8009d6e <lwip_htonl>
 800fe0e:	4603      	mov	r3, r0
 800fe10:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800fe12:	7dfb      	ldrb	r3, [r7, #23]
 800fe14:	089b      	lsrs	r3, r3, #2
 800fe16:	b2db      	uxtb	r3, r3
 800fe18:	b29b      	uxth	r3, r3
 800fe1a:	3305      	adds	r3, #5
 800fe1c:	b29b      	uxth	r3, r3
 800fe1e:	031b      	lsls	r3, r3, #12
 800fe20:	b29a      	uxth	r2, r3
 800fe22:	79fb      	ldrb	r3, [r7, #7]
 800fe24:	b29b      	uxth	r3, r3
 800fe26:	4313      	orrs	r3, r2
 800fe28:	b29a      	uxth	r2, r3
 800fe2a:	693b      	ldr	r3, [r7, #16]
 800fe2c:	68dc      	ldr	r4, [r3, #12]
 800fe2e:	4610      	mov	r0, r2
 800fe30:	f7f9 ff88 	bl	8009d44 <lwip_htons>
 800fe34:	4603      	mov	r3, r0
 800fe36:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800fe38:	693b      	ldr	r3, [r7, #16]
 800fe3a:	68db      	ldr	r3, [r3, #12]
 800fe3c:	2200      	movs	r2, #0
 800fe3e:	749a      	strb	r2, [r3, #18]
 800fe40:	2200      	movs	r2, #0
 800fe42:	74da      	strb	r2, [r3, #19]
  return seg;
 800fe44:	693b      	ldr	r3, [r7, #16]
}
 800fe46:	4618      	mov	r0, r3
 800fe48:	371c      	adds	r7, #28
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	bd90      	pop	{r4, r7, pc}
 800fe4e:	bf00      	nop
 800fe50:	0801a81c 	.word	0x0801a81c
 800fe54:	0801a850 	.word	0x0801a850
 800fe58:	0801a870 	.word	0x0801a870
 800fe5c:	0801a898 	.word	0x0801a898
 800fe60:	0801a8bc 	.word	0x0801a8bc

0800fe64 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b086      	sub	sp, #24
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	607b      	str	r3, [r7, #4]
 800fe6c:	4603      	mov	r3, r0
 800fe6e:	73fb      	strb	r3, [r7, #15]
 800fe70:	460b      	mov	r3, r1
 800fe72:	81bb      	strh	r3, [r7, #12]
 800fe74:	4613      	mov	r3, r2
 800fe76:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800fe78:	89bb      	ldrh	r3, [r7, #12]
 800fe7a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d105      	bne.n	800fe8e <tcp_pbuf_prealloc+0x2a>
 800fe82:	4b30      	ldr	r3, [pc, #192]	; (800ff44 <tcp_pbuf_prealloc+0xe0>)
 800fe84:	22e8      	movs	r2, #232	; 0xe8
 800fe86:	4930      	ldr	r1, [pc, #192]	; (800ff48 <tcp_pbuf_prealloc+0xe4>)
 800fe88:	4830      	ldr	r0, [pc, #192]	; (800ff4c <tcp_pbuf_prealloc+0xe8>)
 800fe8a:	f007 f98d 	bl	80171a8 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800fe8e:	6a3b      	ldr	r3, [r7, #32]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d105      	bne.n	800fea0 <tcp_pbuf_prealloc+0x3c>
 800fe94:	4b2b      	ldr	r3, [pc, #172]	; (800ff44 <tcp_pbuf_prealloc+0xe0>)
 800fe96:	22e9      	movs	r2, #233	; 0xe9
 800fe98:	492d      	ldr	r1, [pc, #180]	; (800ff50 <tcp_pbuf_prealloc+0xec>)
 800fe9a:	482c      	ldr	r0, [pc, #176]	; (800ff4c <tcp_pbuf_prealloc+0xe8>)
 800fe9c:	f007 f984 	bl	80171a8 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800fea0:	89ba      	ldrh	r2, [r7, #12]
 800fea2:	897b      	ldrh	r3, [r7, #10]
 800fea4:	429a      	cmp	r2, r3
 800fea6:	d221      	bcs.n	800feec <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800fea8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800feac:	f003 0302 	and.w	r3, r3, #2
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d111      	bne.n	800fed8 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800feb4:	6a3b      	ldr	r3, [r7, #32]
 800feb6:	8b5b      	ldrh	r3, [r3, #26]
 800feb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800febc:	2b00      	cmp	r3, #0
 800febe:	d115      	bne.n	800feec <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800fec0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d007      	beq.n	800fed8 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800fec8:	6a3b      	ldr	r3, [r7, #32]
 800feca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d103      	bne.n	800fed8 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800fed0:	6a3b      	ldr	r3, [r7, #32]
 800fed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d009      	beq.n	800feec <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800fed8:	89bb      	ldrh	r3, [r7, #12]
 800feda:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800fede:	f023 0203 	bic.w	r2, r3, #3
 800fee2:	897b      	ldrh	r3, [r7, #10]
 800fee4:	4293      	cmp	r3, r2
 800fee6:	bf28      	it	cs
 800fee8:	4613      	movcs	r3, r2
 800feea:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800feec:	8af9      	ldrh	r1, [r7, #22]
 800feee:	7bfb      	ldrb	r3, [r7, #15]
 800fef0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fef4:	4618      	mov	r0, r3
 800fef6:	f7fa fff9 	bl	800aeec <pbuf_alloc>
 800fefa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fefc:	693b      	ldr	r3, [r7, #16]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d101      	bne.n	800ff06 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800ff02:	2300      	movs	r3, #0
 800ff04:	e019      	b.n	800ff3a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800ff06:	693b      	ldr	r3, [r7, #16]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d006      	beq.n	800ff1c <tcp_pbuf_prealloc+0xb8>
 800ff0e:	4b0d      	ldr	r3, [pc, #52]	; (800ff44 <tcp_pbuf_prealloc+0xe0>)
 800ff10:	f240 120b 	movw	r2, #267	; 0x10b
 800ff14:	490f      	ldr	r1, [pc, #60]	; (800ff54 <tcp_pbuf_prealloc+0xf0>)
 800ff16:	480d      	ldr	r0, [pc, #52]	; (800ff4c <tcp_pbuf_prealloc+0xe8>)
 800ff18:	f007 f946 	bl	80171a8 <iprintf>
  *oversize = p->len - length;
 800ff1c:	693b      	ldr	r3, [r7, #16]
 800ff1e:	895a      	ldrh	r2, [r3, #10]
 800ff20:	89bb      	ldrh	r3, [r7, #12]
 800ff22:	1ad3      	subs	r3, r2, r3
 800ff24:	b29a      	uxth	r2, r3
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800ff2a:	693b      	ldr	r3, [r7, #16]
 800ff2c:	89ba      	ldrh	r2, [r7, #12]
 800ff2e:	811a      	strh	r2, [r3, #8]
 800ff30:	693b      	ldr	r3, [r7, #16]
 800ff32:	891a      	ldrh	r2, [r3, #8]
 800ff34:	693b      	ldr	r3, [r7, #16]
 800ff36:	815a      	strh	r2, [r3, #10]
  return p;
 800ff38:	693b      	ldr	r3, [r7, #16]
}
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	3718      	adds	r7, #24
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	bd80      	pop	{r7, pc}
 800ff42:	bf00      	nop
 800ff44:	0801a81c 	.word	0x0801a81c
 800ff48:	0801a8d4 	.word	0x0801a8d4
 800ff4c:	0801a870 	.word	0x0801a870
 800ff50:	0801a8f8 	.word	0x0801a8f8
 800ff54:	0801a918 	.word	0x0801a918

0800ff58 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b082      	sub	sp, #8
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
 800ff60:	460b      	mov	r3, r1
 800ff62:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d106      	bne.n	800ff78 <tcp_write_checks+0x20>
 800ff6a:	4b33      	ldr	r3, [pc, #204]	; (8010038 <tcp_write_checks+0xe0>)
 800ff6c:	f240 1233 	movw	r2, #307	; 0x133
 800ff70:	4932      	ldr	r1, [pc, #200]	; (801003c <tcp_write_checks+0xe4>)
 800ff72:	4833      	ldr	r0, [pc, #204]	; (8010040 <tcp_write_checks+0xe8>)
 800ff74:	f007 f918 	bl	80171a8 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	7d1b      	ldrb	r3, [r3, #20]
 800ff7c:	2b04      	cmp	r3, #4
 800ff7e:	d00e      	beq.n	800ff9e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800ff84:	2b07      	cmp	r3, #7
 800ff86:	d00a      	beq.n	800ff9e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800ff8c:	2b02      	cmp	r3, #2
 800ff8e:	d006      	beq.n	800ff9e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800ff94:	2b03      	cmp	r3, #3
 800ff96:	d002      	beq.n	800ff9e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800ff98:	f06f 030a 	mvn.w	r3, #10
 800ff9c:	e048      	b.n	8010030 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800ff9e:	887b      	ldrh	r3, [r7, #2]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d101      	bne.n	800ffa8 <tcp_write_checks+0x50>
    return ERR_OK;
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	e043      	b.n	8010030 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ffae:	887a      	ldrh	r2, [r7, #2]
 800ffb0:	429a      	cmp	r2, r3
 800ffb2:	d909      	bls.n	800ffc8 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	8b5b      	ldrh	r3, [r3, #26]
 800ffb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ffbc:	b29a      	uxth	r2, r3
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800ffc2:	f04f 33ff 	mov.w	r3, #4294967295
 800ffc6:	e033      	b.n	8010030 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ffce:	2b08      	cmp	r3, #8
 800ffd0:	d909      	bls.n	800ffe6 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	8b5b      	ldrh	r3, [r3, #26]
 800ffd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ffda:	b29a      	uxth	r2, r3
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800ffe0:	f04f 33ff 	mov.w	r3, #4294967295
 800ffe4:	e024      	b.n	8010030 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d00f      	beq.n	8010010 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d11a      	bne.n	801002e <tcp_write_checks+0xd6>
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d116      	bne.n	801002e <tcp_write_checks+0xd6>
 8010000:	4b0d      	ldr	r3, [pc, #52]	; (8010038 <tcp_write_checks+0xe0>)
 8010002:	f240 1255 	movw	r2, #341	; 0x155
 8010006:	490f      	ldr	r1, [pc, #60]	; (8010044 <tcp_write_checks+0xec>)
 8010008:	480d      	ldr	r0, [pc, #52]	; (8010040 <tcp_write_checks+0xe8>)
 801000a:	f007 f8cd 	bl	80171a8 <iprintf>
 801000e:	e00e      	b.n	801002e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010014:	2b00      	cmp	r3, #0
 8010016:	d103      	bne.n	8010020 <tcp_write_checks+0xc8>
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801001c:	2b00      	cmp	r3, #0
 801001e:	d006      	beq.n	801002e <tcp_write_checks+0xd6>
 8010020:	4b05      	ldr	r3, [pc, #20]	; (8010038 <tcp_write_checks+0xe0>)
 8010022:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8010026:	4908      	ldr	r1, [pc, #32]	; (8010048 <tcp_write_checks+0xf0>)
 8010028:	4805      	ldr	r0, [pc, #20]	; (8010040 <tcp_write_checks+0xe8>)
 801002a:	f007 f8bd 	bl	80171a8 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801002e:	2300      	movs	r3, #0
}
 8010030:	4618      	mov	r0, r3
 8010032:	3708      	adds	r7, #8
 8010034:	46bd      	mov	sp, r7
 8010036:	bd80      	pop	{r7, pc}
 8010038:	0801a81c 	.word	0x0801a81c
 801003c:	0801a92c 	.word	0x0801a92c
 8010040:	0801a870 	.word	0x0801a870
 8010044:	0801a94c 	.word	0x0801a94c
 8010048:	0801a988 	.word	0x0801a988

0801004c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801004c:	b590      	push	{r4, r7, lr}
 801004e:	b09b      	sub	sp, #108	; 0x6c
 8010050:	af04      	add	r7, sp, #16
 8010052:	60f8      	str	r0, [r7, #12]
 8010054:	60b9      	str	r1, [r7, #8]
 8010056:	4611      	mov	r1, r2
 8010058:	461a      	mov	r2, r3
 801005a:	460b      	mov	r3, r1
 801005c:	80fb      	strh	r3, [r7, #6]
 801005e:	4613      	mov	r3, r2
 8010060:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8010062:	2300      	movs	r3, #0
 8010064:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8010066:	2300      	movs	r3, #0
 8010068:	653b      	str	r3, [r7, #80]	; 0x50
 801006a:	2300      	movs	r3, #0
 801006c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801006e:	2300      	movs	r3, #0
 8010070:	64bb      	str	r3, [r7, #72]	; 0x48
 8010072:	2300      	movs	r3, #0
 8010074:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8010076:	2300      	movs	r3, #0
 8010078:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801007c:	2300      	movs	r3, #0
 801007e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8010082:	2300      	movs	r3, #0
 8010084:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8010086:	2300      	movs	r3, #0
 8010088:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801008a:	2300      	movs	r3, #0
 801008c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	2b00      	cmp	r3, #0
 8010092:	d109      	bne.n	80100a8 <tcp_write+0x5c>
 8010094:	4ba4      	ldr	r3, [pc, #656]	; (8010328 <tcp_write+0x2dc>)
 8010096:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801009a:	49a4      	ldr	r1, [pc, #656]	; (801032c <tcp_write+0x2e0>)
 801009c:	48a4      	ldr	r0, [pc, #656]	; (8010330 <tcp_write+0x2e4>)
 801009e:	f007 f883 	bl	80171a8 <iprintf>
 80100a2:	f06f 030f 	mvn.w	r3, #15
 80100a6:	e32a      	b.n	80106fe <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80100ae:	085b      	lsrs	r3, r3, #1
 80100b0:	b29a      	uxth	r2, r3
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80100b6:	4293      	cmp	r3, r2
 80100b8:	bf28      	it	cs
 80100ba:	4613      	movcs	r3, r2
 80100bc:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80100be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d102      	bne.n	80100ca <tcp_write+0x7e>
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80100c8:	e000      	b.n	80100cc <tcp_write+0x80>
 80100ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80100cc:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80100ce:	68bb      	ldr	r3, [r7, #8]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d109      	bne.n	80100e8 <tcp_write+0x9c>
 80100d4:	4b94      	ldr	r3, [pc, #592]	; (8010328 <tcp_write+0x2dc>)
 80100d6:	f240 12ad 	movw	r2, #429	; 0x1ad
 80100da:	4996      	ldr	r1, [pc, #600]	; (8010334 <tcp_write+0x2e8>)
 80100dc:	4894      	ldr	r0, [pc, #592]	; (8010330 <tcp_write+0x2e4>)
 80100de:	f007 f863 	bl	80171a8 <iprintf>
 80100e2:	f06f 030f 	mvn.w	r3, #15
 80100e6:	e30a      	b.n	80106fe <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80100e8:	88fb      	ldrh	r3, [r7, #6]
 80100ea:	4619      	mov	r1, r3
 80100ec:	68f8      	ldr	r0, [r7, #12]
 80100ee:	f7ff ff33 	bl	800ff58 <tcp_write_checks>
 80100f2:	4603      	mov	r3, r0
 80100f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80100f8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d002      	beq.n	8010106 <tcp_write+0xba>
    return err;
 8010100:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010104:	e2fb      	b.n	80106fe <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801010c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010110:	2300      	movs	r3, #0
 8010112:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801011a:	2b00      	cmp	r3, #0
 801011c:	f000 80f6 	beq.w	801030c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010124:	653b      	str	r3, [r7, #80]	; 0x50
 8010126:	e002      	b.n	801012e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8010128:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801012e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d1f8      	bne.n	8010128 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8010136:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010138:	7a9b      	ldrb	r3, [r3, #10]
 801013a:	009b      	lsls	r3, r3, #2
 801013c:	b29b      	uxth	r3, r3
 801013e:	f003 0304 	and.w	r3, r3, #4
 8010142:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8010144:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010148:	891b      	ldrh	r3, [r3, #8]
 801014a:	4619      	mov	r1, r3
 801014c:	8c3b      	ldrh	r3, [r7, #32]
 801014e:	440b      	add	r3, r1
 8010150:	429a      	cmp	r2, r3
 8010152:	da06      	bge.n	8010162 <tcp_write+0x116>
 8010154:	4b74      	ldr	r3, [pc, #464]	; (8010328 <tcp_write+0x2dc>)
 8010156:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801015a:	4977      	ldr	r1, [pc, #476]	; (8010338 <tcp_write+0x2ec>)
 801015c:	4874      	ldr	r0, [pc, #464]	; (8010330 <tcp_write+0x2e4>)
 801015e:	f007 f823 	bl	80171a8 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8010162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010164:	891a      	ldrh	r2, [r3, #8]
 8010166:	8c3b      	ldrh	r3, [r7, #32]
 8010168:	4413      	add	r3, r2
 801016a:	b29b      	uxth	r3, r3
 801016c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801016e:	1ad3      	subs	r3, r2, r3
 8010170:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010178:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801017a:	8a7b      	ldrh	r3, [r7, #18]
 801017c:	2b00      	cmp	r3, #0
 801017e:	d026      	beq.n	80101ce <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8010180:	8a7b      	ldrh	r3, [r7, #18]
 8010182:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010184:	429a      	cmp	r2, r3
 8010186:	d206      	bcs.n	8010196 <tcp_write+0x14a>
 8010188:	4b67      	ldr	r3, [pc, #412]	; (8010328 <tcp_write+0x2dc>)
 801018a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801018e:	496b      	ldr	r1, [pc, #428]	; (801033c <tcp_write+0x2f0>)
 8010190:	4867      	ldr	r0, [pc, #412]	; (8010330 <tcp_write+0x2e4>)
 8010192:	f007 f809 	bl	80171a8 <iprintf>
      seg = last_unsent;
 8010196:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010198:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801019a:	8a7b      	ldrh	r3, [r7, #18]
 801019c:	88fa      	ldrh	r2, [r7, #6]
 801019e:	4293      	cmp	r3, r2
 80101a0:	bf28      	it	cs
 80101a2:	4613      	movcs	r3, r2
 80101a4:	b29b      	uxth	r3, r3
 80101a6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80101a8:	4293      	cmp	r3, r2
 80101aa:	bf28      	it	cs
 80101ac:	4613      	movcs	r3, r2
 80101ae:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80101b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80101b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80101b6:	4413      	add	r3, r2
 80101b8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80101bc:	8a7a      	ldrh	r2, [r7, #18]
 80101be:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80101c0:	1ad3      	subs	r3, r2, r3
 80101c2:	b29b      	uxth	r3, r3
 80101c4:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80101c6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80101c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80101ca:	1ad3      	subs	r3, r2, r3
 80101cc:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80101ce:	8a7b      	ldrh	r3, [r7, #18]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d00b      	beq.n	80101ec <tcp_write+0x1a0>
 80101d4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80101d8:	88fb      	ldrh	r3, [r7, #6]
 80101da:	429a      	cmp	r2, r3
 80101dc:	d006      	beq.n	80101ec <tcp_write+0x1a0>
 80101de:	4b52      	ldr	r3, [pc, #328]	; (8010328 <tcp_write+0x2dc>)
 80101e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80101e4:	4956      	ldr	r1, [pc, #344]	; (8010340 <tcp_write+0x2f4>)
 80101e6:	4852      	ldr	r0, [pc, #328]	; (8010330 <tcp_write+0x2e4>)
 80101e8:	f006 ffde 	bl	80171a8 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80101ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80101f0:	88fb      	ldrh	r3, [r7, #6]
 80101f2:	429a      	cmp	r2, r3
 80101f4:	f080 8167 	bcs.w	80104c6 <tcp_write+0x47a>
 80101f8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	f000 8163 	beq.w	80104c6 <tcp_write+0x47a>
 8010200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010202:	891b      	ldrh	r3, [r3, #8]
 8010204:	2b00      	cmp	r3, #0
 8010206:	f000 815e 	beq.w	80104c6 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801020a:	88fa      	ldrh	r2, [r7, #6]
 801020c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010210:	1ad2      	subs	r2, r2, r3
 8010212:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010214:	4293      	cmp	r3, r2
 8010216:	bfa8      	it	ge
 8010218:	4613      	movge	r3, r2
 801021a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801021c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801021e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010220:	797b      	ldrb	r3, [r7, #5]
 8010222:	f003 0301 	and.w	r3, r3, #1
 8010226:	2b00      	cmp	r3, #0
 8010228:	d027      	beq.n	801027a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801022a:	f107 0012 	add.w	r0, r7, #18
 801022e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010230:	8bf9      	ldrh	r1, [r7, #30]
 8010232:	2301      	movs	r3, #1
 8010234:	9302      	str	r3, [sp, #8]
 8010236:	797b      	ldrb	r3, [r7, #5]
 8010238:	9301      	str	r3, [sp, #4]
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	9300      	str	r3, [sp, #0]
 801023e:	4603      	mov	r3, r0
 8010240:	2000      	movs	r0, #0
 8010242:	f7ff fe0f 	bl	800fe64 <tcp_pbuf_prealloc>
 8010246:	6578      	str	r0, [r7, #84]	; 0x54
 8010248:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801024a:	2b00      	cmp	r3, #0
 801024c:	f000 8225 	beq.w	801069a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8010250:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010252:	6858      	ldr	r0, [r3, #4]
 8010254:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010258:	68ba      	ldr	r2, [r7, #8]
 801025a:	4413      	add	r3, r2
 801025c:	8bfa      	ldrh	r2, [r7, #30]
 801025e:	4619      	mov	r1, r3
 8010260:	f006 ff17 	bl	8017092 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8010264:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010266:	f7fb f9b3 	bl	800b5d0 <pbuf_clen>
 801026a:	4603      	mov	r3, r0
 801026c:	461a      	mov	r2, r3
 801026e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010272:	4413      	add	r3, r2
 8010274:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8010278:	e041      	b.n	80102fe <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801027a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801027c:	685b      	ldr	r3, [r3, #4]
 801027e:	637b      	str	r3, [r7, #52]	; 0x34
 8010280:	e002      	b.n	8010288 <tcp_write+0x23c>
 8010282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	637b      	str	r3, [r7, #52]	; 0x34
 8010288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d1f8      	bne.n	8010282 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8010290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010292:	7b1b      	ldrb	r3, [r3, #12]
 8010294:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010298:	2b00      	cmp	r3, #0
 801029a:	d115      	bne.n	80102c8 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801029c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801029e:	685b      	ldr	r3, [r3, #4]
 80102a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80102a2:	8952      	ldrh	r2, [r2, #10]
 80102a4:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80102a6:	68ba      	ldr	r2, [r7, #8]
 80102a8:	429a      	cmp	r2, r3
 80102aa:	d10d      	bne.n	80102c8 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80102ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d006      	beq.n	80102c2 <tcp_write+0x276>
 80102b4:	4b1c      	ldr	r3, [pc, #112]	; (8010328 <tcp_write+0x2dc>)
 80102b6:	f240 2231 	movw	r2, #561	; 0x231
 80102ba:	4922      	ldr	r1, [pc, #136]	; (8010344 <tcp_write+0x2f8>)
 80102bc:	481c      	ldr	r0, [pc, #112]	; (8010330 <tcp_write+0x2e4>)
 80102be:	f006 ff73 	bl	80171a8 <iprintf>
          extendlen = seglen;
 80102c2:	8bfb      	ldrh	r3, [r7, #30]
 80102c4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80102c6:	e01a      	b.n	80102fe <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80102c8:	8bfb      	ldrh	r3, [r7, #30]
 80102ca:	2201      	movs	r2, #1
 80102cc:	4619      	mov	r1, r3
 80102ce:	2000      	movs	r0, #0
 80102d0:	f7fa fe0c 	bl	800aeec <pbuf_alloc>
 80102d4:	6578      	str	r0, [r7, #84]	; 0x54
 80102d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80102d8:	2b00      	cmp	r3, #0
 80102da:	f000 81e0 	beq.w	801069e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80102de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80102e2:	68ba      	ldr	r2, [r7, #8]
 80102e4:	441a      	add	r2, r3
 80102e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80102e8:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80102ea:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80102ec:	f7fb f970 	bl	800b5d0 <pbuf_clen>
 80102f0:	4603      	mov	r3, r0
 80102f2:	461a      	mov	r2, r3
 80102f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80102f8:	4413      	add	r3, r2
 80102fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80102fe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010302:	8bfb      	ldrh	r3, [r7, #30]
 8010304:	4413      	add	r3, r2
 8010306:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801030a:	e0dc      	b.n	80104c6 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010312:	2b00      	cmp	r3, #0
 8010314:	f000 80d7 	beq.w	80104c6 <tcp_write+0x47a>
 8010318:	4b03      	ldr	r3, [pc, #12]	; (8010328 <tcp_write+0x2dc>)
 801031a:	f240 224a 	movw	r2, #586	; 0x24a
 801031e:	490a      	ldr	r1, [pc, #40]	; (8010348 <tcp_write+0x2fc>)
 8010320:	4803      	ldr	r0, [pc, #12]	; (8010330 <tcp_write+0x2e4>)
 8010322:	f006 ff41 	bl	80171a8 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8010326:	e0ce      	b.n	80104c6 <tcp_write+0x47a>
 8010328:	0801a81c 	.word	0x0801a81c
 801032c:	0801a9bc 	.word	0x0801a9bc
 8010330:	0801a870 	.word	0x0801a870
 8010334:	0801a9d4 	.word	0x0801a9d4
 8010338:	0801aa08 	.word	0x0801aa08
 801033c:	0801aa20 	.word	0x0801aa20
 8010340:	0801aa40 	.word	0x0801aa40
 8010344:	0801aa60 	.word	0x0801aa60
 8010348:	0801aa8c 	.word	0x0801aa8c
    struct pbuf *p;
    u16_t left = len - pos;
 801034c:	88fa      	ldrh	r2, [r7, #6]
 801034e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010352:	1ad3      	subs	r3, r2, r3
 8010354:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8010356:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801035a:	b29b      	uxth	r3, r3
 801035c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801035e:	1ad3      	subs	r3, r2, r3
 8010360:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8010362:	8b7a      	ldrh	r2, [r7, #26]
 8010364:	8bbb      	ldrh	r3, [r7, #28]
 8010366:	4293      	cmp	r3, r2
 8010368:	bf28      	it	cs
 801036a:	4613      	movcs	r3, r2
 801036c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801036e:	797b      	ldrb	r3, [r7, #5]
 8010370:	f003 0301 	and.w	r3, r3, #1
 8010374:	2b00      	cmp	r3, #0
 8010376:	d036      	beq.n	80103e6 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8010378:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801037c:	b29a      	uxth	r2, r3
 801037e:	8b3b      	ldrh	r3, [r7, #24]
 8010380:	4413      	add	r3, r2
 8010382:	b299      	uxth	r1, r3
 8010384:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010386:	2b00      	cmp	r3, #0
 8010388:	bf0c      	ite	eq
 801038a:	2301      	moveq	r3, #1
 801038c:	2300      	movne	r3, #0
 801038e:	b2db      	uxtb	r3, r3
 8010390:	f107 0012 	add.w	r0, r7, #18
 8010394:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010396:	9302      	str	r3, [sp, #8]
 8010398:	797b      	ldrb	r3, [r7, #5]
 801039a:	9301      	str	r3, [sp, #4]
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	9300      	str	r3, [sp, #0]
 80103a0:	4603      	mov	r3, r0
 80103a2:	2036      	movs	r0, #54	; 0x36
 80103a4:	f7ff fd5e 	bl	800fe64 <tcp_pbuf_prealloc>
 80103a8:	6338      	str	r0, [r7, #48]	; 0x30
 80103aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	f000 8178 	beq.w	80106a2 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80103b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103b4:	895b      	ldrh	r3, [r3, #10]
 80103b6:	8b3a      	ldrh	r2, [r7, #24]
 80103b8:	429a      	cmp	r2, r3
 80103ba:	d906      	bls.n	80103ca <tcp_write+0x37e>
 80103bc:	4b8c      	ldr	r3, [pc, #560]	; (80105f0 <tcp_write+0x5a4>)
 80103be:	f240 2266 	movw	r2, #614	; 0x266
 80103c2:	498c      	ldr	r1, [pc, #560]	; (80105f4 <tcp_write+0x5a8>)
 80103c4:	488c      	ldr	r0, [pc, #560]	; (80105f8 <tcp_write+0x5ac>)
 80103c6:	f006 feef 	bl	80171a8 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80103ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103cc:	685a      	ldr	r2, [r3, #4]
 80103ce:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80103d2:	18d0      	adds	r0, r2, r3
 80103d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80103d8:	68ba      	ldr	r2, [r7, #8]
 80103da:	4413      	add	r3, r2
 80103dc:	8b3a      	ldrh	r2, [r7, #24]
 80103de:	4619      	mov	r1, r3
 80103e0:	f006 fe57 	bl	8017092 <memcpy>
 80103e4:	e02f      	b.n	8010446 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80103e6:	8a7b      	ldrh	r3, [r7, #18]
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d006      	beq.n	80103fa <tcp_write+0x3ae>
 80103ec:	4b80      	ldr	r3, [pc, #512]	; (80105f0 <tcp_write+0x5a4>)
 80103ee:	f240 2271 	movw	r2, #625	; 0x271
 80103f2:	4982      	ldr	r1, [pc, #520]	; (80105fc <tcp_write+0x5b0>)
 80103f4:	4880      	ldr	r0, [pc, #512]	; (80105f8 <tcp_write+0x5ac>)
 80103f6:	f006 fed7 	bl	80171a8 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80103fa:	8b3b      	ldrh	r3, [r7, #24]
 80103fc:	2201      	movs	r2, #1
 80103fe:	4619      	mov	r1, r3
 8010400:	2036      	movs	r0, #54	; 0x36
 8010402:	f7fa fd73 	bl	800aeec <pbuf_alloc>
 8010406:	6178      	str	r0, [r7, #20]
 8010408:	697b      	ldr	r3, [r7, #20]
 801040a:	2b00      	cmp	r3, #0
 801040c:	f000 814b 	beq.w	80106a6 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8010410:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010414:	68ba      	ldr	r2, [r7, #8]
 8010416:	441a      	add	r2, r3
 8010418:	697b      	ldr	r3, [r7, #20]
 801041a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801041c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010420:	b29b      	uxth	r3, r3
 8010422:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010426:	4619      	mov	r1, r3
 8010428:	2036      	movs	r0, #54	; 0x36
 801042a:	f7fa fd5f 	bl	800aeec <pbuf_alloc>
 801042e:	6338      	str	r0, [r7, #48]	; 0x30
 8010430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010432:	2b00      	cmp	r3, #0
 8010434:	d103      	bne.n	801043e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8010436:	6978      	ldr	r0, [r7, #20]
 8010438:	f7fb f83c 	bl	800b4b4 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801043c:	e136      	b.n	80106ac <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801043e:	6979      	ldr	r1, [r7, #20]
 8010440:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010442:	f7fb f905 	bl	800b650 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8010446:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010448:	f7fb f8c2 	bl	800b5d0 <pbuf_clen>
 801044c:	4603      	mov	r3, r0
 801044e:	461a      	mov	r2, r3
 8010450:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010454:	4413      	add	r3, r2
 8010456:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801045a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801045e:	2b09      	cmp	r3, #9
 8010460:	d903      	bls.n	801046a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8010462:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010464:	f7fb f826 	bl	800b4b4 <pbuf_free>
      goto memerr;
 8010468:	e120      	b.n	80106ac <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801046e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010472:	441a      	add	r2, r3
 8010474:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010478:	9300      	str	r3, [sp, #0]
 801047a:	4613      	mov	r3, r2
 801047c:	2200      	movs	r2, #0
 801047e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010480:	68f8      	ldr	r0, [r7, #12]
 8010482:	f7ff fc51 	bl	800fd28 <tcp_create_segment>
 8010486:	64f8      	str	r0, [r7, #76]	; 0x4c
 8010488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801048a:	2b00      	cmp	r3, #0
 801048c:	f000 810d 	beq.w	80106aa <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8010490:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010492:	2b00      	cmp	r3, #0
 8010494:	d102      	bne.n	801049c <tcp_write+0x450>
      queue = seg;
 8010496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010498:	647b      	str	r3, [r7, #68]	; 0x44
 801049a:	e00c      	b.n	80104b6 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801049c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d106      	bne.n	80104b0 <tcp_write+0x464>
 80104a2:	4b53      	ldr	r3, [pc, #332]	; (80105f0 <tcp_write+0x5a4>)
 80104a4:	f240 22ab 	movw	r2, #683	; 0x2ab
 80104a8:	4955      	ldr	r1, [pc, #340]	; (8010600 <tcp_write+0x5b4>)
 80104aa:	4853      	ldr	r0, [pc, #332]	; (80105f8 <tcp_write+0x5ac>)
 80104ac:	f006 fe7c 	bl	80171a8 <iprintf>
      prev_seg->next = seg;
 80104b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80104b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80104b4:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80104b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80104b8:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80104ba:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80104be:	8b3b      	ldrh	r3, [r7, #24]
 80104c0:	4413      	add	r3, r2
 80104c2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80104c6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80104ca:	88fb      	ldrh	r3, [r7, #6]
 80104cc:	429a      	cmp	r2, r3
 80104ce:	f4ff af3d 	bcc.w	801034c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80104d2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d02c      	beq.n	8010532 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80104d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80104da:	685b      	ldr	r3, [r3, #4]
 80104dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80104de:	e01e      	b.n	801051e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80104e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104e2:	891a      	ldrh	r2, [r3, #8]
 80104e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80104e6:	4413      	add	r3, r2
 80104e8:	b29a      	uxth	r2, r3
 80104ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104ec:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80104ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d110      	bne.n	8010518 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80104f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104f8:	685b      	ldr	r3, [r3, #4]
 80104fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80104fc:	8952      	ldrh	r2, [r2, #10]
 80104fe:	4413      	add	r3, r2
 8010500:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010502:	68b9      	ldr	r1, [r7, #8]
 8010504:	4618      	mov	r0, r3
 8010506:	f006 fdc4 	bl	8017092 <memcpy>
        p->len += oversize_used;
 801050a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801050c:	895a      	ldrh	r2, [r3, #10]
 801050e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010510:	4413      	add	r3, r2
 8010512:	b29a      	uxth	r2, r3
 8010514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010516:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8010518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801051e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010520:	2b00      	cmp	r3, #0
 8010522:	d1dd      	bne.n	80104e0 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8010524:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010526:	891a      	ldrh	r2, [r3, #8]
 8010528:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801052a:	4413      	add	r3, r2
 801052c:	b29a      	uxth	r2, r3
 801052e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010530:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8010532:	8a7a      	ldrh	r2, [r7, #18]
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801053a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801053c:	2b00      	cmp	r3, #0
 801053e:	d018      	beq.n	8010572 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8010540:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010542:	2b00      	cmp	r3, #0
 8010544:	d106      	bne.n	8010554 <tcp_write+0x508>
 8010546:	4b2a      	ldr	r3, [pc, #168]	; (80105f0 <tcp_write+0x5a4>)
 8010548:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801054c:	492d      	ldr	r1, [pc, #180]	; (8010604 <tcp_write+0x5b8>)
 801054e:	482a      	ldr	r0, [pc, #168]	; (80105f8 <tcp_write+0x5ac>)
 8010550:	f006 fe2a 	bl	80171a8 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8010554:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010556:	685b      	ldr	r3, [r3, #4]
 8010558:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801055a:	4618      	mov	r0, r3
 801055c:	f7fb f878 	bl	800b650 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8010560:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010562:	891a      	ldrh	r2, [r3, #8]
 8010564:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010566:	891b      	ldrh	r3, [r3, #8]
 8010568:	4413      	add	r3, r2
 801056a:	b29a      	uxth	r2, r3
 801056c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801056e:	811a      	strh	r2, [r3, #8]
 8010570:	e037      	b.n	80105e2 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8010572:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010574:	2b00      	cmp	r3, #0
 8010576:	d034      	beq.n	80105e2 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8010578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801057a:	2b00      	cmp	r3, #0
 801057c:	d003      	beq.n	8010586 <tcp_write+0x53a>
 801057e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010580:	685b      	ldr	r3, [r3, #4]
 8010582:	2b00      	cmp	r3, #0
 8010584:	d106      	bne.n	8010594 <tcp_write+0x548>
 8010586:	4b1a      	ldr	r3, [pc, #104]	; (80105f0 <tcp_write+0x5a4>)
 8010588:	f240 22e6 	movw	r2, #742	; 0x2e6
 801058c:	491e      	ldr	r1, [pc, #120]	; (8010608 <tcp_write+0x5bc>)
 801058e:	481a      	ldr	r0, [pc, #104]	; (80105f8 <tcp_write+0x5ac>)
 8010590:	f006 fe0a 	bl	80171a8 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010594:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010596:	685b      	ldr	r3, [r3, #4]
 8010598:	62bb      	str	r3, [r7, #40]	; 0x28
 801059a:	e009      	b.n	80105b0 <tcp_write+0x564>
      p->tot_len += extendlen;
 801059c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801059e:	891a      	ldrh	r2, [r3, #8]
 80105a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80105a2:	4413      	add	r3, r2
 80105a4:	b29a      	uxth	r2, r3
 80105a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105a8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80105aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80105b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d1f1      	bne.n	801059c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80105b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105ba:	891a      	ldrh	r2, [r3, #8]
 80105bc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80105be:	4413      	add	r3, r2
 80105c0:	b29a      	uxth	r2, r3
 80105c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105c4:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80105c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105c8:	895a      	ldrh	r2, [r3, #10]
 80105ca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80105cc:	4413      	add	r3, r2
 80105ce:	b29a      	uxth	r2, r3
 80105d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105d2:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80105d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105d6:	891a      	ldrh	r2, [r3, #8]
 80105d8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80105da:	4413      	add	r3, r2
 80105dc:	b29a      	uxth	r2, r3
 80105de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105e0:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80105e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d111      	bne.n	801060c <tcp_write+0x5c0>
    pcb->unsent = queue;
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80105ec:	66da      	str	r2, [r3, #108]	; 0x6c
 80105ee:	e010      	b.n	8010612 <tcp_write+0x5c6>
 80105f0:	0801a81c 	.word	0x0801a81c
 80105f4:	0801aabc 	.word	0x0801aabc
 80105f8:	0801a870 	.word	0x0801a870
 80105fc:	0801aafc 	.word	0x0801aafc
 8010600:	0801ab0c 	.word	0x0801ab0c
 8010604:	0801ab20 	.word	0x0801ab20
 8010608:	0801ab58 	.word	0x0801ab58
  } else {
    last_unsent->next = queue;
 801060c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801060e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010610:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010616:	88fb      	ldrh	r3, [r7, #6]
 8010618:	441a      	add	r2, r3
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010624:	88fb      	ldrh	r3, [r7, #6]
 8010626:	1ad3      	subs	r3, r2, r3
 8010628:	b29a      	uxth	r2, r3
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010636:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010640:	2b00      	cmp	r3, #0
 8010642:	d00e      	beq.n	8010662 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010648:	2b00      	cmp	r3, #0
 801064a:	d10a      	bne.n	8010662 <tcp_write+0x616>
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010650:	2b00      	cmp	r3, #0
 8010652:	d106      	bne.n	8010662 <tcp_write+0x616>
 8010654:	4b2c      	ldr	r3, [pc, #176]	; (8010708 <tcp_write+0x6bc>)
 8010656:	f240 3212 	movw	r2, #786	; 0x312
 801065a:	492c      	ldr	r1, [pc, #176]	; (801070c <tcp_write+0x6c0>)
 801065c:	482c      	ldr	r0, [pc, #176]	; (8010710 <tcp_write+0x6c4>)
 801065e:	f006 fda3 	bl	80171a8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8010662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010664:	2b00      	cmp	r3, #0
 8010666:	d016      	beq.n	8010696 <tcp_write+0x64a>
 8010668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801066a:	68db      	ldr	r3, [r3, #12]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d012      	beq.n	8010696 <tcp_write+0x64a>
 8010670:	797b      	ldrb	r3, [r7, #5]
 8010672:	f003 0302 	and.w	r3, r3, #2
 8010676:	2b00      	cmp	r3, #0
 8010678:	d10d      	bne.n	8010696 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801067a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801067c:	68db      	ldr	r3, [r3, #12]
 801067e:	899b      	ldrh	r3, [r3, #12]
 8010680:	b29c      	uxth	r4, r3
 8010682:	2008      	movs	r0, #8
 8010684:	f7f9 fb5e 	bl	8009d44 <lwip_htons>
 8010688:	4603      	mov	r3, r0
 801068a:	461a      	mov	r2, r3
 801068c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801068e:	68db      	ldr	r3, [r3, #12]
 8010690:	4322      	orrs	r2, r4
 8010692:	b292      	uxth	r2, r2
 8010694:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8010696:	2300      	movs	r3, #0
 8010698:	e031      	b.n	80106fe <tcp_write+0x6b2>
          goto memerr;
 801069a:	bf00      	nop
 801069c:	e006      	b.n	80106ac <tcp_write+0x660>
            goto memerr;
 801069e:	bf00      	nop
 80106a0:	e004      	b.n	80106ac <tcp_write+0x660>
        goto memerr;
 80106a2:	bf00      	nop
 80106a4:	e002      	b.n	80106ac <tcp_write+0x660>
        goto memerr;
 80106a6:	bf00      	nop
 80106a8:	e000      	b.n	80106ac <tcp_write+0x660>
      goto memerr;
 80106aa:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	8b5b      	ldrh	r3, [r3, #26]
 80106b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80106b4:	b29a      	uxth	r2, r3
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80106ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d002      	beq.n	80106c6 <tcp_write+0x67a>
    pbuf_free(concat_p);
 80106c0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80106c2:	f7fa fef7 	bl	800b4b4 <pbuf_free>
  }
  if (queue != NULL) {
 80106c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d002      	beq.n	80106d2 <tcp_write+0x686>
    tcp_segs_free(queue);
 80106cc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80106ce:	f7fc fb6f 	bl	800cdb0 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d00e      	beq.n	80106fa <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d10a      	bne.n	80106fa <tcp_write+0x6ae>
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d106      	bne.n	80106fa <tcp_write+0x6ae>
 80106ec:	4b06      	ldr	r3, [pc, #24]	; (8010708 <tcp_write+0x6bc>)
 80106ee:	f240 3227 	movw	r2, #807	; 0x327
 80106f2:	4906      	ldr	r1, [pc, #24]	; (801070c <tcp_write+0x6c0>)
 80106f4:	4806      	ldr	r0, [pc, #24]	; (8010710 <tcp_write+0x6c4>)
 80106f6:	f006 fd57 	bl	80171a8 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80106fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80106fe:	4618      	mov	r0, r3
 8010700:	375c      	adds	r7, #92	; 0x5c
 8010702:	46bd      	mov	sp, r7
 8010704:	bd90      	pop	{r4, r7, pc}
 8010706:	bf00      	nop
 8010708:	0801a81c 	.word	0x0801a81c
 801070c:	0801ab90 	.word	0x0801ab90
 8010710:	0801a870 	.word	0x0801a870

08010714 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8010714:	b590      	push	{r4, r7, lr}
 8010716:	b08b      	sub	sp, #44	; 0x2c
 8010718:	af02      	add	r7, sp, #8
 801071a:	6078      	str	r0, [r7, #4]
 801071c:	460b      	mov	r3, r1
 801071e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8010720:	2300      	movs	r3, #0
 8010722:	61fb      	str	r3, [r7, #28]
 8010724:	2300      	movs	r3, #0
 8010726:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8010728:	2300      	movs	r3, #0
 801072a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d106      	bne.n	8010740 <tcp_split_unsent_seg+0x2c>
 8010732:	4b95      	ldr	r3, [pc, #596]	; (8010988 <tcp_split_unsent_seg+0x274>)
 8010734:	f240 324b 	movw	r2, #843	; 0x34b
 8010738:	4994      	ldr	r1, [pc, #592]	; (801098c <tcp_split_unsent_seg+0x278>)
 801073a:	4895      	ldr	r0, [pc, #596]	; (8010990 <tcp_split_unsent_seg+0x27c>)
 801073c:	f006 fd34 	bl	80171a8 <iprintf>

  useg = pcb->unsent;
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010744:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8010746:	697b      	ldr	r3, [r7, #20]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d102      	bne.n	8010752 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801074c:	f04f 33ff 	mov.w	r3, #4294967295
 8010750:	e116      	b.n	8010980 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8010752:	887b      	ldrh	r3, [r7, #2]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d109      	bne.n	801076c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8010758:	4b8b      	ldr	r3, [pc, #556]	; (8010988 <tcp_split_unsent_seg+0x274>)
 801075a:	f240 3253 	movw	r2, #851	; 0x353
 801075e:	498d      	ldr	r1, [pc, #564]	; (8010994 <tcp_split_unsent_seg+0x280>)
 8010760:	488b      	ldr	r0, [pc, #556]	; (8010990 <tcp_split_unsent_seg+0x27c>)
 8010762:	f006 fd21 	bl	80171a8 <iprintf>
    return ERR_VAL;
 8010766:	f06f 0305 	mvn.w	r3, #5
 801076a:	e109      	b.n	8010980 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801076c:	697b      	ldr	r3, [r7, #20]
 801076e:	891b      	ldrh	r3, [r3, #8]
 8010770:	887a      	ldrh	r2, [r7, #2]
 8010772:	429a      	cmp	r2, r3
 8010774:	d301      	bcc.n	801077a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8010776:	2300      	movs	r3, #0
 8010778:	e102      	b.n	8010980 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801077e:	887a      	ldrh	r2, [r7, #2]
 8010780:	429a      	cmp	r2, r3
 8010782:	d906      	bls.n	8010792 <tcp_split_unsent_seg+0x7e>
 8010784:	4b80      	ldr	r3, [pc, #512]	; (8010988 <tcp_split_unsent_seg+0x274>)
 8010786:	f240 325b 	movw	r2, #859	; 0x35b
 801078a:	4983      	ldr	r1, [pc, #524]	; (8010998 <tcp_split_unsent_seg+0x284>)
 801078c:	4880      	ldr	r0, [pc, #512]	; (8010990 <tcp_split_unsent_seg+0x27c>)
 801078e:	f006 fd0b 	bl	80171a8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8010792:	697b      	ldr	r3, [r7, #20]
 8010794:	891b      	ldrh	r3, [r3, #8]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d106      	bne.n	80107a8 <tcp_split_unsent_seg+0x94>
 801079a:	4b7b      	ldr	r3, [pc, #492]	; (8010988 <tcp_split_unsent_seg+0x274>)
 801079c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80107a0:	497e      	ldr	r1, [pc, #504]	; (801099c <tcp_split_unsent_seg+0x288>)
 80107a2:	487b      	ldr	r0, [pc, #492]	; (8010990 <tcp_split_unsent_seg+0x27c>)
 80107a4:	f006 fd00 	bl	80171a8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80107a8:	697b      	ldr	r3, [r7, #20]
 80107aa:	7a9b      	ldrb	r3, [r3, #10]
 80107ac:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80107ae:	7bfb      	ldrb	r3, [r7, #15]
 80107b0:	009b      	lsls	r3, r3, #2
 80107b2:	b2db      	uxtb	r3, r3
 80107b4:	f003 0304 	and.w	r3, r3, #4
 80107b8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80107ba:	697b      	ldr	r3, [r7, #20]
 80107bc:	891a      	ldrh	r2, [r3, #8]
 80107be:	887b      	ldrh	r3, [r7, #2]
 80107c0:	1ad3      	subs	r3, r2, r3
 80107c2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80107c4:	7bbb      	ldrb	r3, [r7, #14]
 80107c6:	b29a      	uxth	r2, r3
 80107c8:	89bb      	ldrh	r3, [r7, #12]
 80107ca:	4413      	add	r3, r2
 80107cc:	b29b      	uxth	r3, r3
 80107ce:	f44f 7220 	mov.w	r2, #640	; 0x280
 80107d2:	4619      	mov	r1, r3
 80107d4:	2036      	movs	r0, #54	; 0x36
 80107d6:	f7fa fb89 	bl	800aeec <pbuf_alloc>
 80107da:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80107dc:	693b      	ldr	r3, [r7, #16]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	f000 80b7 	beq.w	8010952 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80107e4:	697b      	ldr	r3, [r7, #20]
 80107e6:	685b      	ldr	r3, [r3, #4]
 80107e8:	891a      	ldrh	r2, [r3, #8]
 80107ea:	697b      	ldr	r3, [r7, #20]
 80107ec:	891b      	ldrh	r3, [r3, #8]
 80107ee:	1ad3      	subs	r3, r2, r3
 80107f0:	b29a      	uxth	r2, r3
 80107f2:	887b      	ldrh	r3, [r7, #2]
 80107f4:	4413      	add	r3, r2
 80107f6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80107f8:	697b      	ldr	r3, [r7, #20]
 80107fa:	6858      	ldr	r0, [r3, #4]
 80107fc:	693b      	ldr	r3, [r7, #16]
 80107fe:	685a      	ldr	r2, [r3, #4]
 8010800:	7bbb      	ldrb	r3, [r7, #14]
 8010802:	18d1      	adds	r1, r2, r3
 8010804:	897b      	ldrh	r3, [r7, #10]
 8010806:	89ba      	ldrh	r2, [r7, #12]
 8010808:	f7fb f85a 	bl	800b8c0 <pbuf_copy_partial>
 801080c:	4603      	mov	r3, r0
 801080e:	461a      	mov	r2, r3
 8010810:	89bb      	ldrh	r3, [r7, #12]
 8010812:	4293      	cmp	r3, r2
 8010814:	f040 809f 	bne.w	8010956 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010818:	697b      	ldr	r3, [r7, #20]
 801081a:	68db      	ldr	r3, [r3, #12]
 801081c:	899b      	ldrh	r3, [r3, #12]
 801081e:	b29b      	uxth	r3, r3
 8010820:	4618      	mov	r0, r3
 8010822:	f7f9 fa8f 	bl	8009d44 <lwip_htons>
 8010826:	4603      	mov	r3, r0
 8010828:	b2db      	uxtb	r3, r3
 801082a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801082e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8010830:	2300      	movs	r3, #0
 8010832:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8010834:	7efb      	ldrb	r3, [r7, #27]
 8010836:	f003 0308 	and.w	r3, r3, #8
 801083a:	2b00      	cmp	r3, #0
 801083c:	d007      	beq.n	801084e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801083e:	7efb      	ldrb	r3, [r7, #27]
 8010840:	f023 0308 	bic.w	r3, r3, #8
 8010844:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8010846:	7ebb      	ldrb	r3, [r7, #26]
 8010848:	f043 0308 	orr.w	r3, r3, #8
 801084c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801084e:	7efb      	ldrb	r3, [r7, #27]
 8010850:	f003 0301 	and.w	r3, r3, #1
 8010854:	2b00      	cmp	r3, #0
 8010856:	d007      	beq.n	8010868 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8010858:	7efb      	ldrb	r3, [r7, #27]
 801085a:	f023 0301 	bic.w	r3, r3, #1
 801085e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8010860:	7ebb      	ldrb	r3, [r7, #26]
 8010862:	f043 0301 	orr.w	r3, r3, #1
 8010866:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010868:	697b      	ldr	r3, [r7, #20]
 801086a:	68db      	ldr	r3, [r3, #12]
 801086c:	685b      	ldr	r3, [r3, #4]
 801086e:	4618      	mov	r0, r3
 8010870:	f7f9 fa7d 	bl	8009d6e <lwip_htonl>
 8010874:	4602      	mov	r2, r0
 8010876:	887b      	ldrh	r3, [r7, #2]
 8010878:	18d1      	adds	r1, r2, r3
 801087a:	7eba      	ldrb	r2, [r7, #26]
 801087c:	7bfb      	ldrb	r3, [r7, #15]
 801087e:	9300      	str	r3, [sp, #0]
 8010880:	460b      	mov	r3, r1
 8010882:	6939      	ldr	r1, [r7, #16]
 8010884:	6878      	ldr	r0, [r7, #4]
 8010886:	f7ff fa4f 	bl	800fd28 <tcp_create_segment>
 801088a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801088c:	69fb      	ldr	r3, [r7, #28]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d063      	beq.n	801095a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010892:	697b      	ldr	r3, [r7, #20]
 8010894:	685b      	ldr	r3, [r3, #4]
 8010896:	4618      	mov	r0, r3
 8010898:	f7fa fe9a 	bl	800b5d0 <pbuf_clen>
 801089c:	4603      	mov	r3, r0
 801089e:	461a      	mov	r2, r3
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80108a6:	1a9b      	subs	r3, r3, r2
 80108a8:	b29a      	uxth	r2, r3
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80108b0:	697b      	ldr	r3, [r7, #20]
 80108b2:	6858      	ldr	r0, [r3, #4]
 80108b4:	697b      	ldr	r3, [r7, #20]
 80108b6:	685b      	ldr	r3, [r3, #4]
 80108b8:	891a      	ldrh	r2, [r3, #8]
 80108ba:	89bb      	ldrh	r3, [r7, #12]
 80108bc:	1ad3      	subs	r3, r2, r3
 80108be:	b29b      	uxth	r3, r3
 80108c0:	4619      	mov	r1, r3
 80108c2:	f7fa fc71 	bl	800b1a8 <pbuf_realloc>
  useg->len -= remainder;
 80108c6:	697b      	ldr	r3, [r7, #20]
 80108c8:	891a      	ldrh	r2, [r3, #8]
 80108ca:	89bb      	ldrh	r3, [r7, #12]
 80108cc:	1ad3      	subs	r3, r2, r3
 80108ce:	b29a      	uxth	r2, r3
 80108d0:	697b      	ldr	r3, [r7, #20]
 80108d2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80108d4:	697b      	ldr	r3, [r7, #20]
 80108d6:	68db      	ldr	r3, [r3, #12]
 80108d8:	899b      	ldrh	r3, [r3, #12]
 80108da:	b29c      	uxth	r4, r3
 80108dc:	7efb      	ldrb	r3, [r7, #27]
 80108de:	b29b      	uxth	r3, r3
 80108e0:	4618      	mov	r0, r3
 80108e2:	f7f9 fa2f 	bl	8009d44 <lwip_htons>
 80108e6:	4603      	mov	r3, r0
 80108e8:	461a      	mov	r2, r3
 80108ea:	697b      	ldr	r3, [r7, #20]
 80108ec:	68db      	ldr	r3, [r3, #12]
 80108ee:	4322      	orrs	r2, r4
 80108f0:	b292      	uxth	r2, r2
 80108f2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80108f4:	697b      	ldr	r3, [r7, #20]
 80108f6:	685b      	ldr	r3, [r3, #4]
 80108f8:	4618      	mov	r0, r3
 80108fa:	f7fa fe69 	bl	800b5d0 <pbuf_clen>
 80108fe:	4603      	mov	r3, r0
 8010900:	461a      	mov	r2, r3
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010908:	4413      	add	r3, r2
 801090a:	b29a      	uxth	r2, r3
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010912:	69fb      	ldr	r3, [r7, #28]
 8010914:	685b      	ldr	r3, [r3, #4]
 8010916:	4618      	mov	r0, r3
 8010918:	f7fa fe5a 	bl	800b5d0 <pbuf_clen>
 801091c:	4603      	mov	r3, r0
 801091e:	461a      	mov	r2, r3
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010926:	4413      	add	r3, r2
 8010928:	b29a      	uxth	r2, r3
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010930:	697b      	ldr	r3, [r7, #20]
 8010932:	681a      	ldr	r2, [r3, #0]
 8010934:	69fb      	ldr	r3, [r7, #28]
 8010936:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010938:	697b      	ldr	r3, [r7, #20]
 801093a:	69fa      	ldr	r2, [r7, #28]
 801093c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801093e:	69fb      	ldr	r3, [r7, #28]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	2b00      	cmp	r3, #0
 8010944:	d103      	bne.n	801094e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	2200      	movs	r2, #0
 801094a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801094e:	2300      	movs	r3, #0
 8010950:	e016      	b.n	8010980 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8010952:	bf00      	nop
 8010954:	e002      	b.n	801095c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010956:	bf00      	nop
 8010958:	e000      	b.n	801095c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801095a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801095c:	69fb      	ldr	r3, [r7, #28]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d006      	beq.n	8010970 <tcp_split_unsent_seg+0x25c>
 8010962:	4b09      	ldr	r3, [pc, #36]	; (8010988 <tcp_split_unsent_seg+0x274>)
 8010964:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8010968:	490d      	ldr	r1, [pc, #52]	; (80109a0 <tcp_split_unsent_seg+0x28c>)
 801096a:	4809      	ldr	r0, [pc, #36]	; (8010990 <tcp_split_unsent_seg+0x27c>)
 801096c:	f006 fc1c 	bl	80171a8 <iprintf>
  if (p != NULL) {
 8010970:	693b      	ldr	r3, [r7, #16]
 8010972:	2b00      	cmp	r3, #0
 8010974:	d002      	beq.n	801097c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8010976:	6938      	ldr	r0, [r7, #16]
 8010978:	f7fa fd9c 	bl	800b4b4 <pbuf_free>
  }

  return ERR_MEM;
 801097c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010980:	4618      	mov	r0, r3
 8010982:	3724      	adds	r7, #36	; 0x24
 8010984:	46bd      	mov	sp, r7
 8010986:	bd90      	pop	{r4, r7, pc}
 8010988:	0801a81c 	.word	0x0801a81c
 801098c:	0801abb0 	.word	0x0801abb0
 8010990:	0801a870 	.word	0x0801a870
 8010994:	0801abd4 	.word	0x0801abd4
 8010998:	0801abf8 	.word	0x0801abf8
 801099c:	0801ac08 	.word	0x0801ac08
 80109a0:	0801ac18 	.word	0x0801ac18

080109a4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80109a4:	b590      	push	{r4, r7, lr}
 80109a6:	b085      	sub	sp, #20
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d106      	bne.n	80109c0 <tcp_send_fin+0x1c>
 80109b2:	4b21      	ldr	r3, [pc, #132]	; (8010a38 <tcp_send_fin+0x94>)
 80109b4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80109b8:	4920      	ldr	r1, [pc, #128]	; (8010a3c <tcp_send_fin+0x98>)
 80109ba:	4821      	ldr	r0, [pc, #132]	; (8010a40 <tcp_send_fin+0x9c>)
 80109bc:	f006 fbf4 	bl	80171a8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d02e      	beq.n	8010a26 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109cc:	60fb      	str	r3, [r7, #12]
 80109ce:	e002      	b.n	80109d6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d1f8      	bne.n	80109d0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	68db      	ldr	r3, [r3, #12]
 80109e2:	899b      	ldrh	r3, [r3, #12]
 80109e4:	b29b      	uxth	r3, r3
 80109e6:	4618      	mov	r0, r3
 80109e8:	f7f9 f9ac 	bl	8009d44 <lwip_htons>
 80109ec:	4603      	mov	r3, r0
 80109ee:	b2db      	uxtb	r3, r3
 80109f0:	f003 0307 	and.w	r3, r3, #7
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d116      	bne.n	8010a26 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	68db      	ldr	r3, [r3, #12]
 80109fc:	899b      	ldrh	r3, [r3, #12]
 80109fe:	b29c      	uxth	r4, r3
 8010a00:	2001      	movs	r0, #1
 8010a02:	f7f9 f99f 	bl	8009d44 <lwip_htons>
 8010a06:	4603      	mov	r3, r0
 8010a08:	461a      	mov	r2, r3
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	68db      	ldr	r3, [r3, #12]
 8010a0e:	4322      	orrs	r2, r4
 8010a10:	b292      	uxth	r2, r2
 8010a12:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	8b5b      	ldrh	r3, [r3, #26]
 8010a18:	f043 0320 	orr.w	r3, r3, #32
 8010a1c:	b29a      	uxth	r2, r3
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8010a22:	2300      	movs	r3, #0
 8010a24:	e004      	b.n	8010a30 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010a26:	2101      	movs	r1, #1
 8010a28:	6878      	ldr	r0, [r7, #4]
 8010a2a:	f000 f80b 	bl	8010a44 <tcp_enqueue_flags>
 8010a2e:	4603      	mov	r3, r0
}
 8010a30:	4618      	mov	r0, r3
 8010a32:	3714      	adds	r7, #20
 8010a34:	46bd      	mov	sp, r7
 8010a36:	bd90      	pop	{r4, r7, pc}
 8010a38:	0801a81c 	.word	0x0801a81c
 8010a3c:	0801ac24 	.word	0x0801ac24
 8010a40:	0801a870 	.word	0x0801a870

08010a44 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010a44:	b580      	push	{r7, lr}
 8010a46:	b08a      	sub	sp, #40	; 0x28
 8010a48:	af02      	add	r7, sp, #8
 8010a4a:	6078      	str	r0, [r7, #4]
 8010a4c:	460b      	mov	r3, r1
 8010a4e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010a50:	2300      	movs	r3, #0
 8010a52:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010a54:	2300      	movs	r3, #0
 8010a56:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010a58:	78fb      	ldrb	r3, [r7, #3]
 8010a5a:	f003 0303 	and.w	r3, r3, #3
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d106      	bne.n	8010a70 <tcp_enqueue_flags+0x2c>
 8010a62:	4b67      	ldr	r3, [pc, #412]	; (8010c00 <tcp_enqueue_flags+0x1bc>)
 8010a64:	f240 4211 	movw	r2, #1041	; 0x411
 8010a68:	4966      	ldr	r1, [pc, #408]	; (8010c04 <tcp_enqueue_flags+0x1c0>)
 8010a6a:	4867      	ldr	r0, [pc, #412]	; (8010c08 <tcp_enqueue_flags+0x1c4>)
 8010a6c:	f006 fb9c 	bl	80171a8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d106      	bne.n	8010a84 <tcp_enqueue_flags+0x40>
 8010a76:	4b62      	ldr	r3, [pc, #392]	; (8010c00 <tcp_enqueue_flags+0x1bc>)
 8010a78:	f240 4213 	movw	r2, #1043	; 0x413
 8010a7c:	4963      	ldr	r1, [pc, #396]	; (8010c0c <tcp_enqueue_flags+0x1c8>)
 8010a7e:	4862      	ldr	r0, [pc, #392]	; (8010c08 <tcp_enqueue_flags+0x1c4>)
 8010a80:	f006 fb92 	bl	80171a8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010a84:	78fb      	ldrb	r3, [r7, #3]
 8010a86:	f003 0302 	and.w	r3, r3, #2
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d001      	beq.n	8010a92 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8010a8e:	2301      	movs	r3, #1
 8010a90:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010a92:	7ffb      	ldrb	r3, [r7, #31]
 8010a94:	009b      	lsls	r3, r3, #2
 8010a96:	b2db      	uxtb	r3, r3
 8010a98:	f003 0304 	and.w	r3, r3, #4
 8010a9c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010a9e:	7dfb      	ldrb	r3, [r7, #23]
 8010aa0:	b29b      	uxth	r3, r3
 8010aa2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010aa6:	4619      	mov	r1, r3
 8010aa8:	2036      	movs	r0, #54	; 0x36
 8010aaa:	f7fa fa1f 	bl	800aeec <pbuf_alloc>
 8010aae:	6138      	str	r0, [r7, #16]
 8010ab0:	693b      	ldr	r3, [r7, #16]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d109      	bne.n	8010aca <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	8b5b      	ldrh	r3, [r3, #26]
 8010aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010abe:	b29a      	uxth	r2, r3
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8010ac8:	e095      	b.n	8010bf6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010aca:	693b      	ldr	r3, [r7, #16]
 8010acc:	895a      	ldrh	r2, [r3, #10]
 8010ace:	7dfb      	ldrb	r3, [r7, #23]
 8010ad0:	b29b      	uxth	r3, r3
 8010ad2:	429a      	cmp	r2, r3
 8010ad4:	d206      	bcs.n	8010ae4 <tcp_enqueue_flags+0xa0>
 8010ad6:	4b4a      	ldr	r3, [pc, #296]	; (8010c00 <tcp_enqueue_flags+0x1bc>)
 8010ad8:	f240 4239 	movw	r2, #1081	; 0x439
 8010adc:	494c      	ldr	r1, [pc, #304]	; (8010c10 <tcp_enqueue_flags+0x1cc>)
 8010ade:	484a      	ldr	r0, [pc, #296]	; (8010c08 <tcp_enqueue_flags+0x1c4>)
 8010ae0:	f006 fb62 	bl	80171a8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8010ae8:	78fa      	ldrb	r2, [r7, #3]
 8010aea:	7ffb      	ldrb	r3, [r7, #31]
 8010aec:	9300      	str	r3, [sp, #0]
 8010aee:	460b      	mov	r3, r1
 8010af0:	6939      	ldr	r1, [r7, #16]
 8010af2:	6878      	ldr	r0, [r7, #4]
 8010af4:	f7ff f918 	bl	800fd28 <tcp_create_segment>
 8010af8:	60f8      	str	r0, [r7, #12]
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d109      	bne.n	8010b14 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	8b5b      	ldrh	r3, [r3, #26]
 8010b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b08:	b29a      	uxth	r2, r3
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8010b12:	e070      	b.n	8010bf6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	68db      	ldr	r3, [r3, #12]
 8010b18:	f003 0303 	and.w	r3, r3, #3
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d006      	beq.n	8010b2e <tcp_enqueue_flags+0xea>
 8010b20:	4b37      	ldr	r3, [pc, #220]	; (8010c00 <tcp_enqueue_flags+0x1bc>)
 8010b22:	f240 4242 	movw	r2, #1090	; 0x442
 8010b26:	493b      	ldr	r1, [pc, #236]	; (8010c14 <tcp_enqueue_flags+0x1d0>)
 8010b28:	4837      	ldr	r0, [pc, #220]	; (8010c08 <tcp_enqueue_flags+0x1c4>)
 8010b2a:	f006 fb3d 	bl	80171a8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	891b      	ldrh	r3, [r3, #8]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d006      	beq.n	8010b44 <tcp_enqueue_flags+0x100>
 8010b36:	4b32      	ldr	r3, [pc, #200]	; (8010c00 <tcp_enqueue_flags+0x1bc>)
 8010b38:	f240 4243 	movw	r2, #1091	; 0x443
 8010b3c:	4936      	ldr	r1, [pc, #216]	; (8010c18 <tcp_enqueue_flags+0x1d4>)
 8010b3e:	4832      	ldr	r0, [pc, #200]	; (8010c08 <tcp_enqueue_flags+0x1c4>)
 8010b40:	f006 fb32 	bl	80171a8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d103      	bne.n	8010b54 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	68fa      	ldr	r2, [r7, #12]
 8010b50:	66da      	str	r2, [r3, #108]	; 0x6c
 8010b52:	e00d      	b.n	8010b70 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b58:	61bb      	str	r3, [r7, #24]
 8010b5a:	e002      	b.n	8010b62 <tcp_enqueue_flags+0x11e>
 8010b5c:	69bb      	ldr	r3, [r7, #24]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	61bb      	str	r3, [r7, #24]
 8010b62:	69bb      	ldr	r3, [r7, #24]
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d1f8      	bne.n	8010b5c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8010b6a:	69bb      	ldr	r3, [r7, #24]
 8010b6c:	68fa      	ldr	r2, [r7, #12]
 8010b6e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	2200      	movs	r2, #0
 8010b74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010b78:	78fb      	ldrb	r3, [r7, #3]
 8010b7a:	f003 0302 	and.w	r3, r3, #2
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d104      	bne.n	8010b8c <tcp_enqueue_flags+0x148>
 8010b82:	78fb      	ldrb	r3, [r7, #3]
 8010b84:	f003 0301 	and.w	r3, r3, #1
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d004      	beq.n	8010b96 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010b90:	1c5a      	adds	r2, r3, #1
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010b96:	78fb      	ldrb	r3, [r7, #3]
 8010b98:	f003 0301 	and.w	r3, r3, #1
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d006      	beq.n	8010bae <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	8b5b      	ldrh	r3, [r3, #26]
 8010ba4:	f043 0320 	orr.w	r3, r3, #32
 8010ba8:	b29a      	uxth	r2, r3
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	685b      	ldr	r3, [r3, #4]
 8010bb2:	4618      	mov	r0, r3
 8010bb4:	f7fa fd0c 	bl	800b5d0 <pbuf_clen>
 8010bb8:	4603      	mov	r3, r0
 8010bba:	461a      	mov	r2, r3
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010bc2:	4413      	add	r3, r2
 8010bc4:	b29a      	uxth	r2, r3
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d00e      	beq.n	8010bf4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d10a      	bne.n	8010bf4 <tcp_enqueue_flags+0x1b0>
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d106      	bne.n	8010bf4 <tcp_enqueue_flags+0x1b0>
 8010be6:	4b06      	ldr	r3, [pc, #24]	; (8010c00 <tcp_enqueue_flags+0x1bc>)
 8010be8:	f240 4265 	movw	r2, #1125	; 0x465
 8010bec:	490b      	ldr	r1, [pc, #44]	; (8010c1c <tcp_enqueue_flags+0x1d8>)
 8010bee:	4806      	ldr	r0, [pc, #24]	; (8010c08 <tcp_enqueue_flags+0x1c4>)
 8010bf0:	f006 fada 	bl	80171a8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010bf4:	2300      	movs	r3, #0
}
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	3720      	adds	r7, #32
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	bd80      	pop	{r7, pc}
 8010bfe:	bf00      	nop
 8010c00:	0801a81c 	.word	0x0801a81c
 8010c04:	0801ac40 	.word	0x0801ac40
 8010c08:	0801a870 	.word	0x0801a870
 8010c0c:	0801ac98 	.word	0x0801ac98
 8010c10:	0801acb8 	.word	0x0801acb8
 8010c14:	0801acf4 	.word	0x0801acf4
 8010c18:	0801ad0c 	.word	0x0801ad0c
 8010c1c:	0801ad38 	.word	0x0801ad38

08010c20 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010c20:	b5b0      	push	{r4, r5, r7, lr}
 8010c22:	b08a      	sub	sp, #40	; 0x28
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d106      	bne.n	8010c3c <tcp_output+0x1c>
 8010c2e:	4b9e      	ldr	r3, [pc, #632]	; (8010ea8 <tcp_output+0x288>)
 8010c30:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8010c34:	499d      	ldr	r1, [pc, #628]	; (8010eac <tcp_output+0x28c>)
 8010c36:	489e      	ldr	r0, [pc, #632]	; (8010eb0 <tcp_output+0x290>)
 8010c38:	f006 fab6 	bl	80171a8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	7d1b      	ldrb	r3, [r3, #20]
 8010c40:	2b01      	cmp	r3, #1
 8010c42:	d106      	bne.n	8010c52 <tcp_output+0x32>
 8010c44:	4b98      	ldr	r3, [pc, #608]	; (8010ea8 <tcp_output+0x288>)
 8010c46:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8010c4a:	499a      	ldr	r1, [pc, #616]	; (8010eb4 <tcp_output+0x294>)
 8010c4c:	4898      	ldr	r0, [pc, #608]	; (8010eb0 <tcp_output+0x290>)
 8010c4e:	f006 faab 	bl	80171a8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8010c52:	4b99      	ldr	r3, [pc, #612]	; (8010eb8 <tcp_output+0x298>)
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	687a      	ldr	r2, [r7, #4]
 8010c58:	429a      	cmp	r2, r3
 8010c5a:	d101      	bne.n	8010c60 <tcp_output+0x40>
    return ERR_OK;
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	e1ce      	b.n	8010ffe <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010c6c:	4293      	cmp	r3, r2
 8010c6e:	bf28      	it	cs
 8010c70:	4613      	movcs	r3, r2
 8010c72:	b29b      	uxth	r3, r3
 8010c74:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c7a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8010c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d10b      	bne.n	8010c9a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	8b5b      	ldrh	r3, [r3, #26]
 8010c86:	f003 0302 	and.w	r3, r3, #2
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	f000 81aa 	beq.w	8010fe4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8010c90:	6878      	ldr	r0, [r7, #4]
 8010c92:	f000 fdcb 	bl	801182c <tcp_send_empty_ack>
 8010c96:	4603      	mov	r3, r0
 8010c98:	e1b1      	b.n	8010ffe <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8010c9a:	6879      	ldr	r1, [r7, #4]
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	3304      	adds	r3, #4
 8010ca0:	461a      	mov	r2, r3
 8010ca2:	6878      	ldr	r0, [r7, #4]
 8010ca4:	f7ff f824 	bl	800fcf0 <tcp_route>
 8010ca8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8010caa:	697b      	ldr	r3, [r7, #20]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d102      	bne.n	8010cb6 <tcp_output+0x96>
    return ERR_RTE;
 8010cb0:	f06f 0303 	mvn.w	r3, #3
 8010cb4:	e1a3      	b.n	8010ffe <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d003      	beq.n	8010cc4 <tcp_output+0xa4>
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d111      	bne.n	8010ce8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010cc4:	697b      	ldr	r3, [r7, #20]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d002      	beq.n	8010cd0 <tcp_output+0xb0>
 8010cca:	697b      	ldr	r3, [r7, #20]
 8010ccc:	3304      	adds	r3, #4
 8010cce:	e000      	b.n	8010cd2 <tcp_output+0xb2>
 8010cd0:	2300      	movs	r3, #0
 8010cd2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8010cd4:	693b      	ldr	r3, [r7, #16]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d102      	bne.n	8010ce0 <tcp_output+0xc0>
      return ERR_RTE;
 8010cda:	f06f 0303 	mvn.w	r3, #3
 8010cde:	e18e      	b.n	8010ffe <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010ce0:	693b      	ldr	r3, [r7, #16]
 8010ce2:	681a      	ldr	r2, [r3, #0]
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8010ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cea:	68db      	ldr	r3, [r3, #12]
 8010cec:	685b      	ldr	r3, [r3, #4]
 8010cee:	4618      	mov	r0, r3
 8010cf0:	f7f9 f83d 	bl	8009d6e <lwip_htonl>
 8010cf4:	4602      	mov	r2, r0
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010cfa:	1ad3      	subs	r3, r2, r3
 8010cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010cfe:	8912      	ldrh	r2, [r2, #8]
 8010d00:	4413      	add	r3, r2
 8010d02:	69ba      	ldr	r2, [r7, #24]
 8010d04:	429a      	cmp	r2, r3
 8010d06:	d227      	bcs.n	8010d58 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010d0e:	461a      	mov	r2, r3
 8010d10:	69bb      	ldr	r3, [r7, #24]
 8010d12:	4293      	cmp	r3, r2
 8010d14:	d114      	bne.n	8010d40 <tcp_output+0x120>
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d110      	bne.n	8010d40 <tcp_output+0x120>
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d10b      	bne.n	8010d40 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	2200      	movs	r2, #0
 8010d2c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	2201      	movs	r2, #1
 8010d34:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	2200      	movs	r2, #0
 8010d3c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	8b5b      	ldrh	r3, [r3, #26]
 8010d44:	f003 0302 	and.w	r3, r3, #2
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	f000 814d 	beq.w	8010fe8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8010d4e:	6878      	ldr	r0, [r7, #4]
 8010d50:	f000 fd6c 	bl	801182c <tcp_send_empty_ack>
 8010d54:	4603      	mov	r3, r0
 8010d56:	e152      	b.n	8010ffe <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	2200      	movs	r2, #0
 8010d5c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d64:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8010d66:	6a3b      	ldr	r3, [r7, #32]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	f000 811c 	beq.w	8010fa6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8010d6e:	e002      	b.n	8010d76 <tcp_output+0x156>
 8010d70:	6a3b      	ldr	r3, [r7, #32]
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	623b      	str	r3, [r7, #32]
 8010d76:	6a3b      	ldr	r3, [r7, #32]
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d1f8      	bne.n	8010d70 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8010d7e:	e112      	b.n	8010fa6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8010d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d82:	68db      	ldr	r3, [r3, #12]
 8010d84:	899b      	ldrh	r3, [r3, #12]
 8010d86:	b29b      	uxth	r3, r3
 8010d88:	4618      	mov	r0, r3
 8010d8a:	f7f8 ffdb 	bl	8009d44 <lwip_htons>
 8010d8e:	4603      	mov	r3, r0
 8010d90:	b2db      	uxtb	r3, r3
 8010d92:	f003 0304 	and.w	r3, r3, #4
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d006      	beq.n	8010da8 <tcp_output+0x188>
 8010d9a:	4b43      	ldr	r3, [pc, #268]	; (8010ea8 <tcp_output+0x288>)
 8010d9c:	f240 5236 	movw	r2, #1334	; 0x536
 8010da0:	4946      	ldr	r1, [pc, #280]	; (8010ebc <tcp_output+0x29c>)
 8010da2:	4843      	ldr	r0, [pc, #268]	; (8010eb0 <tcp_output+0x290>)
 8010da4:	f006 fa00 	bl	80171a8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d01f      	beq.n	8010df0 <tcp_output+0x1d0>
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	8b5b      	ldrh	r3, [r3, #26]
 8010db4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d119      	bne.n	8010df0 <tcp_output+0x1d0>
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d00b      	beq.n	8010ddc <tcp_output+0x1bc>
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d110      	bne.n	8010df0 <tcp_output+0x1d0>
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010dd2:	891a      	ldrh	r2, [r3, #8]
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010dd8:	429a      	cmp	r2, r3
 8010dda:	d209      	bcs.n	8010df0 <tcp_output+0x1d0>
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d004      	beq.n	8010df0 <tcp_output+0x1d0>
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010dec:	2b08      	cmp	r3, #8
 8010dee:	d901      	bls.n	8010df4 <tcp_output+0x1d4>
 8010df0:	2301      	movs	r3, #1
 8010df2:	e000      	b.n	8010df6 <tcp_output+0x1d6>
 8010df4:	2300      	movs	r3, #0
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d106      	bne.n	8010e08 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	8b5b      	ldrh	r3, [r3, #26]
 8010dfe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	f000 80e4 	beq.w	8010fd0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	7d1b      	ldrb	r3, [r3, #20]
 8010e0c:	2b02      	cmp	r3, #2
 8010e0e:	d00d      	beq.n	8010e2c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8010e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e12:	68db      	ldr	r3, [r3, #12]
 8010e14:	899b      	ldrh	r3, [r3, #12]
 8010e16:	b29c      	uxth	r4, r3
 8010e18:	2010      	movs	r0, #16
 8010e1a:	f7f8 ff93 	bl	8009d44 <lwip_htons>
 8010e1e:	4603      	mov	r3, r0
 8010e20:	461a      	mov	r2, r3
 8010e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e24:	68db      	ldr	r3, [r3, #12]
 8010e26:	4322      	orrs	r2, r4
 8010e28:	b292      	uxth	r2, r2
 8010e2a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8010e2c:	697a      	ldr	r2, [r7, #20]
 8010e2e:	6879      	ldr	r1, [r7, #4]
 8010e30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010e32:	f000 f909 	bl	8011048 <tcp_output_segment>
 8010e36:	4603      	mov	r3, r0
 8010e38:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8010e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d009      	beq.n	8010e56 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	8b5b      	ldrh	r3, [r3, #26]
 8010e46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e4a:	b29a      	uxth	r2, r3
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	835a      	strh	r2, [r3, #26]
      return err;
 8010e50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010e54:	e0d3      	b.n	8010ffe <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8010e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e58:	681a      	ldr	r2, [r3, #0]
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	7d1b      	ldrb	r3, [r3, #20]
 8010e62:	2b02      	cmp	r3, #2
 8010e64:	d006      	beq.n	8010e74 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	8b5b      	ldrh	r3, [r3, #26]
 8010e6a:	f023 0303 	bic.w	r3, r3, #3
 8010e6e:	b29a      	uxth	r2, r3
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e76:	68db      	ldr	r3, [r3, #12]
 8010e78:	685b      	ldr	r3, [r3, #4]
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	f7f8 ff77 	bl	8009d6e <lwip_htonl>
 8010e80:	4604      	mov	r4, r0
 8010e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e84:	891b      	ldrh	r3, [r3, #8]
 8010e86:	461d      	mov	r5, r3
 8010e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e8a:	68db      	ldr	r3, [r3, #12]
 8010e8c:	899b      	ldrh	r3, [r3, #12]
 8010e8e:	b29b      	uxth	r3, r3
 8010e90:	4618      	mov	r0, r3
 8010e92:	f7f8 ff57 	bl	8009d44 <lwip_htons>
 8010e96:	4603      	mov	r3, r0
 8010e98:	b2db      	uxtb	r3, r3
 8010e9a:	f003 0303 	and.w	r3, r3, #3
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d00e      	beq.n	8010ec0 <tcp_output+0x2a0>
 8010ea2:	2301      	movs	r3, #1
 8010ea4:	e00d      	b.n	8010ec2 <tcp_output+0x2a2>
 8010ea6:	bf00      	nop
 8010ea8:	0801a81c 	.word	0x0801a81c
 8010eac:	0801ad60 	.word	0x0801ad60
 8010eb0:	0801a870 	.word	0x0801a870
 8010eb4:	0801ad78 	.word	0x0801ad78
 8010eb8:	2000eff0 	.word	0x2000eff0
 8010ebc:	0801ada0 	.word	0x0801ada0
 8010ec0:	2300      	movs	r3, #0
 8010ec2:	442b      	add	r3, r5
 8010ec4:	4423      	add	r3, r4
 8010ec6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010ecc:	68bb      	ldr	r3, [r7, #8]
 8010ece:	1ad3      	subs	r3, r2, r3
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	da02      	bge.n	8010eda <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	68ba      	ldr	r2, [r7, #8]
 8010ed8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8010eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010edc:	891b      	ldrh	r3, [r3, #8]
 8010ede:	461c      	mov	r4, r3
 8010ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ee2:	68db      	ldr	r3, [r3, #12]
 8010ee4:	899b      	ldrh	r3, [r3, #12]
 8010ee6:	b29b      	uxth	r3, r3
 8010ee8:	4618      	mov	r0, r3
 8010eea:	f7f8 ff2b 	bl	8009d44 <lwip_htons>
 8010eee:	4603      	mov	r3, r0
 8010ef0:	b2db      	uxtb	r3, r3
 8010ef2:	f003 0303 	and.w	r3, r3, #3
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d001      	beq.n	8010efe <tcp_output+0x2de>
 8010efa:	2301      	movs	r3, #1
 8010efc:	e000      	b.n	8010f00 <tcp_output+0x2e0>
 8010efe:	2300      	movs	r3, #0
 8010f00:	4423      	add	r3, r4
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d049      	beq.n	8010f9a <tcp_output+0x37a>
      seg->next = NULL;
 8010f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f08:	2200      	movs	r2, #0
 8010f0a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d105      	bne.n	8010f20 <tcp_output+0x300>
        pcb->unacked = seg;
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f18:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8010f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f1c:	623b      	str	r3, [r7, #32]
 8010f1e:	e03f      	b.n	8010fa0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8010f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f22:	68db      	ldr	r3, [r3, #12]
 8010f24:	685b      	ldr	r3, [r3, #4]
 8010f26:	4618      	mov	r0, r3
 8010f28:	f7f8 ff21 	bl	8009d6e <lwip_htonl>
 8010f2c:	4604      	mov	r4, r0
 8010f2e:	6a3b      	ldr	r3, [r7, #32]
 8010f30:	68db      	ldr	r3, [r3, #12]
 8010f32:	685b      	ldr	r3, [r3, #4]
 8010f34:	4618      	mov	r0, r3
 8010f36:	f7f8 ff1a 	bl	8009d6e <lwip_htonl>
 8010f3a:	4603      	mov	r3, r0
 8010f3c:	1ae3      	subs	r3, r4, r3
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	da24      	bge.n	8010f8c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	3370      	adds	r3, #112	; 0x70
 8010f46:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010f48:	e002      	b.n	8010f50 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8010f4a:	69fb      	ldr	r3, [r7, #28]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010f50:	69fb      	ldr	r3, [r7, #28]
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d011      	beq.n	8010f7c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010f58:	69fb      	ldr	r3, [r7, #28]
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	68db      	ldr	r3, [r3, #12]
 8010f5e:	685b      	ldr	r3, [r3, #4]
 8010f60:	4618      	mov	r0, r3
 8010f62:	f7f8 ff04 	bl	8009d6e <lwip_htonl>
 8010f66:	4604      	mov	r4, r0
 8010f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f6a:	68db      	ldr	r3, [r3, #12]
 8010f6c:	685b      	ldr	r3, [r3, #4]
 8010f6e:	4618      	mov	r0, r3
 8010f70:	f7f8 fefd 	bl	8009d6e <lwip_htonl>
 8010f74:	4603      	mov	r3, r0
 8010f76:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	dbe6      	blt.n	8010f4a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8010f7c:	69fb      	ldr	r3, [r7, #28]
 8010f7e:	681a      	ldr	r2, [r3, #0]
 8010f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f82:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8010f84:	69fb      	ldr	r3, [r7, #28]
 8010f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f88:	601a      	str	r2, [r3, #0]
 8010f8a:	e009      	b.n	8010fa0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8010f8c:	6a3b      	ldr	r3, [r7, #32]
 8010f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f90:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8010f92:	6a3b      	ldr	r3, [r7, #32]
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	623b      	str	r3, [r7, #32]
 8010f98:	e002      	b.n	8010fa0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8010f9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010f9c:	f7fb ff1d 	bl	800cdda <tcp_seg_free>
    }
    seg = pcb->unsent;
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010fa4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8010fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d012      	beq.n	8010fd2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8010fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fae:	68db      	ldr	r3, [r3, #12]
 8010fb0:	685b      	ldr	r3, [r3, #4]
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	f7f8 fedb 	bl	8009d6e <lwip_htonl>
 8010fb8:	4602      	mov	r2, r0
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010fbe:	1ad3      	subs	r3, r2, r3
 8010fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010fc2:	8912      	ldrh	r2, [r2, #8]
 8010fc4:	4413      	add	r3, r2
  while (seg != NULL &&
 8010fc6:	69ba      	ldr	r2, [r7, #24]
 8010fc8:	429a      	cmp	r2, r3
 8010fca:	f4bf aed9 	bcs.w	8010d80 <tcp_output+0x160>
 8010fce:	e000      	b.n	8010fd2 <tcp_output+0x3b2>
      break;
 8010fd0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d108      	bne.n	8010fec <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	2200      	movs	r2, #0
 8010fde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8010fe2:	e004      	b.n	8010fee <tcp_output+0x3ce>
    goto output_done;
 8010fe4:	bf00      	nop
 8010fe6:	e002      	b.n	8010fee <tcp_output+0x3ce>
    goto output_done;
 8010fe8:	bf00      	nop
 8010fea:	e000      	b.n	8010fee <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8010fec:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	8b5b      	ldrh	r3, [r3, #26]
 8010ff2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010ff6:	b29a      	uxth	r2, r3
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8010ffc:	2300      	movs	r3, #0
}
 8010ffe:	4618      	mov	r0, r3
 8011000:	3728      	adds	r7, #40	; 0x28
 8011002:	46bd      	mov	sp, r7
 8011004:	bdb0      	pop	{r4, r5, r7, pc}
 8011006:	bf00      	nop

08011008 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8011008:	b580      	push	{r7, lr}
 801100a:	b082      	sub	sp, #8
 801100c:	af00      	add	r7, sp, #0
 801100e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	2b00      	cmp	r3, #0
 8011014:	d106      	bne.n	8011024 <tcp_output_segment_busy+0x1c>
 8011016:	4b09      	ldr	r3, [pc, #36]	; (801103c <tcp_output_segment_busy+0x34>)
 8011018:	f240 529a 	movw	r2, #1434	; 0x59a
 801101c:	4908      	ldr	r1, [pc, #32]	; (8011040 <tcp_output_segment_busy+0x38>)
 801101e:	4809      	ldr	r0, [pc, #36]	; (8011044 <tcp_output_segment_busy+0x3c>)
 8011020:	f006 f8c2 	bl	80171a8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	685b      	ldr	r3, [r3, #4]
 8011028:	7b9b      	ldrb	r3, [r3, #14]
 801102a:	2b01      	cmp	r3, #1
 801102c:	d001      	beq.n	8011032 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801102e:	2301      	movs	r3, #1
 8011030:	e000      	b.n	8011034 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8011032:	2300      	movs	r3, #0
}
 8011034:	4618      	mov	r0, r3
 8011036:	3708      	adds	r7, #8
 8011038:	46bd      	mov	sp, r7
 801103a:	bd80      	pop	{r7, pc}
 801103c:	0801a81c 	.word	0x0801a81c
 8011040:	0801adb8 	.word	0x0801adb8
 8011044:	0801a870 	.word	0x0801a870

08011048 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011048:	b5b0      	push	{r4, r5, r7, lr}
 801104a:	b08c      	sub	sp, #48	; 0x30
 801104c:	af04      	add	r7, sp, #16
 801104e:	60f8      	str	r0, [r7, #12]
 8011050:	60b9      	str	r1, [r7, #8]
 8011052:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	2b00      	cmp	r3, #0
 8011058:	d106      	bne.n	8011068 <tcp_output_segment+0x20>
 801105a:	4b63      	ldr	r3, [pc, #396]	; (80111e8 <tcp_output_segment+0x1a0>)
 801105c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8011060:	4962      	ldr	r1, [pc, #392]	; (80111ec <tcp_output_segment+0x1a4>)
 8011062:	4863      	ldr	r0, [pc, #396]	; (80111f0 <tcp_output_segment+0x1a8>)
 8011064:	f006 f8a0 	bl	80171a8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8011068:	68bb      	ldr	r3, [r7, #8]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d106      	bne.n	801107c <tcp_output_segment+0x34>
 801106e:	4b5e      	ldr	r3, [pc, #376]	; (80111e8 <tcp_output_segment+0x1a0>)
 8011070:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8011074:	495f      	ldr	r1, [pc, #380]	; (80111f4 <tcp_output_segment+0x1ac>)
 8011076:	485e      	ldr	r0, [pc, #376]	; (80111f0 <tcp_output_segment+0x1a8>)
 8011078:	f006 f896 	bl	80171a8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	2b00      	cmp	r3, #0
 8011080:	d106      	bne.n	8011090 <tcp_output_segment+0x48>
 8011082:	4b59      	ldr	r3, [pc, #356]	; (80111e8 <tcp_output_segment+0x1a0>)
 8011084:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8011088:	495b      	ldr	r1, [pc, #364]	; (80111f8 <tcp_output_segment+0x1b0>)
 801108a:	4859      	ldr	r0, [pc, #356]	; (80111f0 <tcp_output_segment+0x1a8>)
 801108c:	f006 f88c 	bl	80171a8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8011090:	68f8      	ldr	r0, [r7, #12]
 8011092:	f7ff ffb9 	bl	8011008 <tcp_output_segment_busy>
 8011096:	4603      	mov	r3, r0
 8011098:	2b00      	cmp	r3, #0
 801109a:	d001      	beq.n	80110a0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801109c:	2300      	movs	r3, #0
 801109e:	e09f      	b.n	80111e0 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80110a0:	68bb      	ldr	r3, [r7, #8]
 80110a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	68dc      	ldr	r4, [r3, #12]
 80110a8:	4610      	mov	r0, r2
 80110aa:	f7f8 fe60 	bl	8009d6e <lwip_htonl>
 80110ae:	4603      	mov	r3, r0
 80110b0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80110b2:	68bb      	ldr	r3, [r7, #8]
 80110b4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	68dc      	ldr	r4, [r3, #12]
 80110ba:	4610      	mov	r0, r2
 80110bc:	f7f8 fe42 	bl	8009d44 <lwip_htons>
 80110c0:	4603      	mov	r3, r0
 80110c2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80110c4:	68bb      	ldr	r3, [r7, #8]
 80110c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110c8:	68ba      	ldr	r2, [r7, #8]
 80110ca:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80110cc:	441a      	add	r2, r3
 80110ce:	68bb      	ldr	r3, [r7, #8]
 80110d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	68db      	ldr	r3, [r3, #12]
 80110d6:	3314      	adds	r3, #20
 80110d8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	7a9b      	ldrb	r3, [r3, #10]
 80110de:	f003 0301 	and.w	r3, r3, #1
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d015      	beq.n	8011112 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80110e6:	68bb      	ldr	r3, [r7, #8]
 80110e8:	3304      	adds	r3, #4
 80110ea:	461a      	mov	r2, r3
 80110ec:	6879      	ldr	r1, [r7, #4]
 80110ee:	f44f 7006 	mov.w	r0, #536	; 0x218
 80110f2:	f7fc fa37 	bl	800d564 <tcp_eff_send_mss_netif>
 80110f6:	4603      	mov	r3, r0
 80110f8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80110fa:	8b7b      	ldrh	r3, [r7, #26]
 80110fc:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8011100:	4618      	mov	r0, r3
 8011102:	f7f8 fe34 	bl	8009d6e <lwip_htonl>
 8011106:	4602      	mov	r2, r0
 8011108:	69fb      	ldr	r3, [r7, #28]
 801110a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801110c:	69fb      	ldr	r3, [r7, #28]
 801110e:	3304      	adds	r3, #4
 8011110:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8011112:	68bb      	ldr	r3, [r7, #8]
 8011114:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011118:	2b00      	cmp	r3, #0
 801111a:	da02      	bge.n	8011122 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801111c:	68bb      	ldr	r3, [r7, #8]
 801111e:	2200      	movs	r2, #0
 8011120:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8011122:	68bb      	ldr	r3, [r7, #8]
 8011124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011126:	2b00      	cmp	r3, #0
 8011128:	d10c      	bne.n	8011144 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801112a:	4b34      	ldr	r3, [pc, #208]	; (80111fc <tcp_output_segment+0x1b4>)
 801112c:	681a      	ldr	r2, [r3, #0]
 801112e:	68bb      	ldr	r3, [r7, #8]
 8011130:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	68db      	ldr	r3, [r3, #12]
 8011136:	685b      	ldr	r3, [r3, #4]
 8011138:	4618      	mov	r0, r3
 801113a:	f7f8 fe18 	bl	8009d6e <lwip_htonl>
 801113e:	4602      	mov	r2, r0
 8011140:	68bb      	ldr	r3, [r7, #8]
 8011142:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	68da      	ldr	r2, [r3, #12]
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	685b      	ldr	r3, [r3, #4]
 801114c:	685b      	ldr	r3, [r3, #4]
 801114e:	1ad3      	subs	r3, r2, r3
 8011150:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	685b      	ldr	r3, [r3, #4]
 8011156:	8959      	ldrh	r1, [r3, #10]
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	685b      	ldr	r3, [r3, #4]
 801115c:	8b3a      	ldrh	r2, [r7, #24]
 801115e:	1a8a      	subs	r2, r1, r2
 8011160:	b292      	uxth	r2, r2
 8011162:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	685b      	ldr	r3, [r3, #4]
 8011168:	8919      	ldrh	r1, [r3, #8]
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	685b      	ldr	r3, [r3, #4]
 801116e:	8b3a      	ldrh	r2, [r7, #24]
 8011170:	1a8a      	subs	r2, r1, r2
 8011172:	b292      	uxth	r2, r2
 8011174:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	685b      	ldr	r3, [r3, #4]
 801117a:	68fa      	ldr	r2, [r7, #12]
 801117c:	68d2      	ldr	r2, [r2, #12]
 801117e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	68db      	ldr	r3, [r3, #12]
 8011184:	2200      	movs	r2, #0
 8011186:	741a      	strb	r2, [r3, #16]
 8011188:	2200      	movs	r2, #0
 801118a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	68db      	ldr	r3, [r3, #12]
 8011190:	f103 0214 	add.w	r2, r3, #20
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	7a9b      	ldrb	r3, [r3, #10]
 8011198:	009b      	lsls	r3, r3, #2
 801119a:	f003 0304 	and.w	r3, r3, #4
 801119e:	4413      	add	r3, r2
 80111a0:	69fa      	ldr	r2, [r7, #28]
 80111a2:	429a      	cmp	r2, r3
 80111a4:	d006      	beq.n	80111b4 <tcp_output_segment+0x16c>
 80111a6:	4b10      	ldr	r3, [pc, #64]	; (80111e8 <tcp_output_segment+0x1a0>)
 80111a8:	f240 621c 	movw	r2, #1564	; 0x61c
 80111ac:	4914      	ldr	r1, [pc, #80]	; (8011200 <tcp_output_segment+0x1b8>)
 80111ae:	4810      	ldr	r0, [pc, #64]	; (80111f0 <tcp_output_segment+0x1a8>)
 80111b0:	f005 fffa 	bl	80171a8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	6858      	ldr	r0, [r3, #4]
 80111b8:	68b9      	ldr	r1, [r7, #8]
 80111ba:	68bb      	ldr	r3, [r7, #8]
 80111bc:	1d1c      	adds	r4, r3, #4
 80111be:	68bb      	ldr	r3, [r7, #8]
 80111c0:	7add      	ldrb	r5, [r3, #11]
 80111c2:	68bb      	ldr	r3, [r7, #8]
 80111c4:	7a9b      	ldrb	r3, [r3, #10]
 80111c6:	687a      	ldr	r2, [r7, #4]
 80111c8:	9202      	str	r2, [sp, #8]
 80111ca:	2206      	movs	r2, #6
 80111cc:	9201      	str	r2, [sp, #4]
 80111ce:	9300      	str	r3, [sp, #0]
 80111d0:	462b      	mov	r3, r5
 80111d2:	4622      	mov	r2, r4
 80111d4:	f004 fc28 	bl	8015a28 <ip4_output_if>
 80111d8:	4603      	mov	r3, r0
 80111da:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80111dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80111e0:	4618      	mov	r0, r3
 80111e2:	3720      	adds	r7, #32
 80111e4:	46bd      	mov	sp, r7
 80111e6:	bdb0      	pop	{r4, r5, r7, pc}
 80111e8:	0801a81c 	.word	0x0801a81c
 80111ec:	0801ade0 	.word	0x0801ade0
 80111f0:	0801a870 	.word	0x0801a870
 80111f4:	0801ae00 	.word	0x0801ae00
 80111f8:	0801ae20 	.word	0x0801ae20
 80111fc:	2000efe0 	.word	0x2000efe0
 8011200:	0801ae44 	.word	0x0801ae44

08011204 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8011204:	b5b0      	push	{r4, r5, r7, lr}
 8011206:	b084      	sub	sp, #16
 8011208:	af00      	add	r7, sp, #0
 801120a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	2b00      	cmp	r3, #0
 8011210:	d106      	bne.n	8011220 <tcp_rexmit_rto_prepare+0x1c>
 8011212:	4b31      	ldr	r3, [pc, #196]	; (80112d8 <tcp_rexmit_rto_prepare+0xd4>)
 8011214:	f240 6263 	movw	r2, #1635	; 0x663
 8011218:	4930      	ldr	r1, [pc, #192]	; (80112dc <tcp_rexmit_rto_prepare+0xd8>)
 801121a:	4831      	ldr	r0, [pc, #196]	; (80112e0 <tcp_rexmit_rto_prepare+0xdc>)
 801121c:	f005 ffc4 	bl	80171a8 <iprintf>

  if (pcb->unacked == NULL) {
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011224:	2b00      	cmp	r3, #0
 8011226:	d102      	bne.n	801122e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8011228:	f06f 0305 	mvn.w	r3, #5
 801122c:	e050      	b.n	80112d0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011232:	60fb      	str	r3, [r7, #12]
 8011234:	e00b      	b.n	801124e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8011236:	68f8      	ldr	r0, [r7, #12]
 8011238:	f7ff fee6 	bl	8011008 <tcp_output_segment_busy>
 801123c:	4603      	mov	r3, r0
 801123e:	2b00      	cmp	r3, #0
 8011240:	d002      	beq.n	8011248 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8011242:	f06f 0305 	mvn.w	r3, #5
 8011246:	e043      	b.n	80112d0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	60fb      	str	r3, [r7, #12]
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	2b00      	cmp	r3, #0
 8011254:	d1ef      	bne.n	8011236 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8011256:	68f8      	ldr	r0, [r7, #12]
 8011258:	f7ff fed6 	bl	8011008 <tcp_output_segment_busy>
 801125c:	4603      	mov	r3, r0
 801125e:	2b00      	cmp	r3, #0
 8011260:	d002      	beq.n	8011268 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8011262:	f06f 0305 	mvn.w	r3, #5
 8011266:	e033      	b.n	80112d0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	2200      	movs	r2, #0
 801127c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	8b5b      	ldrh	r3, [r3, #26]
 8011282:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011286:	b29a      	uxth	r2, r3
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	68db      	ldr	r3, [r3, #12]
 8011290:	685b      	ldr	r3, [r3, #4]
 8011292:	4618      	mov	r0, r3
 8011294:	f7f8 fd6b 	bl	8009d6e <lwip_htonl>
 8011298:	4604      	mov	r4, r0
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	891b      	ldrh	r3, [r3, #8]
 801129e:	461d      	mov	r5, r3
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	68db      	ldr	r3, [r3, #12]
 80112a4:	899b      	ldrh	r3, [r3, #12]
 80112a6:	b29b      	uxth	r3, r3
 80112a8:	4618      	mov	r0, r3
 80112aa:	f7f8 fd4b 	bl	8009d44 <lwip_htons>
 80112ae:	4603      	mov	r3, r0
 80112b0:	b2db      	uxtb	r3, r3
 80112b2:	f003 0303 	and.w	r3, r3, #3
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d001      	beq.n	80112be <tcp_rexmit_rto_prepare+0xba>
 80112ba:	2301      	movs	r3, #1
 80112bc:	e000      	b.n	80112c0 <tcp_rexmit_rto_prepare+0xbc>
 80112be:	2300      	movs	r3, #0
 80112c0:	442b      	add	r3, r5
 80112c2:	18e2      	adds	r2, r4, r3
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	2200      	movs	r2, #0
 80112cc:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80112ce:	2300      	movs	r3, #0
}
 80112d0:	4618      	mov	r0, r3
 80112d2:	3710      	adds	r7, #16
 80112d4:	46bd      	mov	sp, r7
 80112d6:	bdb0      	pop	{r4, r5, r7, pc}
 80112d8:	0801a81c 	.word	0x0801a81c
 80112dc:	0801ae58 	.word	0x0801ae58
 80112e0:	0801a870 	.word	0x0801a870

080112e4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80112e4:	b580      	push	{r7, lr}
 80112e6:	b082      	sub	sp, #8
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d106      	bne.n	8011300 <tcp_rexmit_rto_commit+0x1c>
 80112f2:	4b0d      	ldr	r3, [pc, #52]	; (8011328 <tcp_rexmit_rto_commit+0x44>)
 80112f4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80112f8:	490c      	ldr	r1, [pc, #48]	; (801132c <tcp_rexmit_rto_commit+0x48>)
 80112fa:	480d      	ldr	r0, [pc, #52]	; (8011330 <tcp_rexmit_rto_commit+0x4c>)
 80112fc:	f005 ff54 	bl	80171a8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011306:	2bff      	cmp	r3, #255	; 0xff
 8011308:	d007      	beq.n	801131a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011310:	3301      	adds	r3, #1
 8011312:	b2da      	uxtb	r2, r3
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801131a:	6878      	ldr	r0, [r7, #4]
 801131c:	f7ff fc80 	bl	8010c20 <tcp_output>
}
 8011320:	bf00      	nop
 8011322:	3708      	adds	r7, #8
 8011324:	46bd      	mov	sp, r7
 8011326:	bd80      	pop	{r7, pc}
 8011328:	0801a81c 	.word	0x0801a81c
 801132c:	0801ae7c 	.word	0x0801ae7c
 8011330:	0801a870 	.word	0x0801a870

08011334 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8011334:	b580      	push	{r7, lr}
 8011336:	b082      	sub	sp, #8
 8011338:	af00      	add	r7, sp, #0
 801133a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	2b00      	cmp	r3, #0
 8011340:	d106      	bne.n	8011350 <tcp_rexmit_rto+0x1c>
 8011342:	4b0a      	ldr	r3, [pc, #40]	; (801136c <tcp_rexmit_rto+0x38>)
 8011344:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8011348:	4909      	ldr	r1, [pc, #36]	; (8011370 <tcp_rexmit_rto+0x3c>)
 801134a:	480a      	ldr	r0, [pc, #40]	; (8011374 <tcp_rexmit_rto+0x40>)
 801134c:	f005 ff2c 	bl	80171a8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8011350:	6878      	ldr	r0, [r7, #4]
 8011352:	f7ff ff57 	bl	8011204 <tcp_rexmit_rto_prepare>
 8011356:	4603      	mov	r3, r0
 8011358:	2b00      	cmp	r3, #0
 801135a:	d102      	bne.n	8011362 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801135c:	6878      	ldr	r0, [r7, #4]
 801135e:	f7ff ffc1 	bl	80112e4 <tcp_rexmit_rto_commit>
  }
}
 8011362:	bf00      	nop
 8011364:	3708      	adds	r7, #8
 8011366:	46bd      	mov	sp, r7
 8011368:	bd80      	pop	{r7, pc}
 801136a:	bf00      	nop
 801136c:	0801a81c 	.word	0x0801a81c
 8011370:	0801aea0 	.word	0x0801aea0
 8011374:	0801a870 	.word	0x0801a870

08011378 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8011378:	b590      	push	{r4, r7, lr}
 801137a:	b085      	sub	sp, #20
 801137c:	af00      	add	r7, sp, #0
 801137e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	2b00      	cmp	r3, #0
 8011384:	d106      	bne.n	8011394 <tcp_rexmit+0x1c>
 8011386:	4b2f      	ldr	r3, [pc, #188]	; (8011444 <tcp_rexmit+0xcc>)
 8011388:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801138c:	492e      	ldr	r1, [pc, #184]	; (8011448 <tcp_rexmit+0xd0>)
 801138e:	482f      	ldr	r0, [pc, #188]	; (801144c <tcp_rexmit+0xd4>)
 8011390:	f005 ff0a 	bl	80171a8 <iprintf>

  if (pcb->unacked == NULL) {
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011398:	2b00      	cmp	r3, #0
 801139a:	d102      	bne.n	80113a2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801139c:	f06f 0305 	mvn.w	r3, #5
 80113a0:	e04c      	b.n	801143c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80113a6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80113a8:	68b8      	ldr	r0, [r7, #8]
 80113aa:	f7ff fe2d 	bl	8011008 <tcp_output_segment_busy>
 80113ae:	4603      	mov	r3, r0
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d002      	beq.n	80113ba <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80113b4:	f06f 0305 	mvn.w	r3, #5
 80113b8:	e040      	b.n	801143c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80113ba:	68bb      	ldr	r3, [r7, #8]
 80113bc:	681a      	ldr	r2, [r3, #0]
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	336c      	adds	r3, #108	; 0x6c
 80113c6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80113c8:	e002      	b.n	80113d0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d011      	beq.n	80113fc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	68db      	ldr	r3, [r3, #12]
 80113de:	685b      	ldr	r3, [r3, #4]
 80113e0:	4618      	mov	r0, r3
 80113e2:	f7f8 fcc4 	bl	8009d6e <lwip_htonl>
 80113e6:	4604      	mov	r4, r0
 80113e8:	68bb      	ldr	r3, [r7, #8]
 80113ea:	68db      	ldr	r3, [r3, #12]
 80113ec:	685b      	ldr	r3, [r3, #4]
 80113ee:	4618      	mov	r0, r3
 80113f0:	f7f8 fcbd 	bl	8009d6e <lwip_htonl>
 80113f4:	4603      	mov	r3, r0
 80113f6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	dbe6      	blt.n	80113ca <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	681a      	ldr	r2, [r3, #0]
 8011400:	68bb      	ldr	r3, [r7, #8]
 8011402:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	68ba      	ldr	r2, [r7, #8]
 8011408:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801140a:	68bb      	ldr	r3, [r7, #8]
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	2b00      	cmp	r3, #0
 8011410:	d103      	bne.n	801141a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	2200      	movs	r2, #0
 8011416:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011420:	2bff      	cmp	r3, #255	; 0xff
 8011422:	d007      	beq.n	8011434 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801142a:	3301      	adds	r3, #1
 801142c:	b2da      	uxtb	r2, r3
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	2200      	movs	r2, #0
 8011438:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801143a:	2300      	movs	r3, #0
}
 801143c:	4618      	mov	r0, r3
 801143e:	3714      	adds	r7, #20
 8011440:	46bd      	mov	sp, r7
 8011442:	bd90      	pop	{r4, r7, pc}
 8011444:	0801a81c 	.word	0x0801a81c
 8011448:	0801aebc 	.word	0x0801aebc
 801144c:	0801a870 	.word	0x0801a870

08011450 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8011450:	b580      	push	{r7, lr}
 8011452:	b082      	sub	sp, #8
 8011454:	af00      	add	r7, sp, #0
 8011456:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	2b00      	cmp	r3, #0
 801145c:	d106      	bne.n	801146c <tcp_rexmit_fast+0x1c>
 801145e:	4b2a      	ldr	r3, [pc, #168]	; (8011508 <tcp_rexmit_fast+0xb8>)
 8011460:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8011464:	4929      	ldr	r1, [pc, #164]	; (801150c <tcp_rexmit_fast+0xbc>)
 8011466:	482a      	ldr	r0, [pc, #168]	; (8011510 <tcp_rexmit_fast+0xc0>)
 8011468:	f005 fe9e 	bl	80171a8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011470:	2b00      	cmp	r3, #0
 8011472:	d044      	beq.n	80114fe <tcp_rexmit_fast+0xae>
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	8b5b      	ldrh	r3, [r3, #26]
 8011478:	f003 0304 	and.w	r3, r3, #4
 801147c:	2b00      	cmp	r3, #0
 801147e:	d13e      	bne.n	80114fe <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8011480:	6878      	ldr	r0, [r7, #4]
 8011482:	f7ff ff79 	bl	8011378 <tcp_rexmit>
 8011486:	4603      	mov	r3, r0
 8011488:	2b00      	cmp	r3, #0
 801148a:	d138      	bne.n	80114fe <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011498:	4293      	cmp	r3, r2
 801149a:	bf28      	it	cs
 801149c:	4613      	movcs	r3, r2
 801149e:	b29b      	uxth	r3, r3
 80114a0:	0fda      	lsrs	r2, r3, #31
 80114a2:	4413      	add	r3, r2
 80114a4:	105b      	asrs	r3, r3, #1
 80114a6:	b29a      	uxth	r2, r3
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80114b4:	461a      	mov	r2, r3
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80114ba:	005b      	lsls	r3, r3, #1
 80114bc:	429a      	cmp	r2, r3
 80114be:	d206      	bcs.n	80114ce <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80114c4:	005b      	lsls	r3, r3, #1
 80114c6:	b29a      	uxth	r2, r3
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80114d8:	4619      	mov	r1, r3
 80114da:	0049      	lsls	r1, r1, #1
 80114dc:	440b      	add	r3, r1
 80114de:	b29b      	uxth	r3, r3
 80114e0:	4413      	add	r3, r2
 80114e2:	b29a      	uxth	r2, r3
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	8b5b      	ldrh	r3, [r3, #26]
 80114ee:	f043 0304 	orr.w	r3, r3, #4
 80114f2:	b29a      	uxth	r2, r3
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	2200      	movs	r2, #0
 80114fc:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80114fe:	bf00      	nop
 8011500:	3708      	adds	r7, #8
 8011502:	46bd      	mov	sp, r7
 8011504:	bd80      	pop	{r7, pc}
 8011506:	bf00      	nop
 8011508:	0801a81c 	.word	0x0801a81c
 801150c:	0801aed4 	.word	0x0801aed4
 8011510:	0801a870 	.word	0x0801a870

08011514 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8011514:	b580      	push	{r7, lr}
 8011516:	b086      	sub	sp, #24
 8011518:	af00      	add	r7, sp, #0
 801151a:	60f8      	str	r0, [r7, #12]
 801151c:	607b      	str	r3, [r7, #4]
 801151e:	460b      	mov	r3, r1
 8011520:	817b      	strh	r3, [r7, #10]
 8011522:	4613      	mov	r3, r2
 8011524:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8011526:	897a      	ldrh	r2, [r7, #10]
 8011528:	893b      	ldrh	r3, [r7, #8]
 801152a:	4413      	add	r3, r2
 801152c:	b29b      	uxth	r3, r3
 801152e:	3314      	adds	r3, #20
 8011530:	b29b      	uxth	r3, r3
 8011532:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011536:	4619      	mov	r1, r3
 8011538:	2022      	movs	r0, #34	; 0x22
 801153a:	f7f9 fcd7 	bl	800aeec <pbuf_alloc>
 801153e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8011540:	697b      	ldr	r3, [r7, #20]
 8011542:	2b00      	cmp	r3, #0
 8011544:	d04d      	beq.n	80115e2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8011546:	897b      	ldrh	r3, [r7, #10]
 8011548:	3313      	adds	r3, #19
 801154a:	697a      	ldr	r2, [r7, #20]
 801154c:	8952      	ldrh	r2, [r2, #10]
 801154e:	4293      	cmp	r3, r2
 8011550:	db06      	blt.n	8011560 <tcp_output_alloc_header_common+0x4c>
 8011552:	4b26      	ldr	r3, [pc, #152]	; (80115ec <tcp_output_alloc_header_common+0xd8>)
 8011554:	f240 7223 	movw	r2, #1827	; 0x723
 8011558:	4925      	ldr	r1, [pc, #148]	; (80115f0 <tcp_output_alloc_header_common+0xdc>)
 801155a:	4826      	ldr	r0, [pc, #152]	; (80115f4 <tcp_output_alloc_header_common+0xe0>)
 801155c:	f005 fe24 	bl	80171a8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8011560:	697b      	ldr	r3, [r7, #20]
 8011562:	685b      	ldr	r3, [r3, #4]
 8011564:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8011566:	8c3b      	ldrh	r3, [r7, #32]
 8011568:	4618      	mov	r0, r3
 801156a:	f7f8 fbeb 	bl	8009d44 <lwip_htons>
 801156e:	4603      	mov	r3, r0
 8011570:	461a      	mov	r2, r3
 8011572:	693b      	ldr	r3, [r7, #16]
 8011574:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8011576:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011578:	4618      	mov	r0, r3
 801157a:	f7f8 fbe3 	bl	8009d44 <lwip_htons>
 801157e:	4603      	mov	r3, r0
 8011580:	461a      	mov	r2, r3
 8011582:	693b      	ldr	r3, [r7, #16]
 8011584:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8011586:	693b      	ldr	r3, [r7, #16]
 8011588:	687a      	ldr	r2, [r7, #4]
 801158a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801158c:	68f8      	ldr	r0, [r7, #12]
 801158e:	f7f8 fbee 	bl	8009d6e <lwip_htonl>
 8011592:	4602      	mov	r2, r0
 8011594:	693b      	ldr	r3, [r7, #16]
 8011596:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8011598:	897b      	ldrh	r3, [r7, #10]
 801159a:	089b      	lsrs	r3, r3, #2
 801159c:	b29b      	uxth	r3, r3
 801159e:	3305      	adds	r3, #5
 80115a0:	b29b      	uxth	r3, r3
 80115a2:	031b      	lsls	r3, r3, #12
 80115a4:	b29a      	uxth	r2, r3
 80115a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80115aa:	b29b      	uxth	r3, r3
 80115ac:	4313      	orrs	r3, r2
 80115ae:	b29b      	uxth	r3, r3
 80115b0:	4618      	mov	r0, r3
 80115b2:	f7f8 fbc7 	bl	8009d44 <lwip_htons>
 80115b6:	4603      	mov	r3, r0
 80115b8:	461a      	mov	r2, r3
 80115ba:	693b      	ldr	r3, [r7, #16]
 80115bc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80115be:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80115c0:	4618      	mov	r0, r3
 80115c2:	f7f8 fbbf 	bl	8009d44 <lwip_htons>
 80115c6:	4603      	mov	r3, r0
 80115c8:	461a      	mov	r2, r3
 80115ca:	693b      	ldr	r3, [r7, #16]
 80115cc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80115ce:	693b      	ldr	r3, [r7, #16]
 80115d0:	2200      	movs	r2, #0
 80115d2:	741a      	strb	r2, [r3, #16]
 80115d4:	2200      	movs	r2, #0
 80115d6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80115d8:	693b      	ldr	r3, [r7, #16]
 80115da:	2200      	movs	r2, #0
 80115dc:	749a      	strb	r2, [r3, #18]
 80115de:	2200      	movs	r2, #0
 80115e0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80115e2:	697b      	ldr	r3, [r7, #20]
}
 80115e4:	4618      	mov	r0, r3
 80115e6:	3718      	adds	r7, #24
 80115e8:	46bd      	mov	sp, r7
 80115ea:	bd80      	pop	{r7, pc}
 80115ec:	0801a81c 	.word	0x0801a81c
 80115f0:	0801aef4 	.word	0x0801aef4
 80115f4:	0801a870 	.word	0x0801a870

080115f8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80115f8:	b5b0      	push	{r4, r5, r7, lr}
 80115fa:	b08a      	sub	sp, #40	; 0x28
 80115fc:	af04      	add	r7, sp, #16
 80115fe:	60f8      	str	r0, [r7, #12]
 8011600:	607b      	str	r3, [r7, #4]
 8011602:	460b      	mov	r3, r1
 8011604:	817b      	strh	r3, [r7, #10]
 8011606:	4613      	mov	r3, r2
 8011608:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	2b00      	cmp	r3, #0
 801160e:	d106      	bne.n	801161e <tcp_output_alloc_header+0x26>
 8011610:	4b15      	ldr	r3, [pc, #84]	; (8011668 <tcp_output_alloc_header+0x70>)
 8011612:	f240 7242 	movw	r2, #1858	; 0x742
 8011616:	4915      	ldr	r1, [pc, #84]	; (801166c <tcp_output_alloc_header+0x74>)
 8011618:	4815      	ldr	r0, [pc, #84]	; (8011670 <tcp_output_alloc_header+0x78>)
 801161a:	f005 fdc5 	bl	80171a8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	8adb      	ldrh	r3, [r3, #22]
 8011626:	68fa      	ldr	r2, [r7, #12]
 8011628:	8b12      	ldrh	r2, [r2, #24]
 801162a:	68f9      	ldr	r1, [r7, #12]
 801162c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801162e:	893d      	ldrh	r5, [r7, #8]
 8011630:	897c      	ldrh	r4, [r7, #10]
 8011632:	9103      	str	r1, [sp, #12]
 8011634:	2110      	movs	r1, #16
 8011636:	9102      	str	r1, [sp, #8]
 8011638:	9201      	str	r2, [sp, #4]
 801163a:	9300      	str	r3, [sp, #0]
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	462a      	mov	r2, r5
 8011640:	4621      	mov	r1, r4
 8011642:	f7ff ff67 	bl	8011514 <tcp_output_alloc_header_common>
 8011646:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8011648:	697b      	ldr	r3, [r7, #20]
 801164a:	2b00      	cmp	r3, #0
 801164c:	d006      	beq.n	801165c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011652:	68fa      	ldr	r2, [r7, #12]
 8011654:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011656:	441a      	add	r2, r3
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801165c:	697b      	ldr	r3, [r7, #20]
}
 801165e:	4618      	mov	r0, r3
 8011660:	3718      	adds	r7, #24
 8011662:	46bd      	mov	sp, r7
 8011664:	bdb0      	pop	{r4, r5, r7, pc}
 8011666:	bf00      	nop
 8011668:	0801a81c 	.word	0x0801a81c
 801166c:	0801af24 	.word	0x0801af24
 8011670:	0801a870 	.word	0x0801a870

08011674 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8011674:	b580      	push	{r7, lr}
 8011676:	b088      	sub	sp, #32
 8011678:	af00      	add	r7, sp, #0
 801167a:	60f8      	str	r0, [r7, #12]
 801167c:	60b9      	str	r1, [r7, #8]
 801167e:	4611      	mov	r1, r2
 8011680:	461a      	mov	r2, r3
 8011682:	460b      	mov	r3, r1
 8011684:	71fb      	strb	r3, [r7, #7]
 8011686:	4613      	mov	r3, r2
 8011688:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801168a:	2300      	movs	r3, #0
 801168c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801168e:	68bb      	ldr	r3, [r7, #8]
 8011690:	2b00      	cmp	r3, #0
 8011692:	d106      	bne.n	80116a2 <tcp_output_fill_options+0x2e>
 8011694:	4b13      	ldr	r3, [pc, #76]	; (80116e4 <tcp_output_fill_options+0x70>)
 8011696:	f240 7256 	movw	r2, #1878	; 0x756
 801169a:	4913      	ldr	r1, [pc, #76]	; (80116e8 <tcp_output_fill_options+0x74>)
 801169c:	4813      	ldr	r0, [pc, #76]	; (80116ec <tcp_output_fill_options+0x78>)
 801169e:	f005 fd83 	bl	80171a8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80116a2:	68bb      	ldr	r3, [r7, #8]
 80116a4:	685b      	ldr	r3, [r3, #4]
 80116a6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80116a8:	69bb      	ldr	r3, [r7, #24]
 80116aa:	3314      	adds	r3, #20
 80116ac:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80116ae:	69bb      	ldr	r3, [r7, #24]
 80116b0:	f103 0214 	add.w	r2, r3, #20
 80116b4:	8bfb      	ldrh	r3, [r7, #30]
 80116b6:	009b      	lsls	r3, r3, #2
 80116b8:	4619      	mov	r1, r3
 80116ba:	79fb      	ldrb	r3, [r7, #7]
 80116bc:	009b      	lsls	r3, r3, #2
 80116be:	f003 0304 	and.w	r3, r3, #4
 80116c2:	440b      	add	r3, r1
 80116c4:	4413      	add	r3, r2
 80116c6:	697a      	ldr	r2, [r7, #20]
 80116c8:	429a      	cmp	r2, r3
 80116ca:	d006      	beq.n	80116da <tcp_output_fill_options+0x66>
 80116cc:	4b05      	ldr	r3, [pc, #20]	; (80116e4 <tcp_output_fill_options+0x70>)
 80116ce:	f240 7275 	movw	r2, #1909	; 0x775
 80116d2:	4907      	ldr	r1, [pc, #28]	; (80116f0 <tcp_output_fill_options+0x7c>)
 80116d4:	4805      	ldr	r0, [pc, #20]	; (80116ec <tcp_output_fill_options+0x78>)
 80116d6:	f005 fd67 	bl	80171a8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80116da:	bf00      	nop
 80116dc:	3720      	adds	r7, #32
 80116de:	46bd      	mov	sp, r7
 80116e0:	bd80      	pop	{r7, pc}
 80116e2:	bf00      	nop
 80116e4:	0801a81c 	.word	0x0801a81c
 80116e8:	0801af4c 	.word	0x0801af4c
 80116ec:	0801a870 	.word	0x0801a870
 80116f0:	0801ae44 	.word	0x0801ae44

080116f4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80116f4:	b580      	push	{r7, lr}
 80116f6:	b08a      	sub	sp, #40	; 0x28
 80116f8:	af04      	add	r7, sp, #16
 80116fa:	60f8      	str	r0, [r7, #12]
 80116fc:	60b9      	str	r1, [r7, #8]
 80116fe:	607a      	str	r2, [r7, #4]
 8011700:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8011702:	68bb      	ldr	r3, [r7, #8]
 8011704:	2b00      	cmp	r3, #0
 8011706:	d106      	bne.n	8011716 <tcp_output_control_segment+0x22>
 8011708:	4b1c      	ldr	r3, [pc, #112]	; (801177c <tcp_output_control_segment+0x88>)
 801170a:	f240 7287 	movw	r2, #1927	; 0x787
 801170e:	491c      	ldr	r1, [pc, #112]	; (8011780 <tcp_output_control_segment+0x8c>)
 8011710:	481c      	ldr	r0, [pc, #112]	; (8011784 <tcp_output_control_segment+0x90>)
 8011712:	f005 fd49 	bl	80171a8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8011716:	683a      	ldr	r2, [r7, #0]
 8011718:	6879      	ldr	r1, [r7, #4]
 801171a:	68f8      	ldr	r0, [r7, #12]
 801171c:	f7fe fae8 	bl	800fcf0 <tcp_route>
 8011720:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8011722:	693b      	ldr	r3, [r7, #16]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d102      	bne.n	801172e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8011728:	23fc      	movs	r3, #252	; 0xfc
 801172a:	75fb      	strb	r3, [r7, #23]
 801172c:	e01c      	b.n	8011768 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	2b00      	cmp	r3, #0
 8011732:	d006      	beq.n	8011742 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	7adb      	ldrb	r3, [r3, #11]
 8011738:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	7a9b      	ldrb	r3, [r3, #10]
 801173e:	757b      	strb	r3, [r7, #21]
 8011740:	e003      	b.n	801174a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8011742:	23ff      	movs	r3, #255	; 0xff
 8011744:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8011746:	2300      	movs	r3, #0
 8011748:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801174a:	7dba      	ldrb	r2, [r7, #22]
 801174c:	693b      	ldr	r3, [r7, #16]
 801174e:	9302      	str	r3, [sp, #8]
 8011750:	2306      	movs	r3, #6
 8011752:	9301      	str	r3, [sp, #4]
 8011754:	7d7b      	ldrb	r3, [r7, #21]
 8011756:	9300      	str	r3, [sp, #0]
 8011758:	4613      	mov	r3, r2
 801175a:	683a      	ldr	r2, [r7, #0]
 801175c:	6879      	ldr	r1, [r7, #4]
 801175e:	68b8      	ldr	r0, [r7, #8]
 8011760:	f004 f962 	bl	8015a28 <ip4_output_if>
 8011764:	4603      	mov	r3, r0
 8011766:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8011768:	68b8      	ldr	r0, [r7, #8]
 801176a:	f7f9 fea3 	bl	800b4b4 <pbuf_free>
  return err;
 801176e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011772:	4618      	mov	r0, r3
 8011774:	3718      	adds	r7, #24
 8011776:	46bd      	mov	sp, r7
 8011778:	bd80      	pop	{r7, pc}
 801177a:	bf00      	nop
 801177c:	0801a81c 	.word	0x0801a81c
 8011780:	0801af74 	.word	0x0801af74
 8011784:	0801a870 	.word	0x0801a870

08011788 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8011788:	b590      	push	{r4, r7, lr}
 801178a:	b08b      	sub	sp, #44	; 0x2c
 801178c:	af04      	add	r7, sp, #16
 801178e:	60f8      	str	r0, [r7, #12]
 8011790:	60b9      	str	r1, [r7, #8]
 8011792:	607a      	str	r2, [r7, #4]
 8011794:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8011796:	683b      	ldr	r3, [r7, #0]
 8011798:	2b00      	cmp	r3, #0
 801179a:	d106      	bne.n	80117aa <tcp_rst+0x22>
 801179c:	4b1f      	ldr	r3, [pc, #124]	; (801181c <tcp_rst+0x94>)
 801179e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80117a2:	491f      	ldr	r1, [pc, #124]	; (8011820 <tcp_rst+0x98>)
 80117a4:	481f      	ldr	r0, [pc, #124]	; (8011824 <tcp_rst+0x9c>)
 80117a6:	f005 fcff 	bl	80171a8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80117aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d106      	bne.n	80117be <tcp_rst+0x36>
 80117b0:	4b1a      	ldr	r3, [pc, #104]	; (801181c <tcp_rst+0x94>)
 80117b2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80117b6:	491c      	ldr	r1, [pc, #112]	; (8011828 <tcp_rst+0xa0>)
 80117b8:	481a      	ldr	r0, [pc, #104]	; (8011824 <tcp_rst+0x9c>)
 80117ba:	f005 fcf5 	bl	80171a8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80117be:	2300      	movs	r3, #0
 80117c0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80117c2:	f246 0308 	movw	r3, #24584	; 0x6008
 80117c6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80117c8:	7dfb      	ldrb	r3, [r7, #23]
 80117ca:	b29c      	uxth	r4, r3
 80117cc:	68b8      	ldr	r0, [r7, #8]
 80117ce:	f7f8 face 	bl	8009d6e <lwip_htonl>
 80117d2:	4602      	mov	r2, r0
 80117d4:	8abb      	ldrh	r3, [r7, #20]
 80117d6:	9303      	str	r3, [sp, #12]
 80117d8:	2314      	movs	r3, #20
 80117da:	9302      	str	r3, [sp, #8]
 80117dc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80117de:	9301      	str	r3, [sp, #4]
 80117e0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80117e2:	9300      	str	r3, [sp, #0]
 80117e4:	4613      	mov	r3, r2
 80117e6:	2200      	movs	r2, #0
 80117e8:	4621      	mov	r1, r4
 80117ea:	6878      	ldr	r0, [r7, #4]
 80117ec:	f7ff fe92 	bl	8011514 <tcp_output_alloc_header_common>
 80117f0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80117f2:	693b      	ldr	r3, [r7, #16]
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d00c      	beq.n	8011812 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80117f8:	7dfb      	ldrb	r3, [r7, #23]
 80117fa:	2200      	movs	r2, #0
 80117fc:	6939      	ldr	r1, [r7, #16]
 80117fe:	68f8      	ldr	r0, [r7, #12]
 8011800:	f7ff ff38 	bl	8011674 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011806:	683a      	ldr	r2, [r7, #0]
 8011808:	6939      	ldr	r1, [r7, #16]
 801180a:	68f8      	ldr	r0, [r7, #12]
 801180c:	f7ff ff72 	bl	80116f4 <tcp_output_control_segment>
 8011810:	e000      	b.n	8011814 <tcp_rst+0x8c>
    return;
 8011812:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011814:	371c      	adds	r7, #28
 8011816:	46bd      	mov	sp, r7
 8011818:	bd90      	pop	{r4, r7, pc}
 801181a:	bf00      	nop
 801181c:	0801a81c 	.word	0x0801a81c
 8011820:	0801afa0 	.word	0x0801afa0
 8011824:	0801a870 	.word	0x0801a870
 8011828:	0801afbc 	.word	0x0801afbc

0801182c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801182c:	b590      	push	{r4, r7, lr}
 801182e:	b087      	sub	sp, #28
 8011830:	af00      	add	r7, sp, #0
 8011832:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011834:	2300      	movs	r3, #0
 8011836:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8011838:	2300      	movs	r3, #0
 801183a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	2b00      	cmp	r3, #0
 8011840:	d106      	bne.n	8011850 <tcp_send_empty_ack+0x24>
 8011842:	4b28      	ldr	r3, [pc, #160]	; (80118e4 <tcp_send_empty_ack+0xb8>)
 8011844:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8011848:	4927      	ldr	r1, [pc, #156]	; (80118e8 <tcp_send_empty_ack+0xbc>)
 801184a:	4828      	ldr	r0, [pc, #160]	; (80118ec <tcp_send_empty_ack+0xc0>)
 801184c:	f005 fcac 	bl	80171a8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011850:	7dfb      	ldrb	r3, [r7, #23]
 8011852:	009b      	lsls	r3, r3, #2
 8011854:	b2db      	uxtb	r3, r3
 8011856:	f003 0304 	and.w	r3, r3, #4
 801185a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801185c:	7d7b      	ldrb	r3, [r7, #21]
 801185e:	b29c      	uxth	r4, r3
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011864:	4618      	mov	r0, r3
 8011866:	f7f8 fa82 	bl	8009d6e <lwip_htonl>
 801186a:	4603      	mov	r3, r0
 801186c:	2200      	movs	r2, #0
 801186e:	4621      	mov	r1, r4
 8011870:	6878      	ldr	r0, [r7, #4]
 8011872:	f7ff fec1 	bl	80115f8 <tcp_output_alloc_header>
 8011876:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011878:	693b      	ldr	r3, [r7, #16]
 801187a:	2b00      	cmp	r3, #0
 801187c:	d109      	bne.n	8011892 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	8b5b      	ldrh	r3, [r3, #26]
 8011882:	f043 0303 	orr.w	r3, r3, #3
 8011886:	b29a      	uxth	r2, r3
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801188c:	f06f 0301 	mvn.w	r3, #1
 8011890:	e023      	b.n	80118da <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011892:	7dbb      	ldrb	r3, [r7, #22]
 8011894:	7dfa      	ldrb	r2, [r7, #23]
 8011896:	6939      	ldr	r1, [r7, #16]
 8011898:	6878      	ldr	r0, [r7, #4]
 801189a:	f7ff feeb 	bl	8011674 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801189e:	687a      	ldr	r2, [r7, #4]
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	3304      	adds	r3, #4
 80118a4:	6939      	ldr	r1, [r7, #16]
 80118a6:	6878      	ldr	r0, [r7, #4]
 80118a8:	f7ff ff24 	bl	80116f4 <tcp_output_control_segment>
 80118ac:	4603      	mov	r3, r0
 80118ae:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80118b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d007      	beq.n	80118c8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	8b5b      	ldrh	r3, [r3, #26]
 80118bc:	f043 0303 	orr.w	r3, r3, #3
 80118c0:	b29a      	uxth	r2, r3
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	835a      	strh	r2, [r3, #26]
 80118c6:	e006      	b.n	80118d6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	8b5b      	ldrh	r3, [r3, #26]
 80118cc:	f023 0303 	bic.w	r3, r3, #3
 80118d0:	b29a      	uxth	r2, r3
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80118d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80118da:	4618      	mov	r0, r3
 80118dc:	371c      	adds	r7, #28
 80118de:	46bd      	mov	sp, r7
 80118e0:	bd90      	pop	{r4, r7, pc}
 80118e2:	bf00      	nop
 80118e4:	0801a81c 	.word	0x0801a81c
 80118e8:	0801afd8 	.word	0x0801afd8
 80118ec:	0801a870 	.word	0x0801a870

080118f0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80118f0:	b590      	push	{r4, r7, lr}
 80118f2:	b087      	sub	sp, #28
 80118f4:	af00      	add	r7, sp, #0
 80118f6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80118f8:	2300      	movs	r3, #0
 80118fa:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d106      	bne.n	8011910 <tcp_keepalive+0x20>
 8011902:	4b18      	ldr	r3, [pc, #96]	; (8011964 <tcp_keepalive+0x74>)
 8011904:	f640 0224 	movw	r2, #2084	; 0x824
 8011908:	4917      	ldr	r1, [pc, #92]	; (8011968 <tcp_keepalive+0x78>)
 801190a:	4818      	ldr	r0, [pc, #96]	; (801196c <tcp_keepalive+0x7c>)
 801190c:	f005 fc4c 	bl	80171a8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011910:	7dfb      	ldrb	r3, [r7, #23]
 8011912:	b29c      	uxth	r4, r3
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011918:	3b01      	subs	r3, #1
 801191a:	4618      	mov	r0, r3
 801191c:	f7f8 fa27 	bl	8009d6e <lwip_htonl>
 8011920:	4603      	mov	r3, r0
 8011922:	2200      	movs	r2, #0
 8011924:	4621      	mov	r1, r4
 8011926:	6878      	ldr	r0, [r7, #4]
 8011928:	f7ff fe66 	bl	80115f8 <tcp_output_alloc_header>
 801192c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801192e:	693b      	ldr	r3, [r7, #16]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d102      	bne.n	801193a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011934:	f04f 33ff 	mov.w	r3, #4294967295
 8011938:	e010      	b.n	801195c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801193a:	7dfb      	ldrb	r3, [r7, #23]
 801193c:	2200      	movs	r2, #0
 801193e:	6939      	ldr	r1, [r7, #16]
 8011940:	6878      	ldr	r0, [r7, #4]
 8011942:	f7ff fe97 	bl	8011674 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011946:	687a      	ldr	r2, [r7, #4]
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	3304      	adds	r3, #4
 801194c:	6939      	ldr	r1, [r7, #16]
 801194e:	6878      	ldr	r0, [r7, #4]
 8011950:	f7ff fed0 	bl	80116f4 <tcp_output_control_segment>
 8011954:	4603      	mov	r3, r0
 8011956:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011958:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801195c:	4618      	mov	r0, r3
 801195e:	371c      	adds	r7, #28
 8011960:	46bd      	mov	sp, r7
 8011962:	bd90      	pop	{r4, r7, pc}
 8011964:	0801a81c 	.word	0x0801a81c
 8011968:	0801aff8 	.word	0x0801aff8
 801196c:	0801a870 	.word	0x0801a870

08011970 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011970:	b590      	push	{r4, r7, lr}
 8011972:	b08b      	sub	sp, #44	; 0x2c
 8011974:	af00      	add	r7, sp, #0
 8011976:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011978:	2300      	movs	r3, #0
 801197a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	2b00      	cmp	r3, #0
 8011982:	d106      	bne.n	8011992 <tcp_zero_window_probe+0x22>
 8011984:	4b4c      	ldr	r3, [pc, #304]	; (8011ab8 <tcp_zero_window_probe+0x148>)
 8011986:	f640 024f 	movw	r2, #2127	; 0x84f
 801198a:	494c      	ldr	r1, [pc, #304]	; (8011abc <tcp_zero_window_probe+0x14c>)
 801198c:	484c      	ldr	r0, [pc, #304]	; (8011ac0 <tcp_zero_window_probe+0x150>)
 801198e:	f005 fc0b 	bl	80171a8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011996:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8011998:	6a3b      	ldr	r3, [r7, #32]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d101      	bne.n	80119a2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801199e:	2300      	movs	r3, #0
 80119a0:	e086      	b.n	8011ab0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80119a8:	2bff      	cmp	r3, #255	; 0xff
 80119aa:	d007      	beq.n	80119bc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80119b2:	3301      	adds	r3, #1
 80119b4:	b2da      	uxtb	r2, r3
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80119bc:	6a3b      	ldr	r3, [r7, #32]
 80119be:	68db      	ldr	r3, [r3, #12]
 80119c0:	899b      	ldrh	r3, [r3, #12]
 80119c2:	b29b      	uxth	r3, r3
 80119c4:	4618      	mov	r0, r3
 80119c6:	f7f8 f9bd 	bl	8009d44 <lwip_htons>
 80119ca:	4603      	mov	r3, r0
 80119cc:	b2db      	uxtb	r3, r3
 80119ce:	f003 0301 	and.w	r3, r3, #1
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d005      	beq.n	80119e2 <tcp_zero_window_probe+0x72>
 80119d6:	6a3b      	ldr	r3, [r7, #32]
 80119d8:	891b      	ldrh	r3, [r3, #8]
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d101      	bne.n	80119e2 <tcp_zero_window_probe+0x72>
 80119de:	2301      	movs	r3, #1
 80119e0:	e000      	b.n	80119e4 <tcp_zero_window_probe+0x74>
 80119e2:	2300      	movs	r3, #0
 80119e4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80119e6:	7ffb      	ldrb	r3, [r7, #31]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	bf0c      	ite	eq
 80119ec:	2301      	moveq	r3, #1
 80119ee:	2300      	movne	r3, #0
 80119f0:	b2db      	uxtb	r3, r3
 80119f2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80119f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80119f8:	b299      	uxth	r1, r3
 80119fa:	6a3b      	ldr	r3, [r7, #32]
 80119fc:	68db      	ldr	r3, [r3, #12]
 80119fe:	685b      	ldr	r3, [r3, #4]
 8011a00:	8bba      	ldrh	r2, [r7, #28]
 8011a02:	6878      	ldr	r0, [r7, #4]
 8011a04:	f7ff fdf8 	bl	80115f8 <tcp_output_alloc_header>
 8011a08:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8011a0a:	69bb      	ldr	r3, [r7, #24]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d102      	bne.n	8011a16 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011a10:	f04f 33ff 	mov.w	r3, #4294967295
 8011a14:	e04c      	b.n	8011ab0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011a16:	69bb      	ldr	r3, [r7, #24]
 8011a18:	685b      	ldr	r3, [r3, #4]
 8011a1a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011a1c:	7ffb      	ldrb	r3, [r7, #31]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d011      	beq.n	8011a46 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011a22:	697b      	ldr	r3, [r7, #20]
 8011a24:	899b      	ldrh	r3, [r3, #12]
 8011a26:	b29b      	uxth	r3, r3
 8011a28:	b21b      	sxth	r3, r3
 8011a2a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011a2e:	b21c      	sxth	r4, r3
 8011a30:	2011      	movs	r0, #17
 8011a32:	f7f8 f987 	bl	8009d44 <lwip_htons>
 8011a36:	4603      	mov	r3, r0
 8011a38:	b21b      	sxth	r3, r3
 8011a3a:	4323      	orrs	r3, r4
 8011a3c:	b21b      	sxth	r3, r3
 8011a3e:	b29a      	uxth	r2, r3
 8011a40:	697b      	ldr	r3, [r7, #20]
 8011a42:	819a      	strh	r2, [r3, #12]
 8011a44:	e010      	b.n	8011a68 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011a46:	69bb      	ldr	r3, [r7, #24]
 8011a48:	685b      	ldr	r3, [r3, #4]
 8011a4a:	3314      	adds	r3, #20
 8011a4c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8011a4e:	6a3b      	ldr	r3, [r7, #32]
 8011a50:	6858      	ldr	r0, [r3, #4]
 8011a52:	6a3b      	ldr	r3, [r7, #32]
 8011a54:	685b      	ldr	r3, [r3, #4]
 8011a56:	891a      	ldrh	r2, [r3, #8]
 8011a58:	6a3b      	ldr	r3, [r7, #32]
 8011a5a:	891b      	ldrh	r3, [r3, #8]
 8011a5c:	1ad3      	subs	r3, r2, r3
 8011a5e:	b29b      	uxth	r3, r3
 8011a60:	2201      	movs	r2, #1
 8011a62:	6939      	ldr	r1, [r7, #16]
 8011a64:	f7f9 ff2c 	bl	800b8c0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011a68:	6a3b      	ldr	r3, [r7, #32]
 8011a6a:	68db      	ldr	r3, [r3, #12]
 8011a6c:	685b      	ldr	r3, [r3, #4]
 8011a6e:	4618      	mov	r0, r3
 8011a70:	f7f8 f97d 	bl	8009d6e <lwip_htonl>
 8011a74:	4603      	mov	r3, r0
 8011a76:	3301      	adds	r3, #1
 8011a78:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	1ad3      	subs	r3, r2, r3
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	da02      	bge.n	8011a8c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	68fa      	ldr	r2, [r7, #12]
 8011a8a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011a8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011a90:	2200      	movs	r2, #0
 8011a92:	69b9      	ldr	r1, [r7, #24]
 8011a94:	6878      	ldr	r0, [r7, #4]
 8011a96:	f7ff fded 	bl	8011674 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011a9a:	687a      	ldr	r2, [r7, #4]
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	3304      	adds	r3, #4
 8011aa0:	69b9      	ldr	r1, [r7, #24]
 8011aa2:	6878      	ldr	r0, [r7, #4]
 8011aa4:	f7ff fe26 	bl	80116f4 <tcp_output_control_segment>
 8011aa8:	4603      	mov	r3, r0
 8011aaa:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011aac:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011ab0:	4618      	mov	r0, r3
 8011ab2:	372c      	adds	r7, #44	; 0x2c
 8011ab4:	46bd      	mov	sp, r7
 8011ab6:	bd90      	pop	{r4, r7, pc}
 8011ab8:	0801a81c 	.word	0x0801a81c
 8011abc:	0801b014 	.word	0x0801b014
 8011ac0:	0801a870 	.word	0x0801a870

08011ac4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011ac4:	b580      	push	{r7, lr}
 8011ac6:	b082      	sub	sp, #8
 8011ac8:	af00      	add	r7, sp, #0
 8011aca:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011acc:	f7f9 ffe6 	bl	800ba9c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011ad0:	4b0a      	ldr	r3, [pc, #40]	; (8011afc <tcpip_tcp_timer+0x38>)
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d103      	bne.n	8011ae0 <tcpip_tcp_timer+0x1c>
 8011ad8:	4b09      	ldr	r3, [pc, #36]	; (8011b00 <tcpip_tcp_timer+0x3c>)
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d005      	beq.n	8011aec <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011ae0:	2200      	movs	r2, #0
 8011ae2:	4908      	ldr	r1, [pc, #32]	; (8011b04 <tcpip_tcp_timer+0x40>)
 8011ae4:	20fa      	movs	r0, #250	; 0xfa
 8011ae6:	f000 f8f3 	bl	8011cd0 <sys_timeout>
 8011aea:	e003      	b.n	8011af4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011aec:	4b06      	ldr	r3, [pc, #24]	; (8011b08 <tcpip_tcp_timer+0x44>)
 8011aee:	2200      	movs	r2, #0
 8011af0:	601a      	str	r2, [r3, #0]
  }
}
 8011af2:	bf00      	nop
 8011af4:	bf00      	nop
 8011af6:	3708      	adds	r7, #8
 8011af8:	46bd      	mov	sp, r7
 8011afa:	bd80      	pop	{r7, pc}
 8011afc:	2000efdc 	.word	0x2000efdc
 8011b00:	2000efec 	.word	0x2000efec
 8011b04:	08011ac5 	.word	0x08011ac5
 8011b08:	20008588 	.word	0x20008588

08011b0c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011b0c:	b580      	push	{r7, lr}
 8011b0e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011b10:	4b0a      	ldr	r3, [pc, #40]	; (8011b3c <tcp_timer_needed+0x30>)
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d10f      	bne.n	8011b38 <tcp_timer_needed+0x2c>
 8011b18:	4b09      	ldr	r3, [pc, #36]	; (8011b40 <tcp_timer_needed+0x34>)
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d103      	bne.n	8011b28 <tcp_timer_needed+0x1c>
 8011b20:	4b08      	ldr	r3, [pc, #32]	; (8011b44 <tcp_timer_needed+0x38>)
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d007      	beq.n	8011b38 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011b28:	4b04      	ldr	r3, [pc, #16]	; (8011b3c <tcp_timer_needed+0x30>)
 8011b2a:	2201      	movs	r2, #1
 8011b2c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011b2e:	2200      	movs	r2, #0
 8011b30:	4905      	ldr	r1, [pc, #20]	; (8011b48 <tcp_timer_needed+0x3c>)
 8011b32:	20fa      	movs	r0, #250	; 0xfa
 8011b34:	f000 f8cc 	bl	8011cd0 <sys_timeout>
  }
}
 8011b38:	bf00      	nop
 8011b3a:	bd80      	pop	{r7, pc}
 8011b3c:	20008588 	.word	0x20008588
 8011b40:	2000efdc 	.word	0x2000efdc
 8011b44:	2000efec 	.word	0x2000efec
 8011b48:	08011ac5 	.word	0x08011ac5

08011b4c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011b4c:	b580      	push	{r7, lr}
 8011b4e:	b086      	sub	sp, #24
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	60f8      	str	r0, [r7, #12]
 8011b54:	60b9      	str	r1, [r7, #8]
 8011b56:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011b58:	200a      	movs	r0, #10
 8011b5a:	f7f8 fda9 	bl	800a6b0 <memp_malloc>
 8011b5e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011b60:	693b      	ldr	r3, [r7, #16]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d109      	bne.n	8011b7a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011b66:	693b      	ldr	r3, [r7, #16]
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d151      	bne.n	8011c10 <sys_timeout_abs+0xc4>
 8011b6c:	4b2a      	ldr	r3, [pc, #168]	; (8011c18 <sys_timeout_abs+0xcc>)
 8011b6e:	22be      	movs	r2, #190	; 0xbe
 8011b70:	492a      	ldr	r1, [pc, #168]	; (8011c1c <sys_timeout_abs+0xd0>)
 8011b72:	482b      	ldr	r0, [pc, #172]	; (8011c20 <sys_timeout_abs+0xd4>)
 8011b74:	f005 fb18 	bl	80171a8 <iprintf>
    return;
 8011b78:	e04a      	b.n	8011c10 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8011b7a:	693b      	ldr	r3, [r7, #16]
 8011b7c:	2200      	movs	r2, #0
 8011b7e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011b80:	693b      	ldr	r3, [r7, #16]
 8011b82:	68ba      	ldr	r2, [r7, #8]
 8011b84:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011b86:	693b      	ldr	r3, [r7, #16]
 8011b88:	687a      	ldr	r2, [r7, #4]
 8011b8a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011b8c:	693b      	ldr	r3, [r7, #16]
 8011b8e:	68fa      	ldr	r2, [r7, #12]
 8011b90:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011b92:	4b24      	ldr	r3, [pc, #144]	; (8011c24 <sys_timeout_abs+0xd8>)
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d103      	bne.n	8011ba2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8011b9a:	4a22      	ldr	r2, [pc, #136]	; (8011c24 <sys_timeout_abs+0xd8>)
 8011b9c:	693b      	ldr	r3, [r7, #16]
 8011b9e:	6013      	str	r3, [r2, #0]
    return;
 8011ba0:	e037      	b.n	8011c12 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8011ba2:	693b      	ldr	r3, [r7, #16]
 8011ba4:	685a      	ldr	r2, [r3, #4]
 8011ba6:	4b1f      	ldr	r3, [pc, #124]	; (8011c24 <sys_timeout_abs+0xd8>)
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	685b      	ldr	r3, [r3, #4]
 8011bac:	1ad3      	subs	r3, r2, r3
 8011bae:	0fdb      	lsrs	r3, r3, #31
 8011bb0:	f003 0301 	and.w	r3, r3, #1
 8011bb4:	b2db      	uxtb	r3, r3
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d007      	beq.n	8011bca <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8011bba:	4b1a      	ldr	r3, [pc, #104]	; (8011c24 <sys_timeout_abs+0xd8>)
 8011bbc:	681a      	ldr	r2, [r3, #0]
 8011bbe:	693b      	ldr	r3, [r7, #16]
 8011bc0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011bc2:	4a18      	ldr	r2, [pc, #96]	; (8011c24 <sys_timeout_abs+0xd8>)
 8011bc4:	693b      	ldr	r3, [r7, #16]
 8011bc6:	6013      	str	r3, [r2, #0]
 8011bc8:	e023      	b.n	8011c12 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011bca:	4b16      	ldr	r3, [pc, #88]	; (8011c24 <sys_timeout_abs+0xd8>)
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	617b      	str	r3, [r7, #20]
 8011bd0:	e01a      	b.n	8011c08 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8011bd2:	697b      	ldr	r3, [r7, #20]
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d00b      	beq.n	8011bf2 <sys_timeout_abs+0xa6>
 8011bda:	693b      	ldr	r3, [r7, #16]
 8011bdc:	685a      	ldr	r2, [r3, #4]
 8011bde:	697b      	ldr	r3, [r7, #20]
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	685b      	ldr	r3, [r3, #4]
 8011be4:	1ad3      	subs	r3, r2, r3
 8011be6:	0fdb      	lsrs	r3, r3, #31
 8011be8:	f003 0301 	and.w	r3, r3, #1
 8011bec:	b2db      	uxtb	r3, r3
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d007      	beq.n	8011c02 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8011bf2:	697b      	ldr	r3, [r7, #20]
 8011bf4:	681a      	ldr	r2, [r3, #0]
 8011bf6:	693b      	ldr	r3, [r7, #16]
 8011bf8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8011bfa:	697b      	ldr	r3, [r7, #20]
 8011bfc:	693a      	ldr	r2, [r7, #16]
 8011bfe:	601a      	str	r2, [r3, #0]
        break;
 8011c00:	e007      	b.n	8011c12 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011c02:	697b      	ldr	r3, [r7, #20]
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	617b      	str	r3, [r7, #20]
 8011c08:	697b      	ldr	r3, [r7, #20]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d1e1      	bne.n	8011bd2 <sys_timeout_abs+0x86>
 8011c0e:	e000      	b.n	8011c12 <sys_timeout_abs+0xc6>
    return;
 8011c10:	bf00      	nop
      }
    }
  }
}
 8011c12:	3718      	adds	r7, #24
 8011c14:	46bd      	mov	sp, r7
 8011c16:	bd80      	pop	{r7, pc}
 8011c18:	0801b038 	.word	0x0801b038
 8011c1c:	0801b06c 	.word	0x0801b06c
 8011c20:	0801b0ac 	.word	0x0801b0ac
 8011c24:	20008580 	.word	0x20008580

08011c28 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8011c28:	b580      	push	{r7, lr}
 8011c2a:	b086      	sub	sp, #24
 8011c2c:	af00      	add	r7, sp, #0
 8011c2e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011c34:	697b      	ldr	r3, [r7, #20]
 8011c36:	685b      	ldr	r3, [r3, #4]
 8011c38:	4798      	blx	r3

  now = sys_now();
 8011c3a:	f7f2 fcb1 	bl	80045a0 <sys_now>
 8011c3e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011c40:	697b      	ldr	r3, [r7, #20]
 8011c42:	681a      	ldr	r2, [r3, #0]
 8011c44:	4b0f      	ldr	r3, [pc, #60]	; (8011c84 <lwip_cyclic_timer+0x5c>)
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	4413      	add	r3, r2
 8011c4a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011c4c:	68fa      	ldr	r2, [r7, #12]
 8011c4e:	693b      	ldr	r3, [r7, #16]
 8011c50:	1ad3      	subs	r3, r2, r3
 8011c52:	0fdb      	lsrs	r3, r3, #31
 8011c54:	f003 0301 	and.w	r3, r3, #1
 8011c58:	b2db      	uxtb	r3, r3
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d009      	beq.n	8011c72 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8011c5e:	697b      	ldr	r3, [r7, #20]
 8011c60:	681a      	ldr	r2, [r3, #0]
 8011c62:	693b      	ldr	r3, [r7, #16]
 8011c64:	4413      	add	r3, r2
 8011c66:	687a      	ldr	r2, [r7, #4]
 8011c68:	4907      	ldr	r1, [pc, #28]	; (8011c88 <lwip_cyclic_timer+0x60>)
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	f7ff ff6e 	bl	8011b4c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8011c70:	e004      	b.n	8011c7c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8011c72:	687a      	ldr	r2, [r7, #4]
 8011c74:	4904      	ldr	r1, [pc, #16]	; (8011c88 <lwip_cyclic_timer+0x60>)
 8011c76:	68f8      	ldr	r0, [r7, #12]
 8011c78:	f7ff ff68 	bl	8011b4c <sys_timeout_abs>
}
 8011c7c:	bf00      	nop
 8011c7e:	3718      	adds	r7, #24
 8011c80:	46bd      	mov	sp, r7
 8011c82:	bd80      	pop	{r7, pc}
 8011c84:	20008584 	.word	0x20008584
 8011c88:	08011c29 	.word	0x08011c29

08011c8c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011c8c:	b580      	push	{r7, lr}
 8011c8e:	b082      	sub	sp, #8
 8011c90:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011c92:	2301      	movs	r3, #1
 8011c94:	607b      	str	r3, [r7, #4]
 8011c96:	e00e      	b.n	8011cb6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8011c98:	4a0b      	ldr	r2, [pc, #44]	; (8011cc8 <sys_timeouts_init+0x3c>)
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	00db      	lsls	r3, r3, #3
 8011ca4:	4a08      	ldr	r2, [pc, #32]	; (8011cc8 <sys_timeouts_init+0x3c>)
 8011ca6:	4413      	add	r3, r2
 8011ca8:	461a      	mov	r2, r3
 8011caa:	4908      	ldr	r1, [pc, #32]	; (8011ccc <sys_timeouts_init+0x40>)
 8011cac:	f000 f810 	bl	8011cd0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	3301      	adds	r3, #1
 8011cb4:	607b      	str	r3, [r7, #4]
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	2b04      	cmp	r3, #4
 8011cba:	d9ed      	bls.n	8011c98 <sys_timeouts_init+0xc>
  }
}
 8011cbc:	bf00      	nop
 8011cbe:	bf00      	nop
 8011cc0:	3708      	adds	r7, #8
 8011cc2:	46bd      	mov	sp, r7
 8011cc4:	bd80      	pop	{r7, pc}
 8011cc6:	bf00      	nop
 8011cc8:	0801bffc 	.word	0x0801bffc
 8011ccc:	08011c29 	.word	0x08011c29

08011cd0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8011cd0:	b580      	push	{r7, lr}
 8011cd2:	b086      	sub	sp, #24
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	60f8      	str	r0, [r7, #12]
 8011cd8:	60b9      	str	r1, [r7, #8]
 8011cda:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011ce2:	d306      	bcc.n	8011cf2 <sys_timeout+0x22>
 8011ce4:	4b0a      	ldr	r3, [pc, #40]	; (8011d10 <sys_timeout+0x40>)
 8011ce6:	f240 1229 	movw	r2, #297	; 0x129
 8011cea:	490a      	ldr	r1, [pc, #40]	; (8011d14 <sys_timeout+0x44>)
 8011cec:	480a      	ldr	r0, [pc, #40]	; (8011d18 <sys_timeout+0x48>)
 8011cee:	f005 fa5b 	bl	80171a8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8011cf2:	f7f2 fc55 	bl	80045a0 <sys_now>
 8011cf6:	4602      	mov	r2, r0
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	4413      	add	r3, r2
 8011cfc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8011cfe:	687a      	ldr	r2, [r7, #4]
 8011d00:	68b9      	ldr	r1, [r7, #8]
 8011d02:	6978      	ldr	r0, [r7, #20]
 8011d04:	f7ff ff22 	bl	8011b4c <sys_timeout_abs>
#endif
}
 8011d08:	bf00      	nop
 8011d0a:	3718      	adds	r7, #24
 8011d0c:	46bd      	mov	sp, r7
 8011d0e:	bd80      	pop	{r7, pc}
 8011d10:	0801b038 	.word	0x0801b038
 8011d14:	0801b0d4 	.word	0x0801b0d4
 8011d18:	0801b0ac 	.word	0x0801b0ac

08011d1c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8011d1c:	b580      	push	{r7, lr}
 8011d1e:	b084      	sub	sp, #16
 8011d20:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8011d22:	f7f2 fc3d 	bl	80045a0 <sys_now>
 8011d26:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8011d28:	4b17      	ldr	r3, [pc, #92]	; (8011d88 <sys_check_timeouts+0x6c>)
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8011d2e:	68bb      	ldr	r3, [r7, #8]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d022      	beq.n	8011d7a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8011d34:	68bb      	ldr	r3, [r7, #8]
 8011d36:	685b      	ldr	r3, [r3, #4]
 8011d38:	68fa      	ldr	r2, [r7, #12]
 8011d3a:	1ad3      	subs	r3, r2, r3
 8011d3c:	0fdb      	lsrs	r3, r3, #31
 8011d3e:	f003 0301 	and.w	r3, r3, #1
 8011d42:	b2db      	uxtb	r3, r3
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d11a      	bne.n	8011d7e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8011d48:	68bb      	ldr	r3, [r7, #8]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	4a0e      	ldr	r2, [pc, #56]	; (8011d88 <sys_check_timeouts+0x6c>)
 8011d4e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8011d50:	68bb      	ldr	r3, [r7, #8]
 8011d52:	689b      	ldr	r3, [r3, #8]
 8011d54:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8011d56:	68bb      	ldr	r3, [r7, #8]
 8011d58:	68db      	ldr	r3, [r3, #12]
 8011d5a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8011d5c:	68bb      	ldr	r3, [r7, #8]
 8011d5e:	685b      	ldr	r3, [r3, #4]
 8011d60:	4a0a      	ldr	r2, [pc, #40]	; (8011d8c <sys_check_timeouts+0x70>)
 8011d62:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8011d64:	68b9      	ldr	r1, [r7, #8]
 8011d66:	200a      	movs	r0, #10
 8011d68:	f7f8 fcf4 	bl	800a754 <memp_free>
    if (handler != NULL) {
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d0da      	beq.n	8011d28 <sys_check_timeouts+0xc>
      handler(arg);
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	6838      	ldr	r0, [r7, #0]
 8011d76:	4798      	blx	r3
  do {
 8011d78:	e7d6      	b.n	8011d28 <sys_check_timeouts+0xc>
      return;
 8011d7a:	bf00      	nop
 8011d7c:	e000      	b.n	8011d80 <sys_check_timeouts+0x64>
      return;
 8011d7e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8011d80:	3710      	adds	r7, #16
 8011d82:	46bd      	mov	sp, r7
 8011d84:	bd80      	pop	{r7, pc}
 8011d86:	bf00      	nop
 8011d88:	20008580 	.word	0x20008580
 8011d8c:	20008584 	.word	0x20008584

08011d90 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8011d90:	b580      	push	{r7, lr}
 8011d92:	b082      	sub	sp, #8
 8011d94:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8011d96:	4b16      	ldr	r3, [pc, #88]	; (8011df0 <sys_timeouts_sleeptime+0x60>)
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d102      	bne.n	8011da4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8011d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8011da2:	e020      	b.n	8011de6 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8011da4:	f7f2 fbfc 	bl	80045a0 <sys_now>
 8011da8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8011daa:	4b11      	ldr	r3, [pc, #68]	; (8011df0 <sys_timeouts_sleeptime+0x60>)
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	685a      	ldr	r2, [r3, #4]
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	1ad3      	subs	r3, r2, r3
 8011db4:	0fdb      	lsrs	r3, r3, #31
 8011db6:	f003 0301 	and.w	r3, r3, #1
 8011dba:	b2db      	uxtb	r3, r3
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d001      	beq.n	8011dc4 <sys_timeouts_sleeptime+0x34>
    return 0;
 8011dc0:	2300      	movs	r3, #0
 8011dc2:	e010      	b.n	8011de6 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8011dc4:	4b0a      	ldr	r3, [pc, #40]	; (8011df0 <sys_timeouts_sleeptime+0x60>)
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	685a      	ldr	r2, [r3, #4]
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	1ad3      	subs	r3, r2, r3
 8011dce:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8011dd0:	683b      	ldr	r3, [r7, #0]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	da06      	bge.n	8011de4 <sys_timeouts_sleeptime+0x54>
 8011dd6:	4b07      	ldr	r3, [pc, #28]	; (8011df4 <sys_timeouts_sleeptime+0x64>)
 8011dd8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8011ddc:	4906      	ldr	r1, [pc, #24]	; (8011df8 <sys_timeouts_sleeptime+0x68>)
 8011dde:	4807      	ldr	r0, [pc, #28]	; (8011dfc <sys_timeouts_sleeptime+0x6c>)
 8011de0:	f005 f9e2 	bl	80171a8 <iprintf>
    return ret;
 8011de4:	683b      	ldr	r3, [r7, #0]
  }
}
 8011de6:	4618      	mov	r0, r3
 8011de8:	3708      	adds	r7, #8
 8011dea:	46bd      	mov	sp, r7
 8011dec:	bd80      	pop	{r7, pc}
 8011dee:	bf00      	nop
 8011df0:	20008580 	.word	0x20008580
 8011df4:	0801b038 	.word	0x0801b038
 8011df8:	0801b10c 	.word	0x0801b10c
 8011dfc:	0801b0ac 	.word	0x0801b0ac

08011e00 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8011e00:	b580      	push	{r7, lr}
 8011e02:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011e04:	f005 fa5e 	bl	80172c4 <rand>
 8011e08:	4603      	mov	r3, r0
 8011e0a:	b29b      	uxth	r3, r3
 8011e0c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011e10:	b29b      	uxth	r3, r3
 8011e12:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8011e16:	b29a      	uxth	r2, r3
 8011e18:	4b01      	ldr	r3, [pc, #4]	; (8011e20 <udp_init+0x20>)
 8011e1a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011e1c:	bf00      	nop
 8011e1e:	bd80      	pop	{r7, pc}
 8011e20:	20000018 	.word	0x20000018

08011e24 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8011e24:	b480      	push	{r7}
 8011e26:	b083      	sub	sp, #12
 8011e28:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8011e2a:	2300      	movs	r3, #0
 8011e2c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8011e2e:	4b17      	ldr	r3, [pc, #92]	; (8011e8c <udp_new_port+0x68>)
 8011e30:	881b      	ldrh	r3, [r3, #0]
 8011e32:	1c5a      	adds	r2, r3, #1
 8011e34:	b291      	uxth	r1, r2
 8011e36:	4a15      	ldr	r2, [pc, #84]	; (8011e8c <udp_new_port+0x68>)
 8011e38:	8011      	strh	r1, [r2, #0]
 8011e3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011e3e:	4293      	cmp	r3, r2
 8011e40:	d103      	bne.n	8011e4a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8011e42:	4b12      	ldr	r3, [pc, #72]	; (8011e8c <udp_new_port+0x68>)
 8011e44:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8011e48:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011e4a:	4b11      	ldr	r3, [pc, #68]	; (8011e90 <udp_new_port+0x6c>)
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	603b      	str	r3, [r7, #0]
 8011e50:	e011      	b.n	8011e76 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8011e52:	683b      	ldr	r3, [r7, #0]
 8011e54:	8a5a      	ldrh	r2, [r3, #18]
 8011e56:	4b0d      	ldr	r3, [pc, #52]	; (8011e8c <udp_new_port+0x68>)
 8011e58:	881b      	ldrh	r3, [r3, #0]
 8011e5a:	429a      	cmp	r2, r3
 8011e5c:	d108      	bne.n	8011e70 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8011e5e:	88fb      	ldrh	r3, [r7, #6]
 8011e60:	3301      	adds	r3, #1
 8011e62:	80fb      	strh	r3, [r7, #6]
 8011e64:	88fb      	ldrh	r3, [r7, #6]
 8011e66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011e6a:	d3e0      	bcc.n	8011e2e <udp_new_port+0xa>
        return 0;
 8011e6c:	2300      	movs	r3, #0
 8011e6e:	e007      	b.n	8011e80 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011e70:	683b      	ldr	r3, [r7, #0]
 8011e72:	68db      	ldr	r3, [r3, #12]
 8011e74:	603b      	str	r3, [r7, #0]
 8011e76:	683b      	ldr	r3, [r7, #0]
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d1ea      	bne.n	8011e52 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8011e7c:	4b03      	ldr	r3, [pc, #12]	; (8011e8c <udp_new_port+0x68>)
 8011e7e:	881b      	ldrh	r3, [r3, #0]
}
 8011e80:	4618      	mov	r0, r3
 8011e82:	370c      	adds	r7, #12
 8011e84:	46bd      	mov	sp, r7
 8011e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e8a:	4770      	bx	lr
 8011e8c:	20000018 	.word	0x20000018
 8011e90:	2000eff4 	.word	0x2000eff4

08011e94 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8011e94:	b580      	push	{r7, lr}
 8011e96:	b084      	sub	sp, #16
 8011e98:	af00      	add	r7, sp, #0
 8011e9a:	60f8      	str	r0, [r7, #12]
 8011e9c:	60b9      	str	r1, [r7, #8]
 8011e9e:	4613      	mov	r3, r2
 8011ea0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d105      	bne.n	8011eb4 <udp_input_local_match+0x20>
 8011ea8:	4b27      	ldr	r3, [pc, #156]	; (8011f48 <udp_input_local_match+0xb4>)
 8011eaa:	2287      	movs	r2, #135	; 0x87
 8011eac:	4927      	ldr	r1, [pc, #156]	; (8011f4c <udp_input_local_match+0xb8>)
 8011eae:	4828      	ldr	r0, [pc, #160]	; (8011f50 <udp_input_local_match+0xbc>)
 8011eb0:	f005 f97a 	bl	80171a8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8011eb4:	68bb      	ldr	r3, [r7, #8]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d105      	bne.n	8011ec6 <udp_input_local_match+0x32>
 8011eba:	4b23      	ldr	r3, [pc, #140]	; (8011f48 <udp_input_local_match+0xb4>)
 8011ebc:	2288      	movs	r2, #136	; 0x88
 8011ebe:	4925      	ldr	r1, [pc, #148]	; (8011f54 <udp_input_local_match+0xc0>)
 8011ec0:	4823      	ldr	r0, [pc, #140]	; (8011f50 <udp_input_local_match+0xbc>)
 8011ec2:	f005 f971 	bl	80171a8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	7a1b      	ldrb	r3, [r3, #8]
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d00b      	beq.n	8011ee6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	7a1a      	ldrb	r2, [r3, #8]
 8011ed2:	4b21      	ldr	r3, [pc, #132]	; (8011f58 <udp_input_local_match+0xc4>)
 8011ed4:	685b      	ldr	r3, [r3, #4]
 8011ed6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011eda:	3301      	adds	r3, #1
 8011edc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011ede:	429a      	cmp	r2, r3
 8011ee0:	d001      	beq.n	8011ee6 <udp_input_local_match+0x52>
    return 0;
 8011ee2:	2300      	movs	r3, #0
 8011ee4:	e02b      	b.n	8011f3e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8011ee6:	79fb      	ldrb	r3, [r7, #7]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d018      	beq.n	8011f1e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d013      	beq.n	8011f1a <udp_input_local_match+0x86>
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d00f      	beq.n	8011f1a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011efa:	4b17      	ldr	r3, [pc, #92]	; (8011f58 <udp_input_local_match+0xc4>)
 8011efc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f02:	d00a      	beq.n	8011f1a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	681a      	ldr	r2, [r3, #0]
 8011f08:	4b13      	ldr	r3, [pc, #76]	; (8011f58 <udp_input_local_match+0xc4>)
 8011f0a:	695b      	ldr	r3, [r3, #20]
 8011f0c:	405a      	eors	r2, r3
 8011f0e:	68bb      	ldr	r3, [r7, #8]
 8011f10:	3308      	adds	r3, #8
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d110      	bne.n	8011f3c <udp_input_local_match+0xa8>
          return 1;
 8011f1a:	2301      	movs	r3, #1
 8011f1c:	e00f      	b.n	8011f3e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d009      	beq.n	8011f38 <udp_input_local_match+0xa4>
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d005      	beq.n	8011f38 <udp_input_local_match+0xa4>
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	681a      	ldr	r2, [r3, #0]
 8011f30:	4b09      	ldr	r3, [pc, #36]	; (8011f58 <udp_input_local_match+0xc4>)
 8011f32:	695b      	ldr	r3, [r3, #20]
 8011f34:	429a      	cmp	r2, r3
 8011f36:	d101      	bne.n	8011f3c <udp_input_local_match+0xa8>
        return 1;
 8011f38:	2301      	movs	r3, #1
 8011f3a:	e000      	b.n	8011f3e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8011f3c:	2300      	movs	r3, #0
}
 8011f3e:	4618      	mov	r0, r3
 8011f40:	3710      	adds	r7, #16
 8011f42:	46bd      	mov	sp, r7
 8011f44:	bd80      	pop	{r7, pc}
 8011f46:	bf00      	nop
 8011f48:	0801b120 	.word	0x0801b120
 8011f4c:	0801b150 	.word	0x0801b150
 8011f50:	0801b174 	.word	0x0801b174
 8011f54:	0801b19c 	.word	0x0801b19c
 8011f58:	2000b8a8 	.word	0x2000b8a8

08011f5c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8011f5c:	b590      	push	{r4, r7, lr}
 8011f5e:	b08d      	sub	sp, #52	; 0x34
 8011f60:	af02      	add	r7, sp, #8
 8011f62:	6078      	str	r0, [r7, #4]
 8011f64:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8011f66:	2300      	movs	r3, #0
 8011f68:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d105      	bne.n	8011f7c <udp_input+0x20>
 8011f70:	4b7c      	ldr	r3, [pc, #496]	; (8012164 <udp_input+0x208>)
 8011f72:	22cf      	movs	r2, #207	; 0xcf
 8011f74:	497c      	ldr	r1, [pc, #496]	; (8012168 <udp_input+0x20c>)
 8011f76:	487d      	ldr	r0, [pc, #500]	; (801216c <udp_input+0x210>)
 8011f78:	f005 f916 	bl	80171a8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8011f7c:	683b      	ldr	r3, [r7, #0]
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d105      	bne.n	8011f8e <udp_input+0x32>
 8011f82:	4b78      	ldr	r3, [pc, #480]	; (8012164 <udp_input+0x208>)
 8011f84:	22d0      	movs	r2, #208	; 0xd0
 8011f86:	497a      	ldr	r1, [pc, #488]	; (8012170 <udp_input+0x214>)
 8011f88:	4878      	ldr	r0, [pc, #480]	; (801216c <udp_input+0x210>)
 8011f8a:	f005 f90d 	bl	80171a8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	895b      	ldrh	r3, [r3, #10]
 8011f92:	2b07      	cmp	r3, #7
 8011f94:	d803      	bhi.n	8011f9e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8011f96:	6878      	ldr	r0, [r7, #4]
 8011f98:	f7f9 fa8c 	bl	800b4b4 <pbuf_free>
    goto end;
 8011f9c:	e0de      	b.n	801215c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	685b      	ldr	r3, [r3, #4]
 8011fa2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8011fa4:	4b73      	ldr	r3, [pc, #460]	; (8012174 <udp_input+0x218>)
 8011fa6:	695b      	ldr	r3, [r3, #20]
 8011fa8:	4a72      	ldr	r2, [pc, #456]	; (8012174 <udp_input+0x218>)
 8011faa:	6812      	ldr	r2, [r2, #0]
 8011fac:	4611      	mov	r1, r2
 8011fae:	4618      	mov	r0, r3
 8011fb0:	f003 fe12 	bl	8015bd8 <ip4_addr_isbroadcast_u32>
 8011fb4:	4603      	mov	r3, r0
 8011fb6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8011fb8:	697b      	ldr	r3, [r7, #20]
 8011fba:	881b      	ldrh	r3, [r3, #0]
 8011fbc:	b29b      	uxth	r3, r3
 8011fbe:	4618      	mov	r0, r3
 8011fc0:	f7f7 fec0 	bl	8009d44 <lwip_htons>
 8011fc4:	4603      	mov	r3, r0
 8011fc6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8011fc8:	697b      	ldr	r3, [r7, #20]
 8011fca:	885b      	ldrh	r3, [r3, #2]
 8011fcc:	b29b      	uxth	r3, r3
 8011fce:	4618      	mov	r0, r3
 8011fd0:	f7f7 feb8 	bl	8009d44 <lwip_htons>
 8011fd4:	4603      	mov	r3, r0
 8011fd6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8011fd8:	2300      	movs	r3, #0
 8011fda:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8011fdc:	2300      	movs	r3, #0
 8011fde:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8011fe0:	2300      	movs	r3, #0
 8011fe2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011fe4:	4b64      	ldr	r3, [pc, #400]	; (8012178 <udp_input+0x21c>)
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8011fea:	e054      	b.n	8012096 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8011fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fee:	8a5b      	ldrh	r3, [r3, #18]
 8011ff0:	89fa      	ldrh	r2, [r7, #14]
 8011ff2:	429a      	cmp	r2, r3
 8011ff4:	d14a      	bne.n	801208c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8011ff6:	7cfb      	ldrb	r3, [r7, #19]
 8011ff8:	461a      	mov	r2, r3
 8011ffa:	6839      	ldr	r1, [r7, #0]
 8011ffc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011ffe:	f7ff ff49 	bl	8011e94 <udp_input_local_match>
 8012002:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8012004:	2b00      	cmp	r3, #0
 8012006:	d041      	beq.n	801208c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8012008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801200a:	7c1b      	ldrb	r3, [r3, #16]
 801200c:	f003 0304 	and.w	r3, r3, #4
 8012010:	2b00      	cmp	r3, #0
 8012012:	d11d      	bne.n	8012050 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8012014:	69fb      	ldr	r3, [r7, #28]
 8012016:	2b00      	cmp	r3, #0
 8012018:	d102      	bne.n	8012020 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801201c:	61fb      	str	r3, [r7, #28]
 801201e:	e017      	b.n	8012050 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8012020:	7cfb      	ldrb	r3, [r7, #19]
 8012022:	2b00      	cmp	r3, #0
 8012024:	d014      	beq.n	8012050 <udp_input+0xf4>
 8012026:	4b53      	ldr	r3, [pc, #332]	; (8012174 <udp_input+0x218>)
 8012028:	695b      	ldr	r3, [r3, #20]
 801202a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801202e:	d10f      	bne.n	8012050 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8012030:	69fb      	ldr	r3, [r7, #28]
 8012032:	681a      	ldr	r2, [r3, #0]
 8012034:	683b      	ldr	r3, [r7, #0]
 8012036:	3304      	adds	r3, #4
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	429a      	cmp	r2, r3
 801203c:	d008      	beq.n	8012050 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012040:	681a      	ldr	r2, [r3, #0]
 8012042:	683b      	ldr	r3, [r7, #0]
 8012044:	3304      	adds	r3, #4
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	429a      	cmp	r2, r3
 801204a:	d101      	bne.n	8012050 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801204c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801204e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012052:	8a9b      	ldrh	r3, [r3, #20]
 8012054:	8a3a      	ldrh	r2, [r7, #16]
 8012056:	429a      	cmp	r2, r3
 8012058:	d118      	bne.n	801208c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801205c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801205e:	2b00      	cmp	r3, #0
 8012060:	d005      	beq.n	801206e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012064:	685a      	ldr	r2, [r3, #4]
 8012066:	4b43      	ldr	r3, [pc, #268]	; (8012174 <udp_input+0x218>)
 8012068:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801206a:	429a      	cmp	r2, r3
 801206c:	d10e      	bne.n	801208c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801206e:	6a3b      	ldr	r3, [r7, #32]
 8012070:	2b00      	cmp	r3, #0
 8012072:	d014      	beq.n	801209e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012076:	68da      	ldr	r2, [r3, #12]
 8012078:	6a3b      	ldr	r3, [r7, #32]
 801207a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801207c:	4b3e      	ldr	r3, [pc, #248]	; (8012178 <udp_input+0x21c>)
 801207e:	681a      	ldr	r2, [r3, #0]
 8012080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012082:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012084:	4a3c      	ldr	r2, [pc, #240]	; (8012178 <udp_input+0x21c>)
 8012086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012088:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801208a:	e008      	b.n	801209e <udp_input+0x142>
      }
    }

    prev = pcb;
 801208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801208e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012092:	68db      	ldr	r3, [r3, #12]
 8012094:	627b      	str	r3, [r7, #36]	; 0x24
 8012096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012098:	2b00      	cmp	r3, #0
 801209a:	d1a7      	bne.n	8011fec <udp_input+0x90>
 801209c:	e000      	b.n	80120a0 <udp_input+0x144>
        break;
 801209e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80120a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d101      	bne.n	80120aa <udp_input+0x14e>
    pcb = uncon_pcb;
 80120a6:	69fb      	ldr	r3, [r7, #28]
 80120a8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80120aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d002      	beq.n	80120b6 <udp_input+0x15a>
    for_us = 1;
 80120b0:	2301      	movs	r3, #1
 80120b2:	76fb      	strb	r3, [r7, #27]
 80120b4:	e00a      	b.n	80120cc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80120b6:	683b      	ldr	r3, [r7, #0]
 80120b8:	3304      	adds	r3, #4
 80120ba:	681a      	ldr	r2, [r3, #0]
 80120bc:	4b2d      	ldr	r3, [pc, #180]	; (8012174 <udp_input+0x218>)
 80120be:	695b      	ldr	r3, [r3, #20]
 80120c0:	429a      	cmp	r2, r3
 80120c2:	bf0c      	ite	eq
 80120c4:	2301      	moveq	r3, #1
 80120c6:	2300      	movne	r3, #0
 80120c8:	b2db      	uxtb	r3, r3
 80120ca:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80120cc:	7efb      	ldrb	r3, [r7, #27]
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d041      	beq.n	8012156 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80120d2:	2108      	movs	r1, #8
 80120d4:	6878      	ldr	r0, [r7, #4]
 80120d6:	f7f9 f967 	bl	800b3a8 <pbuf_remove_header>
 80120da:	4603      	mov	r3, r0
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d00a      	beq.n	80120f6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80120e0:	4b20      	ldr	r3, [pc, #128]	; (8012164 <udp_input+0x208>)
 80120e2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80120e6:	4925      	ldr	r1, [pc, #148]	; (801217c <udp_input+0x220>)
 80120e8:	4820      	ldr	r0, [pc, #128]	; (801216c <udp_input+0x210>)
 80120ea:	f005 f85d 	bl	80171a8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80120ee:	6878      	ldr	r0, [r7, #4]
 80120f0:	f7f9 f9e0 	bl	800b4b4 <pbuf_free>
      goto end;
 80120f4:	e032      	b.n	801215c <udp_input+0x200>
    }

    if (pcb != NULL) {
 80120f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d012      	beq.n	8012122 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80120fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120fe:	699b      	ldr	r3, [r3, #24]
 8012100:	2b00      	cmp	r3, #0
 8012102:	d00a      	beq.n	801211a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8012104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012106:	699c      	ldr	r4, [r3, #24]
 8012108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801210a:	69d8      	ldr	r0, [r3, #28]
 801210c:	8a3b      	ldrh	r3, [r7, #16]
 801210e:	9300      	str	r3, [sp, #0]
 8012110:	4b1b      	ldr	r3, [pc, #108]	; (8012180 <udp_input+0x224>)
 8012112:	687a      	ldr	r2, [r7, #4]
 8012114:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012116:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8012118:	e021      	b.n	801215e <udp_input+0x202>
        pbuf_free(p);
 801211a:	6878      	ldr	r0, [r7, #4]
 801211c:	f7f9 f9ca 	bl	800b4b4 <pbuf_free>
        goto end;
 8012120:	e01c      	b.n	801215c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8012122:	7cfb      	ldrb	r3, [r7, #19]
 8012124:	2b00      	cmp	r3, #0
 8012126:	d112      	bne.n	801214e <udp_input+0x1f2>
 8012128:	4b12      	ldr	r3, [pc, #72]	; (8012174 <udp_input+0x218>)
 801212a:	695b      	ldr	r3, [r3, #20]
 801212c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012130:	2be0      	cmp	r3, #224	; 0xe0
 8012132:	d00c      	beq.n	801214e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8012134:	4b0f      	ldr	r3, [pc, #60]	; (8012174 <udp_input+0x218>)
 8012136:	899b      	ldrh	r3, [r3, #12]
 8012138:	3308      	adds	r3, #8
 801213a:	b29b      	uxth	r3, r3
 801213c:	b21b      	sxth	r3, r3
 801213e:	4619      	mov	r1, r3
 8012140:	6878      	ldr	r0, [r7, #4]
 8012142:	f7f9 f9a4 	bl	800b48e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8012146:	2103      	movs	r1, #3
 8012148:	6878      	ldr	r0, [r7, #4]
 801214a:	f003 fa07 	bl	801555c <icmp_dest_unreach>
      pbuf_free(p);
 801214e:	6878      	ldr	r0, [r7, #4]
 8012150:	f7f9 f9b0 	bl	800b4b4 <pbuf_free>
  return;
 8012154:	e003      	b.n	801215e <udp_input+0x202>
    pbuf_free(p);
 8012156:	6878      	ldr	r0, [r7, #4]
 8012158:	f7f9 f9ac 	bl	800b4b4 <pbuf_free>
  return;
 801215c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801215e:	372c      	adds	r7, #44	; 0x2c
 8012160:	46bd      	mov	sp, r7
 8012162:	bd90      	pop	{r4, r7, pc}
 8012164:	0801b120 	.word	0x0801b120
 8012168:	0801b1c4 	.word	0x0801b1c4
 801216c:	0801b174 	.word	0x0801b174
 8012170:	0801b1dc 	.word	0x0801b1dc
 8012174:	2000b8a8 	.word	0x2000b8a8
 8012178:	2000eff4 	.word	0x2000eff4
 801217c:	0801b1f8 	.word	0x0801b1f8
 8012180:	2000b8b8 	.word	0x2000b8b8

08012184 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8012184:	b580      	push	{r7, lr}
 8012186:	b088      	sub	sp, #32
 8012188:	af02      	add	r7, sp, #8
 801218a:	60f8      	str	r0, [r7, #12]
 801218c:	60b9      	str	r1, [r7, #8]
 801218e:	607a      	str	r2, [r7, #4]
 8012190:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	2b00      	cmp	r3, #0
 8012196:	d109      	bne.n	80121ac <udp_sendto_if+0x28>
 8012198:	4b2e      	ldr	r3, [pc, #184]	; (8012254 <udp_sendto_if+0xd0>)
 801219a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801219e:	492e      	ldr	r1, [pc, #184]	; (8012258 <udp_sendto_if+0xd4>)
 80121a0:	482e      	ldr	r0, [pc, #184]	; (801225c <udp_sendto_if+0xd8>)
 80121a2:	f005 f801 	bl	80171a8 <iprintf>
 80121a6:	f06f 030f 	mvn.w	r3, #15
 80121aa:	e04f      	b.n	801224c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80121ac:	68bb      	ldr	r3, [r7, #8]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d109      	bne.n	80121c6 <udp_sendto_if+0x42>
 80121b2:	4b28      	ldr	r3, [pc, #160]	; (8012254 <udp_sendto_if+0xd0>)
 80121b4:	f240 2281 	movw	r2, #641	; 0x281
 80121b8:	4929      	ldr	r1, [pc, #164]	; (8012260 <udp_sendto_if+0xdc>)
 80121ba:	4828      	ldr	r0, [pc, #160]	; (801225c <udp_sendto_if+0xd8>)
 80121bc:	f004 fff4 	bl	80171a8 <iprintf>
 80121c0:	f06f 030f 	mvn.w	r3, #15
 80121c4:	e042      	b.n	801224c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d109      	bne.n	80121e0 <udp_sendto_if+0x5c>
 80121cc:	4b21      	ldr	r3, [pc, #132]	; (8012254 <udp_sendto_if+0xd0>)
 80121ce:	f240 2282 	movw	r2, #642	; 0x282
 80121d2:	4924      	ldr	r1, [pc, #144]	; (8012264 <udp_sendto_if+0xe0>)
 80121d4:	4821      	ldr	r0, [pc, #132]	; (801225c <udp_sendto_if+0xd8>)
 80121d6:	f004 ffe7 	bl	80171a8 <iprintf>
 80121da:	f06f 030f 	mvn.w	r3, #15
 80121de:	e035      	b.n	801224c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80121e0:	6a3b      	ldr	r3, [r7, #32]
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d109      	bne.n	80121fa <udp_sendto_if+0x76>
 80121e6:	4b1b      	ldr	r3, [pc, #108]	; (8012254 <udp_sendto_if+0xd0>)
 80121e8:	f240 2283 	movw	r2, #643	; 0x283
 80121ec:	491e      	ldr	r1, [pc, #120]	; (8012268 <udp_sendto_if+0xe4>)
 80121ee:	481b      	ldr	r0, [pc, #108]	; (801225c <udp_sendto_if+0xd8>)
 80121f0:	f004 ffda 	bl	80171a8 <iprintf>
 80121f4:	f06f 030f 	mvn.w	r3, #15
 80121f8:	e028      	b.n	801224c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d009      	beq.n	8012214 <udp_sendto_if+0x90>
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d005      	beq.n	8012214 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8012208:	68fb      	ldr	r3, [r7, #12]
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012210:	2be0      	cmp	r3, #224	; 0xe0
 8012212:	d103      	bne.n	801221c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8012214:	6a3b      	ldr	r3, [r7, #32]
 8012216:	3304      	adds	r3, #4
 8012218:	617b      	str	r3, [r7, #20]
 801221a:	e00b      	b.n	8012234 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	681a      	ldr	r2, [r3, #0]
 8012220:	6a3b      	ldr	r3, [r7, #32]
 8012222:	3304      	adds	r3, #4
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	429a      	cmp	r2, r3
 8012228:	d002      	beq.n	8012230 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801222a:	f06f 0303 	mvn.w	r3, #3
 801222e:	e00d      	b.n	801224c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8012234:	887a      	ldrh	r2, [r7, #2]
 8012236:	697b      	ldr	r3, [r7, #20]
 8012238:	9301      	str	r3, [sp, #4]
 801223a:	6a3b      	ldr	r3, [r7, #32]
 801223c:	9300      	str	r3, [sp, #0]
 801223e:	4613      	mov	r3, r2
 8012240:	687a      	ldr	r2, [r7, #4]
 8012242:	68b9      	ldr	r1, [r7, #8]
 8012244:	68f8      	ldr	r0, [r7, #12]
 8012246:	f000 f811 	bl	801226c <udp_sendto_if_src>
 801224a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801224c:	4618      	mov	r0, r3
 801224e:	3718      	adds	r7, #24
 8012250:	46bd      	mov	sp, r7
 8012252:	bd80      	pop	{r7, pc}
 8012254:	0801b120 	.word	0x0801b120
 8012258:	0801b294 	.word	0x0801b294
 801225c:	0801b174 	.word	0x0801b174
 8012260:	0801b2b0 	.word	0x0801b2b0
 8012264:	0801b2cc 	.word	0x0801b2cc
 8012268:	0801b2ec 	.word	0x0801b2ec

0801226c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801226c:	b580      	push	{r7, lr}
 801226e:	b08c      	sub	sp, #48	; 0x30
 8012270:	af04      	add	r7, sp, #16
 8012272:	60f8      	str	r0, [r7, #12]
 8012274:	60b9      	str	r1, [r7, #8]
 8012276:	607a      	str	r2, [r7, #4]
 8012278:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	2b00      	cmp	r3, #0
 801227e:	d109      	bne.n	8012294 <udp_sendto_if_src+0x28>
 8012280:	4b65      	ldr	r3, [pc, #404]	; (8012418 <udp_sendto_if_src+0x1ac>)
 8012282:	f240 22d1 	movw	r2, #721	; 0x2d1
 8012286:	4965      	ldr	r1, [pc, #404]	; (801241c <udp_sendto_if_src+0x1b0>)
 8012288:	4865      	ldr	r0, [pc, #404]	; (8012420 <udp_sendto_if_src+0x1b4>)
 801228a:	f004 ff8d 	bl	80171a8 <iprintf>
 801228e:	f06f 030f 	mvn.w	r3, #15
 8012292:	e0bc      	b.n	801240e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8012294:	68bb      	ldr	r3, [r7, #8]
 8012296:	2b00      	cmp	r3, #0
 8012298:	d109      	bne.n	80122ae <udp_sendto_if_src+0x42>
 801229a:	4b5f      	ldr	r3, [pc, #380]	; (8012418 <udp_sendto_if_src+0x1ac>)
 801229c:	f240 22d2 	movw	r2, #722	; 0x2d2
 80122a0:	4960      	ldr	r1, [pc, #384]	; (8012424 <udp_sendto_if_src+0x1b8>)
 80122a2:	485f      	ldr	r0, [pc, #380]	; (8012420 <udp_sendto_if_src+0x1b4>)
 80122a4:	f004 ff80 	bl	80171a8 <iprintf>
 80122a8:	f06f 030f 	mvn.w	r3, #15
 80122ac:	e0af      	b.n	801240e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d109      	bne.n	80122c8 <udp_sendto_if_src+0x5c>
 80122b4:	4b58      	ldr	r3, [pc, #352]	; (8012418 <udp_sendto_if_src+0x1ac>)
 80122b6:	f240 22d3 	movw	r2, #723	; 0x2d3
 80122ba:	495b      	ldr	r1, [pc, #364]	; (8012428 <udp_sendto_if_src+0x1bc>)
 80122bc:	4858      	ldr	r0, [pc, #352]	; (8012420 <udp_sendto_if_src+0x1b4>)
 80122be:	f004 ff73 	bl	80171a8 <iprintf>
 80122c2:	f06f 030f 	mvn.w	r3, #15
 80122c6:	e0a2      	b.n	801240e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80122c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d109      	bne.n	80122e2 <udp_sendto_if_src+0x76>
 80122ce:	4b52      	ldr	r3, [pc, #328]	; (8012418 <udp_sendto_if_src+0x1ac>)
 80122d0:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80122d4:	4955      	ldr	r1, [pc, #340]	; (801242c <udp_sendto_if_src+0x1c0>)
 80122d6:	4852      	ldr	r0, [pc, #328]	; (8012420 <udp_sendto_if_src+0x1b4>)
 80122d8:	f004 ff66 	bl	80171a8 <iprintf>
 80122dc:	f06f 030f 	mvn.w	r3, #15
 80122e0:	e095      	b.n	801240e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80122e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d109      	bne.n	80122fc <udp_sendto_if_src+0x90>
 80122e8:	4b4b      	ldr	r3, [pc, #300]	; (8012418 <udp_sendto_if_src+0x1ac>)
 80122ea:	f240 22d5 	movw	r2, #725	; 0x2d5
 80122ee:	4950      	ldr	r1, [pc, #320]	; (8012430 <udp_sendto_if_src+0x1c4>)
 80122f0:	484b      	ldr	r0, [pc, #300]	; (8012420 <udp_sendto_if_src+0x1b4>)
 80122f2:	f004 ff59 	bl	80171a8 <iprintf>
 80122f6:	f06f 030f 	mvn.w	r3, #15
 80122fa:	e088      	b.n	801240e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	8a5b      	ldrh	r3, [r3, #18]
 8012300:	2b00      	cmp	r3, #0
 8012302:	d10f      	bne.n	8012324 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8012304:	68f9      	ldr	r1, [r7, #12]
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	8a5b      	ldrh	r3, [r3, #18]
 801230a:	461a      	mov	r2, r3
 801230c:	68f8      	ldr	r0, [r7, #12]
 801230e:	f000 f893 	bl	8012438 <udp_bind>
 8012312:	4603      	mov	r3, r0
 8012314:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8012316:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801231a:	2b00      	cmp	r3, #0
 801231c:	d002      	beq.n	8012324 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801231e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012322:	e074      	b.n	801240e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8012324:	68bb      	ldr	r3, [r7, #8]
 8012326:	891b      	ldrh	r3, [r3, #8]
 8012328:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801232c:	4293      	cmp	r3, r2
 801232e:	d902      	bls.n	8012336 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8012330:	f04f 33ff 	mov.w	r3, #4294967295
 8012334:	e06b      	b.n	801240e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8012336:	2108      	movs	r1, #8
 8012338:	68b8      	ldr	r0, [r7, #8]
 801233a:	f7f9 f825 	bl	800b388 <pbuf_add_header>
 801233e:	4603      	mov	r3, r0
 8012340:	2b00      	cmp	r3, #0
 8012342:	d015      	beq.n	8012370 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8012344:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012348:	2108      	movs	r1, #8
 801234a:	2022      	movs	r0, #34	; 0x22
 801234c:	f7f8 fdce 	bl	800aeec <pbuf_alloc>
 8012350:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8012352:	69fb      	ldr	r3, [r7, #28]
 8012354:	2b00      	cmp	r3, #0
 8012356:	d102      	bne.n	801235e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8012358:	f04f 33ff 	mov.w	r3, #4294967295
 801235c:	e057      	b.n	801240e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801235e:	68bb      	ldr	r3, [r7, #8]
 8012360:	891b      	ldrh	r3, [r3, #8]
 8012362:	2b00      	cmp	r3, #0
 8012364:	d006      	beq.n	8012374 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8012366:	68b9      	ldr	r1, [r7, #8]
 8012368:	69f8      	ldr	r0, [r7, #28]
 801236a:	f7f9 f9c7 	bl	800b6fc <pbuf_chain>
 801236e:	e001      	b.n	8012374 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8012370:	68bb      	ldr	r3, [r7, #8]
 8012372:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8012374:	69fb      	ldr	r3, [r7, #28]
 8012376:	895b      	ldrh	r3, [r3, #10]
 8012378:	2b07      	cmp	r3, #7
 801237a:	d806      	bhi.n	801238a <udp_sendto_if_src+0x11e>
 801237c:	4b26      	ldr	r3, [pc, #152]	; (8012418 <udp_sendto_if_src+0x1ac>)
 801237e:	f240 320d 	movw	r2, #781	; 0x30d
 8012382:	492c      	ldr	r1, [pc, #176]	; (8012434 <udp_sendto_if_src+0x1c8>)
 8012384:	4826      	ldr	r0, [pc, #152]	; (8012420 <udp_sendto_if_src+0x1b4>)
 8012386:	f004 ff0f 	bl	80171a8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801238a:	69fb      	ldr	r3, [r7, #28]
 801238c:	685b      	ldr	r3, [r3, #4]
 801238e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	8a5b      	ldrh	r3, [r3, #18]
 8012394:	4618      	mov	r0, r3
 8012396:	f7f7 fcd5 	bl	8009d44 <lwip_htons>
 801239a:	4603      	mov	r3, r0
 801239c:	461a      	mov	r2, r3
 801239e:	697b      	ldr	r3, [r7, #20]
 80123a0:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80123a2:	887b      	ldrh	r3, [r7, #2]
 80123a4:	4618      	mov	r0, r3
 80123a6:	f7f7 fccd 	bl	8009d44 <lwip_htons>
 80123aa:	4603      	mov	r3, r0
 80123ac:	461a      	mov	r2, r3
 80123ae:	697b      	ldr	r3, [r7, #20]
 80123b0:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80123b2:	697b      	ldr	r3, [r7, #20]
 80123b4:	2200      	movs	r2, #0
 80123b6:	719a      	strb	r2, [r3, #6]
 80123b8:	2200      	movs	r2, #0
 80123ba:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80123bc:	69fb      	ldr	r3, [r7, #28]
 80123be:	891b      	ldrh	r3, [r3, #8]
 80123c0:	4618      	mov	r0, r3
 80123c2:	f7f7 fcbf 	bl	8009d44 <lwip_htons>
 80123c6:	4603      	mov	r3, r0
 80123c8:	461a      	mov	r2, r3
 80123ca:	697b      	ldr	r3, [r7, #20]
 80123cc:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80123ce:	2311      	movs	r3, #17
 80123d0:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	7adb      	ldrb	r3, [r3, #11]
 80123d6:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	7a9b      	ldrb	r3, [r3, #10]
 80123dc:	7cb9      	ldrb	r1, [r7, #18]
 80123de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80123e0:	9202      	str	r2, [sp, #8]
 80123e2:	7cfa      	ldrb	r2, [r7, #19]
 80123e4:	9201      	str	r2, [sp, #4]
 80123e6:	9300      	str	r3, [sp, #0]
 80123e8:	460b      	mov	r3, r1
 80123ea:	687a      	ldr	r2, [r7, #4]
 80123ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80123ee:	69f8      	ldr	r0, [r7, #28]
 80123f0:	f003 fb44 	bl	8015a7c <ip4_output_if_src>
 80123f4:	4603      	mov	r3, r0
 80123f6:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80123f8:	69fa      	ldr	r2, [r7, #28]
 80123fa:	68bb      	ldr	r3, [r7, #8]
 80123fc:	429a      	cmp	r2, r3
 80123fe:	d004      	beq.n	801240a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8012400:	69f8      	ldr	r0, [r7, #28]
 8012402:	f7f9 f857 	bl	800b4b4 <pbuf_free>
    q = NULL;
 8012406:	2300      	movs	r3, #0
 8012408:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801240a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801240e:	4618      	mov	r0, r3
 8012410:	3720      	adds	r7, #32
 8012412:	46bd      	mov	sp, r7
 8012414:	bd80      	pop	{r7, pc}
 8012416:	bf00      	nop
 8012418:	0801b120 	.word	0x0801b120
 801241c:	0801b30c 	.word	0x0801b30c
 8012420:	0801b174 	.word	0x0801b174
 8012424:	0801b32c 	.word	0x0801b32c
 8012428:	0801b34c 	.word	0x0801b34c
 801242c:	0801b370 	.word	0x0801b370
 8012430:	0801b394 	.word	0x0801b394
 8012434:	0801b3b8 	.word	0x0801b3b8

08012438 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012438:	b580      	push	{r7, lr}
 801243a:	b086      	sub	sp, #24
 801243c:	af00      	add	r7, sp, #0
 801243e:	60f8      	str	r0, [r7, #12]
 8012440:	60b9      	str	r1, [r7, #8]
 8012442:	4613      	mov	r3, r2
 8012444:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8012446:	68bb      	ldr	r3, [r7, #8]
 8012448:	2b00      	cmp	r3, #0
 801244a:	d101      	bne.n	8012450 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801244c:	4b39      	ldr	r3, [pc, #228]	; (8012534 <udp_bind+0xfc>)
 801244e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	2b00      	cmp	r3, #0
 8012454:	d109      	bne.n	801246a <udp_bind+0x32>
 8012456:	4b38      	ldr	r3, [pc, #224]	; (8012538 <udp_bind+0x100>)
 8012458:	f240 32b7 	movw	r2, #951	; 0x3b7
 801245c:	4937      	ldr	r1, [pc, #220]	; (801253c <udp_bind+0x104>)
 801245e:	4838      	ldr	r0, [pc, #224]	; (8012540 <udp_bind+0x108>)
 8012460:	f004 fea2 	bl	80171a8 <iprintf>
 8012464:	f06f 030f 	mvn.w	r3, #15
 8012468:	e060      	b.n	801252c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801246a:	2300      	movs	r3, #0
 801246c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801246e:	4b35      	ldr	r3, [pc, #212]	; (8012544 <udp_bind+0x10c>)
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	617b      	str	r3, [r7, #20]
 8012474:	e009      	b.n	801248a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8012476:	68fa      	ldr	r2, [r7, #12]
 8012478:	697b      	ldr	r3, [r7, #20]
 801247a:	429a      	cmp	r2, r3
 801247c:	d102      	bne.n	8012484 <udp_bind+0x4c>
      rebind = 1;
 801247e:	2301      	movs	r3, #1
 8012480:	74fb      	strb	r3, [r7, #19]
      break;
 8012482:	e005      	b.n	8012490 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012484:	697b      	ldr	r3, [r7, #20]
 8012486:	68db      	ldr	r3, [r3, #12]
 8012488:	617b      	str	r3, [r7, #20]
 801248a:	697b      	ldr	r3, [r7, #20]
 801248c:	2b00      	cmp	r3, #0
 801248e:	d1f2      	bne.n	8012476 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8012490:	88fb      	ldrh	r3, [r7, #6]
 8012492:	2b00      	cmp	r3, #0
 8012494:	d109      	bne.n	80124aa <udp_bind+0x72>
    port = udp_new_port();
 8012496:	f7ff fcc5 	bl	8011e24 <udp_new_port>
 801249a:	4603      	mov	r3, r0
 801249c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801249e:	88fb      	ldrh	r3, [r7, #6]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d12c      	bne.n	80124fe <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80124a4:	f06f 0307 	mvn.w	r3, #7
 80124a8:	e040      	b.n	801252c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80124aa:	4b26      	ldr	r3, [pc, #152]	; (8012544 <udp_bind+0x10c>)
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	617b      	str	r3, [r7, #20]
 80124b0:	e022      	b.n	80124f8 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80124b2:	68fa      	ldr	r2, [r7, #12]
 80124b4:	697b      	ldr	r3, [r7, #20]
 80124b6:	429a      	cmp	r2, r3
 80124b8:	d01b      	beq.n	80124f2 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80124ba:	697b      	ldr	r3, [r7, #20]
 80124bc:	8a5b      	ldrh	r3, [r3, #18]
 80124be:	88fa      	ldrh	r2, [r7, #6]
 80124c0:	429a      	cmp	r2, r3
 80124c2:	d116      	bne.n	80124f2 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80124c4:	697b      	ldr	r3, [r7, #20]
 80124c6:	681a      	ldr	r2, [r3, #0]
 80124c8:	68bb      	ldr	r3, [r7, #8]
 80124ca:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80124cc:	429a      	cmp	r2, r3
 80124ce:	d00d      	beq.n	80124ec <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80124d0:	68bb      	ldr	r3, [r7, #8]
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d00a      	beq.n	80124ec <udp_bind+0xb4>
 80124d6:	68bb      	ldr	r3, [r7, #8]
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d006      	beq.n	80124ec <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80124de:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d003      	beq.n	80124ec <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80124e4:	697b      	ldr	r3, [r7, #20]
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d102      	bne.n	80124f2 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80124ec:	f06f 0307 	mvn.w	r3, #7
 80124f0:	e01c      	b.n	801252c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80124f2:	697b      	ldr	r3, [r7, #20]
 80124f4:	68db      	ldr	r3, [r3, #12]
 80124f6:	617b      	str	r3, [r7, #20]
 80124f8:	697b      	ldr	r3, [r7, #20]
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d1d9      	bne.n	80124b2 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80124fe:	68bb      	ldr	r3, [r7, #8]
 8012500:	2b00      	cmp	r3, #0
 8012502:	d002      	beq.n	801250a <udp_bind+0xd2>
 8012504:	68bb      	ldr	r3, [r7, #8]
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	e000      	b.n	801250c <udp_bind+0xd4>
 801250a:	2300      	movs	r3, #0
 801250c:	68fa      	ldr	r2, [r7, #12]
 801250e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	88fa      	ldrh	r2, [r7, #6]
 8012514:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8012516:	7cfb      	ldrb	r3, [r7, #19]
 8012518:	2b00      	cmp	r3, #0
 801251a:	d106      	bne.n	801252a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801251c:	4b09      	ldr	r3, [pc, #36]	; (8012544 <udp_bind+0x10c>)
 801251e:	681a      	ldr	r2, [r3, #0]
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8012524:	4a07      	ldr	r2, [pc, #28]	; (8012544 <udp_bind+0x10c>)
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801252a:	2300      	movs	r3, #0
}
 801252c:	4618      	mov	r0, r3
 801252e:	3718      	adds	r7, #24
 8012530:	46bd      	mov	sp, r7
 8012532:	bd80      	pop	{r7, pc}
 8012534:	0801c024 	.word	0x0801c024
 8012538:	0801b120 	.word	0x0801b120
 801253c:	0801b3e8 	.word	0x0801b3e8
 8012540:	0801b174 	.word	0x0801b174
 8012544:	2000eff4 	.word	0x2000eff4

08012548 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012548:	b580      	push	{r7, lr}
 801254a:	b086      	sub	sp, #24
 801254c:	af00      	add	r7, sp, #0
 801254e:	60f8      	str	r0, [r7, #12]
 8012550:	60b9      	str	r1, [r7, #8]
 8012552:	4613      	mov	r3, r2
 8012554:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	2b00      	cmp	r3, #0
 801255a:	d109      	bne.n	8012570 <udp_connect+0x28>
 801255c:	4b2c      	ldr	r3, [pc, #176]	; (8012610 <udp_connect+0xc8>)
 801255e:	f240 4235 	movw	r2, #1077	; 0x435
 8012562:	492c      	ldr	r1, [pc, #176]	; (8012614 <udp_connect+0xcc>)
 8012564:	482c      	ldr	r0, [pc, #176]	; (8012618 <udp_connect+0xd0>)
 8012566:	f004 fe1f 	bl	80171a8 <iprintf>
 801256a:	f06f 030f 	mvn.w	r3, #15
 801256e:	e04b      	b.n	8012608 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8012570:	68bb      	ldr	r3, [r7, #8]
 8012572:	2b00      	cmp	r3, #0
 8012574:	d109      	bne.n	801258a <udp_connect+0x42>
 8012576:	4b26      	ldr	r3, [pc, #152]	; (8012610 <udp_connect+0xc8>)
 8012578:	f240 4236 	movw	r2, #1078	; 0x436
 801257c:	4927      	ldr	r1, [pc, #156]	; (801261c <udp_connect+0xd4>)
 801257e:	4826      	ldr	r0, [pc, #152]	; (8012618 <udp_connect+0xd0>)
 8012580:	f004 fe12 	bl	80171a8 <iprintf>
 8012584:	f06f 030f 	mvn.w	r3, #15
 8012588:	e03e      	b.n	8012608 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801258a:	68fb      	ldr	r3, [r7, #12]
 801258c:	8a5b      	ldrh	r3, [r3, #18]
 801258e:	2b00      	cmp	r3, #0
 8012590:	d10f      	bne.n	80125b2 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8012592:	68f9      	ldr	r1, [r7, #12]
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	8a5b      	ldrh	r3, [r3, #18]
 8012598:	461a      	mov	r2, r3
 801259a:	68f8      	ldr	r0, [r7, #12]
 801259c:	f7ff ff4c 	bl	8012438 <udp_bind>
 80125a0:	4603      	mov	r3, r0
 80125a2:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80125a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d002      	beq.n	80125b2 <udp_connect+0x6a>
      return err;
 80125ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80125b0:	e02a      	b.n	8012608 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80125b2:	68bb      	ldr	r3, [r7, #8]
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d002      	beq.n	80125be <udp_connect+0x76>
 80125b8:	68bb      	ldr	r3, [r7, #8]
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	e000      	b.n	80125c0 <udp_connect+0x78>
 80125be:	2300      	movs	r3, #0
 80125c0:	68fa      	ldr	r2, [r7, #12]
 80125c2:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	88fa      	ldrh	r2, [r7, #6]
 80125c8:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80125ca:	68fb      	ldr	r3, [r7, #12]
 80125cc:	7c1b      	ldrb	r3, [r3, #16]
 80125ce:	f043 0304 	orr.w	r3, r3, #4
 80125d2:	b2da      	uxtb	r2, r3
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80125d8:	4b11      	ldr	r3, [pc, #68]	; (8012620 <udp_connect+0xd8>)
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	617b      	str	r3, [r7, #20]
 80125de:	e008      	b.n	80125f2 <udp_connect+0xaa>
    if (pcb == ipcb) {
 80125e0:	68fa      	ldr	r2, [r7, #12]
 80125e2:	697b      	ldr	r3, [r7, #20]
 80125e4:	429a      	cmp	r2, r3
 80125e6:	d101      	bne.n	80125ec <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80125e8:	2300      	movs	r3, #0
 80125ea:	e00d      	b.n	8012608 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80125ec:	697b      	ldr	r3, [r7, #20]
 80125ee:	68db      	ldr	r3, [r3, #12]
 80125f0:	617b      	str	r3, [r7, #20]
 80125f2:	697b      	ldr	r3, [r7, #20]
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d1f3      	bne.n	80125e0 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80125f8:	4b09      	ldr	r3, [pc, #36]	; (8012620 <udp_connect+0xd8>)
 80125fa:	681a      	ldr	r2, [r3, #0]
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8012600:	4a07      	ldr	r2, [pc, #28]	; (8012620 <udp_connect+0xd8>)
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8012606:	2300      	movs	r3, #0
}
 8012608:	4618      	mov	r0, r3
 801260a:	3718      	adds	r7, #24
 801260c:	46bd      	mov	sp, r7
 801260e:	bd80      	pop	{r7, pc}
 8012610:	0801b120 	.word	0x0801b120
 8012614:	0801b400 	.word	0x0801b400
 8012618:	0801b174 	.word	0x0801b174
 801261c:	0801b41c 	.word	0x0801b41c
 8012620:	2000eff4 	.word	0x2000eff4

08012624 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8012624:	b580      	push	{r7, lr}
 8012626:	b084      	sub	sp, #16
 8012628:	af00      	add	r7, sp, #0
 801262a:	60f8      	str	r0, [r7, #12]
 801262c:	60b9      	str	r1, [r7, #8]
 801262e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	2b00      	cmp	r3, #0
 8012634:	d107      	bne.n	8012646 <udp_recv+0x22>
 8012636:	4b08      	ldr	r3, [pc, #32]	; (8012658 <udp_recv+0x34>)
 8012638:	f240 428a 	movw	r2, #1162	; 0x48a
 801263c:	4907      	ldr	r1, [pc, #28]	; (801265c <udp_recv+0x38>)
 801263e:	4808      	ldr	r0, [pc, #32]	; (8012660 <udp_recv+0x3c>)
 8012640:	f004 fdb2 	bl	80171a8 <iprintf>
 8012644:	e005      	b.n	8012652 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	68ba      	ldr	r2, [r7, #8]
 801264a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	687a      	ldr	r2, [r7, #4]
 8012650:	61da      	str	r2, [r3, #28]
}
 8012652:	3710      	adds	r7, #16
 8012654:	46bd      	mov	sp, r7
 8012656:	bd80      	pop	{r7, pc}
 8012658:	0801b120 	.word	0x0801b120
 801265c:	0801b454 	.word	0x0801b454
 8012660:	0801b174 	.word	0x0801b174

08012664 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8012664:	b580      	push	{r7, lr}
 8012666:	b084      	sub	sp, #16
 8012668:	af00      	add	r7, sp, #0
 801266a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	2b00      	cmp	r3, #0
 8012670:	d107      	bne.n	8012682 <udp_remove+0x1e>
 8012672:	4b19      	ldr	r3, [pc, #100]	; (80126d8 <udp_remove+0x74>)
 8012674:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8012678:	4918      	ldr	r1, [pc, #96]	; (80126dc <udp_remove+0x78>)
 801267a:	4819      	ldr	r0, [pc, #100]	; (80126e0 <udp_remove+0x7c>)
 801267c:	f004 fd94 	bl	80171a8 <iprintf>
 8012680:	e026      	b.n	80126d0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8012682:	4b18      	ldr	r3, [pc, #96]	; (80126e4 <udp_remove+0x80>)
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	687a      	ldr	r2, [r7, #4]
 8012688:	429a      	cmp	r2, r3
 801268a:	d105      	bne.n	8012698 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801268c:	4b15      	ldr	r3, [pc, #84]	; (80126e4 <udp_remove+0x80>)
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	68db      	ldr	r3, [r3, #12]
 8012692:	4a14      	ldr	r2, [pc, #80]	; (80126e4 <udp_remove+0x80>)
 8012694:	6013      	str	r3, [r2, #0]
 8012696:	e017      	b.n	80126c8 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012698:	4b12      	ldr	r3, [pc, #72]	; (80126e4 <udp_remove+0x80>)
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	60fb      	str	r3, [r7, #12]
 801269e:	e010      	b.n	80126c2 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	68db      	ldr	r3, [r3, #12]
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d009      	beq.n	80126bc <udp_remove+0x58>
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	68db      	ldr	r3, [r3, #12]
 80126ac:	687a      	ldr	r2, [r7, #4]
 80126ae:	429a      	cmp	r2, r3
 80126b0:	d104      	bne.n	80126bc <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	68da      	ldr	r2, [r3, #12]
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	60da      	str	r2, [r3, #12]
        break;
 80126ba:	e005      	b.n	80126c8 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	68db      	ldr	r3, [r3, #12]
 80126c0:	60fb      	str	r3, [r7, #12]
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d1eb      	bne.n	80126a0 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80126c8:	6879      	ldr	r1, [r7, #4]
 80126ca:	2000      	movs	r0, #0
 80126cc:	f7f8 f842 	bl	800a754 <memp_free>
}
 80126d0:	3710      	adds	r7, #16
 80126d2:	46bd      	mov	sp, r7
 80126d4:	bd80      	pop	{r7, pc}
 80126d6:	bf00      	nop
 80126d8:	0801b120 	.word	0x0801b120
 80126dc:	0801b46c 	.word	0x0801b46c
 80126e0:	0801b174 	.word	0x0801b174
 80126e4:	2000eff4 	.word	0x2000eff4

080126e8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80126e8:	b580      	push	{r7, lr}
 80126ea:	b082      	sub	sp, #8
 80126ec:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80126ee:	2000      	movs	r0, #0
 80126f0:	f7f7 ffde 	bl	800a6b0 <memp_malloc>
 80126f4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d007      	beq.n	801270c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80126fc:	2220      	movs	r2, #32
 80126fe:	2100      	movs	r1, #0
 8012700:	6878      	ldr	r0, [r7, #4]
 8012702:	f004 fcee 	bl	80170e2 <memset>
    pcb->ttl = UDP_TTL;
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	22ff      	movs	r2, #255	; 0xff
 801270a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801270c:	687b      	ldr	r3, [r7, #4]
}
 801270e:	4618      	mov	r0, r3
 8012710:	3708      	adds	r7, #8
 8012712:	46bd      	mov	sp, r7
 8012714:	bd80      	pop	{r7, pc}

08012716 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8012716:	b580      	push	{r7, lr}
 8012718:	b084      	sub	sp, #16
 801271a:	af00      	add	r7, sp, #0
 801271c:	4603      	mov	r3, r0
 801271e:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8012720:	f7ff ffe2 	bl	80126e8 <udp_new>
 8012724:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8012726:	68fb      	ldr	r3, [r7, #12]
}
 8012728:	4618      	mov	r0, r3
 801272a:	3710      	adds	r7, #16
 801272c:	46bd      	mov	sp, r7
 801272e:	bd80      	pop	{r7, pc}

08012730 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012730:	b480      	push	{r7}
 8012732:	b085      	sub	sp, #20
 8012734:	af00      	add	r7, sp, #0
 8012736:	6078      	str	r0, [r7, #4]
 8012738:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d01e      	beq.n	801277e <udp_netif_ip_addr_changed+0x4e>
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	2b00      	cmp	r3, #0
 8012746:	d01a      	beq.n	801277e <udp_netif_ip_addr_changed+0x4e>
 8012748:	683b      	ldr	r3, [r7, #0]
 801274a:	2b00      	cmp	r3, #0
 801274c:	d017      	beq.n	801277e <udp_netif_ip_addr_changed+0x4e>
 801274e:	683b      	ldr	r3, [r7, #0]
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	2b00      	cmp	r3, #0
 8012754:	d013      	beq.n	801277e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012756:	4b0d      	ldr	r3, [pc, #52]	; (801278c <udp_netif_ip_addr_changed+0x5c>)
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	60fb      	str	r3, [r7, #12]
 801275c:	e00c      	b.n	8012778 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	681a      	ldr	r2, [r3, #0]
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	429a      	cmp	r2, r3
 8012768:	d103      	bne.n	8012772 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801276a:	683b      	ldr	r3, [r7, #0]
 801276c:	681a      	ldr	r2, [r3, #0]
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	68db      	ldr	r3, [r3, #12]
 8012776:	60fb      	str	r3, [r7, #12]
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	2b00      	cmp	r3, #0
 801277c:	d1ef      	bne.n	801275e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801277e:	bf00      	nop
 8012780:	3714      	adds	r7, #20
 8012782:	46bd      	mov	sp, r7
 8012784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012788:	4770      	bx	lr
 801278a:	bf00      	nop
 801278c:	2000eff4 	.word	0x2000eff4

08012790 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8012790:	b580      	push	{r7, lr}
 8012792:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8012794:	4b20      	ldr	r3, [pc, #128]	; (8012818 <dhcp_inc_pcb_refcount+0x88>)
 8012796:	781b      	ldrb	r3, [r3, #0]
 8012798:	2b00      	cmp	r3, #0
 801279a:	d133      	bne.n	8012804 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 801279c:	4b1f      	ldr	r3, [pc, #124]	; (801281c <dhcp_inc_pcb_refcount+0x8c>)
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d005      	beq.n	80127b0 <dhcp_inc_pcb_refcount+0x20>
 80127a4:	4b1e      	ldr	r3, [pc, #120]	; (8012820 <dhcp_inc_pcb_refcount+0x90>)
 80127a6:	22e5      	movs	r2, #229	; 0xe5
 80127a8:	491e      	ldr	r1, [pc, #120]	; (8012824 <dhcp_inc_pcb_refcount+0x94>)
 80127aa:	481f      	ldr	r0, [pc, #124]	; (8012828 <dhcp_inc_pcb_refcount+0x98>)
 80127ac:	f004 fcfc 	bl	80171a8 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 80127b0:	f7ff ff9a 	bl	80126e8 <udp_new>
 80127b4:	4603      	mov	r3, r0
 80127b6:	4a19      	ldr	r2, [pc, #100]	; (801281c <dhcp_inc_pcb_refcount+0x8c>)
 80127b8:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 80127ba:	4b18      	ldr	r3, [pc, #96]	; (801281c <dhcp_inc_pcb_refcount+0x8c>)
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d102      	bne.n	80127c8 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 80127c2:	f04f 33ff 	mov.w	r3, #4294967295
 80127c6:	e024      	b.n	8012812 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80127c8:	4b14      	ldr	r3, [pc, #80]	; (801281c <dhcp_inc_pcb_refcount+0x8c>)
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	7a5a      	ldrb	r2, [r3, #9]
 80127ce:	4b13      	ldr	r3, [pc, #76]	; (801281c <dhcp_inc_pcb_refcount+0x8c>)
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	f042 0220 	orr.w	r2, r2, #32
 80127d6:	b2d2      	uxtb	r2, r2
 80127d8:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80127da:	4b10      	ldr	r3, [pc, #64]	; (801281c <dhcp_inc_pcb_refcount+0x8c>)
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	2244      	movs	r2, #68	; 0x44
 80127e0:	4912      	ldr	r1, [pc, #72]	; (801282c <dhcp_inc_pcb_refcount+0x9c>)
 80127e2:	4618      	mov	r0, r3
 80127e4:	f7ff fe28 	bl	8012438 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80127e8:	4b0c      	ldr	r3, [pc, #48]	; (801281c <dhcp_inc_pcb_refcount+0x8c>)
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	2243      	movs	r2, #67	; 0x43
 80127ee:	490f      	ldr	r1, [pc, #60]	; (801282c <dhcp_inc_pcb_refcount+0x9c>)
 80127f0:	4618      	mov	r0, r3
 80127f2:	f7ff fea9 	bl	8012548 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80127f6:	4b09      	ldr	r3, [pc, #36]	; (801281c <dhcp_inc_pcb_refcount+0x8c>)
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	2200      	movs	r2, #0
 80127fc:	490c      	ldr	r1, [pc, #48]	; (8012830 <dhcp_inc_pcb_refcount+0xa0>)
 80127fe:	4618      	mov	r0, r3
 8012800:	f7ff ff10 	bl	8012624 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8012804:	4b04      	ldr	r3, [pc, #16]	; (8012818 <dhcp_inc_pcb_refcount+0x88>)
 8012806:	781b      	ldrb	r3, [r3, #0]
 8012808:	3301      	adds	r3, #1
 801280a:	b2da      	uxtb	r2, r3
 801280c:	4b02      	ldr	r3, [pc, #8]	; (8012818 <dhcp_inc_pcb_refcount+0x88>)
 801280e:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8012810:	2300      	movs	r3, #0
}
 8012812:	4618      	mov	r0, r3
 8012814:	bd80      	pop	{r7, pc}
 8012816:	bf00      	nop
 8012818:	20008590 	.word	0x20008590
 801281c:	2000858c 	.word	0x2000858c
 8012820:	0801b484 	.word	0x0801b484
 8012824:	0801b4bc 	.word	0x0801b4bc
 8012828:	0801b4e4 	.word	0x0801b4e4
 801282c:	0801c024 	.word	0x0801c024
 8012830:	080140c5 	.word	0x080140c5

08012834 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8012834:	b580      	push	{r7, lr}
 8012836:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8012838:	4b0e      	ldr	r3, [pc, #56]	; (8012874 <dhcp_dec_pcb_refcount+0x40>)
 801283a:	781b      	ldrb	r3, [r3, #0]
 801283c:	2b00      	cmp	r3, #0
 801283e:	d105      	bne.n	801284c <dhcp_dec_pcb_refcount+0x18>
 8012840:	4b0d      	ldr	r3, [pc, #52]	; (8012878 <dhcp_dec_pcb_refcount+0x44>)
 8012842:	22ff      	movs	r2, #255	; 0xff
 8012844:	490d      	ldr	r1, [pc, #52]	; (801287c <dhcp_dec_pcb_refcount+0x48>)
 8012846:	480e      	ldr	r0, [pc, #56]	; (8012880 <dhcp_dec_pcb_refcount+0x4c>)
 8012848:	f004 fcae 	bl	80171a8 <iprintf>
  dhcp_pcb_refcount--;
 801284c:	4b09      	ldr	r3, [pc, #36]	; (8012874 <dhcp_dec_pcb_refcount+0x40>)
 801284e:	781b      	ldrb	r3, [r3, #0]
 8012850:	3b01      	subs	r3, #1
 8012852:	b2da      	uxtb	r2, r3
 8012854:	4b07      	ldr	r3, [pc, #28]	; (8012874 <dhcp_dec_pcb_refcount+0x40>)
 8012856:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8012858:	4b06      	ldr	r3, [pc, #24]	; (8012874 <dhcp_dec_pcb_refcount+0x40>)
 801285a:	781b      	ldrb	r3, [r3, #0]
 801285c:	2b00      	cmp	r3, #0
 801285e:	d107      	bne.n	8012870 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8012860:	4b08      	ldr	r3, [pc, #32]	; (8012884 <dhcp_dec_pcb_refcount+0x50>)
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	4618      	mov	r0, r3
 8012866:	f7ff fefd 	bl	8012664 <udp_remove>
    dhcp_pcb = NULL;
 801286a:	4b06      	ldr	r3, [pc, #24]	; (8012884 <dhcp_dec_pcb_refcount+0x50>)
 801286c:	2200      	movs	r2, #0
 801286e:	601a      	str	r2, [r3, #0]
  }
}
 8012870:	bf00      	nop
 8012872:	bd80      	pop	{r7, pc}
 8012874:	20008590 	.word	0x20008590
 8012878:	0801b484 	.word	0x0801b484
 801287c:	0801b50c 	.word	0x0801b50c
 8012880:	0801b4e4 	.word	0x0801b4e4
 8012884:	2000858c 	.word	0x2000858c

08012888 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8012888:	b580      	push	{r7, lr}
 801288a:	b084      	sub	sp, #16
 801288c:	af00      	add	r7, sp, #0
 801288e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012894:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8012896:	210c      	movs	r1, #12
 8012898:	68f8      	ldr	r0, [r7, #12]
 801289a:	f001 f855 	bl	8013948 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801289e:	4b06      	ldr	r3, [pc, #24]	; (80128b8 <dhcp_handle_nak+0x30>)
 80128a0:	4a05      	ldr	r2, [pc, #20]	; (80128b8 <dhcp_handle_nak+0x30>)
 80128a2:	4905      	ldr	r1, [pc, #20]	; (80128b8 <dhcp_handle_nak+0x30>)
 80128a4:	6878      	ldr	r0, [r7, #4]
 80128a6:	f7f8 f8f7 	bl	800aa98 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 80128aa:	6878      	ldr	r0, [r7, #4]
 80128ac:	f000 fc48 	bl	8013140 <dhcp_discover>
}
 80128b0:	bf00      	nop
 80128b2:	3710      	adds	r7, #16
 80128b4:	46bd      	mov	sp, r7
 80128b6:	bd80      	pop	{r7, pc}
 80128b8:	0801c024 	.word	0x0801c024

080128bc <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 80128bc:	b580      	push	{r7, lr}
 80128be:	b084      	sub	sp, #16
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128c8:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 80128ca:	2108      	movs	r1, #8
 80128cc:	68f8      	ldr	r0, [r7, #12]
 80128ce:	f001 f83b 	bl	8013948 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 80128d2:	68fb      	ldr	r3, [r7, #12]
 80128d4:	331c      	adds	r3, #28
 80128d6:	2200      	movs	r2, #0
 80128d8:	4619      	mov	r1, r3
 80128da:	6878      	ldr	r0, [r7, #4]
 80128dc:	f002 fb3c 	bl	8014f58 <etharp_query>
 80128e0:	4603      	mov	r3, r0
 80128e2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	799b      	ldrb	r3, [r3, #6]
 80128e8:	2bff      	cmp	r3, #255	; 0xff
 80128ea:	d005      	beq.n	80128f8 <dhcp_check+0x3c>
    dhcp->tries++;
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	799b      	ldrb	r3, [r3, #6]
 80128f0:	3301      	adds	r3, #1
 80128f2:	b2da      	uxtb	r2, r3
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 80128f8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80128fc:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80128fe:	893b      	ldrh	r3, [r7, #8]
 8012900:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012904:	4a06      	ldr	r2, [pc, #24]	; (8012920 <dhcp_check+0x64>)
 8012906:	fb82 1203 	smull	r1, r2, r2, r3
 801290a:	1152      	asrs	r2, r2, #5
 801290c:	17db      	asrs	r3, r3, #31
 801290e:	1ad3      	subs	r3, r2, r3
 8012910:	b29a      	uxth	r2, r3
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8012916:	bf00      	nop
 8012918:	3710      	adds	r7, #16
 801291a:	46bd      	mov	sp, r7
 801291c:	bd80      	pop	{r7, pc}
 801291e:	bf00      	nop
 8012920:	10624dd3 	.word	0x10624dd3

08012924 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8012924:	b580      	push	{r7, lr}
 8012926:	b084      	sub	sp, #16
 8012928:	af00      	add	r7, sp, #0
 801292a:	6078      	str	r0, [r7, #4]
 801292c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012932:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8012934:	4b0c      	ldr	r3, [pc, #48]	; (8012968 <dhcp_handle_offer+0x44>)
 8012936:	789b      	ldrb	r3, [r3, #2]
 8012938:	2b00      	cmp	r3, #0
 801293a:	d011      	beq.n	8012960 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	2200      	movs	r2, #0
 8012940:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8012942:	4b0a      	ldr	r3, [pc, #40]	; (801296c <dhcp_handle_offer+0x48>)
 8012944:	689b      	ldr	r3, [r3, #8]
 8012946:	4618      	mov	r0, r3
 8012948:	f7f7 fa11 	bl	8009d6e <lwip_htonl>
 801294c:	4602      	mov	r2, r0
 801294e:	68fb      	ldr	r3, [r7, #12]
 8012950:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8012952:	683b      	ldr	r3, [r7, #0]
 8012954:	691a      	ldr	r2, [r3, #16]
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801295a:	6878      	ldr	r0, [r7, #4]
 801295c:	f000 f808 	bl	8012970 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8012960:	bf00      	nop
 8012962:	3710      	adds	r7, #16
 8012964:	46bd      	mov	sp, r7
 8012966:	bd80      	pop	{r7, pc}
 8012968:	2000eff8 	.word	0x2000eff8
 801296c:	2000f000 	.word	0x2000f000

08012970 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8012970:	b5b0      	push	{r4, r5, r7, lr}
 8012972:	b08a      	sub	sp, #40	; 0x28
 8012974:	af02      	add	r7, sp, #8
 8012976:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	2b00      	cmp	r3, #0
 801297c:	d109      	bne.n	8012992 <dhcp_select+0x22>
 801297e:	4b71      	ldr	r3, [pc, #452]	; (8012b44 <dhcp_select+0x1d4>)
 8012980:	f240 1277 	movw	r2, #375	; 0x177
 8012984:	4970      	ldr	r1, [pc, #448]	; (8012b48 <dhcp_select+0x1d8>)
 8012986:	4871      	ldr	r0, [pc, #452]	; (8012b4c <dhcp_select+0x1dc>)
 8012988:	f004 fc0e 	bl	80171a8 <iprintf>
 801298c:	f06f 030f 	mvn.w	r3, #15
 8012990:	e0d3      	b.n	8012b3a <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012996:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8012998:	69bb      	ldr	r3, [r7, #24]
 801299a:	2b00      	cmp	r3, #0
 801299c:	d109      	bne.n	80129b2 <dhcp_select+0x42>
 801299e:	4b69      	ldr	r3, [pc, #420]	; (8012b44 <dhcp_select+0x1d4>)
 80129a0:	f240 1279 	movw	r2, #377	; 0x179
 80129a4:	496a      	ldr	r1, [pc, #424]	; (8012b50 <dhcp_select+0x1e0>)
 80129a6:	4869      	ldr	r0, [pc, #420]	; (8012b4c <dhcp_select+0x1dc>)
 80129a8:	f004 fbfe 	bl	80171a8 <iprintf>
 80129ac:	f06f 0305 	mvn.w	r3, #5
 80129b0:	e0c3      	b.n	8012b3a <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 80129b2:	2101      	movs	r1, #1
 80129b4:	69b8      	ldr	r0, [r7, #24]
 80129b6:	f000 ffc7 	bl	8013948 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80129ba:	f107 030c 	add.w	r3, r7, #12
 80129be:	2203      	movs	r2, #3
 80129c0:	69b9      	ldr	r1, [r7, #24]
 80129c2:	6878      	ldr	r0, [r7, #4]
 80129c4:	f001 fc4c 	bl	8014260 <dhcp_create_msg>
 80129c8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80129ca:	697b      	ldr	r3, [r7, #20]
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	f000 8085 	beq.w	8012adc <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80129d2:	697b      	ldr	r3, [r7, #20]
 80129d4:	685b      	ldr	r3, [r3, #4]
 80129d6:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80129d8:	89b8      	ldrh	r0, [r7, #12]
 80129da:	693b      	ldr	r3, [r7, #16]
 80129dc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80129e0:	2302      	movs	r3, #2
 80129e2:	2239      	movs	r2, #57	; 0x39
 80129e4:	f000 ffca 	bl	801397c <dhcp_option>
 80129e8:	4603      	mov	r3, r0
 80129ea:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80129ec:	89b8      	ldrh	r0, [r7, #12]
 80129ee:	693b      	ldr	r3, [r7, #16]
 80129f0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80129f8:	461a      	mov	r2, r3
 80129fa:	f001 f819 	bl	8013a30 <dhcp_option_short>
 80129fe:	4603      	mov	r3, r0
 8012a00:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8012a02:	89b8      	ldrh	r0, [r7, #12]
 8012a04:	693b      	ldr	r3, [r7, #16]
 8012a06:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012a0a:	2304      	movs	r3, #4
 8012a0c:	2232      	movs	r2, #50	; 0x32
 8012a0e:	f000 ffb5 	bl	801397c <dhcp_option>
 8012a12:	4603      	mov	r3, r0
 8012a14:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8012a16:	89bc      	ldrh	r4, [r7, #12]
 8012a18:	693b      	ldr	r3, [r7, #16]
 8012a1a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8012a1e:	69bb      	ldr	r3, [r7, #24]
 8012a20:	69db      	ldr	r3, [r3, #28]
 8012a22:	4618      	mov	r0, r3
 8012a24:	f7f7 f9a3 	bl	8009d6e <lwip_htonl>
 8012a28:	4603      	mov	r3, r0
 8012a2a:	461a      	mov	r2, r3
 8012a2c:	4629      	mov	r1, r5
 8012a2e:	4620      	mov	r0, r4
 8012a30:	f001 f830 	bl	8013a94 <dhcp_option_long>
 8012a34:	4603      	mov	r3, r0
 8012a36:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8012a38:	89b8      	ldrh	r0, [r7, #12]
 8012a3a:	693b      	ldr	r3, [r7, #16]
 8012a3c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012a40:	2304      	movs	r3, #4
 8012a42:	2236      	movs	r2, #54	; 0x36
 8012a44:	f000 ff9a 	bl	801397c <dhcp_option>
 8012a48:	4603      	mov	r3, r0
 8012a4a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8012a4c:	89bc      	ldrh	r4, [r7, #12]
 8012a4e:	693b      	ldr	r3, [r7, #16]
 8012a50:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8012a54:	69bb      	ldr	r3, [r7, #24]
 8012a56:	699b      	ldr	r3, [r3, #24]
 8012a58:	4618      	mov	r0, r3
 8012a5a:	f7f7 f988 	bl	8009d6e <lwip_htonl>
 8012a5e:	4603      	mov	r3, r0
 8012a60:	461a      	mov	r2, r3
 8012a62:	4629      	mov	r1, r5
 8012a64:	4620      	mov	r0, r4
 8012a66:	f001 f815 	bl	8013a94 <dhcp_option_long>
 8012a6a:	4603      	mov	r3, r0
 8012a6c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012a6e:	89b8      	ldrh	r0, [r7, #12]
 8012a70:	693b      	ldr	r3, [r7, #16]
 8012a72:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012a76:	2303      	movs	r3, #3
 8012a78:	2237      	movs	r2, #55	; 0x37
 8012a7a:	f000 ff7f 	bl	801397c <dhcp_option>
 8012a7e:	4603      	mov	r3, r0
 8012a80:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012a82:	2300      	movs	r3, #0
 8012a84:	77bb      	strb	r3, [r7, #30]
 8012a86:	e00e      	b.n	8012aa6 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012a88:	89b8      	ldrh	r0, [r7, #12]
 8012a8a:	693b      	ldr	r3, [r7, #16]
 8012a8c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012a90:	7fbb      	ldrb	r3, [r7, #30]
 8012a92:	4a30      	ldr	r2, [pc, #192]	; (8012b54 <dhcp_select+0x1e4>)
 8012a94:	5cd3      	ldrb	r3, [r2, r3]
 8012a96:	461a      	mov	r2, r3
 8012a98:	f000 ffa4 	bl	80139e4 <dhcp_option_byte>
 8012a9c:	4603      	mov	r3, r0
 8012a9e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012aa0:	7fbb      	ldrb	r3, [r7, #30]
 8012aa2:	3301      	adds	r3, #1
 8012aa4:	77bb      	strb	r3, [r7, #30]
 8012aa6:	7fbb      	ldrb	r3, [r7, #30]
 8012aa8:	2b02      	cmp	r3, #2
 8012aaa:	d9ed      	bls.n	8012a88 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012aac:	89b8      	ldrh	r0, [r7, #12]
 8012aae:	693b      	ldr	r3, [r7, #16]
 8012ab0:	33f0      	adds	r3, #240	; 0xf0
 8012ab2:	697a      	ldr	r2, [r7, #20]
 8012ab4:	4619      	mov	r1, r3
 8012ab6:	f001 fca9 	bl	801440c <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8012aba:	4b27      	ldr	r3, [pc, #156]	; (8012b58 <dhcp_select+0x1e8>)
 8012abc:	6818      	ldr	r0, [r3, #0]
 8012abe:	4b27      	ldr	r3, [pc, #156]	; (8012b5c <dhcp_select+0x1ec>)
 8012ac0:	9301      	str	r3, [sp, #4]
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	9300      	str	r3, [sp, #0]
 8012ac6:	2343      	movs	r3, #67	; 0x43
 8012ac8:	4a25      	ldr	r2, [pc, #148]	; (8012b60 <dhcp_select+0x1f0>)
 8012aca:	6979      	ldr	r1, [r7, #20]
 8012acc:	f7ff fbce 	bl	801226c <udp_sendto_if_src>
 8012ad0:	4603      	mov	r3, r0
 8012ad2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8012ad4:	6978      	ldr	r0, [r7, #20]
 8012ad6:	f7f8 fced 	bl	800b4b4 <pbuf_free>
 8012ada:	e001      	b.n	8012ae0 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8012adc:	23ff      	movs	r3, #255	; 0xff
 8012ade:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8012ae0:	69bb      	ldr	r3, [r7, #24]
 8012ae2:	799b      	ldrb	r3, [r3, #6]
 8012ae4:	2bff      	cmp	r3, #255	; 0xff
 8012ae6:	d005      	beq.n	8012af4 <dhcp_select+0x184>
    dhcp->tries++;
 8012ae8:	69bb      	ldr	r3, [r7, #24]
 8012aea:	799b      	ldrb	r3, [r3, #6]
 8012aec:	3301      	adds	r3, #1
 8012aee:	b2da      	uxtb	r2, r3
 8012af0:	69bb      	ldr	r3, [r7, #24]
 8012af2:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8012af4:	69bb      	ldr	r3, [r7, #24]
 8012af6:	799b      	ldrb	r3, [r3, #6]
 8012af8:	2b05      	cmp	r3, #5
 8012afa:	d80d      	bhi.n	8012b18 <dhcp_select+0x1a8>
 8012afc:	69bb      	ldr	r3, [r7, #24]
 8012afe:	799b      	ldrb	r3, [r3, #6]
 8012b00:	461a      	mov	r2, r3
 8012b02:	2301      	movs	r3, #1
 8012b04:	4093      	lsls	r3, r2
 8012b06:	b29b      	uxth	r3, r3
 8012b08:	461a      	mov	r2, r3
 8012b0a:	0152      	lsls	r2, r2, #5
 8012b0c:	1ad2      	subs	r2, r2, r3
 8012b0e:	0092      	lsls	r2, r2, #2
 8012b10:	4413      	add	r3, r2
 8012b12:	00db      	lsls	r3, r3, #3
 8012b14:	b29b      	uxth	r3, r3
 8012b16:	e001      	b.n	8012b1c <dhcp_select+0x1ac>
 8012b18:	f64e 2360 	movw	r3, #60000	; 0xea60
 8012b1c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012b1e:	89fb      	ldrh	r3, [r7, #14]
 8012b20:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012b24:	4a0f      	ldr	r2, [pc, #60]	; (8012b64 <dhcp_select+0x1f4>)
 8012b26:	fb82 1203 	smull	r1, r2, r2, r3
 8012b2a:	1152      	asrs	r2, r2, #5
 8012b2c:	17db      	asrs	r3, r3, #31
 8012b2e:	1ad3      	subs	r3, r2, r3
 8012b30:	b29a      	uxth	r2, r3
 8012b32:	69bb      	ldr	r3, [r7, #24]
 8012b34:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012b36:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012b3a:	4618      	mov	r0, r3
 8012b3c:	3720      	adds	r7, #32
 8012b3e:	46bd      	mov	sp, r7
 8012b40:	bdb0      	pop	{r4, r5, r7, pc}
 8012b42:	bf00      	nop
 8012b44:	0801b484 	.word	0x0801b484
 8012b48:	0801b530 	.word	0x0801b530
 8012b4c:	0801b4e4 	.word	0x0801b4e4
 8012b50:	0801b54c 	.word	0x0801b54c
 8012b54:	2000001c 	.word	0x2000001c
 8012b58:	2000858c 	.word	0x2000858c
 8012b5c:	0801c024 	.word	0x0801c024
 8012b60:	0801c028 	.word	0x0801c028
 8012b64:	10624dd3 	.word	0x10624dd3

08012b68 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b082      	sub	sp, #8
 8012b6c:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8012b6e:	4b27      	ldr	r3, [pc, #156]	; (8012c0c <dhcp_coarse_tmr+0xa4>)
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	607b      	str	r3, [r7, #4]
 8012b74:	e042      	b.n	8012bfc <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b7a:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8012b7c:	683b      	ldr	r3, [r7, #0]
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d039      	beq.n	8012bf6 <dhcp_coarse_tmr+0x8e>
 8012b82:	683b      	ldr	r3, [r7, #0]
 8012b84:	795b      	ldrb	r3, [r3, #5]
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d035      	beq.n	8012bf6 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8012b8a:	683b      	ldr	r3, [r7, #0]
 8012b8c:	8a9b      	ldrh	r3, [r3, #20]
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d012      	beq.n	8012bb8 <dhcp_coarse_tmr+0x50>
 8012b92:	683b      	ldr	r3, [r7, #0]
 8012b94:	8a5b      	ldrh	r3, [r3, #18]
 8012b96:	3301      	adds	r3, #1
 8012b98:	b29a      	uxth	r2, r3
 8012b9a:	683b      	ldr	r3, [r7, #0]
 8012b9c:	825a      	strh	r2, [r3, #18]
 8012b9e:	683b      	ldr	r3, [r7, #0]
 8012ba0:	8a5a      	ldrh	r2, [r3, #18]
 8012ba2:	683b      	ldr	r3, [r7, #0]
 8012ba4:	8a9b      	ldrh	r3, [r3, #20]
 8012ba6:	429a      	cmp	r2, r3
 8012ba8:	d106      	bne.n	8012bb8 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8012baa:	6878      	ldr	r0, [r7, #4]
 8012bac:	f000 fe32 	bl	8013814 <dhcp_release_and_stop>
        dhcp_start(netif);
 8012bb0:	6878      	ldr	r0, [r7, #4]
 8012bb2:	f000 f969 	bl	8012e88 <dhcp_start>
 8012bb6:	e01e      	b.n	8012bf6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8012bb8:	683b      	ldr	r3, [r7, #0]
 8012bba:	8a1b      	ldrh	r3, [r3, #16]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d00b      	beq.n	8012bd8 <dhcp_coarse_tmr+0x70>
 8012bc0:	683b      	ldr	r3, [r7, #0]
 8012bc2:	8a1b      	ldrh	r3, [r3, #16]
 8012bc4:	1e5a      	subs	r2, r3, #1
 8012bc6:	b291      	uxth	r1, r2
 8012bc8:	683a      	ldr	r2, [r7, #0]
 8012bca:	8211      	strh	r1, [r2, #16]
 8012bcc:	2b01      	cmp	r3, #1
 8012bce:	d103      	bne.n	8012bd8 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8012bd0:	6878      	ldr	r0, [r7, #4]
 8012bd2:	f000 f8c6 	bl	8012d62 <dhcp_t2_timeout>
 8012bd6:	e00e      	b.n	8012bf6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8012bd8:	683b      	ldr	r3, [r7, #0]
 8012bda:	89db      	ldrh	r3, [r3, #14]
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d00a      	beq.n	8012bf6 <dhcp_coarse_tmr+0x8e>
 8012be0:	683b      	ldr	r3, [r7, #0]
 8012be2:	89db      	ldrh	r3, [r3, #14]
 8012be4:	1e5a      	subs	r2, r3, #1
 8012be6:	b291      	uxth	r1, r2
 8012be8:	683a      	ldr	r2, [r7, #0]
 8012bea:	81d1      	strh	r1, [r2, #14]
 8012bec:	2b01      	cmp	r3, #1
 8012bee:	d102      	bne.n	8012bf6 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8012bf0:	6878      	ldr	r0, [r7, #4]
 8012bf2:	f000 f888 	bl	8012d06 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	607b      	str	r3, [r7, #4]
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d1b9      	bne.n	8012b76 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8012c02:	bf00      	nop
 8012c04:	bf00      	nop
 8012c06:	3708      	adds	r7, #8
 8012c08:	46bd      	mov	sp, r7
 8012c0a:	bd80      	pop	{r7, pc}
 8012c0c:	2000efcc 	.word	0x2000efcc

08012c10 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8012c10:	b580      	push	{r7, lr}
 8012c12:	b082      	sub	sp, #8
 8012c14:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8012c16:	4b16      	ldr	r3, [pc, #88]	; (8012c70 <dhcp_fine_tmr+0x60>)
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	607b      	str	r3, [r7, #4]
 8012c1c:	e020      	b.n	8012c60 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c22:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8012c24:	683b      	ldr	r3, [r7, #0]
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d017      	beq.n	8012c5a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8012c2a:	683b      	ldr	r3, [r7, #0]
 8012c2c:	891b      	ldrh	r3, [r3, #8]
 8012c2e:	2b01      	cmp	r3, #1
 8012c30:	d906      	bls.n	8012c40 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8012c32:	683b      	ldr	r3, [r7, #0]
 8012c34:	891b      	ldrh	r3, [r3, #8]
 8012c36:	3b01      	subs	r3, #1
 8012c38:	b29a      	uxth	r2, r3
 8012c3a:	683b      	ldr	r3, [r7, #0]
 8012c3c:	811a      	strh	r2, [r3, #8]
 8012c3e:	e00c      	b.n	8012c5a <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8012c40:	683b      	ldr	r3, [r7, #0]
 8012c42:	891b      	ldrh	r3, [r3, #8]
 8012c44:	2b01      	cmp	r3, #1
 8012c46:	d108      	bne.n	8012c5a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8012c48:	683b      	ldr	r3, [r7, #0]
 8012c4a:	891b      	ldrh	r3, [r3, #8]
 8012c4c:	3b01      	subs	r3, #1
 8012c4e:	b29a      	uxth	r2, r3
 8012c50:	683b      	ldr	r3, [r7, #0]
 8012c52:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8012c54:	6878      	ldr	r0, [r7, #4]
 8012c56:	f000 f80d 	bl	8012c74 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	607b      	str	r3, [r7, #4]
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d1db      	bne.n	8012c1e <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8012c66:	bf00      	nop
 8012c68:	bf00      	nop
 8012c6a:	3708      	adds	r7, #8
 8012c6c:	46bd      	mov	sp, r7
 8012c6e:	bd80      	pop	{r7, pc}
 8012c70:	2000efcc 	.word	0x2000efcc

08012c74 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8012c74:	b580      	push	{r7, lr}
 8012c76:	b084      	sub	sp, #16
 8012c78:	af00      	add	r7, sp, #0
 8012c7a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c80:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	795b      	ldrb	r3, [r3, #5]
 8012c86:	2b0c      	cmp	r3, #12
 8012c88:	d003      	beq.n	8012c92 <dhcp_timeout+0x1e>
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	795b      	ldrb	r3, [r3, #5]
 8012c8e:	2b06      	cmp	r3, #6
 8012c90:	d103      	bne.n	8012c9a <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8012c92:	6878      	ldr	r0, [r7, #4]
 8012c94:	f000 fa54 	bl	8013140 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8012c98:	e031      	b.n	8012cfe <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	795b      	ldrb	r3, [r3, #5]
 8012c9e:	2b01      	cmp	r3, #1
 8012ca0:	d10e      	bne.n	8012cc0 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	799b      	ldrb	r3, [r3, #6]
 8012ca6:	2b05      	cmp	r3, #5
 8012ca8:	d803      	bhi.n	8012cb2 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8012caa:	6878      	ldr	r0, [r7, #4]
 8012cac:	f7ff fe60 	bl	8012970 <dhcp_select>
}
 8012cb0:	e025      	b.n	8012cfe <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8012cb2:	6878      	ldr	r0, [r7, #4]
 8012cb4:	f000 fdae 	bl	8013814 <dhcp_release_and_stop>
      dhcp_start(netif);
 8012cb8:	6878      	ldr	r0, [r7, #4]
 8012cba:	f000 f8e5 	bl	8012e88 <dhcp_start>
}
 8012cbe:	e01e      	b.n	8012cfe <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	795b      	ldrb	r3, [r3, #5]
 8012cc4:	2b08      	cmp	r3, #8
 8012cc6:	d10b      	bne.n	8012ce0 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	799b      	ldrb	r3, [r3, #6]
 8012ccc:	2b01      	cmp	r3, #1
 8012cce:	d803      	bhi.n	8012cd8 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8012cd0:	6878      	ldr	r0, [r7, #4]
 8012cd2:	f7ff fdf3 	bl	80128bc <dhcp_check>
}
 8012cd6:	e012      	b.n	8012cfe <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8012cd8:	6878      	ldr	r0, [r7, #4]
 8012cda:	f000 fad3 	bl	8013284 <dhcp_bind>
}
 8012cde:	e00e      	b.n	8012cfe <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	795b      	ldrb	r3, [r3, #5]
 8012ce4:	2b03      	cmp	r3, #3
 8012ce6:	d10a      	bne.n	8012cfe <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	799b      	ldrb	r3, [r3, #6]
 8012cec:	2b01      	cmp	r3, #1
 8012cee:	d803      	bhi.n	8012cf8 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8012cf0:	6878      	ldr	r0, [r7, #4]
 8012cf2:	f000 fcd9 	bl	80136a8 <dhcp_reboot>
}
 8012cf6:	e002      	b.n	8012cfe <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8012cf8:	6878      	ldr	r0, [r7, #4]
 8012cfa:	f000 fa21 	bl	8013140 <dhcp_discover>
}
 8012cfe:	bf00      	nop
 8012d00:	3710      	adds	r7, #16
 8012d02:	46bd      	mov	sp, r7
 8012d04:	bd80      	pop	{r7, pc}

08012d06 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8012d06:	b580      	push	{r7, lr}
 8012d08:	b084      	sub	sp, #16
 8012d0a:	af00      	add	r7, sp, #0
 8012d0c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d12:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	795b      	ldrb	r3, [r3, #5]
 8012d18:	2b01      	cmp	r3, #1
 8012d1a:	d007      	beq.n	8012d2c <dhcp_t1_timeout+0x26>
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	795b      	ldrb	r3, [r3, #5]
 8012d20:	2b0a      	cmp	r3, #10
 8012d22:	d003      	beq.n	8012d2c <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012d28:	2b05      	cmp	r3, #5
 8012d2a:	d116      	bne.n	8012d5a <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8012d2c:	6878      	ldr	r0, [r7, #4]
 8012d2e:	f000 fb83 	bl	8013438 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	899b      	ldrh	r3, [r3, #12]
 8012d36:	461a      	mov	r2, r3
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	8a5b      	ldrh	r3, [r3, #18]
 8012d3c:	1ad3      	subs	r3, r2, r3
 8012d3e:	2b01      	cmp	r3, #1
 8012d40:	dd0b      	ble.n	8012d5a <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8012d42:	68fb      	ldr	r3, [r7, #12]
 8012d44:	899b      	ldrh	r3, [r3, #12]
 8012d46:	461a      	mov	r2, r3
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	8a5b      	ldrh	r3, [r3, #18]
 8012d4c:	1ad3      	subs	r3, r2, r3
 8012d4e:	0fda      	lsrs	r2, r3, #31
 8012d50:	4413      	add	r3, r2
 8012d52:	105b      	asrs	r3, r3, #1
 8012d54:	b29a      	uxth	r2, r3
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8012d5a:	bf00      	nop
 8012d5c:	3710      	adds	r7, #16
 8012d5e:	46bd      	mov	sp, r7
 8012d60:	bd80      	pop	{r7, pc}

08012d62 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8012d62:	b580      	push	{r7, lr}
 8012d64:	b084      	sub	sp, #16
 8012d66:	af00      	add	r7, sp, #0
 8012d68:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d6e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	795b      	ldrb	r3, [r3, #5]
 8012d74:	2b01      	cmp	r3, #1
 8012d76:	d00b      	beq.n	8012d90 <dhcp_t2_timeout+0x2e>
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	795b      	ldrb	r3, [r3, #5]
 8012d7c:	2b0a      	cmp	r3, #10
 8012d7e:	d007      	beq.n	8012d90 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012d84:	2b05      	cmp	r3, #5
 8012d86:	d003      	beq.n	8012d90 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	795b      	ldrb	r3, [r3, #5]
 8012d8c:	2b04      	cmp	r3, #4
 8012d8e:	d116      	bne.n	8012dbe <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8012d90:	6878      	ldr	r0, [r7, #4]
 8012d92:	f000 fbed 	bl	8013570 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	8a9b      	ldrh	r3, [r3, #20]
 8012d9a:	461a      	mov	r2, r3
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	8a5b      	ldrh	r3, [r3, #18]
 8012da0:	1ad3      	subs	r3, r2, r3
 8012da2:	2b01      	cmp	r3, #1
 8012da4:	dd0b      	ble.n	8012dbe <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	8a9b      	ldrh	r3, [r3, #20]
 8012daa:	461a      	mov	r2, r3
 8012dac:	68fb      	ldr	r3, [r7, #12]
 8012dae:	8a5b      	ldrh	r3, [r3, #18]
 8012db0:	1ad3      	subs	r3, r2, r3
 8012db2:	0fda      	lsrs	r2, r3, #31
 8012db4:	4413      	add	r3, r2
 8012db6:	105b      	asrs	r3, r3, #1
 8012db8:	b29a      	uxth	r2, r3
 8012dba:	68fb      	ldr	r3, [r7, #12]
 8012dbc:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8012dbe:	bf00      	nop
 8012dc0:	3710      	adds	r7, #16
 8012dc2:	46bd      	mov	sp, r7
 8012dc4:	bd80      	pop	{r7, pc}
	...

08012dc8 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8012dc8:	b580      	push	{r7, lr}
 8012dca:	b084      	sub	sp, #16
 8012dcc:	af00      	add	r7, sp, #0
 8012dce:	6078      	str	r0, [r7, #4]
 8012dd0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dd6:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	2200      	movs	r2, #0
 8012ddc:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	2200      	movs	r2, #0
 8012de2:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8012de4:	4b26      	ldr	r3, [pc, #152]	; (8012e80 <dhcp_handle_ack+0xb8>)
 8012de6:	78db      	ldrb	r3, [r3, #3]
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d003      	beq.n	8012df4 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8012dec:	4b25      	ldr	r3, [pc, #148]	; (8012e84 <dhcp_handle_ack+0xbc>)
 8012dee:	68da      	ldr	r2, [r3, #12]
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8012df4:	4b22      	ldr	r3, [pc, #136]	; (8012e80 <dhcp_handle_ack+0xb8>)
 8012df6:	791b      	ldrb	r3, [r3, #4]
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d004      	beq.n	8012e06 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8012dfc:	4b21      	ldr	r3, [pc, #132]	; (8012e84 <dhcp_handle_ack+0xbc>)
 8012dfe:	691a      	ldr	r2, [r3, #16]
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	62da      	str	r2, [r3, #44]	; 0x2c
 8012e04:	e004      	b.n	8012e10 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e0a:	085a      	lsrs	r2, r3, #1
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8012e10:	4b1b      	ldr	r3, [pc, #108]	; (8012e80 <dhcp_handle_ack+0xb8>)
 8012e12:	795b      	ldrb	r3, [r3, #5]
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d004      	beq.n	8012e22 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8012e18:	4b1a      	ldr	r3, [pc, #104]	; (8012e84 <dhcp_handle_ack+0xbc>)
 8012e1a:	695a      	ldr	r2, [r3, #20]
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	631a      	str	r2, [r3, #48]	; 0x30
 8012e20:	e007      	b.n	8012e32 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012e26:	4613      	mov	r3, r2
 8012e28:	00db      	lsls	r3, r3, #3
 8012e2a:	1a9b      	subs	r3, r3, r2
 8012e2c:	08da      	lsrs	r2, r3, #3
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8012e32:	683b      	ldr	r3, [r7, #0]
 8012e34:	691a      	ldr	r2, [r3, #16]
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8012e3a:	4b11      	ldr	r3, [pc, #68]	; (8012e80 <dhcp_handle_ack+0xb8>)
 8012e3c:	799b      	ldrb	r3, [r3, #6]
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d00b      	beq.n	8012e5a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8012e42:	4b10      	ldr	r3, [pc, #64]	; (8012e84 <dhcp_handle_ack+0xbc>)
 8012e44:	699b      	ldr	r3, [r3, #24]
 8012e46:	4618      	mov	r0, r3
 8012e48:	f7f6 ff91 	bl	8009d6e <lwip_htonl>
 8012e4c:	4602      	mov	r2, r0
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	2201      	movs	r2, #1
 8012e56:	71da      	strb	r2, [r3, #7]
 8012e58:	e002      	b.n	8012e60 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	2200      	movs	r2, #0
 8012e5e:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8012e60:	4b07      	ldr	r3, [pc, #28]	; (8012e80 <dhcp_handle_ack+0xb8>)
 8012e62:	79db      	ldrb	r3, [r3, #7]
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d007      	beq.n	8012e78 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8012e68:	4b06      	ldr	r3, [pc, #24]	; (8012e84 <dhcp_handle_ack+0xbc>)
 8012e6a:	69db      	ldr	r3, [r3, #28]
 8012e6c:	4618      	mov	r0, r3
 8012e6e:	f7f6 ff7e 	bl	8009d6e <lwip_htonl>
 8012e72:	4602      	mov	r2, r0
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8012e78:	bf00      	nop
 8012e7a:	3710      	adds	r7, #16
 8012e7c:	46bd      	mov	sp, r7
 8012e7e:	bd80      	pop	{r7, pc}
 8012e80:	2000eff8 	.word	0x2000eff8
 8012e84:	2000f000 	.word	0x2000f000

08012e88 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8012e88:	b580      	push	{r7, lr}
 8012e8a:	b084      	sub	sp, #16
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d109      	bne.n	8012eaa <dhcp_start+0x22>
 8012e96:	4b37      	ldr	r3, [pc, #220]	; (8012f74 <dhcp_start+0xec>)
 8012e98:	f240 22e7 	movw	r2, #743	; 0x2e7
 8012e9c:	4936      	ldr	r1, [pc, #216]	; (8012f78 <dhcp_start+0xf0>)
 8012e9e:	4837      	ldr	r0, [pc, #220]	; (8012f7c <dhcp_start+0xf4>)
 8012ea0:	f004 f982 	bl	80171a8 <iprintf>
 8012ea4:	f06f 030f 	mvn.w	r3, #15
 8012ea8:	e060      	b.n	8012f6c <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012eb0:	f003 0301 	and.w	r3, r3, #1
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d109      	bne.n	8012ecc <dhcp_start+0x44>
 8012eb8:	4b2e      	ldr	r3, [pc, #184]	; (8012f74 <dhcp_start+0xec>)
 8012eba:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8012ebe:	4930      	ldr	r1, [pc, #192]	; (8012f80 <dhcp_start+0xf8>)
 8012ec0:	482e      	ldr	r0, [pc, #184]	; (8012f7c <dhcp_start+0xf4>)
 8012ec2:	f004 f971 	bl	80171a8 <iprintf>
 8012ec6:	f06f 030f 	mvn.w	r3, #15
 8012eca:	e04f      	b.n	8012f6c <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ed0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012ed6:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8012eda:	d202      	bcs.n	8012ee2 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8012edc:	f04f 33ff 	mov.w	r3, #4294967295
 8012ee0:	e044      	b.n	8012f6c <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d10d      	bne.n	8012f04 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8012ee8:	2034      	movs	r0, #52	; 0x34
 8012eea:	f7f7 fa5f 	bl	800a3ac <mem_malloc>
 8012eee:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d102      	bne.n	8012efc <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8012ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8012efa:	e037      	b.n	8012f6c <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	68fa      	ldr	r2, [r7, #12]
 8012f00:	625a      	str	r2, [r3, #36]	; 0x24
 8012f02:	e005      	b.n	8012f10 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	791b      	ldrb	r3, [r3, #4]
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d001      	beq.n	8012f10 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8012f0c:	f7ff fc92 	bl	8012834 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8012f10:	2234      	movs	r2, #52	; 0x34
 8012f12:	2100      	movs	r1, #0
 8012f14:	68f8      	ldr	r0, [r7, #12]
 8012f16:	f004 f8e4 	bl	80170e2 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8012f1a:	f7ff fc39 	bl	8012790 <dhcp_inc_pcb_refcount>
 8012f1e:	4603      	mov	r3, r0
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d002      	beq.n	8012f2a <dhcp_start+0xa2>
    return ERR_MEM;
 8012f24:	f04f 33ff 	mov.w	r3, #4294967295
 8012f28:	e020      	b.n	8012f6c <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	2201      	movs	r2, #1
 8012f2e:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012f36:	f003 0304 	and.w	r3, r3, #4
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d105      	bne.n	8012f4a <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8012f3e:	2102      	movs	r1, #2
 8012f40:	68f8      	ldr	r0, [r7, #12]
 8012f42:	f000 fd01 	bl	8013948 <dhcp_set_state>
    return ERR_OK;
 8012f46:	2300      	movs	r3, #0
 8012f48:	e010      	b.n	8012f6c <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8012f4a:	6878      	ldr	r0, [r7, #4]
 8012f4c:	f000 f8f8 	bl	8013140 <dhcp_discover>
 8012f50:	4603      	mov	r3, r0
 8012f52:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8012f54:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d005      	beq.n	8012f68 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8012f5c:	6878      	ldr	r0, [r7, #4]
 8012f5e:	f000 fc59 	bl	8013814 <dhcp_release_and_stop>
    return ERR_MEM;
 8012f62:	f04f 33ff 	mov.w	r3, #4294967295
 8012f66:	e001      	b.n	8012f6c <dhcp_start+0xe4>
  }
  return result;
 8012f68:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	3710      	adds	r7, #16
 8012f70:	46bd      	mov	sp, r7
 8012f72:	bd80      	pop	{r7, pc}
 8012f74:	0801b484 	.word	0x0801b484
 8012f78:	0801b568 	.word	0x0801b568
 8012f7c:	0801b4e4 	.word	0x0801b4e4
 8012f80:	0801b5ac 	.word	0x0801b5ac

08012f84 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8012f84:	b580      	push	{r7, lr}
 8012f86:	b084      	sub	sp, #16
 8012f88:	af00      	add	r7, sp, #0
 8012f8a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f90:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d025      	beq.n	8012fe4 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	795b      	ldrb	r3, [r3, #5]
 8012f9c:	2b0a      	cmp	r3, #10
 8012f9e:	d008      	beq.n	8012fb2 <dhcp_network_changed+0x2e>
 8012fa0:	2b0a      	cmp	r3, #10
 8012fa2:	dc0d      	bgt.n	8012fc0 <dhcp_network_changed+0x3c>
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d01f      	beq.n	8012fe8 <dhcp_network_changed+0x64>
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	db09      	blt.n	8012fc0 <dhcp_network_changed+0x3c>
 8012fac:	3b03      	subs	r3, #3
 8012fae:	2b02      	cmp	r3, #2
 8012fb0:	d806      	bhi.n	8012fc0 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8012fb2:	68fb      	ldr	r3, [r7, #12]
 8012fb4:	2200      	movs	r2, #0
 8012fb6:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8012fb8:	6878      	ldr	r0, [r7, #4]
 8012fba:	f000 fb75 	bl	80136a8 <dhcp_reboot>
      break;
 8012fbe:	e014      	b.n	8012fea <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	795b      	ldrb	r3, [r3, #5]
 8012fc4:	2b0c      	cmp	r3, #12
 8012fc6:	d906      	bls.n	8012fd6 <dhcp_network_changed+0x52>
 8012fc8:	4b09      	ldr	r3, [pc, #36]	; (8012ff0 <dhcp_network_changed+0x6c>)
 8012fca:	f240 326d 	movw	r2, #877	; 0x36d
 8012fce:	4909      	ldr	r1, [pc, #36]	; (8012ff4 <dhcp_network_changed+0x70>)
 8012fd0:	4809      	ldr	r0, [pc, #36]	; (8012ff8 <dhcp_network_changed+0x74>)
 8012fd2:	f004 f8e9 	bl	80171a8 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	2200      	movs	r2, #0
 8012fda:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8012fdc:	6878      	ldr	r0, [r7, #4]
 8012fde:	f000 f8af 	bl	8013140 <dhcp_discover>
      break;
 8012fe2:	e002      	b.n	8012fea <dhcp_network_changed+0x66>
    return;
 8012fe4:	bf00      	nop
 8012fe6:	e000      	b.n	8012fea <dhcp_network_changed+0x66>
      break;
 8012fe8:	bf00      	nop
  }
}
 8012fea:	3710      	adds	r7, #16
 8012fec:	46bd      	mov	sp, r7
 8012fee:	bd80      	pop	{r7, pc}
 8012ff0:	0801b484 	.word	0x0801b484
 8012ff4:	0801b5d0 	.word	0x0801b5d0
 8012ff8:	0801b4e4 	.word	0x0801b4e4

08012ffc <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8012ffc:	b580      	push	{r7, lr}
 8012ffe:	b084      	sub	sp, #16
 8013000:	af00      	add	r7, sp, #0
 8013002:	6078      	str	r0, [r7, #4]
 8013004:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	2b00      	cmp	r3, #0
 801300a:	d107      	bne.n	801301c <dhcp_arp_reply+0x20>
 801300c:	4b0e      	ldr	r3, [pc, #56]	; (8013048 <dhcp_arp_reply+0x4c>)
 801300e:	f240 328b 	movw	r2, #907	; 0x38b
 8013012:	490e      	ldr	r1, [pc, #56]	; (801304c <dhcp_arp_reply+0x50>)
 8013014:	480e      	ldr	r0, [pc, #56]	; (8013050 <dhcp_arp_reply+0x54>)
 8013016:	f004 f8c7 	bl	80171a8 <iprintf>
 801301a:	e012      	b.n	8013042 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013020:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8013022:	68fb      	ldr	r3, [r7, #12]
 8013024:	2b00      	cmp	r3, #0
 8013026:	d00c      	beq.n	8013042 <dhcp_arp_reply+0x46>
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	795b      	ldrb	r3, [r3, #5]
 801302c:	2b08      	cmp	r3, #8
 801302e:	d108      	bne.n	8013042 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8013030:	683b      	ldr	r3, [r7, #0]
 8013032:	681a      	ldr	r2, [r3, #0]
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	69db      	ldr	r3, [r3, #28]
 8013038:	429a      	cmp	r2, r3
 801303a:	d102      	bne.n	8013042 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801303c:	6878      	ldr	r0, [r7, #4]
 801303e:	f000 f809 	bl	8013054 <dhcp_decline>
    }
  }
}
 8013042:	3710      	adds	r7, #16
 8013044:	46bd      	mov	sp, r7
 8013046:	bd80      	pop	{r7, pc}
 8013048:	0801b484 	.word	0x0801b484
 801304c:	0801b568 	.word	0x0801b568
 8013050:	0801b4e4 	.word	0x0801b4e4

08013054 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8013054:	b5b0      	push	{r4, r5, r7, lr}
 8013056:	b08a      	sub	sp, #40	; 0x28
 8013058:	af02      	add	r7, sp, #8
 801305a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013060:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8013062:	210c      	movs	r1, #12
 8013064:	69b8      	ldr	r0, [r7, #24]
 8013066:	f000 fc6f 	bl	8013948 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801306a:	f107 030c 	add.w	r3, r7, #12
 801306e:	2204      	movs	r2, #4
 8013070:	69b9      	ldr	r1, [r7, #24]
 8013072:	6878      	ldr	r0, [r7, #4]
 8013074:	f001 f8f4 	bl	8014260 <dhcp_create_msg>
 8013078:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801307a:	697b      	ldr	r3, [r7, #20]
 801307c:	2b00      	cmp	r3, #0
 801307e:	d035      	beq.n	80130ec <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013080:	697b      	ldr	r3, [r7, #20]
 8013082:	685b      	ldr	r3, [r3, #4]
 8013084:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8013086:	89b8      	ldrh	r0, [r7, #12]
 8013088:	693b      	ldr	r3, [r7, #16]
 801308a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801308e:	2304      	movs	r3, #4
 8013090:	2232      	movs	r2, #50	; 0x32
 8013092:	f000 fc73 	bl	801397c <dhcp_option>
 8013096:	4603      	mov	r3, r0
 8013098:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801309a:	89bc      	ldrh	r4, [r7, #12]
 801309c:	693b      	ldr	r3, [r7, #16]
 801309e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80130a2:	69bb      	ldr	r3, [r7, #24]
 80130a4:	69db      	ldr	r3, [r3, #28]
 80130a6:	4618      	mov	r0, r3
 80130a8:	f7f6 fe61 	bl	8009d6e <lwip_htonl>
 80130ac:	4603      	mov	r3, r0
 80130ae:	461a      	mov	r2, r3
 80130b0:	4629      	mov	r1, r5
 80130b2:	4620      	mov	r0, r4
 80130b4:	f000 fcee 	bl	8013a94 <dhcp_option_long>
 80130b8:	4603      	mov	r3, r0
 80130ba:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80130bc:	89b8      	ldrh	r0, [r7, #12]
 80130be:	693b      	ldr	r3, [r7, #16]
 80130c0:	33f0      	adds	r3, #240	; 0xf0
 80130c2:	697a      	ldr	r2, [r7, #20]
 80130c4:	4619      	mov	r1, r3
 80130c6:	f001 f9a1 	bl	801440c <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80130ca:	4b19      	ldr	r3, [pc, #100]	; (8013130 <dhcp_decline+0xdc>)
 80130cc:	6818      	ldr	r0, [r3, #0]
 80130ce:	4b19      	ldr	r3, [pc, #100]	; (8013134 <dhcp_decline+0xe0>)
 80130d0:	9301      	str	r3, [sp, #4]
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	9300      	str	r3, [sp, #0]
 80130d6:	2343      	movs	r3, #67	; 0x43
 80130d8:	4a17      	ldr	r2, [pc, #92]	; (8013138 <dhcp_decline+0xe4>)
 80130da:	6979      	ldr	r1, [r7, #20]
 80130dc:	f7ff f8c6 	bl	801226c <udp_sendto_if_src>
 80130e0:	4603      	mov	r3, r0
 80130e2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80130e4:	6978      	ldr	r0, [r7, #20]
 80130e6:	f7f8 f9e5 	bl	800b4b4 <pbuf_free>
 80130ea:	e001      	b.n	80130f0 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80130ec:	23ff      	movs	r3, #255	; 0xff
 80130ee:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80130f0:	69bb      	ldr	r3, [r7, #24]
 80130f2:	799b      	ldrb	r3, [r3, #6]
 80130f4:	2bff      	cmp	r3, #255	; 0xff
 80130f6:	d005      	beq.n	8013104 <dhcp_decline+0xb0>
    dhcp->tries++;
 80130f8:	69bb      	ldr	r3, [r7, #24]
 80130fa:	799b      	ldrb	r3, [r3, #6]
 80130fc:	3301      	adds	r3, #1
 80130fe:	b2da      	uxtb	r2, r3
 8013100:	69bb      	ldr	r3, [r7, #24]
 8013102:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8013104:	f242 7310 	movw	r3, #10000	; 0x2710
 8013108:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801310a:	89fb      	ldrh	r3, [r7, #14]
 801310c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013110:	4a0a      	ldr	r2, [pc, #40]	; (801313c <dhcp_decline+0xe8>)
 8013112:	fb82 1203 	smull	r1, r2, r2, r3
 8013116:	1152      	asrs	r2, r2, #5
 8013118:	17db      	asrs	r3, r3, #31
 801311a:	1ad3      	subs	r3, r2, r3
 801311c:	b29a      	uxth	r2, r3
 801311e:	69bb      	ldr	r3, [r7, #24]
 8013120:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013122:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013126:	4618      	mov	r0, r3
 8013128:	3720      	adds	r7, #32
 801312a:	46bd      	mov	sp, r7
 801312c:	bdb0      	pop	{r4, r5, r7, pc}
 801312e:	bf00      	nop
 8013130:	2000858c 	.word	0x2000858c
 8013134:	0801c024 	.word	0x0801c024
 8013138:	0801c028 	.word	0x0801c028
 801313c:	10624dd3 	.word	0x10624dd3

08013140 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8013140:	b580      	push	{r7, lr}
 8013142:	b08a      	sub	sp, #40	; 0x28
 8013144:	af02      	add	r7, sp, #8
 8013146:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801314c:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801314e:	2300      	movs	r3, #0
 8013150:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8013152:	69bb      	ldr	r3, [r7, #24]
 8013154:	2200      	movs	r2, #0
 8013156:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8013158:	2106      	movs	r1, #6
 801315a:	69b8      	ldr	r0, [r7, #24]
 801315c:	f000 fbf4 	bl	8013948 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8013160:	f107 0308 	add.w	r3, r7, #8
 8013164:	2201      	movs	r2, #1
 8013166:	69b9      	ldr	r1, [r7, #24]
 8013168:	6878      	ldr	r0, [r7, #4]
 801316a:	f001 f879 	bl	8014260 <dhcp_create_msg>
 801316e:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8013170:	693b      	ldr	r3, [r7, #16]
 8013172:	2b00      	cmp	r3, #0
 8013174:	d04b      	beq.n	801320e <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013176:	693b      	ldr	r3, [r7, #16]
 8013178:	685b      	ldr	r3, [r3, #4]
 801317a:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801317c:	8938      	ldrh	r0, [r7, #8]
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013184:	2302      	movs	r3, #2
 8013186:	2239      	movs	r2, #57	; 0x39
 8013188:	f000 fbf8 	bl	801397c <dhcp_option>
 801318c:	4603      	mov	r3, r0
 801318e:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8013190:	8938      	ldrh	r0, [r7, #8]
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801319c:	461a      	mov	r2, r3
 801319e:	f000 fc47 	bl	8013a30 <dhcp_option_short>
 80131a2:	4603      	mov	r3, r0
 80131a4:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80131a6:	8938      	ldrh	r0, [r7, #8]
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80131ae:	2303      	movs	r3, #3
 80131b0:	2237      	movs	r2, #55	; 0x37
 80131b2:	f000 fbe3 	bl	801397c <dhcp_option>
 80131b6:	4603      	mov	r3, r0
 80131b8:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80131ba:	2300      	movs	r3, #0
 80131bc:	77fb      	strb	r3, [r7, #31]
 80131be:	e00e      	b.n	80131de <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80131c0:	8938      	ldrh	r0, [r7, #8]
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80131c8:	7ffb      	ldrb	r3, [r7, #31]
 80131ca:	4a29      	ldr	r2, [pc, #164]	; (8013270 <dhcp_discover+0x130>)
 80131cc:	5cd3      	ldrb	r3, [r2, r3]
 80131ce:	461a      	mov	r2, r3
 80131d0:	f000 fc08 	bl	80139e4 <dhcp_option_byte>
 80131d4:	4603      	mov	r3, r0
 80131d6:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80131d8:	7ffb      	ldrb	r3, [r7, #31]
 80131da:	3301      	adds	r3, #1
 80131dc:	77fb      	strb	r3, [r7, #31]
 80131de:	7ffb      	ldrb	r3, [r7, #31]
 80131e0:	2b02      	cmp	r3, #2
 80131e2:	d9ed      	bls.n	80131c0 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80131e4:	8938      	ldrh	r0, [r7, #8]
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	33f0      	adds	r3, #240	; 0xf0
 80131ea:	693a      	ldr	r2, [r7, #16]
 80131ec:	4619      	mov	r1, r3
 80131ee:	f001 f90d 	bl	801440c <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80131f2:	4b20      	ldr	r3, [pc, #128]	; (8013274 <dhcp_discover+0x134>)
 80131f4:	6818      	ldr	r0, [r3, #0]
 80131f6:	4b20      	ldr	r3, [pc, #128]	; (8013278 <dhcp_discover+0x138>)
 80131f8:	9301      	str	r3, [sp, #4]
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	9300      	str	r3, [sp, #0]
 80131fe:	2343      	movs	r3, #67	; 0x43
 8013200:	4a1e      	ldr	r2, [pc, #120]	; (801327c <dhcp_discover+0x13c>)
 8013202:	6939      	ldr	r1, [r7, #16]
 8013204:	f7ff f832 	bl	801226c <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8013208:	6938      	ldr	r0, [r7, #16]
 801320a:	f7f8 f953 	bl	800b4b4 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801320e:	69bb      	ldr	r3, [r7, #24]
 8013210:	799b      	ldrb	r3, [r3, #6]
 8013212:	2bff      	cmp	r3, #255	; 0xff
 8013214:	d005      	beq.n	8013222 <dhcp_discover+0xe2>
    dhcp->tries++;
 8013216:	69bb      	ldr	r3, [r7, #24]
 8013218:	799b      	ldrb	r3, [r3, #6]
 801321a:	3301      	adds	r3, #1
 801321c:	b2da      	uxtb	r2, r3
 801321e:	69bb      	ldr	r3, [r7, #24]
 8013220:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8013222:	69bb      	ldr	r3, [r7, #24]
 8013224:	799b      	ldrb	r3, [r3, #6]
 8013226:	2b05      	cmp	r3, #5
 8013228:	d80d      	bhi.n	8013246 <dhcp_discover+0x106>
 801322a:	69bb      	ldr	r3, [r7, #24]
 801322c:	799b      	ldrb	r3, [r3, #6]
 801322e:	461a      	mov	r2, r3
 8013230:	2301      	movs	r3, #1
 8013232:	4093      	lsls	r3, r2
 8013234:	b29b      	uxth	r3, r3
 8013236:	461a      	mov	r2, r3
 8013238:	0152      	lsls	r2, r2, #5
 801323a:	1ad2      	subs	r2, r2, r3
 801323c:	0092      	lsls	r2, r2, #2
 801323e:	4413      	add	r3, r2
 8013240:	00db      	lsls	r3, r3, #3
 8013242:	b29b      	uxth	r3, r3
 8013244:	e001      	b.n	801324a <dhcp_discover+0x10a>
 8013246:	f64e 2360 	movw	r3, #60000	; 0xea60
 801324a:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801324c:	897b      	ldrh	r3, [r7, #10]
 801324e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013252:	4a0b      	ldr	r2, [pc, #44]	; (8013280 <dhcp_discover+0x140>)
 8013254:	fb82 1203 	smull	r1, r2, r2, r3
 8013258:	1152      	asrs	r2, r2, #5
 801325a:	17db      	asrs	r3, r3, #31
 801325c:	1ad3      	subs	r3, r2, r3
 801325e:	b29a      	uxth	r2, r3
 8013260:	69bb      	ldr	r3, [r7, #24]
 8013262:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013264:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013268:	4618      	mov	r0, r3
 801326a:	3720      	adds	r7, #32
 801326c:	46bd      	mov	sp, r7
 801326e:	bd80      	pop	{r7, pc}
 8013270:	2000001c 	.word	0x2000001c
 8013274:	2000858c 	.word	0x2000858c
 8013278:	0801c024 	.word	0x0801c024
 801327c:	0801c028 	.word	0x0801c028
 8013280:	10624dd3 	.word	0x10624dd3

08013284 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8013284:	b580      	push	{r7, lr}
 8013286:	b088      	sub	sp, #32
 8013288:	af00      	add	r7, sp, #0
 801328a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	2b00      	cmp	r3, #0
 8013290:	d107      	bne.n	80132a2 <dhcp_bind+0x1e>
 8013292:	4b64      	ldr	r3, [pc, #400]	; (8013424 <dhcp_bind+0x1a0>)
 8013294:	f240 4215 	movw	r2, #1045	; 0x415
 8013298:	4963      	ldr	r1, [pc, #396]	; (8013428 <dhcp_bind+0x1a4>)
 801329a:	4864      	ldr	r0, [pc, #400]	; (801342c <dhcp_bind+0x1a8>)
 801329c:	f003 ff84 	bl	80171a8 <iprintf>
 80132a0:	e0bc      	b.n	801341c <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132a6:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80132a8:	69bb      	ldr	r3, [r7, #24]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d107      	bne.n	80132be <dhcp_bind+0x3a>
 80132ae:	4b5d      	ldr	r3, [pc, #372]	; (8013424 <dhcp_bind+0x1a0>)
 80132b0:	f240 4217 	movw	r2, #1047	; 0x417
 80132b4:	495e      	ldr	r1, [pc, #376]	; (8013430 <dhcp_bind+0x1ac>)
 80132b6:	485d      	ldr	r0, [pc, #372]	; (801342c <dhcp_bind+0x1a8>)
 80132b8:	f003 ff76 	bl	80171a8 <iprintf>
 80132bc:	e0ae      	b.n	801341c <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80132be:	69bb      	ldr	r3, [r7, #24]
 80132c0:	2200      	movs	r2, #0
 80132c2:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80132c4:	69bb      	ldr	r3, [r7, #24]
 80132c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80132c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132cc:	d019      	beq.n	8013302 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80132ce:	69bb      	ldr	r3, [r7, #24]
 80132d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80132d2:	331e      	adds	r3, #30
 80132d4:	4a57      	ldr	r2, [pc, #348]	; (8013434 <dhcp_bind+0x1b0>)
 80132d6:	fba2 2303 	umull	r2, r3, r2, r3
 80132da:	095b      	lsrs	r3, r3, #5
 80132dc:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80132de:	69fb      	ldr	r3, [r7, #28]
 80132e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80132e4:	d302      	bcc.n	80132ec <dhcp_bind+0x68>
      timeout = 0xffff;
 80132e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80132ea:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80132ec:	69fb      	ldr	r3, [r7, #28]
 80132ee:	b29a      	uxth	r2, r3
 80132f0:	69bb      	ldr	r3, [r7, #24]
 80132f2:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80132f4:	69bb      	ldr	r3, [r7, #24]
 80132f6:	8a9b      	ldrh	r3, [r3, #20]
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d102      	bne.n	8013302 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80132fc:	69bb      	ldr	r3, [r7, #24]
 80132fe:	2201      	movs	r2, #1
 8013300:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8013302:	69bb      	ldr	r3, [r7, #24]
 8013304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013306:	f1b3 3fff 	cmp.w	r3, #4294967295
 801330a:	d01d      	beq.n	8013348 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801330c:	69bb      	ldr	r3, [r7, #24]
 801330e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013310:	331e      	adds	r3, #30
 8013312:	4a48      	ldr	r2, [pc, #288]	; (8013434 <dhcp_bind+0x1b0>)
 8013314:	fba2 2303 	umull	r2, r3, r2, r3
 8013318:	095b      	lsrs	r3, r3, #5
 801331a:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801331c:	69fb      	ldr	r3, [r7, #28]
 801331e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013322:	d302      	bcc.n	801332a <dhcp_bind+0xa6>
      timeout = 0xffff;
 8013324:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013328:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801332a:	69fb      	ldr	r3, [r7, #28]
 801332c:	b29a      	uxth	r2, r3
 801332e:	69bb      	ldr	r3, [r7, #24]
 8013330:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8013332:	69bb      	ldr	r3, [r7, #24]
 8013334:	895b      	ldrh	r3, [r3, #10]
 8013336:	2b00      	cmp	r3, #0
 8013338:	d102      	bne.n	8013340 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801333a:	69bb      	ldr	r3, [r7, #24]
 801333c:	2201      	movs	r2, #1
 801333e:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8013340:	69bb      	ldr	r3, [r7, #24]
 8013342:	895a      	ldrh	r2, [r3, #10]
 8013344:	69bb      	ldr	r3, [r7, #24]
 8013346:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8013348:	69bb      	ldr	r3, [r7, #24]
 801334a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801334c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013350:	d01d      	beq.n	801338e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8013352:	69bb      	ldr	r3, [r7, #24]
 8013354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013356:	331e      	adds	r3, #30
 8013358:	4a36      	ldr	r2, [pc, #216]	; (8013434 <dhcp_bind+0x1b0>)
 801335a:	fba2 2303 	umull	r2, r3, r2, r3
 801335e:	095b      	lsrs	r3, r3, #5
 8013360:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8013362:	69fb      	ldr	r3, [r7, #28]
 8013364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013368:	d302      	bcc.n	8013370 <dhcp_bind+0xec>
      timeout = 0xffff;
 801336a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801336e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8013370:	69fb      	ldr	r3, [r7, #28]
 8013372:	b29a      	uxth	r2, r3
 8013374:	69bb      	ldr	r3, [r7, #24]
 8013376:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8013378:	69bb      	ldr	r3, [r7, #24]
 801337a:	899b      	ldrh	r3, [r3, #12]
 801337c:	2b00      	cmp	r3, #0
 801337e:	d102      	bne.n	8013386 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8013380:	69bb      	ldr	r3, [r7, #24]
 8013382:	2201      	movs	r2, #1
 8013384:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8013386:	69bb      	ldr	r3, [r7, #24]
 8013388:	899a      	ldrh	r2, [r3, #12]
 801338a:	69bb      	ldr	r3, [r7, #24]
 801338c:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801338e:	69bb      	ldr	r3, [r7, #24]
 8013390:	895a      	ldrh	r2, [r3, #10]
 8013392:	69bb      	ldr	r3, [r7, #24]
 8013394:	899b      	ldrh	r3, [r3, #12]
 8013396:	429a      	cmp	r2, r3
 8013398:	d306      	bcc.n	80133a8 <dhcp_bind+0x124>
 801339a:	69bb      	ldr	r3, [r7, #24]
 801339c:	899b      	ldrh	r3, [r3, #12]
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d002      	beq.n	80133a8 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80133a2:	69bb      	ldr	r3, [r7, #24]
 80133a4:	2200      	movs	r2, #0
 80133a6:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 80133a8:	69bb      	ldr	r3, [r7, #24]
 80133aa:	79db      	ldrb	r3, [r3, #7]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d003      	beq.n	80133b8 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80133b0:	69bb      	ldr	r3, [r7, #24]
 80133b2:	6a1b      	ldr	r3, [r3, #32]
 80133b4:	613b      	str	r3, [r7, #16]
 80133b6:	e014      	b.n	80133e2 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80133b8:	69bb      	ldr	r3, [r7, #24]
 80133ba:	331c      	adds	r3, #28
 80133bc:	781b      	ldrb	r3, [r3, #0]
 80133be:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80133c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	db02      	blt.n	80133ce <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80133c8:	23ff      	movs	r3, #255	; 0xff
 80133ca:	613b      	str	r3, [r7, #16]
 80133cc:	e009      	b.n	80133e2 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 80133ce:	7dfb      	ldrb	r3, [r7, #23]
 80133d0:	2bbf      	cmp	r3, #191	; 0xbf
 80133d2:	d903      	bls.n	80133dc <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80133d4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80133d8:	613b      	str	r3, [r7, #16]
 80133da:	e002      	b.n	80133e2 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80133dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80133e0:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80133e2:	69bb      	ldr	r3, [r7, #24]
 80133e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133e6:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d108      	bne.n	8013400 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80133ee:	69bb      	ldr	r3, [r7, #24]
 80133f0:	69da      	ldr	r2, [r3, #28]
 80133f2:	693b      	ldr	r3, [r7, #16]
 80133f4:	4013      	ands	r3, r2
 80133f6:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80133fe:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8013400:	210a      	movs	r1, #10
 8013402:	69b8      	ldr	r0, [r7, #24]
 8013404:	f000 faa0 	bl	8013948 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8013408:	69bb      	ldr	r3, [r7, #24]
 801340a:	f103 011c 	add.w	r1, r3, #28
 801340e:	f107 030c 	add.w	r3, r7, #12
 8013412:	f107 0210 	add.w	r2, r7, #16
 8013416:	6878      	ldr	r0, [r7, #4]
 8013418:	f7f7 fb3e 	bl	800aa98 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801341c:	3720      	adds	r7, #32
 801341e:	46bd      	mov	sp, r7
 8013420:	bd80      	pop	{r7, pc}
 8013422:	bf00      	nop
 8013424:	0801b484 	.word	0x0801b484
 8013428:	0801b5e4 	.word	0x0801b5e4
 801342c:	0801b4e4 	.word	0x0801b4e4
 8013430:	0801b600 	.word	0x0801b600
 8013434:	88888889 	.word	0x88888889

08013438 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8013438:	b580      	push	{r7, lr}
 801343a:	b08a      	sub	sp, #40	; 0x28
 801343c:	af02      	add	r7, sp, #8
 801343e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013444:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8013446:	2105      	movs	r1, #5
 8013448:	69b8      	ldr	r0, [r7, #24]
 801344a:	f000 fa7d 	bl	8013948 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801344e:	f107 030c 	add.w	r3, r7, #12
 8013452:	2203      	movs	r2, #3
 8013454:	69b9      	ldr	r1, [r7, #24]
 8013456:	6878      	ldr	r0, [r7, #4]
 8013458:	f000 ff02 	bl	8014260 <dhcp_create_msg>
 801345c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801345e:	697b      	ldr	r3, [r7, #20]
 8013460:	2b00      	cmp	r3, #0
 8013462:	d04e      	beq.n	8013502 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013464:	697b      	ldr	r3, [r7, #20]
 8013466:	685b      	ldr	r3, [r3, #4]
 8013468:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801346a:	89b8      	ldrh	r0, [r7, #12]
 801346c:	693b      	ldr	r3, [r7, #16]
 801346e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013472:	2302      	movs	r3, #2
 8013474:	2239      	movs	r2, #57	; 0x39
 8013476:	f000 fa81 	bl	801397c <dhcp_option>
 801347a:	4603      	mov	r3, r0
 801347c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801347e:	89b8      	ldrh	r0, [r7, #12]
 8013480:	693b      	ldr	r3, [r7, #16]
 8013482:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801348a:	461a      	mov	r2, r3
 801348c:	f000 fad0 	bl	8013a30 <dhcp_option_short>
 8013490:	4603      	mov	r3, r0
 8013492:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013494:	89b8      	ldrh	r0, [r7, #12]
 8013496:	693b      	ldr	r3, [r7, #16]
 8013498:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801349c:	2303      	movs	r3, #3
 801349e:	2237      	movs	r2, #55	; 0x37
 80134a0:	f000 fa6c 	bl	801397c <dhcp_option>
 80134a4:	4603      	mov	r3, r0
 80134a6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80134a8:	2300      	movs	r3, #0
 80134aa:	77bb      	strb	r3, [r7, #30]
 80134ac:	e00e      	b.n	80134cc <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80134ae:	89b8      	ldrh	r0, [r7, #12]
 80134b0:	693b      	ldr	r3, [r7, #16]
 80134b2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80134b6:	7fbb      	ldrb	r3, [r7, #30]
 80134b8:	4a2a      	ldr	r2, [pc, #168]	; (8013564 <dhcp_renew+0x12c>)
 80134ba:	5cd3      	ldrb	r3, [r2, r3]
 80134bc:	461a      	mov	r2, r3
 80134be:	f000 fa91 	bl	80139e4 <dhcp_option_byte>
 80134c2:	4603      	mov	r3, r0
 80134c4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80134c6:	7fbb      	ldrb	r3, [r7, #30]
 80134c8:	3301      	adds	r3, #1
 80134ca:	77bb      	strb	r3, [r7, #30]
 80134cc:	7fbb      	ldrb	r3, [r7, #30]
 80134ce:	2b02      	cmp	r3, #2
 80134d0:	d9ed      	bls.n	80134ae <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80134d2:	89b8      	ldrh	r0, [r7, #12]
 80134d4:	693b      	ldr	r3, [r7, #16]
 80134d6:	33f0      	adds	r3, #240	; 0xf0
 80134d8:	697a      	ldr	r2, [r7, #20]
 80134da:	4619      	mov	r1, r3
 80134dc:	f000 ff96 	bl	801440c <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80134e0:	4b21      	ldr	r3, [pc, #132]	; (8013568 <dhcp_renew+0x130>)
 80134e2:	6818      	ldr	r0, [r3, #0]
 80134e4:	69bb      	ldr	r3, [r7, #24]
 80134e6:	f103 0218 	add.w	r2, r3, #24
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	9300      	str	r3, [sp, #0]
 80134ee:	2343      	movs	r3, #67	; 0x43
 80134f0:	6979      	ldr	r1, [r7, #20]
 80134f2:	f7fe fe47 	bl	8012184 <udp_sendto_if>
 80134f6:	4603      	mov	r3, r0
 80134f8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80134fa:	6978      	ldr	r0, [r7, #20]
 80134fc:	f7f7 ffda 	bl	800b4b4 <pbuf_free>
 8013500:	e001      	b.n	8013506 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013502:	23ff      	movs	r3, #255	; 0xff
 8013504:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013506:	69bb      	ldr	r3, [r7, #24]
 8013508:	799b      	ldrb	r3, [r3, #6]
 801350a:	2bff      	cmp	r3, #255	; 0xff
 801350c:	d005      	beq.n	801351a <dhcp_renew+0xe2>
    dhcp->tries++;
 801350e:	69bb      	ldr	r3, [r7, #24]
 8013510:	799b      	ldrb	r3, [r3, #6]
 8013512:	3301      	adds	r3, #1
 8013514:	b2da      	uxtb	r2, r3
 8013516:	69bb      	ldr	r3, [r7, #24]
 8013518:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801351a:	69bb      	ldr	r3, [r7, #24]
 801351c:	799b      	ldrb	r3, [r3, #6]
 801351e:	2b09      	cmp	r3, #9
 8013520:	d80a      	bhi.n	8013538 <dhcp_renew+0x100>
 8013522:	69bb      	ldr	r3, [r7, #24]
 8013524:	799b      	ldrb	r3, [r3, #6]
 8013526:	b29b      	uxth	r3, r3
 8013528:	461a      	mov	r2, r3
 801352a:	0152      	lsls	r2, r2, #5
 801352c:	1ad2      	subs	r2, r2, r3
 801352e:	0092      	lsls	r2, r2, #2
 8013530:	4413      	add	r3, r2
 8013532:	011b      	lsls	r3, r3, #4
 8013534:	b29b      	uxth	r3, r3
 8013536:	e001      	b.n	801353c <dhcp_renew+0x104>
 8013538:	f644 6320 	movw	r3, #20000	; 0x4e20
 801353c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801353e:	89fb      	ldrh	r3, [r7, #14]
 8013540:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013544:	4a09      	ldr	r2, [pc, #36]	; (801356c <dhcp_renew+0x134>)
 8013546:	fb82 1203 	smull	r1, r2, r2, r3
 801354a:	1152      	asrs	r2, r2, #5
 801354c:	17db      	asrs	r3, r3, #31
 801354e:	1ad3      	subs	r3, r2, r3
 8013550:	b29a      	uxth	r2, r3
 8013552:	69bb      	ldr	r3, [r7, #24]
 8013554:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013556:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801355a:	4618      	mov	r0, r3
 801355c:	3720      	adds	r7, #32
 801355e:	46bd      	mov	sp, r7
 8013560:	bd80      	pop	{r7, pc}
 8013562:	bf00      	nop
 8013564:	2000001c 	.word	0x2000001c
 8013568:	2000858c 	.word	0x2000858c
 801356c:	10624dd3 	.word	0x10624dd3

08013570 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8013570:	b580      	push	{r7, lr}
 8013572:	b08a      	sub	sp, #40	; 0x28
 8013574:	af02      	add	r7, sp, #8
 8013576:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801357c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801357e:	2104      	movs	r1, #4
 8013580:	69b8      	ldr	r0, [r7, #24]
 8013582:	f000 f9e1 	bl	8013948 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8013586:	f107 030c 	add.w	r3, r7, #12
 801358a:	2203      	movs	r2, #3
 801358c:	69b9      	ldr	r1, [r7, #24]
 801358e:	6878      	ldr	r0, [r7, #4]
 8013590:	f000 fe66 	bl	8014260 <dhcp_create_msg>
 8013594:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013596:	697b      	ldr	r3, [r7, #20]
 8013598:	2b00      	cmp	r3, #0
 801359a:	d04c      	beq.n	8013636 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801359c:	697b      	ldr	r3, [r7, #20]
 801359e:	685b      	ldr	r3, [r3, #4]
 80135a0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80135a2:	89b8      	ldrh	r0, [r7, #12]
 80135a4:	693b      	ldr	r3, [r7, #16]
 80135a6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80135aa:	2302      	movs	r3, #2
 80135ac:	2239      	movs	r2, #57	; 0x39
 80135ae:	f000 f9e5 	bl	801397c <dhcp_option>
 80135b2:	4603      	mov	r3, r0
 80135b4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80135b6:	89b8      	ldrh	r0, [r7, #12]
 80135b8:	693b      	ldr	r3, [r7, #16]
 80135ba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80135c2:	461a      	mov	r2, r3
 80135c4:	f000 fa34 	bl	8013a30 <dhcp_option_short>
 80135c8:	4603      	mov	r3, r0
 80135ca:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80135cc:	89b8      	ldrh	r0, [r7, #12]
 80135ce:	693b      	ldr	r3, [r7, #16]
 80135d0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80135d4:	2303      	movs	r3, #3
 80135d6:	2237      	movs	r2, #55	; 0x37
 80135d8:	f000 f9d0 	bl	801397c <dhcp_option>
 80135dc:	4603      	mov	r3, r0
 80135de:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80135e0:	2300      	movs	r3, #0
 80135e2:	77bb      	strb	r3, [r7, #30]
 80135e4:	e00e      	b.n	8013604 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80135e6:	89b8      	ldrh	r0, [r7, #12]
 80135e8:	693b      	ldr	r3, [r7, #16]
 80135ea:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80135ee:	7fbb      	ldrb	r3, [r7, #30]
 80135f0:	4a29      	ldr	r2, [pc, #164]	; (8013698 <dhcp_rebind+0x128>)
 80135f2:	5cd3      	ldrb	r3, [r2, r3]
 80135f4:	461a      	mov	r2, r3
 80135f6:	f000 f9f5 	bl	80139e4 <dhcp_option_byte>
 80135fa:	4603      	mov	r3, r0
 80135fc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80135fe:	7fbb      	ldrb	r3, [r7, #30]
 8013600:	3301      	adds	r3, #1
 8013602:	77bb      	strb	r3, [r7, #30]
 8013604:	7fbb      	ldrb	r3, [r7, #30]
 8013606:	2b02      	cmp	r3, #2
 8013608:	d9ed      	bls.n	80135e6 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801360a:	89b8      	ldrh	r0, [r7, #12]
 801360c:	693b      	ldr	r3, [r7, #16]
 801360e:	33f0      	adds	r3, #240	; 0xf0
 8013610:	697a      	ldr	r2, [r7, #20]
 8013612:	4619      	mov	r1, r3
 8013614:	f000 fefa 	bl	801440c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013618:	4b20      	ldr	r3, [pc, #128]	; (801369c <dhcp_rebind+0x12c>)
 801361a:	6818      	ldr	r0, [r3, #0]
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	9300      	str	r3, [sp, #0]
 8013620:	2343      	movs	r3, #67	; 0x43
 8013622:	4a1f      	ldr	r2, [pc, #124]	; (80136a0 <dhcp_rebind+0x130>)
 8013624:	6979      	ldr	r1, [r7, #20]
 8013626:	f7fe fdad 	bl	8012184 <udp_sendto_if>
 801362a:	4603      	mov	r3, r0
 801362c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801362e:	6978      	ldr	r0, [r7, #20]
 8013630:	f7f7 ff40 	bl	800b4b4 <pbuf_free>
 8013634:	e001      	b.n	801363a <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013636:	23ff      	movs	r3, #255	; 0xff
 8013638:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801363a:	69bb      	ldr	r3, [r7, #24]
 801363c:	799b      	ldrb	r3, [r3, #6]
 801363e:	2bff      	cmp	r3, #255	; 0xff
 8013640:	d005      	beq.n	801364e <dhcp_rebind+0xde>
    dhcp->tries++;
 8013642:	69bb      	ldr	r3, [r7, #24]
 8013644:	799b      	ldrb	r3, [r3, #6]
 8013646:	3301      	adds	r3, #1
 8013648:	b2da      	uxtb	r2, r3
 801364a:	69bb      	ldr	r3, [r7, #24]
 801364c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801364e:	69bb      	ldr	r3, [r7, #24]
 8013650:	799b      	ldrb	r3, [r3, #6]
 8013652:	2b09      	cmp	r3, #9
 8013654:	d80a      	bhi.n	801366c <dhcp_rebind+0xfc>
 8013656:	69bb      	ldr	r3, [r7, #24]
 8013658:	799b      	ldrb	r3, [r3, #6]
 801365a:	b29b      	uxth	r3, r3
 801365c:	461a      	mov	r2, r3
 801365e:	0152      	lsls	r2, r2, #5
 8013660:	1ad2      	subs	r2, r2, r3
 8013662:	0092      	lsls	r2, r2, #2
 8013664:	4413      	add	r3, r2
 8013666:	00db      	lsls	r3, r3, #3
 8013668:	b29b      	uxth	r3, r3
 801366a:	e001      	b.n	8013670 <dhcp_rebind+0x100>
 801366c:	f242 7310 	movw	r3, #10000	; 0x2710
 8013670:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013672:	89fb      	ldrh	r3, [r7, #14]
 8013674:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013678:	4a0a      	ldr	r2, [pc, #40]	; (80136a4 <dhcp_rebind+0x134>)
 801367a:	fb82 1203 	smull	r1, r2, r2, r3
 801367e:	1152      	asrs	r2, r2, #5
 8013680:	17db      	asrs	r3, r3, #31
 8013682:	1ad3      	subs	r3, r2, r3
 8013684:	b29a      	uxth	r2, r3
 8013686:	69bb      	ldr	r3, [r7, #24]
 8013688:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801368a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801368e:	4618      	mov	r0, r3
 8013690:	3720      	adds	r7, #32
 8013692:	46bd      	mov	sp, r7
 8013694:	bd80      	pop	{r7, pc}
 8013696:	bf00      	nop
 8013698:	2000001c 	.word	0x2000001c
 801369c:	2000858c 	.word	0x2000858c
 80136a0:	0801c028 	.word	0x0801c028
 80136a4:	10624dd3 	.word	0x10624dd3

080136a8 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80136a8:	b5b0      	push	{r4, r5, r7, lr}
 80136aa:	b08a      	sub	sp, #40	; 0x28
 80136ac:	af02      	add	r7, sp, #8
 80136ae:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136b4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80136b6:	2103      	movs	r1, #3
 80136b8:	69b8      	ldr	r0, [r7, #24]
 80136ba:	f000 f945 	bl	8013948 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80136be:	f107 030c 	add.w	r3, r7, #12
 80136c2:	2203      	movs	r2, #3
 80136c4:	69b9      	ldr	r1, [r7, #24]
 80136c6:	6878      	ldr	r0, [r7, #4]
 80136c8:	f000 fdca 	bl	8014260 <dhcp_create_msg>
 80136cc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80136ce:	697b      	ldr	r3, [r7, #20]
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d066      	beq.n	80137a2 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80136d4:	697b      	ldr	r3, [r7, #20]
 80136d6:	685b      	ldr	r3, [r3, #4]
 80136d8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80136da:	89b8      	ldrh	r0, [r7, #12]
 80136dc:	693b      	ldr	r3, [r7, #16]
 80136de:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80136e2:	2302      	movs	r3, #2
 80136e4:	2239      	movs	r2, #57	; 0x39
 80136e6:	f000 f949 	bl	801397c <dhcp_option>
 80136ea:	4603      	mov	r3, r0
 80136ec:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80136ee:	89b8      	ldrh	r0, [r7, #12]
 80136f0:	693b      	ldr	r3, [r7, #16]
 80136f2:	33f0      	adds	r3, #240	; 0xf0
 80136f4:	f44f 7210 	mov.w	r2, #576	; 0x240
 80136f8:	4619      	mov	r1, r3
 80136fa:	f000 f999 	bl	8013a30 <dhcp_option_short>
 80136fe:	4603      	mov	r3, r0
 8013700:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8013702:	89b8      	ldrh	r0, [r7, #12]
 8013704:	693b      	ldr	r3, [r7, #16]
 8013706:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801370a:	2304      	movs	r3, #4
 801370c:	2232      	movs	r2, #50	; 0x32
 801370e:	f000 f935 	bl	801397c <dhcp_option>
 8013712:	4603      	mov	r3, r0
 8013714:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013716:	89bc      	ldrh	r4, [r7, #12]
 8013718:	693b      	ldr	r3, [r7, #16]
 801371a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801371e:	69bb      	ldr	r3, [r7, #24]
 8013720:	69db      	ldr	r3, [r3, #28]
 8013722:	4618      	mov	r0, r3
 8013724:	f7f6 fb23 	bl	8009d6e <lwip_htonl>
 8013728:	4603      	mov	r3, r0
 801372a:	461a      	mov	r2, r3
 801372c:	4629      	mov	r1, r5
 801372e:	4620      	mov	r0, r4
 8013730:	f000 f9b0 	bl	8013a94 <dhcp_option_long>
 8013734:	4603      	mov	r3, r0
 8013736:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013738:	89b8      	ldrh	r0, [r7, #12]
 801373a:	693b      	ldr	r3, [r7, #16]
 801373c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013740:	2303      	movs	r3, #3
 8013742:	2237      	movs	r2, #55	; 0x37
 8013744:	f000 f91a 	bl	801397c <dhcp_option>
 8013748:	4603      	mov	r3, r0
 801374a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801374c:	2300      	movs	r3, #0
 801374e:	77bb      	strb	r3, [r7, #30]
 8013750:	e00e      	b.n	8013770 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013752:	89b8      	ldrh	r0, [r7, #12]
 8013754:	693b      	ldr	r3, [r7, #16]
 8013756:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801375a:	7fbb      	ldrb	r3, [r7, #30]
 801375c:	4a29      	ldr	r2, [pc, #164]	; (8013804 <dhcp_reboot+0x15c>)
 801375e:	5cd3      	ldrb	r3, [r2, r3]
 8013760:	461a      	mov	r2, r3
 8013762:	f000 f93f 	bl	80139e4 <dhcp_option_byte>
 8013766:	4603      	mov	r3, r0
 8013768:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801376a:	7fbb      	ldrb	r3, [r7, #30]
 801376c:	3301      	adds	r3, #1
 801376e:	77bb      	strb	r3, [r7, #30]
 8013770:	7fbb      	ldrb	r3, [r7, #30]
 8013772:	2b02      	cmp	r3, #2
 8013774:	d9ed      	bls.n	8013752 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013776:	89b8      	ldrh	r0, [r7, #12]
 8013778:	693b      	ldr	r3, [r7, #16]
 801377a:	33f0      	adds	r3, #240	; 0xf0
 801377c:	697a      	ldr	r2, [r7, #20]
 801377e:	4619      	mov	r1, r3
 8013780:	f000 fe44 	bl	801440c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013784:	4b20      	ldr	r3, [pc, #128]	; (8013808 <dhcp_reboot+0x160>)
 8013786:	6818      	ldr	r0, [r3, #0]
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	9300      	str	r3, [sp, #0]
 801378c:	2343      	movs	r3, #67	; 0x43
 801378e:	4a1f      	ldr	r2, [pc, #124]	; (801380c <dhcp_reboot+0x164>)
 8013790:	6979      	ldr	r1, [r7, #20]
 8013792:	f7fe fcf7 	bl	8012184 <udp_sendto_if>
 8013796:	4603      	mov	r3, r0
 8013798:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801379a:	6978      	ldr	r0, [r7, #20]
 801379c:	f7f7 fe8a 	bl	800b4b4 <pbuf_free>
 80137a0:	e001      	b.n	80137a6 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80137a2:	23ff      	movs	r3, #255	; 0xff
 80137a4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80137a6:	69bb      	ldr	r3, [r7, #24]
 80137a8:	799b      	ldrb	r3, [r3, #6]
 80137aa:	2bff      	cmp	r3, #255	; 0xff
 80137ac:	d005      	beq.n	80137ba <dhcp_reboot+0x112>
    dhcp->tries++;
 80137ae:	69bb      	ldr	r3, [r7, #24]
 80137b0:	799b      	ldrb	r3, [r3, #6]
 80137b2:	3301      	adds	r3, #1
 80137b4:	b2da      	uxtb	r2, r3
 80137b6:	69bb      	ldr	r3, [r7, #24]
 80137b8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80137ba:	69bb      	ldr	r3, [r7, #24]
 80137bc:	799b      	ldrb	r3, [r3, #6]
 80137be:	2b09      	cmp	r3, #9
 80137c0:	d80a      	bhi.n	80137d8 <dhcp_reboot+0x130>
 80137c2:	69bb      	ldr	r3, [r7, #24]
 80137c4:	799b      	ldrb	r3, [r3, #6]
 80137c6:	b29b      	uxth	r3, r3
 80137c8:	461a      	mov	r2, r3
 80137ca:	0152      	lsls	r2, r2, #5
 80137cc:	1ad2      	subs	r2, r2, r3
 80137ce:	0092      	lsls	r2, r2, #2
 80137d0:	4413      	add	r3, r2
 80137d2:	00db      	lsls	r3, r3, #3
 80137d4:	b29b      	uxth	r3, r3
 80137d6:	e001      	b.n	80137dc <dhcp_reboot+0x134>
 80137d8:	f242 7310 	movw	r3, #10000	; 0x2710
 80137dc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80137de:	89fb      	ldrh	r3, [r7, #14]
 80137e0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80137e4:	4a0a      	ldr	r2, [pc, #40]	; (8013810 <dhcp_reboot+0x168>)
 80137e6:	fb82 1203 	smull	r1, r2, r2, r3
 80137ea:	1152      	asrs	r2, r2, #5
 80137ec:	17db      	asrs	r3, r3, #31
 80137ee:	1ad3      	subs	r3, r2, r3
 80137f0:	b29a      	uxth	r2, r3
 80137f2:	69bb      	ldr	r3, [r7, #24]
 80137f4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80137f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80137fa:	4618      	mov	r0, r3
 80137fc:	3720      	adds	r7, #32
 80137fe:	46bd      	mov	sp, r7
 8013800:	bdb0      	pop	{r4, r5, r7, pc}
 8013802:	bf00      	nop
 8013804:	2000001c 	.word	0x2000001c
 8013808:	2000858c 	.word	0x2000858c
 801380c:	0801c028 	.word	0x0801c028
 8013810:	10624dd3 	.word	0x10624dd3

08013814 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8013814:	b5b0      	push	{r4, r5, r7, lr}
 8013816:	b08a      	sub	sp, #40	; 0x28
 8013818:	af02      	add	r7, sp, #8
 801381a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013820:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8013822:	69fb      	ldr	r3, [r7, #28]
 8013824:	2b00      	cmp	r3, #0
 8013826:	f000 8084 	beq.w	8013932 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801382a:	69fb      	ldr	r3, [r7, #28]
 801382c:	795b      	ldrb	r3, [r3, #5]
 801382e:	2b00      	cmp	r3, #0
 8013830:	f000 8081 	beq.w	8013936 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8013834:	69fb      	ldr	r3, [r7, #28]
 8013836:	699b      	ldr	r3, [r3, #24]
 8013838:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801383a:	69fb      	ldr	r3, [r7, #28]
 801383c:	2200      	movs	r2, #0
 801383e:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8013840:	69fb      	ldr	r3, [r7, #28]
 8013842:	2200      	movs	r2, #0
 8013844:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8013846:	69fb      	ldr	r3, [r7, #28]
 8013848:	2200      	movs	r2, #0
 801384a:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801384c:	69fb      	ldr	r3, [r7, #28]
 801384e:	2200      	movs	r2, #0
 8013850:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8013852:	69fb      	ldr	r3, [r7, #28]
 8013854:	2200      	movs	r2, #0
 8013856:	631a      	str	r2, [r3, #48]	; 0x30
 8013858:	69fb      	ldr	r3, [r7, #28]
 801385a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801385c:	69fb      	ldr	r3, [r7, #28]
 801385e:	62da      	str	r2, [r3, #44]	; 0x2c
 8013860:	69fb      	ldr	r3, [r7, #28]
 8013862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013864:	69fb      	ldr	r3, [r7, #28]
 8013866:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8013868:	69fb      	ldr	r3, [r7, #28]
 801386a:	2200      	movs	r2, #0
 801386c:	829a      	strh	r2, [r3, #20]
 801386e:	69fb      	ldr	r3, [r7, #28]
 8013870:	8a9a      	ldrh	r2, [r3, #20]
 8013872:	69fb      	ldr	r3, [r7, #28]
 8013874:	825a      	strh	r2, [r3, #18]
 8013876:	69fb      	ldr	r3, [r7, #28]
 8013878:	8a5a      	ldrh	r2, [r3, #18]
 801387a:	69fb      	ldr	r3, [r7, #28]
 801387c:	821a      	strh	r2, [r3, #16]
 801387e:	69fb      	ldr	r3, [r7, #28]
 8013880:	8a1a      	ldrh	r2, [r3, #16]
 8013882:	69fb      	ldr	r3, [r7, #28]
 8013884:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8013886:	6878      	ldr	r0, [r7, #4]
 8013888:	f000 fdee 	bl	8014468 <dhcp_supplied_address>
 801388c:	4603      	mov	r3, r0
 801388e:	2b00      	cmp	r3, #0
 8013890:	d03b      	beq.n	801390a <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8013892:	f107 030e 	add.w	r3, r7, #14
 8013896:	2207      	movs	r2, #7
 8013898:	69f9      	ldr	r1, [r7, #28]
 801389a:	6878      	ldr	r0, [r7, #4]
 801389c:	f000 fce0 	bl	8014260 <dhcp_create_msg>
 80138a0:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 80138a2:	69bb      	ldr	r3, [r7, #24]
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d030      	beq.n	801390a <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80138a8:	69bb      	ldr	r3, [r7, #24]
 80138aa:	685b      	ldr	r3, [r3, #4]
 80138ac:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80138ae:	89f8      	ldrh	r0, [r7, #14]
 80138b0:	697b      	ldr	r3, [r7, #20]
 80138b2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80138b6:	2304      	movs	r3, #4
 80138b8:	2236      	movs	r2, #54	; 0x36
 80138ba:	f000 f85f 	bl	801397c <dhcp_option>
 80138be:	4603      	mov	r3, r0
 80138c0:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80138c2:	89fc      	ldrh	r4, [r7, #14]
 80138c4:	697b      	ldr	r3, [r7, #20]
 80138c6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80138ca:	693b      	ldr	r3, [r7, #16]
 80138cc:	4618      	mov	r0, r3
 80138ce:	f7f6 fa4e 	bl	8009d6e <lwip_htonl>
 80138d2:	4603      	mov	r3, r0
 80138d4:	461a      	mov	r2, r3
 80138d6:	4629      	mov	r1, r5
 80138d8:	4620      	mov	r0, r4
 80138da:	f000 f8db 	bl	8013a94 <dhcp_option_long>
 80138de:	4603      	mov	r3, r0
 80138e0:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80138e2:	89f8      	ldrh	r0, [r7, #14]
 80138e4:	697b      	ldr	r3, [r7, #20]
 80138e6:	33f0      	adds	r3, #240	; 0xf0
 80138e8:	69ba      	ldr	r2, [r7, #24]
 80138ea:	4619      	mov	r1, r3
 80138ec:	f000 fd8e 	bl	801440c <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80138f0:	4b13      	ldr	r3, [pc, #76]	; (8013940 <dhcp_release_and_stop+0x12c>)
 80138f2:	6818      	ldr	r0, [r3, #0]
 80138f4:	f107 0210 	add.w	r2, r7, #16
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	9300      	str	r3, [sp, #0]
 80138fc:	2343      	movs	r3, #67	; 0x43
 80138fe:	69b9      	ldr	r1, [r7, #24]
 8013900:	f7fe fc40 	bl	8012184 <udp_sendto_if>
      pbuf_free(p_out);
 8013904:	69b8      	ldr	r0, [r7, #24]
 8013906:	f7f7 fdd5 	bl	800b4b4 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801390a:	4b0e      	ldr	r3, [pc, #56]	; (8013944 <dhcp_release_and_stop+0x130>)
 801390c:	4a0d      	ldr	r2, [pc, #52]	; (8013944 <dhcp_release_and_stop+0x130>)
 801390e:	490d      	ldr	r1, [pc, #52]	; (8013944 <dhcp_release_and_stop+0x130>)
 8013910:	6878      	ldr	r0, [r7, #4]
 8013912:	f7f7 f8c1 	bl	800aa98 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8013916:	2100      	movs	r1, #0
 8013918:	69f8      	ldr	r0, [r7, #28]
 801391a:	f000 f815 	bl	8013948 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801391e:	69fb      	ldr	r3, [r7, #28]
 8013920:	791b      	ldrb	r3, [r3, #4]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d008      	beq.n	8013938 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8013926:	f7fe ff85 	bl	8012834 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801392a:	69fb      	ldr	r3, [r7, #28]
 801392c:	2200      	movs	r2, #0
 801392e:	711a      	strb	r2, [r3, #4]
 8013930:	e002      	b.n	8013938 <dhcp_release_and_stop+0x124>
    return;
 8013932:	bf00      	nop
 8013934:	e000      	b.n	8013938 <dhcp_release_and_stop+0x124>
    return;
 8013936:	bf00      	nop
  }
}
 8013938:	3720      	adds	r7, #32
 801393a:	46bd      	mov	sp, r7
 801393c:	bdb0      	pop	{r4, r5, r7, pc}
 801393e:	bf00      	nop
 8013940:	2000858c 	.word	0x2000858c
 8013944:	0801c024 	.word	0x0801c024

08013948 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8013948:	b480      	push	{r7}
 801394a:	b083      	sub	sp, #12
 801394c:	af00      	add	r7, sp, #0
 801394e:	6078      	str	r0, [r7, #4]
 8013950:	460b      	mov	r3, r1
 8013952:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	795b      	ldrb	r3, [r3, #5]
 8013958:	78fa      	ldrb	r2, [r7, #3]
 801395a:	429a      	cmp	r2, r3
 801395c:	d008      	beq.n	8013970 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	78fa      	ldrb	r2, [r7, #3]
 8013962:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	2200      	movs	r2, #0
 8013968:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	2200      	movs	r2, #0
 801396e:	811a      	strh	r2, [r3, #8]
  }
}
 8013970:	bf00      	nop
 8013972:	370c      	adds	r7, #12
 8013974:	46bd      	mov	sp, r7
 8013976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801397a:	4770      	bx	lr

0801397c <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 801397c:	b580      	push	{r7, lr}
 801397e:	b082      	sub	sp, #8
 8013980:	af00      	add	r7, sp, #0
 8013982:	6039      	str	r1, [r7, #0]
 8013984:	4611      	mov	r1, r2
 8013986:	461a      	mov	r2, r3
 8013988:	4603      	mov	r3, r0
 801398a:	80fb      	strh	r3, [r7, #6]
 801398c:	460b      	mov	r3, r1
 801398e:	717b      	strb	r3, [r7, #5]
 8013990:	4613      	mov	r3, r2
 8013992:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8013994:	88fa      	ldrh	r2, [r7, #6]
 8013996:	793b      	ldrb	r3, [r7, #4]
 8013998:	4413      	add	r3, r2
 801399a:	3302      	adds	r3, #2
 801399c:	2b44      	cmp	r3, #68	; 0x44
 801399e:	d906      	bls.n	80139ae <dhcp_option+0x32>
 80139a0:	4b0d      	ldr	r3, [pc, #52]	; (80139d8 <dhcp_option+0x5c>)
 80139a2:	f240 529a 	movw	r2, #1434	; 0x59a
 80139a6:	490d      	ldr	r1, [pc, #52]	; (80139dc <dhcp_option+0x60>)
 80139a8:	480d      	ldr	r0, [pc, #52]	; (80139e0 <dhcp_option+0x64>)
 80139aa:	f003 fbfd 	bl	80171a8 <iprintf>
  options[options_out_len++] = option_type;
 80139ae:	88fb      	ldrh	r3, [r7, #6]
 80139b0:	1c5a      	adds	r2, r3, #1
 80139b2:	80fa      	strh	r2, [r7, #6]
 80139b4:	461a      	mov	r2, r3
 80139b6:	683b      	ldr	r3, [r7, #0]
 80139b8:	4413      	add	r3, r2
 80139ba:	797a      	ldrb	r2, [r7, #5]
 80139bc:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 80139be:	88fb      	ldrh	r3, [r7, #6]
 80139c0:	1c5a      	adds	r2, r3, #1
 80139c2:	80fa      	strh	r2, [r7, #6]
 80139c4:	461a      	mov	r2, r3
 80139c6:	683b      	ldr	r3, [r7, #0]
 80139c8:	4413      	add	r3, r2
 80139ca:	793a      	ldrb	r2, [r7, #4]
 80139cc:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80139ce:	88fb      	ldrh	r3, [r7, #6]
}
 80139d0:	4618      	mov	r0, r3
 80139d2:	3708      	adds	r7, #8
 80139d4:	46bd      	mov	sp, r7
 80139d6:	bd80      	pop	{r7, pc}
 80139d8:	0801b484 	.word	0x0801b484
 80139dc:	0801b618 	.word	0x0801b618
 80139e0:	0801b4e4 	.word	0x0801b4e4

080139e4 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 80139e4:	b580      	push	{r7, lr}
 80139e6:	b082      	sub	sp, #8
 80139e8:	af00      	add	r7, sp, #0
 80139ea:	4603      	mov	r3, r0
 80139ec:	6039      	str	r1, [r7, #0]
 80139ee:	80fb      	strh	r3, [r7, #6]
 80139f0:	4613      	mov	r3, r2
 80139f2:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80139f4:	88fb      	ldrh	r3, [r7, #6]
 80139f6:	2b43      	cmp	r3, #67	; 0x43
 80139f8:	d906      	bls.n	8013a08 <dhcp_option_byte+0x24>
 80139fa:	4b0a      	ldr	r3, [pc, #40]	; (8013a24 <dhcp_option_byte+0x40>)
 80139fc:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8013a00:	4909      	ldr	r1, [pc, #36]	; (8013a28 <dhcp_option_byte+0x44>)
 8013a02:	480a      	ldr	r0, [pc, #40]	; (8013a2c <dhcp_option_byte+0x48>)
 8013a04:	f003 fbd0 	bl	80171a8 <iprintf>
  options[options_out_len++] = value;
 8013a08:	88fb      	ldrh	r3, [r7, #6]
 8013a0a:	1c5a      	adds	r2, r3, #1
 8013a0c:	80fa      	strh	r2, [r7, #6]
 8013a0e:	461a      	mov	r2, r3
 8013a10:	683b      	ldr	r3, [r7, #0]
 8013a12:	4413      	add	r3, r2
 8013a14:	797a      	ldrb	r2, [r7, #5]
 8013a16:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013a18:	88fb      	ldrh	r3, [r7, #6]
}
 8013a1a:	4618      	mov	r0, r3
 8013a1c:	3708      	adds	r7, #8
 8013a1e:	46bd      	mov	sp, r7
 8013a20:	bd80      	pop	{r7, pc}
 8013a22:	bf00      	nop
 8013a24:	0801b484 	.word	0x0801b484
 8013a28:	0801b65c 	.word	0x0801b65c
 8013a2c:	0801b4e4 	.word	0x0801b4e4

08013a30 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8013a30:	b580      	push	{r7, lr}
 8013a32:	b082      	sub	sp, #8
 8013a34:	af00      	add	r7, sp, #0
 8013a36:	4603      	mov	r3, r0
 8013a38:	6039      	str	r1, [r7, #0]
 8013a3a:	80fb      	strh	r3, [r7, #6]
 8013a3c:	4613      	mov	r3, r2
 8013a3e:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8013a40:	88fb      	ldrh	r3, [r7, #6]
 8013a42:	3302      	adds	r3, #2
 8013a44:	2b44      	cmp	r3, #68	; 0x44
 8013a46:	d906      	bls.n	8013a56 <dhcp_option_short+0x26>
 8013a48:	4b0f      	ldr	r3, [pc, #60]	; (8013a88 <dhcp_option_short+0x58>)
 8013a4a:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8013a4e:	490f      	ldr	r1, [pc, #60]	; (8013a8c <dhcp_option_short+0x5c>)
 8013a50:	480f      	ldr	r0, [pc, #60]	; (8013a90 <dhcp_option_short+0x60>)
 8013a52:	f003 fba9 	bl	80171a8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8013a56:	88bb      	ldrh	r3, [r7, #4]
 8013a58:	0a1b      	lsrs	r3, r3, #8
 8013a5a:	b29a      	uxth	r2, r3
 8013a5c:	88fb      	ldrh	r3, [r7, #6]
 8013a5e:	1c59      	adds	r1, r3, #1
 8013a60:	80f9      	strh	r1, [r7, #6]
 8013a62:	4619      	mov	r1, r3
 8013a64:	683b      	ldr	r3, [r7, #0]
 8013a66:	440b      	add	r3, r1
 8013a68:	b2d2      	uxtb	r2, r2
 8013a6a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8013a6c:	88fb      	ldrh	r3, [r7, #6]
 8013a6e:	1c5a      	adds	r2, r3, #1
 8013a70:	80fa      	strh	r2, [r7, #6]
 8013a72:	461a      	mov	r2, r3
 8013a74:	683b      	ldr	r3, [r7, #0]
 8013a76:	4413      	add	r3, r2
 8013a78:	88ba      	ldrh	r2, [r7, #4]
 8013a7a:	b2d2      	uxtb	r2, r2
 8013a7c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013a7e:	88fb      	ldrh	r3, [r7, #6]
}
 8013a80:	4618      	mov	r0, r3
 8013a82:	3708      	adds	r7, #8
 8013a84:	46bd      	mov	sp, r7
 8013a86:	bd80      	pop	{r7, pc}
 8013a88:	0801b484 	.word	0x0801b484
 8013a8c:	0801b694 	.word	0x0801b694
 8013a90:	0801b4e4 	.word	0x0801b4e4

08013a94 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8013a94:	b580      	push	{r7, lr}
 8013a96:	b084      	sub	sp, #16
 8013a98:	af00      	add	r7, sp, #0
 8013a9a:	4603      	mov	r3, r0
 8013a9c:	60b9      	str	r1, [r7, #8]
 8013a9e:	607a      	str	r2, [r7, #4]
 8013aa0:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8013aa2:	89fb      	ldrh	r3, [r7, #14]
 8013aa4:	3304      	adds	r3, #4
 8013aa6:	2b44      	cmp	r3, #68	; 0x44
 8013aa8:	d906      	bls.n	8013ab8 <dhcp_option_long+0x24>
 8013aaa:	4b19      	ldr	r3, [pc, #100]	; (8013b10 <dhcp_option_long+0x7c>)
 8013aac:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8013ab0:	4918      	ldr	r1, [pc, #96]	; (8013b14 <dhcp_option_long+0x80>)
 8013ab2:	4819      	ldr	r0, [pc, #100]	; (8013b18 <dhcp_option_long+0x84>)
 8013ab4:	f003 fb78 	bl	80171a8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	0e1a      	lsrs	r2, r3, #24
 8013abc:	89fb      	ldrh	r3, [r7, #14]
 8013abe:	1c59      	adds	r1, r3, #1
 8013ac0:	81f9      	strh	r1, [r7, #14]
 8013ac2:	4619      	mov	r1, r3
 8013ac4:	68bb      	ldr	r3, [r7, #8]
 8013ac6:	440b      	add	r3, r1
 8013ac8:	b2d2      	uxtb	r2, r2
 8013aca:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	0c1a      	lsrs	r2, r3, #16
 8013ad0:	89fb      	ldrh	r3, [r7, #14]
 8013ad2:	1c59      	adds	r1, r3, #1
 8013ad4:	81f9      	strh	r1, [r7, #14]
 8013ad6:	4619      	mov	r1, r3
 8013ad8:	68bb      	ldr	r3, [r7, #8]
 8013ada:	440b      	add	r3, r1
 8013adc:	b2d2      	uxtb	r2, r2
 8013ade:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	0a1a      	lsrs	r2, r3, #8
 8013ae4:	89fb      	ldrh	r3, [r7, #14]
 8013ae6:	1c59      	adds	r1, r3, #1
 8013ae8:	81f9      	strh	r1, [r7, #14]
 8013aea:	4619      	mov	r1, r3
 8013aec:	68bb      	ldr	r3, [r7, #8]
 8013aee:	440b      	add	r3, r1
 8013af0:	b2d2      	uxtb	r2, r2
 8013af2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8013af4:	89fb      	ldrh	r3, [r7, #14]
 8013af6:	1c5a      	adds	r2, r3, #1
 8013af8:	81fa      	strh	r2, [r7, #14]
 8013afa:	461a      	mov	r2, r3
 8013afc:	68bb      	ldr	r3, [r7, #8]
 8013afe:	4413      	add	r3, r2
 8013b00:	687a      	ldr	r2, [r7, #4]
 8013b02:	b2d2      	uxtb	r2, r2
 8013b04:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013b06:	89fb      	ldrh	r3, [r7, #14]
}
 8013b08:	4618      	mov	r0, r3
 8013b0a:	3710      	adds	r7, #16
 8013b0c:	46bd      	mov	sp, r7
 8013b0e:	bd80      	pop	{r7, pc}
 8013b10:	0801b484 	.word	0x0801b484
 8013b14:	0801b6d0 	.word	0x0801b6d0
 8013b18:	0801b4e4 	.word	0x0801b4e4

08013b1c <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8013b1c:	b580      	push	{r7, lr}
 8013b1e:	b090      	sub	sp, #64	; 0x40
 8013b20:	af00      	add	r7, sp, #0
 8013b22:	6078      	str	r0, [r7, #4]
 8013b24:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8013b26:	2300      	movs	r3, #0
 8013b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8013b2a:	2300      	movs	r3, #0
 8013b2c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8013b2e:	2208      	movs	r2, #8
 8013b30:	2100      	movs	r1, #0
 8013b32:	48be      	ldr	r0, [pc, #760]	; (8013e2c <dhcp_parse_reply+0x310>)
 8013b34:	f003 fad5 	bl	80170e2 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	895b      	ldrh	r3, [r3, #10]
 8013b3c:	2b2b      	cmp	r3, #43	; 0x2b
 8013b3e:	d802      	bhi.n	8013b46 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8013b40:	f06f 0301 	mvn.w	r3, #1
 8013b44:	e2a8      	b.n	8014098 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	685b      	ldr	r3, [r3, #4]
 8013b4a:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8013b4c:	23f0      	movs	r3, #240	; 0xf0
 8013b4e:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	891b      	ldrh	r3, [r3, #8]
 8013b54:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8013b5a:	e00c      	b.n	8013b76 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8013b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b5e:	895b      	ldrh	r3, [r3, #10]
 8013b60:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013b62:	1ad3      	subs	r3, r2, r3
 8013b64:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8013b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b68:	895b      	ldrh	r3, [r3, #10]
 8013b6a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8013b6c:	1ad3      	subs	r3, r2, r3
 8013b6e:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8013b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b72:	681b      	ldr	r3, [r3, #0]
 8013b74:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8013b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d004      	beq.n	8013b86 <dhcp_parse_reply+0x6a>
 8013b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b7e:	895b      	ldrh	r3, [r3, #10]
 8013b80:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013b82:	429a      	cmp	r2, r3
 8013b84:	d2ea      	bcs.n	8013b5c <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8013b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d102      	bne.n	8013b92 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8013b8c:	f06f 0301 	mvn.w	r3, #1
 8013b90:	e282      	b.n	8014098 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 8013b92:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013b94:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8013b96:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013b98:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8013b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b9c:	685b      	ldr	r3, [r3, #4]
 8013b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8013ba0:	e23a      	b.n	8014018 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 8013ba2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013ba4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013ba6:	4413      	add	r3, r2
 8013ba8:	781b      	ldrb	r3, [r3, #0]
 8013baa:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8013bac:	2300      	movs	r3, #0
 8013bae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8013bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8013bb6:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8013bb8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013bba:	3302      	adds	r3, #2
 8013bbc:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8013bbe:	8bfa      	ldrh	r2, [r7, #30]
 8013bc0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013bc2:	429a      	cmp	r2, r3
 8013bc4:	d202      	bcs.n	8013bcc <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8013bc6:	f06f 0301 	mvn.w	r3, #1
 8013bca:	e265      	b.n	8014098 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8013bcc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013bce:	3301      	adds	r3, #1
 8013bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013bd2:	8952      	ldrh	r2, [r2, #10]
 8013bd4:	4293      	cmp	r3, r2
 8013bd6:	da07      	bge.n	8013be8 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8013bd8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013bda:	3301      	adds	r3, #1
 8013bdc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013bde:	4413      	add	r3, r2
 8013be0:	781b      	ldrb	r3, [r3, #0]
 8013be2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013be6:	e00b      	b.n	8013c00 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8013be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d004      	beq.n	8013bfa <dhcp_parse_reply+0xde>
 8013bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	685b      	ldr	r3, [r3, #4]
 8013bf6:	781b      	ldrb	r3, [r3, #0]
 8013bf8:	e000      	b.n	8013bfc <dhcp_parse_reply+0xe0>
 8013bfa:	2300      	movs	r3, #0
 8013bfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8013c00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013c04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8013c08:	7dfb      	ldrb	r3, [r7, #23]
 8013c0a:	2b3b      	cmp	r3, #59	; 0x3b
 8013c0c:	f200 812d 	bhi.w	8013e6a <dhcp_parse_reply+0x34e>
 8013c10:	a201      	add	r2, pc, #4	; (adr r2, 8013c18 <dhcp_parse_reply+0xfc>)
 8013c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c16:	bf00      	nop
 8013c18:	08013d09 	.word	0x08013d09
 8013c1c:	08013d19 	.word	0x08013d19
 8013c20:	08013e6b 	.word	0x08013e6b
 8013c24:	08013d3b 	.word	0x08013d3b
 8013c28:	08013e6b 	.word	0x08013e6b
 8013c2c:	08013e6b 	.word	0x08013e6b
 8013c30:	08013e6b 	.word	0x08013e6b
 8013c34:	08013e6b 	.word	0x08013e6b
 8013c38:	08013e6b 	.word	0x08013e6b
 8013c3c:	08013e6b 	.word	0x08013e6b
 8013c40:	08013e6b 	.word	0x08013e6b
 8013c44:	08013e6b 	.word	0x08013e6b
 8013c48:	08013e6b 	.word	0x08013e6b
 8013c4c:	08013e6b 	.word	0x08013e6b
 8013c50:	08013e6b 	.word	0x08013e6b
 8013c54:	08013e6b 	.word	0x08013e6b
 8013c58:	08013e6b 	.word	0x08013e6b
 8013c5c:	08013e6b 	.word	0x08013e6b
 8013c60:	08013e6b 	.word	0x08013e6b
 8013c64:	08013e6b 	.word	0x08013e6b
 8013c68:	08013e6b 	.word	0x08013e6b
 8013c6c:	08013e6b 	.word	0x08013e6b
 8013c70:	08013e6b 	.word	0x08013e6b
 8013c74:	08013e6b 	.word	0x08013e6b
 8013c78:	08013e6b 	.word	0x08013e6b
 8013c7c:	08013e6b 	.word	0x08013e6b
 8013c80:	08013e6b 	.word	0x08013e6b
 8013c84:	08013e6b 	.word	0x08013e6b
 8013c88:	08013e6b 	.word	0x08013e6b
 8013c8c:	08013e6b 	.word	0x08013e6b
 8013c90:	08013e6b 	.word	0x08013e6b
 8013c94:	08013e6b 	.word	0x08013e6b
 8013c98:	08013e6b 	.word	0x08013e6b
 8013c9c:	08013e6b 	.word	0x08013e6b
 8013ca0:	08013e6b 	.word	0x08013e6b
 8013ca4:	08013e6b 	.word	0x08013e6b
 8013ca8:	08013e6b 	.word	0x08013e6b
 8013cac:	08013e6b 	.word	0x08013e6b
 8013cb0:	08013e6b 	.word	0x08013e6b
 8013cb4:	08013e6b 	.word	0x08013e6b
 8013cb8:	08013e6b 	.word	0x08013e6b
 8013cbc:	08013e6b 	.word	0x08013e6b
 8013cc0:	08013e6b 	.word	0x08013e6b
 8013cc4:	08013e6b 	.word	0x08013e6b
 8013cc8:	08013e6b 	.word	0x08013e6b
 8013ccc:	08013e6b 	.word	0x08013e6b
 8013cd0:	08013e6b 	.word	0x08013e6b
 8013cd4:	08013e6b 	.word	0x08013e6b
 8013cd8:	08013e6b 	.word	0x08013e6b
 8013cdc:	08013e6b 	.word	0x08013e6b
 8013ce0:	08013e6b 	.word	0x08013e6b
 8013ce4:	08013d67 	.word	0x08013d67
 8013ce8:	08013d89 	.word	0x08013d89
 8013cec:	08013dc5 	.word	0x08013dc5
 8013cf0:	08013de7 	.word	0x08013de7
 8013cf4:	08013e6b 	.word	0x08013e6b
 8013cf8:	08013e6b 	.word	0x08013e6b
 8013cfc:	08013e6b 	.word	0x08013e6b
 8013d00:	08013e09 	.word	0x08013e09
 8013d04:	08013e49 	.word	0x08013e49
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8013d08:	2300      	movs	r3, #0
 8013d0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013d0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d12:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8013d16:	e0ac      	b.n	8013e72 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013d18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d1c:	2b04      	cmp	r3, #4
 8013d1e:	d009      	beq.n	8013d34 <dhcp_parse_reply+0x218>
 8013d20:	4b43      	ldr	r3, [pc, #268]	; (8013e30 <dhcp_parse_reply+0x314>)
 8013d22:	f240 622e 	movw	r2, #1582	; 0x62e
 8013d26:	4943      	ldr	r1, [pc, #268]	; (8013e34 <dhcp_parse_reply+0x318>)
 8013d28:	4843      	ldr	r0, [pc, #268]	; (8013e38 <dhcp_parse_reply+0x31c>)
 8013d2a:	f003 fa3d 	bl	80171a8 <iprintf>
 8013d2e:	f06f 0305 	mvn.w	r3, #5
 8013d32:	e1b1      	b.n	8014098 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8013d34:	2306      	movs	r3, #6
 8013d36:	623b      	str	r3, [r7, #32]
        break;
 8013d38:	e09b      	b.n	8013e72 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8013d3a:	2304      	movs	r3, #4
 8013d3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8013d40:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013d44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013d48:	429a      	cmp	r2, r3
 8013d4a:	d209      	bcs.n	8013d60 <dhcp_parse_reply+0x244>
 8013d4c:	4b38      	ldr	r3, [pc, #224]	; (8013e30 <dhcp_parse_reply+0x314>)
 8013d4e:	f240 6233 	movw	r2, #1587	; 0x633
 8013d52:	493a      	ldr	r1, [pc, #232]	; (8013e3c <dhcp_parse_reply+0x320>)
 8013d54:	4838      	ldr	r0, [pc, #224]	; (8013e38 <dhcp_parse_reply+0x31c>)
 8013d56:	f003 fa27 	bl	80171a8 <iprintf>
 8013d5a:	f06f 0305 	mvn.w	r3, #5
 8013d5e:	e19b      	b.n	8014098 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8013d60:	2307      	movs	r3, #7
 8013d62:	623b      	str	r3, [r7, #32]
        break;
 8013d64:	e085      	b.n	8013e72 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013d66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d6a:	2b04      	cmp	r3, #4
 8013d6c:	d009      	beq.n	8013d82 <dhcp_parse_reply+0x266>
 8013d6e:	4b30      	ldr	r3, [pc, #192]	; (8013e30 <dhcp_parse_reply+0x314>)
 8013d70:	f240 6241 	movw	r2, #1601	; 0x641
 8013d74:	492f      	ldr	r1, [pc, #188]	; (8013e34 <dhcp_parse_reply+0x318>)
 8013d76:	4830      	ldr	r0, [pc, #192]	; (8013e38 <dhcp_parse_reply+0x31c>)
 8013d78:	f003 fa16 	bl	80171a8 <iprintf>
 8013d7c:	f06f 0305 	mvn.w	r3, #5
 8013d80:	e18a      	b.n	8014098 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8013d82:	2303      	movs	r3, #3
 8013d84:	623b      	str	r3, [r7, #32]
        break;
 8013d86:	e074      	b.n	8013e72 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8013d88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d8c:	2b01      	cmp	r3, #1
 8013d8e:	d009      	beq.n	8013da4 <dhcp_parse_reply+0x288>
 8013d90:	4b27      	ldr	r3, [pc, #156]	; (8013e30 <dhcp_parse_reply+0x314>)
 8013d92:	f240 624f 	movw	r2, #1615	; 0x64f
 8013d96:	492a      	ldr	r1, [pc, #168]	; (8013e40 <dhcp_parse_reply+0x324>)
 8013d98:	4827      	ldr	r0, [pc, #156]	; (8013e38 <dhcp_parse_reply+0x31c>)
 8013d9a:	f003 fa05 	bl	80171a8 <iprintf>
 8013d9e:	f06f 0305 	mvn.w	r3, #5
 8013da2:	e179      	b.n	8014098 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8013da4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013da6:	2bf0      	cmp	r3, #240	; 0xf0
 8013da8:	d009      	beq.n	8013dbe <dhcp_parse_reply+0x2a2>
 8013daa:	4b21      	ldr	r3, [pc, #132]	; (8013e30 <dhcp_parse_reply+0x314>)
 8013dac:	f240 6251 	movw	r2, #1617	; 0x651
 8013db0:	4924      	ldr	r1, [pc, #144]	; (8013e44 <dhcp_parse_reply+0x328>)
 8013db2:	4821      	ldr	r0, [pc, #132]	; (8013e38 <dhcp_parse_reply+0x31c>)
 8013db4:	f003 f9f8 	bl	80171a8 <iprintf>
 8013db8:	f06f 0305 	mvn.w	r3, #5
 8013dbc:	e16c      	b.n	8014098 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8013dbe:	2300      	movs	r3, #0
 8013dc0:	623b      	str	r3, [r7, #32]
        break;
 8013dc2:	e056      	b.n	8013e72 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8013dc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013dc8:	2b01      	cmp	r3, #1
 8013dca:	d009      	beq.n	8013de0 <dhcp_parse_reply+0x2c4>
 8013dcc:	4b18      	ldr	r3, [pc, #96]	; (8013e30 <dhcp_parse_reply+0x314>)
 8013dce:	f240 6255 	movw	r2, #1621	; 0x655
 8013dd2:	491b      	ldr	r1, [pc, #108]	; (8013e40 <dhcp_parse_reply+0x324>)
 8013dd4:	4818      	ldr	r0, [pc, #96]	; (8013e38 <dhcp_parse_reply+0x31c>)
 8013dd6:	f003 f9e7 	bl	80171a8 <iprintf>
 8013dda:	f06f 0305 	mvn.w	r3, #5
 8013dde:	e15b      	b.n	8014098 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8013de0:	2301      	movs	r3, #1
 8013de2:	623b      	str	r3, [r7, #32]
        break;
 8013de4:	e045      	b.n	8013e72 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013de6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013dea:	2b04      	cmp	r3, #4
 8013dec:	d009      	beq.n	8013e02 <dhcp_parse_reply+0x2e6>
 8013dee:	4b10      	ldr	r3, [pc, #64]	; (8013e30 <dhcp_parse_reply+0x314>)
 8013df0:	f240 6259 	movw	r2, #1625	; 0x659
 8013df4:	490f      	ldr	r1, [pc, #60]	; (8013e34 <dhcp_parse_reply+0x318>)
 8013df6:	4810      	ldr	r0, [pc, #64]	; (8013e38 <dhcp_parse_reply+0x31c>)
 8013df8:	f003 f9d6 	bl	80171a8 <iprintf>
 8013dfc:	f06f 0305 	mvn.w	r3, #5
 8013e00:	e14a      	b.n	8014098 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8013e02:	2302      	movs	r3, #2
 8013e04:	623b      	str	r3, [r7, #32]
        break;
 8013e06:	e034      	b.n	8013e72 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013e08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013e0c:	2b04      	cmp	r3, #4
 8013e0e:	d009      	beq.n	8013e24 <dhcp_parse_reply+0x308>
 8013e10:	4b07      	ldr	r3, [pc, #28]	; (8013e30 <dhcp_parse_reply+0x314>)
 8013e12:	f240 625d 	movw	r2, #1629	; 0x65d
 8013e16:	4907      	ldr	r1, [pc, #28]	; (8013e34 <dhcp_parse_reply+0x318>)
 8013e18:	4807      	ldr	r0, [pc, #28]	; (8013e38 <dhcp_parse_reply+0x31c>)
 8013e1a:	f003 f9c5 	bl	80171a8 <iprintf>
 8013e1e:	f06f 0305 	mvn.w	r3, #5
 8013e22:	e139      	b.n	8014098 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8013e24:	2304      	movs	r3, #4
 8013e26:	623b      	str	r3, [r7, #32]
        break;
 8013e28:	e023      	b.n	8013e72 <dhcp_parse_reply+0x356>
 8013e2a:	bf00      	nop
 8013e2c:	2000eff8 	.word	0x2000eff8
 8013e30:	0801b484 	.word	0x0801b484
 8013e34:	0801b70c 	.word	0x0801b70c
 8013e38:	0801b4e4 	.word	0x0801b4e4
 8013e3c:	0801b718 	.word	0x0801b718
 8013e40:	0801b72c 	.word	0x0801b72c
 8013e44:	0801b738 	.word	0x0801b738
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013e48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013e4c:	2b04      	cmp	r3, #4
 8013e4e:	d009      	beq.n	8013e64 <dhcp_parse_reply+0x348>
 8013e50:	4b93      	ldr	r3, [pc, #588]	; (80140a0 <dhcp_parse_reply+0x584>)
 8013e52:	f240 6261 	movw	r2, #1633	; 0x661
 8013e56:	4993      	ldr	r1, [pc, #588]	; (80140a4 <dhcp_parse_reply+0x588>)
 8013e58:	4893      	ldr	r0, [pc, #588]	; (80140a8 <dhcp_parse_reply+0x58c>)
 8013e5a:	f003 f9a5 	bl	80171a8 <iprintf>
 8013e5e:	f06f 0305 	mvn.w	r3, #5
 8013e62:	e119      	b.n	8014098 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 8013e64:	2305      	movs	r3, #5
 8013e66:	623b      	str	r3, [r7, #32]
        break;
 8013e68:	e003      	b.n	8013e72 <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 8013e6a:	2300      	movs	r3, #0
 8013e6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8013e70:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8013e72:	7dfb      	ldrb	r3, [r7, #23]
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d103      	bne.n	8013e80 <dhcp_parse_reply+0x364>
      offset++;
 8013e78:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013e7a:	3301      	adds	r3, #1
 8013e7c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8013e7e:	e0a1      	b.n	8013fc4 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8013e80:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013e82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013e86:	4413      	add	r3, r2
 8013e88:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8013e8c:	4293      	cmp	r3, r2
 8013e8e:	dd02      	ble.n	8013e96 <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 8013e90:	f06f 0301 	mvn.w	r3, #1
 8013e94:	e100      	b.n	8014098 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 8013e96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013e9a:	b29a      	uxth	r2, r3
 8013e9c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013e9e:	4413      	add	r3, r2
 8013ea0:	b29b      	uxth	r3, r3
 8013ea2:	3302      	adds	r3, #2
 8013ea4:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8013ea6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	f000 808a 	beq.w	8013fc4 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 8013eb0:	2300      	movs	r3, #0
 8013eb2:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8013eb4:	6a3b      	ldr	r3, [r7, #32]
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	db02      	blt.n	8013ec0 <dhcp_parse_reply+0x3a4>
 8013eba:	6a3b      	ldr	r3, [r7, #32]
 8013ebc:	2b07      	cmp	r3, #7
 8013ebe:	dd06      	ble.n	8013ece <dhcp_parse_reply+0x3b2>
 8013ec0:	4b77      	ldr	r3, [pc, #476]	; (80140a0 <dhcp_parse_reply+0x584>)
 8013ec2:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8013ec6:	4979      	ldr	r1, [pc, #484]	; (80140ac <dhcp_parse_reply+0x590>)
 8013ec8:	4877      	ldr	r0, [pc, #476]	; (80140a8 <dhcp_parse_reply+0x58c>)
 8013eca:	f003 f96d 	bl	80171a8 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8013ece:	4a78      	ldr	r2, [pc, #480]	; (80140b0 <dhcp_parse_reply+0x594>)
 8013ed0:	6a3b      	ldr	r3, [r7, #32]
 8013ed2:	4413      	add	r3, r2
 8013ed4:	781b      	ldrb	r3, [r3, #0]
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d174      	bne.n	8013fc4 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 8013eda:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013ede:	2b04      	cmp	r3, #4
 8013ee0:	bf28      	it	cs
 8013ee2:	2304      	movcs	r3, #4
 8013ee4:	b2db      	uxtb	r3, r3
 8013ee6:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8013ee8:	8bfb      	ldrh	r3, [r7, #30]
 8013eea:	8aba      	ldrh	r2, [r7, #20]
 8013eec:	f107 0108 	add.w	r1, r7, #8
 8013ef0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013ef2:	f7f7 fce5 	bl	800b8c0 <pbuf_copy_partial>
 8013ef6:	4603      	mov	r3, r0
 8013ef8:	461a      	mov	r2, r3
 8013efa:	8abb      	ldrh	r3, [r7, #20]
 8013efc:	4293      	cmp	r3, r2
 8013efe:	d002      	beq.n	8013f06 <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 8013f00:	f06f 0301 	mvn.w	r3, #1
 8013f04:	e0c8      	b.n	8014098 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 8013f06:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013f0a:	2b04      	cmp	r3, #4
 8013f0c:	d933      	bls.n	8013f76 <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8013f0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013f12:	f003 0303 	and.w	r3, r3, #3
 8013f16:	b2db      	uxtb	r3, r3
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d009      	beq.n	8013f30 <dhcp_parse_reply+0x414>
 8013f1c:	4b60      	ldr	r3, [pc, #384]	; (80140a0 <dhcp_parse_reply+0x584>)
 8013f1e:	f240 6281 	movw	r2, #1665	; 0x681
 8013f22:	4964      	ldr	r1, [pc, #400]	; (80140b4 <dhcp_parse_reply+0x598>)
 8013f24:	4860      	ldr	r0, [pc, #384]	; (80140a8 <dhcp_parse_reply+0x58c>)
 8013f26:	f003 f93f 	bl	80171a8 <iprintf>
 8013f2a:	f06f 0305 	mvn.w	r3, #5
 8013f2e:	e0b3      	b.n	8014098 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 8013f30:	4a5f      	ldr	r2, [pc, #380]	; (80140b0 <dhcp_parse_reply+0x594>)
 8013f32:	6a3b      	ldr	r3, [r7, #32]
 8013f34:	4413      	add	r3, r2
 8013f36:	2201      	movs	r2, #1
 8013f38:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8013f3a:	68bb      	ldr	r3, [r7, #8]
 8013f3c:	4618      	mov	r0, r3
 8013f3e:	f7f5 ff16 	bl	8009d6e <lwip_htonl>
 8013f42:	4602      	mov	r2, r0
 8013f44:	495c      	ldr	r1, [pc, #368]	; (80140b8 <dhcp_parse_reply+0x59c>)
 8013f46:	6a3b      	ldr	r3, [r7, #32]
 8013f48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8013f4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013f50:	3b04      	subs	r3, #4
 8013f52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8013f56:	8bfb      	ldrh	r3, [r7, #30]
 8013f58:	3304      	adds	r3, #4
 8013f5a:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8013f5c:	8a7a      	ldrh	r2, [r7, #18]
 8013f5e:	8bfb      	ldrh	r3, [r7, #30]
 8013f60:	429a      	cmp	r2, r3
 8013f62:	d202      	bcs.n	8013f6a <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 8013f64:	f06f 0301 	mvn.w	r3, #1
 8013f68:	e096      	b.n	8014098 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 8013f6a:	8a7b      	ldrh	r3, [r7, #18]
 8013f6c:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8013f6e:	6a3b      	ldr	r3, [r7, #32]
 8013f70:	3301      	adds	r3, #1
 8013f72:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8013f74:	e79e      	b.n	8013eb4 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 8013f76:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013f7a:	2b04      	cmp	r3, #4
 8013f7c:	d106      	bne.n	8013f8c <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 8013f7e:	68bb      	ldr	r3, [r7, #8]
 8013f80:	4618      	mov	r0, r3
 8013f82:	f7f5 fef4 	bl	8009d6e <lwip_htonl>
 8013f86:	4603      	mov	r3, r0
 8013f88:	60bb      	str	r3, [r7, #8]
 8013f8a:	e011      	b.n	8013fb0 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8013f8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013f90:	2b01      	cmp	r3, #1
 8013f92:	d009      	beq.n	8013fa8 <dhcp_parse_reply+0x48c>
 8013f94:	4b42      	ldr	r3, [pc, #264]	; (80140a0 <dhcp_parse_reply+0x584>)
 8013f96:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8013f9a:	4948      	ldr	r1, [pc, #288]	; (80140bc <dhcp_parse_reply+0x5a0>)
 8013f9c:	4842      	ldr	r0, [pc, #264]	; (80140a8 <dhcp_parse_reply+0x58c>)
 8013f9e:	f003 f903 	bl	80171a8 <iprintf>
 8013fa2:	f06f 0305 	mvn.w	r3, #5
 8013fa6:	e077      	b.n	8014098 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 8013fa8:	f107 0308 	add.w	r3, r7, #8
 8013fac:	781b      	ldrb	r3, [r3, #0]
 8013fae:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8013fb0:	4a3f      	ldr	r2, [pc, #252]	; (80140b0 <dhcp_parse_reply+0x594>)
 8013fb2:	6a3b      	ldr	r3, [r7, #32]
 8013fb4:	4413      	add	r3, r2
 8013fb6:	2201      	movs	r2, #1
 8013fb8:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8013fba:	68ba      	ldr	r2, [r7, #8]
 8013fbc:	493e      	ldr	r1, [pc, #248]	; (80140b8 <dhcp_parse_reply+0x59c>)
 8013fbe:	6a3b      	ldr	r3, [r7, #32]
 8013fc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8013fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fc6:	895b      	ldrh	r3, [r3, #10]
 8013fc8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013fca:	429a      	cmp	r2, r3
 8013fcc:	d324      	bcc.n	8014018 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 8013fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fd0:	895b      	ldrh	r3, [r3, #10]
 8013fd2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013fd4:	1ad3      	subs	r3, r2, r3
 8013fd6:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8013fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fda:	895b      	ldrh	r3, [r3, #10]
 8013fdc:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8013fde:	1ad3      	subs	r3, r2, r3
 8013fe0:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8013fe2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013fe4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8013fe6:	429a      	cmp	r2, r3
 8013fe8:	d213      	bcs.n	8014012 <dhcp_parse_reply+0x4f6>
        q = q->next;
 8013fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fec:	681b      	ldr	r3, [r3, #0]
 8013fee:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8013ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d109      	bne.n	801400a <dhcp_parse_reply+0x4ee>
 8013ff6:	4b2a      	ldr	r3, [pc, #168]	; (80140a0 <dhcp_parse_reply+0x584>)
 8013ff8:	f240 629d 	movw	r2, #1693	; 0x69d
 8013ffc:	4930      	ldr	r1, [pc, #192]	; (80140c0 <dhcp_parse_reply+0x5a4>)
 8013ffe:	482a      	ldr	r0, [pc, #168]	; (80140a8 <dhcp_parse_reply+0x58c>)
 8014000:	f003 f8d2 	bl	80171a8 <iprintf>
 8014004:	f06f 0305 	mvn.w	r3, #5
 8014008:	e046      	b.n	8014098 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 801400a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801400c:	685b      	ldr	r3, [r3, #4]
 801400e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014010:	e002      	b.n	8014018 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8014012:	f06f 0301 	mvn.w	r3, #1
 8014016:	e03f      	b.n	8014098 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8014018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801401a:	2b00      	cmp	r3, #0
 801401c:	d00a      	beq.n	8014034 <dhcp_parse_reply+0x518>
 801401e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014020:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8014022:	429a      	cmp	r2, r3
 8014024:	d206      	bcs.n	8014034 <dhcp_parse_reply+0x518>
 8014026:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014028:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801402a:	4413      	add	r3, r2
 801402c:	781b      	ldrb	r3, [r3, #0]
 801402e:	2bff      	cmp	r3, #255	; 0xff
 8014030:	f47f adb7 	bne.w	8013ba2 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8014034:	4b1e      	ldr	r3, [pc, #120]	; (80140b0 <dhcp_parse_reply+0x594>)
 8014036:	781b      	ldrb	r3, [r3, #0]
 8014038:	2b00      	cmp	r3, #0
 801403a:	d018      	beq.n	801406e <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801403c:	4b1e      	ldr	r3, [pc, #120]	; (80140b8 <dhcp_parse_reply+0x59c>)
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8014042:	4b1b      	ldr	r3, [pc, #108]	; (80140b0 <dhcp_parse_reply+0x594>)
 8014044:	2200      	movs	r2, #0
 8014046:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8014048:	68fb      	ldr	r3, [r7, #12]
 801404a:	2b01      	cmp	r3, #1
 801404c:	d102      	bne.n	8014054 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 801404e:	2301      	movs	r3, #1
 8014050:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014052:	e00c      	b.n	801406e <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8014054:	68fb      	ldr	r3, [r7, #12]
 8014056:	2b02      	cmp	r3, #2
 8014058:	d102      	bne.n	8014060 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 801405a:	2301      	movs	r3, #1
 801405c:	62bb      	str	r3, [r7, #40]	; 0x28
 801405e:	e006      	b.n	801406e <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	2b03      	cmp	r3, #3
 8014064:	d103      	bne.n	801406e <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 8014066:	2301      	movs	r3, #1
 8014068:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 801406a:	2301      	movs	r3, #1
 801406c:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801406e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014070:	2b00      	cmp	r3, #0
 8014072:	d006      	beq.n	8014082 <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8014074:	2300      	movs	r3, #0
 8014076:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8014078:	236c      	movs	r3, #108	; 0x6c
 801407a:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801407c:	23ec      	movs	r3, #236	; 0xec
 801407e:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8014080:	e569      	b.n	8013b56 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8014082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014084:	2b00      	cmp	r3, #0
 8014086:	d006      	beq.n	8014096 <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 8014088:	2300      	movs	r3, #0
 801408a:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 801408c:	232c      	movs	r3, #44	; 0x2c
 801408e:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8014090:	236c      	movs	r3, #108	; 0x6c
 8014092:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8014094:	e55f      	b.n	8013b56 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8014096:	2300      	movs	r3, #0
}
 8014098:	4618      	mov	r0, r3
 801409a:	3740      	adds	r7, #64	; 0x40
 801409c:	46bd      	mov	sp, r7
 801409e:	bd80      	pop	{r7, pc}
 80140a0:	0801b484 	.word	0x0801b484
 80140a4:	0801b70c 	.word	0x0801b70c
 80140a8:	0801b4e4 	.word	0x0801b4e4
 80140ac:	0801b750 	.word	0x0801b750
 80140b0:	2000eff8 	.word	0x2000eff8
 80140b4:	0801b764 	.word	0x0801b764
 80140b8:	2000f000 	.word	0x2000f000
 80140bc:	0801b77c 	.word	0x0801b77c
 80140c0:	0801b790 	.word	0x0801b790

080140c4 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80140c4:	b580      	push	{r7, lr}
 80140c6:	b08a      	sub	sp, #40	; 0x28
 80140c8:	af00      	add	r7, sp, #0
 80140ca:	60f8      	str	r0, [r7, #12]
 80140cc:	60b9      	str	r1, [r7, #8]
 80140ce:	607a      	str	r2, [r7, #4]
 80140d0:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80140d2:	4b60      	ldr	r3, [pc, #384]	; (8014254 <dhcp_recv+0x190>)
 80140d4:	685b      	ldr	r3, [r3, #4]
 80140d6:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80140d8:	6a3b      	ldr	r3, [r7, #32]
 80140da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140dc:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	685b      	ldr	r3, [r3, #4]
 80140e2:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80140e4:	69fb      	ldr	r3, [r7, #28]
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	f000 809d 	beq.w	8014226 <dhcp_recv+0x162>
 80140ec:	69fb      	ldr	r3, [r7, #28]
 80140ee:	791b      	ldrb	r3, [r3, #4]
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	f000 8098 	beq.w	8014226 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	895b      	ldrh	r3, [r3, #10]
 80140fa:	2b2b      	cmp	r3, #43	; 0x2b
 80140fc:	f240 8095 	bls.w	801422a <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8014100:	69bb      	ldr	r3, [r7, #24]
 8014102:	781b      	ldrb	r3, [r3, #0]
 8014104:	2b02      	cmp	r3, #2
 8014106:	f040 8092 	bne.w	801422e <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801410a:	2300      	movs	r3, #0
 801410c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014110:	e012      	b.n	8014138 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8014112:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014116:	6a3a      	ldr	r2, [r7, #32]
 8014118:	4413      	add	r3, r2
 801411a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801411e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014122:	69b9      	ldr	r1, [r7, #24]
 8014124:	440b      	add	r3, r1
 8014126:	7f1b      	ldrb	r3, [r3, #28]
 8014128:	429a      	cmp	r2, r3
 801412a:	f040 8082 	bne.w	8014232 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801412e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014132:	3301      	adds	r3, #1
 8014134:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014138:	6a3b      	ldr	r3, [r7, #32]
 801413a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801413e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8014142:	429a      	cmp	r2, r3
 8014144:	d203      	bcs.n	801414e <dhcp_recv+0x8a>
 8014146:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801414a:	2b05      	cmp	r3, #5
 801414c:	d9e1      	bls.n	8014112 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801414e:	69bb      	ldr	r3, [r7, #24]
 8014150:	685b      	ldr	r3, [r3, #4]
 8014152:	4618      	mov	r0, r3
 8014154:	f7f5 fe0b 	bl	8009d6e <lwip_htonl>
 8014158:	4602      	mov	r2, r0
 801415a:	69fb      	ldr	r3, [r7, #28]
 801415c:	681b      	ldr	r3, [r3, #0]
 801415e:	429a      	cmp	r2, r3
 8014160:	d169      	bne.n	8014236 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8014162:	69f9      	ldr	r1, [r7, #28]
 8014164:	6878      	ldr	r0, [r7, #4]
 8014166:	f7ff fcd9 	bl	8013b1c <dhcp_parse_reply>
 801416a:	4603      	mov	r3, r0
 801416c:	2b00      	cmp	r3, #0
 801416e:	d164      	bne.n	801423a <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8014170:	4b39      	ldr	r3, [pc, #228]	; (8014258 <dhcp_recv+0x194>)
 8014172:	785b      	ldrb	r3, [r3, #1]
 8014174:	2b00      	cmp	r3, #0
 8014176:	d062      	beq.n	801423e <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	685b      	ldr	r3, [r3, #4]
 801417c:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801417e:	4b37      	ldr	r3, [pc, #220]	; (801425c <dhcp_recv+0x198>)
 8014180:	685b      	ldr	r3, [r3, #4]
 8014182:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8014184:	7cfb      	ldrb	r3, [r7, #19]
 8014186:	2b05      	cmp	r3, #5
 8014188:	d12a      	bne.n	80141e0 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801418a:	69fb      	ldr	r3, [r7, #28]
 801418c:	795b      	ldrb	r3, [r3, #5]
 801418e:	2b01      	cmp	r3, #1
 8014190:	d112      	bne.n	80141b8 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8014192:	6979      	ldr	r1, [r7, #20]
 8014194:	6a38      	ldr	r0, [r7, #32]
 8014196:	f7fe fe17 	bl	8012dc8 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801419a:	6a3b      	ldr	r3, [r7, #32]
 801419c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80141a0:	f003 0308 	and.w	r3, r3, #8
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d003      	beq.n	80141b0 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 80141a8:	6a38      	ldr	r0, [r7, #32]
 80141aa:	f7fe fb87 	bl	80128bc <dhcp_check>
 80141ae:	e049      	b.n	8014244 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80141b0:	6a38      	ldr	r0, [r7, #32]
 80141b2:	f7ff f867 	bl	8013284 <dhcp_bind>
 80141b6:	e045      	b.n	8014244 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80141b8:	69fb      	ldr	r3, [r7, #28]
 80141ba:	795b      	ldrb	r3, [r3, #5]
 80141bc:	2b03      	cmp	r3, #3
 80141be:	d007      	beq.n	80141d0 <dhcp_recv+0x10c>
 80141c0:	69fb      	ldr	r3, [r7, #28]
 80141c2:	795b      	ldrb	r3, [r3, #5]
 80141c4:	2b04      	cmp	r3, #4
 80141c6:	d003      	beq.n	80141d0 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 80141c8:	69fb      	ldr	r3, [r7, #28]
 80141ca:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80141cc:	2b05      	cmp	r3, #5
 80141ce:	d139      	bne.n	8014244 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 80141d0:	6979      	ldr	r1, [r7, #20]
 80141d2:	6a38      	ldr	r0, [r7, #32]
 80141d4:	f7fe fdf8 	bl	8012dc8 <dhcp_handle_ack>
      dhcp_bind(netif);
 80141d8:	6a38      	ldr	r0, [r7, #32]
 80141da:	f7ff f853 	bl	8013284 <dhcp_bind>
 80141de:	e031      	b.n	8014244 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80141e0:	7cfb      	ldrb	r3, [r7, #19]
 80141e2:	2b06      	cmp	r3, #6
 80141e4:	d113      	bne.n	801420e <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80141e6:	69fb      	ldr	r3, [r7, #28]
 80141e8:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80141ea:	2b03      	cmp	r3, #3
 80141ec:	d00b      	beq.n	8014206 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80141ee:	69fb      	ldr	r3, [r7, #28]
 80141f0:	795b      	ldrb	r3, [r3, #5]
 80141f2:	2b01      	cmp	r3, #1
 80141f4:	d007      	beq.n	8014206 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80141f6:	69fb      	ldr	r3, [r7, #28]
 80141f8:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80141fa:	2b04      	cmp	r3, #4
 80141fc:	d003      	beq.n	8014206 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80141fe:	69fb      	ldr	r3, [r7, #28]
 8014200:	795b      	ldrb	r3, [r3, #5]
 8014202:	2b05      	cmp	r3, #5
 8014204:	d103      	bne.n	801420e <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8014206:	6a38      	ldr	r0, [r7, #32]
 8014208:	f7fe fb3e 	bl	8012888 <dhcp_handle_nak>
 801420c:	e01a      	b.n	8014244 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801420e:	7cfb      	ldrb	r3, [r7, #19]
 8014210:	2b02      	cmp	r3, #2
 8014212:	d116      	bne.n	8014242 <dhcp_recv+0x17e>
 8014214:	69fb      	ldr	r3, [r7, #28]
 8014216:	795b      	ldrb	r3, [r3, #5]
 8014218:	2b06      	cmp	r3, #6
 801421a:	d112      	bne.n	8014242 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801421c:	6979      	ldr	r1, [r7, #20]
 801421e:	6a38      	ldr	r0, [r7, #32]
 8014220:	f7fe fb80 	bl	8012924 <dhcp_handle_offer>
 8014224:	e00e      	b.n	8014244 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8014226:	bf00      	nop
 8014228:	e00c      	b.n	8014244 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801422a:	bf00      	nop
 801422c:	e00a      	b.n	8014244 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801422e:	bf00      	nop
 8014230:	e008      	b.n	8014244 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8014232:	bf00      	nop
 8014234:	e006      	b.n	8014244 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8014236:	bf00      	nop
 8014238:	e004      	b.n	8014244 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801423a:	bf00      	nop
 801423c:	e002      	b.n	8014244 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801423e:	bf00      	nop
 8014240:	e000      	b.n	8014244 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8014242:	bf00      	nop
  pbuf_free(p);
 8014244:	6878      	ldr	r0, [r7, #4]
 8014246:	f7f7 f935 	bl	800b4b4 <pbuf_free>
}
 801424a:	bf00      	nop
 801424c:	3728      	adds	r7, #40	; 0x28
 801424e:	46bd      	mov	sp, r7
 8014250:	bd80      	pop	{r7, pc}
 8014252:	bf00      	nop
 8014254:	2000b8a8 	.word	0x2000b8a8
 8014258:	2000eff8 	.word	0x2000eff8
 801425c:	2000f000 	.word	0x2000f000

08014260 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8014260:	b580      	push	{r7, lr}
 8014262:	b088      	sub	sp, #32
 8014264:	af00      	add	r7, sp, #0
 8014266:	60f8      	str	r0, [r7, #12]
 8014268:	60b9      	str	r1, [r7, #8]
 801426a:	603b      	str	r3, [r7, #0]
 801426c:	4613      	mov	r3, r2
 801426e:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	2b00      	cmp	r3, #0
 8014274:	d108      	bne.n	8014288 <dhcp_create_msg+0x28>
 8014276:	4b5f      	ldr	r3, [pc, #380]	; (80143f4 <dhcp_create_msg+0x194>)
 8014278:	f240 7269 	movw	r2, #1897	; 0x769
 801427c:	495e      	ldr	r1, [pc, #376]	; (80143f8 <dhcp_create_msg+0x198>)
 801427e:	485f      	ldr	r0, [pc, #380]	; (80143fc <dhcp_create_msg+0x19c>)
 8014280:	f002 ff92 	bl	80171a8 <iprintf>
 8014284:	2300      	movs	r3, #0
 8014286:	e0b1      	b.n	80143ec <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8014288:	68bb      	ldr	r3, [r7, #8]
 801428a:	2b00      	cmp	r3, #0
 801428c:	d108      	bne.n	80142a0 <dhcp_create_msg+0x40>
 801428e:	4b59      	ldr	r3, [pc, #356]	; (80143f4 <dhcp_create_msg+0x194>)
 8014290:	f240 726a 	movw	r2, #1898	; 0x76a
 8014294:	495a      	ldr	r1, [pc, #360]	; (8014400 <dhcp_create_msg+0x1a0>)
 8014296:	4859      	ldr	r0, [pc, #356]	; (80143fc <dhcp_create_msg+0x19c>)
 8014298:	f002 ff86 	bl	80171a8 <iprintf>
 801429c:	2300      	movs	r3, #0
 801429e:	e0a5      	b.n	80143ec <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80142a0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80142a4:	f44f 719a 	mov.w	r1, #308	; 0x134
 80142a8:	2036      	movs	r0, #54	; 0x36
 80142aa:	f7f6 fe1f 	bl	800aeec <pbuf_alloc>
 80142ae:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 80142b0:	69bb      	ldr	r3, [r7, #24]
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d101      	bne.n	80142ba <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80142b6:	2300      	movs	r3, #0
 80142b8:	e098      	b.n	80143ec <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80142ba:	69bb      	ldr	r3, [r7, #24]
 80142bc:	895b      	ldrh	r3, [r3, #10]
 80142be:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80142c2:	d206      	bcs.n	80142d2 <dhcp_create_msg+0x72>
 80142c4:	4b4b      	ldr	r3, [pc, #300]	; (80143f4 <dhcp_create_msg+0x194>)
 80142c6:	f240 7271 	movw	r2, #1905	; 0x771
 80142ca:	494e      	ldr	r1, [pc, #312]	; (8014404 <dhcp_create_msg+0x1a4>)
 80142cc:	484b      	ldr	r0, [pc, #300]	; (80143fc <dhcp_create_msg+0x19c>)
 80142ce:	f002 ff6b 	bl	80171a8 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80142d2:	79fb      	ldrb	r3, [r7, #7]
 80142d4:	2b03      	cmp	r3, #3
 80142d6:	d103      	bne.n	80142e0 <dhcp_create_msg+0x80>
 80142d8:	68bb      	ldr	r3, [r7, #8]
 80142da:	795b      	ldrb	r3, [r3, #5]
 80142dc:	2b03      	cmp	r3, #3
 80142de:	d10d      	bne.n	80142fc <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80142e0:	68bb      	ldr	r3, [r7, #8]
 80142e2:	799b      	ldrb	r3, [r3, #6]
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d105      	bne.n	80142f4 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80142e8:	f002 ffec 	bl	80172c4 <rand>
 80142ec:	4603      	mov	r3, r0
 80142ee:	461a      	mov	r2, r3
 80142f0:	4b45      	ldr	r3, [pc, #276]	; (8014408 <dhcp_create_msg+0x1a8>)
 80142f2:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80142f4:	4b44      	ldr	r3, [pc, #272]	; (8014408 <dhcp_create_msg+0x1a8>)
 80142f6:	681a      	ldr	r2, [r3, #0]
 80142f8:	68bb      	ldr	r3, [r7, #8]
 80142fa:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80142fc:	69bb      	ldr	r3, [r7, #24]
 80142fe:	685b      	ldr	r3, [r3, #4]
 8014300:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8014302:	f44f 729a 	mov.w	r2, #308	; 0x134
 8014306:	2100      	movs	r1, #0
 8014308:	6978      	ldr	r0, [r7, #20]
 801430a:	f002 feea 	bl	80170e2 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801430e:	697b      	ldr	r3, [r7, #20]
 8014310:	2201      	movs	r2, #1
 8014312:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8014314:	697b      	ldr	r3, [r7, #20]
 8014316:	2201      	movs	r2, #1
 8014318:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801431a:	68fb      	ldr	r3, [r7, #12]
 801431c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8014320:	697b      	ldr	r3, [r7, #20]
 8014322:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8014324:	68bb      	ldr	r3, [r7, #8]
 8014326:	681b      	ldr	r3, [r3, #0]
 8014328:	4618      	mov	r0, r3
 801432a:	f7f5 fd20 	bl	8009d6e <lwip_htonl>
 801432e:	4602      	mov	r2, r0
 8014330:	697b      	ldr	r3, [r7, #20]
 8014332:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8014334:	79fb      	ldrb	r3, [r7, #7]
 8014336:	2b08      	cmp	r3, #8
 8014338:	d010      	beq.n	801435c <dhcp_create_msg+0xfc>
 801433a:	79fb      	ldrb	r3, [r7, #7]
 801433c:	2b04      	cmp	r3, #4
 801433e:	d00d      	beq.n	801435c <dhcp_create_msg+0xfc>
 8014340:	79fb      	ldrb	r3, [r7, #7]
 8014342:	2b07      	cmp	r3, #7
 8014344:	d00a      	beq.n	801435c <dhcp_create_msg+0xfc>
 8014346:	79fb      	ldrb	r3, [r7, #7]
 8014348:	2b03      	cmp	r3, #3
 801434a:	d10c      	bne.n	8014366 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801434c:	68bb      	ldr	r3, [r7, #8]
 801434e:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8014350:	2b05      	cmp	r3, #5
 8014352:	d003      	beq.n	801435c <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8014354:	68bb      	ldr	r3, [r7, #8]
 8014356:	795b      	ldrb	r3, [r3, #5]
 8014358:	2b04      	cmp	r3, #4
 801435a:	d104      	bne.n	8014366 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801435c:	68fb      	ldr	r3, [r7, #12]
 801435e:	3304      	adds	r3, #4
 8014360:	681a      	ldr	r2, [r3, #0]
 8014362:	697b      	ldr	r3, [r7, #20]
 8014364:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8014366:	2300      	movs	r3, #0
 8014368:	83fb      	strh	r3, [r7, #30]
 801436a:	e00c      	b.n	8014386 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801436c:	8bfa      	ldrh	r2, [r7, #30]
 801436e:	8bfb      	ldrh	r3, [r7, #30]
 8014370:	68f9      	ldr	r1, [r7, #12]
 8014372:	440a      	add	r2, r1
 8014374:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8014378:	697a      	ldr	r2, [r7, #20]
 801437a:	4413      	add	r3, r2
 801437c:	460a      	mov	r2, r1
 801437e:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8014380:	8bfb      	ldrh	r3, [r7, #30]
 8014382:	3301      	adds	r3, #1
 8014384:	83fb      	strh	r3, [r7, #30]
 8014386:	8bfb      	ldrh	r3, [r7, #30]
 8014388:	2b05      	cmp	r3, #5
 801438a:	d9ef      	bls.n	801436c <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801438c:	697b      	ldr	r3, [r7, #20]
 801438e:	2200      	movs	r2, #0
 8014390:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8014394:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8014398:	2200      	movs	r2, #0
 801439a:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801439e:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80143a2:	2200      	movs	r2, #0
 80143a4:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80143a8:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80143ac:	2200      	movs	r2, #0
 80143ae:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80143b2:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80143b6:	697b      	ldr	r3, [r7, #20]
 80143b8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80143bc:	2301      	movs	r3, #1
 80143be:	2235      	movs	r2, #53	; 0x35
 80143c0:	2000      	movs	r0, #0
 80143c2:	f7ff fadb 	bl	801397c <dhcp_option>
 80143c6:	4603      	mov	r3, r0
 80143c8:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80143ca:	697b      	ldr	r3, [r7, #20]
 80143cc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80143d0:	79fa      	ldrb	r2, [r7, #7]
 80143d2:	8a7b      	ldrh	r3, [r7, #18]
 80143d4:	4618      	mov	r0, r3
 80143d6:	f7ff fb05 	bl	80139e4 <dhcp_option_byte>
 80143da:	4603      	mov	r3, r0
 80143dc:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80143de:	683b      	ldr	r3, [r7, #0]
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d002      	beq.n	80143ea <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80143e4:	683b      	ldr	r3, [r7, #0]
 80143e6:	8a7a      	ldrh	r2, [r7, #18]
 80143e8:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80143ea:	69bb      	ldr	r3, [r7, #24]
}
 80143ec:	4618      	mov	r0, r3
 80143ee:	3720      	adds	r7, #32
 80143f0:	46bd      	mov	sp, r7
 80143f2:	bd80      	pop	{r7, pc}
 80143f4:	0801b484 	.word	0x0801b484
 80143f8:	0801b7a4 	.word	0x0801b7a4
 80143fc:	0801b4e4 	.word	0x0801b4e4
 8014400:	0801b7c4 	.word	0x0801b7c4
 8014404:	0801b7e4 	.word	0x0801b7e4
 8014408:	20008594 	.word	0x20008594

0801440c <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801440c:	b580      	push	{r7, lr}
 801440e:	b084      	sub	sp, #16
 8014410:	af00      	add	r7, sp, #0
 8014412:	4603      	mov	r3, r0
 8014414:	60b9      	str	r1, [r7, #8]
 8014416:	607a      	str	r2, [r7, #4]
 8014418:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801441a:	89fb      	ldrh	r3, [r7, #14]
 801441c:	1c5a      	adds	r2, r3, #1
 801441e:	81fa      	strh	r2, [r7, #14]
 8014420:	461a      	mov	r2, r3
 8014422:	68bb      	ldr	r3, [r7, #8]
 8014424:	4413      	add	r3, r2
 8014426:	22ff      	movs	r2, #255	; 0xff
 8014428:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801442a:	e007      	b.n	801443c <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801442c:	89fb      	ldrh	r3, [r7, #14]
 801442e:	1c5a      	adds	r2, r3, #1
 8014430:	81fa      	strh	r2, [r7, #14]
 8014432:	461a      	mov	r2, r3
 8014434:	68bb      	ldr	r3, [r7, #8]
 8014436:	4413      	add	r3, r2
 8014438:	2200      	movs	r2, #0
 801443a:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801443c:	89fb      	ldrh	r3, [r7, #14]
 801443e:	2b43      	cmp	r3, #67	; 0x43
 8014440:	d904      	bls.n	801444c <dhcp_option_trailer+0x40>
 8014442:	89fb      	ldrh	r3, [r7, #14]
 8014444:	f003 0303 	and.w	r3, r3, #3
 8014448:	2b00      	cmp	r3, #0
 801444a:	d002      	beq.n	8014452 <dhcp_option_trailer+0x46>
 801444c:	89fb      	ldrh	r3, [r7, #14]
 801444e:	2b43      	cmp	r3, #67	; 0x43
 8014450:	d9ec      	bls.n	801442c <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8014452:	89fb      	ldrh	r3, [r7, #14]
 8014454:	33f0      	adds	r3, #240	; 0xf0
 8014456:	b29b      	uxth	r3, r3
 8014458:	4619      	mov	r1, r3
 801445a:	6878      	ldr	r0, [r7, #4]
 801445c:	f7f6 fea4 	bl	800b1a8 <pbuf_realloc>
}
 8014460:	bf00      	nop
 8014462:	3710      	adds	r7, #16
 8014464:	46bd      	mov	sp, r7
 8014466:	bd80      	pop	{r7, pc}

08014468 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8014468:	b480      	push	{r7}
 801446a:	b085      	sub	sp, #20
 801446c:	af00      	add	r7, sp, #0
 801446e:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	2b00      	cmp	r3, #0
 8014474:	d017      	beq.n	80144a6 <dhcp_supplied_address+0x3e>
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801447a:	2b00      	cmp	r3, #0
 801447c:	d013      	beq.n	80144a6 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014482:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8014484:	68fb      	ldr	r3, [r7, #12]
 8014486:	795b      	ldrb	r3, [r3, #5]
 8014488:	2b0a      	cmp	r3, #10
 801448a:	d007      	beq.n	801449c <dhcp_supplied_address+0x34>
 801448c:	68fb      	ldr	r3, [r7, #12]
 801448e:	795b      	ldrb	r3, [r3, #5]
 8014490:	2b05      	cmp	r3, #5
 8014492:	d003      	beq.n	801449c <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8014494:	68fb      	ldr	r3, [r7, #12]
 8014496:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8014498:	2b04      	cmp	r3, #4
 801449a:	d101      	bne.n	80144a0 <dhcp_supplied_address+0x38>
 801449c:	2301      	movs	r3, #1
 801449e:	e000      	b.n	80144a2 <dhcp_supplied_address+0x3a>
 80144a0:	2300      	movs	r3, #0
 80144a2:	b2db      	uxtb	r3, r3
 80144a4:	e000      	b.n	80144a8 <dhcp_supplied_address+0x40>
  }
  return 0;
 80144a6:	2300      	movs	r3, #0
}
 80144a8:	4618      	mov	r0, r3
 80144aa:	3714      	adds	r7, #20
 80144ac:	46bd      	mov	sp, r7
 80144ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144b2:	4770      	bx	lr

080144b4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80144b4:	b580      	push	{r7, lr}
 80144b6:	b082      	sub	sp, #8
 80144b8:	af00      	add	r7, sp, #0
 80144ba:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80144bc:	4915      	ldr	r1, [pc, #84]	; (8014514 <etharp_free_entry+0x60>)
 80144be:	687a      	ldr	r2, [r7, #4]
 80144c0:	4613      	mov	r3, r2
 80144c2:	005b      	lsls	r3, r3, #1
 80144c4:	4413      	add	r3, r2
 80144c6:	00db      	lsls	r3, r3, #3
 80144c8:	440b      	add	r3, r1
 80144ca:	681b      	ldr	r3, [r3, #0]
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d013      	beq.n	80144f8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80144d0:	4910      	ldr	r1, [pc, #64]	; (8014514 <etharp_free_entry+0x60>)
 80144d2:	687a      	ldr	r2, [r7, #4]
 80144d4:	4613      	mov	r3, r2
 80144d6:	005b      	lsls	r3, r3, #1
 80144d8:	4413      	add	r3, r2
 80144da:	00db      	lsls	r3, r3, #3
 80144dc:	440b      	add	r3, r1
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	4618      	mov	r0, r3
 80144e2:	f7f6 ffe7 	bl	800b4b4 <pbuf_free>
    arp_table[i].q = NULL;
 80144e6:	490b      	ldr	r1, [pc, #44]	; (8014514 <etharp_free_entry+0x60>)
 80144e8:	687a      	ldr	r2, [r7, #4]
 80144ea:	4613      	mov	r3, r2
 80144ec:	005b      	lsls	r3, r3, #1
 80144ee:	4413      	add	r3, r2
 80144f0:	00db      	lsls	r3, r3, #3
 80144f2:	440b      	add	r3, r1
 80144f4:	2200      	movs	r2, #0
 80144f6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80144f8:	4906      	ldr	r1, [pc, #24]	; (8014514 <etharp_free_entry+0x60>)
 80144fa:	687a      	ldr	r2, [r7, #4]
 80144fc:	4613      	mov	r3, r2
 80144fe:	005b      	lsls	r3, r3, #1
 8014500:	4413      	add	r3, r2
 8014502:	00db      	lsls	r3, r3, #3
 8014504:	440b      	add	r3, r1
 8014506:	3314      	adds	r3, #20
 8014508:	2200      	movs	r2, #0
 801450a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801450c:	bf00      	nop
 801450e:	3708      	adds	r7, #8
 8014510:	46bd      	mov	sp, r7
 8014512:	bd80      	pop	{r7, pc}
 8014514:	20008598 	.word	0x20008598

08014518 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8014518:	b580      	push	{r7, lr}
 801451a:	b082      	sub	sp, #8
 801451c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801451e:	2300      	movs	r3, #0
 8014520:	607b      	str	r3, [r7, #4]
 8014522:	e096      	b.n	8014652 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8014524:	494f      	ldr	r1, [pc, #316]	; (8014664 <etharp_tmr+0x14c>)
 8014526:	687a      	ldr	r2, [r7, #4]
 8014528:	4613      	mov	r3, r2
 801452a:	005b      	lsls	r3, r3, #1
 801452c:	4413      	add	r3, r2
 801452e:	00db      	lsls	r3, r3, #3
 8014530:	440b      	add	r3, r1
 8014532:	3314      	adds	r3, #20
 8014534:	781b      	ldrb	r3, [r3, #0]
 8014536:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8014538:	78fb      	ldrb	r3, [r7, #3]
 801453a:	2b00      	cmp	r3, #0
 801453c:	f000 8086 	beq.w	801464c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8014540:	4948      	ldr	r1, [pc, #288]	; (8014664 <etharp_tmr+0x14c>)
 8014542:	687a      	ldr	r2, [r7, #4]
 8014544:	4613      	mov	r3, r2
 8014546:	005b      	lsls	r3, r3, #1
 8014548:	4413      	add	r3, r2
 801454a:	00db      	lsls	r3, r3, #3
 801454c:	440b      	add	r3, r1
 801454e:	3312      	adds	r3, #18
 8014550:	881b      	ldrh	r3, [r3, #0]
 8014552:	3301      	adds	r3, #1
 8014554:	b298      	uxth	r0, r3
 8014556:	4943      	ldr	r1, [pc, #268]	; (8014664 <etharp_tmr+0x14c>)
 8014558:	687a      	ldr	r2, [r7, #4]
 801455a:	4613      	mov	r3, r2
 801455c:	005b      	lsls	r3, r3, #1
 801455e:	4413      	add	r3, r2
 8014560:	00db      	lsls	r3, r3, #3
 8014562:	440b      	add	r3, r1
 8014564:	3312      	adds	r3, #18
 8014566:	4602      	mov	r2, r0
 8014568:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801456a:	493e      	ldr	r1, [pc, #248]	; (8014664 <etharp_tmr+0x14c>)
 801456c:	687a      	ldr	r2, [r7, #4]
 801456e:	4613      	mov	r3, r2
 8014570:	005b      	lsls	r3, r3, #1
 8014572:	4413      	add	r3, r2
 8014574:	00db      	lsls	r3, r3, #3
 8014576:	440b      	add	r3, r1
 8014578:	3312      	adds	r3, #18
 801457a:	881b      	ldrh	r3, [r3, #0]
 801457c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014580:	d215      	bcs.n	80145ae <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014582:	4938      	ldr	r1, [pc, #224]	; (8014664 <etharp_tmr+0x14c>)
 8014584:	687a      	ldr	r2, [r7, #4]
 8014586:	4613      	mov	r3, r2
 8014588:	005b      	lsls	r3, r3, #1
 801458a:	4413      	add	r3, r2
 801458c:	00db      	lsls	r3, r3, #3
 801458e:	440b      	add	r3, r1
 8014590:	3314      	adds	r3, #20
 8014592:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014594:	2b01      	cmp	r3, #1
 8014596:	d10e      	bne.n	80145b6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014598:	4932      	ldr	r1, [pc, #200]	; (8014664 <etharp_tmr+0x14c>)
 801459a:	687a      	ldr	r2, [r7, #4]
 801459c:	4613      	mov	r3, r2
 801459e:	005b      	lsls	r3, r3, #1
 80145a0:	4413      	add	r3, r2
 80145a2:	00db      	lsls	r3, r3, #3
 80145a4:	440b      	add	r3, r1
 80145a6:	3312      	adds	r3, #18
 80145a8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80145aa:	2b04      	cmp	r3, #4
 80145ac:	d903      	bls.n	80145b6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80145ae:	6878      	ldr	r0, [r7, #4]
 80145b0:	f7ff ff80 	bl	80144b4 <etharp_free_entry>
 80145b4:	e04a      	b.n	801464c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80145b6:	492b      	ldr	r1, [pc, #172]	; (8014664 <etharp_tmr+0x14c>)
 80145b8:	687a      	ldr	r2, [r7, #4]
 80145ba:	4613      	mov	r3, r2
 80145bc:	005b      	lsls	r3, r3, #1
 80145be:	4413      	add	r3, r2
 80145c0:	00db      	lsls	r3, r3, #3
 80145c2:	440b      	add	r3, r1
 80145c4:	3314      	adds	r3, #20
 80145c6:	781b      	ldrb	r3, [r3, #0]
 80145c8:	2b03      	cmp	r3, #3
 80145ca:	d10a      	bne.n	80145e2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80145cc:	4925      	ldr	r1, [pc, #148]	; (8014664 <etharp_tmr+0x14c>)
 80145ce:	687a      	ldr	r2, [r7, #4]
 80145d0:	4613      	mov	r3, r2
 80145d2:	005b      	lsls	r3, r3, #1
 80145d4:	4413      	add	r3, r2
 80145d6:	00db      	lsls	r3, r3, #3
 80145d8:	440b      	add	r3, r1
 80145da:	3314      	adds	r3, #20
 80145dc:	2204      	movs	r2, #4
 80145de:	701a      	strb	r2, [r3, #0]
 80145e0:	e034      	b.n	801464c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80145e2:	4920      	ldr	r1, [pc, #128]	; (8014664 <etharp_tmr+0x14c>)
 80145e4:	687a      	ldr	r2, [r7, #4]
 80145e6:	4613      	mov	r3, r2
 80145e8:	005b      	lsls	r3, r3, #1
 80145ea:	4413      	add	r3, r2
 80145ec:	00db      	lsls	r3, r3, #3
 80145ee:	440b      	add	r3, r1
 80145f0:	3314      	adds	r3, #20
 80145f2:	781b      	ldrb	r3, [r3, #0]
 80145f4:	2b04      	cmp	r3, #4
 80145f6:	d10a      	bne.n	801460e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80145f8:	491a      	ldr	r1, [pc, #104]	; (8014664 <etharp_tmr+0x14c>)
 80145fa:	687a      	ldr	r2, [r7, #4]
 80145fc:	4613      	mov	r3, r2
 80145fe:	005b      	lsls	r3, r3, #1
 8014600:	4413      	add	r3, r2
 8014602:	00db      	lsls	r3, r3, #3
 8014604:	440b      	add	r3, r1
 8014606:	3314      	adds	r3, #20
 8014608:	2202      	movs	r2, #2
 801460a:	701a      	strb	r2, [r3, #0]
 801460c:	e01e      	b.n	801464c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801460e:	4915      	ldr	r1, [pc, #84]	; (8014664 <etharp_tmr+0x14c>)
 8014610:	687a      	ldr	r2, [r7, #4]
 8014612:	4613      	mov	r3, r2
 8014614:	005b      	lsls	r3, r3, #1
 8014616:	4413      	add	r3, r2
 8014618:	00db      	lsls	r3, r3, #3
 801461a:	440b      	add	r3, r1
 801461c:	3314      	adds	r3, #20
 801461e:	781b      	ldrb	r3, [r3, #0]
 8014620:	2b01      	cmp	r3, #1
 8014622:	d113      	bne.n	801464c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8014624:	490f      	ldr	r1, [pc, #60]	; (8014664 <etharp_tmr+0x14c>)
 8014626:	687a      	ldr	r2, [r7, #4]
 8014628:	4613      	mov	r3, r2
 801462a:	005b      	lsls	r3, r3, #1
 801462c:	4413      	add	r3, r2
 801462e:	00db      	lsls	r3, r3, #3
 8014630:	440b      	add	r3, r1
 8014632:	3308      	adds	r3, #8
 8014634:	6818      	ldr	r0, [r3, #0]
 8014636:	687a      	ldr	r2, [r7, #4]
 8014638:	4613      	mov	r3, r2
 801463a:	005b      	lsls	r3, r3, #1
 801463c:	4413      	add	r3, r2
 801463e:	00db      	lsls	r3, r3, #3
 8014640:	4a08      	ldr	r2, [pc, #32]	; (8014664 <etharp_tmr+0x14c>)
 8014642:	4413      	add	r3, r2
 8014644:	3304      	adds	r3, #4
 8014646:	4619      	mov	r1, r3
 8014648:	f000 fe72 	bl	8015330 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	3301      	adds	r3, #1
 8014650:	607b      	str	r3, [r7, #4]
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	2b09      	cmp	r3, #9
 8014656:	f77f af65 	ble.w	8014524 <etharp_tmr+0xc>
      }
    }
  }
}
 801465a:	bf00      	nop
 801465c:	bf00      	nop
 801465e:	3708      	adds	r7, #8
 8014660:	46bd      	mov	sp, r7
 8014662:	bd80      	pop	{r7, pc}
 8014664:	20008598 	.word	0x20008598

08014668 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8014668:	b580      	push	{r7, lr}
 801466a:	b08a      	sub	sp, #40	; 0x28
 801466c:	af00      	add	r7, sp, #0
 801466e:	60f8      	str	r0, [r7, #12]
 8014670:	460b      	mov	r3, r1
 8014672:	607a      	str	r2, [r7, #4]
 8014674:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8014676:	230a      	movs	r3, #10
 8014678:	84fb      	strh	r3, [r7, #38]	; 0x26
 801467a:	230a      	movs	r3, #10
 801467c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801467e:	230a      	movs	r3, #10
 8014680:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8014682:	2300      	movs	r3, #0
 8014684:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8014686:	230a      	movs	r3, #10
 8014688:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801468a:	2300      	movs	r3, #0
 801468c:	83bb      	strh	r3, [r7, #28]
 801468e:	2300      	movs	r3, #0
 8014690:	837b      	strh	r3, [r7, #26]
 8014692:	2300      	movs	r3, #0
 8014694:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014696:	2300      	movs	r3, #0
 8014698:	843b      	strh	r3, [r7, #32]
 801469a:	e0ae      	b.n	80147fa <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801469c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80146a0:	49a6      	ldr	r1, [pc, #664]	; (801493c <etharp_find_entry+0x2d4>)
 80146a2:	4613      	mov	r3, r2
 80146a4:	005b      	lsls	r3, r3, #1
 80146a6:	4413      	add	r3, r2
 80146a8:	00db      	lsls	r3, r3, #3
 80146aa:	440b      	add	r3, r1
 80146ac:	3314      	adds	r3, #20
 80146ae:	781b      	ldrb	r3, [r3, #0]
 80146b0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80146b2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80146b6:	2b0a      	cmp	r3, #10
 80146b8:	d105      	bne.n	80146c6 <etharp_find_entry+0x5e>
 80146ba:	7dfb      	ldrb	r3, [r7, #23]
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d102      	bne.n	80146c6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80146c0:	8c3b      	ldrh	r3, [r7, #32]
 80146c2:	847b      	strh	r3, [r7, #34]	; 0x22
 80146c4:	e095      	b.n	80147f2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80146c6:	7dfb      	ldrb	r3, [r7, #23]
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	f000 8092 	beq.w	80147f2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80146ce:	7dfb      	ldrb	r3, [r7, #23]
 80146d0:	2b01      	cmp	r3, #1
 80146d2:	d009      	beq.n	80146e8 <etharp_find_entry+0x80>
 80146d4:	7dfb      	ldrb	r3, [r7, #23]
 80146d6:	2b01      	cmp	r3, #1
 80146d8:	d806      	bhi.n	80146e8 <etharp_find_entry+0x80>
 80146da:	4b99      	ldr	r3, [pc, #612]	; (8014940 <etharp_find_entry+0x2d8>)
 80146dc:	f240 1223 	movw	r2, #291	; 0x123
 80146e0:	4998      	ldr	r1, [pc, #608]	; (8014944 <etharp_find_entry+0x2dc>)
 80146e2:	4899      	ldr	r0, [pc, #612]	; (8014948 <etharp_find_entry+0x2e0>)
 80146e4:	f002 fd60 	bl	80171a8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d020      	beq.n	8014730 <etharp_find_entry+0xc8>
 80146ee:	68fb      	ldr	r3, [r7, #12]
 80146f0:	6819      	ldr	r1, [r3, #0]
 80146f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80146f6:	4891      	ldr	r0, [pc, #580]	; (801493c <etharp_find_entry+0x2d4>)
 80146f8:	4613      	mov	r3, r2
 80146fa:	005b      	lsls	r3, r3, #1
 80146fc:	4413      	add	r3, r2
 80146fe:	00db      	lsls	r3, r3, #3
 8014700:	4403      	add	r3, r0
 8014702:	3304      	adds	r3, #4
 8014704:	681b      	ldr	r3, [r3, #0]
 8014706:	4299      	cmp	r1, r3
 8014708:	d112      	bne.n	8014730 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	2b00      	cmp	r3, #0
 801470e:	d00c      	beq.n	801472a <etharp_find_entry+0xc2>
 8014710:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014714:	4989      	ldr	r1, [pc, #548]	; (801493c <etharp_find_entry+0x2d4>)
 8014716:	4613      	mov	r3, r2
 8014718:	005b      	lsls	r3, r3, #1
 801471a:	4413      	add	r3, r2
 801471c:	00db      	lsls	r3, r3, #3
 801471e:	440b      	add	r3, r1
 8014720:	3308      	adds	r3, #8
 8014722:	681b      	ldr	r3, [r3, #0]
 8014724:	687a      	ldr	r2, [r7, #4]
 8014726:	429a      	cmp	r2, r3
 8014728:	d102      	bne.n	8014730 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801472a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801472e:	e100      	b.n	8014932 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014730:	7dfb      	ldrb	r3, [r7, #23]
 8014732:	2b01      	cmp	r3, #1
 8014734:	d140      	bne.n	80147b8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8014736:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801473a:	4980      	ldr	r1, [pc, #512]	; (801493c <etharp_find_entry+0x2d4>)
 801473c:	4613      	mov	r3, r2
 801473e:	005b      	lsls	r3, r3, #1
 8014740:	4413      	add	r3, r2
 8014742:	00db      	lsls	r3, r3, #3
 8014744:	440b      	add	r3, r1
 8014746:	681b      	ldr	r3, [r3, #0]
 8014748:	2b00      	cmp	r3, #0
 801474a:	d01a      	beq.n	8014782 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801474c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014750:	497a      	ldr	r1, [pc, #488]	; (801493c <etharp_find_entry+0x2d4>)
 8014752:	4613      	mov	r3, r2
 8014754:	005b      	lsls	r3, r3, #1
 8014756:	4413      	add	r3, r2
 8014758:	00db      	lsls	r3, r3, #3
 801475a:	440b      	add	r3, r1
 801475c:	3312      	adds	r3, #18
 801475e:	881b      	ldrh	r3, [r3, #0]
 8014760:	8bba      	ldrh	r2, [r7, #28]
 8014762:	429a      	cmp	r2, r3
 8014764:	d845      	bhi.n	80147f2 <etharp_find_entry+0x18a>
            old_queue = i;
 8014766:	8c3b      	ldrh	r3, [r7, #32]
 8014768:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801476a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801476e:	4973      	ldr	r1, [pc, #460]	; (801493c <etharp_find_entry+0x2d4>)
 8014770:	4613      	mov	r3, r2
 8014772:	005b      	lsls	r3, r3, #1
 8014774:	4413      	add	r3, r2
 8014776:	00db      	lsls	r3, r3, #3
 8014778:	440b      	add	r3, r1
 801477a:	3312      	adds	r3, #18
 801477c:	881b      	ldrh	r3, [r3, #0]
 801477e:	83bb      	strh	r3, [r7, #28]
 8014780:	e037      	b.n	80147f2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8014782:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014786:	496d      	ldr	r1, [pc, #436]	; (801493c <etharp_find_entry+0x2d4>)
 8014788:	4613      	mov	r3, r2
 801478a:	005b      	lsls	r3, r3, #1
 801478c:	4413      	add	r3, r2
 801478e:	00db      	lsls	r3, r3, #3
 8014790:	440b      	add	r3, r1
 8014792:	3312      	adds	r3, #18
 8014794:	881b      	ldrh	r3, [r3, #0]
 8014796:	8b7a      	ldrh	r2, [r7, #26]
 8014798:	429a      	cmp	r2, r3
 801479a:	d82a      	bhi.n	80147f2 <etharp_find_entry+0x18a>
            old_pending = i;
 801479c:	8c3b      	ldrh	r3, [r7, #32]
 801479e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80147a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80147a4:	4965      	ldr	r1, [pc, #404]	; (801493c <etharp_find_entry+0x2d4>)
 80147a6:	4613      	mov	r3, r2
 80147a8:	005b      	lsls	r3, r3, #1
 80147aa:	4413      	add	r3, r2
 80147ac:	00db      	lsls	r3, r3, #3
 80147ae:	440b      	add	r3, r1
 80147b0:	3312      	adds	r3, #18
 80147b2:	881b      	ldrh	r3, [r3, #0]
 80147b4:	837b      	strh	r3, [r7, #26]
 80147b6:	e01c      	b.n	80147f2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80147b8:	7dfb      	ldrb	r3, [r7, #23]
 80147ba:	2b01      	cmp	r3, #1
 80147bc:	d919      	bls.n	80147f2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80147be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80147c2:	495e      	ldr	r1, [pc, #376]	; (801493c <etharp_find_entry+0x2d4>)
 80147c4:	4613      	mov	r3, r2
 80147c6:	005b      	lsls	r3, r3, #1
 80147c8:	4413      	add	r3, r2
 80147ca:	00db      	lsls	r3, r3, #3
 80147cc:	440b      	add	r3, r1
 80147ce:	3312      	adds	r3, #18
 80147d0:	881b      	ldrh	r3, [r3, #0]
 80147d2:	8b3a      	ldrh	r2, [r7, #24]
 80147d4:	429a      	cmp	r2, r3
 80147d6:	d80c      	bhi.n	80147f2 <etharp_find_entry+0x18a>
            old_stable = i;
 80147d8:	8c3b      	ldrh	r3, [r7, #32]
 80147da:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80147dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80147e0:	4956      	ldr	r1, [pc, #344]	; (801493c <etharp_find_entry+0x2d4>)
 80147e2:	4613      	mov	r3, r2
 80147e4:	005b      	lsls	r3, r3, #1
 80147e6:	4413      	add	r3, r2
 80147e8:	00db      	lsls	r3, r3, #3
 80147ea:	440b      	add	r3, r1
 80147ec:	3312      	adds	r3, #18
 80147ee:	881b      	ldrh	r3, [r3, #0]
 80147f0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80147f2:	8c3b      	ldrh	r3, [r7, #32]
 80147f4:	3301      	adds	r3, #1
 80147f6:	b29b      	uxth	r3, r3
 80147f8:	843b      	strh	r3, [r7, #32]
 80147fa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80147fe:	2b09      	cmp	r3, #9
 8014800:	f77f af4c 	ble.w	801469c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014804:	7afb      	ldrb	r3, [r7, #11]
 8014806:	f003 0302 	and.w	r3, r3, #2
 801480a:	2b00      	cmp	r3, #0
 801480c:	d108      	bne.n	8014820 <etharp_find_entry+0x1b8>
 801480e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014812:	2b0a      	cmp	r3, #10
 8014814:	d107      	bne.n	8014826 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8014816:	7afb      	ldrb	r3, [r7, #11]
 8014818:	f003 0301 	and.w	r3, r3, #1
 801481c:	2b00      	cmp	r3, #0
 801481e:	d102      	bne.n	8014826 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8014820:	f04f 33ff 	mov.w	r3, #4294967295
 8014824:	e085      	b.n	8014932 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8014826:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801482a:	2b09      	cmp	r3, #9
 801482c:	dc02      	bgt.n	8014834 <etharp_find_entry+0x1cc>
    i = empty;
 801482e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014830:	843b      	strh	r3, [r7, #32]
 8014832:	e039      	b.n	80148a8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014834:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8014838:	2b09      	cmp	r3, #9
 801483a:	dc14      	bgt.n	8014866 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801483c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801483e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014840:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014844:	493d      	ldr	r1, [pc, #244]	; (801493c <etharp_find_entry+0x2d4>)
 8014846:	4613      	mov	r3, r2
 8014848:	005b      	lsls	r3, r3, #1
 801484a:	4413      	add	r3, r2
 801484c:	00db      	lsls	r3, r3, #3
 801484e:	440b      	add	r3, r1
 8014850:	681b      	ldr	r3, [r3, #0]
 8014852:	2b00      	cmp	r3, #0
 8014854:	d018      	beq.n	8014888 <etharp_find_entry+0x220>
 8014856:	4b3a      	ldr	r3, [pc, #232]	; (8014940 <etharp_find_entry+0x2d8>)
 8014858:	f240 126d 	movw	r2, #365	; 0x16d
 801485c:	493b      	ldr	r1, [pc, #236]	; (801494c <etharp_find_entry+0x2e4>)
 801485e:	483a      	ldr	r0, [pc, #232]	; (8014948 <etharp_find_entry+0x2e0>)
 8014860:	f002 fca2 	bl	80171a8 <iprintf>
 8014864:	e010      	b.n	8014888 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8014866:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801486a:	2b09      	cmp	r3, #9
 801486c:	dc02      	bgt.n	8014874 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801486e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014870:	843b      	strh	r3, [r7, #32]
 8014872:	e009      	b.n	8014888 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014874:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014878:	2b09      	cmp	r3, #9
 801487a:	dc02      	bgt.n	8014882 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801487c:	8bfb      	ldrh	r3, [r7, #30]
 801487e:	843b      	strh	r3, [r7, #32]
 8014880:	e002      	b.n	8014888 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8014882:	f04f 33ff 	mov.w	r3, #4294967295
 8014886:	e054      	b.n	8014932 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014888:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801488c:	2b09      	cmp	r3, #9
 801488e:	dd06      	ble.n	801489e <etharp_find_entry+0x236>
 8014890:	4b2b      	ldr	r3, [pc, #172]	; (8014940 <etharp_find_entry+0x2d8>)
 8014892:	f240 127f 	movw	r2, #383	; 0x17f
 8014896:	492e      	ldr	r1, [pc, #184]	; (8014950 <etharp_find_entry+0x2e8>)
 8014898:	482b      	ldr	r0, [pc, #172]	; (8014948 <etharp_find_entry+0x2e0>)
 801489a:	f002 fc85 	bl	80171a8 <iprintf>
    etharp_free_entry(i);
 801489e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80148a2:	4618      	mov	r0, r3
 80148a4:	f7ff fe06 	bl	80144b4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80148a8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80148ac:	2b09      	cmp	r3, #9
 80148ae:	dd06      	ble.n	80148be <etharp_find_entry+0x256>
 80148b0:	4b23      	ldr	r3, [pc, #140]	; (8014940 <etharp_find_entry+0x2d8>)
 80148b2:	f240 1283 	movw	r2, #387	; 0x183
 80148b6:	4926      	ldr	r1, [pc, #152]	; (8014950 <etharp_find_entry+0x2e8>)
 80148b8:	4823      	ldr	r0, [pc, #140]	; (8014948 <etharp_find_entry+0x2e0>)
 80148ba:	f002 fc75 	bl	80171a8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80148be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80148c2:	491e      	ldr	r1, [pc, #120]	; (801493c <etharp_find_entry+0x2d4>)
 80148c4:	4613      	mov	r3, r2
 80148c6:	005b      	lsls	r3, r3, #1
 80148c8:	4413      	add	r3, r2
 80148ca:	00db      	lsls	r3, r3, #3
 80148cc:	440b      	add	r3, r1
 80148ce:	3314      	adds	r3, #20
 80148d0:	781b      	ldrb	r3, [r3, #0]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d006      	beq.n	80148e4 <etharp_find_entry+0x27c>
 80148d6:	4b1a      	ldr	r3, [pc, #104]	; (8014940 <etharp_find_entry+0x2d8>)
 80148d8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80148dc:	491d      	ldr	r1, [pc, #116]	; (8014954 <etharp_find_entry+0x2ec>)
 80148de:	481a      	ldr	r0, [pc, #104]	; (8014948 <etharp_find_entry+0x2e0>)
 80148e0:	f002 fc62 	bl	80171a8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80148e4:	68fb      	ldr	r3, [r7, #12]
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d00b      	beq.n	8014902 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80148ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80148ee:	68fb      	ldr	r3, [r7, #12]
 80148f0:	6819      	ldr	r1, [r3, #0]
 80148f2:	4812      	ldr	r0, [pc, #72]	; (801493c <etharp_find_entry+0x2d4>)
 80148f4:	4613      	mov	r3, r2
 80148f6:	005b      	lsls	r3, r3, #1
 80148f8:	4413      	add	r3, r2
 80148fa:	00db      	lsls	r3, r3, #3
 80148fc:	4403      	add	r3, r0
 80148fe:	3304      	adds	r3, #4
 8014900:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8014902:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014906:	490d      	ldr	r1, [pc, #52]	; (801493c <etharp_find_entry+0x2d4>)
 8014908:	4613      	mov	r3, r2
 801490a:	005b      	lsls	r3, r3, #1
 801490c:	4413      	add	r3, r2
 801490e:	00db      	lsls	r3, r3, #3
 8014910:	440b      	add	r3, r1
 8014912:	3312      	adds	r3, #18
 8014914:	2200      	movs	r2, #0
 8014916:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014918:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801491c:	4907      	ldr	r1, [pc, #28]	; (801493c <etharp_find_entry+0x2d4>)
 801491e:	4613      	mov	r3, r2
 8014920:	005b      	lsls	r3, r3, #1
 8014922:	4413      	add	r3, r2
 8014924:	00db      	lsls	r3, r3, #3
 8014926:	440b      	add	r3, r1
 8014928:	3308      	adds	r3, #8
 801492a:	687a      	ldr	r2, [r7, #4]
 801492c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801492e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8014932:	4618      	mov	r0, r3
 8014934:	3728      	adds	r7, #40	; 0x28
 8014936:	46bd      	mov	sp, r7
 8014938:	bd80      	pop	{r7, pc}
 801493a:	bf00      	nop
 801493c:	20008598 	.word	0x20008598
 8014940:	0801b824 	.word	0x0801b824
 8014944:	0801b85c 	.word	0x0801b85c
 8014948:	0801b89c 	.word	0x0801b89c
 801494c:	0801b8c4 	.word	0x0801b8c4
 8014950:	0801b8dc 	.word	0x0801b8dc
 8014954:	0801b8f0 	.word	0x0801b8f0

08014958 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014958:	b580      	push	{r7, lr}
 801495a:	b088      	sub	sp, #32
 801495c:	af02      	add	r7, sp, #8
 801495e:	60f8      	str	r0, [r7, #12]
 8014960:	60b9      	str	r1, [r7, #8]
 8014962:	607a      	str	r2, [r7, #4]
 8014964:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8014966:	68fb      	ldr	r3, [r7, #12]
 8014968:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801496c:	2b06      	cmp	r3, #6
 801496e:	d006      	beq.n	801497e <etharp_update_arp_entry+0x26>
 8014970:	4b48      	ldr	r3, [pc, #288]	; (8014a94 <etharp_update_arp_entry+0x13c>)
 8014972:	f240 12a9 	movw	r2, #425	; 0x1a9
 8014976:	4948      	ldr	r1, [pc, #288]	; (8014a98 <etharp_update_arp_entry+0x140>)
 8014978:	4848      	ldr	r0, [pc, #288]	; (8014a9c <etharp_update_arp_entry+0x144>)
 801497a:	f002 fc15 	bl	80171a8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801497e:	68bb      	ldr	r3, [r7, #8]
 8014980:	2b00      	cmp	r3, #0
 8014982:	d012      	beq.n	80149aa <etharp_update_arp_entry+0x52>
 8014984:	68bb      	ldr	r3, [r7, #8]
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	2b00      	cmp	r3, #0
 801498a:	d00e      	beq.n	80149aa <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801498c:	68bb      	ldr	r3, [r7, #8]
 801498e:	681b      	ldr	r3, [r3, #0]
 8014990:	68f9      	ldr	r1, [r7, #12]
 8014992:	4618      	mov	r0, r3
 8014994:	f001 f920 	bl	8015bd8 <ip4_addr_isbroadcast_u32>
 8014998:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801499a:	2b00      	cmp	r3, #0
 801499c:	d105      	bne.n	80149aa <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801499e:	68bb      	ldr	r3, [r7, #8]
 80149a0:	681b      	ldr	r3, [r3, #0]
 80149a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80149a6:	2be0      	cmp	r3, #224	; 0xe0
 80149a8:	d102      	bne.n	80149b0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80149aa:	f06f 030f 	mvn.w	r3, #15
 80149ae:	e06c      	b.n	8014a8a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80149b0:	78fb      	ldrb	r3, [r7, #3]
 80149b2:	68fa      	ldr	r2, [r7, #12]
 80149b4:	4619      	mov	r1, r3
 80149b6:	68b8      	ldr	r0, [r7, #8]
 80149b8:	f7ff fe56 	bl	8014668 <etharp_find_entry>
 80149bc:	4603      	mov	r3, r0
 80149be:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80149c0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	da02      	bge.n	80149ce <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80149c8:	8afb      	ldrh	r3, [r7, #22]
 80149ca:	b25b      	sxtb	r3, r3
 80149cc:	e05d      	b.n	8014a8a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80149ce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80149d2:	4933      	ldr	r1, [pc, #204]	; (8014aa0 <etharp_update_arp_entry+0x148>)
 80149d4:	4613      	mov	r3, r2
 80149d6:	005b      	lsls	r3, r3, #1
 80149d8:	4413      	add	r3, r2
 80149da:	00db      	lsls	r3, r3, #3
 80149dc:	440b      	add	r3, r1
 80149de:	3314      	adds	r3, #20
 80149e0:	2202      	movs	r2, #2
 80149e2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80149e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80149e8:	492d      	ldr	r1, [pc, #180]	; (8014aa0 <etharp_update_arp_entry+0x148>)
 80149ea:	4613      	mov	r3, r2
 80149ec:	005b      	lsls	r3, r3, #1
 80149ee:	4413      	add	r3, r2
 80149f0:	00db      	lsls	r3, r3, #3
 80149f2:	440b      	add	r3, r1
 80149f4:	3308      	adds	r3, #8
 80149f6:	68fa      	ldr	r2, [r7, #12]
 80149f8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80149fa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80149fe:	4613      	mov	r3, r2
 8014a00:	005b      	lsls	r3, r3, #1
 8014a02:	4413      	add	r3, r2
 8014a04:	00db      	lsls	r3, r3, #3
 8014a06:	3308      	adds	r3, #8
 8014a08:	4a25      	ldr	r2, [pc, #148]	; (8014aa0 <etharp_update_arp_entry+0x148>)
 8014a0a:	4413      	add	r3, r2
 8014a0c:	3304      	adds	r3, #4
 8014a0e:	2206      	movs	r2, #6
 8014a10:	6879      	ldr	r1, [r7, #4]
 8014a12:	4618      	mov	r0, r3
 8014a14:	f002 fb3d 	bl	8017092 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014a18:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014a1c:	4920      	ldr	r1, [pc, #128]	; (8014aa0 <etharp_update_arp_entry+0x148>)
 8014a1e:	4613      	mov	r3, r2
 8014a20:	005b      	lsls	r3, r3, #1
 8014a22:	4413      	add	r3, r2
 8014a24:	00db      	lsls	r3, r3, #3
 8014a26:	440b      	add	r3, r1
 8014a28:	3312      	adds	r3, #18
 8014a2a:	2200      	movs	r2, #0
 8014a2c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8014a2e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014a32:	491b      	ldr	r1, [pc, #108]	; (8014aa0 <etharp_update_arp_entry+0x148>)
 8014a34:	4613      	mov	r3, r2
 8014a36:	005b      	lsls	r3, r3, #1
 8014a38:	4413      	add	r3, r2
 8014a3a:	00db      	lsls	r3, r3, #3
 8014a3c:	440b      	add	r3, r1
 8014a3e:	681b      	ldr	r3, [r3, #0]
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d021      	beq.n	8014a88 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014a44:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014a48:	4915      	ldr	r1, [pc, #84]	; (8014aa0 <etharp_update_arp_entry+0x148>)
 8014a4a:	4613      	mov	r3, r2
 8014a4c:	005b      	lsls	r3, r3, #1
 8014a4e:	4413      	add	r3, r2
 8014a50:	00db      	lsls	r3, r3, #3
 8014a52:	440b      	add	r3, r1
 8014a54:	681b      	ldr	r3, [r3, #0]
 8014a56:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014a58:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014a5c:	4910      	ldr	r1, [pc, #64]	; (8014aa0 <etharp_update_arp_entry+0x148>)
 8014a5e:	4613      	mov	r3, r2
 8014a60:	005b      	lsls	r3, r3, #1
 8014a62:	4413      	add	r3, r2
 8014a64:	00db      	lsls	r3, r3, #3
 8014a66:	440b      	add	r3, r1
 8014a68:	2200      	movs	r2, #0
 8014a6a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014a6c:	68fb      	ldr	r3, [r7, #12]
 8014a6e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8014a72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014a76:	9300      	str	r3, [sp, #0]
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	6939      	ldr	r1, [r7, #16]
 8014a7c:	68f8      	ldr	r0, [r7, #12]
 8014a7e:	f001 ffb3 	bl	80169e8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8014a82:	6938      	ldr	r0, [r7, #16]
 8014a84:	f7f6 fd16 	bl	800b4b4 <pbuf_free>
  }
  return ERR_OK;
 8014a88:	2300      	movs	r3, #0
}
 8014a8a:	4618      	mov	r0, r3
 8014a8c:	3718      	adds	r7, #24
 8014a8e:	46bd      	mov	sp, r7
 8014a90:	bd80      	pop	{r7, pc}
 8014a92:	bf00      	nop
 8014a94:	0801b824 	.word	0x0801b824
 8014a98:	0801b91c 	.word	0x0801b91c
 8014a9c:	0801b89c 	.word	0x0801b89c
 8014aa0:	20008598 	.word	0x20008598

08014aa4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014aa4:	b580      	push	{r7, lr}
 8014aa6:	b084      	sub	sp, #16
 8014aa8:	af00      	add	r7, sp, #0
 8014aaa:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014aac:	2300      	movs	r3, #0
 8014aae:	60fb      	str	r3, [r7, #12]
 8014ab0:	e01e      	b.n	8014af0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8014ab2:	4913      	ldr	r1, [pc, #76]	; (8014b00 <etharp_cleanup_netif+0x5c>)
 8014ab4:	68fa      	ldr	r2, [r7, #12]
 8014ab6:	4613      	mov	r3, r2
 8014ab8:	005b      	lsls	r3, r3, #1
 8014aba:	4413      	add	r3, r2
 8014abc:	00db      	lsls	r3, r3, #3
 8014abe:	440b      	add	r3, r1
 8014ac0:	3314      	adds	r3, #20
 8014ac2:	781b      	ldrb	r3, [r3, #0]
 8014ac4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8014ac6:	7afb      	ldrb	r3, [r7, #11]
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d00e      	beq.n	8014aea <etharp_cleanup_netif+0x46>
 8014acc:	490c      	ldr	r1, [pc, #48]	; (8014b00 <etharp_cleanup_netif+0x5c>)
 8014ace:	68fa      	ldr	r2, [r7, #12]
 8014ad0:	4613      	mov	r3, r2
 8014ad2:	005b      	lsls	r3, r3, #1
 8014ad4:	4413      	add	r3, r2
 8014ad6:	00db      	lsls	r3, r3, #3
 8014ad8:	440b      	add	r3, r1
 8014ada:	3308      	adds	r3, #8
 8014adc:	681b      	ldr	r3, [r3, #0]
 8014ade:	687a      	ldr	r2, [r7, #4]
 8014ae0:	429a      	cmp	r2, r3
 8014ae2:	d102      	bne.n	8014aea <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8014ae4:	68f8      	ldr	r0, [r7, #12]
 8014ae6:	f7ff fce5 	bl	80144b4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014aea:	68fb      	ldr	r3, [r7, #12]
 8014aec:	3301      	adds	r3, #1
 8014aee:	60fb      	str	r3, [r7, #12]
 8014af0:	68fb      	ldr	r3, [r7, #12]
 8014af2:	2b09      	cmp	r3, #9
 8014af4:	dddd      	ble.n	8014ab2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8014af6:	bf00      	nop
 8014af8:	bf00      	nop
 8014afa:	3710      	adds	r7, #16
 8014afc:	46bd      	mov	sp, r7
 8014afe:	bd80      	pop	{r7, pc}
 8014b00:	20008598 	.word	0x20008598

08014b04 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014b04:	b5b0      	push	{r4, r5, r7, lr}
 8014b06:	b08a      	sub	sp, #40	; 0x28
 8014b08:	af04      	add	r7, sp, #16
 8014b0a:	6078      	str	r0, [r7, #4]
 8014b0c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014b0e:	683b      	ldr	r3, [r7, #0]
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d107      	bne.n	8014b24 <etharp_input+0x20>
 8014b14:	4b3f      	ldr	r3, [pc, #252]	; (8014c14 <etharp_input+0x110>)
 8014b16:	f240 228a 	movw	r2, #650	; 0x28a
 8014b1a:	493f      	ldr	r1, [pc, #252]	; (8014c18 <etharp_input+0x114>)
 8014b1c:	483f      	ldr	r0, [pc, #252]	; (8014c1c <etharp_input+0x118>)
 8014b1e:	f002 fb43 	bl	80171a8 <iprintf>
 8014b22:	e074      	b.n	8014c0e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	685b      	ldr	r3, [r3, #4]
 8014b28:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014b2a:	693b      	ldr	r3, [r7, #16]
 8014b2c:	881b      	ldrh	r3, [r3, #0]
 8014b2e:	b29b      	uxth	r3, r3
 8014b30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014b34:	d10c      	bne.n	8014b50 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014b36:	693b      	ldr	r3, [r7, #16]
 8014b38:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014b3a:	2b06      	cmp	r3, #6
 8014b3c:	d108      	bne.n	8014b50 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014b3e:	693b      	ldr	r3, [r7, #16]
 8014b40:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014b42:	2b04      	cmp	r3, #4
 8014b44:	d104      	bne.n	8014b50 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8014b46:	693b      	ldr	r3, [r7, #16]
 8014b48:	885b      	ldrh	r3, [r3, #2]
 8014b4a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014b4c:	2b08      	cmp	r3, #8
 8014b4e:	d003      	beq.n	8014b58 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014b50:	6878      	ldr	r0, [r7, #4]
 8014b52:	f7f6 fcaf 	bl	800b4b4 <pbuf_free>
    return;
 8014b56:	e05a      	b.n	8014c0e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014b58:	693b      	ldr	r3, [r7, #16]
 8014b5a:	330e      	adds	r3, #14
 8014b5c:	681b      	ldr	r3, [r3, #0]
 8014b5e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014b60:	693b      	ldr	r3, [r7, #16]
 8014b62:	3318      	adds	r3, #24
 8014b64:	681b      	ldr	r3, [r3, #0]
 8014b66:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014b68:	683b      	ldr	r3, [r7, #0]
 8014b6a:	3304      	adds	r3, #4
 8014b6c:	681b      	ldr	r3, [r3, #0]
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d102      	bne.n	8014b78 <etharp_input+0x74>
    for_us = 0;
 8014b72:	2300      	movs	r3, #0
 8014b74:	75fb      	strb	r3, [r7, #23]
 8014b76:	e009      	b.n	8014b8c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014b78:	68ba      	ldr	r2, [r7, #8]
 8014b7a:	683b      	ldr	r3, [r7, #0]
 8014b7c:	3304      	adds	r3, #4
 8014b7e:	681b      	ldr	r3, [r3, #0]
 8014b80:	429a      	cmp	r2, r3
 8014b82:	bf0c      	ite	eq
 8014b84:	2301      	moveq	r3, #1
 8014b86:	2300      	movne	r3, #0
 8014b88:	b2db      	uxtb	r3, r3
 8014b8a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014b8c:	693b      	ldr	r3, [r7, #16]
 8014b8e:	f103 0208 	add.w	r2, r3, #8
 8014b92:	7dfb      	ldrb	r3, [r7, #23]
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d001      	beq.n	8014b9c <etharp_input+0x98>
 8014b98:	2301      	movs	r3, #1
 8014b9a:	e000      	b.n	8014b9e <etharp_input+0x9a>
 8014b9c:	2302      	movs	r3, #2
 8014b9e:	f107 010c 	add.w	r1, r7, #12
 8014ba2:	6838      	ldr	r0, [r7, #0]
 8014ba4:	f7ff fed8 	bl	8014958 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014ba8:	693b      	ldr	r3, [r7, #16]
 8014baa:	88db      	ldrh	r3, [r3, #6]
 8014bac:	b29b      	uxth	r3, r3
 8014bae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014bb2:	d003      	beq.n	8014bbc <etharp_input+0xb8>
 8014bb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014bb8:	d01e      	beq.n	8014bf8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8014bba:	e025      	b.n	8014c08 <etharp_input+0x104>
      if (for_us) {
 8014bbc:	7dfb      	ldrb	r3, [r7, #23]
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d021      	beq.n	8014c06 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8014bc2:	683b      	ldr	r3, [r7, #0]
 8014bc4:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8014bc8:	693b      	ldr	r3, [r7, #16]
 8014bca:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8014bce:	683b      	ldr	r3, [r7, #0]
 8014bd0:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8014bd4:	683b      	ldr	r3, [r7, #0]
 8014bd6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014bd8:	693a      	ldr	r2, [r7, #16]
 8014bda:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014bdc:	2102      	movs	r1, #2
 8014bde:	9103      	str	r1, [sp, #12]
 8014be0:	f107 010c 	add.w	r1, r7, #12
 8014be4:	9102      	str	r1, [sp, #8]
 8014be6:	9201      	str	r2, [sp, #4]
 8014be8:	9300      	str	r3, [sp, #0]
 8014bea:	462b      	mov	r3, r5
 8014bec:	4622      	mov	r2, r4
 8014bee:	4601      	mov	r1, r0
 8014bf0:	6838      	ldr	r0, [r7, #0]
 8014bf2:	f000 faef 	bl	80151d4 <etharp_raw>
      break;
 8014bf6:	e006      	b.n	8014c06 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8014bf8:	f107 030c 	add.w	r3, r7, #12
 8014bfc:	4619      	mov	r1, r3
 8014bfe:	6838      	ldr	r0, [r7, #0]
 8014c00:	f7fe f9fc 	bl	8012ffc <dhcp_arp_reply>
      break;
 8014c04:	e000      	b.n	8014c08 <etharp_input+0x104>
      break;
 8014c06:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8014c08:	6878      	ldr	r0, [r7, #4]
 8014c0a:	f7f6 fc53 	bl	800b4b4 <pbuf_free>
}
 8014c0e:	3718      	adds	r7, #24
 8014c10:	46bd      	mov	sp, r7
 8014c12:	bdb0      	pop	{r4, r5, r7, pc}
 8014c14:	0801b824 	.word	0x0801b824
 8014c18:	0801b974 	.word	0x0801b974
 8014c1c:	0801b89c 	.word	0x0801b89c

08014c20 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014c20:	b580      	push	{r7, lr}
 8014c22:	b086      	sub	sp, #24
 8014c24:	af02      	add	r7, sp, #8
 8014c26:	60f8      	str	r0, [r7, #12]
 8014c28:	60b9      	str	r1, [r7, #8]
 8014c2a:	4613      	mov	r3, r2
 8014c2c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014c2e:	79fa      	ldrb	r2, [r7, #7]
 8014c30:	4944      	ldr	r1, [pc, #272]	; (8014d44 <etharp_output_to_arp_index+0x124>)
 8014c32:	4613      	mov	r3, r2
 8014c34:	005b      	lsls	r3, r3, #1
 8014c36:	4413      	add	r3, r2
 8014c38:	00db      	lsls	r3, r3, #3
 8014c3a:	440b      	add	r3, r1
 8014c3c:	3314      	adds	r3, #20
 8014c3e:	781b      	ldrb	r3, [r3, #0]
 8014c40:	2b01      	cmp	r3, #1
 8014c42:	d806      	bhi.n	8014c52 <etharp_output_to_arp_index+0x32>
 8014c44:	4b40      	ldr	r3, [pc, #256]	; (8014d48 <etharp_output_to_arp_index+0x128>)
 8014c46:	f240 22ee 	movw	r2, #750	; 0x2ee
 8014c4a:	4940      	ldr	r1, [pc, #256]	; (8014d4c <etharp_output_to_arp_index+0x12c>)
 8014c4c:	4840      	ldr	r0, [pc, #256]	; (8014d50 <etharp_output_to_arp_index+0x130>)
 8014c4e:	f002 faab 	bl	80171a8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8014c52:	79fa      	ldrb	r2, [r7, #7]
 8014c54:	493b      	ldr	r1, [pc, #236]	; (8014d44 <etharp_output_to_arp_index+0x124>)
 8014c56:	4613      	mov	r3, r2
 8014c58:	005b      	lsls	r3, r3, #1
 8014c5a:	4413      	add	r3, r2
 8014c5c:	00db      	lsls	r3, r3, #3
 8014c5e:	440b      	add	r3, r1
 8014c60:	3314      	adds	r3, #20
 8014c62:	781b      	ldrb	r3, [r3, #0]
 8014c64:	2b02      	cmp	r3, #2
 8014c66:	d153      	bne.n	8014d10 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014c68:	79fa      	ldrb	r2, [r7, #7]
 8014c6a:	4936      	ldr	r1, [pc, #216]	; (8014d44 <etharp_output_to_arp_index+0x124>)
 8014c6c:	4613      	mov	r3, r2
 8014c6e:	005b      	lsls	r3, r3, #1
 8014c70:	4413      	add	r3, r2
 8014c72:	00db      	lsls	r3, r3, #3
 8014c74:	440b      	add	r3, r1
 8014c76:	3312      	adds	r3, #18
 8014c78:	881b      	ldrh	r3, [r3, #0]
 8014c7a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8014c7e:	d919      	bls.n	8014cb4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014c80:	79fa      	ldrb	r2, [r7, #7]
 8014c82:	4613      	mov	r3, r2
 8014c84:	005b      	lsls	r3, r3, #1
 8014c86:	4413      	add	r3, r2
 8014c88:	00db      	lsls	r3, r3, #3
 8014c8a:	4a2e      	ldr	r2, [pc, #184]	; (8014d44 <etharp_output_to_arp_index+0x124>)
 8014c8c:	4413      	add	r3, r2
 8014c8e:	3304      	adds	r3, #4
 8014c90:	4619      	mov	r1, r3
 8014c92:	68f8      	ldr	r0, [r7, #12]
 8014c94:	f000 fb4c 	bl	8015330 <etharp_request>
 8014c98:	4603      	mov	r3, r0
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d138      	bne.n	8014d10 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014c9e:	79fa      	ldrb	r2, [r7, #7]
 8014ca0:	4928      	ldr	r1, [pc, #160]	; (8014d44 <etharp_output_to_arp_index+0x124>)
 8014ca2:	4613      	mov	r3, r2
 8014ca4:	005b      	lsls	r3, r3, #1
 8014ca6:	4413      	add	r3, r2
 8014ca8:	00db      	lsls	r3, r3, #3
 8014caa:	440b      	add	r3, r1
 8014cac:	3314      	adds	r3, #20
 8014cae:	2203      	movs	r2, #3
 8014cb0:	701a      	strb	r2, [r3, #0]
 8014cb2:	e02d      	b.n	8014d10 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014cb4:	79fa      	ldrb	r2, [r7, #7]
 8014cb6:	4923      	ldr	r1, [pc, #140]	; (8014d44 <etharp_output_to_arp_index+0x124>)
 8014cb8:	4613      	mov	r3, r2
 8014cba:	005b      	lsls	r3, r3, #1
 8014cbc:	4413      	add	r3, r2
 8014cbe:	00db      	lsls	r3, r3, #3
 8014cc0:	440b      	add	r3, r1
 8014cc2:	3312      	adds	r3, #18
 8014cc4:	881b      	ldrh	r3, [r3, #0]
 8014cc6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8014cca:	d321      	bcc.n	8014d10 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014ccc:	79fa      	ldrb	r2, [r7, #7]
 8014cce:	4613      	mov	r3, r2
 8014cd0:	005b      	lsls	r3, r3, #1
 8014cd2:	4413      	add	r3, r2
 8014cd4:	00db      	lsls	r3, r3, #3
 8014cd6:	4a1b      	ldr	r2, [pc, #108]	; (8014d44 <etharp_output_to_arp_index+0x124>)
 8014cd8:	4413      	add	r3, r2
 8014cda:	1d19      	adds	r1, r3, #4
 8014cdc:	79fa      	ldrb	r2, [r7, #7]
 8014cde:	4613      	mov	r3, r2
 8014ce0:	005b      	lsls	r3, r3, #1
 8014ce2:	4413      	add	r3, r2
 8014ce4:	00db      	lsls	r3, r3, #3
 8014ce6:	3308      	adds	r3, #8
 8014ce8:	4a16      	ldr	r2, [pc, #88]	; (8014d44 <etharp_output_to_arp_index+0x124>)
 8014cea:	4413      	add	r3, r2
 8014cec:	3304      	adds	r3, #4
 8014cee:	461a      	mov	r2, r3
 8014cf0:	68f8      	ldr	r0, [r7, #12]
 8014cf2:	f000 fafb 	bl	80152ec <etharp_request_dst>
 8014cf6:	4603      	mov	r3, r0
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d109      	bne.n	8014d10 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014cfc:	79fa      	ldrb	r2, [r7, #7]
 8014cfe:	4911      	ldr	r1, [pc, #68]	; (8014d44 <etharp_output_to_arp_index+0x124>)
 8014d00:	4613      	mov	r3, r2
 8014d02:	005b      	lsls	r3, r3, #1
 8014d04:	4413      	add	r3, r2
 8014d06:	00db      	lsls	r3, r3, #3
 8014d08:	440b      	add	r3, r1
 8014d0a:	3314      	adds	r3, #20
 8014d0c:	2203      	movs	r2, #3
 8014d0e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014d10:	68fb      	ldr	r3, [r7, #12]
 8014d12:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8014d16:	79fa      	ldrb	r2, [r7, #7]
 8014d18:	4613      	mov	r3, r2
 8014d1a:	005b      	lsls	r3, r3, #1
 8014d1c:	4413      	add	r3, r2
 8014d1e:	00db      	lsls	r3, r3, #3
 8014d20:	3308      	adds	r3, #8
 8014d22:	4a08      	ldr	r2, [pc, #32]	; (8014d44 <etharp_output_to_arp_index+0x124>)
 8014d24:	4413      	add	r3, r2
 8014d26:	3304      	adds	r3, #4
 8014d28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014d2c:	9200      	str	r2, [sp, #0]
 8014d2e:	460a      	mov	r2, r1
 8014d30:	68b9      	ldr	r1, [r7, #8]
 8014d32:	68f8      	ldr	r0, [r7, #12]
 8014d34:	f001 fe58 	bl	80169e8 <ethernet_output>
 8014d38:	4603      	mov	r3, r0
}
 8014d3a:	4618      	mov	r0, r3
 8014d3c:	3710      	adds	r7, #16
 8014d3e:	46bd      	mov	sp, r7
 8014d40:	bd80      	pop	{r7, pc}
 8014d42:	bf00      	nop
 8014d44:	20008598 	.word	0x20008598
 8014d48:	0801b824 	.word	0x0801b824
 8014d4c:	0801b994 	.word	0x0801b994
 8014d50:	0801b89c 	.word	0x0801b89c

08014d54 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014d54:	b580      	push	{r7, lr}
 8014d56:	b08a      	sub	sp, #40	; 0x28
 8014d58:	af02      	add	r7, sp, #8
 8014d5a:	60f8      	str	r0, [r7, #12]
 8014d5c:	60b9      	str	r1, [r7, #8]
 8014d5e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014d64:	68fb      	ldr	r3, [r7, #12]
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d106      	bne.n	8014d78 <etharp_output+0x24>
 8014d6a:	4b73      	ldr	r3, [pc, #460]	; (8014f38 <etharp_output+0x1e4>)
 8014d6c:	f240 321e 	movw	r2, #798	; 0x31e
 8014d70:	4972      	ldr	r1, [pc, #456]	; (8014f3c <etharp_output+0x1e8>)
 8014d72:	4873      	ldr	r0, [pc, #460]	; (8014f40 <etharp_output+0x1ec>)
 8014d74:	f002 fa18 	bl	80171a8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014d78:	68bb      	ldr	r3, [r7, #8]
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d106      	bne.n	8014d8c <etharp_output+0x38>
 8014d7e:	4b6e      	ldr	r3, [pc, #440]	; (8014f38 <etharp_output+0x1e4>)
 8014d80:	f240 321f 	movw	r2, #799	; 0x31f
 8014d84:	496f      	ldr	r1, [pc, #444]	; (8014f44 <etharp_output+0x1f0>)
 8014d86:	486e      	ldr	r0, [pc, #440]	; (8014f40 <etharp_output+0x1ec>)
 8014d88:	f002 fa0e 	bl	80171a8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d106      	bne.n	8014da0 <etharp_output+0x4c>
 8014d92:	4b69      	ldr	r3, [pc, #420]	; (8014f38 <etharp_output+0x1e4>)
 8014d94:	f44f 7248 	mov.w	r2, #800	; 0x320
 8014d98:	496b      	ldr	r1, [pc, #428]	; (8014f48 <etharp_output+0x1f4>)
 8014d9a:	4869      	ldr	r0, [pc, #420]	; (8014f40 <etharp_output+0x1ec>)
 8014d9c:	f002 fa04 	bl	80171a8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	681b      	ldr	r3, [r3, #0]
 8014da4:	68f9      	ldr	r1, [r7, #12]
 8014da6:	4618      	mov	r0, r3
 8014da8:	f000 ff16 	bl	8015bd8 <ip4_addr_isbroadcast_u32>
 8014dac:	4603      	mov	r3, r0
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d002      	beq.n	8014db8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014db2:	4b66      	ldr	r3, [pc, #408]	; (8014f4c <etharp_output+0x1f8>)
 8014db4:	61fb      	str	r3, [r7, #28]
 8014db6:	e0af      	b.n	8014f18 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	681b      	ldr	r3, [r3, #0]
 8014dbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014dc0:	2be0      	cmp	r3, #224	; 0xe0
 8014dc2:	d118      	bne.n	8014df6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014dc4:	2301      	movs	r3, #1
 8014dc6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014dc8:	2300      	movs	r3, #0
 8014dca:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014dcc:	235e      	movs	r3, #94	; 0x5e
 8014dce:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	3301      	adds	r3, #1
 8014dd4:	781b      	ldrb	r3, [r3, #0]
 8014dd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014dda:	b2db      	uxtb	r3, r3
 8014ddc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	3302      	adds	r3, #2
 8014de2:	781b      	ldrb	r3, [r3, #0]
 8014de4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	3303      	adds	r3, #3
 8014dea:	781b      	ldrb	r3, [r3, #0]
 8014dec:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014dee:	f107 0310 	add.w	r3, r7, #16
 8014df2:	61fb      	str	r3, [r7, #28]
 8014df4:	e090      	b.n	8014f18 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	681a      	ldr	r2, [r3, #0]
 8014dfa:	68fb      	ldr	r3, [r7, #12]
 8014dfc:	3304      	adds	r3, #4
 8014dfe:	681b      	ldr	r3, [r3, #0]
 8014e00:	405a      	eors	r2, r3
 8014e02:	68fb      	ldr	r3, [r7, #12]
 8014e04:	3308      	adds	r3, #8
 8014e06:	681b      	ldr	r3, [r3, #0]
 8014e08:	4013      	ands	r3, r2
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d012      	beq.n	8014e34 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	681b      	ldr	r3, [r3, #0]
 8014e12:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014e14:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8014e18:	4293      	cmp	r3, r2
 8014e1a:	d00b      	beq.n	8014e34 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014e1c:	68fb      	ldr	r3, [r7, #12]
 8014e1e:	330c      	adds	r3, #12
 8014e20:	681b      	ldr	r3, [r3, #0]
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	d003      	beq.n	8014e2e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8014e26:	68fb      	ldr	r3, [r7, #12]
 8014e28:	330c      	adds	r3, #12
 8014e2a:	61bb      	str	r3, [r7, #24]
 8014e2c:	e002      	b.n	8014e34 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014e2e:	f06f 0303 	mvn.w	r3, #3
 8014e32:	e07d      	b.n	8014f30 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014e34:	4b46      	ldr	r3, [pc, #280]	; (8014f50 <etharp_output+0x1fc>)
 8014e36:	781b      	ldrb	r3, [r3, #0]
 8014e38:	4619      	mov	r1, r3
 8014e3a:	4a46      	ldr	r2, [pc, #280]	; (8014f54 <etharp_output+0x200>)
 8014e3c:	460b      	mov	r3, r1
 8014e3e:	005b      	lsls	r3, r3, #1
 8014e40:	440b      	add	r3, r1
 8014e42:	00db      	lsls	r3, r3, #3
 8014e44:	4413      	add	r3, r2
 8014e46:	3314      	adds	r3, #20
 8014e48:	781b      	ldrb	r3, [r3, #0]
 8014e4a:	2b01      	cmp	r3, #1
 8014e4c:	d925      	bls.n	8014e9a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014e4e:	4b40      	ldr	r3, [pc, #256]	; (8014f50 <etharp_output+0x1fc>)
 8014e50:	781b      	ldrb	r3, [r3, #0]
 8014e52:	4619      	mov	r1, r3
 8014e54:	4a3f      	ldr	r2, [pc, #252]	; (8014f54 <etharp_output+0x200>)
 8014e56:	460b      	mov	r3, r1
 8014e58:	005b      	lsls	r3, r3, #1
 8014e5a:	440b      	add	r3, r1
 8014e5c:	00db      	lsls	r3, r3, #3
 8014e5e:	4413      	add	r3, r2
 8014e60:	3308      	adds	r3, #8
 8014e62:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014e64:	68fa      	ldr	r2, [r7, #12]
 8014e66:	429a      	cmp	r2, r3
 8014e68:	d117      	bne.n	8014e9a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8014e6a:	69bb      	ldr	r3, [r7, #24]
 8014e6c:	681a      	ldr	r2, [r3, #0]
 8014e6e:	4b38      	ldr	r3, [pc, #224]	; (8014f50 <etharp_output+0x1fc>)
 8014e70:	781b      	ldrb	r3, [r3, #0]
 8014e72:	4618      	mov	r0, r3
 8014e74:	4937      	ldr	r1, [pc, #220]	; (8014f54 <etharp_output+0x200>)
 8014e76:	4603      	mov	r3, r0
 8014e78:	005b      	lsls	r3, r3, #1
 8014e7a:	4403      	add	r3, r0
 8014e7c:	00db      	lsls	r3, r3, #3
 8014e7e:	440b      	add	r3, r1
 8014e80:	3304      	adds	r3, #4
 8014e82:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014e84:	429a      	cmp	r2, r3
 8014e86:	d108      	bne.n	8014e9a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014e88:	4b31      	ldr	r3, [pc, #196]	; (8014f50 <etharp_output+0x1fc>)
 8014e8a:	781b      	ldrb	r3, [r3, #0]
 8014e8c:	461a      	mov	r2, r3
 8014e8e:	68b9      	ldr	r1, [r7, #8]
 8014e90:	68f8      	ldr	r0, [r7, #12]
 8014e92:	f7ff fec5 	bl	8014c20 <etharp_output_to_arp_index>
 8014e96:	4603      	mov	r3, r0
 8014e98:	e04a      	b.n	8014f30 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014e9a:	2300      	movs	r3, #0
 8014e9c:	75fb      	strb	r3, [r7, #23]
 8014e9e:	e031      	b.n	8014f04 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014ea0:	7dfa      	ldrb	r2, [r7, #23]
 8014ea2:	492c      	ldr	r1, [pc, #176]	; (8014f54 <etharp_output+0x200>)
 8014ea4:	4613      	mov	r3, r2
 8014ea6:	005b      	lsls	r3, r3, #1
 8014ea8:	4413      	add	r3, r2
 8014eaa:	00db      	lsls	r3, r3, #3
 8014eac:	440b      	add	r3, r1
 8014eae:	3314      	adds	r3, #20
 8014eb0:	781b      	ldrb	r3, [r3, #0]
 8014eb2:	2b01      	cmp	r3, #1
 8014eb4:	d923      	bls.n	8014efe <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8014eb6:	7dfa      	ldrb	r2, [r7, #23]
 8014eb8:	4926      	ldr	r1, [pc, #152]	; (8014f54 <etharp_output+0x200>)
 8014eba:	4613      	mov	r3, r2
 8014ebc:	005b      	lsls	r3, r3, #1
 8014ebe:	4413      	add	r3, r2
 8014ec0:	00db      	lsls	r3, r3, #3
 8014ec2:	440b      	add	r3, r1
 8014ec4:	3308      	adds	r3, #8
 8014ec6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014ec8:	68fa      	ldr	r2, [r7, #12]
 8014eca:	429a      	cmp	r2, r3
 8014ecc:	d117      	bne.n	8014efe <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014ece:	69bb      	ldr	r3, [r7, #24]
 8014ed0:	6819      	ldr	r1, [r3, #0]
 8014ed2:	7dfa      	ldrb	r2, [r7, #23]
 8014ed4:	481f      	ldr	r0, [pc, #124]	; (8014f54 <etharp_output+0x200>)
 8014ed6:	4613      	mov	r3, r2
 8014ed8:	005b      	lsls	r3, r3, #1
 8014eda:	4413      	add	r3, r2
 8014edc:	00db      	lsls	r3, r3, #3
 8014ede:	4403      	add	r3, r0
 8014ee0:	3304      	adds	r3, #4
 8014ee2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014ee4:	4299      	cmp	r1, r3
 8014ee6:	d10a      	bne.n	8014efe <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8014ee8:	4a19      	ldr	r2, [pc, #100]	; (8014f50 <etharp_output+0x1fc>)
 8014eea:	7dfb      	ldrb	r3, [r7, #23]
 8014eec:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014eee:	7dfb      	ldrb	r3, [r7, #23]
 8014ef0:	461a      	mov	r2, r3
 8014ef2:	68b9      	ldr	r1, [r7, #8]
 8014ef4:	68f8      	ldr	r0, [r7, #12]
 8014ef6:	f7ff fe93 	bl	8014c20 <etharp_output_to_arp_index>
 8014efa:	4603      	mov	r3, r0
 8014efc:	e018      	b.n	8014f30 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014efe:	7dfb      	ldrb	r3, [r7, #23]
 8014f00:	3301      	adds	r3, #1
 8014f02:	75fb      	strb	r3, [r7, #23]
 8014f04:	7dfb      	ldrb	r3, [r7, #23]
 8014f06:	2b09      	cmp	r3, #9
 8014f08:	d9ca      	bls.n	8014ea0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8014f0a:	68ba      	ldr	r2, [r7, #8]
 8014f0c:	69b9      	ldr	r1, [r7, #24]
 8014f0e:	68f8      	ldr	r0, [r7, #12]
 8014f10:	f000 f822 	bl	8014f58 <etharp_query>
 8014f14:	4603      	mov	r3, r0
 8014f16:	e00b      	b.n	8014f30 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8014f1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014f22:	9300      	str	r3, [sp, #0]
 8014f24:	69fb      	ldr	r3, [r7, #28]
 8014f26:	68b9      	ldr	r1, [r7, #8]
 8014f28:	68f8      	ldr	r0, [r7, #12]
 8014f2a:	f001 fd5d 	bl	80169e8 <ethernet_output>
 8014f2e:	4603      	mov	r3, r0
}
 8014f30:	4618      	mov	r0, r3
 8014f32:	3720      	adds	r7, #32
 8014f34:	46bd      	mov	sp, r7
 8014f36:	bd80      	pop	{r7, pc}
 8014f38:	0801b824 	.word	0x0801b824
 8014f3c:	0801b974 	.word	0x0801b974
 8014f40:	0801b89c 	.word	0x0801b89c
 8014f44:	0801b9c4 	.word	0x0801b9c4
 8014f48:	0801b964 	.word	0x0801b964
 8014f4c:	0801c02c 	.word	0x0801c02c
 8014f50:	20008688 	.word	0x20008688
 8014f54:	20008598 	.word	0x20008598

08014f58 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014f58:	b580      	push	{r7, lr}
 8014f5a:	b08c      	sub	sp, #48	; 0x30
 8014f5c:	af02      	add	r7, sp, #8
 8014f5e:	60f8      	str	r0, [r7, #12]
 8014f60:	60b9      	str	r1, [r7, #8]
 8014f62:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014f64:	68fb      	ldr	r3, [r7, #12]
 8014f66:	332a      	adds	r3, #42	; 0x2a
 8014f68:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014f6a:	23ff      	movs	r3, #255	; 0xff
 8014f6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8014f70:	2300      	movs	r3, #0
 8014f72:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014f74:	68bb      	ldr	r3, [r7, #8]
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	68f9      	ldr	r1, [r7, #12]
 8014f7a:	4618      	mov	r0, r3
 8014f7c:	f000 fe2c 	bl	8015bd8 <ip4_addr_isbroadcast_u32>
 8014f80:	4603      	mov	r3, r0
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d10c      	bne.n	8014fa0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014f86:	68bb      	ldr	r3, [r7, #8]
 8014f88:	681b      	ldr	r3, [r3, #0]
 8014f8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014f8e:	2be0      	cmp	r3, #224	; 0xe0
 8014f90:	d006      	beq.n	8014fa0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014f92:	68bb      	ldr	r3, [r7, #8]
 8014f94:	2b00      	cmp	r3, #0
 8014f96:	d003      	beq.n	8014fa0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014f98:	68bb      	ldr	r3, [r7, #8]
 8014f9a:	681b      	ldr	r3, [r3, #0]
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d102      	bne.n	8014fa6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014fa0:	f06f 030f 	mvn.w	r3, #15
 8014fa4:	e101      	b.n	80151aa <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014fa6:	68fa      	ldr	r2, [r7, #12]
 8014fa8:	2101      	movs	r1, #1
 8014faa:	68b8      	ldr	r0, [r7, #8]
 8014fac:	f7ff fb5c 	bl	8014668 <etharp_find_entry>
 8014fb0:	4603      	mov	r3, r0
 8014fb2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014fb4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	da02      	bge.n	8014fc2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014fbc:	8a7b      	ldrh	r3, [r7, #18]
 8014fbe:	b25b      	sxtb	r3, r3
 8014fc0:	e0f3      	b.n	80151aa <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8014fc2:	8a7b      	ldrh	r3, [r7, #18]
 8014fc4:	2b7e      	cmp	r3, #126	; 0x7e
 8014fc6:	d906      	bls.n	8014fd6 <etharp_query+0x7e>
 8014fc8:	4b7a      	ldr	r3, [pc, #488]	; (80151b4 <etharp_query+0x25c>)
 8014fca:	f240 32c1 	movw	r2, #961	; 0x3c1
 8014fce:	497a      	ldr	r1, [pc, #488]	; (80151b8 <etharp_query+0x260>)
 8014fd0:	487a      	ldr	r0, [pc, #488]	; (80151bc <etharp_query+0x264>)
 8014fd2:	f002 f8e9 	bl	80171a8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8014fd6:	8a7b      	ldrh	r3, [r7, #18]
 8014fd8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014fda:	7c7a      	ldrb	r2, [r7, #17]
 8014fdc:	4978      	ldr	r1, [pc, #480]	; (80151c0 <etharp_query+0x268>)
 8014fde:	4613      	mov	r3, r2
 8014fe0:	005b      	lsls	r3, r3, #1
 8014fe2:	4413      	add	r3, r2
 8014fe4:	00db      	lsls	r3, r3, #3
 8014fe6:	440b      	add	r3, r1
 8014fe8:	3314      	adds	r3, #20
 8014fea:	781b      	ldrb	r3, [r3, #0]
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d115      	bne.n	801501c <etharp_query+0xc4>
    is_new_entry = 1;
 8014ff0:	2301      	movs	r3, #1
 8014ff2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014ff4:	7c7a      	ldrb	r2, [r7, #17]
 8014ff6:	4972      	ldr	r1, [pc, #456]	; (80151c0 <etharp_query+0x268>)
 8014ff8:	4613      	mov	r3, r2
 8014ffa:	005b      	lsls	r3, r3, #1
 8014ffc:	4413      	add	r3, r2
 8014ffe:	00db      	lsls	r3, r3, #3
 8015000:	440b      	add	r3, r1
 8015002:	3314      	adds	r3, #20
 8015004:	2201      	movs	r2, #1
 8015006:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8015008:	7c7a      	ldrb	r2, [r7, #17]
 801500a:	496d      	ldr	r1, [pc, #436]	; (80151c0 <etharp_query+0x268>)
 801500c:	4613      	mov	r3, r2
 801500e:	005b      	lsls	r3, r3, #1
 8015010:	4413      	add	r3, r2
 8015012:	00db      	lsls	r3, r3, #3
 8015014:	440b      	add	r3, r1
 8015016:	3308      	adds	r3, #8
 8015018:	68fa      	ldr	r2, [r7, #12]
 801501a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801501c:	7c7a      	ldrb	r2, [r7, #17]
 801501e:	4968      	ldr	r1, [pc, #416]	; (80151c0 <etharp_query+0x268>)
 8015020:	4613      	mov	r3, r2
 8015022:	005b      	lsls	r3, r3, #1
 8015024:	4413      	add	r3, r2
 8015026:	00db      	lsls	r3, r3, #3
 8015028:	440b      	add	r3, r1
 801502a:	3314      	adds	r3, #20
 801502c:	781b      	ldrb	r3, [r3, #0]
 801502e:	2b01      	cmp	r3, #1
 8015030:	d011      	beq.n	8015056 <etharp_query+0xfe>
 8015032:	7c7a      	ldrb	r2, [r7, #17]
 8015034:	4962      	ldr	r1, [pc, #392]	; (80151c0 <etharp_query+0x268>)
 8015036:	4613      	mov	r3, r2
 8015038:	005b      	lsls	r3, r3, #1
 801503a:	4413      	add	r3, r2
 801503c:	00db      	lsls	r3, r3, #3
 801503e:	440b      	add	r3, r1
 8015040:	3314      	adds	r3, #20
 8015042:	781b      	ldrb	r3, [r3, #0]
 8015044:	2b01      	cmp	r3, #1
 8015046:	d806      	bhi.n	8015056 <etharp_query+0xfe>
 8015048:	4b5a      	ldr	r3, [pc, #360]	; (80151b4 <etharp_query+0x25c>)
 801504a:	f240 32cd 	movw	r2, #973	; 0x3cd
 801504e:	495d      	ldr	r1, [pc, #372]	; (80151c4 <etharp_query+0x26c>)
 8015050:	485a      	ldr	r0, [pc, #360]	; (80151bc <etharp_query+0x264>)
 8015052:	f002 f8a9 	bl	80171a8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8015056:	6a3b      	ldr	r3, [r7, #32]
 8015058:	2b00      	cmp	r3, #0
 801505a:	d102      	bne.n	8015062 <etharp_query+0x10a>
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	2b00      	cmp	r3, #0
 8015060:	d10c      	bne.n	801507c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8015062:	68b9      	ldr	r1, [r7, #8]
 8015064:	68f8      	ldr	r0, [r7, #12]
 8015066:	f000 f963 	bl	8015330 <etharp_request>
 801506a:	4603      	mov	r3, r0
 801506c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	2b00      	cmp	r3, #0
 8015074:	d102      	bne.n	801507c <etharp_query+0x124>
      return result;
 8015076:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801507a:	e096      	b.n	80151aa <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	2b00      	cmp	r3, #0
 8015080:	d106      	bne.n	8015090 <etharp_query+0x138>
 8015082:	4b4c      	ldr	r3, [pc, #304]	; (80151b4 <etharp_query+0x25c>)
 8015084:	f240 32e1 	movw	r2, #993	; 0x3e1
 8015088:	494f      	ldr	r1, [pc, #316]	; (80151c8 <etharp_query+0x270>)
 801508a:	484c      	ldr	r0, [pc, #304]	; (80151bc <etharp_query+0x264>)
 801508c:	f002 f88c 	bl	80171a8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8015090:	7c7a      	ldrb	r2, [r7, #17]
 8015092:	494b      	ldr	r1, [pc, #300]	; (80151c0 <etharp_query+0x268>)
 8015094:	4613      	mov	r3, r2
 8015096:	005b      	lsls	r3, r3, #1
 8015098:	4413      	add	r3, r2
 801509a:	00db      	lsls	r3, r3, #3
 801509c:	440b      	add	r3, r1
 801509e:	3314      	adds	r3, #20
 80150a0:	781b      	ldrb	r3, [r3, #0]
 80150a2:	2b01      	cmp	r3, #1
 80150a4:	d917      	bls.n	80150d6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80150a6:	4a49      	ldr	r2, [pc, #292]	; (80151cc <etharp_query+0x274>)
 80150a8:	7c7b      	ldrb	r3, [r7, #17]
 80150aa:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80150ac:	7c7a      	ldrb	r2, [r7, #17]
 80150ae:	4613      	mov	r3, r2
 80150b0:	005b      	lsls	r3, r3, #1
 80150b2:	4413      	add	r3, r2
 80150b4:	00db      	lsls	r3, r3, #3
 80150b6:	3308      	adds	r3, #8
 80150b8:	4a41      	ldr	r2, [pc, #260]	; (80151c0 <etharp_query+0x268>)
 80150ba:	4413      	add	r3, r2
 80150bc:	3304      	adds	r3, #4
 80150be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80150c2:	9200      	str	r2, [sp, #0]
 80150c4:	697a      	ldr	r2, [r7, #20]
 80150c6:	6879      	ldr	r1, [r7, #4]
 80150c8:	68f8      	ldr	r0, [r7, #12]
 80150ca:	f001 fc8d 	bl	80169e8 <ethernet_output>
 80150ce:	4603      	mov	r3, r0
 80150d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80150d4:	e067      	b.n	80151a6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80150d6:	7c7a      	ldrb	r2, [r7, #17]
 80150d8:	4939      	ldr	r1, [pc, #228]	; (80151c0 <etharp_query+0x268>)
 80150da:	4613      	mov	r3, r2
 80150dc:	005b      	lsls	r3, r3, #1
 80150de:	4413      	add	r3, r2
 80150e0:	00db      	lsls	r3, r3, #3
 80150e2:	440b      	add	r3, r1
 80150e4:	3314      	adds	r3, #20
 80150e6:	781b      	ldrb	r3, [r3, #0]
 80150e8:	2b01      	cmp	r3, #1
 80150ea:	d15c      	bne.n	80151a6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80150ec:	2300      	movs	r3, #0
 80150ee:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80150f4:	e01c      	b.n	8015130 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80150f6:	69fb      	ldr	r3, [r7, #28]
 80150f8:	895a      	ldrh	r2, [r3, #10]
 80150fa:	69fb      	ldr	r3, [r7, #28]
 80150fc:	891b      	ldrh	r3, [r3, #8]
 80150fe:	429a      	cmp	r2, r3
 8015100:	d10a      	bne.n	8015118 <etharp_query+0x1c0>
 8015102:	69fb      	ldr	r3, [r7, #28]
 8015104:	681b      	ldr	r3, [r3, #0]
 8015106:	2b00      	cmp	r3, #0
 8015108:	d006      	beq.n	8015118 <etharp_query+0x1c0>
 801510a:	4b2a      	ldr	r3, [pc, #168]	; (80151b4 <etharp_query+0x25c>)
 801510c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8015110:	492f      	ldr	r1, [pc, #188]	; (80151d0 <etharp_query+0x278>)
 8015112:	482a      	ldr	r0, [pc, #168]	; (80151bc <etharp_query+0x264>)
 8015114:	f002 f848 	bl	80171a8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8015118:	69fb      	ldr	r3, [r7, #28]
 801511a:	7b1b      	ldrb	r3, [r3, #12]
 801511c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015120:	2b00      	cmp	r3, #0
 8015122:	d002      	beq.n	801512a <etharp_query+0x1d2>
        copy_needed = 1;
 8015124:	2301      	movs	r3, #1
 8015126:	61bb      	str	r3, [r7, #24]
        break;
 8015128:	e005      	b.n	8015136 <etharp_query+0x1de>
      }
      p = p->next;
 801512a:	69fb      	ldr	r3, [r7, #28]
 801512c:	681b      	ldr	r3, [r3, #0]
 801512e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015130:	69fb      	ldr	r3, [r7, #28]
 8015132:	2b00      	cmp	r3, #0
 8015134:	d1df      	bne.n	80150f6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8015136:	69bb      	ldr	r3, [r7, #24]
 8015138:	2b00      	cmp	r3, #0
 801513a:	d007      	beq.n	801514c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801513c:	687a      	ldr	r2, [r7, #4]
 801513e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8015142:	200e      	movs	r0, #14
 8015144:	f7f6 fc2e 	bl	800b9a4 <pbuf_clone>
 8015148:	61f8      	str	r0, [r7, #28]
 801514a:	e004      	b.n	8015156 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8015150:	69f8      	ldr	r0, [r7, #28]
 8015152:	f7f6 fa55 	bl	800b600 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8015156:	69fb      	ldr	r3, [r7, #28]
 8015158:	2b00      	cmp	r3, #0
 801515a:	d021      	beq.n	80151a0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801515c:	7c7a      	ldrb	r2, [r7, #17]
 801515e:	4918      	ldr	r1, [pc, #96]	; (80151c0 <etharp_query+0x268>)
 8015160:	4613      	mov	r3, r2
 8015162:	005b      	lsls	r3, r3, #1
 8015164:	4413      	add	r3, r2
 8015166:	00db      	lsls	r3, r3, #3
 8015168:	440b      	add	r3, r1
 801516a:	681b      	ldr	r3, [r3, #0]
 801516c:	2b00      	cmp	r3, #0
 801516e:	d00a      	beq.n	8015186 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8015170:	7c7a      	ldrb	r2, [r7, #17]
 8015172:	4913      	ldr	r1, [pc, #76]	; (80151c0 <etharp_query+0x268>)
 8015174:	4613      	mov	r3, r2
 8015176:	005b      	lsls	r3, r3, #1
 8015178:	4413      	add	r3, r2
 801517a:	00db      	lsls	r3, r3, #3
 801517c:	440b      	add	r3, r1
 801517e:	681b      	ldr	r3, [r3, #0]
 8015180:	4618      	mov	r0, r3
 8015182:	f7f6 f997 	bl	800b4b4 <pbuf_free>
      }
      arp_table[i].q = p;
 8015186:	7c7a      	ldrb	r2, [r7, #17]
 8015188:	490d      	ldr	r1, [pc, #52]	; (80151c0 <etharp_query+0x268>)
 801518a:	4613      	mov	r3, r2
 801518c:	005b      	lsls	r3, r3, #1
 801518e:	4413      	add	r3, r2
 8015190:	00db      	lsls	r3, r3, #3
 8015192:	440b      	add	r3, r1
 8015194:	69fa      	ldr	r2, [r7, #28]
 8015196:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8015198:	2300      	movs	r3, #0
 801519a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801519e:	e002      	b.n	80151a6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80151a0:	23ff      	movs	r3, #255	; 0xff
 80151a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80151a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80151aa:	4618      	mov	r0, r3
 80151ac:	3728      	adds	r7, #40	; 0x28
 80151ae:	46bd      	mov	sp, r7
 80151b0:	bd80      	pop	{r7, pc}
 80151b2:	bf00      	nop
 80151b4:	0801b824 	.word	0x0801b824
 80151b8:	0801b9d0 	.word	0x0801b9d0
 80151bc:	0801b89c 	.word	0x0801b89c
 80151c0:	20008598 	.word	0x20008598
 80151c4:	0801b9e0 	.word	0x0801b9e0
 80151c8:	0801b9c4 	.word	0x0801b9c4
 80151cc:	20008688 	.word	0x20008688
 80151d0:	0801ba08 	.word	0x0801ba08

080151d4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80151d4:	b580      	push	{r7, lr}
 80151d6:	b08a      	sub	sp, #40	; 0x28
 80151d8:	af02      	add	r7, sp, #8
 80151da:	60f8      	str	r0, [r7, #12]
 80151dc:	60b9      	str	r1, [r7, #8]
 80151de:	607a      	str	r2, [r7, #4]
 80151e0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80151e2:	2300      	movs	r3, #0
 80151e4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d106      	bne.n	80151fa <etharp_raw+0x26>
 80151ec:	4b3a      	ldr	r3, [pc, #232]	; (80152d8 <etharp_raw+0x104>)
 80151ee:	f240 4257 	movw	r2, #1111	; 0x457
 80151f2:	493a      	ldr	r1, [pc, #232]	; (80152dc <etharp_raw+0x108>)
 80151f4:	483a      	ldr	r0, [pc, #232]	; (80152e0 <etharp_raw+0x10c>)
 80151f6:	f001 ffd7 	bl	80171a8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80151fa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80151fe:	211c      	movs	r1, #28
 8015200:	200e      	movs	r0, #14
 8015202:	f7f5 fe73 	bl	800aeec <pbuf_alloc>
 8015206:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8015208:	69bb      	ldr	r3, [r7, #24]
 801520a:	2b00      	cmp	r3, #0
 801520c:	d102      	bne.n	8015214 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801520e:	f04f 33ff 	mov.w	r3, #4294967295
 8015212:	e05d      	b.n	80152d0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015214:	69bb      	ldr	r3, [r7, #24]
 8015216:	895b      	ldrh	r3, [r3, #10]
 8015218:	2b1b      	cmp	r3, #27
 801521a:	d806      	bhi.n	801522a <etharp_raw+0x56>
 801521c:	4b2e      	ldr	r3, [pc, #184]	; (80152d8 <etharp_raw+0x104>)
 801521e:	f240 4262 	movw	r2, #1122	; 0x462
 8015222:	4930      	ldr	r1, [pc, #192]	; (80152e4 <etharp_raw+0x110>)
 8015224:	482e      	ldr	r0, [pc, #184]	; (80152e0 <etharp_raw+0x10c>)
 8015226:	f001 ffbf 	bl	80171a8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801522a:	69bb      	ldr	r3, [r7, #24]
 801522c:	685b      	ldr	r3, [r3, #4]
 801522e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015230:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015232:	4618      	mov	r0, r3
 8015234:	f7f4 fd86 	bl	8009d44 <lwip_htons>
 8015238:	4603      	mov	r3, r0
 801523a:	461a      	mov	r2, r3
 801523c:	697b      	ldr	r3, [r7, #20]
 801523e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015246:	2b06      	cmp	r3, #6
 8015248:	d006      	beq.n	8015258 <etharp_raw+0x84>
 801524a:	4b23      	ldr	r3, [pc, #140]	; (80152d8 <etharp_raw+0x104>)
 801524c:	f240 4269 	movw	r2, #1129	; 0x469
 8015250:	4925      	ldr	r1, [pc, #148]	; (80152e8 <etharp_raw+0x114>)
 8015252:	4823      	ldr	r0, [pc, #140]	; (80152e0 <etharp_raw+0x10c>)
 8015254:	f001 ffa8 	bl	80171a8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8015258:	697b      	ldr	r3, [r7, #20]
 801525a:	3308      	adds	r3, #8
 801525c:	2206      	movs	r2, #6
 801525e:	6839      	ldr	r1, [r7, #0]
 8015260:	4618      	mov	r0, r3
 8015262:	f001 ff16 	bl	8017092 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8015266:	697b      	ldr	r3, [r7, #20]
 8015268:	3312      	adds	r3, #18
 801526a:	2206      	movs	r2, #6
 801526c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801526e:	4618      	mov	r0, r3
 8015270:	f001 ff0f 	bl	8017092 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015274:	697b      	ldr	r3, [r7, #20]
 8015276:	330e      	adds	r3, #14
 8015278:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801527a:	6812      	ldr	r2, [r2, #0]
 801527c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801527e:	697b      	ldr	r3, [r7, #20]
 8015280:	3318      	adds	r3, #24
 8015282:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015284:	6812      	ldr	r2, [r2, #0]
 8015286:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8015288:	697b      	ldr	r3, [r7, #20]
 801528a:	2200      	movs	r2, #0
 801528c:	701a      	strb	r2, [r3, #0]
 801528e:	2200      	movs	r2, #0
 8015290:	f042 0201 	orr.w	r2, r2, #1
 8015294:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015296:	697b      	ldr	r3, [r7, #20]
 8015298:	2200      	movs	r2, #0
 801529a:	f042 0208 	orr.w	r2, r2, #8
 801529e:	709a      	strb	r2, [r3, #2]
 80152a0:	2200      	movs	r2, #0
 80152a2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80152a4:	697b      	ldr	r3, [r7, #20]
 80152a6:	2206      	movs	r2, #6
 80152a8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80152aa:	697b      	ldr	r3, [r7, #20]
 80152ac:	2204      	movs	r2, #4
 80152ae:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80152b0:	f640 0306 	movw	r3, #2054	; 0x806
 80152b4:	9300      	str	r3, [sp, #0]
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	68ba      	ldr	r2, [r7, #8]
 80152ba:	69b9      	ldr	r1, [r7, #24]
 80152bc:	68f8      	ldr	r0, [r7, #12]
 80152be:	f001 fb93 	bl	80169e8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80152c2:	69b8      	ldr	r0, [r7, #24]
 80152c4:	f7f6 f8f6 	bl	800b4b4 <pbuf_free>
  p = NULL;
 80152c8:	2300      	movs	r3, #0
 80152ca:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80152cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80152d0:	4618      	mov	r0, r3
 80152d2:	3720      	adds	r7, #32
 80152d4:	46bd      	mov	sp, r7
 80152d6:	bd80      	pop	{r7, pc}
 80152d8:	0801b824 	.word	0x0801b824
 80152dc:	0801b974 	.word	0x0801b974
 80152e0:	0801b89c 	.word	0x0801b89c
 80152e4:	0801ba24 	.word	0x0801ba24
 80152e8:	0801ba58 	.word	0x0801ba58

080152ec <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80152ec:	b580      	push	{r7, lr}
 80152ee:	b088      	sub	sp, #32
 80152f0:	af04      	add	r7, sp, #16
 80152f2:	60f8      	str	r0, [r7, #12]
 80152f4:	60b9      	str	r1, [r7, #8]
 80152f6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80152f8:	68fb      	ldr	r3, [r7, #12]
 80152fa:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80152fe:	68fb      	ldr	r3, [r7, #12]
 8015300:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015308:	2201      	movs	r2, #1
 801530a:	9203      	str	r2, [sp, #12]
 801530c:	68ba      	ldr	r2, [r7, #8]
 801530e:	9202      	str	r2, [sp, #8]
 8015310:	4a06      	ldr	r2, [pc, #24]	; (801532c <etharp_request_dst+0x40>)
 8015312:	9201      	str	r2, [sp, #4]
 8015314:	9300      	str	r3, [sp, #0]
 8015316:	4603      	mov	r3, r0
 8015318:	687a      	ldr	r2, [r7, #4]
 801531a:	68f8      	ldr	r0, [r7, #12]
 801531c:	f7ff ff5a 	bl	80151d4 <etharp_raw>
 8015320:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8015322:	4618      	mov	r0, r3
 8015324:	3710      	adds	r7, #16
 8015326:	46bd      	mov	sp, r7
 8015328:	bd80      	pop	{r7, pc}
 801532a:	bf00      	nop
 801532c:	0801c034 	.word	0x0801c034

08015330 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015330:	b580      	push	{r7, lr}
 8015332:	b082      	sub	sp, #8
 8015334:	af00      	add	r7, sp, #0
 8015336:	6078      	str	r0, [r7, #4]
 8015338:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801533a:	4a05      	ldr	r2, [pc, #20]	; (8015350 <etharp_request+0x20>)
 801533c:	6839      	ldr	r1, [r7, #0]
 801533e:	6878      	ldr	r0, [r7, #4]
 8015340:	f7ff ffd4 	bl	80152ec <etharp_request_dst>
 8015344:	4603      	mov	r3, r0
}
 8015346:	4618      	mov	r0, r3
 8015348:	3708      	adds	r7, #8
 801534a:	46bd      	mov	sp, r7
 801534c:	bd80      	pop	{r7, pc}
 801534e:	bf00      	nop
 8015350:	0801c02c 	.word	0x0801c02c

08015354 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015354:	b580      	push	{r7, lr}
 8015356:	b08e      	sub	sp, #56	; 0x38
 8015358:	af04      	add	r7, sp, #16
 801535a:	6078      	str	r0, [r7, #4]
 801535c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801535e:	4b79      	ldr	r3, [pc, #484]	; (8015544 <icmp_input+0x1f0>)
 8015360:	689b      	ldr	r3, [r3, #8]
 8015362:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8015364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015366:	781b      	ldrb	r3, [r3, #0]
 8015368:	f003 030f 	and.w	r3, r3, #15
 801536c:	b2db      	uxtb	r3, r3
 801536e:	009b      	lsls	r3, r3, #2
 8015370:	b2db      	uxtb	r3, r3
 8015372:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8015374:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015376:	2b13      	cmp	r3, #19
 8015378:	f240 80cd 	bls.w	8015516 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	895b      	ldrh	r3, [r3, #10]
 8015380:	2b03      	cmp	r3, #3
 8015382:	f240 80ca 	bls.w	801551a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	685b      	ldr	r3, [r3, #4]
 801538a:	781b      	ldrb	r3, [r3, #0]
 801538c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8015390:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8015394:	2b00      	cmp	r3, #0
 8015396:	f000 80b7 	beq.w	8015508 <icmp_input+0x1b4>
 801539a:	2b08      	cmp	r3, #8
 801539c:	f040 80b7 	bne.w	801550e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80153a0:	4b69      	ldr	r3, [pc, #420]	; (8015548 <icmp_input+0x1f4>)
 80153a2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80153a4:	4b67      	ldr	r3, [pc, #412]	; (8015544 <icmp_input+0x1f0>)
 80153a6:	695b      	ldr	r3, [r3, #20]
 80153a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80153ac:	2be0      	cmp	r3, #224	; 0xe0
 80153ae:	f000 80bb 	beq.w	8015528 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80153b2:	4b64      	ldr	r3, [pc, #400]	; (8015544 <icmp_input+0x1f0>)
 80153b4:	695b      	ldr	r3, [r3, #20]
 80153b6:	4a63      	ldr	r2, [pc, #396]	; (8015544 <icmp_input+0x1f0>)
 80153b8:	6812      	ldr	r2, [r2, #0]
 80153ba:	4611      	mov	r1, r2
 80153bc:	4618      	mov	r0, r3
 80153be:	f000 fc0b 	bl	8015bd8 <ip4_addr_isbroadcast_u32>
 80153c2:	4603      	mov	r3, r0
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	f040 80b1 	bne.w	801552c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	891b      	ldrh	r3, [r3, #8]
 80153ce:	2b07      	cmp	r3, #7
 80153d0:	f240 80a5 	bls.w	801551e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80153d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80153d6:	330e      	adds	r3, #14
 80153d8:	4619      	mov	r1, r3
 80153da:	6878      	ldr	r0, [r7, #4]
 80153dc:	f7f5 ffd4 	bl	800b388 <pbuf_add_header>
 80153e0:	4603      	mov	r3, r0
 80153e2:	2b00      	cmp	r3, #0
 80153e4:	d04b      	beq.n	801547e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	891a      	ldrh	r2, [r3, #8]
 80153ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80153ec:	4413      	add	r3, r2
 80153ee:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	891b      	ldrh	r3, [r3, #8]
 80153f4:	8b7a      	ldrh	r2, [r7, #26]
 80153f6:	429a      	cmp	r2, r3
 80153f8:	f0c0 809a 	bcc.w	8015530 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80153fc:	8b7b      	ldrh	r3, [r7, #26]
 80153fe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015402:	4619      	mov	r1, r3
 8015404:	200e      	movs	r0, #14
 8015406:	f7f5 fd71 	bl	800aeec <pbuf_alloc>
 801540a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801540c:	697b      	ldr	r3, [r7, #20]
 801540e:	2b00      	cmp	r3, #0
 8015410:	f000 8090 	beq.w	8015534 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015414:	697b      	ldr	r3, [r7, #20]
 8015416:	895b      	ldrh	r3, [r3, #10]
 8015418:	461a      	mov	r2, r3
 801541a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801541c:	3308      	adds	r3, #8
 801541e:	429a      	cmp	r2, r3
 8015420:	d203      	bcs.n	801542a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8015422:	6978      	ldr	r0, [r7, #20]
 8015424:	f7f6 f846 	bl	800b4b4 <pbuf_free>
          goto icmperr;
 8015428:	e085      	b.n	8015536 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801542a:	697b      	ldr	r3, [r7, #20]
 801542c:	685b      	ldr	r3, [r3, #4]
 801542e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015430:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015432:	4618      	mov	r0, r3
 8015434:	f001 fe2d 	bl	8017092 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8015438:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801543a:	4619      	mov	r1, r3
 801543c:	6978      	ldr	r0, [r7, #20]
 801543e:	f7f5 ffb3 	bl	800b3a8 <pbuf_remove_header>
 8015442:	4603      	mov	r3, r0
 8015444:	2b00      	cmp	r3, #0
 8015446:	d009      	beq.n	801545c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8015448:	4b40      	ldr	r3, [pc, #256]	; (801554c <icmp_input+0x1f8>)
 801544a:	22b6      	movs	r2, #182	; 0xb6
 801544c:	4940      	ldr	r1, [pc, #256]	; (8015550 <icmp_input+0x1fc>)
 801544e:	4841      	ldr	r0, [pc, #260]	; (8015554 <icmp_input+0x200>)
 8015450:	f001 feaa 	bl	80171a8 <iprintf>
          pbuf_free(r);
 8015454:	6978      	ldr	r0, [r7, #20]
 8015456:	f7f6 f82d 	bl	800b4b4 <pbuf_free>
          goto icmperr;
 801545a:	e06c      	b.n	8015536 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801545c:	6879      	ldr	r1, [r7, #4]
 801545e:	6978      	ldr	r0, [r7, #20]
 8015460:	f7f6 f95c 	bl	800b71c <pbuf_copy>
 8015464:	4603      	mov	r3, r0
 8015466:	2b00      	cmp	r3, #0
 8015468:	d003      	beq.n	8015472 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801546a:	6978      	ldr	r0, [r7, #20]
 801546c:	f7f6 f822 	bl	800b4b4 <pbuf_free>
          goto icmperr;
 8015470:	e061      	b.n	8015536 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8015472:	6878      	ldr	r0, [r7, #4]
 8015474:	f7f6 f81e 	bl	800b4b4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8015478:	697b      	ldr	r3, [r7, #20]
 801547a:	607b      	str	r3, [r7, #4]
 801547c:	e00f      	b.n	801549e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801547e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015480:	330e      	adds	r3, #14
 8015482:	4619      	mov	r1, r3
 8015484:	6878      	ldr	r0, [r7, #4]
 8015486:	f7f5 ff8f 	bl	800b3a8 <pbuf_remove_header>
 801548a:	4603      	mov	r3, r0
 801548c:	2b00      	cmp	r3, #0
 801548e:	d006      	beq.n	801549e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8015490:	4b2e      	ldr	r3, [pc, #184]	; (801554c <icmp_input+0x1f8>)
 8015492:	22c7      	movs	r2, #199	; 0xc7
 8015494:	4930      	ldr	r1, [pc, #192]	; (8015558 <icmp_input+0x204>)
 8015496:	482f      	ldr	r0, [pc, #188]	; (8015554 <icmp_input+0x200>)
 8015498:	f001 fe86 	bl	80171a8 <iprintf>
          goto icmperr;
 801549c:	e04b      	b.n	8015536 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	685b      	ldr	r3, [r3, #4]
 80154a2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80154a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80154a6:	4619      	mov	r1, r3
 80154a8:	6878      	ldr	r0, [r7, #4]
 80154aa:	f7f5 ff6d 	bl	800b388 <pbuf_add_header>
 80154ae:	4603      	mov	r3, r0
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d12b      	bne.n	801550c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	685b      	ldr	r3, [r3, #4]
 80154b8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80154ba:	69fb      	ldr	r3, [r7, #28]
 80154bc:	681a      	ldr	r2, [r3, #0]
 80154be:	68fb      	ldr	r3, [r7, #12]
 80154c0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80154c2:	4b20      	ldr	r3, [pc, #128]	; (8015544 <icmp_input+0x1f0>)
 80154c4:	691a      	ldr	r2, [r3, #16]
 80154c6:	68fb      	ldr	r3, [r7, #12]
 80154c8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80154ca:	693b      	ldr	r3, [r7, #16]
 80154cc:	2200      	movs	r2, #0
 80154ce:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80154d0:	693b      	ldr	r3, [r7, #16]
 80154d2:	2200      	movs	r2, #0
 80154d4:	709a      	strb	r2, [r3, #2]
 80154d6:	2200      	movs	r2, #0
 80154d8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80154da:	68fb      	ldr	r3, [r7, #12]
 80154dc:	22ff      	movs	r2, #255	; 0xff
 80154de:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80154e0:	68fb      	ldr	r3, [r7, #12]
 80154e2:	2200      	movs	r2, #0
 80154e4:	729a      	strb	r2, [r3, #10]
 80154e6:	2200      	movs	r2, #0
 80154e8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80154ea:	683b      	ldr	r3, [r7, #0]
 80154ec:	9302      	str	r3, [sp, #8]
 80154ee:	2301      	movs	r3, #1
 80154f0:	9301      	str	r3, [sp, #4]
 80154f2:	2300      	movs	r3, #0
 80154f4:	9300      	str	r3, [sp, #0]
 80154f6:	23ff      	movs	r3, #255	; 0xff
 80154f8:	2200      	movs	r2, #0
 80154fa:	69f9      	ldr	r1, [r7, #28]
 80154fc:	6878      	ldr	r0, [r7, #4]
 80154fe:	f000 fa93 	bl	8015a28 <ip4_output_if>
 8015502:	4603      	mov	r3, r0
 8015504:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8015506:	e001      	b.n	801550c <icmp_input+0x1b8>
      break;
 8015508:	bf00      	nop
 801550a:	e000      	b.n	801550e <icmp_input+0x1ba>
      break;
 801550c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801550e:	6878      	ldr	r0, [r7, #4]
 8015510:	f7f5 ffd0 	bl	800b4b4 <pbuf_free>
  return;
 8015514:	e013      	b.n	801553e <icmp_input+0x1ea>
    goto lenerr;
 8015516:	bf00      	nop
 8015518:	e002      	b.n	8015520 <icmp_input+0x1cc>
    goto lenerr;
 801551a:	bf00      	nop
 801551c:	e000      	b.n	8015520 <icmp_input+0x1cc>
        goto lenerr;
 801551e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8015520:	6878      	ldr	r0, [r7, #4]
 8015522:	f7f5 ffc7 	bl	800b4b4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015526:	e00a      	b.n	801553e <icmp_input+0x1ea>
        goto icmperr;
 8015528:	bf00      	nop
 801552a:	e004      	b.n	8015536 <icmp_input+0x1e2>
        goto icmperr;
 801552c:	bf00      	nop
 801552e:	e002      	b.n	8015536 <icmp_input+0x1e2>
          goto icmperr;
 8015530:	bf00      	nop
 8015532:	e000      	b.n	8015536 <icmp_input+0x1e2>
          goto icmperr;
 8015534:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8015536:	6878      	ldr	r0, [r7, #4]
 8015538:	f7f5 ffbc 	bl	800b4b4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801553c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801553e:	3728      	adds	r7, #40	; 0x28
 8015540:	46bd      	mov	sp, r7
 8015542:	bd80      	pop	{r7, pc}
 8015544:	2000b8a8 	.word	0x2000b8a8
 8015548:	2000b8bc 	.word	0x2000b8bc
 801554c:	0801ba9c 	.word	0x0801ba9c
 8015550:	0801bad4 	.word	0x0801bad4
 8015554:	0801bb0c 	.word	0x0801bb0c
 8015558:	0801bb34 	.word	0x0801bb34

0801555c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801555c:	b580      	push	{r7, lr}
 801555e:	b082      	sub	sp, #8
 8015560:	af00      	add	r7, sp, #0
 8015562:	6078      	str	r0, [r7, #4]
 8015564:	460b      	mov	r3, r1
 8015566:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015568:	78fb      	ldrb	r3, [r7, #3]
 801556a:	461a      	mov	r2, r3
 801556c:	2103      	movs	r1, #3
 801556e:	6878      	ldr	r0, [r7, #4]
 8015570:	f000 f814 	bl	801559c <icmp_send_response>
}
 8015574:	bf00      	nop
 8015576:	3708      	adds	r7, #8
 8015578:	46bd      	mov	sp, r7
 801557a:	bd80      	pop	{r7, pc}

0801557c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801557c:	b580      	push	{r7, lr}
 801557e:	b082      	sub	sp, #8
 8015580:	af00      	add	r7, sp, #0
 8015582:	6078      	str	r0, [r7, #4]
 8015584:	460b      	mov	r3, r1
 8015586:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015588:	78fb      	ldrb	r3, [r7, #3]
 801558a:	461a      	mov	r2, r3
 801558c:	210b      	movs	r1, #11
 801558e:	6878      	ldr	r0, [r7, #4]
 8015590:	f000 f804 	bl	801559c <icmp_send_response>
}
 8015594:	bf00      	nop
 8015596:	3708      	adds	r7, #8
 8015598:	46bd      	mov	sp, r7
 801559a:	bd80      	pop	{r7, pc}

0801559c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801559c:	b580      	push	{r7, lr}
 801559e:	b08c      	sub	sp, #48	; 0x30
 80155a0:	af04      	add	r7, sp, #16
 80155a2:	6078      	str	r0, [r7, #4]
 80155a4:	460b      	mov	r3, r1
 80155a6:	70fb      	strb	r3, [r7, #3]
 80155a8:	4613      	mov	r3, r2
 80155aa:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80155ac:	f44f 7220 	mov.w	r2, #640	; 0x280
 80155b0:	2124      	movs	r1, #36	; 0x24
 80155b2:	2022      	movs	r0, #34	; 0x22
 80155b4:	f7f5 fc9a 	bl	800aeec <pbuf_alloc>
 80155b8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80155ba:	69fb      	ldr	r3, [r7, #28]
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d04c      	beq.n	801565a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80155c0:	69fb      	ldr	r3, [r7, #28]
 80155c2:	895b      	ldrh	r3, [r3, #10]
 80155c4:	2b23      	cmp	r3, #35	; 0x23
 80155c6:	d806      	bhi.n	80155d6 <icmp_send_response+0x3a>
 80155c8:	4b26      	ldr	r3, [pc, #152]	; (8015664 <icmp_send_response+0xc8>)
 80155ca:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80155ce:	4926      	ldr	r1, [pc, #152]	; (8015668 <icmp_send_response+0xcc>)
 80155d0:	4826      	ldr	r0, [pc, #152]	; (801566c <icmp_send_response+0xd0>)
 80155d2:	f001 fde9 	bl	80171a8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	685b      	ldr	r3, [r3, #4]
 80155da:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80155dc:	69fb      	ldr	r3, [r7, #28]
 80155de:	685b      	ldr	r3, [r3, #4]
 80155e0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80155e2:	697b      	ldr	r3, [r7, #20]
 80155e4:	78fa      	ldrb	r2, [r7, #3]
 80155e6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80155e8:	697b      	ldr	r3, [r7, #20]
 80155ea:	78ba      	ldrb	r2, [r7, #2]
 80155ec:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80155ee:	697b      	ldr	r3, [r7, #20]
 80155f0:	2200      	movs	r2, #0
 80155f2:	711a      	strb	r2, [r3, #4]
 80155f4:	2200      	movs	r2, #0
 80155f6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80155f8:	697b      	ldr	r3, [r7, #20]
 80155fa:	2200      	movs	r2, #0
 80155fc:	719a      	strb	r2, [r3, #6]
 80155fe:	2200      	movs	r2, #0
 8015600:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8015602:	69fb      	ldr	r3, [r7, #28]
 8015604:	685b      	ldr	r3, [r3, #4]
 8015606:	f103 0008 	add.w	r0, r3, #8
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	685b      	ldr	r3, [r3, #4]
 801560e:	221c      	movs	r2, #28
 8015610:	4619      	mov	r1, r3
 8015612:	f001 fd3e 	bl	8017092 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8015616:	69bb      	ldr	r3, [r7, #24]
 8015618:	68db      	ldr	r3, [r3, #12]
 801561a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801561c:	f107 030c 	add.w	r3, r7, #12
 8015620:	4618      	mov	r0, r3
 8015622:	f000 f825 	bl	8015670 <ip4_route>
 8015626:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8015628:	693b      	ldr	r3, [r7, #16]
 801562a:	2b00      	cmp	r3, #0
 801562c:	d011      	beq.n	8015652 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801562e:	697b      	ldr	r3, [r7, #20]
 8015630:	2200      	movs	r2, #0
 8015632:	709a      	strb	r2, [r3, #2]
 8015634:	2200      	movs	r2, #0
 8015636:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8015638:	f107 020c 	add.w	r2, r7, #12
 801563c:	693b      	ldr	r3, [r7, #16]
 801563e:	9302      	str	r3, [sp, #8]
 8015640:	2301      	movs	r3, #1
 8015642:	9301      	str	r3, [sp, #4]
 8015644:	2300      	movs	r3, #0
 8015646:	9300      	str	r3, [sp, #0]
 8015648:	23ff      	movs	r3, #255	; 0xff
 801564a:	2100      	movs	r1, #0
 801564c:	69f8      	ldr	r0, [r7, #28]
 801564e:	f000 f9eb 	bl	8015a28 <ip4_output_if>
  }
  pbuf_free(q);
 8015652:	69f8      	ldr	r0, [r7, #28]
 8015654:	f7f5 ff2e 	bl	800b4b4 <pbuf_free>
 8015658:	e000      	b.n	801565c <icmp_send_response+0xc0>
    return;
 801565a:	bf00      	nop
}
 801565c:	3720      	adds	r7, #32
 801565e:	46bd      	mov	sp, r7
 8015660:	bd80      	pop	{r7, pc}
 8015662:	bf00      	nop
 8015664:	0801ba9c 	.word	0x0801ba9c
 8015668:	0801bb68 	.word	0x0801bb68
 801566c:	0801bb0c 	.word	0x0801bb0c

08015670 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8015670:	b480      	push	{r7}
 8015672:	b085      	sub	sp, #20
 8015674:	af00      	add	r7, sp, #0
 8015676:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015678:	4b33      	ldr	r3, [pc, #204]	; (8015748 <ip4_route+0xd8>)
 801567a:	681b      	ldr	r3, [r3, #0]
 801567c:	60fb      	str	r3, [r7, #12]
 801567e:	e036      	b.n	80156ee <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015680:	68fb      	ldr	r3, [r7, #12]
 8015682:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015686:	f003 0301 	and.w	r3, r3, #1
 801568a:	b2db      	uxtb	r3, r3
 801568c:	2b00      	cmp	r3, #0
 801568e:	d02b      	beq.n	80156e8 <ip4_route+0x78>
 8015690:	68fb      	ldr	r3, [r7, #12]
 8015692:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015696:	089b      	lsrs	r3, r3, #2
 8015698:	f003 0301 	and.w	r3, r3, #1
 801569c:	b2db      	uxtb	r3, r3
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d022      	beq.n	80156e8 <ip4_route+0x78>
 80156a2:	68fb      	ldr	r3, [r7, #12]
 80156a4:	3304      	adds	r3, #4
 80156a6:	681b      	ldr	r3, [r3, #0]
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d01d      	beq.n	80156e8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	681a      	ldr	r2, [r3, #0]
 80156b0:	68fb      	ldr	r3, [r7, #12]
 80156b2:	3304      	adds	r3, #4
 80156b4:	681b      	ldr	r3, [r3, #0]
 80156b6:	405a      	eors	r2, r3
 80156b8:	68fb      	ldr	r3, [r7, #12]
 80156ba:	3308      	adds	r3, #8
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	4013      	ands	r3, r2
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	d101      	bne.n	80156c8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80156c4:	68fb      	ldr	r3, [r7, #12]
 80156c6:	e038      	b.n	801573a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80156c8:	68fb      	ldr	r3, [r7, #12]
 80156ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80156ce:	f003 0302 	and.w	r3, r3, #2
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	d108      	bne.n	80156e8 <ip4_route+0x78>
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	681a      	ldr	r2, [r3, #0]
 80156da:	68fb      	ldr	r3, [r7, #12]
 80156dc:	330c      	adds	r3, #12
 80156de:	681b      	ldr	r3, [r3, #0]
 80156e0:	429a      	cmp	r2, r3
 80156e2:	d101      	bne.n	80156e8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80156e4:	68fb      	ldr	r3, [r7, #12]
 80156e6:	e028      	b.n	801573a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	681b      	ldr	r3, [r3, #0]
 80156ec:	60fb      	str	r3, [r7, #12]
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	d1c5      	bne.n	8015680 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80156f4:	4b15      	ldr	r3, [pc, #84]	; (801574c <ip4_route+0xdc>)
 80156f6:	681b      	ldr	r3, [r3, #0]
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d01a      	beq.n	8015732 <ip4_route+0xc2>
 80156fc:	4b13      	ldr	r3, [pc, #76]	; (801574c <ip4_route+0xdc>)
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015704:	f003 0301 	and.w	r3, r3, #1
 8015708:	2b00      	cmp	r3, #0
 801570a:	d012      	beq.n	8015732 <ip4_route+0xc2>
 801570c:	4b0f      	ldr	r3, [pc, #60]	; (801574c <ip4_route+0xdc>)
 801570e:	681b      	ldr	r3, [r3, #0]
 8015710:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015714:	f003 0304 	and.w	r3, r3, #4
 8015718:	2b00      	cmp	r3, #0
 801571a:	d00a      	beq.n	8015732 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801571c:	4b0b      	ldr	r3, [pc, #44]	; (801574c <ip4_route+0xdc>)
 801571e:	681b      	ldr	r3, [r3, #0]
 8015720:	3304      	adds	r3, #4
 8015722:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015724:	2b00      	cmp	r3, #0
 8015726:	d004      	beq.n	8015732 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	681b      	ldr	r3, [r3, #0]
 801572c:	b2db      	uxtb	r3, r3
 801572e:	2b7f      	cmp	r3, #127	; 0x7f
 8015730:	d101      	bne.n	8015736 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8015732:	2300      	movs	r3, #0
 8015734:	e001      	b.n	801573a <ip4_route+0xca>
  }

  return netif_default;
 8015736:	4b05      	ldr	r3, [pc, #20]	; (801574c <ip4_route+0xdc>)
 8015738:	681b      	ldr	r3, [r3, #0]
}
 801573a:	4618      	mov	r0, r3
 801573c:	3714      	adds	r7, #20
 801573e:	46bd      	mov	sp, r7
 8015740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015744:	4770      	bx	lr
 8015746:	bf00      	nop
 8015748:	2000efcc 	.word	0x2000efcc
 801574c:	2000efd0 	.word	0x2000efd0

08015750 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8015750:	b580      	push	{r7, lr}
 8015752:	b082      	sub	sp, #8
 8015754:	af00      	add	r7, sp, #0
 8015756:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801575e:	f003 0301 	and.w	r3, r3, #1
 8015762:	b2db      	uxtb	r3, r3
 8015764:	2b00      	cmp	r3, #0
 8015766:	d016      	beq.n	8015796 <ip4_input_accept+0x46>
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	3304      	adds	r3, #4
 801576c:	681b      	ldr	r3, [r3, #0]
 801576e:	2b00      	cmp	r3, #0
 8015770:	d011      	beq.n	8015796 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015772:	4b0b      	ldr	r3, [pc, #44]	; (80157a0 <ip4_input_accept+0x50>)
 8015774:	695a      	ldr	r2, [r3, #20]
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	3304      	adds	r3, #4
 801577a:	681b      	ldr	r3, [r3, #0]
 801577c:	429a      	cmp	r2, r3
 801577e:	d008      	beq.n	8015792 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8015780:	4b07      	ldr	r3, [pc, #28]	; (80157a0 <ip4_input_accept+0x50>)
 8015782:	695b      	ldr	r3, [r3, #20]
 8015784:	6879      	ldr	r1, [r7, #4]
 8015786:	4618      	mov	r0, r3
 8015788:	f000 fa26 	bl	8015bd8 <ip4_addr_isbroadcast_u32>
 801578c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801578e:	2b00      	cmp	r3, #0
 8015790:	d001      	beq.n	8015796 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8015792:	2301      	movs	r3, #1
 8015794:	e000      	b.n	8015798 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8015796:	2300      	movs	r3, #0
}
 8015798:	4618      	mov	r0, r3
 801579a:	3708      	adds	r7, #8
 801579c:	46bd      	mov	sp, r7
 801579e:	bd80      	pop	{r7, pc}
 80157a0:	2000b8a8 	.word	0x2000b8a8

080157a4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80157a4:	b580      	push	{r7, lr}
 80157a6:	b088      	sub	sp, #32
 80157a8:	af00      	add	r7, sp, #0
 80157aa:	6078      	str	r0, [r7, #4]
 80157ac:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 80157ae:	2301      	movs	r3, #1
 80157b0:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	685b      	ldr	r3, [r3, #4]
 80157b6:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 80157b8:	69fb      	ldr	r3, [r7, #28]
 80157ba:	781b      	ldrb	r3, [r3, #0]
 80157bc:	091b      	lsrs	r3, r3, #4
 80157be:	b2db      	uxtb	r3, r3
 80157c0:	2b04      	cmp	r3, #4
 80157c2:	d004      	beq.n	80157ce <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80157c4:	6878      	ldr	r0, [r7, #4]
 80157c6:	f7f5 fe75 	bl	800b4b4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80157ca:	2300      	movs	r3, #0
 80157cc:	e123      	b.n	8015a16 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80157ce:	69fb      	ldr	r3, [r7, #28]
 80157d0:	781b      	ldrb	r3, [r3, #0]
 80157d2:	f003 030f 	and.w	r3, r3, #15
 80157d6:	b2db      	uxtb	r3, r3
 80157d8:	009b      	lsls	r3, r3, #2
 80157da:	b2db      	uxtb	r3, r3
 80157dc:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80157de:	69fb      	ldr	r3, [r7, #28]
 80157e0:	885b      	ldrh	r3, [r3, #2]
 80157e2:	b29b      	uxth	r3, r3
 80157e4:	4618      	mov	r0, r3
 80157e6:	f7f4 faad 	bl	8009d44 <lwip_htons>
 80157ea:	4603      	mov	r3, r0
 80157ec:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	891b      	ldrh	r3, [r3, #8]
 80157f2:	8a3a      	ldrh	r2, [r7, #16]
 80157f4:	429a      	cmp	r2, r3
 80157f6:	d204      	bcs.n	8015802 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 80157f8:	8a3b      	ldrh	r3, [r7, #16]
 80157fa:	4619      	mov	r1, r3
 80157fc:	6878      	ldr	r0, [r7, #4]
 80157fe:	f7f5 fcd3 	bl	800b1a8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	895b      	ldrh	r3, [r3, #10]
 8015806:	8a7a      	ldrh	r2, [r7, #18]
 8015808:	429a      	cmp	r2, r3
 801580a:	d807      	bhi.n	801581c <ip4_input+0x78>
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	891b      	ldrh	r3, [r3, #8]
 8015810:	8a3a      	ldrh	r2, [r7, #16]
 8015812:	429a      	cmp	r2, r3
 8015814:	d802      	bhi.n	801581c <ip4_input+0x78>
 8015816:	8a7b      	ldrh	r3, [r7, #18]
 8015818:	2b13      	cmp	r3, #19
 801581a:	d804      	bhi.n	8015826 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801581c:	6878      	ldr	r0, [r7, #4]
 801581e:	f7f5 fe49 	bl	800b4b4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8015822:	2300      	movs	r3, #0
 8015824:	e0f7      	b.n	8015a16 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8015826:	69fb      	ldr	r3, [r7, #28]
 8015828:	691b      	ldr	r3, [r3, #16]
 801582a:	4a7d      	ldr	r2, [pc, #500]	; (8015a20 <ip4_input+0x27c>)
 801582c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801582e:	69fb      	ldr	r3, [r7, #28]
 8015830:	68db      	ldr	r3, [r3, #12]
 8015832:	4a7b      	ldr	r2, [pc, #492]	; (8015a20 <ip4_input+0x27c>)
 8015834:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015836:	4b7a      	ldr	r3, [pc, #488]	; (8015a20 <ip4_input+0x27c>)
 8015838:	695b      	ldr	r3, [r3, #20]
 801583a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801583e:	2be0      	cmp	r3, #224	; 0xe0
 8015840:	d112      	bne.n	8015868 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8015842:	683b      	ldr	r3, [r7, #0]
 8015844:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015848:	f003 0301 	and.w	r3, r3, #1
 801584c:	b2db      	uxtb	r3, r3
 801584e:	2b00      	cmp	r3, #0
 8015850:	d007      	beq.n	8015862 <ip4_input+0xbe>
 8015852:	683b      	ldr	r3, [r7, #0]
 8015854:	3304      	adds	r3, #4
 8015856:	681b      	ldr	r3, [r3, #0]
 8015858:	2b00      	cmp	r3, #0
 801585a:	d002      	beq.n	8015862 <ip4_input+0xbe>
      netif = inp;
 801585c:	683b      	ldr	r3, [r7, #0]
 801585e:	61bb      	str	r3, [r7, #24]
 8015860:	e02a      	b.n	80158b8 <ip4_input+0x114>
    } else {
      netif = NULL;
 8015862:	2300      	movs	r3, #0
 8015864:	61bb      	str	r3, [r7, #24]
 8015866:	e027      	b.n	80158b8 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015868:	6838      	ldr	r0, [r7, #0]
 801586a:	f7ff ff71 	bl	8015750 <ip4_input_accept>
 801586e:	4603      	mov	r3, r0
 8015870:	2b00      	cmp	r3, #0
 8015872:	d002      	beq.n	801587a <ip4_input+0xd6>
      netif = inp;
 8015874:	683b      	ldr	r3, [r7, #0]
 8015876:	61bb      	str	r3, [r7, #24]
 8015878:	e01e      	b.n	80158b8 <ip4_input+0x114>
    } else {
      netif = NULL;
 801587a:	2300      	movs	r3, #0
 801587c:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801587e:	4b68      	ldr	r3, [pc, #416]	; (8015a20 <ip4_input+0x27c>)
 8015880:	695b      	ldr	r3, [r3, #20]
 8015882:	b2db      	uxtb	r3, r3
 8015884:	2b7f      	cmp	r3, #127	; 0x7f
 8015886:	d017      	beq.n	80158b8 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015888:	4b66      	ldr	r3, [pc, #408]	; (8015a24 <ip4_input+0x280>)
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	61bb      	str	r3, [r7, #24]
 801588e:	e00e      	b.n	80158ae <ip4_input+0x10a>
          if (netif == inp) {
 8015890:	69ba      	ldr	r2, [r7, #24]
 8015892:	683b      	ldr	r3, [r7, #0]
 8015894:	429a      	cmp	r2, r3
 8015896:	d006      	beq.n	80158a6 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015898:	69b8      	ldr	r0, [r7, #24]
 801589a:	f7ff ff59 	bl	8015750 <ip4_input_accept>
 801589e:	4603      	mov	r3, r0
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	d108      	bne.n	80158b6 <ip4_input+0x112>
 80158a4:	e000      	b.n	80158a8 <ip4_input+0x104>
            continue;
 80158a6:	bf00      	nop
        NETIF_FOREACH(netif) {
 80158a8:	69bb      	ldr	r3, [r7, #24]
 80158aa:	681b      	ldr	r3, [r3, #0]
 80158ac:	61bb      	str	r3, [r7, #24]
 80158ae:	69bb      	ldr	r3, [r7, #24]
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d1ed      	bne.n	8015890 <ip4_input+0xec>
 80158b4:	e000      	b.n	80158b8 <ip4_input+0x114>
            break;
 80158b6:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 80158b8:	69bb      	ldr	r3, [r7, #24]
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d111      	bne.n	80158e2 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80158be:	69fb      	ldr	r3, [r7, #28]
 80158c0:	7a5b      	ldrb	r3, [r3, #9]
 80158c2:	2b11      	cmp	r3, #17
 80158c4:	d10d      	bne.n	80158e2 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 80158c6:	8a7b      	ldrh	r3, [r7, #18]
 80158c8:	69fa      	ldr	r2, [r7, #28]
 80158ca:	4413      	add	r3, r2
 80158cc:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	885b      	ldrh	r3, [r3, #2]
 80158d2:	b29b      	uxth	r3, r3
 80158d4:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 80158d8:	d103      	bne.n	80158e2 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 80158da:	683b      	ldr	r3, [r7, #0]
 80158dc:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 80158de:	2300      	movs	r3, #0
 80158e0:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 80158e2:	697b      	ldr	r3, [r7, #20]
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d017      	beq.n	8015918 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80158e8:	4b4d      	ldr	r3, [pc, #308]	; (8015a20 <ip4_input+0x27c>)
 80158ea:	691b      	ldr	r3, [r3, #16]
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d013      	beq.n	8015918 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80158f0:	4b4b      	ldr	r3, [pc, #300]	; (8015a20 <ip4_input+0x27c>)
 80158f2:	691b      	ldr	r3, [r3, #16]
 80158f4:	6839      	ldr	r1, [r7, #0]
 80158f6:	4618      	mov	r0, r3
 80158f8:	f000 f96e 	bl	8015bd8 <ip4_addr_isbroadcast_u32>
 80158fc:	4603      	mov	r3, r0
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d105      	bne.n	801590e <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015902:	4b47      	ldr	r3, [pc, #284]	; (8015a20 <ip4_input+0x27c>)
 8015904:	691b      	ldr	r3, [r3, #16]
 8015906:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801590a:	2be0      	cmp	r3, #224	; 0xe0
 801590c:	d104      	bne.n	8015918 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801590e:	6878      	ldr	r0, [r7, #4]
 8015910:	f7f5 fdd0 	bl	800b4b4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015914:	2300      	movs	r3, #0
 8015916:	e07e      	b.n	8015a16 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015918:	69bb      	ldr	r3, [r7, #24]
 801591a:	2b00      	cmp	r3, #0
 801591c:	d104      	bne.n	8015928 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801591e:	6878      	ldr	r0, [r7, #4]
 8015920:	f7f5 fdc8 	bl	800b4b4 <pbuf_free>
    return ERR_OK;
 8015924:	2300      	movs	r3, #0
 8015926:	e076      	b.n	8015a16 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015928:	69fb      	ldr	r3, [r7, #28]
 801592a:	88db      	ldrh	r3, [r3, #6]
 801592c:	b29b      	uxth	r3, r3
 801592e:	461a      	mov	r2, r3
 8015930:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8015934:	4013      	ands	r3, r2
 8015936:	2b00      	cmp	r3, #0
 8015938:	d00b      	beq.n	8015952 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801593a:	6878      	ldr	r0, [r7, #4]
 801593c:	f000 fc92 	bl	8016264 <ip4_reass>
 8015940:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	2b00      	cmp	r3, #0
 8015946:	d101      	bne.n	801594c <ip4_input+0x1a8>
      return ERR_OK;
 8015948:	2300      	movs	r3, #0
 801594a:	e064      	b.n	8015a16 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	685b      	ldr	r3, [r3, #4]
 8015950:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8015952:	4a33      	ldr	r2, [pc, #204]	; (8015a20 <ip4_input+0x27c>)
 8015954:	69bb      	ldr	r3, [r7, #24]
 8015956:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015958:	4a31      	ldr	r2, [pc, #196]	; (8015a20 <ip4_input+0x27c>)
 801595a:	683b      	ldr	r3, [r7, #0]
 801595c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801595e:	4a30      	ldr	r2, [pc, #192]	; (8015a20 <ip4_input+0x27c>)
 8015960:	69fb      	ldr	r3, [r7, #28]
 8015962:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015964:	69fb      	ldr	r3, [r7, #28]
 8015966:	781b      	ldrb	r3, [r3, #0]
 8015968:	f003 030f 	and.w	r3, r3, #15
 801596c:	b2db      	uxtb	r3, r3
 801596e:	009b      	lsls	r3, r3, #2
 8015970:	b2db      	uxtb	r3, r3
 8015972:	b29a      	uxth	r2, r3
 8015974:	4b2a      	ldr	r3, [pc, #168]	; (8015a20 <ip4_input+0x27c>)
 8015976:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015978:	8a7b      	ldrh	r3, [r7, #18]
 801597a:	4619      	mov	r1, r3
 801597c:	6878      	ldr	r0, [r7, #4]
 801597e:	f7f5 fd13 	bl	800b3a8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015982:	69fb      	ldr	r3, [r7, #28]
 8015984:	7a5b      	ldrb	r3, [r3, #9]
 8015986:	2b11      	cmp	r3, #17
 8015988:	d006      	beq.n	8015998 <ip4_input+0x1f4>
 801598a:	2b11      	cmp	r3, #17
 801598c:	dc13      	bgt.n	80159b6 <ip4_input+0x212>
 801598e:	2b01      	cmp	r3, #1
 8015990:	d00c      	beq.n	80159ac <ip4_input+0x208>
 8015992:	2b06      	cmp	r3, #6
 8015994:	d005      	beq.n	80159a2 <ip4_input+0x1fe>
 8015996:	e00e      	b.n	80159b6 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015998:	6839      	ldr	r1, [r7, #0]
 801599a:	6878      	ldr	r0, [r7, #4]
 801599c:	f7fc fade 	bl	8011f5c <udp_input>
        break;
 80159a0:	e026      	b.n	80159f0 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80159a2:	6839      	ldr	r1, [r7, #0]
 80159a4:	6878      	ldr	r0, [r7, #4]
 80159a6:	f7f7 fe9b 	bl	800d6e0 <tcp_input>
        break;
 80159aa:	e021      	b.n	80159f0 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80159ac:	6839      	ldr	r1, [r7, #0]
 80159ae:	6878      	ldr	r0, [r7, #4]
 80159b0:	f7ff fcd0 	bl	8015354 <icmp_input>
        break;
 80159b4:	e01c      	b.n	80159f0 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80159b6:	4b1a      	ldr	r3, [pc, #104]	; (8015a20 <ip4_input+0x27c>)
 80159b8:	695b      	ldr	r3, [r3, #20]
 80159ba:	69b9      	ldr	r1, [r7, #24]
 80159bc:	4618      	mov	r0, r3
 80159be:	f000 f90b 	bl	8015bd8 <ip4_addr_isbroadcast_u32>
 80159c2:	4603      	mov	r3, r0
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	d10f      	bne.n	80159e8 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80159c8:	4b15      	ldr	r3, [pc, #84]	; (8015a20 <ip4_input+0x27c>)
 80159ca:	695b      	ldr	r3, [r3, #20]
 80159cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80159d0:	2be0      	cmp	r3, #224	; 0xe0
 80159d2:	d009      	beq.n	80159e8 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80159d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80159d8:	4619      	mov	r1, r3
 80159da:	6878      	ldr	r0, [r7, #4]
 80159dc:	f7f5 fd57 	bl	800b48e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80159e0:	2102      	movs	r1, #2
 80159e2:	6878      	ldr	r0, [r7, #4]
 80159e4:	f7ff fdba 	bl	801555c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80159e8:	6878      	ldr	r0, [r7, #4]
 80159ea:	f7f5 fd63 	bl	800b4b4 <pbuf_free>
        break;
 80159ee:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80159f0:	4b0b      	ldr	r3, [pc, #44]	; (8015a20 <ip4_input+0x27c>)
 80159f2:	2200      	movs	r2, #0
 80159f4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80159f6:	4b0a      	ldr	r3, [pc, #40]	; (8015a20 <ip4_input+0x27c>)
 80159f8:	2200      	movs	r2, #0
 80159fa:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80159fc:	4b08      	ldr	r3, [pc, #32]	; (8015a20 <ip4_input+0x27c>)
 80159fe:	2200      	movs	r2, #0
 8015a00:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015a02:	4b07      	ldr	r3, [pc, #28]	; (8015a20 <ip4_input+0x27c>)
 8015a04:	2200      	movs	r2, #0
 8015a06:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015a08:	4b05      	ldr	r3, [pc, #20]	; (8015a20 <ip4_input+0x27c>)
 8015a0a:	2200      	movs	r2, #0
 8015a0c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8015a0e:	4b04      	ldr	r3, [pc, #16]	; (8015a20 <ip4_input+0x27c>)
 8015a10:	2200      	movs	r2, #0
 8015a12:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015a14:	2300      	movs	r3, #0
}
 8015a16:	4618      	mov	r0, r3
 8015a18:	3720      	adds	r7, #32
 8015a1a:	46bd      	mov	sp, r7
 8015a1c:	bd80      	pop	{r7, pc}
 8015a1e:	bf00      	nop
 8015a20:	2000b8a8 	.word	0x2000b8a8
 8015a24:	2000efcc 	.word	0x2000efcc

08015a28 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015a28:	b580      	push	{r7, lr}
 8015a2a:	b08a      	sub	sp, #40	; 0x28
 8015a2c:	af04      	add	r7, sp, #16
 8015a2e:	60f8      	str	r0, [r7, #12]
 8015a30:	60b9      	str	r1, [r7, #8]
 8015a32:	607a      	str	r2, [r7, #4]
 8015a34:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015a36:	68bb      	ldr	r3, [r7, #8]
 8015a38:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d009      	beq.n	8015a54 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015a40:	68bb      	ldr	r3, [r7, #8]
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d003      	beq.n	8015a4e <ip4_output_if+0x26>
 8015a46:	68bb      	ldr	r3, [r7, #8]
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d102      	bne.n	8015a54 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8015a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a50:	3304      	adds	r3, #4
 8015a52:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015a54:	78fa      	ldrb	r2, [r7, #3]
 8015a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a58:	9302      	str	r3, [sp, #8]
 8015a5a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015a5e:	9301      	str	r3, [sp, #4]
 8015a60:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015a64:	9300      	str	r3, [sp, #0]
 8015a66:	4613      	mov	r3, r2
 8015a68:	687a      	ldr	r2, [r7, #4]
 8015a6a:	6979      	ldr	r1, [r7, #20]
 8015a6c:	68f8      	ldr	r0, [r7, #12]
 8015a6e:	f000 f805 	bl	8015a7c <ip4_output_if_src>
 8015a72:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015a74:	4618      	mov	r0, r3
 8015a76:	3718      	adds	r7, #24
 8015a78:	46bd      	mov	sp, r7
 8015a7a:	bd80      	pop	{r7, pc}

08015a7c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8015a7c:	b580      	push	{r7, lr}
 8015a7e:	b088      	sub	sp, #32
 8015a80:	af00      	add	r7, sp, #0
 8015a82:	60f8      	str	r0, [r7, #12]
 8015a84:	60b9      	str	r1, [r7, #8]
 8015a86:	607a      	str	r2, [r7, #4]
 8015a88:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8015a8a:	68fb      	ldr	r3, [r7, #12]
 8015a8c:	7b9b      	ldrb	r3, [r3, #14]
 8015a8e:	2b01      	cmp	r3, #1
 8015a90:	d006      	beq.n	8015aa0 <ip4_output_if_src+0x24>
 8015a92:	4b4b      	ldr	r3, [pc, #300]	; (8015bc0 <ip4_output_if_src+0x144>)
 8015a94:	f44f 7255 	mov.w	r2, #852	; 0x354
 8015a98:	494a      	ldr	r1, [pc, #296]	; (8015bc4 <ip4_output_if_src+0x148>)
 8015a9a:	484b      	ldr	r0, [pc, #300]	; (8015bc8 <ip4_output_if_src+0x14c>)
 8015a9c:	f001 fb84 	bl	80171a8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d060      	beq.n	8015b68 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8015aa6:	2314      	movs	r3, #20
 8015aa8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8015aaa:	2114      	movs	r1, #20
 8015aac:	68f8      	ldr	r0, [r7, #12]
 8015aae:	f7f5 fc6b 	bl	800b388 <pbuf_add_header>
 8015ab2:	4603      	mov	r3, r0
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d002      	beq.n	8015abe <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015ab8:	f06f 0301 	mvn.w	r3, #1
 8015abc:	e07c      	b.n	8015bb8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8015abe:	68fb      	ldr	r3, [r7, #12]
 8015ac0:	685b      	ldr	r3, [r3, #4]
 8015ac2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015ac4:	68fb      	ldr	r3, [r7, #12]
 8015ac6:	895b      	ldrh	r3, [r3, #10]
 8015ac8:	2b13      	cmp	r3, #19
 8015aca:	d806      	bhi.n	8015ada <ip4_output_if_src+0x5e>
 8015acc:	4b3c      	ldr	r3, [pc, #240]	; (8015bc0 <ip4_output_if_src+0x144>)
 8015ace:	f44f 7262 	mov.w	r2, #904	; 0x388
 8015ad2:	493e      	ldr	r1, [pc, #248]	; (8015bcc <ip4_output_if_src+0x150>)
 8015ad4:	483c      	ldr	r0, [pc, #240]	; (8015bc8 <ip4_output_if_src+0x14c>)
 8015ad6:	f001 fb67 	bl	80171a8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8015ada:	69fb      	ldr	r3, [r7, #28]
 8015adc:	78fa      	ldrb	r2, [r7, #3]
 8015ade:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015ae0:	69fb      	ldr	r3, [r7, #28]
 8015ae2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8015ae6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	681a      	ldr	r2, [r3, #0]
 8015aec:	69fb      	ldr	r3, [r7, #28]
 8015aee:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015af0:	8b7b      	ldrh	r3, [r7, #26]
 8015af2:	089b      	lsrs	r3, r3, #2
 8015af4:	b29b      	uxth	r3, r3
 8015af6:	b2db      	uxtb	r3, r3
 8015af8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015afc:	b2da      	uxtb	r2, r3
 8015afe:	69fb      	ldr	r3, [r7, #28]
 8015b00:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8015b02:	69fb      	ldr	r3, [r7, #28]
 8015b04:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015b08:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015b0a:	68fb      	ldr	r3, [r7, #12]
 8015b0c:	891b      	ldrh	r3, [r3, #8]
 8015b0e:	4618      	mov	r0, r3
 8015b10:	f7f4 f918 	bl	8009d44 <lwip_htons>
 8015b14:	4603      	mov	r3, r0
 8015b16:	461a      	mov	r2, r3
 8015b18:	69fb      	ldr	r3, [r7, #28]
 8015b1a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015b1c:	69fb      	ldr	r3, [r7, #28]
 8015b1e:	2200      	movs	r2, #0
 8015b20:	719a      	strb	r2, [r3, #6]
 8015b22:	2200      	movs	r2, #0
 8015b24:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015b26:	4b2a      	ldr	r3, [pc, #168]	; (8015bd0 <ip4_output_if_src+0x154>)
 8015b28:	881b      	ldrh	r3, [r3, #0]
 8015b2a:	4618      	mov	r0, r3
 8015b2c:	f7f4 f90a 	bl	8009d44 <lwip_htons>
 8015b30:	4603      	mov	r3, r0
 8015b32:	461a      	mov	r2, r3
 8015b34:	69fb      	ldr	r3, [r7, #28]
 8015b36:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015b38:	4b25      	ldr	r3, [pc, #148]	; (8015bd0 <ip4_output_if_src+0x154>)
 8015b3a:	881b      	ldrh	r3, [r3, #0]
 8015b3c:	3301      	adds	r3, #1
 8015b3e:	b29a      	uxth	r2, r3
 8015b40:	4b23      	ldr	r3, [pc, #140]	; (8015bd0 <ip4_output_if_src+0x154>)
 8015b42:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015b44:	68bb      	ldr	r3, [r7, #8]
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d104      	bne.n	8015b54 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8015b4a:	4b22      	ldr	r3, [pc, #136]	; (8015bd4 <ip4_output_if_src+0x158>)
 8015b4c:	681a      	ldr	r2, [r3, #0]
 8015b4e:	69fb      	ldr	r3, [r7, #28]
 8015b50:	60da      	str	r2, [r3, #12]
 8015b52:	e003      	b.n	8015b5c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015b54:	68bb      	ldr	r3, [r7, #8]
 8015b56:	681a      	ldr	r2, [r3, #0]
 8015b58:	69fb      	ldr	r3, [r7, #28]
 8015b5a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015b5c:	69fb      	ldr	r3, [r7, #28]
 8015b5e:	2200      	movs	r2, #0
 8015b60:	729a      	strb	r2, [r3, #10]
 8015b62:	2200      	movs	r2, #0
 8015b64:	72da      	strb	r2, [r3, #11]
 8015b66:	e00f      	b.n	8015b88 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015b68:	68fb      	ldr	r3, [r7, #12]
 8015b6a:	895b      	ldrh	r3, [r3, #10]
 8015b6c:	2b13      	cmp	r3, #19
 8015b6e:	d802      	bhi.n	8015b76 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015b70:	f06f 0301 	mvn.w	r3, #1
 8015b74:	e020      	b.n	8015bb8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8015b76:	68fb      	ldr	r3, [r7, #12]
 8015b78:	685b      	ldr	r3, [r3, #4]
 8015b7a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8015b7c:	69fb      	ldr	r3, [r7, #28]
 8015b7e:	691b      	ldr	r3, [r3, #16]
 8015b80:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8015b82:	f107 0314 	add.w	r3, r7, #20
 8015b86:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d00c      	beq.n	8015baa <ip4_output_if_src+0x12e>
 8015b90:	68fb      	ldr	r3, [r7, #12]
 8015b92:	891a      	ldrh	r2, [r3, #8]
 8015b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015b98:	429a      	cmp	r2, r3
 8015b9a:	d906      	bls.n	8015baa <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8015b9c:	687a      	ldr	r2, [r7, #4]
 8015b9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015ba0:	68f8      	ldr	r0, [r7, #12]
 8015ba2:	f000 fd4d 	bl	8016640 <ip4_frag>
 8015ba6:	4603      	mov	r3, r0
 8015ba8:	e006      	b.n	8015bb8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8015baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bac:	695b      	ldr	r3, [r3, #20]
 8015bae:	687a      	ldr	r2, [r7, #4]
 8015bb0:	68f9      	ldr	r1, [r7, #12]
 8015bb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015bb4:	4798      	blx	r3
 8015bb6:	4603      	mov	r3, r0
}
 8015bb8:	4618      	mov	r0, r3
 8015bba:	3720      	adds	r7, #32
 8015bbc:	46bd      	mov	sp, r7
 8015bbe:	bd80      	pop	{r7, pc}
 8015bc0:	0801bb94 	.word	0x0801bb94
 8015bc4:	0801bbc8 	.word	0x0801bbc8
 8015bc8:	0801bbd4 	.word	0x0801bbd4
 8015bcc:	0801bbfc 	.word	0x0801bbfc
 8015bd0:	2000868a 	.word	0x2000868a
 8015bd4:	0801c024 	.word	0x0801c024

08015bd8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015bd8:	b480      	push	{r7}
 8015bda:	b085      	sub	sp, #20
 8015bdc:	af00      	add	r7, sp, #0
 8015bde:	6078      	str	r0, [r7, #4]
 8015be0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015bec:	d002      	beq.n	8015bf4 <ip4_addr_isbroadcast_u32+0x1c>
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	2b00      	cmp	r3, #0
 8015bf2:	d101      	bne.n	8015bf8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015bf4:	2301      	movs	r3, #1
 8015bf6:	e02a      	b.n	8015c4e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015bf8:	683b      	ldr	r3, [r7, #0]
 8015bfa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015bfe:	f003 0302 	and.w	r3, r3, #2
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d101      	bne.n	8015c0a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015c06:	2300      	movs	r3, #0
 8015c08:	e021      	b.n	8015c4e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015c0a:	683b      	ldr	r3, [r7, #0]
 8015c0c:	3304      	adds	r3, #4
 8015c0e:	681b      	ldr	r3, [r3, #0]
 8015c10:	687a      	ldr	r2, [r7, #4]
 8015c12:	429a      	cmp	r2, r3
 8015c14:	d101      	bne.n	8015c1a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015c16:	2300      	movs	r3, #0
 8015c18:	e019      	b.n	8015c4e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015c1a:	68fa      	ldr	r2, [r7, #12]
 8015c1c:	683b      	ldr	r3, [r7, #0]
 8015c1e:	3304      	adds	r3, #4
 8015c20:	681b      	ldr	r3, [r3, #0]
 8015c22:	405a      	eors	r2, r3
 8015c24:	683b      	ldr	r3, [r7, #0]
 8015c26:	3308      	adds	r3, #8
 8015c28:	681b      	ldr	r3, [r3, #0]
 8015c2a:	4013      	ands	r3, r2
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	d10d      	bne.n	8015c4c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015c30:	683b      	ldr	r3, [r7, #0]
 8015c32:	3308      	adds	r3, #8
 8015c34:	681b      	ldr	r3, [r3, #0]
 8015c36:	43da      	mvns	r2, r3
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015c3c:	683b      	ldr	r3, [r7, #0]
 8015c3e:	3308      	adds	r3, #8
 8015c40:	681b      	ldr	r3, [r3, #0]
 8015c42:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015c44:	429a      	cmp	r2, r3
 8015c46:	d101      	bne.n	8015c4c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015c48:	2301      	movs	r3, #1
 8015c4a:	e000      	b.n	8015c4e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015c4c:	2300      	movs	r3, #0
  }
}
 8015c4e:	4618      	mov	r0, r3
 8015c50:	3714      	adds	r7, #20
 8015c52:	46bd      	mov	sp, r7
 8015c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c58:	4770      	bx	lr
	...

08015c5c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015c5c:	b580      	push	{r7, lr}
 8015c5e:	b084      	sub	sp, #16
 8015c60:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015c62:	2300      	movs	r3, #0
 8015c64:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015c66:	4b12      	ldr	r3, [pc, #72]	; (8015cb0 <ip_reass_tmr+0x54>)
 8015c68:	681b      	ldr	r3, [r3, #0]
 8015c6a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015c6c:	e018      	b.n	8015ca0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8015c6e:	68fb      	ldr	r3, [r7, #12]
 8015c70:	7fdb      	ldrb	r3, [r3, #31]
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	d00b      	beq.n	8015c8e <ip_reass_tmr+0x32>
      r->timer--;
 8015c76:	68fb      	ldr	r3, [r7, #12]
 8015c78:	7fdb      	ldrb	r3, [r3, #31]
 8015c7a:	3b01      	subs	r3, #1
 8015c7c:	b2da      	uxtb	r2, r3
 8015c7e:	68fb      	ldr	r3, [r7, #12]
 8015c80:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015c82:	68fb      	ldr	r3, [r7, #12]
 8015c84:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015c86:	68fb      	ldr	r3, [r7, #12]
 8015c88:	681b      	ldr	r3, [r3, #0]
 8015c8a:	60fb      	str	r3, [r7, #12]
 8015c8c:	e008      	b.n	8015ca0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8015c8e:	68fb      	ldr	r3, [r7, #12]
 8015c90:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015c92:	68fb      	ldr	r3, [r7, #12]
 8015c94:	681b      	ldr	r3, [r3, #0]
 8015c96:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015c98:	68b9      	ldr	r1, [r7, #8]
 8015c9a:	6878      	ldr	r0, [r7, #4]
 8015c9c:	f000 f80a 	bl	8015cb4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015ca0:	68fb      	ldr	r3, [r7, #12]
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	d1e3      	bne.n	8015c6e <ip_reass_tmr+0x12>
    }
  }
}
 8015ca6:	bf00      	nop
 8015ca8:	bf00      	nop
 8015caa:	3710      	adds	r7, #16
 8015cac:	46bd      	mov	sp, r7
 8015cae:	bd80      	pop	{r7, pc}
 8015cb0:	2000868c 	.word	0x2000868c

08015cb4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015cb4:	b580      	push	{r7, lr}
 8015cb6:	b088      	sub	sp, #32
 8015cb8:	af00      	add	r7, sp, #0
 8015cba:	6078      	str	r0, [r7, #4]
 8015cbc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8015cbe:	2300      	movs	r3, #0
 8015cc0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015cc2:	683a      	ldr	r2, [r7, #0]
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	429a      	cmp	r2, r3
 8015cc8:	d105      	bne.n	8015cd6 <ip_reass_free_complete_datagram+0x22>
 8015cca:	4b45      	ldr	r3, [pc, #276]	; (8015de0 <ip_reass_free_complete_datagram+0x12c>)
 8015ccc:	22ab      	movs	r2, #171	; 0xab
 8015cce:	4945      	ldr	r1, [pc, #276]	; (8015de4 <ip_reass_free_complete_datagram+0x130>)
 8015cd0:	4845      	ldr	r0, [pc, #276]	; (8015de8 <ip_reass_free_complete_datagram+0x134>)
 8015cd2:	f001 fa69 	bl	80171a8 <iprintf>
  if (prev != NULL) {
 8015cd6:	683b      	ldr	r3, [r7, #0]
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d00a      	beq.n	8015cf2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015cdc:	683b      	ldr	r3, [r7, #0]
 8015cde:	681b      	ldr	r3, [r3, #0]
 8015ce0:	687a      	ldr	r2, [r7, #4]
 8015ce2:	429a      	cmp	r2, r3
 8015ce4:	d005      	beq.n	8015cf2 <ip_reass_free_complete_datagram+0x3e>
 8015ce6:	4b3e      	ldr	r3, [pc, #248]	; (8015de0 <ip_reass_free_complete_datagram+0x12c>)
 8015ce8:	22ad      	movs	r2, #173	; 0xad
 8015cea:	4940      	ldr	r1, [pc, #256]	; (8015dec <ip_reass_free_complete_datagram+0x138>)
 8015cec:	483e      	ldr	r0, [pc, #248]	; (8015de8 <ip_reass_free_complete_datagram+0x134>)
 8015cee:	f001 fa5b 	bl	80171a8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	685b      	ldr	r3, [r3, #4]
 8015cf6:	685b      	ldr	r3, [r3, #4]
 8015cf8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015cfa:	697b      	ldr	r3, [r7, #20]
 8015cfc:	889b      	ldrh	r3, [r3, #4]
 8015cfe:	b29b      	uxth	r3, r3
 8015d00:	2b00      	cmp	r3, #0
 8015d02:	d12a      	bne.n	8015d5a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	685b      	ldr	r3, [r3, #4]
 8015d08:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015d0a:	697b      	ldr	r3, [r7, #20]
 8015d0c:	681a      	ldr	r2, [r3, #0]
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015d12:	69bb      	ldr	r3, [r7, #24]
 8015d14:	6858      	ldr	r0, [r3, #4]
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	3308      	adds	r3, #8
 8015d1a:	2214      	movs	r2, #20
 8015d1c:	4619      	mov	r1, r3
 8015d1e:	f001 f9b8 	bl	8017092 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015d22:	2101      	movs	r1, #1
 8015d24:	69b8      	ldr	r0, [r7, #24]
 8015d26:	f7ff fc29 	bl	801557c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015d2a:	69b8      	ldr	r0, [r7, #24]
 8015d2c:	f7f5 fc50 	bl	800b5d0 <pbuf_clen>
 8015d30:	4603      	mov	r3, r0
 8015d32:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015d34:	8bfa      	ldrh	r2, [r7, #30]
 8015d36:	8a7b      	ldrh	r3, [r7, #18]
 8015d38:	4413      	add	r3, r2
 8015d3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015d3e:	db05      	blt.n	8015d4c <ip_reass_free_complete_datagram+0x98>
 8015d40:	4b27      	ldr	r3, [pc, #156]	; (8015de0 <ip_reass_free_complete_datagram+0x12c>)
 8015d42:	22bc      	movs	r2, #188	; 0xbc
 8015d44:	492a      	ldr	r1, [pc, #168]	; (8015df0 <ip_reass_free_complete_datagram+0x13c>)
 8015d46:	4828      	ldr	r0, [pc, #160]	; (8015de8 <ip_reass_free_complete_datagram+0x134>)
 8015d48:	f001 fa2e 	bl	80171a8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015d4c:	8bfa      	ldrh	r2, [r7, #30]
 8015d4e:	8a7b      	ldrh	r3, [r7, #18]
 8015d50:	4413      	add	r3, r2
 8015d52:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015d54:	69b8      	ldr	r0, [r7, #24]
 8015d56:	f7f5 fbad 	bl	800b4b4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	685b      	ldr	r3, [r3, #4]
 8015d5e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015d60:	e01f      	b.n	8015da2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015d62:	69bb      	ldr	r3, [r7, #24]
 8015d64:	685b      	ldr	r3, [r3, #4]
 8015d66:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015d68:	69bb      	ldr	r3, [r7, #24]
 8015d6a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015d6c:	697b      	ldr	r3, [r7, #20]
 8015d6e:	681b      	ldr	r3, [r3, #0]
 8015d70:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015d72:	68f8      	ldr	r0, [r7, #12]
 8015d74:	f7f5 fc2c 	bl	800b5d0 <pbuf_clen>
 8015d78:	4603      	mov	r3, r0
 8015d7a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015d7c:	8bfa      	ldrh	r2, [r7, #30]
 8015d7e:	8a7b      	ldrh	r3, [r7, #18]
 8015d80:	4413      	add	r3, r2
 8015d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015d86:	db05      	blt.n	8015d94 <ip_reass_free_complete_datagram+0xe0>
 8015d88:	4b15      	ldr	r3, [pc, #84]	; (8015de0 <ip_reass_free_complete_datagram+0x12c>)
 8015d8a:	22cc      	movs	r2, #204	; 0xcc
 8015d8c:	4918      	ldr	r1, [pc, #96]	; (8015df0 <ip_reass_free_complete_datagram+0x13c>)
 8015d8e:	4816      	ldr	r0, [pc, #88]	; (8015de8 <ip_reass_free_complete_datagram+0x134>)
 8015d90:	f001 fa0a 	bl	80171a8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015d94:	8bfa      	ldrh	r2, [r7, #30]
 8015d96:	8a7b      	ldrh	r3, [r7, #18]
 8015d98:	4413      	add	r3, r2
 8015d9a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015d9c:	68f8      	ldr	r0, [r7, #12]
 8015d9e:	f7f5 fb89 	bl	800b4b4 <pbuf_free>
  while (p != NULL) {
 8015da2:	69bb      	ldr	r3, [r7, #24]
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d1dc      	bne.n	8015d62 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015da8:	6839      	ldr	r1, [r7, #0]
 8015daa:	6878      	ldr	r0, [r7, #4]
 8015dac:	f000 f8c2 	bl	8015f34 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015db0:	4b10      	ldr	r3, [pc, #64]	; (8015df4 <ip_reass_free_complete_datagram+0x140>)
 8015db2:	881b      	ldrh	r3, [r3, #0]
 8015db4:	8bfa      	ldrh	r2, [r7, #30]
 8015db6:	429a      	cmp	r2, r3
 8015db8:	d905      	bls.n	8015dc6 <ip_reass_free_complete_datagram+0x112>
 8015dba:	4b09      	ldr	r3, [pc, #36]	; (8015de0 <ip_reass_free_complete_datagram+0x12c>)
 8015dbc:	22d2      	movs	r2, #210	; 0xd2
 8015dbe:	490e      	ldr	r1, [pc, #56]	; (8015df8 <ip_reass_free_complete_datagram+0x144>)
 8015dc0:	4809      	ldr	r0, [pc, #36]	; (8015de8 <ip_reass_free_complete_datagram+0x134>)
 8015dc2:	f001 f9f1 	bl	80171a8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8015dc6:	4b0b      	ldr	r3, [pc, #44]	; (8015df4 <ip_reass_free_complete_datagram+0x140>)
 8015dc8:	881a      	ldrh	r2, [r3, #0]
 8015dca:	8bfb      	ldrh	r3, [r7, #30]
 8015dcc:	1ad3      	subs	r3, r2, r3
 8015dce:	b29a      	uxth	r2, r3
 8015dd0:	4b08      	ldr	r3, [pc, #32]	; (8015df4 <ip_reass_free_complete_datagram+0x140>)
 8015dd2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015dd4:	8bfb      	ldrh	r3, [r7, #30]
}
 8015dd6:	4618      	mov	r0, r3
 8015dd8:	3720      	adds	r7, #32
 8015dda:	46bd      	mov	sp, r7
 8015ddc:	bd80      	pop	{r7, pc}
 8015dde:	bf00      	nop
 8015de0:	0801bc2c 	.word	0x0801bc2c
 8015de4:	0801bc68 	.word	0x0801bc68
 8015de8:	0801bc74 	.word	0x0801bc74
 8015dec:	0801bc9c 	.word	0x0801bc9c
 8015df0:	0801bcb0 	.word	0x0801bcb0
 8015df4:	20008690 	.word	0x20008690
 8015df8:	0801bcd0 	.word	0x0801bcd0

08015dfc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015dfc:	b580      	push	{r7, lr}
 8015dfe:	b08a      	sub	sp, #40	; 0x28
 8015e00:	af00      	add	r7, sp, #0
 8015e02:	6078      	str	r0, [r7, #4]
 8015e04:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015e06:	2300      	movs	r3, #0
 8015e08:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015e0a:	2300      	movs	r3, #0
 8015e0c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015e0e:	2300      	movs	r3, #0
 8015e10:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015e12:	2300      	movs	r3, #0
 8015e14:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015e16:	2300      	movs	r3, #0
 8015e18:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015e1a:	4b28      	ldr	r3, [pc, #160]	; (8015ebc <ip_reass_remove_oldest_datagram+0xc0>)
 8015e1c:	681b      	ldr	r3, [r3, #0]
 8015e1e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015e20:	e030      	b.n	8015e84 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e24:	695a      	ldr	r2, [r3, #20]
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	68db      	ldr	r3, [r3, #12]
 8015e2a:	429a      	cmp	r2, r3
 8015e2c:	d10c      	bne.n	8015e48 <ip_reass_remove_oldest_datagram+0x4c>
 8015e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e30:	699a      	ldr	r2, [r3, #24]
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	691b      	ldr	r3, [r3, #16]
 8015e36:	429a      	cmp	r2, r3
 8015e38:	d106      	bne.n	8015e48 <ip_reass_remove_oldest_datagram+0x4c>
 8015e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e3c:	899a      	ldrh	r2, [r3, #12]
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	889b      	ldrh	r3, [r3, #4]
 8015e42:	b29b      	uxth	r3, r3
 8015e44:	429a      	cmp	r2, r3
 8015e46:	d014      	beq.n	8015e72 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015e48:	693b      	ldr	r3, [r7, #16]
 8015e4a:	3301      	adds	r3, #1
 8015e4c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015e4e:	6a3b      	ldr	r3, [r7, #32]
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d104      	bne.n	8015e5e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e56:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015e58:	69fb      	ldr	r3, [r7, #28]
 8015e5a:	61bb      	str	r3, [r7, #24]
 8015e5c:	e009      	b.n	8015e72 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8015e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e60:	7fda      	ldrb	r2, [r3, #31]
 8015e62:	6a3b      	ldr	r3, [r7, #32]
 8015e64:	7fdb      	ldrb	r3, [r3, #31]
 8015e66:	429a      	cmp	r2, r3
 8015e68:	d803      	bhi.n	8015e72 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e6c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015e6e:	69fb      	ldr	r3, [r7, #28]
 8015e70:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e74:	681b      	ldr	r3, [r3, #0]
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d001      	beq.n	8015e7e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8015e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e7c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e80:	681b      	ldr	r3, [r3, #0]
 8015e82:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d1cb      	bne.n	8015e22 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8015e8a:	6a3b      	ldr	r3, [r7, #32]
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d008      	beq.n	8015ea2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015e90:	69b9      	ldr	r1, [r7, #24]
 8015e92:	6a38      	ldr	r0, [r7, #32]
 8015e94:	f7ff ff0e 	bl	8015cb4 <ip_reass_free_complete_datagram>
 8015e98:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8015e9a:	697a      	ldr	r2, [r7, #20]
 8015e9c:	68fb      	ldr	r3, [r7, #12]
 8015e9e:	4413      	add	r3, r2
 8015ea0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015ea2:	697a      	ldr	r2, [r7, #20]
 8015ea4:	683b      	ldr	r3, [r7, #0]
 8015ea6:	429a      	cmp	r2, r3
 8015ea8:	da02      	bge.n	8015eb0 <ip_reass_remove_oldest_datagram+0xb4>
 8015eaa:	693b      	ldr	r3, [r7, #16]
 8015eac:	2b01      	cmp	r3, #1
 8015eae:	dcac      	bgt.n	8015e0a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015eb0:	697b      	ldr	r3, [r7, #20]
}
 8015eb2:	4618      	mov	r0, r3
 8015eb4:	3728      	adds	r7, #40	; 0x28
 8015eb6:	46bd      	mov	sp, r7
 8015eb8:	bd80      	pop	{r7, pc}
 8015eba:	bf00      	nop
 8015ebc:	2000868c 	.word	0x2000868c

08015ec0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015ec0:	b580      	push	{r7, lr}
 8015ec2:	b084      	sub	sp, #16
 8015ec4:	af00      	add	r7, sp, #0
 8015ec6:	6078      	str	r0, [r7, #4]
 8015ec8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015eca:	2004      	movs	r0, #4
 8015ecc:	f7f4 fbf0 	bl	800a6b0 <memp_malloc>
 8015ed0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015ed2:	68fb      	ldr	r3, [r7, #12]
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d110      	bne.n	8015efa <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015ed8:	6839      	ldr	r1, [r7, #0]
 8015eda:	6878      	ldr	r0, [r7, #4]
 8015edc:	f7ff ff8e 	bl	8015dfc <ip_reass_remove_oldest_datagram>
 8015ee0:	4602      	mov	r2, r0
 8015ee2:	683b      	ldr	r3, [r7, #0]
 8015ee4:	4293      	cmp	r3, r2
 8015ee6:	dc03      	bgt.n	8015ef0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015ee8:	2004      	movs	r0, #4
 8015eea:	f7f4 fbe1 	bl	800a6b0 <memp_malloc>
 8015eee:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015ef0:	68fb      	ldr	r3, [r7, #12]
 8015ef2:	2b00      	cmp	r3, #0
 8015ef4:	d101      	bne.n	8015efa <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8015ef6:	2300      	movs	r3, #0
 8015ef8:	e016      	b.n	8015f28 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015efa:	2220      	movs	r2, #32
 8015efc:	2100      	movs	r1, #0
 8015efe:	68f8      	ldr	r0, [r7, #12]
 8015f00:	f001 f8ef 	bl	80170e2 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015f04:	68fb      	ldr	r3, [r7, #12]
 8015f06:	220f      	movs	r2, #15
 8015f08:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015f0a:	4b09      	ldr	r3, [pc, #36]	; (8015f30 <ip_reass_enqueue_new_datagram+0x70>)
 8015f0c:	681a      	ldr	r2, [r3, #0]
 8015f0e:	68fb      	ldr	r3, [r7, #12]
 8015f10:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8015f12:	4a07      	ldr	r2, [pc, #28]	; (8015f30 <ip_reass_enqueue_new_datagram+0x70>)
 8015f14:	68fb      	ldr	r3, [r7, #12]
 8015f16:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015f18:	68fb      	ldr	r3, [r7, #12]
 8015f1a:	3308      	adds	r3, #8
 8015f1c:	2214      	movs	r2, #20
 8015f1e:	6879      	ldr	r1, [r7, #4]
 8015f20:	4618      	mov	r0, r3
 8015f22:	f001 f8b6 	bl	8017092 <memcpy>
  return ipr;
 8015f26:	68fb      	ldr	r3, [r7, #12]
}
 8015f28:	4618      	mov	r0, r3
 8015f2a:	3710      	adds	r7, #16
 8015f2c:	46bd      	mov	sp, r7
 8015f2e:	bd80      	pop	{r7, pc}
 8015f30:	2000868c 	.word	0x2000868c

08015f34 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015f34:	b580      	push	{r7, lr}
 8015f36:	b082      	sub	sp, #8
 8015f38:	af00      	add	r7, sp, #0
 8015f3a:	6078      	str	r0, [r7, #4]
 8015f3c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8015f3e:	4b10      	ldr	r3, [pc, #64]	; (8015f80 <ip_reass_dequeue_datagram+0x4c>)
 8015f40:	681b      	ldr	r3, [r3, #0]
 8015f42:	687a      	ldr	r2, [r7, #4]
 8015f44:	429a      	cmp	r2, r3
 8015f46:	d104      	bne.n	8015f52 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	681b      	ldr	r3, [r3, #0]
 8015f4c:	4a0c      	ldr	r2, [pc, #48]	; (8015f80 <ip_reass_dequeue_datagram+0x4c>)
 8015f4e:	6013      	str	r3, [r2, #0]
 8015f50:	e00d      	b.n	8015f6e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015f52:	683b      	ldr	r3, [r7, #0]
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	d106      	bne.n	8015f66 <ip_reass_dequeue_datagram+0x32>
 8015f58:	4b0a      	ldr	r3, [pc, #40]	; (8015f84 <ip_reass_dequeue_datagram+0x50>)
 8015f5a:	f240 1245 	movw	r2, #325	; 0x145
 8015f5e:	490a      	ldr	r1, [pc, #40]	; (8015f88 <ip_reass_dequeue_datagram+0x54>)
 8015f60:	480a      	ldr	r0, [pc, #40]	; (8015f8c <ip_reass_dequeue_datagram+0x58>)
 8015f62:	f001 f921 	bl	80171a8 <iprintf>
    prev->next = ipr->next;
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	681a      	ldr	r2, [r3, #0]
 8015f6a:	683b      	ldr	r3, [r7, #0]
 8015f6c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015f6e:	6879      	ldr	r1, [r7, #4]
 8015f70:	2004      	movs	r0, #4
 8015f72:	f7f4 fbef 	bl	800a754 <memp_free>
}
 8015f76:	bf00      	nop
 8015f78:	3708      	adds	r7, #8
 8015f7a:	46bd      	mov	sp, r7
 8015f7c:	bd80      	pop	{r7, pc}
 8015f7e:	bf00      	nop
 8015f80:	2000868c 	.word	0x2000868c
 8015f84:	0801bc2c 	.word	0x0801bc2c
 8015f88:	0801bcf4 	.word	0x0801bcf4
 8015f8c:	0801bc74 	.word	0x0801bc74

08015f90 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015f90:	b580      	push	{r7, lr}
 8015f92:	b08c      	sub	sp, #48	; 0x30
 8015f94:	af00      	add	r7, sp, #0
 8015f96:	60f8      	str	r0, [r7, #12]
 8015f98:	60b9      	str	r1, [r7, #8]
 8015f9a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015f9c:	2300      	movs	r3, #0
 8015f9e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015fa0:	2301      	movs	r3, #1
 8015fa2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015fa4:	68bb      	ldr	r3, [r7, #8]
 8015fa6:	685b      	ldr	r3, [r3, #4]
 8015fa8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015faa:	69fb      	ldr	r3, [r7, #28]
 8015fac:	885b      	ldrh	r3, [r3, #2]
 8015fae:	b29b      	uxth	r3, r3
 8015fb0:	4618      	mov	r0, r3
 8015fb2:	f7f3 fec7 	bl	8009d44 <lwip_htons>
 8015fb6:	4603      	mov	r3, r0
 8015fb8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015fba:	69fb      	ldr	r3, [r7, #28]
 8015fbc:	781b      	ldrb	r3, [r3, #0]
 8015fbe:	f003 030f 	and.w	r3, r3, #15
 8015fc2:	b2db      	uxtb	r3, r3
 8015fc4:	009b      	lsls	r3, r3, #2
 8015fc6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015fc8:	7e7b      	ldrb	r3, [r7, #25]
 8015fca:	b29b      	uxth	r3, r3
 8015fcc:	8b7a      	ldrh	r2, [r7, #26]
 8015fce:	429a      	cmp	r2, r3
 8015fd0:	d202      	bcs.n	8015fd8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8015fd6:	e135      	b.n	8016244 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015fd8:	7e7b      	ldrb	r3, [r7, #25]
 8015fda:	b29b      	uxth	r3, r3
 8015fdc:	8b7a      	ldrh	r2, [r7, #26]
 8015fde:	1ad3      	subs	r3, r2, r3
 8015fe0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8015fe2:	69fb      	ldr	r3, [r7, #28]
 8015fe4:	88db      	ldrh	r3, [r3, #6]
 8015fe6:	b29b      	uxth	r3, r3
 8015fe8:	4618      	mov	r0, r3
 8015fea:	f7f3 feab 	bl	8009d44 <lwip_htons>
 8015fee:	4603      	mov	r3, r0
 8015ff0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015ff4:	b29b      	uxth	r3, r3
 8015ff6:	00db      	lsls	r3, r3, #3
 8015ff8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015ffa:	68bb      	ldr	r3, [r7, #8]
 8015ffc:	685b      	ldr	r3, [r3, #4]
 8015ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8016000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016002:	2200      	movs	r2, #0
 8016004:	701a      	strb	r2, [r3, #0]
 8016006:	2200      	movs	r2, #0
 8016008:	705a      	strb	r2, [r3, #1]
 801600a:	2200      	movs	r2, #0
 801600c:	709a      	strb	r2, [r3, #2]
 801600e:	2200      	movs	r2, #0
 8016010:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8016012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016014:	8afa      	ldrh	r2, [r7, #22]
 8016016:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8016018:	8afa      	ldrh	r2, [r7, #22]
 801601a:	8b7b      	ldrh	r3, [r7, #26]
 801601c:	4413      	add	r3, r2
 801601e:	b29a      	uxth	r2, r3
 8016020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016022:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8016024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016026:	88db      	ldrh	r3, [r3, #6]
 8016028:	b29b      	uxth	r3, r3
 801602a:	8afa      	ldrh	r2, [r7, #22]
 801602c:	429a      	cmp	r2, r3
 801602e:	d902      	bls.n	8016036 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016030:	f04f 33ff 	mov.w	r3, #4294967295
 8016034:	e106      	b.n	8016244 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8016036:	68fb      	ldr	r3, [r7, #12]
 8016038:	685b      	ldr	r3, [r3, #4]
 801603a:	627b      	str	r3, [r7, #36]	; 0x24
 801603c:	e068      	b.n	8016110 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801603e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016040:	685b      	ldr	r3, [r3, #4]
 8016042:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8016044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016046:	889b      	ldrh	r3, [r3, #4]
 8016048:	b29a      	uxth	r2, r3
 801604a:	693b      	ldr	r3, [r7, #16]
 801604c:	889b      	ldrh	r3, [r3, #4]
 801604e:	b29b      	uxth	r3, r3
 8016050:	429a      	cmp	r2, r3
 8016052:	d235      	bcs.n	80160c0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016058:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801605a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801605c:	2b00      	cmp	r3, #0
 801605e:	d020      	beq.n	80160a2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8016060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016062:	889b      	ldrh	r3, [r3, #4]
 8016064:	b29a      	uxth	r2, r3
 8016066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016068:	88db      	ldrh	r3, [r3, #6]
 801606a:	b29b      	uxth	r3, r3
 801606c:	429a      	cmp	r2, r3
 801606e:	d307      	bcc.n	8016080 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8016070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016072:	88db      	ldrh	r3, [r3, #6]
 8016074:	b29a      	uxth	r2, r3
 8016076:	693b      	ldr	r3, [r7, #16]
 8016078:	889b      	ldrh	r3, [r3, #4]
 801607a:	b29b      	uxth	r3, r3
 801607c:	429a      	cmp	r2, r3
 801607e:	d902      	bls.n	8016086 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016080:	f04f 33ff 	mov.w	r3, #4294967295
 8016084:	e0de      	b.n	8016244 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8016086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016088:	68ba      	ldr	r2, [r7, #8]
 801608a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801608c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801608e:	88db      	ldrh	r3, [r3, #6]
 8016090:	b29a      	uxth	r2, r3
 8016092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016094:	889b      	ldrh	r3, [r3, #4]
 8016096:	b29b      	uxth	r3, r3
 8016098:	429a      	cmp	r2, r3
 801609a:	d03d      	beq.n	8016118 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801609c:	2300      	movs	r3, #0
 801609e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80160a0:	e03a      	b.n	8016118 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80160a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160a4:	88db      	ldrh	r3, [r3, #6]
 80160a6:	b29a      	uxth	r2, r3
 80160a8:	693b      	ldr	r3, [r7, #16]
 80160aa:	889b      	ldrh	r3, [r3, #4]
 80160ac:	b29b      	uxth	r3, r3
 80160ae:	429a      	cmp	r2, r3
 80160b0:	d902      	bls.n	80160b8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80160b2:	f04f 33ff 	mov.w	r3, #4294967295
 80160b6:	e0c5      	b.n	8016244 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80160b8:	68fb      	ldr	r3, [r7, #12]
 80160ba:	68ba      	ldr	r2, [r7, #8]
 80160bc:	605a      	str	r2, [r3, #4]
      break;
 80160be:	e02b      	b.n	8016118 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80160c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160c2:	889b      	ldrh	r3, [r3, #4]
 80160c4:	b29a      	uxth	r2, r3
 80160c6:	693b      	ldr	r3, [r7, #16]
 80160c8:	889b      	ldrh	r3, [r3, #4]
 80160ca:	b29b      	uxth	r3, r3
 80160cc:	429a      	cmp	r2, r3
 80160ce:	d102      	bne.n	80160d6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80160d0:	f04f 33ff 	mov.w	r3, #4294967295
 80160d4:	e0b6      	b.n	8016244 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80160d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160d8:	889b      	ldrh	r3, [r3, #4]
 80160da:	b29a      	uxth	r2, r3
 80160dc:	693b      	ldr	r3, [r7, #16]
 80160de:	88db      	ldrh	r3, [r3, #6]
 80160e0:	b29b      	uxth	r3, r3
 80160e2:	429a      	cmp	r2, r3
 80160e4:	d202      	bcs.n	80160ec <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80160e6:	f04f 33ff 	mov.w	r3, #4294967295
 80160ea:	e0ab      	b.n	8016244 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80160ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160ee:	2b00      	cmp	r3, #0
 80160f0:	d009      	beq.n	8016106 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80160f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160f4:	88db      	ldrh	r3, [r3, #6]
 80160f6:	b29a      	uxth	r2, r3
 80160f8:	693b      	ldr	r3, [r7, #16]
 80160fa:	889b      	ldrh	r3, [r3, #4]
 80160fc:	b29b      	uxth	r3, r3
 80160fe:	429a      	cmp	r2, r3
 8016100:	d001      	beq.n	8016106 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016102:	2300      	movs	r3, #0
 8016104:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8016106:	693b      	ldr	r3, [r7, #16]
 8016108:	681b      	ldr	r3, [r3, #0]
 801610a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801610c:	693b      	ldr	r3, [r7, #16]
 801610e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8016110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016112:	2b00      	cmp	r3, #0
 8016114:	d193      	bne.n	801603e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8016116:	e000      	b.n	801611a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8016118:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801611c:	2b00      	cmp	r3, #0
 801611e:	d12d      	bne.n	801617c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8016120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016122:	2b00      	cmp	r3, #0
 8016124:	d01c      	beq.n	8016160 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8016126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016128:	88db      	ldrh	r3, [r3, #6]
 801612a:	b29a      	uxth	r2, r3
 801612c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801612e:	889b      	ldrh	r3, [r3, #4]
 8016130:	b29b      	uxth	r3, r3
 8016132:	429a      	cmp	r2, r3
 8016134:	d906      	bls.n	8016144 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8016136:	4b45      	ldr	r3, [pc, #276]	; (801624c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016138:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801613c:	4944      	ldr	r1, [pc, #272]	; (8016250 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801613e:	4845      	ldr	r0, [pc, #276]	; (8016254 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016140:	f001 f832 	bl	80171a8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016146:	68ba      	ldr	r2, [r7, #8]
 8016148:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801614a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801614c:	88db      	ldrh	r3, [r3, #6]
 801614e:	b29a      	uxth	r2, r3
 8016150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016152:	889b      	ldrh	r3, [r3, #4]
 8016154:	b29b      	uxth	r3, r3
 8016156:	429a      	cmp	r2, r3
 8016158:	d010      	beq.n	801617c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801615a:	2300      	movs	r3, #0
 801615c:	623b      	str	r3, [r7, #32]
 801615e:	e00d      	b.n	801617c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016160:	68fb      	ldr	r3, [r7, #12]
 8016162:	685b      	ldr	r3, [r3, #4]
 8016164:	2b00      	cmp	r3, #0
 8016166:	d006      	beq.n	8016176 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016168:	4b38      	ldr	r3, [pc, #224]	; (801624c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801616a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801616e:	493a      	ldr	r1, [pc, #232]	; (8016258 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016170:	4838      	ldr	r0, [pc, #224]	; (8016254 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016172:	f001 f819 	bl	80171a8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	68ba      	ldr	r2, [r7, #8]
 801617a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	2b00      	cmp	r3, #0
 8016180:	d105      	bne.n	801618e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8016182:	68fb      	ldr	r3, [r7, #12]
 8016184:	7f9b      	ldrb	r3, [r3, #30]
 8016186:	f003 0301 	and.w	r3, r3, #1
 801618a:	2b00      	cmp	r3, #0
 801618c:	d059      	beq.n	8016242 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801618e:	6a3b      	ldr	r3, [r7, #32]
 8016190:	2b00      	cmp	r3, #0
 8016192:	d04f      	beq.n	8016234 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8016194:	68fb      	ldr	r3, [r7, #12]
 8016196:	685b      	ldr	r3, [r3, #4]
 8016198:	2b00      	cmp	r3, #0
 801619a:	d006      	beq.n	80161aa <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801619c:	68fb      	ldr	r3, [r7, #12]
 801619e:	685b      	ldr	r3, [r3, #4]
 80161a0:	685b      	ldr	r3, [r3, #4]
 80161a2:	889b      	ldrh	r3, [r3, #4]
 80161a4:	b29b      	uxth	r3, r3
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	d002      	beq.n	80161b0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80161aa:	2300      	movs	r3, #0
 80161ac:	623b      	str	r3, [r7, #32]
 80161ae:	e041      	b.n	8016234 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80161b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161b2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80161b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161b6:	681b      	ldr	r3, [r3, #0]
 80161b8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80161ba:	e012      	b.n	80161e2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80161bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161be:	685b      	ldr	r3, [r3, #4]
 80161c0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80161c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161c4:	88db      	ldrh	r3, [r3, #6]
 80161c6:	b29a      	uxth	r2, r3
 80161c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161ca:	889b      	ldrh	r3, [r3, #4]
 80161cc:	b29b      	uxth	r3, r3
 80161ce:	429a      	cmp	r2, r3
 80161d0:	d002      	beq.n	80161d8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80161d2:	2300      	movs	r3, #0
 80161d4:	623b      	str	r3, [r7, #32]
            break;
 80161d6:	e007      	b.n	80161e8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80161d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161da:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80161dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161de:	681b      	ldr	r3, [r3, #0]
 80161e0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80161e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	d1e9      	bne.n	80161bc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80161e8:	6a3b      	ldr	r3, [r7, #32]
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	d022      	beq.n	8016234 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80161ee:	68fb      	ldr	r3, [r7, #12]
 80161f0:	685b      	ldr	r3, [r3, #4]
 80161f2:	2b00      	cmp	r3, #0
 80161f4:	d106      	bne.n	8016204 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80161f6:	4b15      	ldr	r3, [pc, #84]	; (801624c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80161f8:	f240 12df 	movw	r2, #479	; 0x1df
 80161fc:	4917      	ldr	r1, [pc, #92]	; (801625c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80161fe:	4815      	ldr	r0, [pc, #84]	; (8016254 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016200:	f000 ffd2 	bl	80171a8 <iprintf>
          LWIP_ASSERT("sanity check",
 8016204:	68fb      	ldr	r3, [r7, #12]
 8016206:	685b      	ldr	r3, [r3, #4]
 8016208:	685b      	ldr	r3, [r3, #4]
 801620a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801620c:	429a      	cmp	r2, r3
 801620e:	d106      	bne.n	801621e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8016210:	4b0e      	ldr	r3, [pc, #56]	; (801624c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016212:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8016216:	4911      	ldr	r1, [pc, #68]	; (801625c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016218:	480e      	ldr	r0, [pc, #56]	; (8016254 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801621a:	f000 ffc5 	bl	80171a8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801621e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016220:	681b      	ldr	r3, [r3, #0]
 8016222:	2b00      	cmp	r3, #0
 8016224:	d006      	beq.n	8016234 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8016226:	4b09      	ldr	r3, [pc, #36]	; (801624c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016228:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801622c:	490c      	ldr	r1, [pc, #48]	; (8016260 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801622e:	4809      	ldr	r0, [pc, #36]	; (8016254 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016230:	f000 ffba 	bl	80171a8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016234:	6a3b      	ldr	r3, [r7, #32]
 8016236:	2b00      	cmp	r3, #0
 8016238:	bf14      	ite	ne
 801623a:	2301      	movne	r3, #1
 801623c:	2300      	moveq	r3, #0
 801623e:	b2db      	uxtb	r3, r3
 8016240:	e000      	b.n	8016244 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8016242:	2300      	movs	r3, #0
}
 8016244:	4618      	mov	r0, r3
 8016246:	3730      	adds	r7, #48	; 0x30
 8016248:	46bd      	mov	sp, r7
 801624a:	bd80      	pop	{r7, pc}
 801624c:	0801bc2c 	.word	0x0801bc2c
 8016250:	0801bd10 	.word	0x0801bd10
 8016254:	0801bc74 	.word	0x0801bc74
 8016258:	0801bd30 	.word	0x0801bd30
 801625c:	0801bd68 	.word	0x0801bd68
 8016260:	0801bd78 	.word	0x0801bd78

08016264 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016264:	b580      	push	{r7, lr}
 8016266:	b08e      	sub	sp, #56	; 0x38
 8016268:	af00      	add	r7, sp, #0
 801626a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	685b      	ldr	r3, [r3, #4]
 8016270:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8016272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016274:	781b      	ldrb	r3, [r3, #0]
 8016276:	f003 030f 	and.w	r3, r3, #15
 801627a:	b2db      	uxtb	r3, r3
 801627c:	009b      	lsls	r3, r3, #2
 801627e:	b2db      	uxtb	r3, r3
 8016280:	2b14      	cmp	r3, #20
 8016282:	f040 8167 	bne.w	8016554 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8016286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016288:	88db      	ldrh	r3, [r3, #6]
 801628a:	b29b      	uxth	r3, r3
 801628c:	4618      	mov	r0, r3
 801628e:	f7f3 fd59 	bl	8009d44 <lwip_htons>
 8016292:	4603      	mov	r3, r0
 8016294:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016298:	b29b      	uxth	r3, r3
 801629a:	00db      	lsls	r3, r3, #3
 801629c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801629e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162a0:	885b      	ldrh	r3, [r3, #2]
 80162a2:	b29b      	uxth	r3, r3
 80162a4:	4618      	mov	r0, r3
 80162a6:	f7f3 fd4d 	bl	8009d44 <lwip_htons>
 80162aa:	4603      	mov	r3, r0
 80162ac:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80162ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162b0:	781b      	ldrb	r3, [r3, #0]
 80162b2:	f003 030f 	and.w	r3, r3, #15
 80162b6:	b2db      	uxtb	r3, r3
 80162b8:	009b      	lsls	r3, r3, #2
 80162ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80162be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80162c2:	b29b      	uxth	r3, r3
 80162c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80162c6:	429a      	cmp	r2, r3
 80162c8:	f0c0 8146 	bcc.w	8016558 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80162cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80162d0:	b29b      	uxth	r3, r3
 80162d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80162d4:	1ad3      	subs	r3, r2, r3
 80162d6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80162d8:	6878      	ldr	r0, [r7, #4]
 80162da:	f7f5 f979 	bl	800b5d0 <pbuf_clen>
 80162de:	4603      	mov	r3, r0
 80162e0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80162e2:	4b9f      	ldr	r3, [pc, #636]	; (8016560 <ip4_reass+0x2fc>)
 80162e4:	881b      	ldrh	r3, [r3, #0]
 80162e6:	461a      	mov	r2, r3
 80162e8:	8c3b      	ldrh	r3, [r7, #32]
 80162ea:	4413      	add	r3, r2
 80162ec:	2b0a      	cmp	r3, #10
 80162ee:	dd10      	ble.n	8016312 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80162f0:	8c3b      	ldrh	r3, [r7, #32]
 80162f2:	4619      	mov	r1, r3
 80162f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80162f6:	f7ff fd81 	bl	8015dfc <ip_reass_remove_oldest_datagram>
 80162fa:	4603      	mov	r3, r0
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	f000 812d 	beq.w	801655c <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8016302:	4b97      	ldr	r3, [pc, #604]	; (8016560 <ip4_reass+0x2fc>)
 8016304:	881b      	ldrh	r3, [r3, #0]
 8016306:	461a      	mov	r2, r3
 8016308:	8c3b      	ldrh	r3, [r7, #32]
 801630a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801630c:	2b0a      	cmp	r3, #10
 801630e:	f300 8125 	bgt.w	801655c <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016312:	4b94      	ldr	r3, [pc, #592]	; (8016564 <ip4_reass+0x300>)
 8016314:	681b      	ldr	r3, [r3, #0]
 8016316:	633b      	str	r3, [r7, #48]	; 0x30
 8016318:	e015      	b.n	8016346 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801631a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801631c:	695a      	ldr	r2, [r3, #20]
 801631e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016320:	68db      	ldr	r3, [r3, #12]
 8016322:	429a      	cmp	r2, r3
 8016324:	d10c      	bne.n	8016340 <ip4_reass+0xdc>
 8016326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016328:	699a      	ldr	r2, [r3, #24]
 801632a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801632c:	691b      	ldr	r3, [r3, #16]
 801632e:	429a      	cmp	r2, r3
 8016330:	d106      	bne.n	8016340 <ip4_reass+0xdc>
 8016332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016334:	899a      	ldrh	r2, [r3, #12]
 8016336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016338:	889b      	ldrh	r3, [r3, #4]
 801633a:	b29b      	uxth	r3, r3
 801633c:	429a      	cmp	r2, r3
 801633e:	d006      	beq.n	801634e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016342:	681b      	ldr	r3, [r3, #0]
 8016344:	633b      	str	r3, [r7, #48]	; 0x30
 8016346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016348:	2b00      	cmp	r3, #0
 801634a:	d1e6      	bne.n	801631a <ip4_reass+0xb6>
 801634c:	e000      	b.n	8016350 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801634e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016352:	2b00      	cmp	r3, #0
 8016354:	d109      	bne.n	801636a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8016356:	8c3b      	ldrh	r3, [r7, #32]
 8016358:	4619      	mov	r1, r3
 801635a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801635c:	f7ff fdb0 	bl	8015ec0 <ip_reass_enqueue_new_datagram>
 8016360:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8016362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016364:	2b00      	cmp	r3, #0
 8016366:	d11c      	bne.n	80163a2 <ip4_reass+0x13e>
      goto nullreturn;
 8016368:	e109      	b.n	801657e <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801636a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801636c:	88db      	ldrh	r3, [r3, #6]
 801636e:	b29b      	uxth	r3, r3
 8016370:	4618      	mov	r0, r3
 8016372:	f7f3 fce7 	bl	8009d44 <lwip_htons>
 8016376:	4603      	mov	r3, r0
 8016378:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801637c:	2b00      	cmp	r3, #0
 801637e:	d110      	bne.n	80163a2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016382:	89db      	ldrh	r3, [r3, #14]
 8016384:	4618      	mov	r0, r3
 8016386:	f7f3 fcdd 	bl	8009d44 <lwip_htons>
 801638a:	4603      	mov	r3, r0
 801638c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016390:	2b00      	cmp	r3, #0
 8016392:	d006      	beq.n	80163a2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8016394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016396:	3308      	adds	r3, #8
 8016398:	2214      	movs	r2, #20
 801639a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801639c:	4618      	mov	r0, r3
 801639e:	f000 fe78 	bl	8017092 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80163a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163a4:	88db      	ldrh	r3, [r3, #6]
 80163a6:	b29b      	uxth	r3, r3
 80163a8:	f003 0320 	and.w	r3, r3, #32
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	bf0c      	ite	eq
 80163b0:	2301      	moveq	r3, #1
 80163b2:	2300      	movne	r3, #0
 80163b4:	b2db      	uxtb	r3, r3
 80163b6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80163b8:	69fb      	ldr	r3, [r7, #28]
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d00e      	beq.n	80163dc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80163be:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80163c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80163c2:	4413      	add	r3, r2
 80163c4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80163c6:	8b7a      	ldrh	r2, [r7, #26]
 80163c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80163ca:	429a      	cmp	r2, r3
 80163cc:	f0c0 80a0 	bcc.w	8016510 <ip4_reass+0x2ac>
 80163d0:	8b7b      	ldrh	r3, [r7, #26]
 80163d2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80163d6:	4293      	cmp	r3, r2
 80163d8:	f200 809a 	bhi.w	8016510 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80163dc:	69fa      	ldr	r2, [r7, #28]
 80163de:	6879      	ldr	r1, [r7, #4]
 80163e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80163e2:	f7ff fdd5 	bl	8015f90 <ip_reass_chain_frag_into_datagram_and_validate>
 80163e6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80163e8:	697b      	ldr	r3, [r7, #20]
 80163ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80163ee:	f000 8091 	beq.w	8016514 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80163f2:	4b5b      	ldr	r3, [pc, #364]	; (8016560 <ip4_reass+0x2fc>)
 80163f4:	881a      	ldrh	r2, [r3, #0]
 80163f6:	8c3b      	ldrh	r3, [r7, #32]
 80163f8:	4413      	add	r3, r2
 80163fa:	b29a      	uxth	r2, r3
 80163fc:	4b58      	ldr	r3, [pc, #352]	; (8016560 <ip4_reass+0x2fc>)
 80163fe:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8016400:	69fb      	ldr	r3, [r7, #28]
 8016402:	2b00      	cmp	r3, #0
 8016404:	d00d      	beq.n	8016422 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8016406:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016408:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801640a:	4413      	add	r3, r2
 801640c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801640e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016410:	8a7a      	ldrh	r2, [r7, #18]
 8016412:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8016414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016416:	7f9b      	ldrb	r3, [r3, #30]
 8016418:	f043 0301 	orr.w	r3, r3, #1
 801641c:	b2da      	uxtb	r2, r3
 801641e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016420:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8016422:	697b      	ldr	r3, [r7, #20]
 8016424:	2b01      	cmp	r3, #1
 8016426:	d171      	bne.n	801650c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8016428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801642a:	8b9b      	ldrh	r3, [r3, #28]
 801642c:	3314      	adds	r3, #20
 801642e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8016430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016432:	685b      	ldr	r3, [r3, #4]
 8016434:	685b      	ldr	r3, [r3, #4]
 8016436:	681b      	ldr	r3, [r3, #0]
 8016438:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801643a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801643c:	685b      	ldr	r3, [r3, #4]
 801643e:	685b      	ldr	r3, [r3, #4]
 8016440:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8016442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016444:	3308      	adds	r3, #8
 8016446:	2214      	movs	r2, #20
 8016448:	4619      	mov	r1, r3
 801644a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801644c:	f000 fe21 	bl	8017092 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8016450:	8a3b      	ldrh	r3, [r7, #16]
 8016452:	4618      	mov	r0, r3
 8016454:	f7f3 fc76 	bl	8009d44 <lwip_htons>
 8016458:	4603      	mov	r3, r0
 801645a:	461a      	mov	r2, r3
 801645c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801645e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016462:	2200      	movs	r2, #0
 8016464:	719a      	strb	r2, [r3, #6]
 8016466:	2200      	movs	r2, #0
 8016468:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801646a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801646c:	2200      	movs	r2, #0
 801646e:	729a      	strb	r2, [r3, #10]
 8016470:	2200      	movs	r2, #0
 8016472:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016476:	685b      	ldr	r3, [r3, #4]
 8016478:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801647a:	e00d      	b.n	8016498 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801647c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801647e:	685b      	ldr	r3, [r3, #4]
 8016480:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8016482:	2114      	movs	r1, #20
 8016484:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016486:	f7f4 ff8f 	bl	800b3a8 <pbuf_remove_header>
      pbuf_cat(p, r);
 801648a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801648c:	6878      	ldr	r0, [r7, #4]
 801648e:	f7f5 f8df 	bl	800b650 <pbuf_cat>
      r = iprh->next_pbuf;
 8016492:	68fb      	ldr	r3, [r7, #12]
 8016494:	681b      	ldr	r3, [r3, #0]
 8016496:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8016498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801649a:	2b00      	cmp	r3, #0
 801649c:	d1ee      	bne.n	801647c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801649e:	4b31      	ldr	r3, [pc, #196]	; (8016564 <ip4_reass+0x300>)
 80164a0:	681b      	ldr	r3, [r3, #0]
 80164a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80164a4:	429a      	cmp	r2, r3
 80164a6:	d102      	bne.n	80164ae <ip4_reass+0x24a>
      ipr_prev = NULL;
 80164a8:	2300      	movs	r3, #0
 80164aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80164ac:	e010      	b.n	80164d0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80164ae:	4b2d      	ldr	r3, [pc, #180]	; (8016564 <ip4_reass+0x300>)
 80164b0:	681b      	ldr	r3, [r3, #0]
 80164b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80164b4:	e007      	b.n	80164c6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80164b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164b8:	681b      	ldr	r3, [r3, #0]
 80164ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80164bc:	429a      	cmp	r2, r3
 80164be:	d006      	beq.n	80164ce <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80164c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164c2:	681b      	ldr	r3, [r3, #0]
 80164c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80164c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d1f4      	bne.n	80164b6 <ip4_reass+0x252>
 80164cc:	e000      	b.n	80164d0 <ip4_reass+0x26c>
          break;
 80164ce:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80164d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80164d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80164d4:	f7ff fd2e 	bl	8015f34 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80164d8:	6878      	ldr	r0, [r7, #4]
 80164da:	f7f5 f879 	bl	800b5d0 <pbuf_clen>
 80164de:	4603      	mov	r3, r0
 80164e0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80164e2:	4b1f      	ldr	r3, [pc, #124]	; (8016560 <ip4_reass+0x2fc>)
 80164e4:	881b      	ldrh	r3, [r3, #0]
 80164e6:	8c3a      	ldrh	r2, [r7, #32]
 80164e8:	429a      	cmp	r2, r3
 80164ea:	d906      	bls.n	80164fa <ip4_reass+0x296>
 80164ec:	4b1e      	ldr	r3, [pc, #120]	; (8016568 <ip4_reass+0x304>)
 80164ee:	f240 229b 	movw	r2, #667	; 0x29b
 80164f2:	491e      	ldr	r1, [pc, #120]	; (801656c <ip4_reass+0x308>)
 80164f4:	481e      	ldr	r0, [pc, #120]	; (8016570 <ip4_reass+0x30c>)
 80164f6:	f000 fe57 	bl	80171a8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80164fa:	4b19      	ldr	r3, [pc, #100]	; (8016560 <ip4_reass+0x2fc>)
 80164fc:	881a      	ldrh	r2, [r3, #0]
 80164fe:	8c3b      	ldrh	r3, [r7, #32]
 8016500:	1ad3      	subs	r3, r2, r3
 8016502:	b29a      	uxth	r2, r3
 8016504:	4b16      	ldr	r3, [pc, #88]	; (8016560 <ip4_reass+0x2fc>)
 8016506:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	e03c      	b.n	8016586 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801650c:	2300      	movs	r3, #0
 801650e:	e03a      	b.n	8016586 <ip4_reass+0x322>
      goto nullreturn_ipr;
 8016510:	bf00      	nop
 8016512:	e000      	b.n	8016516 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8016514:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8016516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016518:	2b00      	cmp	r3, #0
 801651a:	d106      	bne.n	801652a <ip4_reass+0x2c6>
 801651c:	4b12      	ldr	r3, [pc, #72]	; (8016568 <ip4_reass+0x304>)
 801651e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8016522:	4914      	ldr	r1, [pc, #80]	; (8016574 <ip4_reass+0x310>)
 8016524:	4812      	ldr	r0, [pc, #72]	; (8016570 <ip4_reass+0x30c>)
 8016526:	f000 fe3f 	bl	80171a8 <iprintf>
  if (ipr->p == NULL) {
 801652a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801652c:	685b      	ldr	r3, [r3, #4]
 801652e:	2b00      	cmp	r3, #0
 8016530:	d124      	bne.n	801657c <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8016532:	4b0c      	ldr	r3, [pc, #48]	; (8016564 <ip4_reass+0x300>)
 8016534:	681b      	ldr	r3, [r3, #0]
 8016536:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016538:	429a      	cmp	r2, r3
 801653a:	d006      	beq.n	801654a <ip4_reass+0x2e6>
 801653c:	4b0a      	ldr	r3, [pc, #40]	; (8016568 <ip4_reass+0x304>)
 801653e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016542:	490d      	ldr	r1, [pc, #52]	; (8016578 <ip4_reass+0x314>)
 8016544:	480a      	ldr	r0, [pc, #40]	; (8016570 <ip4_reass+0x30c>)
 8016546:	f000 fe2f 	bl	80171a8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801654a:	2100      	movs	r1, #0
 801654c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801654e:	f7ff fcf1 	bl	8015f34 <ip_reass_dequeue_datagram>
 8016552:	e014      	b.n	801657e <ip4_reass+0x31a>
    goto nullreturn;
 8016554:	bf00      	nop
 8016556:	e012      	b.n	801657e <ip4_reass+0x31a>
    goto nullreturn;
 8016558:	bf00      	nop
 801655a:	e010      	b.n	801657e <ip4_reass+0x31a>
      goto nullreturn;
 801655c:	bf00      	nop
 801655e:	e00e      	b.n	801657e <ip4_reass+0x31a>
 8016560:	20008690 	.word	0x20008690
 8016564:	2000868c 	.word	0x2000868c
 8016568:	0801bc2c 	.word	0x0801bc2c
 801656c:	0801bd9c 	.word	0x0801bd9c
 8016570:	0801bc74 	.word	0x0801bc74
 8016574:	0801bdb8 	.word	0x0801bdb8
 8016578:	0801bdc4 	.word	0x0801bdc4
  }

nullreturn:
 801657c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801657e:	6878      	ldr	r0, [r7, #4]
 8016580:	f7f4 ff98 	bl	800b4b4 <pbuf_free>
  return NULL;
 8016584:	2300      	movs	r3, #0
}
 8016586:	4618      	mov	r0, r3
 8016588:	3738      	adds	r7, #56	; 0x38
 801658a:	46bd      	mov	sp, r7
 801658c:	bd80      	pop	{r7, pc}
 801658e:	bf00      	nop

08016590 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016590:	b580      	push	{r7, lr}
 8016592:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016594:	2005      	movs	r0, #5
 8016596:	f7f4 f88b 	bl	800a6b0 <memp_malloc>
 801659a:	4603      	mov	r3, r0
}
 801659c:	4618      	mov	r0, r3
 801659e:	bd80      	pop	{r7, pc}

080165a0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80165a0:	b580      	push	{r7, lr}
 80165a2:	b082      	sub	sp, #8
 80165a4:	af00      	add	r7, sp, #0
 80165a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	2b00      	cmp	r3, #0
 80165ac:	d106      	bne.n	80165bc <ip_frag_free_pbuf_custom_ref+0x1c>
 80165ae:	4b07      	ldr	r3, [pc, #28]	; (80165cc <ip_frag_free_pbuf_custom_ref+0x2c>)
 80165b0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80165b4:	4906      	ldr	r1, [pc, #24]	; (80165d0 <ip_frag_free_pbuf_custom_ref+0x30>)
 80165b6:	4807      	ldr	r0, [pc, #28]	; (80165d4 <ip_frag_free_pbuf_custom_ref+0x34>)
 80165b8:	f000 fdf6 	bl	80171a8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80165bc:	6879      	ldr	r1, [r7, #4]
 80165be:	2005      	movs	r0, #5
 80165c0:	f7f4 f8c8 	bl	800a754 <memp_free>
}
 80165c4:	bf00      	nop
 80165c6:	3708      	adds	r7, #8
 80165c8:	46bd      	mov	sp, r7
 80165ca:	bd80      	pop	{r7, pc}
 80165cc:	0801bc2c 	.word	0x0801bc2c
 80165d0:	0801bde4 	.word	0x0801bde4
 80165d4:	0801bc74 	.word	0x0801bc74

080165d8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80165d8:	b580      	push	{r7, lr}
 80165da:	b084      	sub	sp, #16
 80165dc:	af00      	add	r7, sp, #0
 80165de:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80165e4:	68fb      	ldr	r3, [r7, #12]
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	d106      	bne.n	80165f8 <ipfrag_free_pbuf_custom+0x20>
 80165ea:	4b11      	ldr	r3, [pc, #68]	; (8016630 <ipfrag_free_pbuf_custom+0x58>)
 80165ec:	f240 22ce 	movw	r2, #718	; 0x2ce
 80165f0:	4910      	ldr	r1, [pc, #64]	; (8016634 <ipfrag_free_pbuf_custom+0x5c>)
 80165f2:	4811      	ldr	r0, [pc, #68]	; (8016638 <ipfrag_free_pbuf_custom+0x60>)
 80165f4:	f000 fdd8 	bl	80171a8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80165f8:	68fa      	ldr	r2, [r7, #12]
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	429a      	cmp	r2, r3
 80165fe:	d006      	beq.n	801660e <ipfrag_free_pbuf_custom+0x36>
 8016600:	4b0b      	ldr	r3, [pc, #44]	; (8016630 <ipfrag_free_pbuf_custom+0x58>)
 8016602:	f240 22cf 	movw	r2, #719	; 0x2cf
 8016606:	490d      	ldr	r1, [pc, #52]	; (801663c <ipfrag_free_pbuf_custom+0x64>)
 8016608:	480b      	ldr	r0, [pc, #44]	; (8016638 <ipfrag_free_pbuf_custom+0x60>)
 801660a:	f000 fdcd 	bl	80171a8 <iprintf>
  if (pcr->original != NULL) {
 801660e:	68fb      	ldr	r3, [r7, #12]
 8016610:	695b      	ldr	r3, [r3, #20]
 8016612:	2b00      	cmp	r3, #0
 8016614:	d004      	beq.n	8016620 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8016616:	68fb      	ldr	r3, [r7, #12]
 8016618:	695b      	ldr	r3, [r3, #20]
 801661a:	4618      	mov	r0, r3
 801661c:	f7f4 ff4a 	bl	800b4b4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016620:	68f8      	ldr	r0, [r7, #12]
 8016622:	f7ff ffbd 	bl	80165a0 <ip_frag_free_pbuf_custom_ref>
}
 8016626:	bf00      	nop
 8016628:	3710      	adds	r7, #16
 801662a:	46bd      	mov	sp, r7
 801662c:	bd80      	pop	{r7, pc}
 801662e:	bf00      	nop
 8016630:	0801bc2c 	.word	0x0801bc2c
 8016634:	0801bdf0 	.word	0x0801bdf0
 8016638:	0801bc74 	.word	0x0801bc74
 801663c:	0801bdfc 	.word	0x0801bdfc

08016640 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016640:	b580      	push	{r7, lr}
 8016642:	b094      	sub	sp, #80	; 0x50
 8016644:	af02      	add	r7, sp, #8
 8016646:	60f8      	str	r0, [r7, #12]
 8016648:	60b9      	str	r1, [r7, #8]
 801664a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801664c:	2300      	movs	r3, #0
 801664e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8016652:	68bb      	ldr	r3, [r7, #8]
 8016654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016656:	3b14      	subs	r3, #20
 8016658:	2b00      	cmp	r3, #0
 801665a:	da00      	bge.n	801665e <ip4_frag+0x1e>
 801665c:	3307      	adds	r3, #7
 801665e:	10db      	asrs	r3, r3, #3
 8016660:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8016662:	2314      	movs	r3, #20
 8016664:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016666:	68fb      	ldr	r3, [r7, #12]
 8016668:	685b      	ldr	r3, [r3, #4]
 801666a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801666c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801666e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8016670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016672:	781b      	ldrb	r3, [r3, #0]
 8016674:	f003 030f 	and.w	r3, r3, #15
 8016678:	b2db      	uxtb	r3, r3
 801667a:	009b      	lsls	r3, r3, #2
 801667c:	b2db      	uxtb	r3, r3
 801667e:	2b14      	cmp	r3, #20
 8016680:	d002      	beq.n	8016688 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8016682:	f06f 0305 	mvn.w	r3, #5
 8016686:	e110      	b.n	80168aa <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8016688:	68fb      	ldr	r3, [r7, #12]
 801668a:	895b      	ldrh	r3, [r3, #10]
 801668c:	2b13      	cmp	r3, #19
 801668e:	d809      	bhi.n	80166a4 <ip4_frag+0x64>
 8016690:	4b88      	ldr	r3, [pc, #544]	; (80168b4 <ip4_frag+0x274>)
 8016692:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8016696:	4988      	ldr	r1, [pc, #544]	; (80168b8 <ip4_frag+0x278>)
 8016698:	4888      	ldr	r0, [pc, #544]	; (80168bc <ip4_frag+0x27c>)
 801669a:	f000 fd85 	bl	80171a8 <iprintf>
 801669e:	f06f 0305 	mvn.w	r3, #5
 80166a2:	e102      	b.n	80168aa <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80166a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166a6:	88db      	ldrh	r3, [r3, #6]
 80166a8:	b29b      	uxth	r3, r3
 80166aa:	4618      	mov	r0, r3
 80166ac:	f7f3 fb4a 	bl	8009d44 <lwip_htons>
 80166b0:	4603      	mov	r3, r0
 80166b2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80166b4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80166b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80166ba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80166be:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80166c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80166c4:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80166c6:	68fb      	ldr	r3, [r7, #12]
 80166c8:	891b      	ldrh	r3, [r3, #8]
 80166ca:	3b14      	subs	r3, #20
 80166cc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80166d0:	e0e1      	b.n	8016896 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80166d2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80166d4:	00db      	lsls	r3, r3, #3
 80166d6:	b29b      	uxth	r3, r3
 80166d8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80166dc:	4293      	cmp	r3, r2
 80166de:	bf28      	it	cs
 80166e0:	4613      	movcs	r3, r2
 80166e2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80166e4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80166e8:	2114      	movs	r1, #20
 80166ea:	200e      	movs	r0, #14
 80166ec:	f7f4 fbfe 	bl	800aeec <pbuf_alloc>
 80166f0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80166f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	f000 80d5 	beq.w	80168a4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80166fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166fc:	895b      	ldrh	r3, [r3, #10]
 80166fe:	2b13      	cmp	r3, #19
 8016700:	d806      	bhi.n	8016710 <ip4_frag+0xd0>
 8016702:	4b6c      	ldr	r3, [pc, #432]	; (80168b4 <ip4_frag+0x274>)
 8016704:	f44f 7249 	mov.w	r2, #804	; 0x324
 8016708:	496d      	ldr	r1, [pc, #436]	; (80168c0 <ip4_frag+0x280>)
 801670a:	486c      	ldr	r0, [pc, #432]	; (80168bc <ip4_frag+0x27c>)
 801670c:	f000 fd4c 	bl	80171a8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016712:	685b      	ldr	r3, [r3, #4]
 8016714:	2214      	movs	r2, #20
 8016716:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016718:	4618      	mov	r0, r3
 801671a:	f000 fcba 	bl	8017092 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801671e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016720:	685b      	ldr	r3, [r3, #4]
 8016722:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8016724:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016726:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801672a:	e064      	b.n	80167f6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801672c:	68fb      	ldr	r3, [r7, #12]
 801672e:	895a      	ldrh	r2, [r3, #10]
 8016730:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016732:	1ad3      	subs	r3, r2, r3
 8016734:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8016736:	68fb      	ldr	r3, [r7, #12]
 8016738:	895b      	ldrh	r3, [r3, #10]
 801673a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801673c:	429a      	cmp	r2, r3
 801673e:	d906      	bls.n	801674e <ip4_frag+0x10e>
 8016740:	4b5c      	ldr	r3, [pc, #368]	; (80168b4 <ip4_frag+0x274>)
 8016742:	f240 322d 	movw	r2, #813	; 0x32d
 8016746:	495f      	ldr	r1, [pc, #380]	; (80168c4 <ip4_frag+0x284>)
 8016748:	485c      	ldr	r0, [pc, #368]	; (80168bc <ip4_frag+0x27c>)
 801674a:	f000 fd2d 	bl	80171a8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801674e:	8bfa      	ldrh	r2, [r7, #30]
 8016750:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016754:	4293      	cmp	r3, r2
 8016756:	bf28      	it	cs
 8016758:	4613      	movcs	r3, r2
 801675a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801675e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016762:	2b00      	cmp	r3, #0
 8016764:	d105      	bne.n	8016772 <ip4_frag+0x132>
        poff = 0;
 8016766:	2300      	movs	r3, #0
 8016768:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801676a:	68fb      	ldr	r3, [r7, #12]
 801676c:	681b      	ldr	r3, [r3, #0]
 801676e:	60fb      	str	r3, [r7, #12]
        continue;
 8016770:	e041      	b.n	80167f6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8016772:	f7ff ff0d 	bl	8016590 <ip_frag_alloc_pbuf_custom_ref>
 8016776:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016778:	69bb      	ldr	r3, [r7, #24]
 801677a:	2b00      	cmp	r3, #0
 801677c:	d103      	bne.n	8016786 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801677e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016780:	f7f4 fe98 	bl	800b4b4 <pbuf_free>
        goto memerr;
 8016784:	e08f      	b.n	80168a6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016786:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8016788:	68fb      	ldr	r3, [r7, #12]
 801678a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801678c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801678e:	4413      	add	r3, r2
 8016790:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8016794:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8016798:	9201      	str	r2, [sp, #4]
 801679a:	9300      	str	r3, [sp, #0]
 801679c:	4603      	mov	r3, r0
 801679e:	2241      	movs	r2, #65	; 0x41
 80167a0:	2000      	movs	r0, #0
 80167a2:	f7f4 fccd 	bl	800b140 <pbuf_alloced_custom>
 80167a6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80167a8:	697b      	ldr	r3, [r7, #20]
 80167aa:	2b00      	cmp	r3, #0
 80167ac:	d106      	bne.n	80167bc <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80167ae:	69b8      	ldr	r0, [r7, #24]
 80167b0:	f7ff fef6 	bl	80165a0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80167b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80167b6:	f7f4 fe7d 	bl	800b4b4 <pbuf_free>
        goto memerr;
 80167ba:	e074      	b.n	80168a6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80167bc:	68f8      	ldr	r0, [r7, #12]
 80167be:	f7f4 ff1f 	bl	800b600 <pbuf_ref>
      pcr->original = p;
 80167c2:	69bb      	ldr	r3, [r7, #24]
 80167c4:	68fa      	ldr	r2, [r7, #12]
 80167c6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80167c8:	69bb      	ldr	r3, [r7, #24]
 80167ca:	4a3f      	ldr	r2, [pc, #252]	; (80168c8 <ip4_frag+0x288>)
 80167cc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80167ce:	6979      	ldr	r1, [r7, #20]
 80167d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80167d2:	f7f4 ff3d 	bl	800b650 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80167d6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80167da:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80167de:	1ad3      	subs	r3, r2, r3
 80167e0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80167e4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	d004      	beq.n	80167f6 <ip4_frag+0x1b6>
        poff = 0;
 80167ec:	2300      	movs	r3, #0
 80167ee:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80167f0:	68fb      	ldr	r3, [r7, #12]
 80167f2:	681b      	ldr	r3, [r3, #0]
 80167f4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80167f6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	d196      	bne.n	801672c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80167fe:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016800:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016804:	4413      	add	r3, r2
 8016806:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016808:	68bb      	ldr	r3, [r7, #8]
 801680a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801680c:	f1a3 0213 	sub.w	r2, r3, #19
 8016810:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016814:	429a      	cmp	r2, r3
 8016816:	bfcc      	ite	gt
 8016818:	2301      	movgt	r3, #1
 801681a:	2300      	movle	r3, #0
 801681c:	b2db      	uxtb	r3, r3
 801681e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016820:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016824:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016828:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801682a:	6a3b      	ldr	r3, [r7, #32]
 801682c:	2b00      	cmp	r3, #0
 801682e:	d002      	beq.n	8016836 <ip4_frag+0x1f6>
 8016830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016832:	2b00      	cmp	r3, #0
 8016834:	d003      	beq.n	801683e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8016836:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016838:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801683c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801683e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016840:	4618      	mov	r0, r3
 8016842:	f7f3 fa7f 	bl	8009d44 <lwip_htons>
 8016846:	4603      	mov	r3, r0
 8016848:	461a      	mov	r2, r3
 801684a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801684c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801684e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016850:	3314      	adds	r3, #20
 8016852:	b29b      	uxth	r3, r3
 8016854:	4618      	mov	r0, r3
 8016856:	f7f3 fa75 	bl	8009d44 <lwip_htons>
 801685a:	4603      	mov	r3, r0
 801685c:	461a      	mov	r2, r3
 801685e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016860:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8016862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016864:	2200      	movs	r2, #0
 8016866:	729a      	strb	r2, [r3, #10]
 8016868:	2200      	movs	r2, #0
 801686a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801686c:	68bb      	ldr	r3, [r7, #8]
 801686e:	695b      	ldr	r3, [r3, #20]
 8016870:	687a      	ldr	r2, [r7, #4]
 8016872:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016874:	68b8      	ldr	r0, [r7, #8]
 8016876:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016878:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801687a:	f7f4 fe1b 	bl	800b4b4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801687e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016882:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016884:	1ad3      	subs	r3, r2, r3
 8016886:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801688a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801688e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016890:	4413      	add	r3, r2
 8016892:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8016896:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801689a:	2b00      	cmp	r3, #0
 801689c:	f47f af19 	bne.w	80166d2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80168a0:	2300      	movs	r3, #0
 80168a2:	e002      	b.n	80168aa <ip4_frag+0x26a>
      goto memerr;
 80168a4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80168a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80168aa:	4618      	mov	r0, r3
 80168ac:	3748      	adds	r7, #72	; 0x48
 80168ae:	46bd      	mov	sp, r7
 80168b0:	bd80      	pop	{r7, pc}
 80168b2:	bf00      	nop
 80168b4:	0801bc2c 	.word	0x0801bc2c
 80168b8:	0801be08 	.word	0x0801be08
 80168bc:	0801bc74 	.word	0x0801bc74
 80168c0:	0801be24 	.word	0x0801be24
 80168c4:	0801be44 	.word	0x0801be44
 80168c8:	080165d9 	.word	0x080165d9

080168cc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80168cc:	b580      	push	{r7, lr}
 80168ce:	b086      	sub	sp, #24
 80168d0:	af00      	add	r7, sp, #0
 80168d2:	6078      	str	r0, [r7, #4]
 80168d4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80168d6:	230e      	movs	r3, #14
 80168d8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	895b      	ldrh	r3, [r3, #10]
 80168de:	2b0e      	cmp	r3, #14
 80168e0:	d96e      	bls.n	80169c0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	7bdb      	ldrb	r3, [r3, #15]
 80168e6:	2b00      	cmp	r3, #0
 80168e8:	d106      	bne.n	80168f8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80168ea:	683b      	ldr	r3, [r7, #0]
 80168ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80168f0:	3301      	adds	r3, #1
 80168f2:	b2da      	uxtb	r2, r3
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	685b      	ldr	r3, [r3, #4]
 80168fc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80168fe:	693b      	ldr	r3, [r7, #16]
 8016900:	7b1a      	ldrb	r2, [r3, #12]
 8016902:	7b5b      	ldrb	r3, [r3, #13]
 8016904:	021b      	lsls	r3, r3, #8
 8016906:	4313      	orrs	r3, r2
 8016908:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801690a:	693b      	ldr	r3, [r7, #16]
 801690c:	781b      	ldrb	r3, [r3, #0]
 801690e:	f003 0301 	and.w	r3, r3, #1
 8016912:	2b00      	cmp	r3, #0
 8016914:	d023      	beq.n	801695e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016916:	693b      	ldr	r3, [r7, #16]
 8016918:	781b      	ldrb	r3, [r3, #0]
 801691a:	2b01      	cmp	r3, #1
 801691c:	d10f      	bne.n	801693e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801691e:	693b      	ldr	r3, [r7, #16]
 8016920:	785b      	ldrb	r3, [r3, #1]
 8016922:	2b00      	cmp	r3, #0
 8016924:	d11b      	bne.n	801695e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016926:	693b      	ldr	r3, [r7, #16]
 8016928:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801692a:	2b5e      	cmp	r3, #94	; 0x5e
 801692c:	d117      	bne.n	801695e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	7b5b      	ldrb	r3, [r3, #13]
 8016932:	f043 0310 	orr.w	r3, r3, #16
 8016936:	b2da      	uxtb	r2, r3
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	735a      	strb	r2, [r3, #13]
 801693c:	e00f      	b.n	801695e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801693e:	693b      	ldr	r3, [r7, #16]
 8016940:	2206      	movs	r2, #6
 8016942:	4928      	ldr	r1, [pc, #160]	; (80169e4 <ethernet_input+0x118>)
 8016944:	4618      	mov	r0, r3
 8016946:	f000 fb96 	bl	8017076 <memcmp>
 801694a:	4603      	mov	r3, r0
 801694c:	2b00      	cmp	r3, #0
 801694e:	d106      	bne.n	801695e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	7b5b      	ldrb	r3, [r3, #13]
 8016954:	f043 0308 	orr.w	r3, r3, #8
 8016958:	b2da      	uxtb	r2, r3
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801695e:	89fb      	ldrh	r3, [r7, #14]
 8016960:	2b08      	cmp	r3, #8
 8016962:	d003      	beq.n	801696c <ethernet_input+0xa0>
 8016964:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8016968:	d014      	beq.n	8016994 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801696a:	e032      	b.n	80169d2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801696c:	683b      	ldr	r3, [r7, #0]
 801696e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016972:	f003 0308 	and.w	r3, r3, #8
 8016976:	2b00      	cmp	r3, #0
 8016978:	d024      	beq.n	80169c4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801697a:	8afb      	ldrh	r3, [r7, #22]
 801697c:	4619      	mov	r1, r3
 801697e:	6878      	ldr	r0, [r7, #4]
 8016980:	f7f4 fd12 	bl	800b3a8 <pbuf_remove_header>
 8016984:	4603      	mov	r3, r0
 8016986:	2b00      	cmp	r3, #0
 8016988:	d11e      	bne.n	80169c8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801698a:	6839      	ldr	r1, [r7, #0]
 801698c:	6878      	ldr	r0, [r7, #4]
 801698e:	f7fe ff09 	bl	80157a4 <ip4_input>
      break;
 8016992:	e013      	b.n	80169bc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016994:	683b      	ldr	r3, [r7, #0]
 8016996:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801699a:	f003 0308 	and.w	r3, r3, #8
 801699e:	2b00      	cmp	r3, #0
 80169a0:	d014      	beq.n	80169cc <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80169a2:	8afb      	ldrh	r3, [r7, #22]
 80169a4:	4619      	mov	r1, r3
 80169a6:	6878      	ldr	r0, [r7, #4]
 80169a8:	f7f4 fcfe 	bl	800b3a8 <pbuf_remove_header>
 80169ac:	4603      	mov	r3, r0
 80169ae:	2b00      	cmp	r3, #0
 80169b0:	d10e      	bne.n	80169d0 <ethernet_input+0x104>
        etharp_input(p, netif);
 80169b2:	6839      	ldr	r1, [r7, #0]
 80169b4:	6878      	ldr	r0, [r7, #4]
 80169b6:	f7fe f8a5 	bl	8014b04 <etharp_input>
      break;
 80169ba:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80169bc:	2300      	movs	r3, #0
 80169be:	e00c      	b.n	80169da <ethernet_input+0x10e>
    goto free_and_return;
 80169c0:	bf00      	nop
 80169c2:	e006      	b.n	80169d2 <ethernet_input+0x106>
        goto free_and_return;
 80169c4:	bf00      	nop
 80169c6:	e004      	b.n	80169d2 <ethernet_input+0x106>
        goto free_and_return;
 80169c8:	bf00      	nop
 80169ca:	e002      	b.n	80169d2 <ethernet_input+0x106>
        goto free_and_return;
 80169cc:	bf00      	nop
 80169ce:	e000      	b.n	80169d2 <ethernet_input+0x106>
        goto free_and_return;
 80169d0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80169d2:	6878      	ldr	r0, [r7, #4]
 80169d4:	f7f4 fd6e 	bl	800b4b4 <pbuf_free>
  return ERR_OK;
 80169d8:	2300      	movs	r3, #0
}
 80169da:	4618      	mov	r0, r3
 80169dc:	3718      	adds	r7, #24
 80169de:	46bd      	mov	sp, r7
 80169e0:	bd80      	pop	{r7, pc}
 80169e2:	bf00      	nop
 80169e4:	0801c02c 	.word	0x0801c02c

080169e8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80169e8:	b580      	push	{r7, lr}
 80169ea:	b086      	sub	sp, #24
 80169ec:	af00      	add	r7, sp, #0
 80169ee:	60f8      	str	r0, [r7, #12]
 80169f0:	60b9      	str	r1, [r7, #8]
 80169f2:	607a      	str	r2, [r7, #4]
 80169f4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80169f6:	8c3b      	ldrh	r3, [r7, #32]
 80169f8:	4618      	mov	r0, r3
 80169fa:	f7f3 f9a3 	bl	8009d44 <lwip_htons>
 80169fe:	4603      	mov	r3, r0
 8016a00:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8016a02:	210e      	movs	r1, #14
 8016a04:	68b8      	ldr	r0, [r7, #8]
 8016a06:	f7f4 fcbf 	bl	800b388 <pbuf_add_header>
 8016a0a:	4603      	mov	r3, r0
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d125      	bne.n	8016a5c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016a10:	68bb      	ldr	r3, [r7, #8]
 8016a12:	685b      	ldr	r3, [r3, #4]
 8016a14:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016a16:	693b      	ldr	r3, [r7, #16]
 8016a18:	8afa      	ldrh	r2, [r7, #22]
 8016a1a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016a1c:	693b      	ldr	r3, [r7, #16]
 8016a1e:	2206      	movs	r2, #6
 8016a20:	6839      	ldr	r1, [r7, #0]
 8016a22:	4618      	mov	r0, r3
 8016a24:	f000 fb35 	bl	8017092 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016a28:	693b      	ldr	r3, [r7, #16]
 8016a2a:	3306      	adds	r3, #6
 8016a2c:	2206      	movs	r2, #6
 8016a2e:	6879      	ldr	r1, [r7, #4]
 8016a30:	4618      	mov	r0, r3
 8016a32:	f000 fb2e 	bl	8017092 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8016a36:	68fb      	ldr	r3, [r7, #12]
 8016a38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016a3c:	2b06      	cmp	r3, #6
 8016a3e:	d006      	beq.n	8016a4e <ethernet_output+0x66>
 8016a40:	4b0a      	ldr	r3, [pc, #40]	; (8016a6c <ethernet_output+0x84>)
 8016a42:	f44f 7299 	mov.w	r2, #306	; 0x132
 8016a46:	490a      	ldr	r1, [pc, #40]	; (8016a70 <ethernet_output+0x88>)
 8016a48:	480a      	ldr	r0, [pc, #40]	; (8016a74 <ethernet_output+0x8c>)
 8016a4a:	f000 fbad 	bl	80171a8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016a4e:	68fb      	ldr	r3, [r7, #12]
 8016a50:	699b      	ldr	r3, [r3, #24]
 8016a52:	68b9      	ldr	r1, [r7, #8]
 8016a54:	68f8      	ldr	r0, [r7, #12]
 8016a56:	4798      	blx	r3
 8016a58:	4603      	mov	r3, r0
 8016a5a:	e002      	b.n	8016a62 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016a5c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016a5e:	f06f 0301 	mvn.w	r3, #1
}
 8016a62:	4618      	mov	r0, r3
 8016a64:	3718      	adds	r7, #24
 8016a66:	46bd      	mov	sp, r7
 8016a68:	bd80      	pop	{r7, pc}
 8016a6a:	bf00      	nop
 8016a6c:	0801be54 	.word	0x0801be54
 8016a70:	0801be8c 	.word	0x0801be8c
 8016a74:	0801bec0 	.word	0x0801bec0

08016a78 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8016a78:	b580      	push	{r7, lr}
 8016a7a:	b086      	sub	sp, #24
 8016a7c:	af00      	add	r7, sp, #0
 8016a7e:	6078      	str	r0, [r7, #4]
 8016a80:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8016a82:	683b      	ldr	r3, [r7, #0]
 8016a84:	60bb      	str	r3, [r7, #8]
 8016a86:	2304      	movs	r3, #4
 8016a88:	60fb      	str	r3, [r7, #12]
 8016a8a:	2300      	movs	r3, #0
 8016a8c:	613b      	str	r3, [r7, #16]
 8016a8e:	2300      	movs	r3, #0
 8016a90:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8016a92:	f107 0308 	add.w	r3, r7, #8
 8016a96:	2100      	movs	r1, #0
 8016a98:	4618      	mov	r0, r3
 8016a9a:	f7ee f852 	bl	8004b42 <osMessageCreate>
 8016a9e:	4602      	mov	r2, r0
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	681b      	ldr	r3, [r3, #0]
 8016aa8:	2b00      	cmp	r3, #0
 8016aaa:	d102      	bne.n	8016ab2 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8016aac:	f04f 33ff 	mov.w	r3, #4294967295
 8016ab0:	e000      	b.n	8016ab4 <sys_mbox_new+0x3c>

  return ERR_OK;
 8016ab2:	2300      	movs	r3, #0
}
 8016ab4:	4618      	mov	r0, r3
 8016ab6:	3718      	adds	r7, #24
 8016ab8:	46bd      	mov	sp, r7
 8016aba:	bd80      	pop	{r7, pc}

08016abc <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8016abc:	b580      	push	{r7, lr}
 8016abe:	b082      	sub	sp, #8
 8016ac0:	af00      	add	r7, sp, #0
 8016ac2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	681b      	ldr	r3, [r3, #0]
 8016ac8:	4618      	mov	r0, r3
 8016aca:	f7ee f917 	bl	8004cfc <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	681b      	ldr	r3, [r3, #0]
 8016ad2:	4618      	mov	r0, r3
 8016ad4:	f7ee f928 	bl	8004d28 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8016ad8:	bf00      	nop
 8016ada:	3708      	adds	r7, #8
 8016adc:	46bd      	mov	sp, r7
 8016ade:	bd80      	pop	{r7, pc}

08016ae0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8016ae0:	b580      	push	{r7, lr}
 8016ae2:	b084      	sub	sp, #16
 8016ae4:	af00      	add	r7, sp, #0
 8016ae6:	6078      	str	r0, [r7, #4]
 8016ae8:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8016aea:	687b      	ldr	r3, [r7, #4]
 8016aec:	681b      	ldr	r3, [r3, #0]
 8016aee:	6839      	ldr	r1, [r7, #0]
 8016af0:	2200      	movs	r2, #0
 8016af2:	4618      	mov	r0, r3
 8016af4:	f7ee f84e 	bl	8004b94 <osMessagePut>
 8016af8:	4603      	mov	r3, r0
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	d102      	bne.n	8016b04 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8016afe:	2300      	movs	r3, #0
 8016b00:	73fb      	strb	r3, [r7, #15]
 8016b02:	e001      	b.n	8016b08 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8016b04:	23ff      	movs	r3, #255	; 0xff
 8016b06:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8016b08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016b0c:	4618      	mov	r0, r3
 8016b0e:	3710      	adds	r7, #16
 8016b10:	46bd      	mov	sp, r7
 8016b12:	bd80      	pop	{r7, pc}

08016b14 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8016b14:	b580      	push	{r7, lr}
 8016b16:	b08c      	sub	sp, #48	; 0x30
 8016b18:	af00      	add	r7, sp, #0
 8016b1a:	61f8      	str	r0, [r7, #28]
 8016b1c:	61b9      	str	r1, [r7, #24]
 8016b1e:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8016b20:	f7ed fe39 	bl	8004796 <osKernelSysTick>
 8016b24:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8016b26:	697b      	ldr	r3, [r7, #20]
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	d017      	beq.n	8016b5c <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8016b2c:	69fb      	ldr	r3, [r7, #28]
 8016b2e:	6819      	ldr	r1, [r3, #0]
 8016b30:	f107 0320 	add.w	r3, r7, #32
 8016b34:	697a      	ldr	r2, [r7, #20]
 8016b36:	4618      	mov	r0, r3
 8016b38:	f7ee f86c 	bl	8004c14 <osMessageGet>

    if(event.status == osEventMessage)
 8016b3c:	6a3b      	ldr	r3, [r7, #32]
 8016b3e:	2b10      	cmp	r3, #16
 8016b40:	d109      	bne.n	8016b56 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8016b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b44:	461a      	mov	r2, r3
 8016b46:	69bb      	ldr	r3, [r7, #24]
 8016b48:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8016b4a:	f7ed fe24 	bl	8004796 <osKernelSysTick>
 8016b4e:	4602      	mov	r2, r0
 8016b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b52:	1ad3      	subs	r3, r2, r3
 8016b54:	e019      	b.n	8016b8a <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016b56:	f04f 33ff 	mov.w	r3, #4294967295
 8016b5a:	e016      	b.n	8016b8a <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8016b5c:	69fb      	ldr	r3, [r7, #28]
 8016b5e:	6819      	ldr	r1, [r3, #0]
 8016b60:	463b      	mov	r3, r7
 8016b62:	f04f 32ff 	mov.w	r2, #4294967295
 8016b66:	4618      	mov	r0, r3
 8016b68:	f7ee f854 	bl	8004c14 <osMessageGet>
 8016b6c:	f107 0320 	add.w	r3, r7, #32
 8016b70:	463a      	mov	r2, r7
 8016b72:	ca07      	ldmia	r2, {r0, r1, r2}
 8016b74:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8016b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b7a:	461a      	mov	r2, r3
 8016b7c:	69bb      	ldr	r3, [r7, #24]
 8016b7e:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8016b80:	f7ed fe09 	bl	8004796 <osKernelSysTick>
 8016b84:	4602      	mov	r2, r0
 8016b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b88:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8016b8a:	4618      	mov	r0, r3
 8016b8c:	3730      	adds	r7, #48	; 0x30
 8016b8e:	46bd      	mov	sp, r7
 8016b90:	bd80      	pop	{r7, pc}

08016b92 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8016b92:	b580      	push	{r7, lr}
 8016b94:	b086      	sub	sp, #24
 8016b96:	af00      	add	r7, sp, #0
 8016b98:	6078      	str	r0, [r7, #4]
 8016b9a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	6819      	ldr	r1, [r3, #0]
 8016ba0:	f107 030c 	add.w	r3, r7, #12
 8016ba4:	2200      	movs	r2, #0
 8016ba6:	4618      	mov	r0, r3
 8016ba8:	f7ee f834 	bl	8004c14 <osMessageGet>

  if(event.status == osEventMessage)
 8016bac:	68fb      	ldr	r3, [r7, #12]
 8016bae:	2b10      	cmp	r3, #16
 8016bb0:	d105      	bne.n	8016bbe <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8016bb2:	693b      	ldr	r3, [r7, #16]
 8016bb4:	461a      	mov	r2, r3
 8016bb6:	683b      	ldr	r3, [r7, #0]
 8016bb8:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8016bba:	2300      	movs	r3, #0
 8016bbc:	e001      	b.n	8016bc2 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8016bbe:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8016bc2:	4618      	mov	r0, r3
 8016bc4:	3718      	adds	r7, #24
 8016bc6:	46bd      	mov	sp, r7
 8016bc8:	bd80      	pop	{r7, pc}

08016bca <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8016bca:	b480      	push	{r7}
 8016bcc:	b083      	sub	sp, #12
 8016bce:	af00      	add	r7, sp, #0
 8016bd0:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8016bd2:	687b      	ldr	r3, [r7, #4]
 8016bd4:	681b      	ldr	r3, [r3, #0]
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	d101      	bne.n	8016bde <sys_mbox_valid+0x14>
    return 0;
 8016bda:	2300      	movs	r3, #0
 8016bdc:	e000      	b.n	8016be0 <sys_mbox_valid+0x16>
  else
    return 1;
 8016bde:	2301      	movs	r3, #1
}
 8016be0:	4618      	mov	r0, r3
 8016be2:	370c      	adds	r7, #12
 8016be4:	46bd      	mov	sp, r7
 8016be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bea:	4770      	bx	lr

08016bec <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8016bec:	b480      	push	{r7}
 8016bee:	b083      	sub	sp, #12
 8016bf0:	af00      	add	r7, sp, #0
 8016bf2:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	2200      	movs	r2, #0
 8016bf8:	601a      	str	r2, [r3, #0]
}
 8016bfa:	bf00      	nop
 8016bfc:	370c      	adds	r7, #12
 8016bfe:	46bd      	mov	sp, r7
 8016c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c04:	4770      	bx	lr

08016c06 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8016c06:	b580      	push	{r7, lr}
 8016c08:	b084      	sub	sp, #16
 8016c0a:	af00      	add	r7, sp, #0
 8016c0c:	6078      	str	r0, [r7, #4]
 8016c0e:	460b      	mov	r3, r1
 8016c10:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8016c12:	2300      	movs	r3, #0
 8016c14:	60bb      	str	r3, [r7, #8]
 8016c16:	2300      	movs	r3, #0
 8016c18:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8016c1a:	f107 0308 	add.w	r3, r7, #8
 8016c1e:	2101      	movs	r1, #1
 8016c20:	4618      	mov	r0, r3
 8016c22:	f7ed fec5 	bl	80049b0 <osSemaphoreCreate>
 8016c26:	4602      	mov	r2, r0
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	681b      	ldr	r3, [r3, #0]
 8016c30:	2b00      	cmp	r3, #0
 8016c32:	d102      	bne.n	8016c3a <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016c34:	f04f 33ff 	mov.w	r3, #4294967295
 8016c38:	e009      	b.n	8016c4e <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8016c3a:	78fb      	ldrb	r3, [r7, #3]
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d105      	bne.n	8016c4c <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	681b      	ldr	r3, [r3, #0]
 8016c44:	2100      	movs	r1, #0
 8016c46:	4618      	mov	r0, r3
 8016c48:	f7ed fee4 	bl	8004a14 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8016c4c:	2300      	movs	r3, #0
}
 8016c4e:	4618      	mov	r0, r3
 8016c50:	3710      	adds	r7, #16
 8016c52:	46bd      	mov	sp, r7
 8016c54:	bd80      	pop	{r7, pc}

08016c56 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8016c56:	b580      	push	{r7, lr}
 8016c58:	b084      	sub	sp, #16
 8016c5a:	af00      	add	r7, sp, #0
 8016c5c:	6078      	str	r0, [r7, #4]
 8016c5e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8016c60:	f7ed fd99 	bl	8004796 <osKernelSysTick>
 8016c64:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8016c66:	683b      	ldr	r3, [r7, #0]
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	d011      	beq.n	8016c90 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	681b      	ldr	r3, [r3, #0]
 8016c70:	6839      	ldr	r1, [r7, #0]
 8016c72:	4618      	mov	r0, r3
 8016c74:	f7ed fece 	bl	8004a14 <osSemaphoreWait>
 8016c78:	4603      	mov	r3, r0
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	d105      	bne.n	8016c8a <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8016c7e:	f7ed fd8a 	bl	8004796 <osKernelSysTick>
 8016c82:	4602      	mov	r2, r0
 8016c84:	68fb      	ldr	r3, [r7, #12]
 8016c86:	1ad3      	subs	r3, r2, r3
 8016c88:	e012      	b.n	8016cb0 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8016c8e:	e00f      	b.n	8016cb0 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8016c90:	bf00      	nop
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	681b      	ldr	r3, [r3, #0]
 8016c96:	f04f 31ff 	mov.w	r1, #4294967295
 8016c9a:	4618      	mov	r0, r3
 8016c9c:	f7ed feba 	bl	8004a14 <osSemaphoreWait>
 8016ca0:	4603      	mov	r3, r0
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	d1f5      	bne.n	8016c92 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8016ca6:	f7ed fd76 	bl	8004796 <osKernelSysTick>
 8016caa:	4602      	mov	r2, r0
 8016cac:	68fb      	ldr	r3, [r7, #12]
 8016cae:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8016cb0:	4618      	mov	r0, r3
 8016cb2:	3710      	adds	r7, #16
 8016cb4:	46bd      	mov	sp, r7
 8016cb6:	bd80      	pop	{r7, pc}

08016cb8 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8016cb8:	b580      	push	{r7, lr}
 8016cba:	b082      	sub	sp, #8
 8016cbc:	af00      	add	r7, sp, #0
 8016cbe:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	681b      	ldr	r3, [r3, #0]
 8016cc4:	4618      	mov	r0, r3
 8016cc6:	f7ed fef3 	bl	8004ab0 <osSemaphoreRelease>
}
 8016cca:	bf00      	nop
 8016ccc:	3708      	adds	r7, #8
 8016cce:	46bd      	mov	sp, r7
 8016cd0:	bd80      	pop	{r7, pc}

08016cd2 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8016cd2:	b580      	push	{r7, lr}
 8016cd4:	b082      	sub	sp, #8
 8016cd6:	af00      	add	r7, sp, #0
 8016cd8:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	681b      	ldr	r3, [r3, #0]
 8016cde:	4618      	mov	r0, r3
 8016ce0:	f7ed ff1c 	bl	8004b1c <osSemaphoreDelete>
}
 8016ce4:	bf00      	nop
 8016ce6:	3708      	adds	r7, #8
 8016ce8:	46bd      	mov	sp, r7
 8016cea:	bd80      	pop	{r7, pc}

08016cec <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8016cec:	b480      	push	{r7}
 8016cee:	b083      	sub	sp, #12
 8016cf0:	af00      	add	r7, sp, #0
 8016cf2:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	681b      	ldr	r3, [r3, #0]
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	d101      	bne.n	8016d00 <sys_sem_valid+0x14>
    return 0;
 8016cfc:	2300      	movs	r3, #0
 8016cfe:	e000      	b.n	8016d02 <sys_sem_valid+0x16>
  else
    return 1;
 8016d00:	2301      	movs	r3, #1
}
 8016d02:	4618      	mov	r0, r3
 8016d04:	370c      	adds	r7, #12
 8016d06:	46bd      	mov	sp, r7
 8016d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d0c:	4770      	bx	lr

08016d0e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8016d0e:	b480      	push	{r7}
 8016d10:	b083      	sub	sp, #12
 8016d12:	af00      	add	r7, sp, #0
 8016d14:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	2200      	movs	r2, #0
 8016d1a:	601a      	str	r2, [r3, #0]
}
 8016d1c:	bf00      	nop
 8016d1e:	370c      	adds	r7, #12
 8016d20:	46bd      	mov	sp, r7
 8016d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d26:	4770      	bx	lr

08016d28 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8016d28:	b580      	push	{r7, lr}
 8016d2a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8016d2c:	4803      	ldr	r0, [pc, #12]	; (8016d3c <sys_init+0x14>)
 8016d2e:	f7ed fda2 	bl	8004876 <osMutexCreate>
 8016d32:	4603      	mov	r3, r0
 8016d34:	4a02      	ldr	r2, [pc, #8]	; (8016d40 <sys_init+0x18>)
 8016d36:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8016d38:	bf00      	nop
 8016d3a:	bd80      	pop	{r7, pc}
 8016d3c:	0801c03c 	.word	0x0801c03c
 8016d40:	2000f024 	.word	0x2000f024

08016d44 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8016d44:	b580      	push	{r7, lr}
 8016d46:	b084      	sub	sp, #16
 8016d48:	af00      	add	r7, sp, #0
 8016d4a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8016d4c:	2300      	movs	r3, #0
 8016d4e:	60bb      	str	r3, [r7, #8]
 8016d50:	2300      	movs	r3, #0
 8016d52:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8016d54:	f107 0308 	add.w	r3, r7, #8
 8016d58:	4618      	mov	r0, r3
 8016d5a:	f7ed fd8c 	bl	8004876 <osMutexCreate>
 8016d5e:	4602      	mov	r2, r0
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	681b      	ldr	r3, [r3, #0]
 8016d68:	2b00      	cmp	r3, #0
 8016d6a:	d102      	bne.n	8016d72 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8016d70:	e000      	b.n	8016d74 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8016d72:	2300      	movs	r3, #0
}
 8016d74:	4618      	mov	r0, r3
 8016d76:	3710      	adds	r7, #16
 8016d78:	46bd      	mov	sp, r7
 8016d7a:	bd80      	pop	{r7, pc}

08016d7c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8016d7c:	b580      	push	{r7, lr}
 8016d7e:	b082      	sub	sp, #8
 8016d80:	af00      	add	r7, sp, #0
 8016d82:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	681b      	ldr	r3, [r3, #0]
 8016d88:	f04f 31ff 	mov.w	r1, #4294967295
 8016d8c:	4618      	mov	r0, r3
 8016d8e:	f7ed fd8b 	bl	80048a8 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8016d92:	bf00      	nop
 8016d94:	3708      	adds	r7, #8
 8016d96:	46bd      	mov	sp, r7
 8016d98:	bd80      	pop	{r7, pc}

08016d9a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8016d9a:	b580      	push	{r7, lr}
 8016d9c:	b082      	sub	sp, #8
 8016d9e:	af00      	add	r7, sp, #0
 8016da0:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	681b      	ldr	r3, [r3, #0]
 8016da6:	4618      	mov	r0, r3
 8016da8:	f7ed fdcc 	bl	8004944 <osMutexRelease>
}
 8016dac:	bf00      	nop
 8016dae:	3708      	adds	r7, #8
 8016db0:	46bd      	mov	sp, r7
 8016db2:	bd80      	pop	{r7, pc}

08016db4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8016db4:	b580      	push	{r7, lr}
 8016db6:	b08c      	sub	sp, #48	; 0x30
 8016db8:	af00      	add	r7, sp, #0
 8016dba:	60f8      	str	r0, [r7, #12]
 8016dbc:	60b9      	str	r1, [r7, #8]
 8016dbe:	607a      	str	r2, [r7, #4]
 8016dc0:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8016dc2:	f107 0314 	add.w	r3, r7, #20
 8016dc6:	2200      	movs	r2, #0
 8016dc8:	601a      	str	r2, [r3, #0]
 8016dca:	605a      	str	r2, [r3, #4]
 8016dcc:	609a      	str	r2, [r3, #8]
 8016dce:	60da      	str	r2, [r3, #12]
 8016dd0:	611a      	str	r2, [r3, #16]
 8016dd2:	615a      	str	r2, [r3, #20]
 8016dd4:	619a      	str	r2, [r3, #24]
 8016dd6:	68fb      	ldr	r3, [r7, #12]
 8016dd8:	617b      	str	r3, [r7, #20]
 8016dda:	68bb      	ldr	r3, [r7, #8]
 8016ddc:	61bb      	str	r3, [r7, #24]
 8016dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016de0:	b21b      	sxth	r3, r3
 8016de2:	83bb      	strh	r3, [r7, #28]
 8016de4:	683b      	ldr	r3, [r7, #0]
 8016de6:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8016de8:	f107 0314 	add.w	r3, r7, #20
 8016dec:	6879      	ldr	r1, [r7, #4]
 8016dee:	4618      	mov	r0, r3
 8016df0:	f7ed fce1 	bl	80047b6 <osThreadCreate>
 8016df4:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8016df6:	4618      	mov	r0, r3
 8016df8:	3730      	adds	r7, #48	; 0x30
 8016dfa:	46bd      	mov	sp, r7
 8016dfc:	bd80      	pop	{r7, pc}
	...

08016e00 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8016e00:	b580      	push	{r7, lr}
 8016e02:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8016e04:	4b04      	ldr	r3, [pc, #16]	; (8016e18 <sys_arch_protect+0x18>)
 8016e06:	681b      	ldr	r3, [r3, #0]
 8016e08:	f04f 31ff 	mov.w	r1, #4294967295
 8016e0c:	4618      	mov	r0, r3
 8016e0e:	f7ed fd4b 	bl	80048a8 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8016e12:	2301      	movs	r3, #1
}
 8016e14:	4618      	mov	r0, r3
 8016e16:	bd80      	pop	{r7, pc}
 8016e18:	2000f024 	.word	0x2000f024

08016e1c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8016e1c:	b580      	push	{r7, lr}
 8016e1e:	b082      	sub	sp, #8
 8016e20:	af00      	add	r7, sp, #0
 8016e22:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8016e24:	4b04      	ldr	r3, [pc, #16]	; (8016e38 <sys_arch_unprotect+0x1c>)
 8016e26:	681b      	ldr	r3, [r3, #0]
 8016e28:	4618      	mov	r0, r3
 8016e2a:	f7ed fd8b 	bl	8004944 <osMutexRelease>
}
 8016e2e:	bf00      	nop
 8016e30:	3708      	adds	r7, #8
 8016e32:	46bd      	mov	sp, r7
 8016e34:	bd80      	pop	{r7, pc}
 8016e36:	bf00      	nop
 8016e38:	2000f024 	.word	0x2000f024

08016e3c <std>:
 8016e3c:	2300      	movs	r3, #0
 8016e3e:	b510      	push	{r4, lr}
 8016e40:	4604      	mov	r4, r0
 8016e42:	e9c0 3300 	strd	r3, r3, [r0]
 8016e46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016e4a:	6083      	str	r3, [r0, #8]
 8016e4c:	8181      	strh	r1, [r0, #12]
 8016e4e:	6643      	str	r3, [r0, #100]	; 0x64
 8016e50:	81c2      	strh	r2, [r0, #14]
 8016e52:	6183      	str	r3, [r0, #24]
 8016e54:	4619      	mov	r1, r3
 8016e56:	2208      	movs	r2, #8
 8016e58:	305c      	adds	r0, #92	; 0x5c
 8016e5a:	f000 f942 	bl	80170e2 <memset>
 8016e5e:	4b05      	ldr	r3, [pc, #20]	; (8016e74 <std+0x38>)
 8016e60:	6263      	str	r3, [r4, #36]	; 0x24
 8016e62:	4b05      	ldr	r3, [pc, #20]	; (8016e78 <std+0x3c>)
 8016e64:	62a3      	str	r3, [r4, #40]	; 0x28
 8016e66:	4b05      	ldr	r3, [pc, #20]	; (8016e7c <std+0x40>)
 8016e68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016e6a:	4b05      	ldr	r3, [pc, #20]	; (8016e80 <std+0x44>)
 8016e6c:	6224      	str	r4, [r4, #32]
 8016e6e:	6323      	str	r3, [r4, #48]	; 0x30
 8016e70:	bd10      	pop	{r4, pc}
 8016e72:	bf00      	nop
 8016e74:	08017479 	.word	0x08017479
 8016e78:	0801749b 	.word	0x0801749b
 8016e7c:	080174d3 	.word	0x080174d3
 8016e80:	080174f7 	.word	0x080174f7

08016e84 <_cleanup_r>:
 8016e84:	4901      	ldr	r1, [pc, #4]	; (8016e8c <_cleanup_r+0x8>)
 8016e86:	f000 b8af 	b.w	8016fe8 <_fwalk_reent>
 8016e8a:	bf00      	nop
 8016e8c:	0801789d 	.word	0x0801789d

08016e90 <__sfmoreglue>:
 8016e90:	b570      	push	{r4, r5, r6, lr}
 8016e92:	1e4a      	subs	r2, r1, #1
 8016e94:	2568      	movs	r5, #104	; 0x68
 8016e96:	4355      	muls	r5, r2
 8016e98:	460e      	mov	r6, r1
 8016e9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016e9e:	f000 f929 	bl	80170f4 <_malloc_r>
 8016ea2:	4604      	mov	r4, r0
 8016ea4:	b140      	cbz	r0, 8016eb8 <__sfmoreglue+0x28>
 8016ea6:	2100      	movs	r1, #0
 8016ea8:	e9c0 1600 	strd	r1, r6, [r0]
 8016eac:	300c      	adds	r0, #12
 8016eae:	60a0      	str	r0, [r4, #8]
 8016eb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016eb4:	f000 f915 	bl	80170e2 <memset>
 8016eb8:	4620      	mov	r0, r4
 8016eba:	bd70      	pop	{r4, r5, r6, pc}

08016ebc <__sfp_lock_acquire>:
 8016ebc:	4801      	ldr	r0, [pc, #4]	; (8016ec4 <__sfp_lock_acquire+0x8>)
 8016ebe:	f000 b8d8 	b.w	8017072 <__retarget_lock_acquire_recursive>
 8016ec2:	bf00      	nop
 8016ec4:	2000f030 	.word	0x2000f030

08016ec8 <__sfp_lock_release>:
 8016ec8:	4801      	ldr	r0, [pc, #4]	; (8016ed0 <__sfp_lock_release+0x8>)
 8016eca:	f000 b8d3 	b.w	8017074 <__retarget_lock_release_recursive>
 8016ece:	bf00      	nop
 8016ed0:	2000f030 	.word	0x2000f030

08016ed4 <__sinit_lock_acquire>:
 8016ed4:	4801      	ldr	r0, [pc, #4]	; (8016edc <__sinit_lock_acquire+0x8>)
 8016ed6:	f000 b8cc 	b.w	8017072 <__retarget_lock_acquire_recursive>
 8016eda:	bf00      	nop
 8016edc:	2000f02b 	.word	0x2000f02b

08016ee0 <__sinit_lock_release>:
 8016ee0:	4801      	ldr	r0, [pc, #4]	; (8016ee8 <__sinit_lock_release+0x8>)
 8016ee2:	f000 b8c7 	b.w	8017074 <__retarget_lock_release_recursive>
 8016ee6:	bf00      	nop
 8016ee8:	2000f02b 	.word	0x2000f02b

08016eec <__sinit>:
 8016eec:	b510      	push	{r4, lr}
 8016eee:	4604      	mov	r4, r0
 8016ef0:	f7ff fff0 	bl	8016ed4 <__sinit_lock_acquire>
 8016ef4:	69a3      	ldr	r3, [r4, #24]
 8016ef6:	b11b      	cbz	r3, 8016f00 <__sinit+0x14>
 8016ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016efc:	f7ff bff0 	b.w	8016ee0 <__sinit_lock_release>
 8016f00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016f04:	6523      	str	r3, [r4, #80]	; 0x50
 8016f06:	4b13      	ldr	r3, [pc, #76]	; (8016f54 <__sinit+0x68>)
 8016f08:	4a13      	ldr	r2, [pc, #76]	; (8016f58 <__sinit+0x6c>)
 8016f0a:	681b      	ldr	r3, [r3, #0]
 8016f0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8016f0e:	42a3      	cmp	r3, r4
 8016f10:	bf04      	itt	eq
 8016f12:	2301      	moveq	r3, #1
 8016f14:	61a3      	streq	r3, [r4, #24]
 8016f16:	4620      	mov	r0, r4
 8016f18:	f000 f820 	bl	8016f5c <__sfp>
 8016f1c:	6060      	str	r0, [r4, #4]
 8016f1e:	4620      	mov	r0, r4
 8016f20:	f000 f81c 	bl	8016f5c <__sfp>
 8016f24:	60a0      	str	r0, [r4, #8]
 8016f26:	4620      	mov	r0, r4
 8016f28:	f000 f818 	bl	8016f5c <__sfp>
 8016f2c:	2200      	movs	r2, #0
 8016f2e:	60e0      	str	r0, [r4, #12]
 8016f30:	2104      	movs	r1, #4
 8016f32:	6860      	ldr	r0, [r4, #4]
 8016f34:	f7ff ff82 	bl	8016e3c <std>
 8016f38:	68a0      	ldr	r0, [r4, #8]
 8016f3a:	2201      	movs	r2, #1
 8016f3c:	2109      	movs	r1, #9
 8016f3e:	f7ff ff7d 	bl	8016e3c <std>
 8016f42:	68e0      	ldr	r0, [r4, #12]
 8016f44:	2202      	movs	r2, #2
 8016f46:	2112      	movs	r1, #18
 8016f48:	f7ff ff78 	bl	8016e3c <std>
 8016f4c:	2301      	movs	r3, #1
 8016f4e:	61a3      	str	r3, [r4, #24]
 8016f50:	e7d2      	b.n	8016ef8 <__sinit+0xc>
 8016f52:	bf00      	nop
 8016f54:	0801c1a8 	.word	0x0801c1a8
 8016f58:	08016e85 	.word	0x08016e85

08016f5c <__sfp>:
 8016f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f5e:	4607      	mov	r7, r0
 8016f60:	f7ff ffac 	bl	8016ebc <__sfp_lock_acquire>
 8016f64:	4b1e      	ldr	r3, [pc, #120]	; (8016fe0 <__sfp+0x84>)
 8016f66:	681e      	ldr	r6, [r3, #0]
 8016f68:	69b3      	ldr	r3, [r6, #24]
 8016f6a:	b913      	cbnz	r3, 8016f72 <__sfp+0x16>
 8016f6c:	4630      	mov	r0, r6
 8016f6e:	f7ff ffbd 	bl	8016eec <__sinit>
 8016f72:	3648      	adds	r6, #72	; 0x48
 8016f74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016f78:	3b01      	subs	r3, #1
 8016f7a:	d503      	bpl.n	8016f84 <__sfp+0x28>
 8016f7c:	6833      	ldr	r3, [r6, #0]
 8016f7e:	b30b      	cbz	r3, 8016fc4 <__sfp+0x68>
 8016f80:	6836      	ldr	r6, [r6, #0]
 8016f82:	e7f7      	b.n	8016f74 <__sfp+0x18>
 8016f84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016f88:	b9d5      	cbnz	r5, 8016fc0 <__sfp+0x64>
 8016f8a:	4b16      	ldr	r3, [pc, #88]	; (8016fe4 <__sfp+0x88>)
 8016f8c:	60e3      	str	r3, [r4, #12]
 8016f8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016f92:	6665      	str	r5, [r4, #100]	; 0x64
 8016f94:	f000 f86c 	bl	8017070 <__retarget_lock_init_recursive>
 8016f98:	f7ff ff96 	bl	8016ec8 <__sfp_lock_release>
 8016f9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016fa0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016fa4:	6025      	str	r5, [r4, #0]
 8016fa6:	61a5      	str	r5, [r4, #24]
 8016fa8:	2208      	movs	r2, #8
 8016faa:	4629      	mov	r1, r5
 8016fac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016fb0:	f000 f897 	bl	80170e2 <memset>
 8016fb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016fb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016fbc:	4620      	mov	r0, r4
 8016fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016fc0:	3468      	adds	r4, #104	; 0x68
 8016fc2:	e7d9      	b.n	8016f78 <__sfp+0x1c>
 8016fc4:	2104      	movs	r1, #4
 8016fc6:	4638      	mov	r0, r7
 8016fc8:	f7ff ff62 	bl	8016e90 <__sfmoreglue>
 8016fcc:	4604      	mov	r4, r0
 8016fce:	6030      	str	r0, [r6, #0]
 8016fd0:	2800      	cmp	r0, #0
 8016fd2:	d1d5      	bne.n	8016f80 <__sfp+0x24>
 8016fd4:	f7ff ff78 	bl	8016ec8 <__sfp_lock_release>
 8016fd8:	230c      	movs	r3, #12
 8016fda:	603b      	str	r3, [r7, #0]
 8016fdc:	e7ee      	b.n	8016fbc <__sfp+0x60>
 8016fde:	bf00      	nop
 8016fe0:	0801c1a8 	.word	0x0801c1a8
 8016fe4:	ffff0001 	.word	0xffff0001

08016fe8 <_fwalk_reent>:
 8016fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016fec:	4606      	mov	r6, r0
 8016fee:	4688      	mov	r8, r1
 8016ff0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016ff4:	2700      	movs	r7, #0
 8016ff6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016ffa:	f1b9 0901 	subs.w	r9, r9, #1
 8016ffe:	d505      	bpl.n	801700c <_fwalk_reent+0x24>
 8017000:	6824      	ldr	r4, [r4, #0]
 8017002:	2c00      	cmp	r4, #0
 8017004:	d1f7      	bne.n	8016ff6 <_fwalk_reent+0xe>
 8017006:	4638      	mov	r0, r7
 8017008:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801700c:	89ab      	ldrh	r3, [r5, #12]
 801700e:	2b01      	cmp	r3, #1
 8017010:	d907      	bls.n	8017022 <_fwalk_reent+0x3a>
 8017012:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017016:	3301      	adds	r3, #1
 8017018:	d003      	beq.n	8017022 <_fwalk_reent+0x3a>
 801701a:	4629      	mov	r1, r5
 801701c:	4630      	mov	r0, r6
 801701e:	47c0      	blx	r8
 8017020:	4307      	orrs	r7, r0
 8017022:	3568      	adds	r5, #104	; 0x68
 8017024:	e7e9      	b.n	8016ffa <_fwalk_reent+0x12>
	...

08017028 <__libc_init_array>:
 8017028:	b570      	push	{r4, r5, r6, lr}
 801702a:	4d0d      	ldr	r5, [pc, #52]	; (8017060 <__libc_init_array+0x38>)
 801702c:	4c0d      	ldr	r4, [pc, #52]	; (8017064 <__libc_init_array+0x3c>)
 801702e:	1b64      	subs	r4, r4, r5
 8017030:	10a4      	asrs	r4, r4, #2
 8017032:	2600      	movs	r6, #0
 8017034:	42a6      	cmp	r6, r4
 8017036:	d109      	bne.n	801704c <__libc_init_array+0x24>
 8017038:	4d0b      	ldr	r5, [pc, #44]	; (8017068 <__libc_init_array+0x40>)
 801703a:	4c0c      	ldr	r4, [pc, #48]	; (801706c <__libc_init_array+0x44>)
 801703c:	f001 fa4e 	bl	80184dc <_init>
 8017040:	1b64      	subs	r4, r4, r5
 8017042:	10a4      	asrs	r4, r4, #2
 8017044:	2600      	movs	r6, #0
 8017046:	42a6      	cmp	r6, r4
 8017048:	d105      	bne.n	8017056 <__libc_init_array+0x2e>
 801704a:	bd70      	pop	{r4, r5, r6, pc}
 801704c:	f855 3b04 	ldr.w	r3, [r5], #4
 8017050:	4798      	blx	r3
 8017052:	3601      	adds	r6, #1
 8017054:	e7ee      	b.n	8017034 <__libc_init_array+0xc>
 8017056:	f855 3b04 	ldr.w	r3, [r5], #4
 801705a:	4798      	blx	r3
 801705c:	3601      	adds	r6, #1
 801705e:	e7f2      	b.n	8017046 <__libc_init_array+0x1e>
 8017060:	0801c29c 	.word	0x0801c29c
 8017064:	0801c29c 	.word	0x0801c29c
 8017068:	0801c29c 	.word	0x0801c29c
 801706c:	0801c2a0 	.word	0x0801c2a0

08017070 <__retarget_lock_init_recursive>:
 8017070:	4770      	bx	lr

08017072 <__retarget_lock_acquire_recursive>:
 8017072:	4770      	bx	lr

08017074 <__retarget_lock_release_recursive>:
 8017074:	4770      	bx	lr

08017076 <memcmp>:
 8017076:	b530      	push	{r4, r5, lr}
 8017078:	3901      	subs	r1, #1
 801707a:	2400      	movs	r4, #0
 801707c:	42a2      	cmp	r2, r4
 801707e:	d101      	bne.n	8017084 <memcmp+0xe>
 8017080:	2000      	movs	r0, #0
 8017082:	e005      	b.n	8017090 <memcmp+0x1a>
 8017084:	5d03      	ldrb	r3, [r0, r4]
 8017086:	3401      	adds	r4, #1
 8017088:	5d0d      	ldrb	r5, [r1, r4]
 801708a:	42ab      	cmp	r3, r5
 801708c:	d0f6      	beq.n	801707c <memcmp+0x6>
 801708e:	1b58      	subs	r0, r3, r5
 8017090:	bd30      	pop	{r4, r5, pc}

08017092 <memcpy>:
 8017092:	440a      	add	r2, r1
 8017094:	4291      	cmp	r1, r2
 8017096:	f100 33ff 	add.w	r3, r0, #4294967295
 801709a:	d100      	bne.n	801709e <memcpy+0xc>
 801709c:	4770      	bx	lr
 801709e:	b510      	push	{r4, lr}
 80170a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80170a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80170a8:	4291      	cmp	r1, r2
 80170aa:	d1f9      	bne.n	80170a0 <memcpy+0xe>
 80170ac:	bd10      	pop	{r4, pc}

080170ae <memmove>:
 80170ae:	4288      	cmp	r0, r1
 80170b0:	b510      	push	{r4, lr}
 80170b2:	eb01 0402 	add.w	r4, r1, r2
 80170b6:	d902      	bls.n	80170be <memmove+0x10>
 80170b8:	4284      	cmp	r4, r0
 80170ba:	4623      	mov	r3, r4
 80170bc:	d807      	bhi.n	80170ce <memmove+0x20>
 80170be:	1e43      	subs	r3, r0, #1
 80170c0:	42a1      	cmp	r1, r4
 80170c2:	d008      	beq.n	80170d6 <memmove+0x28>
 80170c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80170c8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80170cc:	e7f8      	b.n	80170c0 <memmove+0x12>
 80170ce:	4402      	add	r2, r0
 80170d0:	4601      	mov	r1, r0
 80170d2:	428a      	cmp	r2, r1
 80170d4:	d100      	bne.n	80170d8 <memmove+0x2a>
 80170d6:	bd10      	pop	{r4, pc}
 80170d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80170dc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80170e0:	e7f7      	b.n	80170d2 <memmove+0x24>

080170e2 <memset>:
 80170e2:	4402      	add	r2, r0
 80170e4:	4603      	mov	r3, r0
 80170e6:	4293      	cmp	r3, r2
 80170e8:	d100      	bne.n	80170ec <memset+0xa>
 80170ea:	4770      	bx	lr
 80170ec:	f803 1b01 	strb.w	r1, [r3], #1
 80170f0:	e7f9      	b.n	80170e6 <memset+0x4>
	...

080170f4 <_malloc_r>:
 80170f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170f6:	1ccd      	adds	r5, r1, #3
 80170f8:	f025 0503 	bic.w	r5, r5, #3
 80170fc:	3508      	adds	r5, #8
 80170fe:	2d0c      	cmp	r5, #12
 8017100:	bf38      	it	cc
 8017102:	250c      	movcc	r5, #12
 8017104:	2d00      	cmp	r5, #0
 8017106:	4606      	mov	r6, r0
 8017108:	db01      	blt.n	801710e <_malloc_r+0x1a>
 801710a:	42a9      	cmp	r1, r5
 801710c:	d903      	bls.n	8017116 <_malloc_r+0x22>
 801710e:	230c      	movs	r3, #12
 8017110:	6033      	str	r3, [r6, #0]
 8017112:	2000      	movs	r0, #0
 8017114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017116:	f000 fc8d 	bl	8017a34 <__malloc_lock>
 801711a:	4921      	ldr	r1, [pc, #132]	; (80171a0 <_malloc_r+0xac>)
 801711c:	680a      	ldr	r2, [r1, #0]
 801711e:	4614      	mov	r4, r2
 8017120:	b99c      	cbnz	r4, 801714a <_malloc_r+0x56>
 8017122:	4f20      	ldr	r7, [pc, #128]	; (80171a4 <_malloc_r+0xb0>)
 8017124:	683b      	ldr	r3, [r7, #0]
 8017126:	b923      	cbnz	r3, 8017132 <_malloc_r+0x3e>
 8017128:	4621      	mov	r1, r4
 801712a:	4630      	mov	r0, r6
 801712c:	f000 f974 	bl	8017418 <_sbrk_r>
 8017130:	6038      	str	r0, [r7, #0]
 8017132:	4629      	mov	r1, r5
 8017134:	4630      	mov	r0, r6
 8017136:	f000 f96f 	bl	8017418 <_sbrk_r>
 801713a:	1c43      	adds	r3, r0, #1
 801713c:	d123      	bne.n	8017186 <_malloc_r+0x92>
 801713e:	230c      	movs	r3, #12
 8017140:	6033      	str	r3, [r6, #0]
 8017142:	4630      	mov	r0, r6
 8017144:	f000 fc7c 	bl	8017a40 <__malloc_unlock>
 8017148:	e7e3      	b.n	8017112 <_malloc_r+0x1e>
 801714a:	6823      	ldr	r3, [r4, #0]
 801714c:	1b5b      	subs	r3, r3, r5
 801714e:	d417      	bmi.n	8017180 <_malloc_r+0x8c>
 8017150:	2b0b      	cmp	r3, #11
 8017152:	d903      	bls.n	801715c <_malloc_r+0x68>
 8017154:	6023      	str	r3, [r4, #0]
 8017156:	441c      	add	r4, r3
 8017158:	6025      	str	r5, [r4, #0]
 801715a:	e004      	b.n	8017166 <_malloc_r+0x72>
 801715c:	6863      	ldr	r3, [r4, #4]
 801715e:	42a2      	cmp	r2, r4
 8017160:	bf0c      	ite	eq
 8017162:	600b      	streq	r3, [r1, #0]
 8017164:	6053      	strne	r3, [r2, #4]
 8017166:	4630      	mov	r0, r6
 8017168:	f000 fc6a 	bl	8017a40 <__malloc_unlock>
 801716c:	f104 000b 	add.w	r0, r4, #11
 8017170:	1d23      	adds	r3, r4, #4
 8017172:	f020 0007 	bic.w	r0, r0, #7
 8017176:	1ac2      	subs	r2, r0, r3
 8017178:	d0cc      	beq.n	8017114 <_malloc_r+0x20>
 801717a:	1a1b      	subs	r3, r3, r0
 801717c:	50a3      	str	r3, [r4, r2]
 801717e:	e7c9      	b.n	8017114 <_malloc_r+0x20>
 8017180:	4622      	mov	r2, r4
 8017182:	6864      	ldr	r4, [r4, #4]
 8017184:	e7cc      	b.n	8017120 <_malloc_r+0x2c>
 8017186:	1cc4      	adds	r4, r0, #3
 8017188:	f024 0403 	bic.w	r4, r4, #3
 801718c:	42a0      	cmp	r0, r4
 801718e:	d0e3      	beq.n	8017158 <_malloc_r+0x64>
 8017190:	1a21      	subs	r1, r4, r0
 8017192:	4630      	mov	r0, r6
 8017194:	f000 f940 	bl	8017418 <_sbrk_r>
 8017198:	3001      	adds	r0, #1
 801719a:	d1dd      	bne.n	8017158 <_malloc_r+0x64>
 801719c:	e7cf      	b.n	801713e <_malloc_r+0x4a>
 801719e:	bf00      	nop
 80171a0:	20008694 	.word	0x20008694
 80171a4:	20008698 	.word	0x20008698

080171a8 <iprintf>:
 80171a8:	b40f      	push	{r0, r1, r2, r3}
 80171aa:	4b0a      	ldr	r3, [pc, #40]	; (80171d4 <iprintf+0x2c>)
 80171ac:	b513      	push	{r0, r1, r4, lr}
 80171ae:	681c      	ldr	r4, [r3, #0]
 80171b0:	b124      	cbz	r4, 80171bc <iprintf+0x14>
 80171b2:	69a3      	ldr	r3, [r4, #24]
 80171b4:	b913      	cbnz	r3, 80171bc <iprintf+0x14>
 80171b6:	4620      	mov	r0, r4
 80171b8:	f7ff fe98 	bl	8016eec <__sinit>
 80171bc:	ab05      	add	r3, sp, #20
 80171be:	9a04      	ldr	r2, [sp, #16]
 80171c0:	68a1      	ldr	r1, [r4, #8]
 80171c2:	9301      	str	r3, [sp, #4]
 80171c4:	4620      	mov	r0, r4
 80171c6:	f000 fe17 	bl	8017df8 <_vfiprintf_r>
 80171ca:	b002      	add	sp, #8
 80171cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80171d0:	b004      	add	sp, #16
 80171d2:	4770      	bx	lr
 80171d4:	20000020 	.word	0x20000020

080171d8 <_puts_r>:
 80171d8:	b570      	push	{r4, r5, r6, lr}
 80171da:	460e      	mov	r6, r1
 80171dc:	4605      	mov	r5, r0
 80171de:	b118      	cbz	r0, 80171e8 <_puts_r+0x10>
 80171e0:	6983      	ldr	r3, [r0, #24]
 80171e2:	b90b      	cbnz	r3, 80171e8 <_puts_r+0x10>
 80171e4:	f7ff fe82 	bl	8016eec <__sinit>
 80171e8:	69ab      	ldr	r3, [r5, #24]
 80171ea:	68ac      	ldr	r4, [r5, #8]
 80171ec:	b913      	cbnz	r3, 80171f4 <_puts_r+0x1c>
 80171ee:	4628      	mov	r0, r5
 80171f0:	f7ff fe7c 	bl	8016eec <__sinit>
 80171f4:	4b2c      	ldr	r3, [pc, #176]	; (80172a8 <_puts_r+0xd0>)
 80171f6:	429c      	cmp	r4, r3
 80171f8:	d120      	bne.n	801723c <_puts_r+0x64>
 80171fa:	686c      	ldr	r4, [r5, #4]
 80171fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80171fe:	07db      	lsls	r3, r3, #31
 8017200:	d405      	bmi.n	801720e <_puts_r+0x36>
 8017202:	89a3      	ldrh	r3, [r4, #12]
 8017204:	0598      	lsls	r0, r3, #22
 8017206:	d402      	bmi.n	801720e <_puts_r+0x36>
 8017208:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801720a:	f7ff ff32 	bl	8017072 <__retarget_lock_acquire_recursive>
 801720e:	89a3      	ldrh	r3, [r4, #12]
 8017210:	0719      	lsls	r1, r3, #28
 8017212:	d51d      	bpl.n	8017250 <_puts_r+0x78>
 8017214:	6923      	ldr	r3, [r4, #16]
 8017216:	b1db      	cbz	r3, 8017250 <_puts_r+0x78>
 8017218:	3e01      	subs	r6, #1
 801721a:	68a3      	ldr	r3, [r4, #8]
 801721c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8017220:	3b01      	subs	r3, #1
 8017222:	60a3      	str	r3, [r4, #8]
 8017224:	bb39      	cbnz	r1, 8017276 <_puts_r+0x9e>
 8017226:	2b00      	cmp	r3, #0
 8017228:	da38      	bge.n	801729c <_puts_r+0xc4>
 801722a:	4622      	mov	r2, r4
 801722c:	210a      	movs	r1, #10
 801722e:	4628      	mov	r0, r5
 8017230:	f000 f9ae 	bl	8017590 <__swbuf_r>
 8017234:	3001      	adds	r0, #1
 8017236:	d011      	beq.n	801725c <_puts_r+0x84>
 8017238:	250a      	movs	r5, #10
 801723a:	e011      	b.n	8017260 <_puts_r+0x88>
 801723c:	4b1b      	ldr	r3, [pc, #108]	; (80172ac <_puts_r+0xd4>)
 801723e:	429c      	cmp	r4, r3
 8017240:	d101      	bne.n	8017246 <_puts_r+0x6e>
 8017242:	68ac      	ldr	r4, [r5, #8]
 8017244:	e7da      	b.n	80171fc <_puts_r+0x24>
 8017246:	4b1a      	ldr	r3, [pc, #104]	; (80172b0 <_puts_r+0xd8>)
 8017248:	429c      	cmp	r4, r3
 801724a:	bf08      	it	eq
 801724c:	68ec      	ldreq	r4, [r5, #12]
 801724e:	e7d5      	b.n	80171fc <_puts_r+0x24>
 8017250:	4621      	mov	r1, r4
 8017252:	4628      	mov	r0, r5
 8017254:	f000 fa00 	bl	8017658 <__swsetup_r>
 8017258:	2800      	cmp	r0, #0
 801725a:	d0dd      	beq.n	8017218 <_puts_r+0x40>
 801725c:	f04f 35ff 	mov.w	r5, #4294967295
 8017260:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017262:	07da      	lsls	r2, r3, #31
 8017264:	d405      	bmi.n	8017272 <_puts_r+0x9a>
 8017266:	89a3      	ldrh	r3, [r4, #12]
 8017268:	059b      	lsls	r3, r3, #22
 801726a:	d402      	bmi.n	8017272 <_puts_r+0x9a>
 801726c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801726e:	f7ff ff01 	bl	8017074 <__retarget_lock_release_recursive>
 8017272:	4628      	mov	r0, r5
 8017274:	bd70      	pop	{r4, r5, r6, pc}
 8017276:	2b00      	cmp	r3, #0
 8017278:	da04      	bge.n	8017284 <_puts_r+0xac>
 801727a:	69a2      	ldr	r2, [r4, #24]
 801727c:	429a      	cmp	r2, r3
 801727e:	dc06      	bgt.n	801728e <_puts_r+0xb6>
 8017280:	290a      	cmp	r1, #10
 8017282:	d004      	beq.n	801728e <_puts_r+0xb6>
 8017284:	6823      	ldr	r3, [r4, #0]
 8017286:	1c5a      	adds	r2, r3, #1
 8017288:	6022      	str	r2, [r4, #0]
 801728a:	7019      	strb	r1, [r3, #0]
 801728c:	e7c5      	b.n	801721a <_puts_r+0x42>
 801728e:	4622      	mov	r2, r4
 8017290:	4628      	mov	r0, r5
 8017292:	f000 f97d 	bl	8017590 <__swbuf_r>
 8017296:	3001      	adds	r0, #1
 8017298:	d1bf      	bne.n	801721a <_puts_r+0x42>
 801729a:	e7df      	b.n	801725c <_puts_r+0x84>
 801729c:	6823      	ldr	r3, [r4, #0]
 801729e:	250a      	movs	r5, #10
 80172a0:	1c5a      	adds	r2, r3, #1
 80172a2:	6022      	str	r2, [r4, #0]
 80172a4:	701d      	strb	r5, [r3, #0]
 80172a6:	e7db      	b.n	8017260 <_puts_r+0x88>
 80172a8:	0801c168 	.word	0x0801c168
 80172ac:	0801c188 	.word	0x0801c188
 80172b0:	0801c148 	.word	0x0801c148

080172b4 <puts>:
 80172b4:	4b02      	ldr	r3, [pc, #8]	; (80172c0 <puts+0xc>)
 80172b6:	4601      	mov	r1, r0
 80172b8:	6818      	ldr	r0, [r3, #0]
 80172ba:	f7ff bf8d 	b.w	80171d8 <_puts_r>
 80172be:	bf00      	nop
 80172c0:	20000020 	.word	0x20000020

080172c4 <rand>:
 80172c4:	4b17      	ldr	r3, [pc, #92]	; (8017324 <rand+0x60>)
 80172c6:	b510      	push	{r4, lr}
 80172c8:	681c      	ldr	r4, [r3, #0]
 80172ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80172cc:	b9b3      	cbnz	r3, 80172fc <rand+0x38>
 80172ce:	2018      	movs	r0, #24
 80172d0:	f000 fba8 	bl	8017a24 <malloc>
 80172d4:	63a0      	str	r0, [r4, #56]	; 0x38
 80172d6:	b928      	cbnz	r0, 80172e4 <rand+0x20>
 80172d8:	4602      	mov	r2, r0
 80172da:	4b13      	ldr	r3, [pc, #76]	; (8017328 <rand+0x64>)
 80172dc:	4813      	ldr	r0, [pc, #76]	; (801732c <rand+0x68>)
 80172de:	214e      	movs	r1, #78	; 0x4e
 80172e0:	f000 fa28 	bl	8017734 <__assert_func>
 80172e4:	4a12      	ldr	r2, [pc, #72]	; (8017330 <rand+0x6c>)
 80172e6:	4b13      	ldr	r3, [pc, #76]	; (8017334 <rand+0x70>)
 80172e8:	e9c0 2300 	strd	r2, r3, [r0]
 80172ec:	4b12      	ldr	r3, [pc, #72]	; (8017338 <rand+0x74>)
 80172ee:	6083      	str	r3, [r0, #8]
 80172f0:	230b      	movs	r3, #11
 80172f2:	8183      	strh	r3, [r0, #12]
 80172f4:	2201      	movs	r2, #1
 80172f6:	2300      	movs	r3, #0
 80172f8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80172fc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80172fe:	480f      	ldr	r0, [pc, #60]	; (801733c <rand+0x78>)
 8017300:	690a      	ldr	r2, [r1, #16]
 8017302:	694b      	ldr	r3, [r1, #20]
 8017304:	4c0e      	ldr	r4, [pc, #56]	; (8017340 <rand+0x7c>)
 8017306:	4350      	muls	r0, r2
 8017308:	fb04 0003 	mla	r0, r4, r3, r0
 801730c:	fba2 3404 	umull	r3, r4, r2, r4
 8017310:	1c5a      	adds	r2, r3, #1
 8017312:	4404      	add	r4, r0
 8017314:	f144 0000 	adc.w	r0, r4, #0
 8017318:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801731c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017320:	bd10      	pop	{r4, pc}
 8017322:	bf00      	nop
 8017324:	20000020 	.word	0x20000020
 8017328:	0801c1ac 	.word	0x0801c1ac
 801732c:	0801c1c3 	.word	0x0801c1c3
 8017330:	abcd330e 	.word	0xabcd330e
 8017334:	e66d1234 	.word	0xe66d1234
 8017338:	0005deec 	.word	0x0005deec
 801733c:	5851f42d 	.word	0x5851f42d
 8017340:	4c957f2d 	.word	0x4c957f2d

08017344 <cleanup_glue>:
 8017344:	b538      	push	{r3, r4, r5, lr}
 8017346:	460c      	mov	r4, r1
 8017348:	6809      	ldr	r1, [r1, #0]
 801734a:	4605      	mov	r5, r0
 801734c:	b109      	cbz	r1, 8017352 <cleanup_glue+0xe>
 801734e:	f7ff fff9 	bl	8017344 <cleanup_glue>
 8017352:	4621      	mov	r1, r4
 8017354:	4628      	mov	r0, r5
 8017356:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801735a:	f000 bb77 	b.w	8017a4c <_free_r>
	...

08017360 <_reclaim_reent>:
 8017360:	4b2c      	ldr	r3, [pc, #176]	; (8017414 <_reclaim_reent+0xb4>)
 8017362:	681b      	ldr	r3, [r3, #0]
 8017364:	4283      	cmp	r3, r0
 8017366:	b570      	push	{r4, r5, r6, lr}
 8017368:	4604      	mov	r4, r0
 801736a:	d051      	beq.n	8017410 <_reclaim_reent+0xb0>
 801736c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801736e:	b143      	cbz	r3, 8017382 <_reclaim_reent+0x22>
 8017370:	68db      	ldr	r3, [r3, #12]
 8017372:	2b00      	cmp	r3, #0
 8017374:	d14a      	bne.n	801740c <_reclaim_reent+0xac>
 8017376:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017378:	6819      	ldr	r1, [r3, #0]
 801737a:	b111      	cbz	r1, 8017382 <_reclaim_reent+0x22>
 801737c:	4620      	mov	r0, r4
 801737e:	f000 fb65 	bl	8017a4c <_free_r>
 8017382:	6961      	ldr	r1, [r4, #20]
 8017384:	b111      	cbz	r1, 801738c <_reclaim_reent+0x2c>
 8017386:	4620      	mov	r0, r4
 8017388:	f000 fb60 	bl	8017a4c <_free_r>
 801738c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801738e:	b111      	cbz	r1, 8017396 <_reclaim_reent+0x36>
 8017390:	4620      	mov	r0, r4
 8017392:	f000 fb5b 	bl	8017a4c <_free_r>
 8017396:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017398:	b111      	cbz	r1, 80173a0 <_reclaim_reent+0x40>
 801739a:	4620      	mov	r0, r4
 801739c:	f000 fb56 	bl	8017a4c <_free_r>
 80173a0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80173a2:	b111      	cbz	r1, 80173aa <_reclaim_reent+0x4a>
 80173a4:	4620      	mov	r0, r4
 80173a6:	f000 fb51 	bl	8017a4c <_free_r>
 80173aa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80173ac:	b111      	cbz	r1, 80173b4 <_reclaim_reent+0x54>
 80173ae:	4620      	mov	r0, r4
 80173b0:	f000 fb4c 	bl	8017a4c <_free_r>
 80173b4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80173b6:	b111      	cbz	r1, 80173be <_reclaim_reent+0x5e>
 80173b8:	4620      	mov	r0, r4
 80173ba:	f000 fb47 	bl	8017a4c <_free_r>
 80173be:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80173c0:	b111      	cbz	r1, 80173c8 <_reclaim_reent+0x68>
 80173c2:	4620      	mov	r0, r4
 80173c4:	f000 fb42 	bl	8017a4c <_free_r>
 80173c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80173ca:	b111      	cbz	r1, 80173d2 <_reclaim_reent+0x72>
 80173cc:	4620      	mov	r0, r4
 80173ce:	f000 fb3d 	bl	8017a4c <_free_r>
 80173d2:	69a3      	ldr	r3, [r4, #24]
 80173d4:	b1e3      	cbz	r3, 8017410 <_reclaim_reent+0xb0>
 80173d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80173d8:	4620      	mov	r0, r4
 80173da:	4798      	blx	r3
 80173dc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80173de:	b1b9      	cbz	r1, 8017410 <_reclaim_reent+0xb0>
 80173e0:	4620      	mov	r0, r4
 80173e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80173e6:	f7ff bfad 	b.w	8017344 <cleanup_glue>
 80173ea:	5949      	ldr	r1, [r1, r5]
 80173ec:	b941      	cbnz	r1, 8017400 <_reclaim_reent+0xa0>
 80173ee:	3504      	adds	r5, #4
 80173f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80173f2:	2d80      	cmp	r5, #128	; 0x80
 80173f4:	68d9      	ldr	r1, [r3, #12]
 80173f6:	d1f8      	bne.n	80173ea <_reclaim_reent+0x8a>
 80173f8:	4620      	mov	r0, r4
 80173fa:	f000 fb27 	bl	8017a4c <_free_r>
 80173fe:	e7ba      	b.n	8017376 <_reclaim_reent+0x16>
 8017400:	680e      	ldr	r6, [r1, #0]
 8017402:	4620      	mov	r0, r4
 8017404:	f000 fb22 	bl	8017a4c <_free_r>
 8017408:	4631      	mov	r1, r6
 801740a:	e7ef      	b.n	80173ec <_reclaim_reent+0x8c>
 801740c:	2500      	movs	r5, #0
 801740e:	e7ef      	b.n	80173f0 <_reclaim_reent+0x90>
 8017410:	bd70      	pop	{r4, r5, r6, pc}
 8017412:	bf00      	nop
 8017414:	20000020 	.word	0x20000020

08017418 <_sbrk_r>:
 8017418:	b538      	push	{r3, r4, r5, lr}
 801741a:	4d06      	ldr	r5, [pc, #24]	; (8017434 <_sbrk_r+0x1c>)
 801741c:	2300      	movs	r3, #0
 801741e:	4604      	mov	r4, r0
 8017420:	4608      	mov	r0, r1
 8017422:	602b      	str	r3, [r5, #0]
 8017424:	f7e9 fc08 	bl	8000c38 <_sbrk>
 8017428:	1c43      	adds	r3, r0, #1
 801742a:	d102      	bne.n	8017432 <_sbrk_r+0x1a>
 801742c:	682b      	ldr	r3, [r5, #0]
 801742e:	b103      	cbz	r3, 8017432 <_sbrk_r+0x1a>
 8017430:	6023      	str	r3, [r4, #0]
 8017432:	bd38      	pop	{r3, r4, r5, pc}
 8017434:	2000f020 	.word	0x2000f020

08017438 <siprintf>:
 8017438:	b40e      	push	{r1, r2, r3}
 801743a:	b500      	push	{lr}
 801743c:	b09c      	sub	sp, #112	; 0x70
 801743e:	ab1d      	add	r3, sp, #116	; 0x74
 8017440:	9002      	str	r0, [sp, #8]
 8017442:	9006      	str	r0, [sp, #24]
 8017444:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017448:	4809      	ldr	r0, [pc, #36]	; (8017470 <siprintf+0x38>)
 801744a:	9107      	str	r1, [sp, #28]
 801744c:	9104      	str	r1, [sp, #16]
 801744e:	4909      	ldr	r1, [pc, #36]	; (8017474 <siprintf+0x3c>)
 8017450:	f853 2b04 	ldr.w	r2, [r3], #4
 8017454:	9105      	str	r1, [sp, #20]
 8017456:	6800      	ldr	r0, [r0, #0]
 8017458:	9301      	str	r3, [sp, #4]
 801745a:	a902      	add	r1, sp, #8
 801745c:	f000 fba2 	bl	8017ba4 <_svfiprintf_r>
 8017460:	9b02      	ldr	r3, [sp, #8]
 8017462:	2200      	movs	r2, #0
 8017464:	701a      	strb	r2, [r3, #0]
 8017466:	b01c      	add	sp, #112	; 0x70
 8017468:	f85d eb04 	ldr.w	lr, [sp], #4
 801746c:	b003      	add	sp, #12
 801746e:	4770      	bx	lr
 8017470:	20000020 	.word	0x20000020
 8017474:	ffff0208 	.word	0xffff0208

08017478 <__sread>:
 8017478:	b510      	push	{r4, lr}
 801747a:	460c      	mov	r4, r1
 801747c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017480:	f000 ff7e 	bl	8018380 <_read_r>
 8017484:	2800      	cmp	r0, #0
 8017486:	bfab      	itete	ge
 8017488:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801748a:	89a3      	ldrhlt	r3, [r4, #12]
 801748c:	181b      	addge	r3, r3, r0
 801748e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017492:	bfac      	ite	ge
 8017494:	6563      	strge	r3, [r4, #84]	; 0x54
 8017496:	81a3      	strhlt	r3, [r4, #12]
 8017498:	bd10      	pop	{r4, pc}

0801749a <__swrite>:
 801749a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801749e:	461f      	mov	r7, r3
 80174a0:	898b      	ldrh	r3, [r1, #12]
 80174a2:	05db      	lsls	r3, r3, #23
 80174a4:	4605      	mov	r5, r0
 80174a6:	460c      	mov	r4, r1
 80174a8:	4616      	mov	r6, r2
 80174aa:	d505      	bpl.n	80174b8 <__swrite+0x1e>
 80174ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80174b0:	2302      	movs	r3, #2
 80174b2:	2200      	movs	r2, #0
 80174b4:	f000 fa40 	bl	8017938 <_lseek_r>
 80174b8:	89a3      	ldrh	r3, [r4, #12]
 80174ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80174be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80174c2:	81a3      	strh	r3, [r4, #12]
 80174c4:	4632      	mov	r2, r6
 80174c6:	463b      	mov	r3, r7
 80174c8:	4628      	mov	r0, r5
 80174ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80174ce:	f000 b8b1 	b.w	8017634 <_write_r>

080174d2 <__sseek>:
 80174d2:	b510      	push	{r4, lr}
 80174d4:	460c      	mov	r4, r1
 80174d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80174da:	f000 fa2d 	bl	8017938 <_lseek_r>
 80174de:	1c43      	adds	r3, r0, #1
 80174e0:	89a3      	ldrh	r3, [r4, #12]
 80174e2:	bf15      	itete	ne
 80174e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80174e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80174ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80174ee:	81a3      	strheq	r3, [r4, #12]
 80174f0:	bf18      	it	ne
 80174f2:	81a3      	strhne	r3, [r4, #12]
 80174f4:	bd10      	pop	{r4, pc}

080174f6 <__sclose>:
 80174f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80174fa:	f000 b939 	b.w	8017770 <_close_r>
	...

08017500 <strcasecmp>:
 8017500:	b570      	push	{r4, r5, r6, lr}
 8017502:	4d0c      	ldr	r5, [pc, #48]	; (8017534 <strcasecmp+0x34>)
 8017504:	4604      	mov	r4, r0
 8017506:	462e      	mov	r6, r5
 8017508:	f814 3b01 	ldrb.w	r3, [r4], #1
 801750c:	5d5a      	ldrb	r2, [r3, r5]
 801750e:	f002 0203 	and.w	r2, r2, #3
 8017512:	2a01      	cmp	r2, #1
 8017514:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017518:	5cb0      	ldrb	r0, [r6, r2]
 801751a:	f000 0003 	and.w	r0, r0, #3
 801751e:	bf08      	it	eq
 8017520:	3320      	addeq	r3, #32
 8017522:	2801      	cmp	r0, #1
 8017524:	bf08      	it	eq
 8017526:	3220      	addeq	r2, #32
 8017528:	1a98      	subs	r0, r3, r2
 801752a:	d101      	bne.n	8017530 <strcasecmp+0x30>
 801752c:	2a00      	cmp	r2, #0
 801752e:	d1eb      	bne.n	8017508 <strcasecmp+0x8>
 8017530:	bd70      	pop	{r4, r5, r6, pc}
 8017532:	bf00      	nop
 8017534:	0801c045 	.word	0x0801c045

08017538 <__strtok_r>:
 8017538:	b5f0      	push	{r4, r5, r6, r7, lr}
 801753a:	b908      	cbnz	r0, 8017540 <__strtok_r+0x8>
 801753c:	6810      	ldr	r0, [r2, #0]
 801753e:	b188      	cbz	r0, 8017564 <__strtok_r+0x2c>
 8017540:	4604      	mov	r4, r0
 8017542:	4620      	mov	r0, r4
 8017544:	f814 5b01 	ldrb.w	r5, [r4], #1
 8017548:	460f      	mov	r7, r1
 801754a:	f817 6b01 	ldrb.w	r6, [r7], #1
 801754e:	b91e      	cbnz	r6, 8017558 <__strtok_r+0x20>
 8017550:	b965      	cbnz	r5, 801756c <__strtok_r+0x34>
 8017552:	6015      	str	r5, [r2, #0]
 8017554:	4628      	mov	r0, r5
 8017556:	e005      	b.n	8017564 <__strtok_r+0x2c>
 8017558:	42b5      	cmp	r5, r6
 801755a:	d1f6      	bne.n	801754a <__strtok_r+0x12>
 801755c:	2b00      	cmp	r3, #0
 801755e:	d1f0      	bne.n	8017542 <__strtok_r+0xa>
 8017560:	6014      	str	r4, [r2, #0]
 8017562:	7003      	strb	r3, [r0, #0]
 8017564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017566:	461c      	mov	r4, r3
 8017568:	e00c      	b.n	8017584 <__strtok_r+0x4c>
 801756a:	b915      	cbnz	r5, 8017572 <__strtok_r+0x3a>
 801756c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017570:	460e      	mov	r6, r1
 8017572:	f816 5b01 	ldrb.w	r5, [r6], #1
 8017576:	42ab      	cmp	r3, r5
 8017578:	d1f7      	bne.n	801756a <__strtok_r+0x32>
 801757a:	2b00      	cmp	r3, #0
 801757c:	d0f3      	beq.n	8017566 <__strtok_r+0x2e>
 801757e:	2300      	movs	r3, #0
 8017580:	f804 3c01 	strb.w	r3, [r4, #-1]
 8017584:	6014      	str	r4, [r2, #0]
 8017586:	e7ed      	b.n	8017564 <__strtok_r+0x2c>

08017588 <strtok_r>:
 8017588:	2301      	movs	r3, #1
 801758a:	f7ff bfd5 	b.w	8017538 <__strtok_r>
	...

08017590 <__swbuf_r>:
 8017590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017592:	460e      	mov	r6, r1
 8017594:	4614      	mov	r4, r2
 8017596:	4605      	mov	r5, r0
 8017598:	b118      	cbz	r0, 80175a2 <__swbuf_r+0x12>
 801759a:	6983      	ldr	r3, [r0, #24]
 801759c:	b90b      	cbnz	r3, 80175a2 <__swbuf_r+0x12>
 801759e:	f7ff fca5 	bl	8016eec <__sinit>
 80175a2:	4b21      	ldr	r3, [pc, #132]	; (8017628 <__swbuf_r+0x98>)
 80175a4:	429c      	cmp	r4, r3
 80175a6:	d12b      	bne.n	8017600 <__swbuf_r+0x70>
 80175a8:	686c      	ldr	r4, [r5, #4]
 80175aa:	69a3      	ldr	r3, [r4, #24]
 80175ac:	60a3      	str	r3, [r4, #8]
 80175ae:	89a3      	ldrh	r3, [r4, #12]
 80175b0:	071a      	lsls	r2, r3, #28
 80175b2:	d52f      	bpl.n	8017614 <__swbuf_r+0x84>
 80175b4:	6923      	ldr	r3, [r4, #16]
 80175b6:	b36b      	cbz	r3, 8017614 <__swbuf_r+0x84>
 80175b8:	6923      	ldr	r3, [r4, #16]
 80175ba:	6820      	ldr	r0, [r4, #0]
 80175bc:	1ac0      	subs	r0, r0, r3
 80175be:	6963      	ldr	r3, [r4, #20]
 80175c0:	b2f6      	uxtb	r6, r6
 80175c2:	4283      	cmp	r3, r0
 80175c4:	4637      	mov	r7, r6
 80175c6:	dc04      	bgt.n	80175d2 <__swbuf_r+0x42>
 80175c8:	4621      	mov	r1, r4
 80175ca:	4628      	mov	r0, r5
 80175cc:	f000 f966 	bl	801789c <_fflush_r>
 80175d0:	bb30      	cbnz	r0, 8017620 <__swbuf_r+0x90>
 80175d2:	68a3      	ldr	r3, [r4, #8]
 80175d4:	3b01      	subs	r3, #1
 80175d6:	60a3      	str	r3, [r4, #8]
 80175d8:	6823      	ldr	r3, [r4, #0]
 80175da:	1c5a      	adds	r2, r3, #1
 80175dc:	6022      	str	r2, [r4, #0]
 80175de:	701e      	strb	r6, [r3, #0]
 80175e0:	6963      	ldr	r3, [r4, #20]
 80175e2:	3001      	adds	r0, #1
 80175e4:	4283      	cmp	r3, r0
 80175e6:	d004      	beq.n	80175f2 <__swbuf_r+0x62>
 80175e8:	89a3      	ldrh	r3, [r4, #12]
 80175ea:	07db      	lsls	r3, r3, #31
 80175ec:	d506      	bpl.n	80175fc <__swbuf_r+0x6c>
 80175ee:	2e0a      	cmp	r6, #10
 80175f0:	d104      	bne.n	80175fc <__swbuf_r+0x6c>
 80175f2:	4621      	mov	r1, r4
 80175f4:	4628      	mov	r0, r5
 80175f6:	f000 f951 	bl	801789c <_fflush_r>
 80175fa:	b988      	cbnz	r0, 8017620 <__swbuf_r+0x90>
 80175fc:	4638      	mov	r0, r7
 80175fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017600:	4b0a      	ldr	r3, [pc, #40]	; (801762c <__swbuf_r+0x9c>)
 8017602:	429c      	cmp	r4, r3
 8017604:	d101      	bne.n	801760a <__swbuf_r+0x7a>
 8017606:	68ac      	ldr	r4, [r5, #8]
 8017608:	e7cf      	b.n	80175aa <__swbuf_r+0x1a>
 801760a:	4b09      	ldr	r3, [pc, #36]	; (8017630 <__swbuf_r+0xa0>)
 801760c:	429c      	cmp	r4, r3
 801760e:	bf08      	it	eq
 8017610:	68ec      	ldreq	r4, [r5, #12]
 8017612:	e7ca      	b.n	80175aa <__swbuf_r+0x1a>
 8017614:	4621      	mov	r1, r4
 8017616:	4628      	mov	r0, r5
 8017618:	f000 f81e 	bl	8017658 <__swsetup_r>
 801761c:	2800      	cmp	r0, #0
 801761e:	d0cb      	beq.n	80175b8 <__swbuf_r+0x28>
 8017620:	f04f 37ff 	mov.w	r7, #4294967295
 8017624:	e7ea      	b.n	80175fc <__swbuf_r+0x6c>
 8017626:	bf00      	nop
 8017628:	0801c168 	.word	0x0801c168
 801762c:	0801c188 	.word	0x0801c188
 8017630:	0801c148 	.word	0x0801c148

08017634 <_write_r>:
 8017634:	b538      	push	{r3, r4, r5, lr}
 8017636:	4d07      	ldr	r5, [pc, #28]	; (8017654 <_write_r+0x20>)
 8017638:	4604      	mov	r4, r0
 801763a:	4608      	mov	r0, r1
 801763c:	4611      	mov	r1, r2
 801763e:	2200      	movs	r2, #0
 8017640:	602a      	str	r2, [r5, #0]
 8017642:	461a      	mov	r2, r3
 8017644:	f7e9 faa7 	bl	8000b96 <_write>
 8017648:	1c43      	adds	r3, r0, #1
 801764a:	d102      	bne.n	8017652 <_write_r+0x1e>
 801764c:	682b      	ldr	r3, [r5, #0]
 801764e:	b103      	cbz	r3, 8017652 <_write_r+0x1e>
 8017650:	6023      	str	r3, [r4, #0]
 8017652:	bd38      	pop	{r3, r4, r5, pc}
 8017654:	2000f020 	.word	0x2000f020

08017658 <__swsetup_r>:
 8017658:	4b32      	ldr	r3, [pc, #200]	; (8017724 <__swsetup_r+0xcc>)
 801765a:	b570      	push	{r4, r5, r6, lr}
 801765c:	681d      	ldr	r5, [r3, #0]
 801765e:	4606      	mov	r6, r0
 8017660:	460c      	mov	r4, r1
 8017662:	b125      	cbz	r5, 801766e <__swsetup_r+0x16>
 8017664:	69ab      	ldr	r3, [r5, #24]
 8017666:	b913      	cbnz	r3, 801766e <__swsetup_r+0x16>
 8017668:	4628      	mov	r0, r5
 801766a:	f7ff fc3f 	bl	8016eec <__sinit>
 801766e:	4b2e      	ldr	r3, [pc, #184]	; (8017728 <__swsetup_r+0xd0>)
 8017670:	429c      	cmp	r4, r3
 8017672:	d10f      	bne.n	8017694 <__swsetup_r+0x3c>
 8017674:	686c      	ldr	r4, [r5, #4]
 8017676:	89a3      	ldrh	r3, [r4, #12]
 8017678:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801767c:	0719      	lsls	r1, r3, #28
 801767e:	d42c      	bmi.n	80176da <__swsetup_r+0x82>
 8017680:	06dd      	lsls	r5, r3, #27
 8017682:	d411      	bmi.n	80176a8 <__swsetup_r+0x50>
 8017684:	2309      	movs	r3, #9
 8017686:	6033      	str	r3, [r6, #0]
 8017688:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801768c:	81a3      	strh	r3, [r4, #12]
 801768e:	f04f 30ff 	mov.w	r0, #4294967295
 8017692:	e03e      	b.n	8017712 <__swsetup_r+0xba>
 8017694:	4b25      	ldr	r3, [pc, #148]	; (801772c <__swsetup_r+0xd4>)
 8017696:	429c      	cmp	r4, r3
 8017698:	d101      	bne.n	801769e <__swsetup_r+0x46>
 801769a:	68ac      	ldr	r4, [r5, #8]
 801769c:	e7eb      	b.n	8017676 <__swsetup_r+0x1e>
 801769e:	4b24      	ldr	r3, [pc, #144]	; (8017730 <__swsetup_r+0xd8>)
 80176a0:	429c      	cmp	r4, r3
 80176a2:	bf08      	it	eq
 80176a4:	68ec      	ldreq	r4, [r5, #12]
 80176a6:	e7e6      	b.n	8017676 <__swsetup_r+0x1e>
 80176a8:	0758      	lsls	r0, r3, #29
 80176aa:	d512      	bpl.n	80176d2 <__swsetup_r+0x7a>
 80176ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80176ae:	b141      	cbz	r1, 80176c2 <__swsetup_r+0x6a>
 80176b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80176b4:	4299      	cmp	r1, r3
 80176b6:	d002      	beq.n	80176be <__swsetup_r+0x66>
 80176b8:	4630      	mov	r0, r6
 80176ba:	f000 f9c7 	bl	8017a4c <_free_r>
 80176be:	2300      	movs	r3, #0
 80176c0:	6363      	str	r3, [r4, #52]	; 0x34
 80176c2:	89a3      	ldrh	r3, [r4, #12]
 80176c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80176c8:	81a3      	strh	r3, [r4, #12]
 80176ca:	2300      	movs	r3, #0
 80176cc:	6063      	str	r3, [r4, #4]
 80176ce:	6923      	ldr	r3, [r4, #16]
 80176d0:	6023      	str	r3, [r4, #0]
 80176d2:	89a3      	ldrh	r3, [r4, #12]
 80176d4:	f043 0308 	orr.w	r3, r3, #8
 80176d8:	81a3      	strh	r3, [r4, #12]
 80176da:	6923      	ldr	r3, [r4, #16]
 80176dc:	b94b      	cbnz	r3, 80176f2 <__swsetup_r+0x9a>
 80176de:	89a3      	ldrh	r3, [r4, #12]
 80176e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80176e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80176e8:	d003      	beq.n	80176f2 <__swsetup_r+0x9a>
 80176ea:	4621      	mov	r1, r4
 80176ec:	4630      	mov	r0, r6
 80176ee:	f000 f959 	bl	80179a4 <__smakebuf_r>
 80176f2:	89a0      	ldrh	r0, [r4, #12]
 80176f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80176f8:	f010 0301 	ands.w	r3, r0, #1
 80176fc:	d00a      	beq.n	8017714 <__swsetup_r+0xbc>
 80176fe:	2300      	movs	r3, #0
 8017700:	60a3      	str	r3, [r4, #8]
 8017702:	6963      	ldr	r3, [r4, #20]
 8017704:	425b      	negs	r3, r3
 8017706:	61a3      	str	r3, [r4, #24]
 8017708:	6923      	ldr	r3, [r4, #16]
 801770a:	b943      	cbnz	r3, 801771e <__swsetup_r+0xc6>
 801770c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017710:	d1ba      	bne.n	8017688 <__swsetup_r+0x30>
 8017712:	bd70      	pop	{r4, r5, r6, pc}
 8017714:	0781      	lsls	r1, r0, #30
 8017716:	bf58      	it	pl
 8017718:	6963      	ldrpl	r3, [r4, #20]
 801771a:	60a3      	str	r3, [r4, #8]
 801771c:	e7f4      	b.n	8017708 <__swsetup_r+0xb0>
 801771e:	2000      	movs	r0, #0
 8017720:	e7f7      	b.n	8017712 <__swsetup_r+0xba>
 8017722:	bf00      	nop
 8017724:	20000020 	.word	0x20000020
 8017728:	0801c168 	.word	0x0801c168
 801772c:	0801c188 	.word	0x0801c188
 8017730:	0801c148 	.word	0x0801c148

08017734 <__assert_func>:
 8017734:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017736:	4614      	mov	r4, r2
 8017738:	461a      	mov	r2, r3
 801773a:	4b09      	ldr	r3, [pc, #36]	; (8017760 <__assert_func+0x2c>)
 801773c:	681b      	ldr	r3, [r3, #0]
 801773e:	4605      	mov	r5, r0
 8017740:	68d8      	ldr	r0, [r3, #12]
 8017742:	b14c      	cbz	r4, 8017758 <__assert_func+0x24>
 8017744:	4b07      	ldr	r3, [pc, #28]	; (8017764 <__assert_func+0x30>)
 8017746:	9100      	str	r1, [sp, #0]
 8017748:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801774c:	4906      	ldr	r1, [pc, #24]	; (8017768 <__assert_func+0x34>)
 801774e:	462b      	mov	r3, r5
 8017750:	f000 f8e0 	bl	8017914 <fiprintf>
 8017754:	f000 fe26 	bl	80183a4 <abort>
 8017758:	4b04      	ldr	r3, [pc, #16]	; (801776c <__assert_func+0x38>)
 801775a:	461c      	mov	r4, r3
 801775c:	e7f3      	b.n	8017746 <__assert_func+0x12>
 801775e:	bf00      	nop
 8017760:	20000020 	.word	0x20000020
 8017764:	0801c222 	.word	0x0801c222
 8017768:	0801c22f 	.word	0x0801c22f
 801776c:	0801c25d 	.word	0x0801c25d

08017770 <_close_r>:
 8017770:	b538      	push	{r3, r4, r5, lr}
 8017772:	4d06      	ldr	r5, [pc, #24]	; (801778c <_close_r+0x1c>)
 8017774:	2300      	movs	r3, #0
 8017776:	4604      	mov	r4, r0
 8017778:	4608      	mov	r0, r1
 801777a:	602b      	str	r3, [r5, #0]
 801777c:	f7e9 fa27 	bl	8000bce <_close>
 8017780:	1c43      	adds	r3, r0, #1
 8017782:	d102      	bne.n	801778a <_close_r+0x1a>
 8017784:	682b      	ldr	r3, [r5, #0]
 8017786:	b103      	cbz	r3, 801778a <_close_r+0x1a>
 8017788:	6023      	str	r3, [r4, #0]
 801778a:	bd38      	pop	{r3, r4, r5, pc}
 801778c:	2000f020 	.word	0x2000f020

08017790 <__sflush_r>:
 8017790:	898a      	ldrh	r2, [r1, #12]
 8017792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017796:	4605      	mov	r5, r0
 8017798:	0710      	lsls	r0, r2, #28
 801779a:	460c      	mov	r4, r1
 801779c:	d458      	bmi.n	8017850 <__sflush_r+0xc0>
 801779e:	684b      	ldr	r3, [r1, #4]
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	dc05      	bgt.n	80177b0 <__sflush_r+0x20>
 80177a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80177a6:	2b00      	cmp	r3, #0
 80177a8:	dc02      	bgt.n	80177b0 <__sflush_r+0x20>
 80177aa:	2000      	movs	r0, #0
 80177ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80177b2:	2e00      	cmp	r6, #0
 80177b4:	d0f9      	beq.n	80177aa <__sflush_r+0x1a>
 80177b6:	2300      	movs	r3, #0
 80177b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80177bc:	682f      	ldr	r7, [r5, #0]
 80177be:	602b      	str	r3, [r5, #0]
 80177c0:	d032      	beq.n	8017828 <__sflush_r+0x98>
 80177c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80177c4:	89a3      	ldrh	r3, [r4, #12]
 80177c6:	075a      	lsls	r2, r3, #29
 80177c8:	d505      	bpl.n	80177d6 <__sflush_r+0x46>
 80177ca:	6863      	ldr	r3, [r4, #4]
 80177cc:	1ac0      	subs	r0, r0, r3
 80177ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80177d0:	b10b      	cbz	r3, 80177d6 <__sflush_r+0x46>
 80177d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80177d4:	1ac0      	subs	r0, r0, r3
 80177d6:	2300      	movs	r3, #0
 80177d8:	4602      	mov	r2, r0
 80177da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80177dc:	6a21      	ldr	r1, [r4, #32]
 80177de:	4628      	mov	r0, r5
 80177e0:	47b0      	blx	r6
 80177e2:	1c43      	adds	r3, r0, #1
 80177e4:	89a3      	ldrh	r3, [r4, #12]
 80177e6:	d106      	bne.n	80177f6 <__sflush_r+0x66>
 80177e8:	6829      	ldr	r1, [r5, #0]
 80177ea:	291d      	cmp	r1, #29
 80177ec:	d82c      	bhi.n	8017848 <__sflush_r+0xb8>
 80177ee:	4a2a      	ldr	r2, [pc, #168]	; (8017898 <__sflush_r+0x108>)
 80177f0:	40ca      	lsrs	r2, r1
 80177f2:	07d6      	lsls	r6, r2, #31
 80177f4:	d528      	bpl.n	8017848 <__sflush_r+0xb8>
 80177f6:	2200      	movs	r2, #0
 80177f8:	6062      	str	r2, [r4, #4]
 80177fa:	04d9      	lsls	r1, r3, #19
 80177fc:	6922      	ldr	r2, [r4, #16]
 80177fe:	6022      	str	r2, [r4, #0]
 8017800:	d504      	bpl.n	801780c <__sflush_r+0x7c>
 8017802:	1c42      	adds	r2, r0, #1
 8017804:	d101      	bne.n	801780a <__sflush_r+0x7a>
 8017806:	682b      	ldr	r3, [r5, #0]
 8017808:	b903      	cbnz	r3, 801780c <__sflush_r+0x7c>
 801780a:	6560      	str	r0, [r4, #84]	; 0x54
 801780c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801780e:	602f      	str	r7, [r5, #0]
 8017810:	2900      	cmp	r1, #0
 8017812:	d0ca      	beq.n	80177aa <__sflush_r+0x1a>
 8017814:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017818:	4299      	cmp	r1, r3
 801781a:	d002      	beq.n	8017822 <__sflush_r+0x92>
 801781c:	4628      	mov	r0, r5
 801781e:	f000 f915 	bl	8017a4c <_free_r>
 8017822:	2000      	movs	r0, #0
 8017824:	6360      	str	r0, [r4, #52]	; 0x34
 8017826:	e7c1      	b.n	80177ac <__sflush_r+0x1c>
 8017828:	6a21      	ldr	r1, [r4, #32]
 801782a:	2301      	movs	r3, #1
 801782c:	4628      	mov	r0, r5
 801782e:	47b0      	blx	r6
 8017830:	1c41      	adds	r1, r0, #1
 8017832:	d1c7      	bne.n	80177c4 <__sflush_r+0x34>
 8017834:	682b      	ldr	r3, [r5, #0]
 8017836:	2b00      	cmp	r3, #0
 8017838:	d0c4      	beq.n	80177c4 <__sflush_r+0x34>
 801783a:	2b1d      	cmp	r3, #29
 801783c:	d001      	beq.n	8017842 <__sflush_r+0xb2>
 801783e:	2b16      	cmp	r3, #22
 8017840:	d101      	bne.n	8017846 <__sflush_r+0xb6>
 8017842:	602f      	str	r7, [r5, #0]
 8017844:	e7b1      	b.n	80177aa <__sflush_r+0x1a>
 8017846:	89a3      	ldrh	r3, [r4, #12]
 8017848:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801784c:	81a3      	strh	r3, [r4, #12]
 801784e:	e7ad      	b.n	80177ac <__sflush_r+0x1c>
 8017850:	690f      	ldr	r7, [r1, #16]
 8017852:	2f00      	cmp	r7, #0
 8017854:	d0a9      	beq.n	80177aa <__sflush_r+0x1a>
 8017856:	0793      	lsls	r3, r2, #30
 8017858:	680e      	ldr	r6, [r1, #0]
 801785a:	bf08      	it	eq
 801785c:	694b      	ldreq	r3, [r1, #20]
 801785e:	600f      	str	r7, [r1, #0]
 8017860:	bf18      	it	ne
 8017862:	2300      	movne	r3, #0
 8017864:	eba6 0807 	sub.w	r8, r6, r7
 8017868:	608b      	str	r3, [r1, #8]
 801786a:	f1b8 0f00 	cmp.w	r8, #0
 801786e:	dd9c      	ble.n	80177aa <__sflush_r+0x1a>
 8017870:	6a21      	ldr	r1, [r4, #32]
 8017872:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017874:	4643      	mov	r3, r8
 8017876:	463a      	mov	r2, r7
 8017878:	4628      	mov	r0, r5
 801787a:	47b0      	blx	r6
 801787c:	2800      	cmp	r0, #0
 801787e:	dc06      	bgt.n	801788e <__sflush_r+0xfe>
 8017880:	89a3      	ldrh	r3, [r4, #12]
 8017882:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017886:	81a3      	strh	r3, [r4, #12]
 8017888:	f04f 30ff 	mov.w	r0, #4294967295
 801788c:	e78e      	b.n	80177ac <__sflush_r+0x1c>
 801788e:	4407      	add	r7, r0
 8017890:	eba8 0800 	sub.w	r8, r8, r0
 8017894:	e7e9      	b.n	801786a <__sflush_r+0xda>
 8017896:	bf00      	nop
 8017898:	20400001 	.word	0x20400001

0801789c <_fflush_r>:
 801789c:	b538      	push	{r3, r4, r5, lr}
 801789e:	690b      	ldr	r3, [r1, #16]
 80178a0:	4605      	mov	r5, r0
 80178a2:	460c      	mov	r4, r1
 80178a4:	b913      	cbnz	r3, 80178ac <_fflush_r+0x10>
 80178a6:	2500      	movs	r5, #0
 80178a8:	4628      	mov	r0, r5
 80178aa:	bd38      	pop	{r3, r4, r5, pc}
 80178ac:	b118      	cbz	r0, 80178b6 <_fflush_r+0x1a>
 80178ae:	6983      	ldr	r3, [r0, #24]
 80178b0:	b90b      	cbnz	r3, 80178b6 <_fflush_r+0x1a>
 80178b2:	f7ff fb1b 	bl	8016eec <__sinit>
 80178b6:	4b14      	ldr	r3, [pc, #80]	; (8017908 <_fflush_r+0x6c>)
 80178b8:	429c      	cmp	r4, r3
 80178ba:	d11b      	bne.n	80178f4 <_fflush_r+0x58>
 80178bc:	686c      	ldr	r4, [r5, #4]
 80178be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80178c2:	2b00      	cmp	r3, #0
 80178c4:	d0ef      	beq.n	80178a6 <_fflush_r+0xa>
 80178c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80178c8:	07d0      	lsls	r0, r2, #31
 80178ca:	d404      	bmi.n	80178d6 <_fflush_r+0x3a>
 80178cc:	0599      	lsls	r1, r3, #22
 80178ce:	d402      	bmi.n	80178d6 <_fflush_r+0x3a>
 80178d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80178d2:	f7ff fbce 	bl	8017072 <__retarget_lock_acquire_recursive>
 80178d6:	4628      	mov	r0, r5
 80178d8:	4621      	mov	r1, r4
 80178da:	f7ff ff59 	bl	8017790 <__sflush_r>
 80178de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80178e0:	07da      	lsls	r2, r3, #31
 80178e2:	4605      	mov	r5, r0
 80178e4:	d4e0      	bmi.n	80178a8 <_fflush_r+0xc>
 80178e6:	89a3      	ldrh	r3, [r4, #12]
 80178e8:	059b      	lsls	r3, r3, #22
 80178ea:	d4dd      	bmi.n	80178a8 <_fflush_r+0xc>
 80178ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80178ee:	f7ff fbc1 	bl	8017074 <__retarget_lock_release_recursive>
 80178f2:	e7d9      	b.n	80178a8 <_fflush_r+0xc>
 80178f4:	4b05      	ldr	r3, [pc, #20]	; (801790c <_fflush_r+0x70>)
 80178f6:	429c      	cmp	r4, r3
 80178f8:	d101      	bne.n	80178fe <_fflush_r+0x62>
 80178fa:	68ac      	ldr	r4, [r5, #8]
 80178fc:	e7df      	b.n	80178be <_fflush_r+0x22>
 80178fe:	4b04      	ldr	r3, [pc, #16]	; (8017910 <_fflush_r+0x74>)
 8017900:	429c      	cmp	r4, r3
 8017902:	bf08      	it	eq
 8017904:	68ec      	ldreq	r4, [r5, #12]
 8017906:	e7da      	b.n	80178be <_fflush_r+0x22>
 8017908:	0801c168 	.word	0x0801c168
 801790c:	0801c188 	.word	0x0801c188
 8017910:	0801c148 	.word	0x0801c148

08017914 <fiprintf>:
 8017914:	b40e      	push	{r1, r2, r3}
 8017916:	b503      	push	{r0, r1, lr}
 8017918:	4601      	mov	r1, r0
 801791a:	ab03      	add	r3, sp, #12
 801791c:	4805      	ldr	r0, [pc, #20]	; (8017934 <fiprintf+0x20>)
 801791e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017922:	6800      	ldr	r0, [r0, #0]
 8017924:	9301      	str	r3, [sp, #4]
 8017926:	f000 fa67 	bl	8017df8 <_vfiprintf_r>
 801792a:	b002      	add	sp, #8
 801792c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017930:	b003      	add	sp, #12
 8017932:	4770      	bx	lr
 8017934:	20000020 	.word	0x20000020

08017938 <_lseek_r>:
 8017938:	b538      	push	{r3, r4, r5, lr}
 801793a:	4d07      	ldr	r5, [pc, #28]	; (8017958 <_lseek_r+0x20>)
 801793c:	4604      	mov	r4, r0
 801793e:	4608      	mov	r0, r1
 8017940:	4611      	mov	r1, r2
 8017942:	2200      	movs	r2, #0
 8017944:	602a      	str	r2, [r5, #0]
 8017946:	461a      	mov	r2, r3
 8017948:	f7e9 f968 	bl	8000c1c <_lseek>
 801794c:	1c43      	adds	r3, r0, #1
 801794e:	d102      	bne.n	8017956 <_lseek_r+0x1e>
 8017950:	682b      	ldr	r3, [r5, #0]
 8017952:	b103      	cbz	r3, 8017956 <_lseek_r+0x1e>
 8017954:	6023      	str	r3, [r4, #0]
 8017956:	bd38      	pop	{r3, r4, r5, pc}
 8017958:	2000f020 	.word	0x2000f020

0801795c <__swhatbuf_r>:
 801795c:	b570      	push	{r4, r5, r6, lr}
 801795e:	460e      	mov	r6, r1
 8017960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017964:	2900      	cmp	r1, #0
 8017966:	b096      	sub	sp, #88	; 0x58
 8017968:	4614      	mov	r4, r2
 801796a:	461d      	mov	r5, r3
 801796c:	da07      	bge.n	801797e <__swhatbuf_r+0x22>
 801796e:	2300      	movs	r3, #0
 8017970:	602b      	str	r3, [r5, #0]
 8017972:	89b3      	ldrh	r3, [r6, #12]
 8017974:	061a      	lsls	r2, r3, #24
 8017976:	d410      	bmi.n	801799a <__swhatbuf_r+0x3e>
 8017978:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801797c:	e00e      	b.n	801799c <__swhatbuf_r+0x40>
 801797e:	466a      	mov	r2, sp
 8017980:	f000 fd18 	bl	80183b4 <_fstat_r>
 8017984:	2800      	cmp	r0, #0
 8017986:	dbf2      	blt.n	801796e <__swhatbuf_r+0x12>
 8017988:	9a01      	ldr	r2, [sp, #4]
 801798a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801798e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017992:	425a      	negs	r2, r3
 8017994:	415a      	adcs	r2, r3
 8017996:	602a      	str	r2, [r5, #0]
 8017998:	e7ee      	b.n	8017978 <__swhatbuf_r+0x1c>
 801799a:	2340      	movs	r3, #64	; 0x40
 801799c:	2000      	movs	r0, #0
 801799e:	6023      	str	r3, [r4, #0]
 80179a0:	b016      	add	sp, #88	; 0x58
 80179a2:	bd70      	pop	{r4, r5, r6, pc}

080179a4 <__smakebuf_r>:
 80179a4:	898b      	ldrh	r3, [r1, #12]
 80179a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80179a8:	079d      	lsls	r5, r3, #30
 80179aa:	4606      	mov	r6, r0
 80179ac:	460c      	mov	r4, r1
 80179ae:	d507      	bpl.n	80179c0 <__smakebuf_r+0x1c>
 80179b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80179b4:	6023      	str	r3, [r4, #0]
 80179b6:	6123      	str	r3, [r4, #16]
 80179b8:	2301      	movs	r3, #1
 80179ba:	6163      	str	r3, [r4, #20]
 80179bc:	b002      	add	sp, #8
 80179be:	bd70      	pop	{r4, r5, r6, pc}
 80179c0:	ab01      	add	r3, sp, #4
 80179c2:	466a      	mov	r2, sp
 80179c4:	f7ff ffca 	bl	801795c <__swhatbuf_r>
 80179c8:	9900      	ldr	r1, [sp, #0]
 80179ca:	4605      	mov	r5, r0
 80179cc:	4630      	mov	r0, r6
 80179ce:	f7ff fb91 	bl	80170f4 <_malloc_r>
 80179d2:	b948      	cbnz	r0, 80179e8 <__smakebuf_r+0x44>
 80179d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80179d8:	059a      	lsls	r2, r3, #22
 80179da:	d4ef      	bmi.n	80179bc <__smakebuf_r+0x18>
 80179dc:	f023 0303 	bic.w	r3, r3, #3
 80179e0:	f043 0302 	orr.w	r3, r3, #2
 80179e4:	81a3      	strh	r3, [r4, #12]
 80179e6:	e7e3      	b.n	80179b0 <__smakebuf_r+0xc>
 80179e8:	4b0d      	ldr	r3, [pc, #52]	; (8017a20 <__smakebuf_r+0x7c>)
 80179ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80179ec:	89a3      	ldrh	r3, [r4, #12]
 80179ee:	6020      	str	r0, [r4, #0]
 80179f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80179f4:	81a3      	strh	r3, [r4, #12]
 80179f6:	9b00      	ldr	r3, [sp, #0]
 80179f8:	6163      	str	r3, [r4, #20]
 80179fa:	9b01      	ldr	r3, [sp, #4]
 80179fc:	6120      	str	r0, [r4, #16]
 80179fe:	b15b      	cbz	r3, 8017a18 <__smakebuf_r+0x74>
 8017a00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017a04:	4630      	mov	r0, r6
 8017a06:	f000 fce7 	bl	80183d8 <_isatty_r>
 8017a0a:	b128      	cbz	r0, 8017a18 <__smakebuf_r+0x74>
 8017a0c:	89a3      	ldrh	r3, [r4, #12]
 8017a0e:	f023 0303 	bic.w	r3, r3, #3
 8017a12:	f043 0301 	orr.w	r3, r3, #1
 8017a16:	81a3      	strh	r3, [r4, #12]
 8017a18:	89a0      	ldrh	r0, [r4, #12]
 8017a1a:	4305      	orrs	r5, r0
 8017a1c:	81a5      	strh	r5, [r4, #12]
 8017a1e:	e7cd      	b.n	80179bc <__smakebuf_r+0x18>
 8017a20:	08016e85 	.word	0x08016e85

08017a24 <malloc>:
 8017a24:	4b02      	ldr	r3, [pc, #8]	; (8017a30 <malloc+0xc>)
 8017a26:	4601      	mov	r1, r0
 8017a28:	6818      	ldr	r0, [r3, #0]
 8017a2a:	f7ff bb63 	b.w	80170f4 <_malloc_r>
 8017a2e:	bf00      	nop
 8017a30:	20000020 	.word	0x20000020

08017a34 <__malloc_lock>:
 8017a34:	4801      	ldr	r0, [pc, #4]	; (8017a3c <__malloc_lock+0x8>)
 8017a36:	f7ff bb1c 	b.w	8017072 <__retarget_lock_acquire_recursive>
 8017a3a:	bf00      	nop
 8017a3c:	2000f02c 	.word	0x2000f02c

08017a40 <__malloc_unlock>:
 8017a40:	4801      	ldr	r0, [pc, #4]	; (8017a48 <__malloc_unlock+0x8>)
 8017a42:	f7ff bb17 	b.w	8017074 <__retarget_lock_release_recursive>
 8017a46:	bf00      	nop
 8017a48:	2000f02c 	.word	0x2000f02c

08017a4c <_free_r>:
 8017a4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017a4e:	2900      	cmp	r1, #0
 8017a50:	d048      	beq.n	8017ae4 <_free_r+0x98>
 8017a52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017a56:	9001      	str	r0, [sp, #4]
 8017a58:	2b00      	cmp	r3, #0
 8017a5a:	f1a1 0404 	sub.w	r4, r1, #4
 8017a5e:	bfb8      	it	lt
 8017a60:	18e4      	addlt	r4, r4, r3
 8017a62:	f7ff ffe7 	bl	8017a34 <__malloc_lock>
 8017a66:	4a20      	ldr	r2, [pc, #128]	; (8017ae8 <_free_r+0x9c>)
 8017a68:	9801      	ldr	r0, [sp, #4]
 8017a6a:	6813      	ldr	r3, [r2, #0]
 8017a6c:	4615      	mov	r5, r2
 8017a6e:	b933      	cbnz	r3, 8017a7e <_free_r+0x32>
 8017a70:	6063      	str	r3, [r4, #4]
 8017a72:	6014      	str	r4, [r2, #0]
 8017a74:	b003      	add	sp, #12
 8017a76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017a7a:	f7ff bfe1 	b.w	8017a40 <__malloc_unlock>
 8017a7e:	42a3      	cmp	r3, r4
 8017a80:	d90b      	bls.n	8017a9a <_free_r+0x4e>
 8017a82:	6821      	ldr	r1, [r4, #0]
 8017a84:	1862      	adds	r2, r4, r1
 8017a86:	4293      	cmp	r3, r2
 8017a88:	bf04      	itt	eq
 8017a8a:	681a      	ldreq	r2, [r3, #0]
 8017a8c:	685b      	ldreq	r3, [r3, #4]
 8017a8e:	6063      	str	r3, [r4, #4]
 8017a90:	bf04      	itt	eq
 8017a92:	1852      	addeq	r2, r2, r1
 8017a94:	6022      	streq	r2, [r4, #0]
 8017a96:	602c      	str	r4, [r5, #0]
 8017a98:	e7ec      	b.n	8017a74 <_free_r+0x28>
 8017a9a:	461a      	mov	r2, r3
 8017a9c:	685b      	ldr	r3, [r3, #4]
 8017a9e:	b10b      	cbz	r3, 8017aa4 <_free_r+0x58>
 8017aa0:	42a3      	cmp	r3, r4
 8017aa2:	d9fa      	bls.n	8017a9a <_free_r+0x4e>
 8017aa4:	6811      	ldr	r1, [r2, #0]
 8017aa6:	1855      	adds	r5, r2, r1
 8017aa8:	42a5      	cmp	r5, r4
 8017aaa:	d10b      	bne.n	8017ac4 <_free_r+0x78>
 8017aac:	6824      	ldr	r4, [r4, #0]
 8017aae:	4421      	add	r1, r4
 8017ab0:	1854      	adds	r4, r2, r1
 8017ab2:	42a3      	cmp	r3, r4
 8017ab4:	6011      	str	r1, [r2, #0]
 8017ab6:	d1dd      	bne.n	8017a74 <_free_r+0x28>
 8017ab8:	681c      	ldr	r4, [r3, #0]
 8017aba:	685b      	ldr	r3, [r3, #4]
 8017abc:	6053      	str	r3, [r2, #4]
 8017abe:	4421      	add	r1, r4
 8017ac0:	6011      	str	r1, [r2, #0]
 8017ac2:	e7d7      	b.n	8017a74 <_free_r+0x28>
 8017ac4:	d902      	bls.n	8017acc <_free_r+0x80>
 8017ac6:	230c      	movs	r3, #12
 8017ac8:	6003      	str	r3, [r0, #0]
 8017aca:	e7d3      	b.n	8017a74 <_free_r+0x28>
 8017acc:	6825      	ldr	r5, [r4, #0]
 8017ace:	1961      	adds	r1, r4, r5
 8017ad0:	428b      	cmp	r3, r1
 8017ad2:	bf04      	itt	eq
 8017ad4:	6819      	ldreq	r1, [r3, #0]
 8017ad6:	685b      	ldreq	r3, [r3, #4]
 8017ad8:	6063      	str	r3, [r4, #4]
 8017ada:	bf04      	itt	eq
 8017adc:	1949      	addeq	r1, r1, r5
 8017ade:	6021      	streq	r1, [r4, #0]
 8017ae0:	6054      	str	r4, [r2, #4]
 8017ae2:	e7c7      	b.n	8017a74 <_free_r+0x28>
 8017ae4:	b003      	add	sp, #12
 8017ae6:	bd30      	pop	{r4, r5, pc}
 8017ae8:	20008694 	.word	0x20008694

08017aec <__ssputs_r>:
 8017aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017af0:	688e      	ldr	r6, [r1, #8]
 8017af2:	429e      	cmp	r6, r3
 8017af4:	4682      	mov	sl, r0
 8017af6:	460c      	mov	r4, r1
 8017af8:	4690      	mov	r8, r2
 8017afa:	461f      	mov	r7, r3
 8017afc:	d838      	bhi.n	8017b70 <__ssputs_r+0x84>
 8017afe:	898a      	ldrh	r2, [r1, #12]
 8017b00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017b04:	d032      	beq.n	8017b6c <__ssputs_r+0x80>
 8017b06:	6825      	ldr	r5, [r4, #0]
 8017b08:	6909      	ldr	r1, [r1, #16]
 8017b0a:	eba5 0901 	sub.w	r9, r5, r1
 8017b0e:	6965      	ldr	r5, [r4, #20]
 8017b10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017b14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017b18:	3301      	adds	r3, #1
 8017b1a:	444b      	add	r3, r9
 8017b1c:	106d      	asrs	r5, r5, #1
 8017b1e:	429d      	cmp	r5, r3
 8017b20:	bf38      	it	cc
 8017b22:	461d      	movcc	r5, r3
 8017b24:	0553      	lsls	r3, r2, #21
 8017b26:	d531      	bpl.n	8017b8c <__ssputs_r+0xa0>
 8017b28:	4629      	mov	r1, r5
 8017b2a:	f7ff fae3 	bl	80170f4 <_malloc_r>
 8017b2e:	4606      	mov	r6, r0
 8017b30:	b950      	cbnz	r0, 8017b48 <__ssputs_r+0x5c>
 8017b32:	230c      	movs	r3, #12
 8017b34:	f8ca 3000 	str.w	r3, [sl]
 8017b38:	89a3      	ldrh	r3, [r4, #12]
 8017b3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017b3e:	81a3      	strh	r3, [r4, #12]
 8017b40:	f04f 30ff 	mov.w	r0, #4294967295
 8017b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b48:	6921      	ldr	r1, [r4, #16]
 8017b4a:	464a      	mov	r2, r9
 8017b4c:	f7ff faa1 	bl	8017092 <memcpy>
 8017b50:	89a3      	ldrh	r3, [r4, #12]
 8017b52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017b56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017b5a:	81a3      	strh	r3, [r4, #12]
 8017b5c:	6126      	str	r6, [r4, #16]
 8017b5e:	6165      	str	r5, [r4, #20]
 8017b60:	444e      	add	r6, r9
 8017b62:	eba5 0509 	sub.w	r5, r5, r9
 8017b66:	6026      	str	r6, [r4, #0]
 8017b68:	60a5      	str	r5, [r4, #8]
 8017b6a:	463e      	mov	r6, r7
 8017b6c:	42be      	cmp	r6, r7
 8017b6e:	d900      	bls.n	8017b72 <__ssputs_r+0x86>
 8017b70:	463e      	mov	r6, r7
 8017b72:	4632      	mov	r2, r6
 8017b74:	6820      	ldr	r0, [r4, #0]
 8017b76:	4641      	mov	r1, r8
 8017b78:	f7ff fa99 	bl	80170ae <memmove>
 8017b7c:	68a3      	ldr	r3, [r4, #8]
 8017b7e:	6822      	ldr	r2, [r4, #0]
 8017b80:	1b9b      	subs	r3, r3, r6
 8017b82:	4432      	add	r2, r6
 8017b84:	60a3      	str	r3, [r4, #8]
 8017b86:	6022      	str	r2, [r4, #0]
 8017b88:	2000      	movs	r0, #0
 8017b8a:	e7db      	b.n	8017b44 <__ssputs_r+0x58>
 8017b8c:	462a      	mov	r2, r5
 8017b8e:	f000 fc33 	bl	80183f8 <_realloc_r>
 8017b92:	4606      	mov	r6, r0
 8017b94:	2800      	cmp	r0, #0
 8017b96:	d1e1      	bne.n	8017b5c <__ssputs_r+0x70>
 8017b98:	6921      	ldr	r1, [r4, #16]
 8017b9a:	4650      	mov	r0, sl
 8017b9c:	f7ff ff56 	bl	8017a4c <_free_r>
 8017ba0:	e7c7      	b.n	8017b32 <__ssputs_r+0x46>
	...

08017ba4 <_svfiprintf_r>:
 8017ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ba8:	4698      	mov	r8, r3
 8017baa:	898b      	ldrh	r3, [r1, #12]
 8017bac:	061b      	lsls	r3, r3, #24
 8017bae:	b09d      	sub	sp, #116	; 0x74
 8017bb0:	4607      	mov	r7, r0
 8017bb2:	460d      	mov	r5, r1
 8017bb4:	4614      	mov	r4, r2
 8017bb6:	d50e      	bpl.n	8017bd6 <_svfiprintf_r+0x32>
 8017bb8:	690b      	ldr	r3, [r1, #16]
 8017bba:	b963      	cbnz	r3, 8017bd6 <_svfiprintf_r+0x32>
 8017bbc:	2140      	movs	r1, #64	; 0x40
 8017bbe:	f7ff fa99 	bl	80170f4 <_malloc_r>
 8017bc2:	6028      	str	r0, [r5, #0]
 8017bc4:	6128      	str	r0, [r5, #16]
 8017bc6:	b920      	cbnz	r0, 8017bd2 <_svfiprintf_r+0x2e>
 8017bc8:	230c      	movs	r3, #12
 8017bca:	603b      	str	r3, [r7, #0]
 8017bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8017bd0:	e0d1      	b.n	8017d76 <_svfiprintf_r+0x1d2>
 8017bd2:	2340      	movs	r3, #64	; 0x40
 8017bd4:	616b      	str	r3, [r5, #20]
 8017bd6:	2300      	movs	r3, #0
 8017bd8:	9309      	str	r3, [sp, #36]	; 0x24
 8017bda:	2320      	movs	r3, #32
 8017bdc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017be0:	f8cd 800c 	str.w	r8, [sp, #12]
 8017be4:	2330      	movs	r3, #48	; 0x30
 8017be6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8017d90 <_svfiprintf_r+0x1ec>
 8017bea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017bee:	f04f 0901 	mov.w	r9, #1
 8017bf2:	4623      	mov	r3, r4
 8017bf4:	469a      	mov	sl, r3
 8017bf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017bfa:	b10a      	cbz	r2, 8017c00 <_svfiprintf_r+0x5c>
 8017bfc:	2a25      	cmp	r2, #37	; 0x25
 8017bfe:	d1f9      	bne.n	8017bf4 <_svfiprintf_r+0x50>
 8017c00:	ebba 0b04 	subs.w	fp, sl, r4
 8017c04:	d00b      	beq.n	8017c1e <_svfiprintf_r+0x7a>
 8017c06:	465b      	mov	r3, fp
 8017c08:	4622      	mov	r2, r4
 8017c0a:	4629      	mov	r1, r5
 8017c0c:	4638      	mov	r0, r7
 8017c0e:	f7ff ff6d 	bl	8017aec <__ssputs_r>
 8017c12:	3001      	adds	r0, #1
 8017c14:	f000 80aa 	beq.w	8017d6c <_svfiprintf_r+0x1c8>
 8017c18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017c1a:	445a      	add	r2, fp
 8017c1c:	9209      	str	r2, [sp, #36]	; 0x24
 8017c1e:	f89a 3000 	ldrb.w	r3, [sl]
 8017c22:	2b00      	cmp	r3, #0
 8017c24:	f000 80a2 	beq.w	8017d6c <_svfiprintf_r+0x1c8>
 8017c28:	2300      	movs	r3, #0
 8017c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8017c2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017c32:	f10a 0a01 	add.w	sl, sl, #1
 8017c36:	9304      	str	r3, [sp, #16]
 8017c38:	9307      	str	r3, [sp, #28]
 8017c3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017c3e:	931a      	str	r3, [sp, #104]	; 0x68
 8017c40:	4654      	mov	r4, sl
 8017c42:	2205      	movs	r2, #5
 8017c44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c48:	4851      	ldr	r0, [pc, #324]	; (8017d90 <_svfiprintf_r+0x1ec>)
 8017c4a:	f7e8 fad9 	bl	8000200 <memchr>
 8017c4e:	9a04      	ldr	r2, [sp, #16]
 8017c50:	b9d8      	cbnz	r0, 8017c8a <_svfiprintf_r+0xe6>
 8017c52:	06d0      	lsls	r0, r2, #27
 8017c54:	bf44      	itt	mi
 8017c56:	2320      	movmi	r3, #32
 8017c58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017c5c:	0711      	lsls	r1, r2, #28
 8017c5e:	bf44      	itt	mi
 8017c60:	232b      	movmi	r3, #43	; 0x2b
 8017c62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017c66:	f89a 3000 	ldrb.w	r3, [sl]
 8017c6a:	2b2a      	cmp	r3, #42	; 0x2a
 8017c6c:	d015      	beq.n	8017c9a <_svfiprintf_r+0xf6>
 8017c6e:	9a07      	ldr	r2, [sp, #28]
 8017c70:	4654      	mov	r4, sl
 8017c72:	2000      	movs	r0, #0
 8017c74:	f04f 0c0a 	mov.w	ip, #10
 8017c78:	4621      	mov	r1, r4
 8017c7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017c7e:	3b30      	subs	r3, #48	; 0x30
 8017c80:	2b09      	cmp	r3, #9
 8017c82:	d94e      	bls.n	8017d22 <_svfiprintf_r+0x17e>
 8017c84:	b1b0      	cbz	r0, 8017cb4 <_svfiprintf_r+0x110>
 8017c86:	9207      	str	r2, [sp, #28]
 8017c88:	e014      	b.n	8017cb4 <_svfiprintf_r+0x110>
 8017c8a:	eba0 0308 	sub.w	r3, r0, r8
 8017c8e:	fa09 f303 	lsl.w	r3, r9, r3
 8017c92:	4313      	orrs	r3, r2
 8017c94:	9304      	str	r3, [sp, #16]
 8017c96:	46a2      	mov	sl, r4
 8017c98:	e7d2      	b.n	8017c40 <_svfiprintf_r+0x9c>
 8017c9a:	9b03      	ldr	r3, [sp, #12]
 8017c9c:	1d19      	adds	r1, r3, #4
 8017c9e:	681b      	ldr	r3, [r3, #0]
 8017ca0:	9103      	str	r1, [sp, #12]
 8017ca2:	2b00      	cmp	r3, #0
 8017ca4:	bfbb      	ittet	lt
 8017ca6:	425b      	neglt	r3, r3
 8017ca8:	f042 0202 	orrlt.w	r2, r2, #2
 8017cac:	9307      	strge	r3, [sp, #28]
 8017cae:	9307      	strlt	r3, [sp, #28]
 8017cb0:	bfb8      	it	lt
 8017cb2:	9204      	strlt	r2, [sp, #16]
 8017cb4:	7823      	ldrb	r3, [r4, #0]
 8017cb6:	2b2e      	cmp	r3, #46	; 0x2e
 8017cb8:	d10c      	bne.n	8017cd4 <_svfiprintf_r+0x130>
 8017cba:	7863      	ldrb	r3, [r4, #1]
 8017cbc:	2b2a      	cmp	r3, #42	; 0x2a
 8017cbe:	d135      	bne.n	8017d2c <_svfiprintf_r+0x188>
 8017cc0:	9b03      	ldr	r3, [sp, #12]
 8017cc2:	1d1a      	adds	r2, r3, #4
 8017cc4:	681b      	ldr	r3, [r3, #0]
 8017cc6:	9203      	str	r2, [sp, #12]
 8017cc8:	2b00      	cmp	r3, #0
 8017cca:	bfb8      	it	lt
 8017ccc:	f04f 33ff 	movlt.w	r3, #4294967295
 8017cd0:	3402      	adds	r4, #2
 8017cd2:	9305      	str	r3, [sp, #20]
 8017cd4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8017da0 <_svfiprintf_r+0x1fc>
 8017cd8:	7821      	ldrb	r1, [r4, #0]
 8017cda:	2203      	movs	r2, #3
 8017cdc:	4650      	mov	r0, sl
 8017cde:	f7e8 fa8f 	bl	8000200 <memchr>
 8017ce2:	b140      	cbz	r0, 8017cf6 <_svfiprintf_r+0x152>
 8017ce4:	2340      	movs	r3, #64	; 0x40
 8017ce6:	eba0 000a 	sub.w	r0, r0, sl
 8017cea:	fa03 f000 	lsl.w	r0, r3, r0
 8017cee:	9b04      	ldr	r3, [sp, #16]
 8017cf0:	4303      	orrs	r3, r0
 8017cf2:	3401      	adds	r4, #1
 8017cf4:	9304      	str	r3, [sp, #16]
 8017cf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017cfa:	4826      	ldr	r0, [pc, #152]	; (8017d94 <_svfiprintf_r+0x1f0>)
 8017cfc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017d00:	2206      	movs	r2, #6
 8017d02:	f7e8 fa7d 	bl	8000200 <memchr>
 8017d06:	2800      	cmp	r0, #0
 8017d08:	d038      	beq.n	8017d7c <_svfiprintf_r+0x1d8>
 8017d0a:	4b23      	ldr	r3, [pc, #140]	; (8017d98 <_svfiprintf_r+0x1f4>)
 8017d0c:	bb1b      	cbnz	r3, 8017d56 <_svfiprintf_r+0x1b2>
 8017d0e:	9b03      	ldr	r3, [sp, #12]
 8017d10:	3307      	adds	r3, #7
 8017d12:	f023 0307 	bic.w	r3, r3, #7
 8017d16:	3308      	adds	r3, #8
 8017d18:	9303      	str	r3, [sp, #12]
 8017d1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d1c:	4433      	add	r3, r6
 8017d1e:	9309      	str	r3, [sp, #36]	; 0x24
 8017d20:	e767      	b.n	8017bf2 <_svfiprintf_r+0x4e>
 8017d22:	fb0c 3202 	mla	r2, ip, r2, r3
 8017d26:	460c      	mov	r4, r1
 8017d28:	2001      	movs	r0, #1
 8017d2a:	e7a5      	b.n	8017c78 <_svfiprintf_r+0xd4>
 8017d2c:	2300      	movs	r3, #0
 8017d2e:	3401      	adds	r4, #1
 8017d30:	9305      	str	r3, [sp, #20]
 8017d32:	4619      	mov	r1, r3
 8017d34:	f04f 0c0a 	mov.w	ip, #10
 8017d38:	4620      	mov	r0, r4
 8017d3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017d3e:	3a30      	subs	r2, #48	; 0x30
 8017d40:	2a09      	cmp	r2, #9
 8017d42:	d903      	bls.n	8017d4c <_svfiprintf_r+0x1a8>
 8017d44:	2b00      	cmp	r3, #0
 8017d46:	d0c5      	beq.n	8017cd4 <_svfiprintf_r+0x130>
 8017d48:	9105      	str	r1, [sp, #20]
 8017d4a:	e7c3      	b.n	8017cd4 <_svfiprintf_r+0x130>
 8017d4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8017d50:	4604      	mov	r4, r0
 8017d52:	2301      	movs	r3, #1
 8017d54:	e7f0      	b.n	8017d38 <_svfiprintf_r+0x194>
 8017d56:	ab03      	add	r3, sp, #12
 8017d58:	9300      	str	r3, [sp, #0]
 8017d5a:	462a      	mov	r2, r5
 8017d5c:	4b0f      	ldr	r3, [pc, #60]	; (8017d9c <_svfiprintf_r+0x1f8>)
 8017d5e:	a904      	add	r1, sp, #16
 8017d60:	4638      	mov	r0, r7
 8017d62:	f3af 8000 	nop.w
 8017d66:	1c42      	adds	r2, r0, #1
 8017d68:	4606      	mov	r6, r0
 8017d6a:	d1d6      	bne.n	8017d1a <_svfiprintf_r+0x176>
 8017d6c:	89ab      	ldrh	r3, [r5, #12]
 8017d6e:	065b      	lsls	r3, r3, #25
 8017d70:	f53f af2c 	bmi.w	8017bcc <_svfiprintf_r+0x28>
 8017d74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017d76:	b01d      	add	sp, #116	; 0x74
 8017d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d7c:	ab03      	add	r3, sp, #12
 8017d7e:	9300      	str	r3, [sp, #0]
 8017d80:	462a      	mov	r2, r5
 8017d82:	4b06      	ldr	r3, [pc, #24]	; (8017d9c <_svfiprintf_r+0x1f8>)
 8017d84:	a904      	add	r1, sp, #16
 8017d86:	4638      	mov	r0, r7
 8017d88:	f000 f9d4 	bl	8018134 <_printf_i>
 8017d8c:	e7eb      	b.n	8017d66 <_svfiprintf_r+0x1c2>
 8017d8e:	bf00      	nop
 8017d90:	0801c25e 	.word	0x0801c25e
 8017d94:	0801c268 	.word	0x0801c268
 8017d98:	00000000 	.word	0x00000000
 8017d9c:	08017aed 	.word	0x08017aed
 8017da0:	0801c264 	.word	0x0801c264

08017da4 <__sfputc_r>:
 8017da4:	6893      	ldr	r3, [r2, #8]
 8017da6:	3b01      	subs	r3, #1
 8017da8:	2b00      	cmp	r3, #0
 8017daa:	b410      	push	{r4}
 8017dac:	6093      	str	r3, [r2, #8]
 8017dae:	da08      	bge.n	8017dc2 <__sfputc_r+0x1e>
 8017db0:	6994      	ldr	r4, [r2, #24]
 8017db2:	42a3      	cmp	r3, r4
 8017db4:	db01      	blt.n	8017dba <__sfputc_r+0x16>
 8017db6:	290a      	cmp	r1, #10
 8017db8:	d103      	bne.n	8017dc2 <__sfputc_r+0x1e>
 8017dba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017dbe:	f7ff bbe7 	b.w	8017590 <__swbuf_r>
 8017dc2:	6813      	ldr	r3, [r2, #0]
 8017dc4:	1c58      	adds	r0, r3, #1
 8017dc6:	6010      	str	r0, [r2, #0]
 8017dc8:	7019      	strb	r1, [r3, #0]
 8017dca:	4608      	mov	r0, r1
 8017dcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017dd0:	4770      	bx	lr

08017dd2 <__sfputs_r>:
 8017dd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017dd4:	4606      	mov	r6, r0
 8017dd6:	460f      	mov	r7, r1
 8017dd8:	4614      	mov	r4, r2
 8017dda:	18d5      	adds	r5, r2, r3
 8017ddc:	42ac      	cmp	r4, r5
 8017dde:	d101      	bne.n	8017de4 <__sfputs_r+0x12>
 8017de0:	2000      	movs	r0, #0
 8017de2:	e007      	b.n	8017df4 <__sfputs_r+0x22>
 8017de4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017de8:	463a      	mov	r2, r7
 8017dea:	4630      	mov	r0, r6
 8017dec:	f7ff ffda 	bl	8017da4 <__sfputc_r>
 8017df0:	1c43      	adds	r3, r0, #1
 8017df2:	d1f3      	bne.n	8017ddc <__sfputs_r+0xa>
 8017df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017df8 <_vfiprintf_r>:
 8017df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017dfc:	460d      	mov	r5, r1
 8017dfe:	b09d      	sub	sp, #116	; 0x74
 8017e00:	4614      	mov	r4, r2
 8017e02:	4698      	mov	r8, r3
 8017e04:	4606      	mov	r6, r0
 8017e06:	b118      	cbz	r0, 8017e10 <_vfiprintf_r+0x18>
 8017e08:	6983      	ldr	r3, [r0, #24]
 8017e0a:	b90b      	cbnz	r3, 8017e10 <_vfiprintf_r+0x18>
 8017e0c:	f7ff f86e 	bl	8016eec <__sinit>
 8017e10:	4b89      	ldr	r3, [pc, #548]	; (8018038 <_vfiprintf_r+0x240>)
 8017e12:	429d      	cmp	r5, r3
 8017e14:	d11b      	bne.n	8017e4e <_vfiprintf_r+0x56>
 8017e16:	6875      	ldr	r5, [r6, #4]
 8017e18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017e1a:	07d9      	lsls	r1, r3, #31
 8017e1c:	d405      	bmi.n	8017e2a <_vfiprintf_r+0x32>
 8017e1e:	89ab      	ldrh	r3, [r5, #12]
 8017e20:	059a      	lsls	r2, r3, #22
 8017e22:	d402      	bmi.n	8017e2a <_vfiprintf_r+0x32>
 8017e24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017e26:	f7ff f924 	bl	8017072 <__retarget_lock_acquire_recursive>
 8017e2a:	89ab      	ldrh	r3, [r5, #12]
 8017e2c:	071b      	lsls	r3, r3, #28
 8017e2e:	d501      	bpl.n	8017e34 <_vfiprintf_r+0x3c>
 8017e30:	692b      	ldr	r3, [r5, #16]
 8017e32:	b9eb      	cbnz	r3, 8017e70 <_vfiprintf_r+0x78>
 8017e34:	4629      	mov	r1, r5
 8017e36:	4630      	mov	r0, r6
 8017e38:	f7ff fc0e 	bl	8017658 <__swsetup_r>
 8017e3c:	b1c0      	cbz	r0, 8017e70 <_vfiprintf_r+0x78>
 8017e3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017e40:	07dc      	lsls	r4, r3, #31
 8017e42:	d50e      	bpl.n	8017e62 <_vfiprintf_r+0x6a>
 8017e44:	f04f 30ff 	mov.w	r0, #4294967295
 8017e48:	b01d      	add	sp, #116	; 0x74
 8017e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e4e:	4b7b      	ldr	r3, [pc, #492]	; (801803c <_vfiprintf_r+0x244>)
 8017e50:	429d      	cmp	r5, r3
 8017e52:	d101      	bne.n	8017e58 <_vfiprintf_r+0x60>
 8017e54:	68b5      	ldr	r5, [r6, #8]
 8017e56:	e7df      	b.n	8017e18 <_vfiprintf_r+0x20>
 8017e58:	4b79      	ldr	r3, [pc, #484]	; (8018040 <_vfiprintf_r+0x248>)
 8017e5a:	429d      	cmp	r5, r3
 8017e5c:	bf08      	it	eq
 8017e5e:	68f5      	ldreq	r5, [r6, #12]
 8017e60:	e7da      	b.n	8017e18 <_vfiprintf_r+0x20>
 8017e62:	89ab      	ldrh	r3, [r5, #12]
 8017e64:	0598      	lsls	r0, r3, #22
 8017e66:	d4ed      	bmi.n	8017e44 <_vfiprintf_r+0x4c>
 8017e68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017e6a:	f7ff f903 	bl	8017074 <__retarget_lock_release_recursive>
 8017e6e:	e7e9      	b.n	8017e44 <_vfiprintf_r+0x4c>
 8017e70:	2300      	movs	r3, #0
 8017e72:	9309      	str	r3, [sp, #36]	; 0x24
 8017e74:	2320      	movs	r3, #32
 8017e76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017e7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8017e7e:	2330      	movs	r3, #48	; 0x30
 8017e80:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8018044 <_vfiprintf_r+0x24c>
 8017e84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017e88:	f04f 0901 	mov.w	r9, #1
 8017e8c:	4623      	mov	r3, r4
 8017e8e:	469a      	mov	sl, r3
 8017e90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017e94:	b10a      	cbz	r2, 8017e9a <_vfiprintf_r+0xa2>
 8017e96:	2a25      	cmp	r2, #37	; 0x25
 8017e98:	d1f9      	bne.n	8017e8e <_vfiprintf_r+0x96>
 8017e9a:	ebba 0b04 	subs.w	fp, sl, r4
 8017e9e:	d00b      	beq.n	8017eb8 <_vfiprintf_r+0xc0>
 8017ea0:	465b      	mov	r3, fp
 8017ea2:	4622      	mov	r2, r4
 8017ea4:	4629      	mov	r1, r5
 8017ea6:	4630      	mov	r0, r6
 8017ea8:	f7ff ff93 	bl	8017dd2 <__sfputs_r>
 8017eac:	3001      	adds	r0, #1
 8017eae:	f000 80aa 	beq.w	8018006 <_vfiprintf_r+0x20e>
 8017eb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017eb4:	445a      	add	r2, fp
 8017eb6:	9209      	str	r2, [sp, #36]	; 0x24
 8017eb8:	f89a 3000 	ldrb.w	r3, [sl]
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	f000 80a2 	beq.w	8018006 <_vfiprintf_r+0x20e>
 8017ec2:	2300      	movs	r3, #0
 8017ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8017ec8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017ecc:	f10a 0a01 	add.w	sl, sl, #1
 8017ed0:	9304      	str	r3, [sp, #16]
 8017ed2:	9307      	str	r3, [sp, #28]
 8017ed4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017ed8:	931a      	str	r3, [sp, #104]	; 0x68
 8017eda:	4654      	mov	r4, sl
 8017edc:	2205      	movs	r2, #5
 8017ede:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ee2:	4858      	ldr	r0, [pc, #352]	; (8018044 <_vfiprintf_r+0x24c>)
 8017ee4:	f7e8 f98c 	bl	8000200 <memchr>
 8017ee8:	9a04      	ldr	r2, [sp, #16]
 8017eea:	b9d8      	cbnz	r0, 8017f24 <_vfiprintf_r+0x12c>
 8017eec:	06d1      	lsls	r1, r2, #27
 8017eee:	bf44      	itt	mi
 8017ef0:	2320      	movmi	r3, #32
 8017ef2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017ef6:	0713      	lsls	r3, r2, #28
 8017ef8:	bf44      	itt	mi
 8017efa:	232b      	movmi	r3, #43	; 0x2b
 8017efc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017f00:	f89a 3000 	ldrb.w	r3, [sl]
 8017f04:	2b2a      	cmp	r3, #42	; 0x2a
 8017f06:	d015      	beq.n	8017f34 <_vfiprintf_r+0x13c>
 8017f08:	9a07      	ldr	r2, [sp, #28]
 8017f0a:	4654      	mov	r4, sl
 8017f0c:	2000      	movs	r0, #0
 8017f0e:	f04f 0c0a 	mov.w	ip, #10
 8017f12:	4621      	mov	r1, r4
 8017f14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017f18:	3b30      	subs	r3, #48	; 0x30
 8017f1a:	2b09      	cmp	r3, #9
 8017f1c:	d94e      	bls.n	8017fbc <_vfiprintf_r+0x1c4>
 8017f1e:	b1b0      	cbz	r0, 8017f4e <_vfiprintf_r+0x156>
 8017f20:	9207      	str	r2, [sp, #28]
 8017f22:	e014      	b.n	8017f4e <_vfiprintf_r+0x156>
 8017f24:	eba0 0308 	sub.w	r3, r0, r8
 8017f28:	fa09 f303 	lsl.w	r3, r9, r3
 8017f2c:	4313      	orrs	r3, r2
 8017f2e:	9304      	str	r3, [sp, #16]
 8017f30:	46a2      	mov	sl, r4
 8017f32:	e7d2      	b.n	8017eda <_vfiprintf_r+0xe2>
 8017f34:	9b03      	ldr	r3, [sp, #12]
 8017f36:	1d19      	adds	r1, r3, #4
 8017f38:	681b      	ldr	r3, [r3, #0]
 8017f3a:	9103      	str	r1, [sp, #12]
 8017f3c:	2b00      	cmp	r3, #0
 8017f3e:	bfbb      	ittet	lt
 8017f40:	425b      	neglt	r3, r3
 8017f42:	f042 0202 	orrlt.w	r2, r2, #2
 8017f46:	9307      	strge	r3, [sp, #28]
 8017f48:	9307      	strlt	r3, [sp, #28]
 8017f4a:	bfb8      	it	lt
 8017f4c:	9204      	strlt	r2, [sp, #16]
 8017f4e:	7823      	ldrb	r3, [r4, #0]
 8017f50:	2b2e      	cmp	r3, #46	; 0x2e
 8017f52:	d10c      	bne.n	8017f6e <_vfiprintf_r+0x176>
 8017f54:	7863      	ldrb	r3, [r4, #1]
 8017f56:	2b2a      	cmp	r3, #42	; 0x2a
 8017f58:	d135      	bne.n	8017fc6 <_vfiprintf_r+0x1ce>
 8017f5a:	9b03      	ldr	r3, [sp, #12]
 8017f5c:	1d1a      	adds	r2, r3, #4
 8017f5e:	681b      	ldr	r3, [r3, #0]
 8017f60:	9203      	str	r2, [sp, #12]
 8017f62:	2b00      	cmp	r3, #0
 8017f64:	bfb8      	it	lt
 8017f66:	f04f 33ff 	movlt.w	r3, #4294967295
 8017f6a:	3402      	adds	r4, #2
 8017f6c:	9305      	str	r3, [sp, #20]
 8017f6e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8018054 <_vfiprintf_r+0x25c>
 8017f72:	7821      	ldrb	r1, [r4, #0]
 8017f74:	2203      	movs	r2, #3
 8017f76:	4650      	mov	r0, sl
 8017f78:	f7e8 f942 	bl	8000200 <memchr>
 8017f7c:	b140      	cbz	r0, 8017f90 <_vfiprintf_r+0x198>
 8017f7e:	2340      	movs	r3, #64	; 0x40
 8017f80:	eba0 000a 	sub.w	r0, r0, sl
 8017f84:	fa03 f000 	lsl.w	r0, r3, r0
 8017f88:	9b04      	ldr	r3, [sp, #16]
 8017f8a:	4303      	orrs	r3, r0
 8017f8c:	3401      	adds	r4, #1
 8017f8e:	9304      	str	r3, [sp, #16]
 8017f90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017f94:	482c      	ldr	r0, [pc, #176]	; (8018048 <_vfiprintf_r+0x250>)
 8017f96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017f9a:	2206      	movs	r2, #6
 8017f9c:	f7e8 f930 	bl	8000200 <memchr>
 8017fa0:	2800      	cmp	r0, #0
 8017fa2:	d03f      	beq.n	8018024 <_vfiprintf_r+0x22c>
 8017fa4:	4b29      	ldr	r3, [pc, #164]	; (801804c <_vfiprintf_r+0x254>)
 8017fa6:	bb1b      	cbnz	r3, 8017ff0 <_vfiprintf_r+0x1f8>
 8017fa8:	9b03      	ldr	r3, [sp, #12]
 8017faa:	3307      	adds	r3, #7
 8017fac:	f023 0307 	bic.w	r3, r3, #7
 8017fb0:	3308      	adds	r3, #8
 8017fb2:	9303      	str	r3, [sp, #12]
 8017fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017fb6:	443b      	add	r3, r7
 8017fb8:	9309      	str	r3, [sp, #36]	; 0x24
 8017fba:	e767      	b.n	8017e8c <_vfiprintf_r+0x94>
 8017fbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8017fc0:	460c      	mov	r4, r1
 8017fc2:	2001      	movs	r0, #1
 8017fc4:	e7a5      	b.n	8017f12 <_vfiprintf_r+0x11a>
 8017fc6:	2300      	movs	r3, #0
 8017fc8:	3401      	adds	r4, #1
 8017fca:	9305      	str	r3, [sp, #20]
 8017fcc:	4619      	mov	r1, r3
 8017fce:	f04f 0c0a 	mov.w	ip, #10
 8017fd2:	4620      	mov	r0, r4
 8017fd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017fd8:	3a30      	subs	r2, #48	; 0x30
 8017fda:	2a09      	cmp	r2, #9
 8017fdc:	d903      	bls.n	8017fe6 <_vfiprintf_r+0x1ee>
 8017fde:	2b00      	cmp	r3, #0
 8017fe0:	d0c5      	beq.n	8017f6e <_vfiprintf_r+0x176>
 8017fe2:	9105      	str	r1, [sp, #20]
 8017fe4:	e7c3      	b.n	8017f6e <_vfiprintf_r+0x176>
 8017fe6:	fb0c 2101 	mla	r1, ip, r1, r2
 8017fea:	4604      	mov	r4, r0
 8017fec:	2301      	movs	r3, #1
 8017fee:	e7f0      	b.n	8017fd2 <_vfiprintf_r+0x1da>
 8017ff0:	ab03      	add	r3, sp, #12
 8017ff2:	9300      	str	r3, [sp, #0]
 8017ff4:	462a      	mov	r2, r5
 8017ff6:	4b16      	ldr	r3, [pc, #88]	; (8018050 <_vfiprintf_r+0x258>)
 8017ff8:	a904      	add	r1, sp, #16
 8017ffa:	4630      	mov	r0, r6
 8017ffc:	f3af 8000 	nop.w
 8018000:	4607      	mov	r7, r0
 8018002:	1c78      	adds	r0, r7, #1
 8018004:	d1d6      	bne.n	8017fb4 <_vfiprintf_r+0x1bc>
 8018006:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018008:	07d9      	lsls	r1, r3, #31
 801800a:	d405      	bmi.n	8018018 <_vfiprintf_r+0x220>
 801800c:	89ab      	ldrh	r3, [r5, #12]
 801800e:	059a      	lsls	r2, r3, #22
 8018010:	d402      	bmi.n	8018018 <_vfiprintf_r+0x220>
 8018012:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018014:	f7ff f82e 	bl	8017074 <__retarget_lock_release_recursive>
 8018018:	89ab      	ldrh	r3, [r5, #12]
 801801a:	065b      	lsls	r3, r3, #25
 801801c:	f53f af12 	bmi.w	8017e44 <_vfiprintf_r+0x4c>
 8018020:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018022:	e711      	b.n	8017e48 <_vfiprintf_r+0x50>
 8018024:	ab03      	add	r3, sp, #12
 8018026:	9300      	str	r3, [sp, #0]
 8018028:	462a      	mov	r2, r5
 801802a:	4b09      	ldr	r3, [pc, #36]	; (8018050 <_vfiprintf_r+0x258>)
 801802c:	a904      	add	r1, sp, #16
 801802e:	4630      	mov	r0, r6
 8018030:	f000 f880 	bl	8018134 <_printf_i>
 8018034:	e7e4      	b.n	8018000 <_vfiprintf_r+0x208>
 8018036:	bf00      	nop
 8018038:	0801c168 	.word	0x0801c168
 801803c:	0801c188 	.word	0x0801c188
 8018040:	0801c148 	.word	0x0801c148
 8018044:	0801c25e 	.word	0x0801c25e
 8018048:	0801c268 	.word	0x0801c268
 801804c:	00000000 	.word	0x00000000
 8018050:	08017dd3 	.word	0x08017dd3
 8018054:	0801c264 	.word	0x0801c264

08018058 <_printf_common>:
 8018058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801805c:	4616      	mov	r6, r2
 801805e:	4699      	mov	r9, r3
 8018060:	688a      	ldr	r2, [r1, #8]
 8018062:	690b      	ldr	r3, [r1, #16]
 8018064:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018068:	4293      	cmp	r3, r2
 801806a:	bfb8      	it	lt
 801806c:	4613      	movlt	r3, r2
 801806e:	6033      	str	r3, [r6, #0]
 8018070:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018074:	4607      	mov	r7, r0
 8018076:	460c      	mov	r4, r1
 8018078:	b10a      	cbz	r2, 801807e <_printf_common+0x26>
 801807a:	3301      	adds	r3, #1
 801807c:	6033      	str	r3, [r6, #0]
 801807e:	6823      	ldr	r3, [r4, #0]
 8018080:	0699      	lsls	r1, r3, #26
 8018082:	bf42      	ittt	mi
 8018084:	6833      	ldrmi	r3, [r6, #0]
 8018086:	3302      	addmi	r3, #2
 8018088:	6033      	strmi	r3, [r6, #0]
 801808a:	6825      	ldr	r5, [r4, #0]
 801808c:	f015 0506 	ands.w	r5, r5, #6
 8018090:	d106      	bne.n	80180a0 <_printf_common+0x48>
 8018092:	f104 0a19 	add.w	sl, r4, #25
 8018096:	68e3      	ldr	r3, [r4, #12]
 8018098:	6832      	ldr	r2, [r6, #0]
 801809a:	1a9b      	subs	r3, r3, r2
 801809c:	42ab      	cmp	r3, r5
 801809e:	dc26      	bgt.n	80180ee <_printf_common+0x96>
 80180a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80180a4:	1e13      	subs	r3, r2, #0
 80180a6:	6822      	ldr	r2, [r4, #0]
 80180a8:	bf18      	it	ne
 80180aa:	2301      	movne	r3, #1
 80180ac:	0692      	lsls	r2, r2, #26
 80180ae:	d42b      	bmi.n	8018108 <_printf_common+0xb0>
 80180b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80180b4:	4649      	mov	r1, r9
 80180b6:	4638      	mov	r0, r7
 80180b8:	47c0      	blx	r8
 80180ba:	3001      	adds	r0, #1
 80180bc:	d01e      	beq.n	80180fc <_printf_common+0xa4>
 80180be:	6823      	ldr	r3, [r4, #0]
 80180c0:	68e5      	ldr	r5, [r4, #12]
 80180c2:	6832      	ldr	r2, [r6, #0]
 80180c4:	f003 0306 	and.w	r3, r3, #6
 80180c8:	2b04      	cmp	r3, #4
 80180ca:	bf08      	it	eq
 80180cc:	1aad      	subeq	r5, r5, r2
 80180ce:	68a3      	ldr	r3, [r4, #8]
 80180d0:	6922      	ldr	r2, [r4, #16]
 80180d2:	bf0c      	ite	eq
 80180d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80180d8:	2500      	movne	r5, #0
 80180da:	4293      	cmp	r3, r2
 80180dc:	bfc4      	itt	gt
 80180de:	1a9b      	subgt	r3, r3, r2
 80180e0:	18ed      	addgt	r5, r5, r3
 80180e2:	2600      	movs	r6, #0
 80180e4:	341a      	adds	r4, #26
 80180e6:	42b5      	cmp	r5, r6
 80180e8:	d11a      	bne.n	8018120 <_printf_common+0xc8>
 80180ea:	2000      	movs	r0, #0
 80180ec:	e008      	b.n	8018100 <_printf_common+0xa8>
 80180ee:	2301      	movs	r3, #1
 80180f0:	4652      	mov	r2, sl
 80180f2:	4649      	mov	r1, r9
 80180f4:	4638      	mov	r0, r7
 80180f6:	47c0      	blx	r8
 80180f8:	3001      	adds	r0, #1
 80180fa:	d103      	bne.n	8018104 <_printf_common+0xac>
 80180fc:	f04f 30ff 	mov.w	r0, #4294967295
 8018100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018104:	3501      	adds	r5, #1
 8018106:	e7c6      	b.n	8018096 <_printf_common+0x3e>
 8018108:	18e1      	adds	r1, r4, r3
 801810a:	1c5a      	adds	r2, r3, #1
 801810c:	2030      	movs	r0, #48	; 0x30
 801810e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018112:	4422      	add	r2, r4
 8018114:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018118:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801811c:	3302      	adds	r3, #2
 801811e:	e7c7      	b.n	80180b0 <_printf_common+0x58>
 8018120:	2301      	movs	r3, #1
 8018122:	4622      	mov	r2, r4
 8018124:	4649      	mov	r1, r9
 8018126:	4638      	mov	r0, r7
 8018128:	47c0      	blx	r8
 801812a:	3001      	adds	r0, #1
 801812c:	d0e6      	beq.n	80180fc <_printf_common+0xa4>
 801812e:	3601      	adds	r6, #1
 8018130:	e7d9      	b.n	80180e6 <_printf_common+0x8e>
	...

08018134 <_printf_i>:
 8018134:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018138:	460c      	mov	r4, r1
 801813a:	4691      	mov	r9, r2
 801813c:	7e27      	ldrb	r7, [r4, #24]
 801813e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018140:	2f78      	cmp	r7, #120	; 0x78
 8018142:	4680      	mov	r8, r0
 8018144:	469a      	mov	sl, r3
 8018146:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801814a:	d807      	bhi.n	801815c <_printf_i+0x28>
 801814c:	2f62      	cmp	r7, #98	; 0x62
 801814e:	d80a      	bhi.n	8018166 <_printf_i+0x32>
 8018150:	2f00      	cmp	r7, #0
 8018152:	f000 80d8 	beq.w	8018306 <_printf_i+0x1d2>
 8018156:	2f58      	cmp	r7, #88	; 0x58
 8018158:	f000 80a3 	beq.w	80182a2 <_printf_i+0x16e>
 801815c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8018160:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018164:	e03a      	b.n	80181dc <_printf_i+0xa8>
 8018166:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801816a:	2b15      	cmp	r3, #21
 801816c:	d8f6      	bhi.n	801815c <_printf_i+0x28>
 801816e:	a001      	add	r0, pc, #4	; (adr r0, 8018174 <_printf_i+0x40>)
 8018170:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8018174:	080181cd 	.word	0x080181cd
 8018178:	080181e1 	.word	0x080181e1
 801817c:	0801815d 	.word	0x0801815d
 8018180:	0801815d 	.word	0x0801815d
 8018184:	0801815d 	.word	0x0801815d
 8018188:	0801815d 	.word	0x0801815d
 801818c:	080181e1 	.word	0x080181e1
 8018190:	0801815d 	.word	0x0801815d
 8018194:	0801815d 	.word	0x0801815d
 8018198:	0801815d 	.word	0x0801815d
 801819c:	0801815d 	.word	0x0801815d
 80181a0:	080182ed 	.word	0x080182ed
 80181a4:	08018211 	.word	0x08018211
 80181a8:	080182cf 	.word	0x080182cf
 80181ac:	0801815d 	.word	0x0801815d
 80181b0:	0801815d 	.word	0x0801815d
 80181b4:	0801830f 	.word	0x0801830f
 80181b8:	0801815d 	.word	0x0801815d
 80181bc:	08018211 	.word	0x08018211
 80181c0:	0801815d 	.word	0x0801815d
 80181c4:	0801815d 	.word	0x0801815d
 80181c8:	080182d7 	.word	0x080182d7
 80181cc:	680b      	ldr	r3, [r1, #0]
 80181ce:	1d1a      	adds	r2, r3, #4
 80181d0:	681b      	ldr	r3, [r3, #0]
 80181d2:	600a      	str	r2, [r1, #0]
 80181d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80181d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80181dc:	2301      	movs	r3, #1
 80181de:	e0a3      	b.n	8018328 <_printf_i+0x1f4>
 80181e0:	6825      	ldr	r5, [r4, #0]
 80181e2:	6808      	ldr	r0, [r1, #0]
 80181e4:	062e      	lsls	r6, r5, #24
 80181e6:	f100 0304 	add.w	r3, r0, #4
 80181ea:	d50a      	bpl.n	8018202 <_printf_i+0xce>
 80181ec:	6805      	ldr	r5, [r0, #0]
 80181ee:	600b      	str	r3, [r1, #0]
 80181f0:	2d00      	cmp	r5, #0
 80181f2:	da03      	bge.n	80181fc <_printf_i+0xc8>
 80181f4:	232d      	movs	r3, #45	; 0x2d
 80181f6:	426d      	negs	r5, r5
 80181f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80181fc:	485e      	ldr	r0, [pc, #376]	; (8018378 <_printf_i+0x244>)
 80181fe:	230a      	movs	r3, #10
 8018200:	e019      	b.n	8018236 <_printf_i+0x102>
 8018202:	f015 0f40 	tst.w	r5, #64	; 0x40
 8018206:	6805      	ldr	r5, [r0, #0]
 8018208:	600b      	str	r3, [r1, #0]
 801820a:	bf18      	it	ne
 801820c:	b22d      	sxthne	r5, r5
 801820e:	e7ef      	b.n	80181f0 <_printf_i+0xbc>
 8018210:	680b      	ldr	r3, [r1, #0]
 8018212:	6825      	ldr	r5, [r4, #0]
 8018214:	1d18      	adds	r0, r3, #4
 8018216:	6008      	str	r0, [r1, #0]
 8018218:	0628      	lsls	r0, r5, #24
 801821a:	d501      	bpl.n	8018220 <_printf_i+0xec>
 801821c:	681d      	ldr	r5, [r3, #0]
 801821e:	e002      	b.n	8018226 <_printf_i+0xf2>
 8018220:	0669      	lsls	r1, r5, #25
 8018222:	d5fb      	bpl.n	801821c <_printf_i+0xe8>
 8018224:	881d      	ldrh	r5, [r3, #0]
 8018226:	4854      	ldr	r0, [pc, #336]	; (8018378 <_printf_i+0x244>)
 8018228:	2f6f      	cmp	r7, #111	; 0x6f
 801822a:	bf0c      	ite	eq
 801822c:	2308      	moveq	r3, #8
 801822e:	230a      	movne	r3, #10
 8018230:	2100      	movs	r1, #0
 8018232:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018236:	6866      	ldr	r6, [r4, #4]
 8018238:	60a6      	str	r6, [r4, #8]
 801823a:	2e00      	cmp	r6, #0
 801823c:	bfa2      	ittt	ge
 801823e:	6821      	ldrge	r1, [r4, #0]
 8018240:	f021 0104 	bicge.w	r1, r1, #4
 8018244:	6021      	strge	r1, [r4, #0]
 8018246:	b90d      	cbnz	r5, 801824c <_printf_i+0x118>
 8018248:	2e00      	cmp	r6, #0
 801824a:	d04d      	beq.n	80182e8 <_printf_i+0x1b4>
 801824c:	4616      	mov	r6, r2
 801824e:	fbb5 f1f3 	udiv	r1, r5, r3
 8018252:	fb03 5711 	mls	r7, r3, r1, r5
 8018256:	5dc7      	ldrb	r7, [r0, r7]
 8018258:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801825c:	462f      	mov	r7, r5
 801825e:	42bb      	cmp	r3, r7
 8018260:	460d      	mov	r5, r1
 8018262:	d9f4      	bls.n	801824e <_printf_i+0x11a>
 8018264:	2b08      	cmp	r3, #8
 8018266:	d10b      	bne.n	8018280 <_printf_i+0x14c>
 8018268:	6823      	ldr	r3, [r4, #0]
 801826a:	07df      	lsls	r7, r3, #31
 801826c:	d508      	bpl.n	8018280 <_printf_i+0x14c>
 801826e:	6923      	ldr	r3, [r4, #16]
 8018270:	6861      	ldr	r1, [r4, #4]
 8018272:	4299      	cmp	r1, r3
 8018274:	bfde      	ittt	le
 8018276:	2330      	movle	r3, #48	; 0x30
 8018278:	f806 3c01 	strble.w	r3, [r6, #-1]
 801827c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8018280:	1b92      	subs	r2, r2, r6
 8018282:	6122      	str	r2, [r4, #16]
 8018284:	f8cd a000 	str.w	sl, [sp]
 8018288:	464b      	mov	r3, r9
 801828a:	aa03      	add	r2, sp, #12
 801828c:	4621      	mov	r1, r4
 801828e:	4640      	mov	r0, r8
 8018290:	f7ff fee2 	bl	8018058 <_printf_common>
 8018294:	3001      	adds	r0, #1
 8018296:	d14c      	bne.n	8018332 <_printf_i+0x1fe>
 8018298:	f04f 30ff 	mov.w	r0, #4294967295
 801829c:	b004      	add	sp, #16
 801829e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80182a2:	4835      	ldr	r0, [pc, #212]	; (8018378 <_printf_i+0x244>)
 80182a4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80182a8:	6823      	ldr	r3, [r4, #0]
 80182aa:	680e      	ldr	r6, [r1, #0]
 80182ac:	061f      	lsls	r7, r3, #24
 80182ae:	f856 5b04 	ldr.w	r5, [r6], #4
 80182b2:	600e      	str	r6, [r1, #0]
 80182b4:	d514      	bpl.n	80182e0 <_printf_i+0x1ac>
 80182b6:	07d9      	lsls	r1, r3, #31
 80182b8:	bf44      	itt	mi
 80182ba:	f043 0320 	orrmi.w	r3, r3, #32
 80182be:	6023      	strmi	r3, [r4, #0]
 80182c0:	b91d      	cbnz	r5, 80182ca <_printf_i+0x196>
 80182c2:	6823      	ldr	r3, [r4, #0]
 80182c4:	f023 0320 	bic.w	r3, r3, #32
 80182c8:	6023      	str	r3, [r4, #0]
 80182ca:	2310      	movs	r3, #16
 80182cc:	e7b0      	b.n	8018230 <_printf_i+0xfc>
 80182ce:	6823      	ldr	r3, [r4, #0]
 80182d0:	f043 0320 	orr.w	r3, r3, #32
 80182d4:	6023      	str	r3, [r4, #0]
 80182d6:	2378      	movs	r3, #120	; 0x78
 80182d8:	4828      	ldr	r0, [pc, #160]	; (801837c <_printf_i+0x248>)
 80182da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80182de:	e7e3      	b.n	80182a8 <_printf_i+0x174>
 80182e0:	065e      	lsls	r6, r3, #25
 80182e2:	bf48      	it	mi
 80182e4:	b2ad      	uxthmi	r5, r5
 80182e6:	e7e6      	b.n	80182b6 <_printf_i+0x182>
 80182e8:	4616      	mov	r6, r2
 80182ea:	e7bb      	b.n	8018264 <_printf_i+0x130>
 80182ec:	680b      	ldr	r3, [r1, #0]
 80182ee:	6826      	ldr	r6, [r4, #0]
 80182f0:	6960      	ldr	r0, [r4, #20]
 80182f2:	1d1d      	adds	r5, r3, #4
 80182f4:	600d      	str	r5, [r1, #0]
 80182f6:	0635      	lsls	r5, r6, #24
 80182f8:	681b      	ldr	r3, [r3, #0]
 80182fa:	d501      	bpl.n	8018300 <_printf_i+0x1cc>
 80182fc:	6018      	str	r0, [r3, #0]
 80182fe:	e002      	b.n	8018306 <_printf_i+0x1d2>
 8018300:	0671      	lsls	r1, r6, #25
 8018302:	d5fb      	bpl.n	80182fc <_printf_i+0x1c8>
 8018304:	8018      	strh	r0, [r3, #0]
 8018306:	2300      	movs	r3, #0
 8018308:	6123      	str	r3, [r4, #16]
 801830a:	4616      	mov	r6, r2
 801830c:	e7ba      	b.n	8018284 <_printf_i+0x150>
 801830e:	680b      	ldr	r3, [r1, #0]
 8018310:	1d1a      	adds	r2, r3, #4
 8018312:	600a      	str	r2, [r1, #0]
 8018314:	681e      	ldr	r6, [r3, #0]
 8018316:	6862      	ldr	r2, [r4, #4]
 8018318:	2100      	movs	r1, #0
 801831a:	4630      	mov	r0, r6
 801831c:	f7e7 ff70 	bl	8000200 <memchr>
 8018320:	b108      	cbz	r0, 8018326 <_printf_i+0x1f2>
 8018322:	1b80      	subs	r0, r0, r6
 8018324:	6060      	str	r0, [r4, #4]
 8018326:	6863      	ldr	r3, [r4, #4]
 8018328:	6123      	str	r3, [r4, #16]
 801832a:	2300      	movs	r3, #0
 801832c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018330:	e7a8      	b.n	8018284 <_printf_i+0x150>
 8018332:	6923      	ldr	r3, [r4, #16]
 8018334:	4632      	mov	r2, r6
 8018336:	4649      	mov	r1, r9
 8018338:	4640      	mov	r0, r8
 801833a:	47d0      	blx	sl
 801833c:	3001      	adds	r0, #1
 801833e:	d0ab      	beq.n	8018298 <_printf_i+0x164>
 8018340:	6823      	ldr	r3, [r4, #0]
 8018342:	079b      	lsls	r3, r3, #30
 8018344:	d413      	bmi.n	801836e <_printf_i+0x23a>
 8018346:	68e0      	ldr	r0, [r4, #12]
 8018348:	9b03      	ldr	r3, [sp, #12]
 801834a:	4298      	cmp	r0, r3
 801834c:	bfb8      	it	lt
 801834e:	4618      	movlt	r0, r3
 8018350:	e7a4      	b.n	801829c <_printf_i+0x168>
 8018352:	2301      	movs	r3, #1
 8018354:	4632      	mov	r2, r6
 8018356:	4649      	mov	r1, r9
 8018358:	4640      	mov	r0, r8
 801835a:	47d0      	blx	sl
 801835c:	3001      	adds	r0, #1
 801835e:	d09b      	beq.n	8018298 <_printf_i+0x164>
 8018360:	3501      	adds	r5, #1
 8018362:	68e3      	ldr	r3, [r4, #12]
 8018364:	9903      	ldr	r1, [sp, #12]
 8018366:	1a5b      	subs	r3, r3, r1
 8018368:	42ab      	cmp	r3, r5
 801836a:	dcf2      	bgt.n	8018352 <_printf_i+0x21e>
 801836c:	e7eb      	b.n	8018346 <_printf_i+0x212>
 801836e:	2500      	movs	r5, #0
 8018370:	f104 0619 	add.w	r6, r4, #25
 8018374:	e7f5      	b.n	8018362 <_printf_i+0x22e>
 8018376:	bf00      	nop
 8018378:	0801c26f 	.word	0x0801c26f
 801837c:	0801c280 	.word	0x0801c280

08018380 <_read_r>:
 8018380:	b538      	push	{r3, r4, r5, lr}
 8018382:	4d07      	ldr	r5, [pc, #28]	; (80183a0 <_read_r+0x20>)
 8018384:	4604      	mov	r4, r0
 8018386:	4608      	mov	r0, r1
 8018388:	4611      	mov	r1, r2
 801838a:	2200      	movs	r2, #0
 801838c:	602a      	str	r2, [r5, #0]
 801838e:	461a      	mov	r2, r3
 8018390:	f7e8 fbe4 	bl	8000b5c <_read>
 8018394:	1c43      	adds	r3, r0, #1
 8018396:	d102      	bne.n	801839e <_read_r+0x1e>
 8018398:	682b      	ldr	r3, [r5, #0]
 801839a:	b103      	cbz	r3, 801839e <_read_r+0x1e>
 801839c:	6023      	str	r3, [r4, #0]
 801839e:	bd38      	pop	{r3, r4, r5, pc}
 80183a0:	2000f020 	.word	0x2000f020

080183a4 <abort>:
 80183a4:	b508      	push	{r3, lr}
 80183a6:	2006      	movs	r0, #6
 80183a8:	f000 f874 	bl	8018494 <raise>
 80183ac:	2001      	movs	r0, #1
 80183ae:	f7e8 fbcb 	bl	8000b48 <_exit>
	...

080183b4 <_fstat_r>:
 80183b4:	b538      	push	{r3, r4, r5, lr}
 80183b6:	4d07      	ldr	r5, [pc, #28]	; (80183d4 <_fstat_r+0x20>)
 80183b8:	2300      	movs	r3, #0
 80183ba:	4604      	mov	r4, r0
 80183bc:	4608      	mov	r0, r1
 80183be:	4611      	mov	r1, r2
 80183c0:	602b      	str	r3, [r5, #0]
 80183c2:	f7e8 fc10 	bl	8000be6 <_fstat>
 80183c6:	1c43      	adds	r3, r0, #1
 80183c8:	d102      	bne.n	80183d0 <_fstat_r+0x1c>
 80183ca:	682b      	ldr	r3, [r5, #0]
 80183cc:	b103      	cbz	r3, 80183d0 <_fstat_r+0x1c>
 80183ce:	6023      	str	r3, [r4, #0]
 80183d0:	bd38      	pop	{r3, r4, r5, pc}
 80183d2:	bf00      	nop
 80183d4:	2000f020 	.word	0x2000f020

080183d8 <_isatty_r>:
 80183d8:	b538      	push	{r3, r4, r5, lr}
 80183da:	4d06      	ldr	r5, [pc, #24]	; (80183f4 <_isatty_r+0x1c>)
 80183dc:	2300      	movs	r3, #0
 80183de:	4604      	mov	r4, r0
 80183e0:	4608      	mov	r0, r1
 80183e2:	602b      	str	r3, [r5, #0]
 80183e4:	f7e8 fc0f 	bl	8000c06 <_isatty>
 80183e8:	1c43      	adds	r3, r0, #1
 80183ea:	d102      	bne.n	80183f2 <_isatty_r+0x1a>
 80183ec:	682b      	ldr	r3, [r5, #0]
 80183ee:	b103      	cbz	r3, 80183f2 <_isatty_r+0x1a>
 80183f0:	6023      	str	r3, [r4, #0]
 80183f2:	bd38      	pop	{r3, r4, r5, pc}
 80183f4:	2000f020 	.word	0x2000f020

080183f8 <_realloc_r>:
 80183f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80183fa:	4607      	mov	r7, r0
 80183fc:	4614      	mov	r4, r2
 80183fe:	460e      	mov	r6, r1
 8018400:	b921      	cbnz	r1, 801840c <_realloc_r+0x14>
 8018402:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018406:	4611      	mov	r1, r2
 8018408:	f7fe be74 	b.w	80170f4 <_malloc_r>
 801840c:	b922      	cbnz	r2, 8018418 <_realloc_r+0x20>
 801840e:	f7ff fb1d 	bl	8017a4c <_free_r>
 8018412:	4625      	mov	r5, r4
 8018414:	4628      	mov	r0, r5
 8018416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018418:	f000 f858 	bl	80184cc <_malloc_usable_size_r>
 801841c:	42a0      	cmp	r0, r4
 801841e:	d20f      	bcs.n	8018440 <_realloc_r+0x48>
 8018420:	4621      	mov	r1, r4
 8018422:	4638      	mov	r0, r7
 8018424:	f7fe fe66 	bl	80170f4 <_malloc_r>
 8018428:	4605      	mov	r5, r0
 801842a:	2800      	cmp	r0, #0
 801842c:	d0f2      	beq.n	8018414 <_realloc_r+0x1c>
 801842e:	4631      	mov	r1, r6
 8018430:	4622      	mov	r2, r4
 8018432:	f7fe fe2e 	bl	8017092 <memcpy>
 8018436:	4631      	mov	r1, r6
 8018438:	4638      	mov	r0, r7
 801843a:	f7ff fb07 	bl	8017a4c <_free_r>
 801843e:	e7e9      	b.n	8018414 <_realloc_r+0x1c>
 8018440:	4635      	mov	r5, r6
 8018442:	e7e7      	b.n	8018414 <_realloc_r+0x1c>

08018444 <_raise_r>:
 8018444:	291f      	cmp	r1, #31
 8018446:	b538      	push	{r3, r4, r5, lr}
 8018448:	4604      	mov	r4, r0
 801844a:	460d      	mov	r5, r1
 801844c:	d904      	bls.n	8018458 <_raise_r+0x14>
 801844e:	2316      	movs	r3, #22
 8018450:	6003      	str	r3, [r0, #0]
 8018452:	f04f 30ff 	mov.w	r0, #4294967295
 8018456:	bd38      	pop	{r3, r4, r5, pc}
 8018458:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801845a:	b112      	cbz	r2, 8018462 <_raise_r+0x1e>
 801845c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018460:	b94b      	cbnz	r3, 8018476 <_raise_r+0x32>
 8018462:	4620      	mov	r0, r4
 8018464:	f000 f830 	bl	80184c8 <_getpid_r>
 8018468:	462a      	mov	r2, r5
 801846a:	4601      	mov	r1, r0
 801846c:	4620      	mov	r0, r4
 801846e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018472:	f000 b817 	b.w	80184a4 <_kill_r>
 8018476:	2b01      	cmp	r3, #1
 8018478:	d00a      	beq.n	8018490 <_raise_r+0x4c>
 801847a:	1c59      	adds	r1, r3, #1
 801847c:	d103      	bne.n	8018486 <_raise_r+0x42>
 801847e:	2316      	movs	r3, #22
 8018480:	6003      	str	r3, [r0, #0]
 8018482:	2001      	movs	r0, #1
 8018484:	e7e7      	b.n	8018456 <_raise_r+0x12>
 8018486:	2400      	movs	r4, #0
 8018488:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801848c:	4628      	mov	r0, r5
 801848e:	4798      	blx	r3
 8018490:	2000      	movs	r0, #0
 8018492:	e7e0      	b.n	8018456 <_raise_r+0x12>

08018494 <raise>:
 8018494:	4b02      	ldr	r3, [pc, #8]	; (80184a0 <raise+0xc>)
 8018496:	4601      	mov	r1, r0
 8018498:	6818      	ldr	r0, [r3, #0]
 801849a:	f7ff bfd3 	b.w	8018444 <_raise_r>
 801849e:	bf00      	nop
 80184a0:	20000020 	.word	0x20000020

080184a4 <_kill_r>:
 80184a4:	b538      	push	{r3, r4, r5, lr}
 80184a6:	4d07      	ldr	r5, [pc, #28]	; (80184c4 <_kill_r+0x20>)
 80184a8:	2300      	movs	r3, #0
 80184aa:	4604      	mov	r4, r0
 80184ac:	4608      	mov	r0, r1
 80184ae:	4611      	mov	r1, r2
 80184b0:	602b      	str	r3, [r5, #0]
 80184b2:	f7e8 fb37 	bl	8000b24 <_kill>
 80184b6:	1c43      	adds	r3, r0, #1
 80184b8:	d102      	bne.n	80184c0 <_kill_r+0x1c>
 80184ba:	682b      	ldr	r3, [r5, #0]
 80184bc:	b103      	cbz	r3, 80184c0 <_kill_r+0x1c>
 80184be:	6023      	str	r3, [r4, #0]
 80184c0:	bd38      	pop	{r3, r4, r5, pc}
 80184c2:	bf00      	nop
 80184c4:	2000f020 	.word	0x2000f020

080184c8 <_getpid_r>:
 80184c8:	f7e8 bb24 	b.w	8000b14 <_getpid>

080184cc <_malloc_usable_size_r>:
 80184cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80184d0:	1f18      	subs	r0, r3, #4
 80184d2:	2b00      	cmp	r3, #0
 80184d4:	bfbc      	itt	lt
 80184d6:	580b      	ldrlt	r3, [r1, r0]
 80184d8:	18c0      	addlt	r0, r0, r3
 80184da:	4770      	bx	lr

080184dc <_init>:
 80184dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184de:	bf00      	nop
 80184e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80184e2:	bc08      	pop	{r3}
 80184e4:	469e      	mov	lr, r3
 80184e6:	4770      	bx	lr

080184e8 <_fini>:
 80184e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184ea:	bf00      	nop
 80184ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80184ee:	bc08      	pop	{r3}
 80184f0:	469e      	mov	lr, r3
 80184f2:	4770      	bx	lr
