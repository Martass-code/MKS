
cviceni10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014528  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003198  080146d8  080146d8  000246d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017870  08017870  00030084  2**0
                  CONTENTS
  4 .ARM          00000008  08017870  08017870  00027870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017878  08017878  00030084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017878  08017878  00027878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801787c  0801787c  0002787c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08017880  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030084  2**0
                  CONTENTS
 10 .bss          0000ef2c  20000084  20000084  00030084  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000efb0  2000efb0  00030084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00042b3a  00000000  00000000  000300b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007ab0  00000000  00000000  00072bee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001fd0  00000000  00000000  0007a6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001ea0  00000000  00000000  0007c670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00033514  00000000  00000000  0007e510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00032265  00000000  00000000  000b1a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fffa5  00000000  00000000  000e3c89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001e3c2e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008be8  00000000  00000000  001e3c84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000084 	.word	0x20000084
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080146c0 	.word	0x080146c0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000088 	.word	0x20000088
 80001ec:	080146c0 	.word	0x080146c0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	4a07      	ldr	r2, [pc, #28]	; (80005b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000598:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	4a06      	ldr	r2, [pc, #24]	; (80005b8 <vApplicationGetIdleTaskMemory+0x30>)
 800059e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2280      	movs	r2, #128	; 0x80
 80005a4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005a6:	bf00      	nop
 80005a8:	3714      	adds	r7, #20
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	200000a0 	.word	0x200000a0
 80005b8:	20000154 	.word	0x20000154

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b5b0      	push	{r4, r5, r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c2:	f000 fba1 	bl	8000d08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c6:	f000 f81d 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ca:	f000 f8af 	bl	800072c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005ce:	f000 f883 	bl	80006d8 <MX_USART3_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 80005d2:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <main+0x40>)
 80005d4:	1d3c      	adds	r4, r7, #4
 80005d6:	461d      	mov	r5, r3
 80005d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	2100      	movs	r1, #0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f003 fe8c 	bl	8004306 <osThreadCreate>
 80005ee:	4603      	mov	r3, r0
 80005f0:	4a03      	ldr	r2, [pc, #12]	; (8000600 <main+0x44>)
 80005f2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005f4:	f003 fe70 	bl	80042d8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <main+0x3c>
 80005fa:	bf00      	nop
 80005fc:	080146e4 	.word	0x080146e4
 8000600:	20008658 	.word	0x20008658

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b094      	sub	sp, #80	; 0x50
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0320 	add.w	r3, r7, #32
 800060e:	2230      	movs	r2, #48	; 0x30
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f013 f8bf 	bl	8013796 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000628:	2300      	movs	r3, #0
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	4b28      	ldr	r3, [pc, #160]	; (80006d0 <SystemClock_Config+0xcc>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	4a27      	ldr	r2, [pc, #156]	; (80006d0 <SystemClock_Config+0xcc>)
 8000632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000636:	6413      	str	r3, [r2, #64]	; 0x40
 8000638:	4b25      	ldr	r3, [pc, #148]	; (80006d0 <SystemClock_Config+0xcc>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000644:	2300      	movs	r3, #0
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <SystemClock_Config+0xd0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a21      	ldr	r2, [pc, #132]	; (80006d4 <SystemClock_Config+0xd0>)
 800064e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <SystemClock_Config+0xd0>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000660:	2301      	movs	r3, #1
 8000662:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000664:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000668:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066a:	2302      	movs	r3, #2
 800066c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000672:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000674:	2304      	movs	r3, #4
 8000676:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000678:	23a8      	movs	r3, #168	; 0xa8
 800067a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800067c:	2302      	movs	r3, #2
 800067e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000680:	2307      	movs	r3, #7
 8000682:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	f107 0320 	add.w	r3, r7, #32
 8000688:	4618      	mov	r0, r3
 800068a:	f001 fff1 	bl	8002670 <HAL_RCC_OscConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000694:	f000 f934 	bl	8000900 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000698:	230f      	movs	r3, #15
 800069a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069c:	2302      	movs	r3, #2
 800069e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2105      	movs	r1, #5
 80006b6:	4618      	mov	r0, r3
 80006b8:	f002 fa52 	bl	8002b60 <HAL_RCC_ClockConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006c2:	f000 f91d 	bl	8000900 <Error_Handler>
  }
}
 80006c6:	bf00      	nop
 80006c8:	3750      	adds	r7, #80	; 0x50
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40007000 	.word	0x40007000

080006d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006dc:	4b11      	ldr	r3, [pc, #68]	; (8000724 <MX_USART3_UART_Init+0x4c>)
 80006de:	4a12      	ldr	r2, [pc, #72]	; (8000728 <MX_USART3_UART_Init+0x50>)
 80006e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006e2:	4b10      	ldr	r3, [pc, #64]	; (8000724 <MX_USART3_UART_Init+0x4c>)
 80006e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <MX_USART3_UART_Init+0x4c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006f0:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <MX_USART3_UART_Init+0x4c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006f6:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <MX_USART3_UART_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006fc:	4b09      	ldr	r3, [pc, #36]	; (8000724 <MX_USART3_UART_Init+0x4c>)
 80006fe:	220c      	movs	r2, #12
 8000700:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000702:	4b08      	ldr	r3, [pc, #32]	; (8000724 <MX_USART3_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <MX_USART3_UART_Init+0x4c>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800070e:	4805      	ldr	r0, [pc, #20]	; (8000724 <MX_USART3_UART_Init+0x4c>)
 8000710:	f002 ff02 	bl	8003518 <HAL_UART_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800071a:	f000 f8f1 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	2000865c 	.word	0x2000865c
 8000728:	40004800 	.word	0x40004800

0800072c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08c      	sub	sp, #48	; 0x30
 8000730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 031c 	add.w	r3, r7, #28
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	61bb      	str	r3, [r7, #24]
 8000746:	4b5b      	ldr	r3, [pc, #364]	; (80008b4 <MX_GPIO_Init+0x188>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a5a      	ldr	r2, [pc, #360]	; (80008b4 <MX_GPIO_Init+0x188>)
 800074c:	f043 0304 	orr.w	r3, r3, #4
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b58      	ldr	r3, [pc, #352]	; (80008b4 <MX_GPIO_Init+0x188>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0304 	and.w	r3, r3, #4
 800075a:	61bb      	str	r3, [r7, #24]
 800075c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
 8000762:	4b54      	ldr	r3, [pc, #336]	; (80008b4 <MX_GPIO_Init+0x188>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a53      	ldr	r2, [pc, #332]	; (80008b4 <MX_GPIO_Init+0x188>)
 8000768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b51      	ldr	r3, [pc, #324]	; (80008b4 <MX_GPIO_Init+0x188>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000776:	617b      	str	r3, [r7, #20]
 8000778:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
 800077e:	4b4d      	ldr	r3, [pc, #308]	; (80008b4 <MX_GPIO_Init+0x188>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a4c      	ldr	r2, [pc, #304]	; (80008b4 <MX_GPIO_Init+0x188>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b4a      	ldr	r3, [pc, #296]	; (80008b4 <MX_GPIO_Init+0x188>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	4b46      	ldr	r3, [pc, #280]	; (80008b4 <MX_GPIO_Init+0x188>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a45      	ldr	r2, [pc, #276]	; (80008b4 <MX_GPIO_Init+0x188>)
 80007a0:	f043 0302 	orr.w	r3, r3, #2
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b43      	ldr	r3, [pc, #268]	; (80008b4 <MX_GPIO_Init+0x188>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0302 	and.w	r3, r3, #2
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	4b3f      	ldr	r3, [pc, #252]	; (80008b4 <MX_GPIO_Init+0x188>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a3e      	ldr	r2, [pc, #248]	; (80008b4 <MX_GPIO_Init+0x188>)
 80007bc:	f043 0308 	orr.w	r3, r3, #8
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b3c      	ldr	r3, [pc, #240]	; (80008b4 <MX_GPIO_Init+0x188>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0308 	and.w	r3, r3, #8
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	4b38      	ldr	r3, [pc, #224]	; (80008b4 <MX_GPIO_Init+0x188>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a37      	ldr	r2, [pc, #220]	; (80008b4 <MX_GPIO_Init+0x188>)
 80007d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b35      	ldr	r3, [pc, #212]	; (80008b4 <MX_GPIO_Init+0x188>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	f244 0181 	movw	r1, #16513	; 0x4081
 80007f0:	4831      	ldr	r0, [pc, #196]	; (80008b8 <MX_GPIO_Init+0x18c>)
 80007f2:	f001 ff23 	bl	800263c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2140      	movs	r1, #64	; 0x40
 80007fa:	4830      	ldr	r0, [pc, #192]	; (80008bc <MX_GPIO_Init+0x190>)
 80007fc:	f001 ff1e 	bl	800263c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000800:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000806:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800080a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000810:	f107 031c 	add.w	r3, r7, #28
 8000814:	4619      	mov	r1, r3
 8000816:	482a      	ldr	r0, [pc, #168]	; (80008c0 <MX_GPIO_Init+0x194>)
 8000818:	f001 fd64 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800081c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	4820      	ldr	r0, [pc, #128]	; (80008b8 <MX_GPIO_Init+0x18c>)
 8000836:	f001 fd55 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800083a:	2340      	movs	r3, #64	; 0x40
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	481a      	ldr	r0, [pc, #104]	; (80008bc <MX_GPIO_Init+0x190>)
 8000852:	f001 fd47 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000856:	2380      	movs	r3, #128	; 0x80
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085a:	2300      	movs	r3, #0
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	4619      	mov	r1, r3
 8000868:	4814      	ldr	r0, [pc, #80]	; (80008bc <MX_GPIO_Init+0x190>)
 800086a:	f001 fd3b 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800086e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000874:	2302      	movs	r3, #2
 8000876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087c:	2303      	movs	r3, #3
 800087e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000880:	230a      	movs	r3, #10
 8000882:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000884:	f107 031c 	add.w	r3, r7, #28
 8000888:	4619      	mov	r1, r3
 800088a:	480e      	ldr	r0, [pc, #56]	; (80008c4 <MX_GPIO_Init+0x198>)
 800088c:	f001 fd2a 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000890:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000896:	2300      	movs	r3, #0
 8000898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	4807      	ldr	r0, [pc, #28]	; (80008c4 <MX_GPIO_Init+0x198>)
 80008a6:	f001 fd1d 	bl	80022e4 <HAL_GPIO_Init>

}
 80008aa:	bf00      	nop
 80008ac:	3730      	adds	r7, #48	; 0x30
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40023800 	.word	0x40023800
 80008b8:	40020400 	.word	0x40020400
 80008bc:	40021800 	.word	0x40021800
 80008c0:	40020800 	.word	0x40020800
 80008c4:	40020000 	.word	0x40020000

080008c8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80008d0:	f003 f838 	bl	8003944 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008d4:	2001      	movs	r0, #1
 80008d6:	f003 fd62 	bl	800439e <osDelay>
 80008da:	e7fb      	b.n	80008d4 <StartDefaultTask+0xc>

080008dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a04      	ldr	r2, [pc, #16]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d101      	bne.n	80008f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008ee:	f000 fa2d 	bl	8000d4c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40002000 	.word	0x40002000

08000900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000904:	b672      	cpsid	i
}
 8000906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000908:	e7fe      	b.n	8000908 <Error_Handler+0x8>
	...

0800090c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	4b12      	ldr	r3, [pc, #72]	; (8000960 <HAL_MspInit+0x54>)
 8000918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091a:	4a11      	ldr	r2, [pc, #68]	; (8000960 <HAL_MspInit+0x54>)
 800091c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000920:	6453      	str	r3, [r2, #68]	; 0x44
 8000922:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <HAL_MspInit+0x54>)
 8000924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	603b      	str	r3, [r7, #0]
 8000932:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <HAL_MspInit+0x54>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	4a0a      	ldr	r2, [pc, #40]	; (8000960 <HAL_MspInit+0x54>)
 8000938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800093c:	6413      	str	r3, [r2, #64]	; 0x40
 800093e:	4b08      	ldr	r3, [pc, #32]	; (8000960 <HAL_MspInit+0x54>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800094a:	2200      	movs	r2, #0
 800094c:	210f      	movs	r1, #15
 800094e:	f06f 0001 	mvn.w	r0, #1
 8000952:	f000 faf7 	bl	8000f44 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800

08000964 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08a      	sub	sp, #40	; 0x28
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a19      	ldr	r2, [pc, #100]	; (80009e8 <HAL_UART_MspInit+0x84>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d12c      	bne.n	80009e0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	613b      	str	r3, [r7, #16]
 800098a:	4b18      	ldr	r3, [pc, #96]	; (80009ec <HAL_UART_MspInit+0x88>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	4a17      	ldr	r2, [pc, #92]	; (80009ec <HAL_UART_MspInit+0x88>)
 8000990:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000994:	6413      	str	r3, [r2, #64]	; 0x40
 8000996:	4b15      	ldr	r3, [pc, #84]	; (80009ec <HAL_UART_MspInit+0x88>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	4b11      	ldr	r3, [pc, #68]	; (80009ec <HAL_UART_MspInit+0x88>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a10      	ldr	r2, [pc, #64]	; (80009ec <HAL_UART_MspInit+0x88>)
 80009ac:	f043 0308 	orr.w	r3, r3, #8
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <HAL_UART_MspInit+0x88>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0308 	and.w	r3, r3, #8
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c4:	2302      	movs	r3, #2
 80009c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009cc:	2303      	movs	r3, #3
 80009ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009d0:	2307      	movs	r3, #7
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	4619      	mov	r1, r3
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <HAL_UART_MspInit+0x8c>)
 80009dc:	f001 fc82 	bl	80022e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009e0:	bf00      	nop
 80009e2:	3728      	adds	r7, #40	; 0x28
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40004800 	.word	0x40004800
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40020c00 	.word	0x40020c00

080009f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08c      	sub	sp, #48	; 0x30
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8000a04:	2200      	movs	r2, #0
 8000a06:	6879      	ldr	r1, [r7, #4]
 8000a08:	202d      	movs	r0, #45	; 0x2d
 8000a0a:	f000 fa9b 	bl	8000f44 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000a0e:	202d      	movs	r0, #45	; 0x2d
 8000a10:	f000 fab4 	bl	8000f7c <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	4b1f      	ldr	r3, [pc, #124]	; (8000a98 <HAL_InitTick+0xa4>)
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1c:	4a1e      	ldr	r2, [pc, #120]	; (8000a98 <HAL_InitTick+0xa4>)
 8000a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a22:	6413      	str	r3, [r2, #64]	; 0x40
 8000a24:	4b1c      	ldr	r3, [pc, #112]	; (8000a98 <HAL_InitTick+0xa4>)
 8000a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a30:	f107 0210 	add.w	r2, r7, #16
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	4611      	mov	r1, r2
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f002 fa8c 	bl	8002f58 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a40:	f002 fa62 	bl	8002f08 <HAL_RCC_GetPCLK1Freq>
 8000a44:	4603      	mov	r3, r0
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a4c:	4a13      	ldr	r2, [pc, #76]	; (8000a9c <HAL_InitTick+0xa8>)
 8000a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a52:	0c9b      	lsrs	r3, r3, #18
 8000a54:	3b01      	subs	r3, #1
 8000a56:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000a58:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <HAL_InitTick+0xac>)
 8000a5a:	4a12      	ldr	r2, [pc, #72]	; (8000aa4 <HAL_InitTick+0xb0>)
 8000a5c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000a5e:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <HAL_InitTick+0xac>)
 8000a60:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a64:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000a66:	4a0e      	ldr	r2, [pc, #56]	; (8000aa0 <HAL_InitTick+0xac>)
 8000a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a6a:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <HAL_InitTick+0xac>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a72:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <HAL_InitTick+0xac>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8000a78:	4809      	ldr	r0, [pc, #36]	; (8000aa0 <HAL_InitTick+0xac>)
 8000a7a:	f002 fa9f 	bl	8002fbc <HAL_TIM_Base_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d104      	bne.n	8000a8e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8000a84:	4806      	ldr	r0, [pc, #24]	; (8000aa0 <HAL_InitTick+0xac>)
 8000a86:	f002 faf3 	bl	8003070 <HAL_TIM_Base_Start_IT>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	e000      	b.n	8000a90 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3730      	adds	r7, #48	; 0x30
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	431bde83 	.word	0x431bde83
 8000aa0:	200086a0 	.word	0x200086a0
 8000aa4:	40002000 	.word	0x40002000

08000aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <NMI_Handler+0x4>

08000aae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <HardFault_Handler+0x4>

08000ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <MemManage_Handler+0x4>

08000aba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000abe:	e7fe      	b.n	8000abe <BusFault_Handler+0x4>

08000ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <UsageFault_Handler+0x4>

08000ac6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000ad8:	4802      	ldr	r0, [pc, #8]	; (8000ae4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000ada:	f002 fb39 	bl	8003150 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200086a0 	.word	0x200086a0

08000ae8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000aec:	4802      	ldr	r0, [pc, #8]	; (8000af8 <ETH_IRQHandler+0x10>)
 8000aee:	f000 fe37 	bl	8001760 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	2000a008 	.word	0x2000a008

08000afc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
	return 1;
 8000b00:	2301      	movs	r3, #1
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <_kill>:

int _kill(int pid, int sig)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000b16:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <_kill+0x20>)
 8000b18:	2216      	movs	r2, #22
 8000b1a:	601a      	str	r2, [r3, #0]
	return -1;
 8000b1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	2000ef9c 	.word	0x2000ef9c

08000b30 <_exit>:

void _exit (int status)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000b38:	f04f 31ff 	mov.w	r1, #4294967295
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f7ff ffe5 	bl	8000b0c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000b42:	e7fe      	b.n	8000b42 <_exit+0x12>

08000b44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
 8000b54:	e00a      	b.n	8000b6c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b56:	f3af 8000 	nop.w
 8000b5a:	4601      	mov	r1, r0
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	1c5a      	adds	r2, r3, #1
 8000b60:	60ba      	str	r2, [r7, #8]
 8000b62:	b2ca      	uxtb	r2, r1
 8000b64:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	697a      	ldr	r2, [r7, #20]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	dbf0      	blt.n	8000b56 <_read+0x12>
	}

return len;
 8000b74:	687b      	ldr	r3, [r7, #4]
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3718      	adds	r7, #24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b086      	sub	sp, #24
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	60f8      	str	r0, [r7, #12]
 8000b86:	60b9      	str	r1, [r7, #8]
 8000b88:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]
 8000b8e:	e009      	b.n	8000ba4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	1c5a      	adds	r2, r3, #1
 8000b94:	60ba      	str	r2, [r7, #8]
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	617b      	str	r3, [r7, #20]
 8000ba4:	697a      	ldr	r2, [r7, #20]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	dbf1      	blt.n	8000b90 <_write+0x12>
	}
	return len;
 8000bac:	687b      	ldr	r3, [r7, #4]
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3718      	adds	r7, #24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <_close>:

int _close(int file)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	b083      	sub	sp, #12
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
	return -1;
 8000bbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b083      	sub	sp, #12
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
 8000bd6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bde:	605a      	str	r2, [r3, #4]
	return 0;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <_isatty>:

int _isatty(int file)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	b083      	sub	sp, #12
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
	return 1;
 8000bf6:	2301      	movs	r3, #1
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
	return 0;
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3714      	adds	r7, #20
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
	...

08000c20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b087      	sub	sp, #28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c28:	4a14      	ldr	r2, [pc, #80]	; (8000c7c <_sbrk+0x5c>)
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <_sbrk+0x60>)
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c34:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <_sbrk+0x64>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d102      	bne.n	8000c42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <_sbrk+0x64>)
 8000c3e:	4a12      	ldr	r2, [pc, #72]	; (8000c88 <_sbrk+0x68>)
 8000c40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <_sbrk+0x64>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d205      	bcs.n	8000c5c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000c50:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <_sbrk+0x6c>)
 8000c52:	220c      	movs	r2, #12
 8000c54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c56:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5a:	e009      	b.n	8000c70 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c5c:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <_sbrk+0x64>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c62:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <_sbrk+0x64>)
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4413      	add	r3, r2
 8000c6a:	4a06      	ldr	r2, [pc, #24]	; (8000c84 <_sbrk+0x64>)
 8000c6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	371c      	adds	r7, #28
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	20030000 	.word	0x20030000
 8000c80:	00000400 	.word	0x00000400
 8000c84:	20000354 	.word	0x20000354
 8000c88:	2000efb0 	.word	0x2000efb0
 8000c8c:	2000ef9c 	.word	0x2000ef9c

08000c90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <SystemInit+0x20>)
 8000c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c9a:	4a05      	ldr	r2, [pc, #20]	; (8000cb0 <SystemInit+0x20>)
 8000c9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000cb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cec <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cb8:	480d      	ldr	r0, [pc, #52]	; (8000cf0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cba:	490e      	ldr	r1, [pc, #56]	; (8000cf4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cbc:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc0:	e002      	b.n	8000cc8 <LoopCopyDataInit>

08000cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc6:	3304      	adds	r3, #4

08000cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ccc:	d3f9      	bcc.n	8000cc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cce:	4a0b      	ldr	r2, [pc, #44]	; (8000cfc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cd0:	4c0b      	ldr	r4, [pc, #44]	; (8000d00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd4:	e001      	b.n	8000cda <LoopFillZerobss>

08000cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd8:	3204      	adds	r2, #4

08000cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cdc:	d3fb      	bcc.n	8000cd6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cde:	f7ff ffd7 	bl	8000c90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ce2:	f012 fd15 	bl	8013710 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ce6:	f7ff fc69 	bl	80005bc <main>
  bx  lr    
 8000cea:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000cec:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000cf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf4:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000cf8:	08017880 	.word	0x08017880
  ldr r2, =_sbss
 8000cfc:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000d00:	2000efb0 	.word	0x2000efb0

08000d04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d04:	e7fe      	b.n	8000d04 <ADC_IRQHandler>
	...

08000d08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d0c:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <HAL_Init+0x40>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a0d      	ldr	r2, [pc, #52]	; (8000d48 <HAL_Init+0x40>)
 8000d12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d18:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <HAL_Init+0x40>)
 8000d1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d24:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <HAL_Init+0x40>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a07      	ldr	r2, [pc, #28]	; (8000d48 <HAL_Init+0x40>)
 8000d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d30:	2003      	movs	r0, #3
 8000d32:	f000 f8fc 	bl	8000f2e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d36:	200f      	movs	r0, #15
 8000d38:	f7ff fe5c 	bl	80009f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d3c:	f7ff fde6 	bl	800090c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40023c00 	.word	0x40023c00

08000d4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_IncTick+0x20>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	461a      	mov	r2, r3
 8000d56:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <HAL_IncTick+0x24>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	4a04      	ldr	r2, [pc, #16]	; (8000d70 <HAL_IncTick+0x24>)
 8000d5e:	6013      	str	r3, [r2, #0]
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	20000008 	.word	0x20000008
 8000d70:	200086e8 	.word	0x200086e8

08000d74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  return uwTick;
 8000d78:	4b03      	ldr	r3, [pc, #12]	; (8000d88 <HAL_GetTick+0x14>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	200086e8 	.word	0x200086e8

08000d8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d94:	f7ff ffee 	bl	8000d74 <HAL_GetTick>
 8000d98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000da4:	d005      	beq.n	8000db2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000da6:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <HAL_Delay+0x44>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	461a      	mov	r2, r3
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	4413      	add	r3, r2
 8000db0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000db2:	bf00      	nop
 8000db4:	f7ff ffde 	bl	8000d74 <HAL_GetTick>
 8000db8:	4602      	mov	r2, r0
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	68fa      	ldr	r2, [r7, #12]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d8f7      	bhi.n	8000db4 <HAL_Delay+0x28>
  {
  }
}
 8000dc4:	bf00      	nop
 8000dc6:	bf00      	nop
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000008 	.word	0x20000008

08000dd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de4:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <__NVIC_SetPriorityGrouping+0x44>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dea:	68ba      	ldr	r2, [r7, #8]
 8000dec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000df0:	4013      	ands	r3, r2
 8000df2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e06:	4a04      	ldr	r2, [pc, #16]	; (8000e18 <__NVIC_SetPriorityGrouping+0x44>)
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	60d3      	str	r3, [r2, #12]
}
 8000e0c:	bf00      	nop
 8000e0e:	3714      	adds	r7, #20
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e20:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <__NVIC_GetPriorityGrouping+0x18>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	0a1b      	lsrs	r3, r3, #8
 8000e26:	f003 0307 	and.w	r3, r3, #7
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	db0b      	blt.n	8000e62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	f003 021f 	and.w	r2, r3, #31
 8000e50:	4907      	ldr	r1, [pc, #28]	; (8000e70 <__NVIC_EnableIRQ+0x38>)
 8000e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e56:	095b      	lsrs	r3, r3, #5
 8000e58:	2001      	movs	r0, #1
 8000e5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e62:	bf00      	nop
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	e000e100 	.word	0xe000e100

08000e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	6039      	str	r1, [r7, #0]
 8000e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	db0a      	blt.n	8000e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	490c      	ldr	r1, [pc, #48]	; (8000ec0 <__NVIC_SetPriority+0x4c>)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	0112      	lsls	r2, r2, #4
 8000e94:	b2d2      	uxtb	r2, r2
 8000e96:	440b      	add	r3, r1
 8000e98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e9c:	e00a      	b.n	8000eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	4908      	ldr	r1, [pc, #32]	; (8000ec4 <__NVIC_SetPriority+0x50>)
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	f003 030f 	and.w	r3, r3, #15
 8000eaa:	3b04      	subs	r3, #4
 8000eac:	0112      	lsls	r2, r2, #4
 8000eae:	b2d2      	uxtb	r2, r2
 8000eb0:	440b      	add	r3, r1
 8000eb2:	761a      	strb	r2, [r3, #24]
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000e100 	.word	0xe000e100
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b089      	sub	sp, #36	; 0x24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	f1c3 0307 	rsb	r3, r3, #7
 8000ee2:	2b04      	cmp	r3, #4
 8000ee4:	bf28      	it	cs
 8000ee6:	2304      	movcs	r3, #4
 8000ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	3304      	adds	r3, #4
 8000eee:	2b06      	cmp	r3, #6
 8000ef0:	d902      	bls.n	8000ef8 <NVIC_EncodePriority+0x30>
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3b03      	subs	r3, #3
 8000ef6:	e000      	b.n	8000efa <NVIC_EncodePriority+0x32>
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000efc:	f04f 32ff 	mov.w	r2, #4294967295
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43da      	mvns	r2, r3
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	401a      	ands	r2, r3
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f10:	f04f 31ff 	mov.w	r1, #4294967295
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1a:	43d9      	mvns	r1, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	4313      	orrs	r3, r2
         );
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3724      	adds	r7, #36	; 0x24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff ff4c 	bl	8000dd4 <__NVIC_SetPriorityGrouping>
}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
 8000f50:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f56:	f7ff ff61 	bl	8000e1c <__NVIC_GetPriorityGrouping>
 8000f5a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	68b9      	ldr	r1, [r7, #8]
 8000f60:	6978      	ldr	r0, [r7, #20]
 8000f62:	f7ff ffb1 	bl	8000ec8 <NVIC_EncodePriority>
 8000f66:	4602      	mov	r2, r0
 8000f68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f6c:	4611      	mov	r1, r2
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff ff80 	bl	8000e74 <__NVIC_SetPriority>
}
 8000f74:	bf00      	nop
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff ff54 	bl	8000e38 <__NVIC_EnableIRQ>
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b088      	sub	sp, #32
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61fb      	str	r3, [r7, #28]
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8000fa8:	4baa      	ldr	r3, [pc, #680]	; (8001254 <HAL_ETH_Init+0x2bc>)
 8000faa:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d101      	bne.n	8000fbe <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e183      	b.n	80012c6 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d106      	bne.n	8000fd8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f002 fd26 	bl	8003a24 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	4b9e      	ldr	r3, [pc, #632]	; (8001258 <HAL_ETH_Init+0x2c0>)
 8000fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe0:	4a9d      	ldr	r2, [pc, #628]	; (8001258 <HAL_ETH_Init+0x2c0>)
 8000fe2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe6:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe8:	4b9b      	ldr	r3, [pc, #620]	; (8001258 <HAL_ETH_Init+0x2c0>)
 8000fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000ff4:	4b99      	ldr	r3, [pc, #612]	; (800125c <HAL_ETH_Init+0x2c4>)
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	4a98      	ldr	r2, [pc, #608]	; (800125c <HAL_ETH_Init+0x2c4>)
 8000ffa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000ffe:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001000:	4b96      	ldr	r3, [pc, #600]	; (800125c <HAL_ETH_Init+0x2c4>)
 8001002:	685a      	ldr	r2, [r3, #4]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a1b      	ldr	r3, [r3, #32]
 8001008:	4994      	ldr	r1, [pc, #592]	; (800125c <HAL_ETH_Init+0x2c4>)
 800100a:	4313      	orrs	r3, r2
 800100c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f042 0201 	orr.w	r2, r2, #1
 8001020:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001024:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001026:	f7ff fea5 	bl	8000d74 <HAL_GetTick>
 800102a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800102c:	e011      	b.n	8001052 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800102e:	f7ff fea1 	bl	8000d74 <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800103c:	d909      	bls.n	8001052 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2203      	movs	r2, #3
 8001042:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2200      	movs	r2, #0
 800104a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800104e:	2303      	movs	r3, #3
 8001050:	e139      	b.n	80012c6 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	2b00      	cmp	r3, #0
 8001062:	d1e4      	bne.n	800102e <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	691b      	ldr	r3, [r3, #16]
 800106a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	f023 031c 	bic.w	r3, r3, #28
 8001072:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001074:	f001 ff3c 	bl	8002ef0 <HAL_RCC_GetHCLKFreq>
 8001078:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	4a78      	ldr	r2, [pc, #480]	; (8001260 <HAL_ETH_Init+0x2c8>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d908      	bls.n	8001094 <HAL_ETH_Init+0xfc>
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	4a77      	ldr	r2, [pc, #476]	; (8001264 <HAL_ETH_Init+0x2cc>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d804      	bhi.n	8001094 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	f043 0308 	orr.w	r3, r3, #8
 8001090:	61fb      	str	r3, [r7, #28]
 8001092:	e027      	b.n	80010e4 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	4a73      	ldr	r2, [pc, #460]	; (8001264 <HAL_ETH_Init+0x2cc>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d908      	bls.n	80010ae <HAL_ETH_Init+0x116>
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	4a6d      	ldr	r2, [pc, #436]	; (8001254 <HAL_ETH_Init+0x2bc>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d204      	bcs.n	80010ae <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	f043 030c 	orr.w	r3, r3, #12
 80010aa:	61fb      	str	r3, [r7, #28]
 80010ac:	e01a      	b.n	80010e4 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	4a68      	ldr	r2, [pc, #416]	; (8001254 <HAL_ETH_Init+0x2bc>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d303      	bcc.n	80010be <HAL_ETH_Init+0x126>
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	4a6b      	ldr	r2, [pc, #428]	; (8001268 <HAL_ETH_Init+0x2d0>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d911      	bls.n	80010e2 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	4a69      	ldr	r2, [pc, #420]	; (8001268 <HAL_ETH_Init+0x2d0>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d908      	bls.n	80010d8 <HAL_ETH_Init+0x140>
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	4a68      	ldr	r2, [pc, #416]	; (800126c <HAL_ETH_Init+0x2d4>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d804      	bhi.n	80010d8 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	f043 0304 	orr.w	r3, r3, #4
 80010d4:	61fb      	str	r3, [r7, #28]
 80010d6:	e005      	b.n	80010e4 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	f043 0310 	orr.w	r3, r3, #16
 80010de:	61fb      	str	r3, [r7, #28]
 80010e0:	e000      	b.n	80010e4 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80010e2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	69fa      	ldr	r2, [r7, #28]
 80010ea:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80010ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010f0:	2100      	movs	r1, #0
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f000 fc17 	bl	8001926 <HAL_ETH_WritePHYRegister>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d00b      	beq.n	8001116 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001102:	6939      	ldr	r1, [r7, #16]
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f000 fdcd 	bl	8001ca4 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2201      	movs	r2, #1
 800110e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e0d7      	b.n	80012c6 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001116:	20ff      	movs	r0, #255	; 0xff
 8001118:	f7ff fe38 	bl	8000d8c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	f000 80a5 	beq.w	8001270 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001126:	f7ff fe25 	bl	8000d74 <HAL_GetTick>
 800112a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800112c:	f107 030c 	add.w	r3, r7, #12
 8001130:	461a      	mov	r2, r3
 8001132:	2101      	movs	r1, #1
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f000 fb8e 	bl	8001856 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800113a:	f7ff fe1b 	bl	8000d74 <HAL_GetTick>
 800113e:	4602      	mov	r2, r0
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	f241 3288 	movw	r2, #5000	; 0x1388
 8001148:	4293      	cmp	r3, r2
 800114a:	d90f      	bls.n	800116c <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001150:	6939      	ldr	r1, [r7, #16]
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f000 fda6 	bl	8001ca4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2201      	movs	r2, #1
 800115c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e0ac      	b.n	80012c6 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f003 0304 	and.w	r3, r3, #4
 8001172:	2b00      	cmp	r3, #0
 8001174:	d0da      	beq.n	800112c <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001176:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800117a:	2100      	movs	r1, #0
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f000 fbd2 	bl	8001926 <HAL_ETH_WritePHYRegister>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d00b      	beq.n	80011a0 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800118c:	6939      	ldr	r1, [r7, #16]
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f000 fd88 	bl	8001ca4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2201      	movs	r2, #1
 8001198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800119c:	2301      	movs	r3, #1
 800119e:	e092      	b.n	80012c6 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80011a0:	f7ff fde8 	bl	8000d74 <HAL_GetTick>
 80011a4:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80011a6:	f107 030c 	add.w	r3, r7, #12
 80011aa:	461a      	mov	r2, r3
 80011ac:	2101      	movs	r1, #1
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f000 fb51 	bl	8001856 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80011b4:	f7ff fdde 	bl	8000d74 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	f241 3288 	movw	r2, #5000	; 0x1388
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d90f      	bls.n	80011e6 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80011ca:	6939      	ldr	r1, [r7, #16]
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f000 fd69 	bl	8001ca4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2201      	movs	r2, #1
 80011d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e06f      	b.n	80012c6 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f003 0320 	and.w	r3, r3, #32
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d0da      	beq.n	80011a6 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80011f0:	f107 030c 	add.w	r3, r7, #12
 80011f4:	461a      	mov	r2, r3
 80011f6:	2110      	movs	r1, #16
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f000 fb2c 	bl	8001856 <HAL_ETH_ReadPHYRegister>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d00b      	beq.n	800121c <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001208:	6939      	ldr	r1, [r7, #16]
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f000 fd4a 	bl	8001ca4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2201      	movs	r2, #1
 8001214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001218:	2301      	movs	r3, #1
 800121a:	e054      	b.n	80012c6 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f003 0304 	and.w	r3, r3, #4
 8001222:	2b00      	cmp	r3, #0
 8001224:	d004      	beq.n	8001230 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	e002      	b.n	8001236 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d003      	beq.n	8001248 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
 8001246:	e035      	b.n	80012b4 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	e030      	b.n	80012b4 <HAL_ETH_Init+0x31c>
 8001252:	bf00      	nop
 8001254:	03938700 	.word	0x03938700
 8001258:	40023800 	.word	0x40023800
 800125c:	40013800 	.word	0x40013800
 8001260:	01312cff 	.word	0x01312cff
 8001264:	02160ebf 	.word	0x02160ebf
 8001268:	05f5e0ff 	.word	0x05f5e0ff
 800126c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	08db      	lsrs	r3, r3, #3
 8001276:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	085b      	lsrs	r3, r3, #1
 800127e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001280:	4313      	orrs	r3, r2
 8001282:	b29b      	uxth	r3, r3
 8001284:	461a      	mov	r2, r3
 8001286:	2100      	movs	r1, #0
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f000 fb4c 	bl	8001926 <HAL_ETH_WritePHYRegister>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d00b      	beq.n	80012ac <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001298:	6939      	ldr	r1, [r7, #16]
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f000 fd02 	bl	8001ca4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2201      	movs	r2, #1
 80012a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e00c      	b.n	80012c6 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80012ac:	f640 70ff 	movw	r0, #4095	; 0xfff
 80012b0:	f7ff fd6c 	bl	8000d8c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80012b4:	6939      	ldr	r1, [r7, #16]
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f000 fcf4 	bl	8001ca4 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2201      	movs	r2, #1
 80012c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3720      	adds	r7, #32
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop

080012d0 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b087      	sub	sp, #28
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
 80012dc:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d101      	bne.n	80012f0 <HAL_ETH_DMATxDescListInit+0x20>
 80012ec:	2302      	movs	r3, #2
 80012ee:	e052      	b.n	8001396 <HAL_ETH_DMATxDescListInit+0xc6>
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2201      	movs	r2, #1
 80012f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	2202      	movs	r2, #2
 80012fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	68ba      	ldr	r2, [r7, #8]
 8001304:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8001306:	2300      	movs	r3, #0
 8001308:	617b      	str	r3, [r7, #20]
 800130a:	e030      	b.n	800136e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	015b      	lsls	r3, r3, #5
 8001310:	68ba      	ldr	r2, [r7, #8]
 8001312:	4413      	add	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800131c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001324:	fb02 f303 	mul.w	r3, r2, r3
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	4413      	add	r3, r2
 800132c:	461a      	mov	r2, r3
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d105      	bne.n	8001346 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	3b01      	subs	r3, #1
 800134a:	697a      	ldr	r2, [r7, #20]
 800134c:	429a      	cmp	r2, r3
 800134e:	d208      	bcs.n	8001362 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	3301      	adds	r3, #1
 8001354:	015b      	lsls	r3, r3, #5
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	4413      	add	r3, r2
 800135a:	461a      	mov	r2, r3
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	60da      	str	r2, [r3, #12]
 8001360:	e002      	b.n	8001368 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001362:	68ba      	ldr	r2, [r7, #8]
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	3301      	adds	r3, #1
 800136c:	617b      	str	r3, [r7, #20]
 800136e:	697a      	ldr	r2, [r7, #20]
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	429a      	cmp	r2, r3
 8001374:	d3ca      	bcc.n	800130c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	68ba      	ldr	r2, [r7, #8]
 800137c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001380:	3310      	adds	r3, #16
 8001382:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	2201      	movs	r2, #1
 8001388:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	2200      	movs	r2, #0
 8001390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	371c      	adds	r7, #28
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b087      	sub	sp, #28
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	60f8      	str	r0, [r7, #12]
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	607a      	str	r2, [r7, #4]
 80013ae:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d101      	bne.n	80013c2 <HAL_ETH_DMARxDescListInit+0x20>
 80013be:	2302      	movs	r3, #2
 80013c0:	e056      	b.n	8001470 <HAL_ETH_DMARxDescListInit+0xce>
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2201      	movs	r2, #1
 80013c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2202      	movs	r2, #2
 80013ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	68ba      	ldr	r2, [r7, #8]
 80013d6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
 80013dc:	e034      	b.n	8001448 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	015b      	lsls	r3, r3, #5
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	4413      	add	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80013ee:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80013f6:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80013fe:	fb02 f303 	mul.w	r3, r2, r3
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	461a      	mov	r2, r3
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d105      	bne.n	8001420 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	3b01      	subs	r3, #1
 8001424:	697a      	ldr	r2, [r7, #20]
 8001426:	429a      	cmp	r2, r3
 8001428:	d208      	bcs.n	800143c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	3301      	adds	r3, #1
 800142e:	015b      	lsls	r3, r3, #5
 8001430:	68ba      	ldr	r2, [r7, #8]
 8001432:	4413      	add	r3, r2
 8001434:	461a      	mov	r2, r3
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	e002      	b.n	8001442 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800143c:	68ba      	ldr	r2, [r7, #8]
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	3301      	adds	r3, #1
 8001446:	617b      	str	r3, [r7, #20]
 8001448:	697a      	ldr	r2, [r7, #20]
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	429a      	cmp	r2, r3
 800144e:	d3c6      	bcc.n	80013de <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	68ba      	ldr	r2, [r7, #8]
 8001456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800145a:	330c      	adds	r3, #12
 800145c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2201      	movs	r2, #1
 8001462:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2200      	movs	r2, #0
 800146a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800146e:	2300      	movs	r3, #0
}
 8001470:	4618      	mov	r0, r3
 8001472:	371c      	adds	r7, #28
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800147c:	b480      	push	{r7}
 800147e:	b087      	sub	sp, #28
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001486:	2300      	movs	r3, #0
 8001488:	617b      	str	r3, [r7, #20]
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001498:	2b01      	cmp	r3, #1
 800149a:	d101      	bne.n	80014a0 <HAL_ETH_TransmitFrame+0x24>
 800149c:	2302      	movs	r3, #2
 800149e:	e0cd      	b.n	800163c <HAL_ETH_TransmitFrame+0x1c0>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2201      	movs	r2, #1
 80014a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2202      	movs	r2, #2
 80014ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d109      	bne.n	80014ca <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2201      	movs	r2, #1
 80014ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80014c6:	2301      	movs	r3, #1
 80014c8:	e0b8      	b.n	800163c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	da09      	bge.n	80014e8 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2212      	movs	r2, #18
 80014d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e0a9      	b.n	800163c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d915      	bls.n	800151e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	4a54      	ldr	r2, [pc, #336]	; (8001648 <HAL_ETH_TransmitFrame+0x1cc>)
 80014f6:	fba2 2303 	umull	r2, r3, r2, r3
 80014fa:	0a9b      	lsrs	r3, r3, #10
 80014fc:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80014fe:	683a      	ldr	r2, [r7, #0]
 8001500:	4b51      	ldr	r3, [pc, #324]	; (8001648 <HAL_ETH_TransmitFrame+0x1cc>)
 8001502:	fba3 1302 	umull	r1, r3, r3, r2
 8001506:	0a9b      	lsrs	r3, r3, #10
 8001508:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800150c:	fb01 f303 	mul.w	r3, r1, r3
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d005      	beq.n	8001522 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	3301      	adds	r3, #1
 800151a:	617b      	str	r3, [r7, #20]
 800151c:	e001      	b.n	8001522 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 800151e:	2301      	movs	r3, #1
 8001520:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d11c      	bne.n	8001562 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001532:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001536:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001542:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800154e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001552:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	461a      	mov	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001560:	e04b      	b.n	80015fa <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	e044      	b.n	80015f2 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001572:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001576:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d107      	bne.n	800158e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001588:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800158c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001592:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001596:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	3b01      	subs	r3, #1
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d116      	bne.n	80015d0 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ac:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80015b0:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	4a25      	ldr	r2, [pc, #148]	; (800164c <HAL_ETH_TransmitFrame+0x1d0>)
 80015b6:	fb02 f203 	mul.w	r2, r2, r3
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	4413      	add	r3, r2
 80015be:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80015c2:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c8:	68fa      	ldr	r2, [r7, #12]
 80015ca:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80015ce:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015da:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80015de:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	461a      	mov	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	3301      	adds	r3, #1
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d3b6      	bcc.n	8001568 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001602:	3314      	adds	r3, #20
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0304 	and.w	r3, r3, #4
 800160a:	2b00      	cmp	r3, #0
 800160c:	d00d      	beq.n	800162a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001616:	3314      	adds	r3, #20
 8001618:	2204      	movs	r2, #4
 800161a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001624:	3304      	adds	r3, #4
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2201      	movs	r2, #1
 800162e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	371c      	adds	r7, #28
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	ac02b00b 	.word	0xac02b00b
 800164c:	fffffa0c 	.word	0xfffffa0c

08001650 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8001658:	2300      	movs	r3, #0
 800165a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001662:	2b01      	cmp	r3, #1
 8001664:	d101      	bne.n	800166a <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001666:	2302      	movs	r3, #2
 8001668:	e074      	b.n	8001754 <HAL_ETH_GetReceivedFrame_IT+0x104>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2201      	movs	r2, #1
 800166e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2202      	movs	r2, #2
 8001676:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800167a:	e05a      	b.n	8001732 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	3301      	adds	r3, #1
 8001680:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800168c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001690:	d10d      	bne.n	80016ae <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2201      	movs	r2, #1
 800169e:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	461a      	mov	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	629a      	str	r2, [r3, #40]	; 0x28
 80016ac:	e041      	b.n	8001732 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d10b      	bne.n	80016d4 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016c0:	1c5a      	adds	r2, r3, #1
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	461a      	mov	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	629a      	str	r2, [r3, #40]	; 0x28
 80016d2:	e02e      	b.n	8001732 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016e0:	1c5a      	adds	r2, r3, #1
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d103      	bne.n	80016f6 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	0c1b      	lsrs	r3, r3, #16
 80016fe:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001702:	1f1a      	subs	r2, r3, #4
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170c:	689a      	ldr	r2, [r3, #8]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	461a      	mov	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2201      	movs	r2, #1
 8001722:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 800172e:	2300      	movs	r3, #0
 8001730:	e010      	b.n	8001754 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	db02      	blt.n	8001742 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2b03      	cmp	r3, #3
 8001740:	d99c      	bls.n	800167c <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2201      	movs	r2, #1
 8001746:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
}
 8001754:	4618      	mov	r0, r3
 8001756:	3714      	adds	r7, #20
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001770:	3314      	adds	r3, #20
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001778:	2b40      	cmp	r3, #64	; 0x40
 800177a:	d112      	bne.n	80017a2 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f002 fa1f 	bl	8003bc0 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800178a:	3314      	adds	r3, #20
 800178c:	2240      	movs	r2, #64	; 0x40
 800178e:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2201      	movs	r2, #1
 8001794:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80017a0:	e01b      	b.n	80017da <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017aa:	3314      	adds	r3, #20
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d111      	bne.n	80017da <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 f839 	bl	800182e <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017c4:	3314      	adds	r3, #20
 80017c6:	2201      	movs	r2, #1
 80017c8:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2201      	movs	r2, #1
 80017ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017e2:	3314      	adds	r3, #20
 80017e4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017e8:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017f2:	3314      	adds	r3, #20
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017fe:	d112      	bne.n	8001826 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f000 f81e 	bl	8001842 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800180e:	3314      	adds	r3, #20
 8001810:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001814:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2201      	movs	r2, #1
 800181a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b086      	sub	sp, #24
 800185a:	af00      	add	r7, sp, #0
 800185c:	60f8      	str	r0, [r7, #12]
 800185e:	460b      	mov	r3, r1
 8001860:	607a      	str	r2, [r7, #4]
 8001862:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001868:	2300      	movs	r3, #0
 800186a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001872:	b2db      	uxtb	r3, r3
 8001874:	2b82      	cmp	r3, #130	; 0x82
 8001876:	d101      	bne.n	800187c <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001878:	2302      	movs	r3, #2
 800187a:	e050      	b.n	800191e <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2282      	movs	r2, #130	; 0x82
 8001880:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	f003 031c 	and.w	r3, r3, #28
 8001892:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	8a1b      	ldrh	r3, [r3, #16]
 8001898:	02db      	lsls	r3, r3, #11
 800189a:	b29b      	uxth	r3, r3
 800189c:	697a      	ldr	r2, [r7, #20]
 800189e:	4313      	orrs	r3, r2
 80018a0:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80018a2:	897b      	ldrh	r3, [r7, #10]
 80018a4:	019b      	lsls	r3, r3, #6
 80018a6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80018aa:	697a      	ldr	r2, [r7, #20]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	f023 0302 	bic.w	r3, r3, #2
 80018b6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	697a      	ldr	r2, [r7, #20]
 80018c6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80018c8:	f7ff fa54 	bl	8000d74 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80018ce:	e015      	b.n	80018fc <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80018d0:	f7ff fa50 	bl	8000d74 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018de:	d309      	bcc.n	80018f4 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e014      	b.n	800191e <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1e4      	bne.n	80018d0 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	695b      	ldr	r3, [r3, #20]
 800190c:	b29b      	uxth	r3, r3
 800190e:	461a      	mov	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3718      	adds	r7, #24
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b086      	sub	sp, #24
 800192a:	af00      	add	r7, sp, #0
 800192c:	60f8      	str	r0, [r7, #12]
 800192e:	460b      	mov	r3, r1
 8001930:	607a      	str	r2, [r7, #4]
 8001932:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001938:	2300      	movs	r3, #0
 800193a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001942:	b2db      	uxtb	r3, r3
 8001944:	2b42      	cmp	r3, #66	; 0x42
 8001946:	d101      	bne.n	800194c <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001948:	2302      	movs	r3, #2
 800194a:	e04e      	b.n	80019ea <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2242      	movs	r2, #66	; 0x42
 8001950:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	f003 031c 	and.w	r3, r3, #28
 8001962:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	8a1b      	ldrh	r3, [r3, #16]
 8001968:	02db      	lsls	r3, r3, #11
 800196a:	b29b      	uxth	r3, r3
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	4313      	orrs	r3, r2
 8001970:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001972:	897b      	ldrh	r3, [r7, #10]
 8001974:	019b      	lsls	r3, r3, #6
 8001976:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	4313      	orrs	r3, r2
 800197e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	f043 0302 	orr.w	r3, r3, #2
 8001986:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	f043 0301 	orr.w	r3, r3, #1
 800198e:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	b29a      	uxth	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	697a      	ldr	r2, [r7, #20]
 80019a0:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80019a2:	f7ff f9e7 	bl	8000d74 <HAL_GetTick>
 80019a6:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80019a8:	e015      	b.n	80019d6 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80019aa:	f7ff f9e3 	bl	8000d74 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b8:	d309      	bcc.n	80019ce <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2201      	movs	r2, #1
 80019be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e00d      	b.n	80019ea <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1e4      	bne.n	80019aa <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b082      	sub	sp, #8
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d101      	bne.n	8001a08 <HAL_ETH_Start+0x16>
 8001a04:	2302      	movs	r3, #2
 8001a06:	e01f      	b.n	8001a48 <HAL_ETH_Start+0x56>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2202      	movs	r2, #2
 8001a14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 fb45 	bl	80020a8 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f000 fb7c 	bl	800211c <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f000 fc13 	bl	8002250 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 fbb0 	bl	8002190 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f000 fbdd 	bl	80021f0 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d101      	bne.n	8001a66 <HAL_ETH_Stop+0x16>
 8001a62:	2302      	movs	r3, #2
 8001a64:	e01f      	b.n	8001aa6 <HAL_ETH_Stop+0x56>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2202      	movs	r2, #2
 8001a72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 fba2 	bl	80021c0 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f000 fbcf 	bl	8002220 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f000 fb67 	bl	8002156 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 fbe1 	bl	8002250 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 fb27 	bl	80020e2 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
	...

08001ab0 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d101      	bne.n	8001acc <HAL_ETH_ConfigMAC+0x1c>
 8001ac8:	2302      	movs	r3, #2
 8001aca:	e0e4      	b.n	8001c96 <HAL_ETH_ConfigMAC+0x1e6>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 80b1 	beq.w	8001c46 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001aec:	68fa      	ldr	r2, [r7, #12]
 8001aee:	4b6c      	ldr	r3, [pc, #432]	; (8001ca0 <HAL_ETH_ConfigMAC+0x1f0>)
 8001af0:	4013      	ands	r3, r2
 8001af2:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001afc:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001b02:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001b08:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001b0e:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001b14:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001b1a:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001b20:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001b26:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001b2c:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001b32:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001b38:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001b3e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b56:	2001      	movs	r0, #1
 8001b58:	f7ff f918 	bl	8000d8c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001b6c:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001b72:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001b78:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001b7e:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001b84:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001b8a:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001b96:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001b98:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ba2:	2001      	movs	r0, #1
 8001ba4:	f7ff f8f2 	bl	8000d8c <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001bb8:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001bc2:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bda:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001be0:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001be6:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001bec:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001bf2:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001bf8:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68fa      	ldr	r2, [r7, #12]
 8001c06:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c10:	2001      	movs	r0, #1
 8001c12:	f7ff f8bb 	bl	8000d8c <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	69db      	ldr	r3, [r3, #28]
 8001c34:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c36:	2001      	movs	r0, #1
 8001c38:	f7ff f8a8 	bl	8000d8c <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	61da      	str	r2, [r3, #28]
 8001c44:	e01e      	b.n	8001c84 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001c54:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689a      	ldr	r2, [r3, #8]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c76:	2001      	movs	r0, #1
 8001c78:	f7ff f888 	bl	8000d8c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	ff20810f 	.word	0xff20810f

08001ca4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b0b0      	sub	sp, #192	; 0xc0
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d007      	beq.n	8001cca <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cc0:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cc8:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d103      	bne.n	8001cf2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001cea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cee:	663b      	str	r3, [r7, #96]	; 0x60
 8001cf0:	e001      	b.n	8001cf6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001cf6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cfa:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001d00:	2300      	movs	r3, #0
 8001d02:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001d04:	2300      	movs	r3, #0
 8001d06:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001d10:	2340      	movs	r3, #64	; 0x40
 8001d12:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001d14:	2300      	movs	r3, #0
 8001d16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001d20:	2300      	movs	r3, #0
 8001d22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001d26:	2300      	movs	r3, #0
 8001d28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001d32:	2300      	movs	r3, #0
 8001d34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001d44:	2380      	movs	r3, #128	; 0x80
 8001d46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001d50:	2300      	movs	r3, #0
 8001d52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001d56:	2300      	movs	r3, #0
 8001d58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001d62:	2300      	movs	r3, #0
 8001d64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001d78:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d7c:	4bac      	ldr	r3, [pc, #688]	; (8002030 <ETH_MACDMAConfig+0x38c>)
 8001d7e:	4013      	ands	r3, r2
 8001d80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001d84:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001d88:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001d8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001d8c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001d8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001d90:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001d96:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001d98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001d9a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001d9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001d9e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001da4:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001da6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001da8:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001daa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001dac:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001dae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001db0:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001db2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001db4:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001db6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001db8:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001dba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001dcc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dd8:	2001      	movs	r0, #1
 8001dda:	f7fe ffd7 	bl	8000d8c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001de6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001de8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001dea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001dec:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001dee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001df0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001df2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001df6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001df8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001dfc:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001dfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001e02:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001e04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001e08:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001e0c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001e14:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001e16:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e22:	2001      	movs	r0, #1
 8001e24:	f7fe ffb2 	bl	8000d8c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e30:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001e3a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001e44:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001e50:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e54:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001e58:	4013      	ands	r3, r2
 8001e5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001e5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e62:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001e64:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001e68:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001e6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001e6e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001e70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001e74:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001e76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001e7a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001e7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001e80:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001e82:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e86:	4313      	orrs	r3, r2
 8001e88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e94:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	f7fe ff73 	bl	8000d8c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001eae:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001eb0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001eb4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001eca:	2001      	movs	r0, #1
 8001ecc:	f7fe ff5e 	bl	8000d8c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ed8:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001eda:	2300      	movs	r3, #0
 8001edc:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001ede:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ee2:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001ee8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001eec:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001efa:	2300      	movs	r3, #0
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001efe:	2304      	movs	r3, #4
 8001f00:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001f02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f06:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001f08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f0c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001f0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f12:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001f14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f18:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001f1a:	2380      	movs	r3, #128	; 0x80
 8001f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001f22:	2300      	movs	r3, #0
 8001f24:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f2e:	3318      	adds	r3, #24
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001f36:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f3a:	4b3e      	ldr	r3, [pc, #248]	; (8002034 <ETH_MACDMAConfig+0x390>)
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001f42:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001f44:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001f46:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001f48:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001f4a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001f4c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001f4e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001f50:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001f52:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001f54:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001f56:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001f58:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001f5a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001f5e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001f62:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001f64:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f76:	3318      	adds	r3, #24
 8001f78:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f7c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f86:	3318      	adds	r3, #24
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f8e:	2001      	movs	r0, #1
 8001f90:	f7fe fefc 	bl	8000d8c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f9c:	3318      	adds	r3, #24
 8001f9e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fa2:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001fa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001fa8:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001fac:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001fb0:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001fb4:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001fb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fb8:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001fba:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001fbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001fbe:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001fc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fcc:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fdc:	2001      	movs	r0, #1
 8001fde:	f7fe fed5 	bl	8000d8c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fee:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d10f      	bne.n	8002018 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002000:	331c      	adds	r3, #28
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800200c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002014:	331c      	adds	r3, #28
 8002016:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	461a      	mov	r2, r3
 800201e:	2100      	movs	r1, #0
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 f809 	bl	8002038 <ETH_MACAddressConfig>
}
 8002026:	bf00      	nop
 8002028:	37c0      	adds	r7, #192	; 0xc0
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	ff20810f 	.word	0xff20810f
 8002034:	f8de3f23 	.word	0xf8de3f23

08002038 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002038:	b480      	push	{r7}
 800203a:	b087      	sub	sp, #28
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3305      	adds	r3, #5
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	021b      	lsls	r3, r3, #8
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	3204      	adds	r2, #4
 8002050:	7812      	ldrb	r2, [r2, #0]
 8002052:	4313      	orrs	r3, r2
 8002054:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002056:	68ba      	ldr	r2, [r7, #8]
 8002058:	4b11      	ldr	r3, [pc, #68]	; (80020a0 <ETH_MACAddressConfig+0x68>)
 800205a:	4413      	add	r3, r2
 800205c:	461a      	mov	r2, r3
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	3303      	adds	r3, #3
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	061a      	lsls	r2, r3, #24
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	3302      	adds	r3, #2
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	041b      	lsls	r3, r3, #16
 8002072:	431a      	orrs	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3301      	adds	r3, #1
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	021b      	lsls	r3, r3, #8
 800207c:	4313      	orrs	r3, r2
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	7812      	ldrb	r2, [r2, #0]
 8002082:	4313      	orrs	r3, r2
 8002084:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <ETH_MACAddressConfig+0x6c>)
 800208a:	4413      	add	r3, r2
 800208c:	461a      	mov	r2, r3
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	6013      	str	r3, [r2, #0]
}
 8002092:	bf00      	nop
 8002094:	371c      	adds	r7, #28
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	40028040 	.word	0x40028040
 80020a4:	40028044 	.word	0x40028044

080020a8 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80020b0:	2300      	movs	r3, #0
 80020b2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f042 0208 	orr.w	r2, r2, #8
 80020c2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80020cc:	2001      	movs	r0, #1
 80020ce:	f000 f8e9 	bl	80022a4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	601a      	str	r2, [r3, #0]
}
 80020da:	bf00      	nop
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b084      	sub	sp, #16
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80020ea:	2300      	movs	r3, #0
 80020ec:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 0208 	bic.w	r2, r2, #8
 80020fc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002106:	2001      	movs	r0, #1
 8002108:	f000 f8cc 	bl	80022a4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	601a      	str	r2, [r3, #0]
}
 8002114:	bf00      	nop
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002124:	2300      	movs	r3, #0
 8002126:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f042 0204 	orr.w	r2, r2, #4
 8002136:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002140:	2001      	movs	r0, #1
 8002142:	f000 f8af 	bl	80022a4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	601a      	str	r2, [r3, #0]
}
 800214e:	bf00      	nop
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002156:	b580      	push	{r7, lr}
 8002158:	b084      	sub	sp, #16
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800215e:	2300      	movs	r3, #0
 8002160:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 0204 	bic.w	r2, r2, #4
 8002170:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800217a:	2001      	movs	r0, #1
 800217c:	f000 f892 	bl	80022a4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	601a      	str	r2, [r3, #0]
}
 8002188:	bf00      	nop
 800218a:	3710      	adds	r7, #16
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021a0:	3318      	adds	r3, #24
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021b0:	3318      	adds	r3, #24
 80021b2:	601a      	str	r2, [r3, #0]
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021d0:	3318      	adds	r3, #24
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021e0:	3318      	adds	r3, #24
 80021e2:	601a      	str	r2, [r3, #0]
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002200:	3318      	adds	r3, #24
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f042 0202 	orr.w	r2, r2, #2
 800220c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002210:	3318      	adds	r3, #24
 8002212:	601a      	str	r2, [r3, #0]
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002230:	3318      	adds	r3, #24
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 0202 	bic.w	r2, r2, #2
 800223c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002240:	3318      	adds	r3, #24
 8002242:	601a      	str	r2, [r3, #0]
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002258:	2300      	movs	r3, #0
 800225a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002264:	3318      	adds	r3, #24
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002270:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002274:	3318      	adds	r3, #24
 8002276:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002280:	3318      	adds	r3, #24
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002286:	2001      	movs	r0, #1
 8002288:	f000 f80c 	bl	80022a4 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002296:	3318      	adds	r3, #24
 8002298:	601a      	str	r2, [r3, #0]
}
 800229a:	bf00      	nop
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
	...

080022a4 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022ac:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <ETH_Delay+0x38>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a0b      	ldr	r2, [pc, #44]	; (80022e0 <ETH_Delay+0x3c>)
 80022b2:	fba2 2303 	umull	r2, r3, r2, r3
 80022b6:	0a5b      	lsrs	r3, r3, #9
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	fb02 f303 	mul.w	r3, r2, r3
 80022be:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80022c0:	bf00      	nop
  } 
  while (Delay --);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	1e5a      	subs	r2, r3, #1
 80022c6:	60fa      	str	r2, [r7, #12]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1f9      	bne.n	80022c0 <ETH_Delay+0x1c>
}
 80022cc:	bf00      	nop
 80022ce:	bf00      	nop
 80022d0:	3714      	adds	r7, #20
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	20000000 	.word	0x20000000
 80022e0:	10624dd3 	.word	0x10624dd3

080022e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b089      	sub	sp, #36	; 0x24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022fa:	2300      	movs	r3, #0
 80022fc:	61fb      	str	r3, [r7, #28]
 80022fe:	e177      	b.n	80025f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002300:	2201      	movs	r2, #1
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	4013      	ands	r3, r2
 8002312:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	429a      	cmp	r2, r3
 800231a:	f040 8166 	bne.w	80025ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	2b01      	cmp	r3, #1
 8002328:	d005      	beq.n	8002336 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002332:	2b02      	cmp	r3, #2
 8002334:	d130      	bne.n	8002398 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	2203      	movs	r2, #3
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43db      	mvns	r3, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4013      	ands	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	68da      	ldr	r2, [r3, #12]
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4313      	orrs	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800236c:	2201      	movs	r2, #1
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	091b      	lsrs	r3, r3, #4
 8002382:	f003 0201 	and.w	r2, r3, #1
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f003 0303 	and.w	r3, r3, #3
 80023a0:	2b03      	cmp	r3, #3
 80023a2:	d017      	beq.n	80023d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	2203      	movs	r2, #3
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4013      	ands	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f003 0303 	and.w	r3, r3, #3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d123      	bne.n	8002428 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	08da      	lsrs	r2, r3, #3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3208      	adds	r2, #8
 80023e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	220f      	movs	r2, #15
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	43db      	mvns	r3, r3
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	4013      	ands	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	691a      	ldr	r2, [r3, #16]
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4313      	orrs	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	08da      	lsrs	r2, r3, #3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3208      	adds	r2, #8
 8002422:	69b9      	ldr	r1, [r7, #24]
 8002424:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	2203      	movs	r2, #3
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	43db      	mvns	r3, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4013      	ands	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f003 0203 	and.w	r2, r3, #3
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4313      	orrs	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 80c0 	beq.w	80025ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800246a:	2300      	movs	r3, #0
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	4b66      	ldr	r3, [pc, #408]	; (8002608 <HAL_GPIO_Init+0x324>)
 8002470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002472:	4a65      	ldr	r2, [pc, #404]	; (8002608 <HAL_GPIO_Init+0x324>)
 8002474:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002478:	6453      	str	r3, [r2, #68]	; 0x44
 800247a:	4b63      	ldr	r3, [pc, #396]	; (8002608 <HAL_GPIO_Init+0x324>)
 800247c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002482:	60fb      	str	r3, [r7, #12]
 8002484:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002486:	4a61      	ldr	r2, [pc, #388]	; (800260c <HAL_GPIO_Init+0x328>)
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	089b      	lsrs	r3, r3, #2
 800248c:	3302      	adds	r3, #2
 800248e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002492:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	f003 0303 	and.w	r3, r3, #3
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	220f      	movs	r2, #15
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43db      	mvns	r3, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4013      	ands	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a58      	ldr	r2, [pc, #352]	; (8002610 <HAL_GPIO_Init+0x32c>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d037      	beq.n	8002522 <HAL_GPIO_Init+0x23e>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a57      	ldr	r2, [pc, #348]	; (8002614 <HAL_GPIO_Init+0x330>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d031      	beq.n	800251e <HAL_GPIO_Init+0x23a>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a56      	ldr	r2, [pc, #344]	; (8002618 <HAL_GPIO_Init+0x334>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d02b      	beq.n	800251a <HAL_GPIO_Init+0x236>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a55      	ldr	r2, [pc, #340]	; (800261c <HAL_GPIO_Init+0x338>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d025      	beq.n	8002516 <HAL_GPIO_Init+0x232>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a54      	ldr	r2, [pc, #336]	; (8002620 <HAL_GPIO_Init+0x33c>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d01f      	beq.n	8002512 <HAL_GPIO_Init+0x22e>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a53      	ldr	r2, [pc, #332]	; (8002624 <HAL_GPIO_Init+0x340>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d019      	beq.n	800250e <HAL_GPIO_Init+0x22a>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a52      	ldr	r2, [pc, #328]	; (8002628 <HAL_GPIO_Init+0x344>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d013      	beq.n	800250a <HAL_GPIO_Init+0x226>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a51      	ldr	r2, [pc, #324]	; (800262c <HAL_GPIO_Init+0x348>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d00d      	beq.n	8002506 <HAL_GPIO_Init+0x222>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a50      	ldr	r2, [pc, #320]	; (8002630 <HAL_GPIO_Init+0x34c>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d007      	beq.n	8002502 <HAL_GPIO_Init+0x21e>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a4f      	ldr	r2, [pc, #316]	; (8002634 <HAL_GPIO_Init+0x350>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d101      	bne.n	80024fe <HAL_GPIO_Init+0x21a>
 80024fa:	2309      	movs	r3, #9
 80024fc:	e012      	b.n	8002524 <HAL_GPIO_Init+0x240>
 80024fe:	230a      	movs	r3, #10
 8002500:	e010      	b.n	8002524 <HAL_GPIO_Init+0x240>
 8002502:	2308      	movs	r3, #8
 8002504:	e00e      	b.n	8002524 <HAL_GPIO_Init+0x240>
 8002506:	2307      	movs	r3, #7
 8002508:	e00c      	b.n	8002524 <HAL_GPIO_Init+0x240>
 800250a:	2306      	movs	r3, #6
 800250c:	e00a      	b.n	8002524 <HAL_GPIO_Init+0x240>
 800250e:	2305      	movs	r3, #5
 8002510:	e008      	b.n	8002524 <HAL_GPIO_Init+0x240>
 8002512:	2304      	movs	r3, #4
 8002514:	e006      	b.n	8002524 <HAL_GPIO_Init+0x240>
 8002516:	2303      	movs	r3, #3
 8002518:	e004      	b.n	8002524 <HAL_GPIO_Init+0x240>
 800251a:	2302      	movs	r3, #2
 800251c:	e002      	b.n	8002524 <HAL_GPIO_Init+0x240>
 800251e:	2301      	movs	r3, #1
 8002520:	e000      	b.n	8002524 <HAL_GPIO_Init+0x240>
 8002522:	2300      	movs	r3, #0
 8002524:	69fa      	ldr	r2, [r7, #28]
 8002526:	f002 0203 	and.w	r2, r2, #3
 800252a:	0092      	lsls	r2, r2, #2
 800252c:	4093      	lsls	r3, r2
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4313      	orrs	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002534:	4935      	ldr	r1, [pc, #212]	; (800260c <HAL_GPIO_Init+0x328>)
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	089b      	lsrs	r3, r3, #2
 800253a:	3302      	adds	r3, #2
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002542:	4b3d      	ldr	r3, [pc, #244]	; (8002638 <HAL_GPIO_Init+0x354>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	43db      	mvns	r3, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4013      	ands	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	4313      	orrs	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002566:	4a34      	ldr	r2, [pc, #208]	; (8002638 <HAL_GPIO_Init+0x354>)
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800256c:	4b32      	ldr	r3, [pc, #200]	; (8002638 <HAL_GPIO_Init+0x354>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	43db      	mvns	r3, r3
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4013      	ands	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d003      	beq.n	8002590 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	4313      	orrs	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002590:	4a29      	ldr	r2, [pc, #164]	; (8002638 <HAL_GPIO_Init+0x354>)
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002596:	4b28      	ldr	r3, [pc, #160]	; (8002638 <HAL_GPIO_Init+0x354>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	43db      	mvns	r3, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4013      	ands	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025ba:	4a1f      	ldr	r2, [pc, #124]	; (8002638 <HAL_GPIO_Init+0x354>)
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025c0:	4b1d      	ldr	r3, [pc, #116]	; (8002638 <HAL_GPIO_Init+0x354>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	43db      	mvns	r3, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4013      	ands	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d003      	beq.n	80025e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025e4:	4a14      	ldr	r2, [pc, #80]	; (8002638 <HAL_GPIO_Init+0x354>)
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	3301      	adds	r3, #1
 80025ee:	61fb      	str	r3, [r7, #28]
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	2b0f      	cmp	r3, #15
 80025f4:	f67f ae84 	bls.w	8002300 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025f8:	bf00      	nop
 80025fa:	bf00      	nop
 80025fc:	3724      	adds	r7, #36	; 0x24
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	40023800 	.word	0x40023800
 800260c:	40013800 	.word	0x40013800
 8002610:	40020000 	.word	0x40020000
 8002614:	40020400 	.word	0x40020400
 8002618:	40020800 	.word	0x40020800
 800261c:	40020c00 	.word	0x40020c00
 8002620:	40021000 	.word	0x40021000
 8002624:	40021400 	.word	0x40021400
 8002628:	40021800 	.word	0x40021800
 800262c:	40021c00 	.word	0x40021c00
 8002630:	40022000 	.word	0x40022000
 8002634:	40022400 	.word	0x40022400
 8002638:	40013c00 	.word	0x40013c00

0800263c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	460b      	mov	r3, r1
 8002646:	807b      	strh	r3, [r7, #2]
 8002648:	4613      	mov	r3, r2
 800264a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800264c:	787b      	ldrb	r3, [r7, #1]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002652:	887a      	ldrh	r2, [r7, #2]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002658:	e003      	b.n	8002662 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800265a:	887b      	ldrh	r3, [r7, #2]
 800265c:	041a      	lsls	r2, r3, #16
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	619a      	str	r2, [r3, #24]
}
 8002662:	bf00      	nop
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
	...

08002670 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e264      	b.n	8002b4c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d075      	beq.n	800277a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800268e:	4ba3      	ldr	r3, [pc, #652]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 030c 	and.w	r3, r3, #12
 8002696:	2b04      	cmp	r3, #4
 8002698:	d00c      	beq.n	80026b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800269a:	4ba0      	ldr	r3, [pc, #640]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026a2:	2b08      	cmp	r3, #8
 80026a4:	d112      	bne.n	80026cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026a6:	4b9d      	ldr	r3, [pc, #628]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026b2:	d10b      	bne.n	80026cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b4:	4b99      	ldr	r3, [pc, #612]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d05b      	beq.n	8002778 <HAL_RCC_OscConfig+0x108>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d157      	bne.n	8002778 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e23f      	b.n	8002b4c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026d4:	d106      	bne.n	80026e4 <HAL_RCC_OscConfig+0x74>
 80026d6:	4b91      	ldr	r3, [pc, #580]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a90      	ldr	r2, [pc, #576]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 80026dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	e01d      	b.n	8002720 <HAL_RCC_OscConfig+0xb0>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026ec:	d10c      	bne.n	8002708 <HAL_RCC_OscConfig+0x98>
 80026ee:	4b8b      	ldr	r3, [pc, #556]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a8a      	ldr	r2, [pc, #552]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 80026f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	4b88      	ldr	r3, [pc, #544]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a87      	ldr	r2, [pc, #540]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 8002700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	e00b      	b.n	8002720 <HAL_RCC_OscConfig+0xb0>
 8002708:	4b84      	ldr	r3, [pc, #528]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a83      	ldr	r2, [pc, #524]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 800270e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002712:	6013      	str	r3, [r2, #0]
 8002714:	4b81      	ldr	r3, [pc, #516]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a80      	ldr	r2, [pc, #512]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 800271a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800271e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d013      	beq.n	8002750 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002728:	f7fe fb24 	bl	8000d74 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002730:	f7fe fb20 	bl	8000d74 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b64      	cmp	r3, #100	; 0x64
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e204      	b.n	8002b4c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002742:	4b76      	ldr	r3, [pc, #472]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0f0      	beq.n	8002730 <HAL_RCC_OscConfig+0xc0>
 800274e:	e014      	b.n	800277a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002750:	f7fe fb10 	bl	8000d74 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002758:	f7fe fb0c 	bl	8000d74 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b64      	cmp	r3, #100	; 0x64
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e1f0      	b.n	8002b4c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800276a:	4b6c      	ldr	r3, [pc, #432]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1f0      	bne.n	8002758 <HAL_RCC_OscConfig+0xe8>
 8002776:	e000      	b.n	800277a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d063      	beq.n	800284e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002786:	4b65      	ldr	r3, [pc, #404]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 030c 	and.w	r3, r3, #12
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00b      	beq.n	80027aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002792:	4b62      	ldr	r3, [pc, #392]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800279a:	2b08      	cmp	r3, #8
 800279c:	d11c      	bne.n	80027d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800279e:	4b5f      	ldr	r3, [pc, #380]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d116      	bne.n	80027d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027aa:	4b5c      	ldr	r3, [pc, #368]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d005      	beq.n	80027c2 <HAL_RCC_OscConfig+0x152>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d001      	beq.n	80027c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e1c4      	b.n	8002b4c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c2:	4b56      	ldr	r3, [pc, #344]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	4952      	ldr	r1, [pc, #328]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027d6:	e03a      	b.n	800284e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d020      	beq.n	8002822 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027e0:	4b4f      	ldr	r3, [pc, #316]	; (8002920 <HAL_RCC_OscConfig+0x2b0>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e6:	f7fe fac5 	bl	8000d74 <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027ee:	f7fe fac1 	bl	8000d74 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e1a5      	b.n	8002b4c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002800:	4b46      	ldr	r3, [pc, #280]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0f0      	beq.n	80027ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800280c:	4b43      	ldr	r3, [pc, #268]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	4940      	ldr	r1, [pc, #256]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 800281c:	4313      	orrs	r3, r2
 800281e:	600b      	str	r3, [r1, #0]
 8002820:	e015      	b.n	800284e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002822:	4b3f      	ldr	r3, [pc, #252]	; (8002920 <HAL_RCC_OscConfig+0x2b0>)
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002828:	f7fe faa4 	bl	8000d74 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002830:	f7fe faa0 	bl	8000d74 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e184      	b.n	8002b4c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002842:	4b36      	ldr	r3, [pc, #216]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1f0      	bne.n	8002830 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0308 	and.w	r3, r3, #8
 8002856:	2b00      	cmp	r3, #0
 8002858:	d030      	beq.n	80028bc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d016      	beq.n	8002890 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002862:	4b30      	ldr	r3, [pc, #192]	; (8002924 <HAL_RCC_OscConfig+0x2b4>)
 8002864:	2201      	movs	r2, #1
 8002866:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002868:	f7fe fa84 	bl	8000d74 <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002870:	f7fe fa80 	bl	8000d74 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e164      	b.n	8002b4c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002882:	4b26      	ldr	r3, [pc, #152]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 8002884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0f0      	beq.n	8002870 <HAL_RCC_OscConfig+0x200>
 800288e:	e015      	b.n	80028bc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002890:	4b24      	ldr	r3, [pc, #144]	; (8002924 <HAL_RCC_OscConfig+0x2b4>)
 8002892:	2200      	movs	r2, #0
 8002894:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002896:	f7fe fa6d 	bl	8000d74 <HAL_GetTick>
 800289a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800289c:	e008      	b.n	80028b0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800289e:	f7fe fa69 	bl	8000d74 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e14d      	b.n	8002b4c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b0:	4b1a      	ldr	r3, [pc, #104]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 80028b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1f0      	bne.n	800289e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f000 80a0 	beq.w	8002a0a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ca:	2300      	movs	r3, #0
 80028cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ce:	4b13      	ldr	r3, [pc, #76]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10f      	bne.n	80028fa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	4b0f      	ldr	r3, [pc, #60]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	4a0e      	ldr	r2, [pc, #56]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 80028e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e8:	6413      	str	r3, [r2, #64]	; 0x40
 80028ea:	4b0c      	ldr	r3, [pc, #48]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f2:	60bb      	str	r3, [r7, #8]
 80028f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028f6:	2301      	movs	r3, #1
 80028f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028fa:	4b0b      	ldr	r3, [pc, #44]	; (8002928 <HAL_RCC_OscConfig+0x2b8>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002902:	2b00      	cmp	r3, #0
 8002904:	d121      	bne.n	800294a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002906:	4b08      	ldr	r3, [pc, #32]	; (8002928 <HAL_RCC_OscConfig+0x2b8>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a07      	ldr	r2, [pc, #28]	; (8002928 <HAL_RCC_OscConfig+0x2b8>)
 800290c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002910:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002912:	f7fe fa2f 	bl	8000d74 <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002918:	e011      	b.n	800293e <HAL_RCC_OscConfig+0x2ce>
 800291a:	bf00      	nop
 800291c:	40023800 	.word	0x40023800
 8002920:	42470000 	.word	0x42470000
 8002924:	42470e80 	.word	0x42470e80
 8002928:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800292c:	f7fe fa22 	bl	8000d74 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e106      	b.n	8002b4c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293e:	4b85      	ldr	r3, [pc, #532]	; (8002b54 <HAL_RCC_OscConfig+0x4e4>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0f0      	beq.n	800292c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d106      	bne.n	8002960 <HAL_RCC_OscConfig+0x2f0>
 8002952:	4b81      	ldr	r3, [pc, #516]	; (8002b58 <HAL_RCC_OscConfig+0x4e8>)
 8002954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002956:	4a80      	ldr	r2, [pc, #512]	; (8002b58 <HAL_RCC_OscConfig+0x4e8>)
 8002958:	f043 0301 	orr.w	r3, r3, #1
 800295c:	6713      	str	r3, [r2, #112]	; 0x70
 800295e:	e01c      	b.n	800299a <HAL_RCC_OscConfig+0x32a>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	2b05      	cmp	r3, #5
 8002966:	d10c      	bne.n	8002982 <HAL_RCC_OscConfig+0x312>
 8002968:	4b7b      	ldr	r3, [pc, #492]	; (8002b58 <HAL_RCC_OscConfig+0x4e8>)
 800296a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296c:	4a7a      	ldr	r2, [pc, #488]	; (8002b58 <HAL_RCC_OscConfig+0x4e8>)
 800296e:	f043 0304 	orr.w	r3, r3, #4
 8002972:	6713      	str	r3, [r2, #112]	; 0x70
 8002974:	4b78      	ldr	r3, [pc, #480]	; (8002b58 <HAL_RCC_OscConfig+0x4e8>)
 8002976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002978:	4a77      	ldr	r2, [pc, #476]	; (8002b58 <HAL_RCC_OscConfig+0x4e8>)
 800297a:	f043 0301 	orr.w	r3, r3, #1
 800297e:	6713      	str	r3, [r2, #112]	; 0x70
 8002980:	e00b      	b.n	800299a <HAL_RCC_OscConfig+0x32a>
 8002982:	4b75      	ldr	r3, [pc, #468]	; (8002b58 <HAL_RCC_OscConfig+0x4e8>)
 8002984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002986:	4a74      	ldr	r2, [pc, #464]	; (8002b58 <HAL_RCC_OscConfig+0x4e8>)
 8002988:	f023 0301 	bic.w	r3, r3, #1
 800298c:	6713      	str	r3, [r2, #112]	; 0x70
 800298e:	4b72      	ldr	r3, [pc, #456]	; (8002b58 <HAL_RCC_OscConfig+0x4e8>)
 8002990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002992:	4a71      	ldr	r2, [pc, #452]	; (8002b58 <HAL_RCC_OscConfig+0x4e8>)
 8002994:	f023 0304 	bic.w	r3, r3, #4
 8002998:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d015      	beq.n	80029ce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a2:	f7fe f9e7 	bl	8000d74 <HAL_GetTick>
 80029a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a8:	e00a      	b.n	80029c0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029aa:	f7fe f9e3 	bl	8000d74 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e0c5      	b.n	8002b4c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c0:	4b65      	ldr	r3, [pc, #404]	; (8002b58 <HAL_RCC_OscConfig+0x4e8>)
 80029c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0ee      	beq.n	80029aa <HAL_RCC_OscConfig+0x33a>
 80029cc:	e014      	b.n	80029f8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ce:	f7fe f9d1 	bl	8000d74 <HAL_GetTick>
 80029d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029d4:	e00a      	b.n	80029ec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029d6:	f7fe f9cd 	bl	8000d74 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e0af      	b.n	8002b4c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ec:	4b5a      	ldr	r3, [pc, #360]	; (8002b58 <HAL_RCC_OscConfig+0x4e8>)
 80029ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1ee      	bne.n	80029d6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029f8:	7dfb      	ldrb	r3, [r7, #23]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d105      	bne.n	8002a0a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029fe:	4b56      	ldr	r3, [pc, #344]	; (8002b58 <HAL_RCC_OscConfig+0x4e8>)
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	4a55      	ldr	r2, [pc, #340]	; (8002b58 <HAL_RCC_OscConfig+0x4e8>)
 8002a04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f000 809b 	beq.w	8002b4a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a14:	4b50      	ldr	r3, [pc, #320]	; (8002b58 <HAL_RCC_OscConfig+0x4e8>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f003 030c 	and.w	r3, r3, #12
 8002a1c:	2b08      	cmp	r3, #8
 8002a1e:	d05c      	beq.n	8002ada <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d141      	bne.n	8002aac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a28:	4b4c      	ldr	r3, [pc, #304]	; (8002b5c <HAL_RCC_OscConfig+0x4ec>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2e:	f7fe f9a1 	bl	8000d74 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a34:	e008      	b.n	8002a48 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a36:	f7fe f99d 	bl	8000d74 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e081      	b.n	8002b4c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a48:	4b43      	ldr	r3, [pc, #268]	; (8002b58 <HAL_RCC_OscConfig+0x4e8>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1f0      	bne.n	8002a36 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	69da      	ldr	r2, [r3, #28]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	019b      	lsls	r3, r3, #6
 8002a64:	431a      	orrs	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6a:	085b      	lsrs	r3, r3, #1
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	041b      	lsls	r3, r3, #16
 8002a70:	431a      	orrs	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a76:	061b      	lsls	r3, r3, #24
 8002a78:	4937      	ldr	r1, [pc, #220]	; (8002b58 <HAL_RCC_OscConfig+0x4e8>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a7e:	4b37      	ldr	r3, [pc, #220]	; (8002b5c <HAL_RCC_OscConfig+0x4ec>)
 8002a80:	2201      	movs	r2, #1
 8002a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a84:	f7fe f976 	bl	8000d74 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a8c:	f7fe f972 	bl	8000d74 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e056      	b.n	8002b4c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a9e:	4b2e      	ldr	r3, [pc, #184]	; (8002b58 <HAL_RCC_OscConfig+0x4e8>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0f0      	beq.n	8002a8c <HAL_RCC_OscConfig+0x41c>
 8002aaa:	e04e      	b.n	8002b4a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aac:	4b2b      	ldr	r3, [pc, #172]	; (8002b5c <HAL_RCC_OscConfig+0x4ec>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab2:	f7fe f95f 	bl	8000d74 <HAL_GetTick>
 8002ab6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ab8:	e008      	b.n	8002acc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aba:	f7fe f95b 	bl	8000d74 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d901      	bls.n	8002acc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e03f      	b.n	8002b4c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002acc:	4b22      	ldr	r3, [pc, #136]	; (8002b58 <HAL_RCC_OscConfig+0x4e8>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1f0      	bne.n	8002aba <HAL_RCC_OscConfig+0x44a>
 8002ad8:	e037      	b.n	8002b4a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d101      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e032      	b.n	8002b4c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ae6:	4b1c      	ldr	r3, [pc, #112]	; (8002b58 <HAL_RCC_OscConfig+0x4e8>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d028      	beq.n	8002b46 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d121      	bne.n	8002b46 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d11a      	bne.n	8002b46 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b16:	4013      	ands	r3, r2
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b1c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d111      	bne.n	8002b46 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2c:	085b      	lsrs	r3, r3, #1
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d107      	bne.n	8002b46 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b40:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d001      	beq.n	8002b4a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e000      	b.n	8002b4c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3718      	adds	r7, #24
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40007000 	.word	0x40007000
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	42470060 	.word	0x42470060

08002b60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e0cc      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b74:	4b68      	ldr	r3, [pc, #416]	; (8002d18 <HAL_RCC_ClockConfig+0x1b8>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 030f 	and.w	r3, r3, #15
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d90c      	bls.n	8002b9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b82:	4b65      	ldr	r3, [pc, #404]	; (8002d18 <HAL_RCC_ClockConfig+0x1b8>)
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8a:	4b63      	ldr	r3, [pc, #396]	; (8002d18 <HAL_RCC_ClockConfig+0x1b8>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d001      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e0b8      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d020      	beq.n	8002bea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d005      	beq.n	8002bc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bb4:	4b59      	ldr	r3, [pc, #356]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	4a58      	ldr	r2, [pc, #352]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002bba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0308 	and.w	r3, r3, #8
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d005      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bcc:	4b53      	ldr	r3, [pc, #332]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	4a52      	ldr	r2, [pc, #328]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002bd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bd8:	4b50      	ldr	r3, [pc, #320]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	494d      	ldr	r1, [pc, #308]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d044      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d107      	bne.n	8002c0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bfe:	4b47      	ldr	r3, [pc, #284]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d119      	bne.n	8002c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e07f      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d003      	beq.n	8002c1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c1a:	2b03      	cmp	r3, #3
 8002c1c:	d107      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c1e:	4b3f      	ldr	r3, [pc, #252]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d109      	bne.n	8002c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e06f      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c2e:	4b3b      	ldr	r3, [pc, #236]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e067      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c3e:	4b37      	ldr	r3, [pc, #220]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f023 0203 	bic.w	r2, r3, #3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	4934      	ldr	r1, [pc, #208]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c50:	f7fe f890 	bl	8000d74 <HAL_GetTick>
 8002c54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c56:	e00a      	b.n	8002c6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c58:	f7fe f88c 	bl	8000d74 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e04f      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c6e:	4b2b      	ldr	r3, [pc, #172]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 020c 	and.w	r2, r3, #12
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d1eb      	bne.n	8002c58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c80:	4b25      	ldr	r3, [pc, #148]	; (8002d18 <HAL_RCC_ClockConfig+0x1b8>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 030f 	and.w	r3, r3, #15
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d20c      	bcs.n	8002ca8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c8e:	4b22      	ldr	r3, [pc, #136]	; (8002d18 <HAL_RCC_ClockConfig+0x1b8>)
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	b2d2      	uxtb	r2, r2
 8002c94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c96:	4b20      	ldr	r3, [pc, #128]	; (8002d18 <HAL_RCC_ClockConfig+0x1b8>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d001      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e032      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d008      	beq.n	8002cc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cb4:	4b19      	ldr	r3, [pc, #100]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	4916      	ldr	r1, [pc, #88]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0308 	and.w	r3, r3, #8
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d009      	beq.n	8002ce6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cd2:	4b12      	ldr	r3, [pc, #72]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	490e      	ldr	r1, [pc, #56]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ce6:	f000 f821 	bl	8002d2c <HAL_RCC_GetSysClockFreq>
 8002cea:	4602      	mov	r2, r0
 8002cec:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	091b      	lsrs	r3, r3, #4
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	490a      	ldr	r1, [pc, #40]	; (8002d20 <HAL_RCC_ClockConfig+0x1c0>)
 8002cf8:	5ccb      	ldrb	r3, [r1, r3]
 8002cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8002cfe:	4a09      	ldr	r2, [pc, #36]	; (8002d24 <HAL_RCC_ClockConfig+0x1c4>)
 8002d00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d02:	4b09      	ldr	r3, [pc, #36]	; (8002d28 <HAL_RCC_ClockConfig+0x1c8>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fd fe74 	bl	80009f4 <HAL_InitTick>

  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	40023c00 	.word	0x40023c00
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	080175cc 	.word	0x080175cc
 8002d24:	20000000 	.word	0x20000000
 8002d28:	20000004 	.word	0x20000004

08002d2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d2c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002d30:	b084      	sub	sp, #16
 8002d32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	607b      	str	r3, [r7, #4]
 8002d38:	2300      	movs	r3, #0
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002d40:	2300      	movs	r3, #0
 8002d42:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d44:	4b67      	ldr	r3, [pc, #412]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f003 030c 	and.w	r3, r3, #12
 8002d4c:	2b08      	cmp	r3, #8
 8002d4e:	d00d      	beq.n	8002d6c <HAL_RCC_GetSysClockFreq+0x40>
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	f200 80bd 	bhi.w	8002ed0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d002      	beq.n	8002d60 <HAL_RCC_GetSysClockFreq+0x34>
 8002d5a:	2b04      	cmp	r3, #4
 8002d5c:	d003      	beq.n	8002d66 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d5e:	e0b7      	b.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d60:	4b61      	ldr	r3, [pc, #388]	; (8002ee8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002d62:	60bb      	str	r3, [r7, #8]
       break;
 8002d64:	e0b7      	b.n	8002ed6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d66:	4b61      	ldr	r3, [pc, #388]	; (8002eec <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002d68:	60bb      	str	r3, [r7, #8]
      break;
 8002d6a:	e0b4      	b.n	8002ed6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d6c:	4b5d      	ldr	r3, [pc, #372]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d74:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d76:	4b5b      	ldr	r3, [pc, #364]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d04d      	beq.n	8002e1e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d82:	4b58      	ldr	r3, [pc, #352]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	099b      	lsrs	r3, r3, #6
 8002d88:	461a      	mov	r2, r3
 8002d8a:	f04f 0300 	mov.w	r3, #0
 8002d8e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d92:	f04f 0100 	mov.w	r1, #0
 8002d96:	ea02 0800 	and.w	r8, r2, r0
 8002d9a:	ea03 0901 	and.w	r9, r3, r1
 8002d9e:	4640      	mov	r0, r8
 8002da0:	4649      	mov	r1, r9
 8002da2:	f04f 0200 	mov.w	r2, #0
 8002da6:	f04f 0300 	mov.w	r3, #0
 8002daa:	014b      	lsls	r3, r1, #5
 8002dac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002db0:	0142      	lsls	r2, r0, #5
 8002db2:	4610      	mov	r0, r2
 8002db4:	4619      	mov	r1, r3
 8002db6:	ebb0 0008 	subs.w	r0, r0, r8
 8002dba:	eb61 0109 	sbc.w	r1, r1, r9
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	f04f 0300 	mov.w	r3, #0
 8002dc6:	018b      	lsls	r3, r1, #6
 8002dc8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002dcc:	0182      	lsls	r2, r0, #6
 8002dce:	1a12      	subs	r2, r2, r0
 8002dd0:	eb63 0301 	sbc.w	r3, r3, r1
 8002dd4:	f04f 0000 	mov.w	r0, #0
 8002dd8:	f04f 0100 	mov.w	r1, #0
 8002ddc:	00d9      	lsls	r1, r3, #3
 8002dde:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002de2:	00d0      	lsls	r0, r2, #3
 8002de4:	4602      	mov	r2, r0
 8002de6:	460b      	mov	r3, r1
 8002de8:	eb12 0208 	adds.w	r2, r2, r8
 8002dec:	eb43 0309 	adc.w	r3, r3, r9
 8002df0:	f04f 0000 	mov.w	r0, #0
 8002df4:	f04f 0100 	mov.w	r1, #0
 8002df8:	0259      	lsls	r1, r3, #9
 8002dfa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002dfe:	0250      	lsls	r0, r2, #9
 8002e00:	4602      	mov	r2, r0
 8002e02:	460b      	mov	r3, r1
 8002e04:	4610      	mov	r0, r2
 8002e06:	4619      	mov	r1, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	f04f 0300 	mov.w	r3, #0
 8002e10:	f7fd fa3e 	bl	8000290 <__aeabi_uldivmod>
 8002e14:	4602      	mov	r2, r0
 8002e16:	460b      	mov	r3, r1
 8002e18:	4613      	mov	r3, r2
 8002e1a:	60fb      	str	r3, [r7, #12]
 8002e1c:	e04a      	b.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e1e:	4b31      	ldr	r3, [pc, #196]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	099b      	lsrs	r3, r3, #6
 8002e24:	461a      	mov	r2, r3
 8002e26:	f04f 0300 	mov.w	r3, #0
 8002e2a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e2e:	f04f 0100 	mov.w	r1, #0
 8002e32:	ea02 0400 	and.w	r4, r2, r0
 8002e36:	ea03 0501 	and.w	r5, r3, r1
 8002e3a:	4620      	mov	r0, r4
 8002e3c:	4629      	mov	r1, r5
 8002e3e:	f04f 0200 	mov.w	r2, #0
 8002e42:	f04f 0300 	mov.w	r3, #0
 8002e46:	014b      	lsls	r3, r1, #5
 8002e48:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e4c:	0142      	lsls	r2, r0, #5
 8002e4e:	4610      	mov	r0, r2
 8002e50:	4619      	mov	r1, r3
 8002e52:	1b00      	subs	r0, r0, r4
 8002e54:	eb61 0105 	sbc.w	r1, r1, r5
 8002e58:	f04f 0200 	mov.w	r2, #0
 8002e5c:	f04f 0300 	mov.w	r3, #0
 8002e60:	018b      	lsls	r3, r1, #6
 8002e62:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e66:	0182      	lsls	r2, r0, #6
 8002e68:	1a12      	subs	r2, r2, r0
 8002e6a:	eb63 0301 	sbc.w	r3, r3, r1
 8002e6e:	f04f 0000 	mov.w	r0, #0
 8002e72:	f04f 0100 	mov.w	r1, #0
 8002e76:	00d9      	lsls	r1, r3, #3
 8002e78:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e7c:	00d0      	lsls	r0, r2, #3
 8002e7e:	4602      	mov	r2, r0
 8002e80:	460b      	mov	r3, r1
 8002e82:	1912      	adds	r2, r2, r4
 8002e84:	eb45 0303 	adc.w	r3, r5, r3
 8002e88:	f04f 0000 	mov.w	r0, #0
 8002e8c:	f04f 0100 	mov.w	r1, #0
 8002e90:	0299      	lsls	r1, r3, #10
 8002e92:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002e96:	0290      	lsls	r0, r2, #10
 8002e98:	4602      	mov	r2, r0
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	4610      	mov	r0, r2
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	f04f 0300 	mov.w	r3, #0
 8002ea8:	f7fd f9f2 	bl	8000290 <__aeabi_uldivmod>
 8002eac:	4602      	mov	r2, r0
 8002eae:	460b      	mov	r3, r1
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002eb4:	4b0b      	ldr	r3, [pc, #44]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	0c1b      	lsrs	r3, r3, #16
 8002eba:	f003 0303 	and.w	r3, r3, #3
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ecc:	60bb      	str	r3, [r7, #8]
      break;
 8002ece:	e002      	b.n	8002ed6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ed0:	4b05      	ldr	r3, [pc, #20]	; (8002ee8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002ed2:	60bb      	str	r3, [r7, #8]
      break;
 8002ed4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ed6:	68bb      	ldr	r3, [r7, #8]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	00f42400 	.word	0x00f42400
 8002eec:	007a1200 	.word	0x007a1200

08002ef0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ef4:	4b03      	ldr	r3, [pc, #12]	; (8002f04 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	20000000 	.word	0x20000000

08002f08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f0c:	f7ff fff0 	bl	8002ef0 <HAL_RCC_GetHCLKFreq>
 8002f10:	4602      	mov	r2, r0
 8002f12:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	0a9b      	lsrs	r3, r3, #10
 8002f18:	f003 0307 	and.w	r3, r3, #7
 8002f1c:	4903      	ldr	r1, [pc, #12]	; (8002f2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f1e:	5ccb      	ldrb	r3, [r1, r3]
 8002f20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40023800 	.word	0x40023800
 8002f2c:	080175dc 	.word	0x080175dc

08002f30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f34:	f7ff ffdc 	bl	8002ef0 <HAL_RCC_GetHCLKFreq>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	4b05      	ldr	r3, [pc, #20]	; (8002f50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	0b5b      	lsrs	r3, r3, #13
 8002f40:	f003 0307 	and.w	r3, r3, #7
 8002f44:	4903      	ldr	r1, [pc, #12]	; (8002f54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f46:	5ccb      	ldrb	r3, [r1, r3]
 8002f48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40023800 	.word	0x40023800
 8002f54:	080175dc 	.word	0x080175dc

08002f58 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	220f      	movs	r2, #15
 8002f66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f68:	4b12      	ldr	r3, [pc, #72]	; (8002fb4 <HAL_RCC_GetClockConfig+0x5c>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f003 0203 	and.w	r2, r3, #3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002f74:	4b0f      	ldr	r3, [pc, #60]	; (8002fb4 <HAL_RCC_GetClockConfig+0x5c>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002f80:	4b0c      	ldr	r3, [pc, #48]	; (8002fb4 <HAL_RCC_GetClockConfig+0x5c>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002f8c:	4b09      	ldr	r3, [pc, #36]	; (8002fb4 <HAL_RCC_GetClockConfig+0x5c>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	08db      	lsrs	r3, r3, #3
 8002f92:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f9a:	4b07      	ldr	r3, [pc, #28]	; (8002fb8 <HAL_RCC_GetClockConfig+0x60>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 020f 	and.w	r2, r3, #15
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	601a      	str	r2, [r3, #0]
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	40023c00 	.word	0x40023c00

08002fbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e041      	b.n	8003052 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d106      	bne.n	8002fe8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f839 	bl	800305a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2202      	movs	r2, #2
 8002fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	3304      	adds	r3, #4
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4610      	mov	r0, r2
 8002ffc:	f000 f9d8 	bl	80033b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800305a:	b480      	push	{r7}
 800305c:	b083      	sub	sp, #12
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003062:	bf00      	nop
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
	...

08003070 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b01      	cmp	r3, #1
 8003082:	d001      	beq.n	8003088 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e04e      	b.n	8003126 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2202      	movs	r2, #2
 800308c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68da      	ldr	r2, [r3, #12]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f042 0201 	orr.w	r2, r2, #1
 800309e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a23      	ldr	r2, [pc, #140]	; (8003134 <HAL_TIM_Base_Start_IT+0xc4>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d022      	beq.n	80030f0 <HAL_TIM_Base_Start_IT+0x80>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030b2:	d01d      	beq.n	80030f0 <HAL_TIM_Base_Start_IT+0x80>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a1f      	ldr	r2, [pc, #124]	; (8003138 <HAL_TIM_Base_Start_IT+0xc8>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d018      	beq.n	80030f0 <HAL_TIM_Base_Start_IT+0x80>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a1e      	ldr	r2, [pc, #120]	; (800313c <HAL_TIM_Base_Start_IT+0xcc>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d013      	beq.n	80030f0 <HAL_TIM_Base_Start_IT+0x80>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a1c      	ldr	r2, [pc, #112]	; (8003140 <HAL_TIM_Base_Start_IT+0xd0>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d00e      	beq.n	80030f0 <HAL_TIM_Base_Start_IT+0x80>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a1b      	ldr	r2, [pc, #108]	; (8003144 <HAL_TIM_Base_Start_IT+0xd4>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d009      	beq.n	80030f0 <HAL_TIM_Base_Start_IT+0x80>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a19      	ldr	r2, [pc, #100]	; (8003148 <HAL_TIM_Base_Start_IT+0xd8>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d004      	beq.n	80030f0 <HAL_TIM_Base_Start_IT+0x80>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a18      	ldr	r2, [pc, #96]	; (800314c <HAL_TIM_Base_Start_IT+0xdc>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d111      	bne.n	8003114 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2b06      	cmp	r3, #6
 8003100:	d010      	beq.n	8003124 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f042 0201 	orr.w	r2, r2, #1
 8003110:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003112:	e007      	b.n	8003124 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f042 0201 	orr.w	r2, r2, #1
 8003122:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3714      	adds	r7, #20
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	40010000 	.word	0x40010000
 8003138:	40000400 	.word	0x40000400
 800313c:	40000800 	.word	0x40000800
 8003140:	40000c00 	.word	0x40000c00
 8003144:	40010400 	.word	0x40010400
 8003148:	40014000 	.word	0x40014000
 800314c:	40001800 	.word	0x40001800

08003150 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b02      	cmp	r3, #2
 8003164:	d122      	bne.n	80031ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b02      	cmp	r3, #2
 8003172:	d11b      	bne.n	80031ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f06f 0202 	mvn.w	r2, #2
 800317c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	f003 0303 	and.w	r3, r3, #3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f8ee 	bl	8003374 <HAL_TIM_IC_CaptureCallback>
 8003198:	e005      	b.n	80031a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f8e0 	bl	8003360 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 f8f1 	bl	8003388 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	f003 0304 	and.w	r3, r3, #4
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	d122      	bne.n	8003200 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	2b04      	cmp	r3, #4
 80031c6:	d11b      	bne.n	8003200 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f06f 0204 	mvn.w	r2, #4
 80031d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2202      	movs	r2, #2
 80031d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 f8c4 	bl	8003374 <HAL_TIM_IC_CaptureCallback>
 80031ec:	e005      	b.n	80031fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f8b6 	bl	8003360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 f8c7 	bl	8003388 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	f003 0308 	and.w	r3, r3, #8
 800320a:	2b08      	cmp	r3, #8
 800320c:	d122      	bne.n	8003254 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	f003 0308 	and.w	r3, r3, #8
 8003218:	2b08      	cmp	r3, #8
 800321a:	d11b      	bne.n	8003254 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f06f 0208 	mvn.w	r2, #8
 8003224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2204      	movs	r2, #4
 800322a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	69db      	ldr	r3, [r3, #28]
 8003232:	f003 0303 	and.w	r3, r3, #3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 f89a 	bl	8003374 <HAL_TIM_IC_CaptureCallback>
 8003240:	e005      	b.n	800324e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f88c 	bl	8003360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 f89d 	bl	8003388 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	f003 0310 	and.w	r3, r3, #16
 800325e:	2b10      	cmp	r3, #16
 8003260:	d122      	bne.n	80032a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	f003 0310 	and.w	r3, r3, #16
 800326c:	2b10      	cmp	r3, #16
 800326e:	d11b      	bne.n	80032a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f06f 0210 	mvn.w	r2, #16
 8003278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2208      	movs	r2, #8
 800327e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f870 	bl	8003374 <HAL_TIM_IC_CaptureCallback>
 8003294:	e005      	b.n	80032a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f862 	bl	8003360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 f873 	bl	8003388 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d10e      	bne.n	80032d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d107      	bne.n	80032d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f06f 0201 	mvn.w	r2, #1
 80032cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7fd fb04 	bl	80008dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032de:	2b80      	cmp	r3, #128	; 0x80
 80032e0:	d10e      	bne.n	8003300 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ec:	2b80      	cmp	r3, #128	; 0x80
 80032ee:	d107      	bne.n	8003300 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f902 	bl	8003504 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800330a:	2b40      	cmp	r3, #64	; 0x40
 800330c:	d10e      	bne.n	800332c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003318:	2b40      	cmp	r3, #64	; 0x40
 800331a:	d107      	bne.n	800332c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f838 	bl	800339c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	f003 0320 	and.w	r3, r3, #32
 8003336:	2b20      	cmp	r3, #32
 8003338:	d10e      	bne.n	8003358 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	f003 0320 	and.w	r3, r3, #32
 8003344:	2b20      	cmp	r3, #32
 8003346:	d107      	bne.n	8003358 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f06f 0220 	mvn.w	r2, #32
 8003350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 f8cc 	bl	80034f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003358:	bf00      	nop
 800335a:	3708      	adds	r7, #8
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a40      	ldr	r2, [pc, #256]	; (80034c4 <TIM_Base_SetConfig+0x114>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d013      	beq.n	80033f0 <TIM_Base_SetConfig+0x40>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ce:	d00f      	beq.n	80033f0 <TIM_Base_SetConfig+0x40>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a3d      	ldr	r2, [pc, #244]	; (80034c8 <TIM_Base_SetConfig+0x118>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d00b      	beq.n	80033f0 <TIM_Base_SetConfig+0x40>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a3c      	ldr	r2, [pc, #240]	; (80034cc <TIM_Base_SetConfig+0x11c>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d007      	beq.n	80033f0 <TIM_Base_SetConfig+0x40>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a3b      	ldr	r2, [pc, #236]	; (80034d0 <TIM_Base_SetConfig+0x120>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d003      	beq.n	80033f0 <TIM_Base_SetConfig+0x40>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a3a      	ldr	r2, [pc, #232]	; (80034d4 <TIM_Base_SetConfig+0x124>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d108      	bne.n	8003402 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	4313      	orrs	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a2f      	ldr	r2, [pc, #188]	; (80034c4 <TIM_Base_SetConfig+0x114>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d02b      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003410:	d027      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a2c      	ldr	r2, [pc, #176]	; (80034c8 <TIM_Base_SetConfig+0x118>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d023      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a2b      	ldr	r2, [pc, #172]	; (80034cc <TIM_Base_SetConfig+0x11c>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d01f      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a2a      	ldr	r2, [pc, #168]	; (80034d0 <TIM_Base_SetConfig+0x120>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d01b      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a29      	ldr	r2, [pc, #164]	; (80034d4 <TIM_Base_SetConfig+0x124>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d017      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a28      	ldr	r2, [pc, #160]	; (80034d8 <TIM_Base_SetConfig+0x128>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d013      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a27      	ldr	r2, [pc, #156]	; (80034dc <TIM_Base_SetConfig+0x12c>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d00f      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a26      	ldr	r2, [pc, #152]	; (80034e0 <TIM_Base_SetConfig+0x130>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d00b      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a25      	ldr	r2, [pc, #148]	; (80034e4 <TIM_Base_SetConfig+0x134>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d007      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a24      	ldr	r2, [pc, #144]	; (80034e8 <TIM_Base_SetConfig+0x138>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d003      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a23      	ldr	r2, [pc, #140]	; (80034ec <TIM_Base_SetConfig+0x13c>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d108      	bne.n	8003474 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003468:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	4313      	orrs	r3, r2
 8003472:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	4313      	orrs	r3, r2
 8003480:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a0a      	ldr	r2, [pc, #40]	; (80034c4 <TIM_Base_SetConfig+0x114>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d003      	beq.n	80034a8 <TIM_Base_SetConfig+0xf8>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a0c      	ldr	r2, [pc, #48]	; (80034d4 <TIM_Base_SetConfig+0x124>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d103      	bne.n	80034b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	691a      	ldr	r2, [r3, #16]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	615a      	str	r2, [r3, #20]
}
 80034b6:	bf00      	nop
 80034b8:	3714      	adds	r7, #20
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	40010000 	.word	0x40010000
 80034c8:	40000400 	.word	0x40000400
 80034cc:	40000800 	.word	0x40000800
 80034d0:	40000c00 	.word	0x40000c00
 80034d4:	40010400 	.word	0x40010400
 80034d8:	40014000 	.word	0x40014000
 80034dc:	40014400 	.word	0x40014400
 80034e0:	40014800 	.word	0x40014800
 80034e4:	40001800 	.word	0x40001800
 80034e8:	40001c00 	.word	0x40001c00
 80034ec:	40002000 	.word	0x40002000

080034f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e03f      	b.n	80035aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d106      	bne.n	8003544 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7fd fa10 	bl	8000964 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2224      	movs	r2, #36	; 0x24
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68da      	ldr	r2, [r3, #12]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800355a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 f829 	bl	80035b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	691a      	ldr	r2, [r3, #16]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003570:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	695a      	ldr	r2, [r3, #20]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003580:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68da      	ldr	r2, [r3, #12]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003590:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2220      	movs	r2, #32
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2220      	movs	r2, #32
 80035a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
	...

080035b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035b8:	b09f      	sub	sp, #124	; 0x7c
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80035c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ca:	68d9      	ldr	r1, [r3, #12]
 80035cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	ea40 0301 	orr.w	r3, r0, r1
 80035d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035d8:	689a      	ldr	r2, [r3, #8]
 80035da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	431a      	orrs	r2, r3
 80035e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035e2:	695b      	ldr	r3, [r3, #20]
 80035e4:	431a      	orrs	r2, r3
 80035e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80035ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80035f8:	f021 010c 	bic.w	r1, r1, #12
 80035fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003602:	430b      	orrs	r3, r1
 8003604:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	695b      	ldr	r3, [r3, #20]
 800360c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003612:	6999      	ldr	r1, [r3, #24]
 8003614:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	ea40 0301 	orr.w	r3, r0, r1
 800361c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800361e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	4bc5      	ldr	r3, [pc, #788]	; (8003938 <UART_SetConfig+0x384>)
 8003624:	429a      	cmp	r2, r3
 8003626:	d004      	beq.n	8003632 <UART_SetConfig+0x7e>
 8003628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	4bc3      	ldr	r3, [pc, #780]	; (800393c <UART_SetConfig+0x388>)
 800362e:	429a      	cmp	r2, r3
 8003630:	d103      	bne.n	800363a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003632:	f7ff fc7d 	bl	8002f30 <HAL_RCC_GetPCLK2Freq>
 8003636:	6778      	str	r0, [r7, #116]	; 0x74
 8003638:	e002      	b.n	8003640 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800363a:	f7ff fc65 	bl	8002f08 <HAL_RCC_GetPCLK1Freq>
 800363e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003642:	69db      	ldr	r3, [r3, #28]
 8003644:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003648:	f040 80b6 	bne.w	80037b8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800364c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800364e:	461c      	mov	r4, r3
 8003650:	f04f 0500 	mov.w	r5, #0
 8003654:	4622      	mov	r2, r4
 8003656:	462b      	mov	r3, r5
 8003658:	1891      	adds	r1, r2, r2
 800365a:	6439      	str	r1, [r7, #64]	; 0x40
 800365c:	415b      	adcs	r3, r3
 800365e:	647b      	str	r3, [r7, #68]	; 0x44
 8003660:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003664:	1912      	adds	r2, r2, r4
 8003666:	eb45 0303 	adc.w	r3, r5, r3
 800366a:	f04f 0000 	mov.w	r0, #0
 800366e:	f04f 0100 	mov.w	r1, #0
 8003672:	00d9      	lsls	r1, r3, #3
 8003674:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003678:	00d0      	lsls	r0, r2, #3
 800367a:	4602      	mov	r2, r0
 800367c:	460b      	mov	r3, r1
 800367e:	1911      	adds	r1, r2, r4
 8003680:	6639      	str	r1, [r7, #96]	; 0x60
 8003682:	416b      	adcs	r3, r5
 8003684:	667b      	str	r3, [r7, #100]	; 0x64
 8003686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	461a      	mov	r2, r3
 800368c:	f04f 0300 	mov.w	r3, #0
 8003690:	1891      	adds	r1, r2, r2
 8003692:	63b9      	str	r1, [r7, #56]	; 0x38
 8003694:	415b      	adcs	r3, r3
 8003696:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003698:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800369c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80036a0:	f7fc fdf6 	bl	8000290 <__aeabi_uldivmod>
 80036a4:	4602      	mov	r2, r0
 80036a6:	460b      	mov	r3, r1
 80036a8:	4ba5      	ldr	r3, [pc, #660]	; (8003940 <UART_SetConfig+0x38c>)
 80036aa:	fba3 2302 	umull	r2, r3, r3, r2
 80036ae:	095b      	lsrs	r3, r3, #5
 80036b0:	011e      	lsls	r6, r3, #4
 80036b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036b4:	461c      	mov	r4, r3
 80036b6:	f04f 0500 	mov.w	r5, #0
 80036ba:	4622      	mov	r2, r4
 80036bc:	462b      	mov	r3, r5
 80036be:	1891      	adds	r1, r2, r2
 80036c0:	6339      	str	r1, [r7, #48]	; 0x30
 80036c2:	415b      	adcs	r3, r3
 80036c4:	637b      	str	r3, [r7, #52]	; 0x34
 80036c6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80036ca:	1912      	adds	r2, r2, r4
 80036cc:	eb45 0303 	adc.w	r3, r5, r3
 80036d0:	f04f 0000 	mov.w	r0, #0
 80036d4:	f04f 0100 	mov.w	r1, #0
 80036d8:	00d9      	lsls	r1, r3, #3
 80036da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036de:	00d0      	lsls	r0, r2, #3
 80036e0:	4602      	mov	r2, r0
 80036e2:	460b      	mov	r3, r1
 80036e4:	1911      	adds	r1, r2, r4
 80036e6:	65b9      	str	r1, [r7, #88]	; 0x58
 80036e8:	416b      	adcs	r3, r5
 80036ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	461a      	mov	r2, r3
 80036f2:	f04f 0300 	mov.w	r3, #0
 80036f6:	1891      	adds	r1, r2, r2
 80036f8:	62b9      	str	r1, [r7, #40]	; 0x28
 80036fa:	415b      	adcs	r3, r3
 80036fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003702:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003706:	f7fc fdc3 	bl	8000290 <__aeabi_uldivmod>
 800370a:	4602      	mov	r2, r0
 800370c:	460b      	mov	r3, r1
 800370e:	4b8c      	ldr	r3, [pc, #560]	; (8003940 <UART_SetConfig+0x38c>)
 8003710:	fba3 1302 	umull	r1, r3, r3, r2
 8003714:	095b      	lsrs	r3, r3, #5
 8003716:	2164      	movs	r1, #100	; 0x64
 8003718:	fb01 f303 	mul.w	r3, r1, r3
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	3332      	adds	r3, #50	; 0x32
 8003722:	4a87      	ldr	r2, [pc, #540]	; (8003940 <UART_SetConfig+0x38c>)
 8003724:	fba2 2303 	umull	r2, r3, r2, r3
 8003728:	095b      	lsrs	r3, r3, #5
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003730:	441e      	add	r6, r3
 8003732:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003734:	4618      	mov	r0, r3
 8003736:	f04f 0100 	mov.w	r1, #0
 800373a:	4602      	mov	r2, r0
 800373c:	460b      	mov	r3, r1
 800373e:	1894      	adds	r4, r2, r2
 8003740:	623c      	str	r4, [r7, #32]
 8003742:	415b      	adcs	r3, r3
 8003744:	627b      	str	r3, [r7, #36]	; 0x24
 8003746:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800374a:	1812      	adds	r2, r2, r0
 800374c:	eb41 0303 	adc.w	r3, r1, r3
 8003750:	f04f 0400 	mov.w	r4, #0
 8003754:	f04f 0500 	mov.w	r5, #0
 8003758:	00dd      	lsls	r5, r3, #3
 800375a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800375e:	00d4      	lsls	r4, r2, #3
 8003760:	4622      	mov	r2, r4
 8003762:	462b      	mov	r3, r5
 8003764:	1814      	adds	r4, r2, r0
 8003766:	653c      	str	r4, [r7, #80]	; 0x50
 8003768:	414b      	adcs	r3, r1
 800376a:	657b      	str	r3, [r7, #84]	; 0x54
 800376c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	461a      	mov	r2, r3
 8003772:	f04f 0300 	mov.w	r3, #0
 8003776:	1891      	adds	r1, r2, r2
 8003778:	61b9      	str	r1, [r7, #24]
 800377a:	415b      	adcs	r3, r3
 800377c:	61fb      	str	r3, [r7, #28]
 800377e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003782:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003786:	f7fc fd83 	bl	8000290 <__aeabi_uldivmod>
 800378a:	4602      	mov	r2, r0
 800378c:	460b      	mov	r3, r1
 800378e:	4b6c      	ldr	r3, [pc, #432]	; (8003940 <UART_SetConfig+0x38c>)
 8003790:	fba3 1302 	umull	r1, r3, r3, r2
 8003794:	095b      	lsrs	r3, r3, #5
 8003796:	2164      	movs	r1, #100	; 0x64
 8003798:	fb01 f303 	mul.w	r3, r1, r3
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	3332      	adds	r3, #50	; 0x32
 80037a2:	4a67      	ldr	r2, [pc, #412]	; (8003940 <UART_SetConfig+0x38c>)
 80037a4:	fba2 2303 	umull	r2, r3, r2, r3
 80037a8:	095b      	lsrs	r3, r3, #5
 80037aa:	f003 0207 	and.w	r2, r3, #7
 80037ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4432      	add	r2, r6
 80037b4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037b6:	e0b9      	b.n	800392c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037ba:	461c      	mov	r4, r3
 80037bc:	f04f 0500 	mov.w	r5, #0
 80037c0:	4622      	mov	r2, r4
 80037c2:	462b      	mov	r3, r5
 80037c4:	1891      	adds	r1, r2, r2
 80037c6:	6139      	str	r1, [r7, #16]
 80037c8:	415b      	adcs	r3, r3
 80037ca:	617b      	str	r3, [r7, #20]
 80037cc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80037d0:	1912      	adds	r2, r2, r4
 80037d2:	eb45 0303 	adc.w	r3, r5, r3
 80037d6:	f04f 0000 	mov.w	r0, #0
 80037da:	f04f 0100 	mov.w	r1, #0
 80037de:	00d9      	lsls	r1, r3, #3
 80037e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037e4:	00d0      	lsls	r0, r2, #3
 80037e6:	4602      	mov	r2, r0
 80037e8:	460b      	mov	r3, r1
 80037ea:	eb12 0804 	adds.w	r8, r2, r4
 80037ee:	eb43 0905 	adc.w	r9, r3, r5
 80037f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f04f 0100 	mov.w	r1, #0
 80037fc:	f04f 0200 	mov.w	r2, #0
 8003800:	f04f 0300 	mov.w	r3, #0
 8003804:	008b      	lsls	r3, r1, #2
 8003806:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800380a:	0082      	lsls	r2, r0, #2
 800380c:	4640      	mov	r0, r8
 800380e:	4649      	mov	r1, r9
 8003810:	f7fc fd3e 	bl	8000290 <__aeabi_uldivmod>
 8003814:	4602      	mov	r2, r0
 8003816:	460b      	mov	r3, r1
 8003818:	4b49      	ldr	r3, [pc, #292]	; (8003940 <UART_SetConfig+0x38c>)
 800381a:	fba3 2302 	umull	r2, r3, r3, r2
 800381e:	095b      	lsrs	r3, r3, #5
 8003820:	011e      	lsls	r6, r3, #4
 8003822:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003824:	4618      	mov	r0, r3
 8003826:	f04f 0100 	mov.w	r1, #0
 800382a:	4602      	mov	r2, r0
 800382c:	460b      	mov	r3, r1
 800382e:	1894      	adds	r4, r2, r2
 8003830:	60bc      	str	r4, [r7, #8]
 8003832:	415b      	adcs	r3, r3
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800383a:	1812      	adds	r2, r2, r0
 800383c:	eb41 0303 	adc.w	r3, r1, r3
 8003840:	f04f 0400 	mov.w	r4, #0
 8003844:	f04f 0500 	mov.w	r5, #0
 8003848:	00dd      	lsls	r5, r3, #3
 800384a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800384e:	00d4      	lsls	r4, r2, #3
 8003850:	4622      	mov	r2, r4
 8003852:	462b      	mov	r3, r5
 8003854:	1814      	adds	r4, r2, r0
 8003856:	64bc      	str	r4, [r7, #72]	; 0x48
 8003858:	414b      	adcs	r3, r1
 800385a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800385c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	4618      	mov	r0, r3
 8003862:	f04f 0100 	mov.w	r1, #0
 8003866:	f04f 0200 	mov.w	r2, #0
 800386a:	f04f 0300 	mov.w	r3, #0
 800386e:	008b      	lsls	r3, r1, #2
 8003870:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003874:	0082      	lsls	r2, r0, #2
 8003876:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800387a:	f7fc fd09 	bl	8000290 <__aeabi_uldivmod>
 800387e:	4602      	mov	r2, r0
 8003880:	460b      	mov	r3, r1
 8003882:	4b2f      	ldr	r3, [pc, #188]	; (8003940 <UART_SetConfig+0x38c>)
 8003884:	fba3 1302 	umull	r1, r3, r3, r2
 8003888:	095b      	lsrs	r3, r3, #5
 800388a:	2164      	movs	r1, #100	; 0x64
 800388c:	fb01 f303 	mul.w	r3, r1, r3
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	011b      	lsls	r3, r3, #4
 8003894:	3332      	adds	r3, #50	; 0x32
 8003896:	4a2a      	ldr	r2, [pc, #168]	; (8003940 <UART_SetConfig+0x38c>)
 8003898:	fba2 2303 	umull	r2, r3, r2, r3
 800389c:	095b      	lsrs	r3, r3, #5
 800389e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038a2:	441e      	add	r6, r3
 80038a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038a6:	4618      	mov	r0, r3
 80038a8:	f04f 0100 	mov.w	r1, #0
 80038ac:	4602      	mov	r2, r0
 80038ae:	460b      	mov	r3, r1
 80038b0:	1894      	adds	r4, r2, r2
 80038b2:	603c      	str	r4, [r7, #0]
 80038b4:	415b      	adcs	r3, r3
 80038b6:	607b      	str	r3, [r7, #4]
 80038b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038bc:	1812      	adds	r2, r2, r0
 80038be:	eb41 0303 	adc.w	r3, r1, r3
 80038c2:	f04f 0400 	mov.w	r4, #0
 80038c6:	f04f 0500 	mov.w	r5, #0
 80038ca:	00dd      	lsls	r5, r3, #3
 80038cc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80038d0:	00d4      	lsls	r4, r2, #3
 80038d2:	4622      	mov	r2, r4
 80038d4:	462b      	mov	r3, r5
 80038d6:	eb12 0a00 	adds.w	sl, r2, r0
 80038da:	eb43 0b01 	adc.w	fp, r3, r1
 80038de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f04f 0100 	mov.w	r1, #0
 80038e8:	f04f 0200 	mov.w	r2, #0
 80038ec:	f04f 0300 	mov.w	r3, #0
 80038f0:	008b      	lsls	r3, r1, #2
 80038f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80038f6:	0082      	lsls	r2, r0, #2
 80038f8:	4650      	mov	r0, sl
 80038fa:	4659      	mov	r1, fp
 80038fc:	f7fc fcc8 	bl	8000290 <__aeabi_uldivmod>
 8003900:	4602      	mov	r2, r0
 8003902:	460b      	mov	r3, r1
 8003904:	4b0e      	ldr	r3, [pc, #56]	; (8003940 <UART_SetConfig+0x38c>)
 8003906:	fba3 1302 	umull	r1, r3, r3, r2
 800390a:	095b      	lsrs	r3, r3, #5
 800390c:	2164      	movs	r1, #100	; 0x64
 800390e:	fb01 f303 	mul.w	r3, r1, r3
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	011b      	lsls	r3, r3, #4
 8003916:	3332      	adds	r3, #50	; 0x32
 8003918:	4a09      	ldr	r2, [pc, #36]	; (8003940 <UART_SetConfig+0x38c>)
 800391a:	fba2 2303 	umull	r2, r3, r2, r3
 800391e:	095b      	lsrs	r3, r3, #5
 8003920:	f003 020f 	and.w	r2, r3, #15
 8003924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4432      	add	r2, r6
 800392a:	609a      	str	r2, [r3, #8]
}
 800392c:	bf00      	nop
 800392e:	377c      	adds	r7, #124	; 0x7c
 8003930:	46bd      	mov	sp, r7
 8003932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003936:	bf00      	nop
 8003938:	40011000 	.word	0x40011000
 800393c:	40011400 	.word	0x40011400
 8003940:	51eb851f 	.word	0x51eb851f

08003944 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003944:	b5b0      	push	{r4, r5, r7, lr}
 8003946:	b08e      	sub	sp, #56	; 0x38
 8003948:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800394a:	2100      	movs	r1, #0
 800394c:	2000      	movs	r0, #0
 800394e:	f003 fd25 	bl	800739c <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8003952:	4b2a      	ldr	r3, [pc, #168]	; (80039fc <MX_LWIP_Init+0xb8>)
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8003958:	4b29      	ldr	r3, [pc, #164]	; (8003a00 <MX_LWIP_Init+0xbc>)
 800395a:	2200      	movs	r2, #0
 800395c:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800395e:	4b29      	ldr	r3, [pc, #164]	; (8003a04 <MX_LWIP_Init+0xc0>)
 8003960:	2200      	movs	r2, #0
 8003962:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8003964:	4b28      	ldr	r3, [pc, #160]	; (8003a08 <MX_LWIP_Init+0xc4>)
 8003966:	9302      	str	r3, [sp, #8]
 8003968:	4b28      	ldr	r3, [pc, #160]	; (8003a0c <MX_LWIP_Init+0xc8>)
 800396a:	9301      	str	r3, [sp, #4]
 800396c:	2300      	movs	r3, #0
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	4b24      	ldr	r3, [pc, #144]	; (8003a04 <MX_LWIP_Init+0xc0>)
 8003972:	4a23      	ldr	r2, [pc, #140]	; (8003a00 <MX_LWIP_Init+0xbc>)
 8003974:	4921      	ldr	r1, [pc, #132]	; (80039fc <MX_LWIP_Init+0xb8>)
 8003976:	4826      	ldr	r0, [pc, #152]	; (8003a10 <MX_LWIP_Init+0xcc>)
 8003978:	f004 fa94 	bl	8007ea4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800397c:	4824      	ldr	r0, [pc, #144]	; (8003a10 <MX_LWIP_Init+0xcc>)
 800397e:	f004 fc4b 	bl	8008218 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8003982:	4b23      	ldr	r3, [pc, #140]	; (8003a10 <MX_LWIP_Init+0xcc>)
 8003984:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003988:	089b      	lsrs	r3, r3, #2
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b00      	cmp	r3, #0
 8003992:	d003      	beq.n	800399c <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003994:	481e      	ldr	r0, [pc, #120]	; (8003a10 <MX_LWIP_Init+0xcc>)
 8003996:	f004 fc4f 	bl	8008238 <netif_set_up>
 800399a:	e002      	b.n	80039a2 <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800399c:	481c      	ldr	r0, [pc, #112]	; (8003a10 <MX_LWIP_Init+0xcc>)
 800399e:	f004 fcb7 	bl	8008310 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80039a2:	491c      	ldr	r1, [pc, #112]	; (8003a14 <MX_LWIP_Init+0xd0>)
 80039a4:	481a      	ldr	r0, [pc, #104]	; (8003a10 <MX_LWIP_Init+0xcc>)
 80039a6:	f004 fd4d 	bl	8008444 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 80039aa:	2300      	movs	r3, #0
 80039ac:	623b      	str	r3, [r7, #32]
 80039ae:	2300      	movs	r3, #0
 80039b0:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 80039b2:	f107 0320 	add.w	r3, r7, #32
 80039b6:	2101      	movs	r1, #1
 80039b8:	4618      	mov	r0, r3
 80039ba:	f000 fda1 	bl	8004500 <osSemaphoreCreate>
 80039be:	4603      	mov	r3, r0
 80039c0:	4a15      	ldr	r2, [pc, #84]	; (8003a18 <MX_LWIP_Init+0xd4>)
 80039c2:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 80039c4:	4b15      	ldr	r3, [pc, #84]	; (8003a1c <MX_LWIP_Init+0xd8>)
 80039c6:	4a12      	ldr	r2, [pc, #72]	; (8003a10 <MX_LWIP_Init+0xcc>)
 80039c8:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 80039ca:	4b13      	ldr	r3, [pc, #76]	; (8003a18 <MX_LWIP_Init+0xd4>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a13      	ldr	r2, [pc, #76]	; (8003a1c <MX_LWIP_Init+0xd8>)
 80039d0:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 80039d2:	4b13      	ldr	r3, [pc, #76]	; (8003a20 <MX_LWIP_Init+0xdc>)
 80039d4:	1d3c      	adds	r4, r7, #4
 80039d6:	461d      	mov	r5, r3
 80039d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80039e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 80039e4:	1d3b      	adds	r3, r7, #4
 80039e6:	490d      	ldr	r1, [pc, #52]	; (8003a1c <MX_LWIP_Init+0xd8>)
 80039e8:	4618      	mov	r0, r3
 80039ea:	f000 fc8c 	bl	8004306 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 80039ee:	4808      	ldr	r0, [pc, #32]	; (8003a10 <MX_LWIP_Init+0xcc>)
 80039f0:	f00b fe8a 	bl	800f708 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80039f4:	bf00      	nop
 80039f6:	3728      	adds	r7, #40	; 0x28
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bdb0      	pop	{r4, r5, r7, pc}
 80039fc:	2000872c 	.word	0x2000872c
 8003a00:	20008730 	.word	0x20008730
 8003a04:	20008734 	.word	0x20008734
 8003a08:	080072d9 	.word	0x080072d9
 8003a0c:	08004095 	.word	0x08004095
 8003a10:	200086f4 	.word	0x200086f4
 8003a14:	08004179 	.word	0x08004179
 8003a18:	20000358 	.word	0x20000358
 8003a1c:	200086ec 	.word	0x200086ec
 8003a20:	08014708 	.word	0x08014708

08003a24 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b08e      	sub	sp, #56	; 0x38
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	605a      	str	r2, [r3, #4]
 8003a36:	609a      	str	r2, [r3, #8]
 8003a38:	60da      	str	r2, [r3, #12]
 8003a3a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a59      	ldr	r2, [pc, #356]	; (8003ba8 <HAL_ETH_MspInit+0x184>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	f040 80ac 	bne.w	8003ba0 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003a48:	2300      	movs	r3, #0
 8003a4a:	623b      	str	r3, [r7, #32]
 8003a4c:	4b57      	ldr	r3, [pc, #348]	; (8003bac <HAL_ETH_MspInit+0x188>)
 8003a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a50:	4a56      	ldr	r2, [pc, #344]	; (8003bac <HAL_ETH_MspInit+0x188>)
 8003a52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a56:	6313      	str	r3, [r2, #48]	; 0x30
 8003a58:	4b54      	ldr	r3, [pc, #336]	; (8003bac <HAL_ETH_MspInit+0x188>)
 8003a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a60:	623b      	str	r3, [r7, #32]
 8003a62:	6a3b      	ldr	r3, [r7, #32]
 8003a64:	2300      	movs	r3, #0
 8003a66:	61fb      	str	r3, [r7, #28]
 8003a68:	4b50      	ldr	r3, [pc, #320]	; (8003bac <HAL_ETH_MspInit+0x188>)
 8003a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6c:	4a4f      	ldr	r2, [pc, #316]	; (8003bac <HAL_ETH_MspInit+0x188>)
 8003a6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a72:	6313      	str	r3, [r2, #48]	; 0x30
 8003a74:	4b4d      	ldr	r3, [pc, #308]	; (8003bac <HAL_ETH_MspInit+0x188>)
 8003a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a7c:	61fb      	str	r3, [r7, #28]
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	2300      	movs	r3, #0
 8003a82:	61bb      	str	r3, [r7, #24]
 8003a84:	4b49      	ldr	r3, [pc, #292]	; (8003bac <HAL_ETH_MspInit+0x188>)
 8003a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a88:	4a48      	ldr	r2, [pc, #288]	; (8003bac <HAL_ETH_MspInit+0x188>)
 8003a8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a8e:	6313      	str	r3, [r2, #48]	; 0x30
 8003a90:	4b46      	ldr	r3, [pc, #280]	; (8003bac <HAL_ETH_MspInit+0x188>)
 8003a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a98:	61bb      	str	r3, [r7, #24]
 8003a9a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	617b      	str	r3, [r7, #20]
 8003aa0:	4b42      	ldr	r3, [pc, #264]	; (8003bac <HAL_ETH_MspInit+0x188>)
 8003aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa4:	4a41      	ldr	r2, [pc, #260]	; (8003bac <HAL_ETH_MspInit+0x188>)
 8003aa6:	f043 0304 	orr.w	r3, r3, #4
 8003aaa:	6313      	str	r3, [r2, #48]	; 0x30
 8003aac:	4b3f      	ldr	r3, [pc, #252]	; (8003bac <HAL_ETH_MspInit+0x188>)
 8003aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab0:	f003 0304 	and.w	r3, r3, #4
 8003ab4:	617b      	str	r3, [r7, #20]
 8003ab6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ab8:	2300      	movs	r3, #0
 8003aba:	613b      	str	r3, [r7, #16]
 8003abc:	4b3b      	ldr	r3, [pc, #236]	; (8003bac <HAL_ETH_MspInit+0x188>)
 8003abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac0:	4a3a      	ldr	r2, [pc, #232]	; (8003bac <HAL_ETH_MspInit+0x188>)
 8003ac2:	f043 0301 	orr.w	r3, r3, #1
 8003ac6:	6313      	str	r3, [r2, #48]	; 0x30
 8003ac8:	4b38      	ldr	r3, [pc, #224]	; (8003bac <HAL_ETH_MspInit+0x188>)
 8003aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	613b      	str	r3, [r7, #16]
 8003ad2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	4b34      	ldr	r3, [pc, #208]	; (8003bac <HAL_ETH_MspInit+0x188>)
 8003ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003adc:	4a33      	ldr	r2, [pc, #204]	; (8003bac <HAL_ETH_MspInit+0x188>)
 8003ade:	f043 0302 	orr.w	r3, r3, #2
 8003ae2:	6313      	str	r3, [r2, #48]	; 0x30
 8003ae4:	4b31      	ldr	r3, [pc, #196]	; (8003bac <HAL_ETH_MspInit+0x188>)
 8003ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	60fb      	str	r3, [r7, #12]
 8003aee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003af0:	2300      	movs	r3, #0
 8003af2:	60bb      	str	r3, [r7, #8]
 8003af4:	4b2d      	ldr	r3, [pc, #180]	; (8003bac <HAL_ETH_MspInit+0x188>)
 8003af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af8:	4a2c      	ldr	r2, [pc, #176]	; (8003bac <HAL_ETH_MspInit+0x188>)
 8003afa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003afe:	6313      	str	r3, [r2, #48]	; 0x30
 8003b00:	4b2a      	ldr	r3, [pc, #168]	; (8003bac <HAL_ETH_MspInit+0x188>)
 8003b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b08:	60bb      	str	r3, [r7, #8]
 8003b0a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003b0c:	2332      	movs	r3, #50	; 0x32
 8003b0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b10:	2302      	movs	r3, #2
 8003b12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b14:	2300      	movs	r3, #0
 8003b16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003b1c:	230b      	movs	r3, #11
 8003b1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b24:	4619      	mov	r1, r3
 8003b26:	4822      	ldr	r0, [pc, #136]	; (8003bb0 <HAL_ETH_MspInit+0x18c>)
 8003b28:	f7fe fbdc 	bl	80022e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003b2c:	2386      	movs	r3, #134	; 0x86
 8003b2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b30:	2302      	movs	r3, #2
 8003b32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b34:	2300      	movs	r3, #0
 8003b36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003b3c:	230b      	movs	r3, #11
 8003b3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b44:	4619      	mov	r1, r3
 8003b46:	481b      	ldr	r0, [pc, #108]	; (8003bb4 <HAL_ETH_MspInit+0x190>)
 8003b48:	f7fe fbcc 	bl	80022e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003b4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b52:	2302      	movs	r3, #2
 8003b54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b56:	2300      	movs	r3, #0
 8003b58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003b5e:	230b      	movs	r3, #11
 8003b60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003b62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b66:	4619      	mov	r1, r3
 8003b68:	4813      	ldr	r0, [pc, #76]	; (8003bb8 <HAL_ETH_MspInit+0x194>)
 8003b6a:	f7fe fbbb 	bl	80022e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003b6e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003b72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b74:	2302      	movs	r3, #2
 8003b76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003b80:	230b      	movs	r3, #11
 8003b82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b88:	4619      	mov	r1, r3
 8003b8a:	480c      	ldr	r0, [pc, #48]	; (8003bbc <HAL_ETH_MspInit+0x198>)
 8003b8c:	f7fe fbaa 	bl	80022e4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8003b90:	2200      	movs	r2, #0
 8003b92:	2105      	movs	r1, #5
 8003b94:	203d      	movs	r0, #61	; 0x3d
 8003b96:	f7fd f9d5 	bl	8000f44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8003b9a:	203d      	movs	r0, #61	; 0x3d
 8003b9c:	f7fd f9ee 	bl	8000f7c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003ba0:	bf00      	nop
 8003ba2:	3738      	adds	r7, #56	; 0x38
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	40028000 	.word	0x40028000
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	40020800 	.word	0x40020800
 8003bb4:	40020000 	.word	0x40020000
 8003bb8:	40020400 	.word	0x40020400
 8003bbc:	40021800 	.word	0x40021800

08003bc0 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8003bc8:	4b04      	ldr	r3, [pc, #16]	; (8003bdc <HAL_ETH_RxCpltCallback+0x1c>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 fd17 	bl	8004600 <osSemaphoreRelease>
}
 8003bd2:	bf00      	nop
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	2000035c 	.word	0x2000035c

08003be0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003be0:	b5b0      	push	{r4, r5, r7, lr}
 8003be2:	b090      	sub	sp, #64	; 0x40
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003be8:	2300      	movs	r3, #0
 8003bea:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003bec:	4b60      	ldr	r3, [pc, #384]	; (8003d70 <low_level_init+0x190>)
 8003bee:	4a61      	ldr	r2, [pc, #388]	; (8003d74 <low_level_init+0x194>)
 8003bf0:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8003bf2:	4b5f      	ldr	r3, [pc, #380]	; (8003d70 <low_level_init+0x190>)
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8003bf8:	4b5d      	ldr	r3, [pc, #372]	; (8003d70 <low_level_init+0x190>)
 8003bfa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003bfe:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003c00:	4b5b      	ldr	r3, [pc, #364]	; (8003d70 <low_level_init+0x190>)
 8003c02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c06:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8003c08:	4b59      	ldr	r3, [pc, #356]	; (8003d70 <low_level_init+0x190>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8003c14:	2380      	movs	r3, #128	; 0x80
 8003c16:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8003c1a:	23e1      	movs	r3, #225	; 0xe1
 8003c1c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0xFE;
 8003c20:	23fe      	movs	r3, #254	; 0xfe
 8003c22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0xEC;
 8003c26:	23ec      	movs	r3, #236	; 0xec
 8003c28:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x75;
 8003c2c:	2375      	movs	r3, #117	; 0x75
 8003c2e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8003c32:	4a4f      	ldr	r2, [pc, #316]	; (8003d70 <low_level_init+0x190>)
 8003c34:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003c38:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8003c3a:	4b4d      	ldr	r3, [pc, #308]	; (8003d70 <low_level_init+0x190>)
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8003c40:	4b4b      	ldr	r3, [pc, #300]	; (8003d70 <low_level_init+0x190>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8003c46:	4b4a      	ldr	r3, [pc, #296]	; (8003d70 <low_level_init+0x190>)
 8003c48:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003c4c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003c4e:	4848      	ldr	r0, [pc, #288]	; (8003d70 <low_level_init+0x190>)
 8003c50:	f7fd f9a2 	bl	8000f98 <HAL_ETH_Init>
 8003c54:	4603      	mov	r3, r0
 8003c56:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8003c5a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d108      	bne.n	8003c74 <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003c68:	f043 0304 	orr.w	r3, r3, #4
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8003c74:	2304      	movs	r3, #4
 8003c76:	4a40      	ldr	r2, [pc, #256]	; (8003d78 <low_level_init+0x198>)
 8003c78:	4940      	ldr	r1, [pc, #256]	; (8003d7c <low_level_init+0x19c>)
 8003c7a:	483d      	ldr	r0, [pc, #244]	; (8003d70 <low_level_init+0x190>)
 8003c7c:	f7fd fb28 	bl	80012d0 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8003c80:	2304      	movs	r3, #4
 8003c82:	4a3f      	ldr	r2, [pc, #252]	; (8003d80 <low_level_init+0x1a0>)
 8003c84:	493f      	ldr	r1, [pc, #252]	; (8003d84 <low_level_init+0x1a4>)
 8003c86:	483a      	ldr	r0, [pc, #232]	; (8003d70 <low_level_init+0x190>)
 8003c88:	f7fd fb8b 	bl	80013a2 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2206      	movs	r2, #6
 8003c90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003c94:	4b36      	ldr	r3, [pc, #216]	; (8003d70 <low_level_init+0x190>)
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	781a      	ldrb	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003ca0:	4b33      	ldr	r3, [pc, #204]	; (8003d70 <low_level_init+0x190>)
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	785a      	ldrb	r2, [r3, #1]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003cac:	4b30      	ldr	r3, [pc, #192]	; (8003d70 <low_level_init+0x190>)
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	789a      	ldrb	r2, [r3, #2]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003cb8:	4b2d      	ldr	r3, [pc, #180]	; (8003d70 <low_level_init+0x190>)
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	78da      	ldrb	r2, [r3, #3]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003cc4:	4b2a      	ldr	r3, [pc, #168]	; (8003d70 <low_level_init+0x190>)
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	791a      	ldrb	r2, [r3, #4]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003cd0:	4b27      	ldr	r3, [pc, #156]	; (8003d70 <low_level_init+0x190>)
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	795a      	ldrb	r2, [r3, #5]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003ce2:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003cea:	f043 030a 	orr.w	r3, r3, #10
 8003cee:	b2da      	uxtb	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8003cfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d02:	2101      	movs	r1, #1
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 fbfb 	bl	8004500 <osSemaphoreCreate>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	4a1e      	ldr	r2, [pc, #120]	; (8003d88 <low_level_init+0x1a8>)
 8003d0e:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8003d10:	4b1e      	ldr	r3, [pc, #120]	; (8003d8c <low_level_init+0x1ac>)
 8003d12:	f107 040c 	add.w	r4, r7, #12
 8003d16:	461d      	mov	r5, r3
 8003d18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d1c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003d20:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8003d24:	f107 030c 	add.w	r3, r7, #12
 8003d28:	6879      	ldr	r1, [r7, #4]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f000 faeb 	bl	8004306 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8003d30:	480f      	ldr	r0, [pc, #60]	; (8003d70 <low_level_init+0x190>)
 8003d32:	f7fd fe5e 	bl	80019f2 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8003d36:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	211d      	movs	r1, #29
 8003d3e:	480c      	ldr	r0, [pc, #48]	; (8003d70 <low_level_init+0x190>)
 8003d40:	f7fd fd89 	bl	8001856 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8003d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d46:	f043 030b 	orr.w	r3, r3, #11
 8003d4a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8003d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d4e:	461a      	mov	r2, r3
 8003d50:	211d      	movs	r1, #29
 8003d52:	4807      	ldr	r0, [pc, #28]	; (8003d70 <low_level_init+0x190>)
 8003d54:	f7fd fde7 	bl	8001926 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8003d58:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	211d      	movs	r1, #29
 8003d60:	4803      	ldr	r0, [pc, #12]	; (8003d70 <low_level_init+0x190>)
 8003d62:	f7fd fd78 	bl	8001856 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003d66:	bf00      	nop
 8003d68:	3740      	adds	r7, #64	; 0x40
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bdb0      	pop	{r4, r5, r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	2000a008 	.word	0x2000a008
 8003d74:	40028000 	.word	0x40028000
 8003d78:	2000a050 	.word	0x2000a050
 8003d7c:	20008738 	.word	0x20008738
 8003d80:	200087b8 	.word	0x200087b8
 8003d84:	20009f88 	.word	0x20009f88
 8003d88:	2000035c 	.word	0x2000035c
 8003d8c:	0801472c 	.word	0x0801472c

08003d90 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b08a      	sub	sp, #40	; 0x28
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8003d9a:	4b4b      	ldr	r3, [pc, #300]	; (8003ec8 <low_level_output+0x138>)
 8003d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8003da2:	2300      	movs	r3, #0
 8003da4:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8003da6:	2300      	movs	r3, #0
 8003da8:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8003daa:	2300      	movs	r3, #0
 8003dac:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8003dae:	2300      	movs	r3, #0
 8003db0:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8003db2:	4b45      	ldr	r3, [pc, #276]	; (8003ec8 <low_level_output+0x138>)
 8003db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db6:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8003db8:	2300      	movs	r3, #0
 8003dba:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	623b      	str	r3, [r7, #32]
 8003dc0:	e05a      	b.n	8003e78 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	da03      	bge.n	8003dd2 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8003dca:	23f8      	movs	r3, #248	; 0xf8
 8003dcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8003dd0:	e05c      	b.n	8003e8c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8003dd2:	6a3b      	ldr	r3, [r7, #32]
 8003dd4:	895b      	ldrh	r3, [r3, #10]
 8003dd6:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003ddc:	e02f      	b.n	8003e3e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8003dde:	69fa      	ldr	r2, [r7, #28]
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	18d0      	adds	r0, r2, r3
 8003de4:	6a3b      	ldr	r3, [r7, #32]
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	18d1      	adds	r1, r2, r3
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8003df2:	3304      	adds	r3, #4
 8003df4:	461a      	mov	r2, r3
 8003df6:	f00f fcc0 	bl	801377a <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	da03      	bge.n	8003e10 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8003e08:	23f8      	movs	r3, #248	; 0xf8
 8003e0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8003e0e:	e03d      	b.n	8003e8c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003e20:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8003e22:	68ba      	ldr	r2, [r7, #8]
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003e2c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003e38:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	4413      	add	r3, r2
 8003e44:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d8c8      	bhi.n	8003dde <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8003e4c:	69fa      	ldr	r2, [r7, #28]
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	18d0      	adds	r0, r2, r3
 8003e52:	6a3b      	ldr	r3, [r7, #32]
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	4413      	add	r3, r2
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	f00f fc8c 	bl	801377a <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	4413      	add	r3, r2
 8003e68:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4413      	add	r3, r2
 8003e70:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	623b      	str	r3, [r7, #32]
 8003e78:	6a3b      	ldr	r3, [r7, #32]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1a1      	bne.n	8003dc2 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8003e7e:	6979      	ldr	r1, [r7, #20]
 8003e80:	4811      	ldr	r0, [pc, #68]	; (8003ec8 <low_level_output+0x138>)
 8003e82:	f7fd fafb 	bl	800147c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8003e86:	2300      	movs	r3, #0
 8003e88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8003e8c:	4b0e      	ldr	r3, [pc, #56]	; (8003ec8 <low_level_output+0x138>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e94:	3314      	adds	r3, #20
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0320 	and.w	r3, r3, #32
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00d      	beq.n	8003ebc <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8003ea0:	4b09      	ldr	r3, [pc, #36]	; (8003ec8 <low_level_output+0x138>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ea8:	3314      	adds	r3, #20
 8003eaa:	2220      	movs	r2, #32
 8003eac:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8003eae:	4b06      	ldr	r3, [pc, #24]	; (8003ec8 <low_level_output+0x138>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003eb6:	3304      	adds	r3, #4
 8003eb8:	2200      	movs	r2, #0
 8003eba:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8003ebc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3728      	adds	r7, #40	; 0x28
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	2000a008 	.word	0x2000a008

08003ecc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b08c      	sub	sp, #48	; 0x30
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8003edc:	2300      	movs	r3, #0
 8003ede:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8003eec:	2300      	movs	r3, #0
 8003eee:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8003ef0:	484f      	ldr	r0, [pc, #316]	; (8004030 <low_level_input+0x164>)
 8003ef2:	f7fd fbad 	bl	8001650 <HAL_ETH_GetReceivedFrame_IT>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d001      	beq.n	8003f00 <low_level_input+0x34>

    return NULL;
 8003efc:	2300      	movs	r3, #0
 8003efe:	e092      	b.n	8004026 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8003f00:	4b4b      	ldr	r3, [pc, #300]	; (8004030 <low_level_input+0x164>)
 8003f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f04:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8003f06:	4b4a      	ldr	r3, [pc, #296]	; (8004030 <low_level_input+0x164>)
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8003f0c:	89fb      	ldrh	r3, [r7, #14]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d007      	beq.n	8003f22 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8003f12:	89fb      	ldrh	r3, [r7, #14]
 8003f14:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8003f18:	4619      	mov	r1, r3
 8003f1a:	2000      	movs	r0, #0
 8003f1c:	f004 fb5c 	bl	80085d8 <pbuf_alloc>
 8003f20:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8003f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d04b      	beq.n	8003fc0 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003f28:	4b41      	ldr	r3, [pc, #260]	; (8004030 <low_level_input+0x164>)
 8003f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2c:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f34:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f36:	e040      	b.n	8003fba <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8003f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3a:	895b      	ldrh	r3, [r3, #10]
 8003f3c:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003f42:	e021      	b.n	8003f88 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8003f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	18d0      	adds	r0, r2, r3
 8003f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	18d1      	adds	r1, r2, r3
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8003f58:	3304      	adds	r3, #4
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	f00f fc0d 	bl	801377a <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003f60:	6a3b      	ldr	r3, [r7, #32]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8003f66:	6a3b      	ldr	r3, [r7, #32]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8003f6c:	69fa      	ldr	r2, [r7, #28]
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	4413      	add	r3, r2
 8003f72:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003f76:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003f82:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8003f84:	2300      	movs	r3, #0
 8003f86:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d8d6      	bhi.n	8003f44 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8003f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	18d0      	adds	r0, r2, r3
 8003f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	f00f fbe7 	bl	801377a <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003fac:	69fa      	ldr	r2, [r7, #28]
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1bb      	bne.n	8003f38 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003fc0:	4b1b      	ldr	r3, [pc, #108]	; (8004030 <low_level_input+0x164>)
 8003fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc4:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	613b      	str	r3, [r7, #16]
 8003fca:	e00b      	b.n	8003fe4 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8003fcc:	6a3b      	ldr	r3, [r7, #32]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003fd4:	6a3b      	ldr	r3, [r7, #32]
 8003fd6:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003fd8:	6a3b      	ldr	r3, [r7, #32]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	613b      	str	r3, [r7, #16]
 8003fe4:	4b12      	ldr	r3, [pc, #72]	; (8004030 <low_level_input+0x164>)
 8003fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d3ee      	bcc.n	8003fcc <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8003fee:	4b10      	ldr	r3, [pc, #64]	; (8004030 <low_level_input+0x164>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8003ff4:	4b0e      	ldr	r3, [pc, #56]	; (8004030 <low_level_input+0x164>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ffc:	3314      	adds	r3, #20
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00d      	beq.n	8004024 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8004008:	4b09      	ldr	r3, [pc, #36]	; (8004030 <low_level_input+0x164>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004010:	3314      	adds	r3, #20
 8004012:	2280      	movs	r2, #128	; 0x80
 8004014:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8004016:	4b06      	ldr	r3, [pc, #24]	; (8004030 <low_level_input+0x164>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800401e:	3308      	adds	r3, #8
 8004020:	2200      	movs	r2, #0
 8004022:	601a      	str	r2, [r3, #0]
  }
  return p;
 8004024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004026:	4618      	mov	r0, r3
 8004028:	3730      	adds	r7, #48	; 0x30
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	2000a008 	.word	0x2000a008

08004034 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004040:	4b12      	ldr	r3, [pc, #72]	; (800408c <ethernetif_input+0x58>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f04f 31ff 	mov.w	r1, #4294967295
 8004048:	4618      	mov	r0, r3
 800404a:	f000 fa8b 	bl	8004564 <osSemaphoreWait>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1f5      	bne.n	8004040 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8004054:	480e      	ldr	r0, [pc, #56]	; (8004090 <ethernetif_input+0x5c>)
 8004056:	f00f fa05 	bl	8013464 <sys_mutex_lock>
        p = low_level_input( netif );
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	f7ff ff36 	bl	8003ecc <low_level_input>
 8004060:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00a      	beq.n	800407e <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	68f9      	ldr	r1, [r7, #12]
 800406e:	68b8      	ldr	r0, [r7, #8]
 8004070:	4798      	blx	r3
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d002      	beq.n	800407e <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8004078:	68b8      	ldr	r0, [r7, #8]
 800407a:	f004 fd91 	bl	8008ba0 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800407e:	4804      	ldr	r0, [pc, #16]	; (8004090 <ethernetif_input+0x5c>)
 8004080:	f00f f9ff 	bl	8013482 <sys_mutex_unlock>
      } while(p!=NULL);
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1e4      	bne.n	8004054 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800408a:	e7d9      	b.n	8004040 <ethernetif_input+0xc>
 800408c:	2000035c 	.word	0x2000035c
 8004090:	2000b820 	.word	0x2000b820

08004094 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d106      	bne.n	80040b0 <ethernetif_init+0x1c>
 80040a2:	4b0e      	ldr	r3, [pc, #56]	; (80040dc <ethernetif_init+0x48>)
 80040a4:	f240 2235 	movw	r2, #565	; 0x235
 80040a8:	490d      	ldr	r1, [pc, #52]	; (80040e0 <ethernetif_init+0x4c>)
 80040aa:	480e      	ldr	r0, [pc, #56]	; (80040e4 <ethernetif_init+0x50>)
 80040ac:	f00f fbd6 	bl	801385c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2273      	movs	r2, #115	; 0x73
 80040b4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2274      	movs	r2, #116	; 0x74
 80040bc:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a09      	ldr	r2, [pc, #36]	; (80040e8 <ethernetif_init+0x54>)
 80040c4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a08      	ldr	r2, [pc, #32]	; (80040ec <ethernetif_init+0x58>)
 80040ca:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f7ff fd87 	bl	8003be0 <low_level_init>

  return ERR_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3708      	adds	r7, #8
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	08014748 	.word	0x08014748
 80040e0:	08014764 	.word	0x08014764
 80040e4:	08014774 	.word	0x08014774
 80040e8:	080115d5 	.word	0x080115d5
 80040ec:	08003d91 	.word	0x08003d91

080040f0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80040f4:	f7fc fe3e 	bl	8000d74 <HAL_GetTick>
 80040f8:	4603      	mov	r3, r0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	bd80      	pop	{r7, pc}
	...

08004100 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004108:	2300      	movs	r3, #0
 800410a:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004110:	f107 0308 	add.w	r3, r7, #8
 8004114:	461a      	mov	r2, r3
 8004116:	2101      	movs	r1, #1
 8004118:	4816      	ldr	r0, [pc, #88]	; (8004174 <ethernetif_set_link+0x74>)
 800411a:	f7fd fb9c 	bl	8001856 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	f003 0304 	and.w	r3, r3, #4
 8004124:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800412e:	f003 0304 	and.w	r3, r3, #4
 8004132:	2b00      	cmp	r3, #0
 8004134:	d108      	bne.n	8004148 <ethernetif_set_link+0x48>
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d005      	beq.n	8004148 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4618      	mov	r0, r3
 8004142:	f004 f917 	bl	8008374 <netif_set_link_up>
 8004146:	e011      	b.n	800416c <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004150:	089b      	lsrs	r3, r3, #2
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b00      	cmp	r3, #0
 800415a:	d007      	beq.n	800416c <ethernetif_set_link+0x6c>
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d104      	bne.n	800416c <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4618      	mov	r0, r3
 8004168:	f004 f93c 	bl	80083e4 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 800416c:	20c8      	movs	r0, #200	; 0xc8
 800416e:	f000 f916 	bl	800439e <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004172:	e7cd      	b.n	8004110 <ethernetif_set_link+0x10>
 8004174:	2000a008 	.word	0x2000a008

08004178 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8004180:	2300      	movs	r3, #0
 8004182:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8004184:	2300      	movs	r3, #0
 8004186:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800418e:	089b      	lsrs	r3, r3, #2
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d05d      	beq.n	8004256 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800419a:	4b34      	ldr	r3, [pc, #208]	; (800426c <ethernetif_update_config+0xf4>)
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d03f      	beq.n	8004222 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80041a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80041a6:	2100      	movs	r1, #0
 80041a8:	4830      	ldr	r0, [pc, #192]	; (800426c <ethernetif_update_config+0xf4>)
 80041aa:	f7fd fbbc 	bl	8001926 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80041ae:	f7fc fde1 	bl	8000d74 <HAL_GetTick>
 80041b2:	4603      	mov	r3, r0
 80041b4:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80041b6:	f107 0308 	add.w	r3, r7, #8
 80041ba:	461a      	mov	r2, r3
 80041bc:	2101      	movs	r1, #1
 80041be:	482b      	ldr	r0, [pc, #172]	; (800426c <ethernetif_update_config+0xf4>)
 80041c0:	f7fd fb49 	bl	8001856 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80041c4:	f7fc fdd6 	bl	8000d74 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041d2:	d828      	bhi.n	8004226 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	f003 0320 	and.w	r3, r3, #32
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d0eb      	beq.n	80041b6 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80041de:	f107 0308 	add.w	r3, r7, #8
 80041e2:	461a      	mov	r2, r3
 80041e4:	2110      	movs	r1, #16
 80041e6:	4821      	ldr	r0, [pc, #132]	; (800426c <ethernetif_update_config+0xf4>)
 80041e8:	f7fd fb35 	bl	8001856 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	f003 0304 	and.w	r3, r3, #4
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d004      	beq.n	8004200 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80041f6:	4b1d      	ldr	r3, [pc, #116]	; (800426c <ethernetif_update_config+0xf4>)
 80041f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041fc:	60da      	str	r2, [r3, #12]
 80041fe:	e002      	b.n	8004206 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8004200:	4b1a      	ldr	r3, [pc, #104]	; (800426c <ethernetif_update_config+0xf4>)
 8004202:	2200      	movs	r2, #0
 8004204:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d003      	beq.n	8004218 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8004210:	4b16      	ldr	r3, [pc, #88]	; (800426c <ethernetif_update_config+0xf4>)
 8004212:	2200      	movs	r2, #0
 8004214:	609a      	str	r2, [r3, #8]
 8004216:	e016      	b.n	8004246 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8004218:	4b14      	ldr	r3, [pc, #80]	; (800426c <ethernetif_update_config+0xf4>)
 800421a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800421e:	609a      	str	r2, [r3, #8]
 8004220:	e011      	b.n	8004246 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8004222:	bf00      	nop
 8004224:	e000      	b.n	8004228 <ethernetif_update_config+0xb0>
          goto error;
 8004226:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004228:	4b10      	ldr	r3, [pc, #64]	; (800426c <ethernetif_update_config+0xf4>)
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	08db      	lsrs	r3, r3, #3
 800422e:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8004230:	4b0e      	ldr	r3, [pc, #56]	; (800426c <ethernetif_update_config+0xf4>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	085b      	lsrs	r3, r3, #1
 8004236:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004238:	4313      	orrs	r3, r2
 800423a:	b29b      	uxth	r3, r3
 800423c:	461a      	mov	r2, r3
 800423e:	2100      	movs	r1, #0
 8004240:	480a      	ldr	r0, [pc, #40]	; (800426c <ethernetif_update_config+0xf4>)
 8004242:	f7fd fb70 	bl	8001926 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8004246:	2100      	movs	r1, #0
 8004248:	4808      	ldr	r0, [pc, #32]	; (800426c <ethernetif_update_config+0xf4>)
 800424a:	f7fd fc31 	bl	8001ab0 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800424e:	4807      	ldr	r0, [pc, #28]	; (800426c <ethernetif_update_config+0xf4>)
 8004250:	f7fd fbcf 	bl	80019f2 <HAL_ETH_Start>
 8004254:	e002      	b.n	800425c <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8004256:	4805      	ldr	r0, [pc, #20]	; (800426c <ethernetif_update_config+0xf4>)
 8004258:	f7fd fbfa 	bl	8001a50 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 f807 	bl	8004270 <ethernetif_notify_conn_changed>
}
 8004262:	bf00      	nop
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	2000a008 	.word	0x2000a008

08004270 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	4603      	mov	r3, r0
 800428c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800428e:	2300      	movs	r3, #0
 8004290:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004292:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004296:	2b84      	cmp	r3, #132	; 0x84
 8004298:	d005      	beq.n	80042a6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800429a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	4413      	add	r3, r2
 80042a2:	3303      	adds	r3, #3
 80042a4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80042a6:	68fb      	ldr	r3, [r7, #12]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3714      	adds	r7, #20
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042ba:	f3ef 8305 	mrs	r3, IPSR
 80042be:	607b      	str	r3, [r7, #4]
  return(result);
 80042c0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	bf14      	ite	ne
 80042c6:	2301      	movne	r3, #1
 80042c8:	2300      	moveq	r3, #0
 80042ca:	b2db      	uxtb	r3, r3
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80042dc:	f001 fc74 	bl	8005bc8 <vTaskStartScheduler>
  
  return osOK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80042ea:	f7ff ffe3 	bl	80042b4 <inHandlerMode>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d003      	beq.n	80042fc <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80042f4:	f001 fd8c 	bl	8005e10 <xTaskGetTickCountFromISR>
 80042f8:	4603      	mov	r3, r0
 80042fa:	e002      	b.n	8004302 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80042fc:	f001 fd78 	bl	8005df0 <xTaskGetTickCount>
 8004300:	4603      	mov	r3, r0
  }
}
 8004302:	4618      	mov	r0, r3
 8004304:	bd80      	pop	{r7, pc}

08004306 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004306:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004308:	b089      	sub	sp, #36	; 0x24
 800430a:	af04      	add	r7, sp, #16
 800430c:	6078      	str	r0, [r7, #4]
 800430e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d020      	beq.n	800435a <osThreadCreate+0x54>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d01c      	beq.n	800435a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685c      	ldr	r4, [r3, #4]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681d      	ldr	r5, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	691e      	ldr	r6, [r3, #16]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004332:	4618      	mov	r0, r3
 8004334:	f7ff ffa6 	bl	8004284 <makeFreeRtosPriority>
 8004338:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004342:	9202      	str	r2, [sp, #8]
 8004344:	9301      	str	r3, [sp, #4]
 8004346:	9100      	str	r1, [sp, #0]
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	4632      	mov	r2, r6
 800434c:	4629      	mov	r1, r5
 800434e:	4620      	mov	r0, r4
 8004350:	f001 fa5c 	bl	800580c <xTaskCreateStatic>
 8004354:	4603      	mov	r3, r0
 8004356:	60fb      	str	r3, [r7, #12]
 8004358:	e01c      	b.n	8004394 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685c      	ldr	r4, [r3, #4]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004366:	b29e      	uxth	r6, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800436e:	4618      	mov	r0, r3
 8004370:	f7ff ff88 	bl	8004284 <makeFreeRtosPriority>
 8004374:	4602      	mov	r2, r0
 8004376:	f107 030c 	add.w	r3, r7, #12
 800437a:	9301      	str	r3, [sp, #4]
 800437c:	9200      	str	r2, [sp, #0]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	4632      	mov	r2, r6
 8004382:	4629      	mov	r1, r5
 8004384:	4620      	mov	r0, r4
 8004386:	f001 fa9e 	bl	80058c6 <xTaskCreate>
 800438a:	4603      	mov	r3, r0
 800438c:	2b01      	cmp	r3, #1
 800438e:	d001      	beq.n	8004394 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004390:	2300      	movs	r3, #0
 8004392:	e000      	b.n	8004396 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004394:	68fb      	ldr	r3, [r7, #12]
}
 8004396:	4618      	mov	r0, r3
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800439e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	b084      	sub	sp, #16
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d001      	beq.n	80043b4 <osDelay+0x16>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	e000      	b.n	80043b6 <osDelay+0x18>
 80043b4:	2301      	movs	r3, #1
 80043b6:	4618      	mov	r0, r3
 80043b8:	f001 fbd2 	bl	8005b60 <vTaskDelay>
  
  return osOK;
 80043bc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b082      	sub	sp, #8
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d007      	beq.n	80043e6 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	4619      	mov	r1, r3
 80043dc:	2001      	movs	r0, #1
 80043de:	f000 fc40 	bl	8004c62 <xQueueCreateMutexStatic>
 80043e2:	4603      	mov	r3, r0
 80043e4:	e003      	b.n	80043ee <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80043e6:	2001      	movs	r0, #1
 80043e8:	f000 fc23 	bl	8004c32 <xQueueCreateMutex>
 80043ec:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
	...

080043f8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004402:	2300      	movs	r3, #0
 8004404:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d101      	bne.n	8004410 <osMutexWait+0x18>
    return osErrorParameter;
 800440c:	2380      	movs	r3, #128	; 0x80
 800440e:	e03a      	b.n	8004486 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8004410:	2300      	movs	r3, #0
 8004412:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800441a:	d103      	bne.n	8004424 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800441c:	f04f 33ff 	mov.w	r3, #4294967295
 8004420:	60fb      	str	r3, [r7, #12]
 8004422:	e009      	b.n	8004438 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d006      	beq.n	8004438 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d101      	bne.n	8004438 <osMutexWait+0x40>
      ticks = 1;
 8004434:	2301      	movs	r3, #1
 8004436:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004438:	f7ff ff3c 	bl	80042b4 <inHandlerMode>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d017      	beq.n	8004472 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004442:	f107 0308 	add.w	r3, r7, #8
 8004446:	461a      	mov	r2, r3
 8004448:	2100      	movs	r1, #0
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f001 f836 	bl	80054bc <xQueueReceiveFromISR>
 8004450:	4603      	mov	r3, r0
 8004452:	2b01      	cmp	r3, #1
 8004454:	d001      	beq.n	800445a <osMutexWait+0x62>
      return osErrorOS;
 8004456:	23ff      	movs	r3, #255	; 0xff
 8004458:	e015      	b.n	8004486 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d011      	beq.n	8004484 <osMutexWait+0x8c>
 8004460:	4b0b      	ldr	r3, [pc, #44]	; (8004490 <osMutexWait+0x98>)
 8004462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	f3bf 8f4f 	dsb	sy
 800446c:	f3bf 8f6f 	isb	sy
 8004470:	e008      	b.n	8004484 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8004472:	68f9      	ldr	r1, [r7, #12]
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 ff15 	bl	80052a4 <xQueueSemaphoreTake>
 800447a:	4603      	mov	r3, r0
 800447c:	2b01      	cmp	r3, #1
 800447e:	d001      	beq.n	8004484 <osMutexWait+0x8c>
    return osErrorOS;
 8004480:	23ff      	movs	r3, #255	; 0xff
 8004482:	e000      	b.n	8004486 <osMutexWait+0x8e>
  }
  
  return osOK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	e000ed04 	.word	0xe000ed04

08004494 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800449c:	2300      	movs	r3, #0
 800449e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80044a0:	2300      	movs	r3, #0
 80044a2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80044a4:	f7ff ff06 	bl	80042b4 <inHandlerMode>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d016      	beq.n	80044dc <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80044ae:	f107 0308 	add.w	r3, r7, #8
 80044b2:	4619      	mov	r1, r3
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 fd88 	bl	8004fca <xQueueGiveFromISR>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d001      	beq.n	80044c4 <osMutexRelease+0x30>
      return osErrorOS;
 80044c0:	23ff      	movs	r3, #255	; 0xff
 80044c2:	e017      	b.n	80044f4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d013      	beq.n	80044f2 <osMutexRelease+0x5e>
 80044ca:	4b0c      	ldr	r3, [pc, #48]	; (80044fc <osMutexRelease+0x68>)
 80044cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044d0:	601a      	str	r2, [r3, #0]
 80044d2:	f3bf 8f4f 	dsb	sy
 80044d6:	f3bf 8f6f 	isb	sy
 80044da:	e00a      	b.n	80044f2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80044dc:	2300      	movs	r3, #0
 80044de:	2200      	movs	r2, #0
 80044e0:	2100      	movs	r1, #0
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 fbd8 	bl	8004c98 <xQueueGenericSend>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d001      	beq.n	80044f2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80044ee:	23ff      	movs	r3, #255	; 0xff
 80044f0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80044f2:	68fb      	ldr	r3, [r7, #12]
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3710      	adds	r7, #16
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	e000ed04 	.word	0xe000ed04

08004500 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af02      	add	r7, sp, #8
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00f      	beq.n	8004532 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d10a      	bne.n	800452e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	2203      	movs	r2, #3
 800451e:	9200      	str	r2, [sp, #0]
 8004520:	2200      	movs	r2, #0
 8004522:	2100      	movs	r1, #0
 8004524:	2001      	movs	r0, #1
 8004526:	f000 fa99 	bl	8004a5c <xQueueGenericCreateStatic>
 800452a:	4603      	mov	r3, r0
 800452c:	e016      	b.n	800455c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800452e:	2300      	movs	r3, #0
 8004530:	e014      	b.n	800455c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d110      	bne.n	800455a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8004538:	2203      	movs	r2, #3
 800453a:	2100      	movs	r1, #0
 800453c:	2001      	movs	r0, #1
 800453e:	f000 fb05 	bl	8004b4c <xQueueGenericCreate>
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d005      	beq.n	8004556 <osSemaphoreCreate+0x56>
 800454a:	2300      	movs	r3, #0
 800454c:	2200      	movs	r2, #0
 800454e:	2100      	movs	r1, #0
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f000 fba1 	bl	8004c98 <xQueueGenericSend>
      return sema;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	e000      	b.n	800455c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800455a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800455c:	4618      	mov	r0, r3
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800456e:	2300      	movs	r3, #0
 8004570:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d101      	bne.n	800457c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004578:	2380      	movs	r3, #128	; 0x80
 800457a:	e03a      	b.n	80045f2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800457c:	2300      	movs	r3, #0
 800457e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004586:	d103      	bne.n	8004590 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8004588:	f04f 33ff 	mov.w	r3, #4294967295
 800458c:	60fb      	str	r3, [r7, #12]
 800458e:	e009      	b.n	80045a4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d006      	beq.n	80045a4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d101      	bne.n	80045a4 <osSemaphoreWait+0x40>
      ticks = 1;
 80045a0:	2301      	movs	r3, #1
 80045a2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80045a4:	f7ff fe86 	bl	80042b4 <inHandlerMode>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d017      	beq.n	80045de <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80045ae:	f107 0308 	add.w	r3, r7, #8
 80045b2:	461a      	mov	r2, r3
 80045b4:	2100      	movs	r1, #0
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 ff80 	bl	80054bc <xQueueReceiveFromISR>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d001      	beq.n	80045c6 <osSemaphoreWait+0x62>
      return osErrorOS;
 80045c2:	23ff      	movs	r3, #255	; 0xff
 80045c4:	e015      	b.n	80045f2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d011      	beq.n	80045f0 <osSemaphoreWait+0x8c>
 80045cc:	4b0b      	ldr	r3, [pc, #44]	; (80045fc <osSemaphoreWait+0x98>)
 80045ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045d2:	601a      	str	r2, [r3, #0]
 80045d4:	f3bf 8f4f 	dsb	sy
 80045d8:	f3bf 8f6f 	isb	sy
 80045dc:	e008      	b.n	80045f0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80045de:	68f9      	ldr	r1, [r7, #12]
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 fe5f 	bl	80052a4 <xQueueSemaphoreTake>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d001      	beq.n	80045f0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80045ec:	23ff      	movs	r3, #255	; 0xff
 80045ee:	e000      	b.n	80045f2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	e000ed04 	.word	0xe000ed04

08004600 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004608:	2300      	movs	r3, #0
 800460a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800460c:	2300      	movs	r3, #0
 800460e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8004610:	f7ff fe50 	bl	80042b4 <inHandlerMode>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d016      	beq.n	8004648 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800461a:	f107 0308 	add.w	r3, r7, #8
 800461e:	4619      	mov	r1, r3
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 fcd2 	bl	8004fca <xQueueGiveFromISR>
 8004626:	4603      	mov	r3, r0
 8004628:	2b01      	cmp	r3, #1
 800462a:	d001      	beq.n	8004630 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800462c:	23ff      	movs	r3, #255	; 0xff
 800462e:	e017      	b.n	8004660 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d013      	beq.n	800465e <osSemaphoreRelease+0x5e>
 8004636:	4b0c      	ldr	r3, [pc, #48]	; (8004668 <osSemaphoreRelease+0x68>)
 8004638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800463c:	601a      	str	r2, [r3, #0]
 800463e:	f3bf 8f4f 	dsb	sy
 8004642:	f3bf 8f6f 	isb	sy
 8004646:	e00a      	b.n	800465e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8004648:	2300      	movs	r3, #0
 800464a:	2200      	movs	r2, #0
 800464c:	2100      	movs	r1, #0
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 fb22 	bl	8004c98 <xQueueGenericSend>
 8004654:	4603      	mov	r3, r0
 8004656:	2b01      	cmp	r3, #1
 8004658:	d001      	beq.n	800465e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800465a:	23ff      	movs	r3, #255	; 0xff
 800465c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800465e:	68fb      	ldr	r3, [r7, #12]
}
 8004660:	4618      	mov	r0, r3
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	e000ed04 	.word	0xe000ed04

0800466c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800466c:	b590      	push	{r4, r7, lr}
 800466e:	b085      	sub	sp, #20
 8004670:	af02      	add	r7, sp, #8
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d011      	beq.n	80046a2 <osMessageCreate+0x36>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00d      	beq.n	80046a2 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6818      	ldr	r0, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6859      	ldr	r1, [r3, #4]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	689a      	ldr	r2, [r3, #8]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	2400      	movs	r4, #0
 8004698:	9400      	str	r4, [sp, #0]
 800469a:	f000 f9df 	bl	8004a5c <xQueueGenericCreateStatic>
 800469e:	4603      	mov	r3, r0
 80046a0:	e008      	b.n	80046b4 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6818      	ldr	r0, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	4619      	mov	r1, r3
 80046ae:	f000 fa4d 	bl	8004b4c <xQueueGenericCreate>
 80046b2:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd90      	pop	{r4, r7, pc}

080046bc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80046c8:	2300      	movs	r3, #0
 80046ca:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <osMessagePut+0x1e>
    ticks = 1;
 80046d6:	2301      	movs	r3, #1
 80046d8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80046da:	f7ff fdeb 	bl	80042b4 <inHandlerMode>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d018      	beq.n	8004716 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80046e4:	f107 0210 	add.w	r2, r7, #16
 80046e8:	f107 0108 	add.w	r1, r7, #8
 80046ec:	2300      	movs	r3, #0
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f000 fbd0 	bl	8004e94 <xQueueGenericSendFromISR>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d001      	beq.n	80046fe <osMessagePut+0x42>
      return osErrorOS;
 80046fa:	23ff      	movs	r3, #255	; 0xff
 80046fc:	e018      	b.n	8004730 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d014      	beq.n	800472e <osMessagePut+0x72>
 8004704:	4b0c      	ldr	r3, [pc, #48]	; (8004738 <osMessagePut+0x7c>)
 8004706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800470a:	601a      	str	r2, [r3, #0]
 800470c:	f3bf 8f4f 	dsb	sy
 8004710:	f3bf 8f6f 	isb	sy
 8004714:	e00b      	b.n	800472e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8004716:	f107 0108 	add.w	r1, r7, #8
 800471a:	2300      	movs	r3, #0
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f000 faba 	bl	8004c98 <xQueueGenericSend>
 8004724:	4603      	mov	r3, r0
 8004726:	2b01      	cmp	r3, #1
 8004728:	d001      	beq.n	800472e <osMessagePut+0x72>
      return osErrorOS;
 800472a:	23ff      	movs	r3, #255	; 0xff
 800472c:	e000      	b.n	8004730 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3718      	adds	r7, #24
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	e000ed04 	.word	0xe000ed04

0800473c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800473c:	b590      	push	{r4, r7, lr}
 800473e:	b08b      	sub	sp, #44	; 0x2c
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800474c:	2300      	movs	r3, #0
 800474e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10a      	bne.n	800476c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8004756:	2380      	movs	r3, #128	; 0x80
 8004758:	617b      	str	r3, [r7, #20]
    return event;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	461c      	mov	r4, r3
 800475e:	f107 0314 	add.w	r3, r7, #20
 8004762:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004766:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800476a:	e054      	b.n	8004816 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800476c:	2300      	movs	r3, #0
 800476e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004770:	2300      	movs	r3, #0
 8004772:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800477a:	d103      	bne.n	8004784 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800477c:	f04f 33ff 	mov.w	r3, #4294967295
 8004780:	627b      	str	r3, [r7, #36]	; 0x24
 8004782:	e009      	b.n	8004798 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d006      	beq.n	8004798 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <osMessageGet+0x5c>
      ticks = 1;
 8004794:	2301      	movs	r3, #1
 8004796:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8004798:	f7ff fd8c 	bl	80042b4 <inHandlerMode>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d01c      	beq.n	80047dc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80047a2:	f107 0220 	add.w	r2, r7, #32
 80047a6:	f107 0314 	add.w	r3, r7, #20
 80047aa:	3304      	adds	r3, #4
 80047ac:	4619      	mov	r1, r3
 80047ae:	68b8      	ldr	r0, [r7, #8]
 80047b0:	f000 fe84 	bl	80054bc <xQueueReceiveFromISR>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d102      	bne.n	80047c0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80047ba:	2310      	movs	r3, #16
 80047bc:	617b      	str	r3, [r7, #20]
 80047be:	e001      	b.n	80047c4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80047c0:	2300      	movs	r3, #0
 80047c2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80047c4:	6a3b      	ldr	r3, [r7, #32]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d01d      	beq.n	8004806 <osMessageGet+0xca>
 80047ca:	4b15      	ldr	r3, [pc, #84]	; (8004820 <osMessageGet+0xe4>)
 80047cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047d0:	601a      	str	r2, [r3, #0]
 80047d2:	f3bf 8f4f 	dsb	sy
 80047d6:	f3bf 8f6f 	isb	sy
 80047da:	e014      	b.n	8004806 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80047dc:	f107 0314 	add.w	r3, r7, #20
 80047e0:	3304      	adds	r3, #4
 80047e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047e4:	4619      	mov	r1, r3
 80047e6:	68b8      	ldr	r0, [r7, #8]
 80047e8:	f000 fc7c 	bl	80050e4 <xQueueReceive>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d102      	bne.n	80047f8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80047f2:	2310      	movs	r3, #16
 80047f4:	617b      	str	r3, [r7, #20]
 80047f6:	e006      	b.n	8004806 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80047f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <osMessageGet+0xc6>
 80047fe:	2300      	movs	r3, #0
 8004800:	e000      	b.n	8004804 <osMessageGet+0xc8>
 8004802:	2340      	movs	r3, #64	; 0x40
 8004804:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	461c      	mov	r4, r3
 800480a:	f107 0314 	add.w	r3, r7, #20
 800480e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004812:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	372c      	adds	r7, #44	; 0x2c
 800481a:	46bd      	mov	sp, r7
 800481c:	bd90      	pop	{r4, r7, pc}
 800481e:	bf00      	nop
 8004820:	e000ed04 	.word	0xe000ed04

08004824 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f103 0208 	add.w	r2, r3, #8
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f04f 32ff 	mov.w	r2, #4294967295
 800483c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f103 0208 	add.w	r2, r3, #8
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f103 0208 	add.w	r2, r3, #8
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004872:	bf00      	nop
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800487e:	b480      	push	{r7}
 8004880:	b085      	sub	sp, #20
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
 8004886:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	683a      	ldr	r2, [r7, #0]
 80048a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	683a      	ldr	r2, [r7, #0]
 80048a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	1c5a      	adds	r2, r3, #1
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	601a      	str	r2, [r3, #0]
}
 80048ba:	bf00      	nop
 80048bc:	3714      	adds	r7, #20
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048c6:	b480      	push	{r7}
 80048c8:	b085      	sub	sp, #20
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
 80048ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048dc:	d103      	bne.n	80048e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	e00c      	b.n	8004900 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	3308      	adds	r3, #8
 80048ea:	60fb      	str	r3, [r7, #12]
 80048ec:	e002      	b.n	80048f4 <vListInsert+0x2e>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	60fb      	str	r3, [r7, #12]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68ba      	ldr	r2, [r7, #8]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d2f6      	bcs.n	80048ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	683a      	ldr	r2, [r7, #0]
 800490e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	683a      	ldr	r2, [r7, #0]
 800491a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	1c5a      	adds	r2, r3, #1
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	601a      	str	r2, [r3, #0]
}
 800492c:	bf00      	nop
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	6892      	ldr	r2, [r2, #8]
 800494e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	6852      	ldr	r2, [r2, #4]
 8004958:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	429a      	cmp	r2, r3
 8004962:	d103      	bne.n	800496c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689a      	ldr	r2, [r3, #8]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	1e5a      	subs	r2, r3, #1
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
}
 8004980:	4618      	mov	r0, r3
 8004982:	3714      	adds	r7, #20
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10a      	bne.n	80049b6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80049a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a4:	f383 8811 	msr	BASEPRI, r3
 80049a8:	f3bf 8f6f 	isb	sy
 80049ac:	f3bf 8f4f 	dsb	sy
 80049b0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80049b2:	bf00      	nop
 80049b4:	e7fe      	b.n	80049b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80049b6:	f002 f88d 	bl	8006ad4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c2:	68f9      	ldr	r1, [r7, #12]
 80049c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80049c6:	fb01 f303 	mul.w	r3, r1, r3
 80049ca:	441a      	add	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e6:	3b01      	subs	r3, #1
 80049e8:	68f9      	ldr	r1, [r7, #12]
 80049ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80049ec:	fb01 f303 	mul.w	r3, r1, r3
 80049f0:	441a      	add	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	22ff      	movs	r2, #255	; 0xff
 80049fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	22ff      	movs	r2, #255	; 0xff
 8004a02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d114      	bne.n	8004a36 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d01a      	beq.n	8004a4a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	3310      	adds	r3, #16
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f001 fb49 	bl	80060b0 <xTaskRemoveFromEventList>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d012      	beq.n	8004a4a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004a24:	4b0c      	ldr	r3, [pc, #48]	; (8004a58 <xQueueGenericReset+0xcc>)
 8004a26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a2a:	601a      	str	r2, [r3, #0]
 8004a2c:	f3bf 8f4f 	dsb	sy
 8004a30:	f3bf 8f6f 	isb	sy
 8004a34:	e009      	b.n	8004a4a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	3310      	adds	r3, #16
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7ff fef2 	bl	8004824 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	3324      	adds	r3, #36	; 0x24
 8004a44:	4618      	mov	r0, r3
 8004a46:	f7ff feed 	bl	8004824 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004a4a:	f002 f873 	bl	8006b34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004a4e:	2301      	movs	r3, #1
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	e000ed04 	.word	0xe000ed04

08004a5c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b08e      	sub	sp, #56	; 0x38
 8004a60:	af02      	add	r7, sp, #8
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
 8004a68:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10a      	bne.n	8004a86 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a74:	f383 8811 	msr	BASEPRI, r3
 8004a78:	f3bf 8f6f 	isb	sy
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004a82:	bf00      	nop
 8004a84:	e7fe      	b.n	8004a84 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d10a      	bne.n	8004aa2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a90:	f383 8811 	msr	BASEPRI, r3
 8004a94:	f3bf 8f6f 	isb	sy
 8004a98:	f3bf 8f4f 	dsb	sy
 8004a9c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a9e:	bf00      	nop
 8004aa0:	e7fe      	b.n	8004aa0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d002      	beq.n	8004aae <xQueueGenericCreateStatic+0x52>
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <xQueueGenericCreateStatic+0x56>
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e000      	b.n	8004ab4 <xQueueGenericCreateStatic+0x58>
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d10a      	bne.n	8004ace <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004abc:	f383 8811 	msr	BASEPRI, r3
 8004ac0:	f3bf 8f6f 	isb	sy
 8004ac4:	f3bf 8f4f 	dsb	sy
 8004ac8:	623b      	str	r3, [r7, #32]
}
 8004aca:	bf00      	nop
 8004acc:	e7fe      	b.n	8004acc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d102      	bne.n	8004ada <xQueueGenericCreateStatic+0x7e>
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <xQueueGenericCreateStatic+0x82>
 8004ada:	2301      	movs	r3, #1
 8004adc:	e000      	b.n	8004ae0 <xQueueGenericCreateStatic+0x84>
 8004ade:	2300      	movs	r3, #0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10a      	bne.n	8004afa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae8:	f383 8811 	msr	BASEPRI, r3
 8004aec:	f3bf 8f6f 	isb	sy
 8004af0:	f3bf 8f4f 	dsb	sy
 8004af4:	61fb      	str	r3, [r7, #28]
}
 8004af6:	bf00      	nop
 8004af8:	e7fe      	b.n	8004af8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004afa:	2348      	movs	r3, #72	; 0x48
 8004afc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	2b48      	cmp	r3, #72	; 0x48
 8004b02:	d00a      	beq.n	8004b1a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b08:	f383 8811 	msr	BASEPRI, r3
 8004b0c:	f3bf 8f6f 	isb	sy
 8004b10:	f3bf 8f4f 	dsb	sy
 8004b14:	61bb      	str	r3, [r7, #24]
}
 8004b16:	bf00      	nop
 8004b18:	e7fe      	b.n	8004b18 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004b1a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00d      	beq.n	8004b42 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b2e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	4613      	mov	r3, r2
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	68b9      	ldr	r1, [r7, #8]
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f000 f83f 	bl	8004bc0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3730      	adds	r7, #48	; 0x30
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b08a      	sub	sp, #40	; 0x28
 8004b50:	af02      	add	r7, sp, #8
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	4613      	mov	r3, r2
 8004b58:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d10a      	bne.n	8004b76 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b64:	f383 8811 	msr	BASEPRI, r3
 8004b68:	f3bf 8f6f 	isb	sy
 8004b6c:	f3bf 8f4f 	dsb	sy
 8004b70:	613b      	str	r3, [r7, #16]
}
 8004b72:	bf00      	nop
 8004b74:	e7fe      	b.n	8004b74 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	fb02 f303 	mul.w	r3, r2, r3
 8004b7e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	3348      	adds	r3, #72	; 0x48
 8004b84:	4618      	mov	r0, r3
 8004b86:	f002 f8c7 	bl	8006d18 <pvPortMalloc>
 8004b8a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d011      	beq.n	8004bb6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	3348      	adds	r3, #72	; 0x48
 8004b9a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ba4:	79fa      	ldrb	r2, [r7, #7]
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	9300      	str	r3, [sp, #0]
 8004baa:	4613      	mov	r3, r2
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	68b9      	ldr	r1, [r7, #8]
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f000 f805 	bl	8004bc0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004bb6:	69bb      	ldr	r3, [r7, #24]
	}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3720      	adds	r7, #32
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
 8004bcc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d103      	bne.n	8004bdc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	69ba      	ldr	r2, [r7, #24]
 8004bd8:	601a      	str	r2, [r3, #0]
 8004bda:	e002      	b.n	8004be2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004bee:	2101      	movs	r1, #1
 8004bf0:	69b8      	ldr	r0, [r7, #24]
 8004bf2:	f7ff fecb 	bl	800498c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004bf6:	bf00      	nop
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b082      	sub	sp, #8
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00e      	beq.n	8004c2a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004c1e:	2300      	movs	r3, #0
 8004c20:	2200      	movs	r2, #0
 8004c22:	2100      	movs	r1, #0
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 f837 	bl	8004c98 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004c2a:	bf00      	nop
 8004c2c:	3708      	adds	r7, #8
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b086      	sub	sp, #24
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	4603      	mov	r3, r0
 8004c3a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	617b      	str	r3, [r7, #20]
 8004c40:	2300      	movs	r3, #0
 8004c42:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004c44:	79fb      	ldrb	r3, [r7, #7]
 8004c46:	461a      	mov	r2, r3
 8004c48:	6939      	ldr	r1, [r7, #16]
 8004c4a:	6978      	ldr	r0, [r7, #20]
 8004c4c:	f7ff ff7e 	bl	8004b4c <xQueueGenericCreate>
 8004c50:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f7ff ffd3 	bl	8004bfe <prvInitialiseMutex>

		return xNewQueue;
 8004c58:	68fb      	ldr	r3, [r7, #12]
	}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3718      	adds	r7, #24
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b088      	sub	sp, #32
 8004c66:	af02      	add	r7, sp, #8
 8004c68:	4603      	mov	r3, r0
 8004c6a:	6039      	str	r1, [r7, #0]
 8004c6c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	617b      	str	r3, [r7, #20]
 8004c72:	2300      	movs	r3, #0
 8004c74:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004c76:	79fb      	ldrb	r3, [r7, #7]
 8004c78:	9300      	str	r3, [sp, #0]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	6939      	ldr	r1, [r7, #16]
 8004c80:	6978      	ldr	r0, [r7, #20]
 8004c82:	f7ff feeb 	bl	8004a5c <xQueueGenericCreateStatic>
 8004c86:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	f7ff ffb8 	bl	8004bfe <prvInitialiseMutex>

		return xNewQueue;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
	}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3718      	adds	r7, #24
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b08e      	sub	sp, #56	; 0x38
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
 8004ca4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d10a      	bne.n	8004cca <xQueueGenericSend+0x32>
	__asm volatile
 8004cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb8:	f383 8811 	msr	BASEPRI, r3
 8004cbc:	f3bf 8f6f 	isb	sy
 8004cc0:	f3bf 8f4f 	dsb	sy
 8004cc4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004cc6:	bf00      	nop
 8004cc8:	e7fe      	b.n	8004cc8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d103      	bne.n	8004cd8 <xQueueGenericSend+0x40>
 8004cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d101      	bne.n	8004cdc <xQueueGenericSend+0x44>
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e000      	b.n	8004cde <xQueueGenericSend+0x46>
 8004cdc:	2300      	movs	r3, #0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d10a      	bne.n	8004cf8 <xQueueGenericSend+0x60>
	__asm volatile
 8004ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce6:	f383 8811 	msr	BASEPRI, r3
 8004cea:	f3bf 8f6f 	isb	sy
 8004cee:	f3bf 8f4f 	dsb	sy
 8004cf2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004cf4:	bf00      	nop
 8004cf6:	e7fe      	b.n	8004cf6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d103      	bne.n	8004d06 <xQueueGenericSend+0x6e>
 8004cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d101      	bne.n	8004d0a <xQueueGenericSend+0x72>
 8004d06:	2301      	movs	r3, #1
 8004d08:	e000      	b.n	8004d0c <xQueueGenericSend+0x74>
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10a      	bne.n	8004d26 <xQueueGenericSend+0x8e>
	__asm volatile
 8004d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d14:	f383 8811 	msr	BASEPRI, r3
 8004d18:	f3bf 8f6f 	isb	sy
 8004d1c:	f3bf 8f4f 	dsb	sy
 8004d20:	623b      	str	r3, [r7, #32]
}
 8004d22:	bf00      	nop
 8004d24:	e7fe      	b.n	8004d24 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d26:	f001 fb83 	bl	8006430 <xTaskGetSchedulerState>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d102      	bne.n	8004d36 <xQueueGenericSend+0x9e>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <xQueueGenericSend+0xa2>
 8004d36:	2301      	movs	r3, #1
 8004d38:	e000      	b.n	8004d3c <xQueueGenericSend+0xa4>
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d10a      	bne.n	8004d56 <xQueueGenericSend+0xbe>
	__asm volatile
 8004d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d44:	f383 8811 	msr	BASEPRI, r3
 8004d48:	f3bf 8f6f 	isb	sy
 8004d4c:	f3bf 8f4f 	dsb	sy
 8004d50:	61fb      	str	r3, [r7, #28]
}
 8004d52:	bf00      	nop
 8004d54:	e7fe      	b.n	8004d54 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d56:	f001 febd 	bl	8006ad4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d302      	bcc.n	8004d6c <xQueueGenericSend+0xd4>
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d129      	bne.n	8004dc0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d6c:	683a      	ldr	r2, [r7, #0]
 8004d6e:	68b9      	ldr	r1, [r7, #8]
 8004d70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d72:	f000 fc3b 	bl	80055ec <prvCopyDataToQueue>
 8004d76:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d010      	beq.n	8004da2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d82:	3324      	adds	r3, #36	; 0x24
 8004d84:	4618      	mov	r0, r3
 8004d86:	f001 f993 	bl	80060b0 <xTaskRemoveFromEventList>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d013      	beq.n	8004db8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004d90:	4b3f      	ldr	r3, [pc, #252]	; (8004e90 <xQueueGenericSend+0x1f8>)
 8004d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d96:	601a      	str	r2, [r3, #0]
 8004d98:	f3bf 8f4f 	dsb	sy
 8004d9c:	f3bf 8f6f 	isb	sy
 8004da0:	e00a      	b.n	8004db8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d007      	beq.n	8004db8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004da8:	4b39      	ldr	r3, [pc, #228]	; (8004e90 <xQueueGenericSend+0x1f8>)
 8004daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dae:	601a      	str	r2, [r3, #0]
 8004db0:	f3bf 8f4f 	dsb	sy
 8004db4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004db8:	f001 febc 	bl	8006b34 <vPortExitCritical>
				return pdPASS;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e063      	b.n	8004e88 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d103      	bne.n	8004dce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004dc6:	f001 feb5 	bl	8006b34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	e05c      	b.n	8004e88 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d106      	bne.n	8004de2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004dd4:	f107 0314 	add.w	r3, r7, #20
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f001 f9cb 	bl	8006174 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004dde:	2301      	movs	r3, #1
 8004de0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004de2:	f001 fea7 	bl	8006b34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004de6:	f000 ff59 	bl	8005c9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004dea:	f001 fe73 	bl	8006ad4 <vPortEnterCritical>
 8004dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004df4:	b25b      	sxtb	r3, r3
 8004df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dfa:	d103      	bne.n	8004e04 <xQueueGenericSend+0x16c>
 8004dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e0a:	b25b      	sxtb	r3, r3
 8004e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e10:	d103      	bne.n	8004e1a <xQueueGenericSend+0x182>
 8004e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e1a:	f001 fe8b 	bl	8006b34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e1e:	1d3a      	adds	r2, r7, #4
 8004e20:	f107 0314 	add.w	r3, r7, #20
 8004e24:	4611      	mov	r1, r2
 8004e26:	4618      	mov	r0, r3
 8004e28:	f001 f9ba 	bl	80061a0 <xTaskCheckForTimeOut>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d124      	bne.n	8004e7c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004e32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e34:	f000 fcd2 	bl	80057dc <prvIsQueueFull>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d018      	beq.n	8004e70 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e40:	3310      	adds	r3, #16
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	4611      	mov	r1, r2
 8004e46:	4618      	mov	r0, r3
 8004e48:	f001 f90e 	bl	8006068 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004e4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e4e:	f000 fc5d 	bl	800570c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004e52:	f000 ff31 	bl	8005cb8 <xTaskResumeAll>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f47f af7c 	bne.w	8004d56 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004e5e:	4b0c      	ldr	r3, [pc, #48]	; (8004e90 <xQueueGenericSend+0x1f8>)
 8004e60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e64:	601a      	str	r2, [r3, #0]
 8004e66:	f3bf 8f4f 	dsb	sy
 8004e6a:	f3bf 8f6f 	isb	sy
 8004e6e:	e772      	b.n	8004d56 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004e70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e72:	f000 fc4b 	bl	800570c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e76:	f000 ff1f 	bl	8005cb8 <xTaskResumeAll>
 8004e7a:	e76c      	b.n	8004d56 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004e7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e7e:	f000 fc45 	bl	800570c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e82:	f000 ff19 	bl	8005cb8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004e86:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3738      	adds	r7, #56	; 0x38
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	e000ed04 	.word	0xe000ed04

08004e94 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b090      	sub	sp, #64	; 0x40
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
 8004ea0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10a      	bne.n	8004ec2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb0:	f383 8811 	msr	BASEPRI, r3
 8004eb4:	f3bf 8f6f 	isb	sy
 8004eb8:	f3bf 8f4f 	dsb	sy
 8004ebc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004ebe:	bf00      	nop
 8004ec0:	e7fe      	b.n	8004ec0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d103      	bne.n	8004ed0 <xQueueGenericSendFromISR+0x3c>
 8004ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d101      	bne.n	8004ed4 <xQueueGenericSendFromISR+0x40>
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e000      	b.n	8004ed6 <xQueueGenericSendFromISR+0x42>
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10a      	bne.n	8004ef0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ede:	f383 8811 	msr	BASEPRI, r3
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	f3bf 8f4f 	dsb	sy
 8004eea:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004eec:	bf00      	nop
 8004eee:	e7fe      	b.n	8004eee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d103      	bne.n	8004efe <xQueueGenericSendFromISR+0x6a>
 8004ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d101      	bne.n	8004f02 <xQueueGenericSendFromISR+0x6e>
 8004efe:	2301      	movs	r3, #1
 8004f00:	e000      	b.n	8004f04 <xQueueGenericSendFromISR+0x70>
 8004f02:	2300      	movs	r3, #0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d10a      	bne.n	8004f1e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f0c:	f383 8811 	msr	BASEPRI, r3
 8004f10:	f3bf 8f6f 	isb	sy
 8004f14:	f3bf 8f4f 	dsb	sy
 8004f18:	623b      	str	r3, [r7, #32]
}
 8004f1a:	bf00      	nop
 8004f1c:	e7fe      	b.n	8004f1c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f1e:	f001 febb 	bl	8006c98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004f22:	f3ef 8211 	mrs	r2, BASEPRI
 8004f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2a:	f383 8811 	msr	BASEPRI, r3
 8004f2e:	f3bf 8f6f 	isb	sy
 8004f32:	f3bf 8f4f 	dsb	sy
 8004f36:	61fa      	str	r2, [r7, #28]
 8004f38:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004f3a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f3c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d302      	bcc.n	8004f50 <xQueueGenericSendFromISR+0xbc>
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d12f      	bne.n	8004fb0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	68b9      	ldr	r1, [r7, #8]
 8004f64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004f66:	f000 fb41 	bl	80055ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004f6a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f72:	d112      	bne.n	8004f9a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d016      	beq.n	8004faa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7e:	3324      	adds	r3, #36	; 0x24
 8004f80:	4618      	mov	r0, r3
 8004f82:	f001 f895 	bl	80060b0 <xTaskRemoveFromEventList>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00e      	beq.n	8004faa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00b      	beq.n	8004faa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2201      	movs	r2, #1
 8004f96:	601a      	str	r2, [r3, #0]
 8004f98:	e007      	b.n	8004faa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004f9a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	b25a      	sxtb	r2, r3
 8004fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004faa:	2301      	movs	r3, #1
 8004fac:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004fae:	e001      	b.n	8004fb4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fb6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004fbe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3740      	adds	r7, #64	; 0x40
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b08e      	sub	sp, #56	; 0x38
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
 8004fd2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10a      	bne.n	8004ff4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8004fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe2:	f383 8811 	msr	BASEPRI, r3
 8004fe6:	f3bf 8f6f 	isb	sy
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	623b      	str	r3, [r7, #32]
}
 8004ff0:	bf00      	nop
 8004ff2:	e7fe      	b.n	8004ff2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00a      	beq.n	8005012 <xQueueGiveFromISR+0x48>
	__asm volatile
 8004ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005000:	f383 8811 	msr	BASEPRI, r3
 8005004:	f3bf 8f6f 	isb	sy
 8005008:	f3bf 8f4f 	dsb	sy
 800500c:	61fb      	str	r3, [r7, #28]
}
 800500e:	bf00      	nop
 8005010:	e7fe      	b.n	8005010 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d103      	bne.n	8005022 <xQueueGiveFromISR+0x58>
 800501a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <xQueueGiveFromISR+0x5c>
 8005022:	2301      	movs	r3, #1
 8005024:	e000      	b.n	8005028 <xQueueGiveFromISR+0x5e>
 8005026:	2300      	movs	r3, #0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d10a      	bne.n	8005042 <xQueueGiveFromISR+0x78>
	__asm volatile
 800502c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005030:	f383 8811 	msr	BASEPRI, r3
 8005034:	f3bf 8f6f 	isb	sy
 8005038:	f3bf 8f4f 	dsb	sy
 800503c:	61bb      	str	r3, [r7, #24]
}
 800503e:	bf00      	nop
 8005040:	e7fe      	b.n	8005040 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005042:	f001 fe29 	bl	8006c98 <vPortValidateInterruptPriority>
	__asm volatile
 8005046:	f3ef 8211 	mrs	r2, BASEPRI
 800504a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800504e:	f383 8811 	msr	BASEPRI, r3
 8005052:	f3bf 8f6f 	isb	sy
 8005056:	f3bf 8f4f 	dsb	sy
 800505a:	617a      	str	r2, [r7, #20]
 800505c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800505e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005060:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005066:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800506c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800506e:	429a      	cmp	r2, r3
 8005070:	d22b      	bcs.n	80050ca <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005074:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005078:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800507c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507e:	1c5a      	adds	r2, r3, #1
 8005080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005082:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005084:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800508c:	d112      	bne.n	80050b4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800508e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005092:	2b00      	cmp	r3, #0
 8005094:	d016      	beq.n	80050c4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005098:	3324      	adds	r3, #36	; 0x24
 800509a:	4618      	mov	r0, r3
 800509c:	f001 f808 	bl	80060b0 <xTaskRemoveFromEventList>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00e      	beq.n	80050c4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00b      	beq.n	80050c4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	2201      	movs	r2, #1
 80050b0:	601a      	str	r2, [r3, #0]
 80050b2:	e007      	b.n	80050c4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80050b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050b8:	3301      	adds	r3, #1
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	b25a      	sxtb	r2, r3
 80050be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80050c4:	2301      	movs	r3, #1
 80050c6:	637b      	str	r3, [r7, #52]	; 0x34
 80050c8:	e001      	b.n	80050ce <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80050ca:	2300      	movs	r3, #0
 80050cc:	637b      	str	r3, [r7, #52]	; 0x34
 80050ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f383 8811 	msr	BASEPRI, r3
}
 80050d8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80050da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3738      	adds	r7, #56	; 0x38
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b08c      	sub	sp, #48	; 0x30
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80050f0:	2300      	movs	r3, #0
 80050f2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80050f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d10a      	bne.n	8005114 <xQueueReceive+0x30>
	__asm volatile
 80050fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005102:	f383 8811 	msr	BASEPRI, r3
 8005106:	f3bf 8f6f 	isb	sy
 800510a:	f3bf 8f4f 	dsb	sy
 800510e:	623b      	str	r3, [r7, #32]
}
 8005110:	bf00      	nop
 8005112:	e7fe      	b.n	8005112 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d103      	bne.n	8005122 <xQueueReceive+0x3e>
 800511a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511e:	2b00      	cmp	r3, #0
 8005120:	d101      	bne.n	8005126 <xQueueReceive+0x42>
 8005122:	2301      	movs	r3, #1
 8005124:	e000      	b.n	8005128 <xQueueReceive+0x44>
 8005126:	2300      	movs	r3, #0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d10a      	bne.n	8005142 <xQueueReceive+0x5e>
	__asm volatile
 800512c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005130:	f383 8811 	msr	BASEPRI, r3
 8005134:	f3bf 8f6f 	isb	sy
 8005138:	f3bf 8f4f 	dsb	sy
 800513c:	61fb      	str	r3, [r7, #28]
}
 800513e:	bf00      	nop
 8005140:	e7fe      	b.n	8005140 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005142:	f001 f975 	bl	8006430 <xTaskGetSchedulerState>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d102      	bne.n	8005152 <xQueueReceive+0x6e>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d101      	bne.n	8005156 <xQueueReceive+0x72>
 8005152:	2301      	movs	r3, #1
 8005154:	e000      	b.n	8005158 <xQueueReceive+0x74>
 8005156:	2300      	movs	r3, #0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d10a      	bne.n	8005172 <xQueueReceive+0x8e>
	__asm volatile
 800515c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005160:	f383 8811 	msr	BASEPRI, r3
 8005164:	f3bf 8f6f 	isb	sy
 8005168:	f3bf 8f4f 	dsb	sy
 800516c:	61bb      	str	r3, [r7, #24]
}
 800516e:	bf00      	nop
 8005170:	e7fe      	b.n	8005170 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005172:	f001 fcaf 	bl	8006ad4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800517c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517e:	2b00      	cmp	r3, #0
 8005180:	d01f      	beq.n	80051c2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005182:	68b9      	ldr	r1, [r7, #8]
 8005184:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005186:	f000 fa9b 	bl	80056c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800518a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518c:	1e5a      	subs	r2, r3, #1
 800518e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005190:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00f      	beq.n	80051ba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800519a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800519c:	3310      	adds	r3, #16
 800519e:	4618      	mov	r0, r3
 80051a0:	f000 ff86 	bl	80060b0 <xTaskRemoveFromEventList>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d007      	beq.n	80051ba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80051aa:	4b3d      	ldr	r3, [pc, #244]	; (80052a0 <xQueueReceive+0x1bc>)
 80051ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051b0:	601a      	str	r2, [r3, #0]
 80051b2:	f3bf 8f4f 	dsb	sy
 80051b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80051ba:	f001 fcbb 	bl	8006b34 <vPortExitCritical>
				return pdPASS;
 80051be:	2301      	movs	r3, #1
 80051c0:	e069      	b.n	8005296 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d103      	bne.n	80051d0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80051c8:	f001 fcb4 	bl	8006b34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80051cc:	2300      	movs	r3, #0
 80051ce:	e062      	b.n	8005296 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80051d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d106      	bne.n	80051e4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80051d6:	f107 0310 	add.w	r3, r7, #16
 80051da:	4618      	mov	r0, r3
 80051dc:	f000 ffca 	bl	8006174 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80051e0:	2301      	movs	r3, #1
 80051e2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80051e4:	f001 fca6 	bl	8006b34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80051e8:	f000 fd58 	bl	8005c9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80051ec:	f001 fc72 	bl	8006ad4 <vPortEnterCritical>
 80051f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051f6:	b25b      	sxtb	r3, r3
 80051f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fc:	d103      	bne.n	8005206 <xQueueReceive+0x122>
 80051fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005200:	2200      	movs	r2, #0
 8005202:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005208:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800520c:	b25b      	sxtb	r3, r3
 800520e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005212:	d103      	bne.n	800521c <xQueueReceive+0x138>
 8005214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005216:	2200      	movs	r2, #0
 8005218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800521c:	f001 fc8a 	bl	8006b34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005220:	1d3a      	adds	r2, r7, #4
 8005222:	f107 0310 	add.w	r3, r7, #16
 8005226:	4611      	mov	r1, r2
 8005228:	4618      	mov	r0, r3
 800522a:	f000 ffb9 	bl	80061a0 <xTaskCheckForTimeOut>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d123      	bne.n	800527c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005234:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005236:	f000 fabb 	bl	80057b0 <prvIsQueueEmpty>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d017      	beq.n	8005270 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005242:	3324      	adds	r3, #36	; 0x24
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	4611      	mov	r1, r2
 8005248:	4618      	mov	r0, r3
 800524a:	f000 ff0d 	bl	8006068 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800524e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005250:	f000 fa5c 	bl	800570c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005254:	f000 fd30 	bl	8005cb8 <xTaskResumeAll>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d189      	bne.n	8005172 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800525e:	4b10      	ldr	r3, [pc, #64]	; (80052a0 <xQueueReceive+0x1bc>)
 8005260:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005264:	601a      	str	r2, [r3, #0]
 8005266:	f3bf 8f4f 	dsb	sy
 800526a:	f3bf 8f6f 	isb	sy
 800526e:	e780      	b.n	8005172 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005270:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005272:	f000 fa4b 	bl	800570c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005276:	f000 fd1f 	bl	8005cb8 <xTaskResumeAll>
 800527a:	e77a      	b.n	8005172 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800527c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800527e:	f000 fa45 	bl	800570c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005282:	f000 fd19 	bl	8005cb8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005286:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005288:	f000 fa92 	bl	80057b0 <prvIsQueueEmpty>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	f43f af6f 	beq.w	8005172 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005294:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005296:	4618      	mov	r0, r3
 8005298:	3730      	adds	r7, #48	; 0x30
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	e000ed04 	.word	0xe000ed04

080052a4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b08e      	sub	sp, #56	; 0x38
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80052ae:	2300      	movs	r3, #0
 80052b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80052b6:	2300      	movs	r3, #0
 80052b8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80052ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d10a      	bne.n	80052d6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80052c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c4:	f383 8811 	msr	BASEPRI, r3
 80052c8:	f3bf 8f6f 	isb	sy
 80052cc:	f3bf 8f4f 	dsb	sy
 80052d0:	623b      	str	r3, [r7, #32]
}
 80052d2:	bf00      	nop
 80052d4:	e7fe      	b.n	80052d4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80052d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00a      	beq.n	80052f4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80052de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e2:	f383 8811 	msr	BASEPRI, r3
 80052e6:	f3bf 8f6f 	isb	sy
 80052ea:	f3bf 8f4f 	dsb	sy
 80052ee:	61fb      	str	r3, [r7, #28]
}
 80052f0:	bf00      	nop
 80052f2:	e7fe      	b.n	80052f2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80052f4:	f001 f89c 	bl	8006430 <xTaskGetSchedulerState>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d102      	bne.n	8005304 <xQueueSemaphoreTake+0x60>
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d101      	bne.n	8005308 <xQueueSemaphoreTake+0x64>
 8005304:	2301      	movs	r3, #1
 8005306:	e000      	b.n	800530a <xQueueSemaphoreTake+0x66>
 8005308:	2300      	movs	r3, #0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d10a      	bne.n	8005324 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800530e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005312:	f383 8811 	msr	BASEPRI, r3
 8005316:	f3bf 8f6f 	isb	sy
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	61bb      	str	r3, [r7, #24]
}
 8005320:	bf00      	nop
 8005322:	e7fe      	b.n	8005322 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005324:	f001 fbd6 	bl	8006ad4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800532a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800532e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005330:	2b00      	cmp	r3, #0
 8005332:	d024      	beq.n	800537e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005336:	1e5a      	subs	r2, r3, #1
 8005338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800533a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800533c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d104      	bne.n	800534e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005344:	f001 fa1c 	bl	8006780 <pvTaskIncrementMutexHeldCount>
 8005348:	4602      	mov	r2, r0
 800534a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800534c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800534e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00f      	beq.n	8005376 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005358:	3310      	adds	r3, #16
 800535a:	4618      	mov	r0, r3
 800535c:	f000 fea8 	bl	80060b0 <xTaskRemoveFromEventList>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d007      	beq.n	8005376 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005366:	4b54      	ldr	r3, [pc, #336]	; (80054b8 <xQueueSemaphoreTake+0x214>)
 8005368:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800536c:	601a      	str	r2, [r3, #0]
 800536e:	f3bf 8f4f 	dsb	sy
 8005372:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005376:	f001 fbdd 	bl	8006b34 <vPortExitCritical>
				return pdPASS;
 800537a:	2301      	movs	r3, #1
 800537c:	e097      	b.n	80054ae <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d111      	bne.n	80053a8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00a      	beq.n	80053a0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800538a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538e:	f383 8811 	msr	BASEPRI, r3
 8005392:	f3bf 8f6f 	isb	sy
 8005396:	f3bf 8f4f 	dsb	sy
 800539a:	617b      	str	r3, [r7, #20]
}
 800539c:	bf00      	nop
 800539e:	e7fe      	b.n	800539e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80053a0:	f001 fbc8 	bl	8006b34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80053a4:	2300      	movs	r3, #0
 80053a6:	e082      	b.n	80054ae <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80053a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d106      	bne.n	80053bc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80053ae:	f107 030c 	add.w	r3, r7, #12
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 fede 	bl	8006174 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80053b8:	2301      	movs	r3, #1
 80053ba:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80053bc:	f001 fbba 	bl	8006b34 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80053c0:	f000 fc6c 	bl	8005c9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80053c4:	f001 fb86 	bl	8006ad4 <vPortEnterCritical>
 80053c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053ce:	b25b      	sxtb	r3, r3
 80053d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d4:	d103      	bne.n	80053de <xQueueSemaphoreTake+0x13a>
 80053d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053e4:	b25b      	sxtb	r3, r3
 80053e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ea:	d103      	bne.n	80053f4 <xQueueSemaphoreTake+0x150>
 80053ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053f4:	f001 fb9e 	bl	8006b34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80053f8:	463a      	mov	r2, r7
 80053fa:	f107 030c 	add.w	r3, r7, #12
 80053fe:	4611      	mov	r1, r2
 8005400:	4618      	mov	r0, r3
 8005402:	f000 fecd 	bl	80061a0 <xTaskCheckForTimeOut>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d132      	bne.n	8005472 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800540c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800540e:	f000 f9cf 	bl	80057b0 <prvIsQueueEmpty>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d026      	beq.n	8005466 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d109      	bne.n	8005434 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005420:	f001 fb58 	bl	8006ad4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	4618      	mov	r0, r3
 800542a:	f001 f81f 	bl	800646c <xTaskPriorityInherit>
 800542e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005430:	f001 fb80 	bl	8006b34 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005436:	3324      	adds	r3, #36	; 0x24
 8005438:	683a      	ldr	r2, [r7, #0]
 800543a:	4611      	mov	r1, r2
 800543c:	4618      	mov	r0, r3
 800543e:	f000 fe13 	bl	8006068 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005442:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005444:	f000 f962 	bl	800570c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005448:	f000 fc36 	bl	8005cb8 <xTaskResumeAll>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	f47f af68 	bne.w	8005324 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005454:	4b18      	ldr	r3, [pc, #96]	; (80054b8 <xQueueSemaphoreTake+0x214>)
 8005456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800545a:	601a      	str	r2, [r3, #0]
 800545c:	f3bf 8f4f 	dsb	sy
 8005460:	f3bf 8f6f 	isb	sy
 8005464:	e75e      	b.n	8005324 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005466:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005468:	f000 f950 	bl	800570c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800546c:	f000 fc24 	bl	8005cb8 <xTaskResumeAll>
 8005470:	e758      	b.n	8005324 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005472:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005474:	f000 f94a 	bl	800570c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005478:	f000 fc1e 	bl	8005cb8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800547c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800547e:	f000 f997 	bl	80057b0 <prvIsQueueEmpty>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	f43f af4d 	beq.w	8005324 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800548a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00d      	beq.n	80054ac <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005490:	f001 fb20 	bl	8006ad4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005494:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005496:	f000 f891 	bl	80055bc <prvGetDisinheritPriorityAfterTimeout>
 800549a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800549c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054a2:	4618      	mov	r0, r3
 80054a4:	f001 f8de 	bl	8006664 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80054a8:	f001 fb44 	bl	8006b34 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80054ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3738      	adds	r7, #56	; 0x38
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	e000ed04 	.word	0xe000ed04

080054bc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b08e      	sub	sp, #56	; 0x38
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80054cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10a      	bne.n	80054e8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80054d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d6:	f383 8811 	msr	BASEPRI, r3
 80054da:	f3bf 8f6f 	isb	sy
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	623b      	str	r3, [r7, #32]
}
 80054e4:	bf00      	nop
 80054e6:	e7fe      	b.n	80054e6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d103      	bne.n	80054f6 <xQueueReceiveFromISR+0x3a>
 80054ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <xQueueReceiveFromISR+0x3e>
 80054f6:	2301      	movs	r3, #1
 80054f8:	e000      	b.n	80054fc <xQueueReceiveFromISR+0x40>
 80054fa:	2300      	movs	r3, #0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d10a      	bne.n	8005516 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005504:	f383 8811 	msr	BASEPRI, r3
 8005508:	f3bf 8f6f 	isb	sy
 800550c:	f3bf 8f4f 	dsb	sy
 8005510:	61fb      	str	r3, [r7, #28]
}
 8005512:	bf00      	nop
 8005514:	e7fe      	b.n	8005514 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005516:	f001 fbbf 	bl	8006c98 <vPortValidateInterruptPriority>
	__asm volatile
 800551a:	f3ef 8211 	mrs	r2, BASEPRI
 800551e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005522:	f383 8811 	msr	BASEPRI, r3
 8005526:	f3bf 8f6f 	isb	sy
 800552a:	f3bf 8f4f 	dsb	sy
 800552e:	61ba      	str	r2, [r7, #24]
 8005530:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005532:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005534:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800553c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553e:	2b00      	cmp	r3, #0
 8005540:	d02f      	beq.n	80055a2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005544:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005548:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800554c:	68b9      	ldr	r1, [r7, #8]
 800554e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005550:	f000 f8b6 	bl	80056c0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005556:	1e5a      	subs	r2, r3, #1
 8005558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800555c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005564:	d112      	bne.n	800558c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d016      	beq.n	800559c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800556e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005570:	3310      	adds	r3, #16
 8005572:	4618      	mov	r0, r3
 8005574:	f000 fd9c 	bl	80060b0 <xTaskRemoveFromEventList>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00e      	beq.n	800559c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00b      	beq.n	800559c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	601a      	str	r2, [r3, #0]
 800558a:	e007      	b.n	800559c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800558c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005590:	3301      	adds	r3, #1
 8005592:	b2db      	uxtb	r3, r3
 8005594:	b25a      	sxtb	r2, r3
 8005596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800559c:	2301      	movs	r3, #1
 800559e:	637b      	str	r3, [r7, #52]	; 0x34
 80055a0:	e001      	b.n	80055a6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80055a2:	2300      	movs	r3, #0
 80055a4:	637b      	str	r3, [r7, #52]	; 0x34
 80055a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	f383 8811 	msr	BASEPRI, r3
}
 80055b0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80055b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3738      	adds	r7, #56	; 0x38
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80055bc:	b480      	push	{r7}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d006      	beq.n	80055da <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f1c3 0307 	rsb	r3, r3, #7
 80055d6:	60fb      	str	r3, [r7, #12]
 80055d8:	e001      	b.n	80055de <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80055da:	2300      	movs	r3, #0
 80055dc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80055de:	68fb      	ldr	r3, [r7, #12]
	}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3714      	adds	r7, #20
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80055f8:	2300      	movs	r3, #0
 80055fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005600:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005606:	2b00      	cmp	r3, #0
 8005608:	d10d      	bne.n	8005626 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d14d      	bne.n	80056ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	4618      	mov	r0, r3
 8005618:	f000 ff9e 	bl	8006558 <xTaskPriorityDisinherit>
 800561c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	609a      	str	r2, [r3, #8]
 8005624:	e043      	b.n	80056ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d119      	bne.n	8005660 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6858      	ldr	r0, [r3, #4]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005634:	461a      	mov	r2, r3
 8005636:	68b9      	ldr	r1, [r7, #8]
 8005638:	f00e f89f 	bl	801377a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	685a      	ldr	r2, [r3, #4]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005644:	441a      	add	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	685a      	ldr	r2, [r3, #4]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	429a      	cmp	r2, r3
 8005654:	d32b      	bcc.n	80056ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	605a      	str	r2, [r3, #4]
 800565e:	e026      	b.n	80056ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	68d8      	ldr	r0, [r3, #12]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005668:	461a      	mov	r2, r3
 800566a:	68b9      	ldr	r1, [r7, #8]
 800566c:	f00e f885 	bl	801377a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	68da      	ldr	r2, [r3, #12]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005678:	425b      	negs	r3, r3
 800567a:	441a      	add	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	68da      	ldr	r2, [r3, #12]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	429a      	cmp	r2, r3
 800568a:	d207      	bcs.n	800569c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	689a      	ldr	r2, [r3, #8]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005694:	425b      	negs	r3, r3
 8005696:	441a      	add	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d105      	bne.n	80056ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d002      	beq.n	80056ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	3b01      	subs	r3, #1
 80056ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	1c5a      	adds	r2, r3, #1
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80056b6:	697b      	ldr	r3, [r7, #20]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3718      	adds	r7, #24
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d018      	beq.n	8005704 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	68da      	ldr	r2, [r3, #12]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056da:	441a      	add	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68da      	ldr	r2, [r3, #12]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d303      	bcc.n	80056f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68d9      	ldr	r1, [r3, #12]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fc:	461a      	mov	r2, r3
 80056fe:	6838      	ldr	r0, [r7, #0]
 8005700:	f00e f83b 	bl	801377a <memcpy>
	}
}
 8005704:	bf00      	nop
 8005706:	3708      	adds	r7, #8
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005714:	f001 f9de 	bl	8006ad4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800571e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005720:	e011      	b.n	8005746 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005726:	2b00      	cmp	r3, #0
 8005728:	d012      	beq.n	8005750 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	3324      	adds	r3, #36	; 0x24
 800572e:	4618      	mov	r0, r3
 8005730:	f000 fcbe 	bl	80060b0 <xTaskRemoveFromEventList>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d001      	beq.n	800573e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800573a:	f000 fd93 	bl	8006264 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800573e:	7bfb      	ldrb	r3, [r7, #15]
 8005740:	3b01      	subs	r3, #1
 8005742:	b2db      	uxtb	r3, r3
 8005744:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800574a:	2b00      	cmp	r3, #0
 800574c:	dce9      	bgt.n	8005722 <prvUnlockQueue+0x16>
 800574e:	e000      	b.n	8005752 <prvUnlockQueue+0x46>
					break;
 8005750:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	22ff      	movs	r2, #255	; 0xff
 8005756:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800575a:	f001 f9eb 	bl	8006b34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800575e:	f001 f9b9 	bl	8006ad4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005768:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800576a:	e011      	b.n	8005790 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d012      	beq.n	800579a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	3310      	adds	r3, #16
 8005778:	4618      	mov	r0, r3
 800577a:	f000 fc99 	bl	80060b0 <xTaskRemoveFromEventList>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d001      	beq.n	8005788 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005784:	f000 fd6e 	bl	8006264 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005788:	7bbb      	ldrb	r3, [r7, #14]
 800578a:	3b01      	subs	r3, #1
 800578c:	b2db      	uxtb	r3, r3
 800578e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005790:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005794:	2b00      	cmp	r3, #0
 8005796:	dce9      	bgt.n	800576c <prvUnlockQueue+0x60>
 8005798:	e000      	b.n	800579c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800579a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	22ff      	movs	r2, #255	; 0xff
 80057a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80057a4:	f001 f9c6 	bl	8006b34 <vPortExitCritical>
}
 80057a8:	bf00      	nop
 80057aa:	3710      	adds	r7, #16
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80057b8:	f001 f98c 	bl	8006ad4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d102      	bne.n	80057ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80057c4:	2301      	movs	r3, #1
 80057c6:	60fb      	str	r3, [r7, #12]
 80057c8:	e001      	b.n	80057ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80057ca:	2300      	movs	r3, #0
 80057cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80057ce:	f001 f9b1 	bl	8006b34 <vPortExitCritical>

	return xReturn;
 80057d2:	68fb      	ldr	r3, [r7, #12]
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3710      	adds	r7, #16
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80057e4:	f001 f976 	bl	8006ad4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d102      	bne.n	80057fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80057f4:	2301      	movs	r3, #1
 80057f6:	60fb      	str	r3, [r7, #12]
 80057f8:	e001      	b.n	80057fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80057fa:	2300      	movs	r3, #0
 80057fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80057fe:	f001 f999 	bl	8006b34 <vPortExitCritical>

	return xReturn;
 8005802:	68fb      	ldr	r3, [r7, #12]
}
 8005804:	4618      	mov	r0, r3
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800580c:	b580      	push	{r7, lr}
 800580e:	b08e      	sub	sp, #56	; 0x38
 8005810:	af04      	add	r7, sp, #16
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
 8005818:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800581a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10a      	bne.n	8005836 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005824:	f383 8811 	msr	BASEPRI, r3
 8005828:	f3bf 8f6f 	isb	sy
 800582c:	f3bf 8f4f 	dsb	sy
 8005830:	623b      	str	r3, [r7, #32]
}
 8005832:	bf00      	nop
 8005834:	e7fe      	b.n	8005834 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005838:	2b00      	cmp	r3, #0
 800583a:	d10a      	bne.n	8005852 <xTaskCreateStatic+0x46>
	__asm volatile
 800583c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005840:	f383 8811 	msr	BASEPRI, r3
 8005844:	f3bf 8f6f 	isb	sy
 8005848:	f3bf 8f4f 	dsb	sy
 800584c:	61fb      	str	r3, [r7, #28]
}
 800584e:	bf00      	nop
 8005850:	e7fe      	b.n	8005850 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005852:	23b4      	movs	r3, #180	; 0xb4
 8005854:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	2bb4      	cmp	r3, #180	; 0xb4
 800585a:	d00a      	beq.n	8005872 <xTaskCreateStatic+0x66>
	__asm volatile
 800585c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005860:	f383 8811 	msr	BASEPRI, r3
 8005864:	f3bf 8f6f 	isb	sy
 8005868:	f3bf 8f4f 	dsb	sy
 800586c:	61bb      	str	r3, [r7, #24]
}
 800586e:	bf00      	nop
 8005870:	e7fe      	b.n	8005870 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005872:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005876:	2b00      	cmp	r3, #0
 8005878:	d01e      	beq.n	80058b8 <xTaskCreateStatic+0xac>
 800587a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800587c:	2b00      	cmp	r3, #0
 800587e:	d01b      	beq.n	80058b8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005882:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005886:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005888:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800588a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588c:	2202      	movs	r2, #2
 800588e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005892:	2300      	movs	r3, #0
 8005894:	9303      	str	r3, [sp, #12]
 8005896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005898:	9302      	str	r3, [sp, #8]
 800589a:	f107 0314 	add.w	r3, r7, #20
 800589e:	9301      	str	r3, [sp, #4]
 80058a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a2:	9300      	str	r3, [sp, #0]
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	68b9      	ldr	r1, [r7, #8]
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f000 f850 	bl	8005950 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058b2:	f000 f8eb 	bl	8005a8c <prvAddNewTaskToReadyList>
 80058b6:	e001      	b.n	80058bc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80058b8:	2300      	movs	r3, #0
 80058ba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80058bc:	697b      	ldr	r3, [r7, #20]
	}
 80058be:	4618      	mov	r0, r3
 80058c0:	3728      	adds	r7, #40	; 0x28
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b08c      	sub	sp, #48	; 0x30
 80058ca:	af04      	add	r7, sp, #16
 80058cc:	60f8      	str	r0, [r7, #12]
 80058ce:	60b9      	str	r1, [r7, #8]
 80058d0:	603b      	str	r3, [r7, #0]
 80058d2:	4613      	mov	r3, r2
 80058d4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80058d6:	88fb      	ldrh	r3, [r7, #6]
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	4618      	mov	r0, r3
 80058dc:	f001 fa1c 	bl	8006d18 <pvPortMalloc>
 80058e0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00e      	beq.n	8005906 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80058e8:	20b4      	movs	r0, #180	; 0xb4
 80058ea:	f001 fa15 	bl	8006d18 <pvPortMalloc>
 80058ee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d003      	beq.n	80058fe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	631a      	str	r2, [r3, #48]	; 0x30
 80058fc:	e005      	b.n	800590a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80058fe:	6978      	ldr	r0, [r7, #20]
 8005900:	f001 fad6 	bl	8006eb0 <vPortFree>
 8005904:	e001      	b.n	800590a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005906:	2300      	movs	r3, #0
 8005908:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d017      	beq.n	8005940 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005918:	88fa      	ldrh	r2, [r7, #6]
 800591a:	2300      	movs	r3, #0
 800591c:	9303      	str	r3, [sp, #12]
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	9302      	str	r3, [sp, #8]
 8005922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005924:	9301      	str	r3, [sp, #4]
 8005926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005928:	9300      	str	r3, [sp, #0]
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	68b9      	ldr	r1, [r7, #8]
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f000 f80e 	bl	8005950 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005934:	69f8      	ldr	r0, [r7, #28]
 8005936:	f000 f8a9 	bl	8005a8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800593a:	2301      	movs	r3, #1
 800593c:	61bb      	str	r3, [r7, #24]
 800593e:	e002      	b.n	8005946 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005940:	f04f 33ff 	mov.w	r3, #4294967295
 8005944:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005946:	69bb      	ldr	r3, [r7, #24]
	}
 8005948:	4618      	mov	r0, r3
 800594a:	3720      	adds	r7, #32
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b088      	sub	sp, #32
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]
 800595c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800595e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005960:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005968:	3b01      	subs	r3, #1
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4413      	add	r3, r2
 800596e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	f023 0307 	bic.w	r3, r3, #7
 8005976:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	f003 0307 	and.w	r3, r3, #7
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00a      	beq.n	8005998 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005986:	f383 8811 	msr	BASEPRI, r3
 800598a:	f3bf 8f6f 	isb	sy
 800598e:	f3bf 8f4f 	dsb	sy
 8005992:	617b      	str	r3, [r7, #20]
}
 8005994:	bf00      	nop
 8005996:	e7fe      	b.n	8005996 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d01f      	beq.n	80059de <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800599e:	2300      	movs	r3, #0
 80059a0:	61fb      	str	r3, [r7, #28]
 80059a2:	e012      	b.n	80059ca <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80059a4:	68ba      	ldr	r2, [r7, #8]
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	4413      	add	r3, r2
 80059aa:	7819      	ldrb	r1, [r3, #0]
 80059ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	4413      	add	r3, r2
 80059b2:	3334      	adds	r3, #52	; 0x34
 80059b4:	460a      	mov	r2, r1
 80059b6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	4413      	add	r3, r2
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d006      	beq.n	80059d2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	3301      	adds	r3, #1
 80059c8:	61fb      	str	r3, [r7, #28]
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	2b0f      	cmp	r3, #15
 80059ce:	d9e9      	bls.n	80059a4 <prvInitialiseNewTask+0x54>
 80059d0:	e000      	b.n	80059d4 <prvInitialiseNewTask+0x84>
			{
				break;
 80059d2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80059d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059dc:	e003      	b.n	80059e6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80059de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80059e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e8:	2b06      	cmp	r3, #6
 80059ea:	d901      	bls.n	80059f0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80059ec:	2306      	movs	r3, #6
 80059ee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80059f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059f4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80059f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059fa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80059fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fe:	2200      	movs	r2, #0
 8005a00:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a04:	3304      	adds	r3, #4
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7fe ff2c 	bl	8004864 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0e:	3318      	adds	r3, #24
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7fe ff27 	bl	8004864 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a1a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1e:	f1c3 0207 	rsb	r2, r3, #7
 8005a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a24:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a2a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3e:	334c      	adds	r3, #76	; 0x4c
 8005a40:	2260      	movs	r2, #96	; 0x60
 8005a42:	2100      	movs	r1, #0
 8005a44:	4618      	mov	r0, r3
 8005a46:	f00d fea6 	bl	8013796 <memset>
 8005a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4c:	4a0c      	ldr	r2, [pc, #48]	; (8005a80 <prvInitialiseNewTask+0x130>)
 8005a4e:	651a      	str	r2, [r3, #80]	; 0x50
 8005a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a52:	4a0c      	ldr	r2, [pc, #48]	; (8005a84 <prvInitialiseNewTask+0x134>)
 8005a54:	655a      	str	r2, [r3, #84]	; 0x54
 8005a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a58:	4a0b      	ldr	r2, [pc, #44]	; (8005a88 <prvInitialiseNewTask+0x138>)
 8005a5a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005a5c:	683a      	ldr	r2, [r7, #0]
 8005a5e:	68f9      	ldr	r1, [r7, #12]
 8005a60:	69b8      	ldr	r0, [r7, #24]
 8005a62:	f000 ff07 	bl	8006874 <pxPortInitialiseStack>
 8005a66:	4602      	mov	r2, r0
 8005a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d002      	beq.n	8005a78 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a76:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a78:	bf00      	nop
 8005a7a:	3720      	adds	r7, #32
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	08017744 	.word	0x08017744
 8005a84:	08017764 	.word	0x08017764
 8005a88:	08017724 	.word	0x08017724

08005a8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005a94:	f001 f81e 	bl	8006ad4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005a98:	4b2a      	ldr	r3, [pc, #168]	; (8005b44 <prvAddNewTaskToReadyList+0xb8>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	4a29      	ldr	r2, [pc, #164]	; (8005b44 <prvAddNewTaskToReadyList+0xb8>)
 8005aa0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005aa2:	4b29      	ldr	r3, [pc, #164]	; (8005b48 <prvAddNewTaskToReadyList+0xbc>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d109      	bne.n	8005abe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005aaa:	4a27      	ldr	r2, [pc, #156]	; (8005b48 <prvAddNewTaskToReadyList+0xbc>)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005ab0:	4b24      	ldr	r3, [pc, #144]	; (8005b44 <prvAddNewTaskToReadyList+0xb8>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d110      	bne.n	8005ada <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005ab8:	f000 fbf8 	bl	80062ac <prvInitialiseTaskLists>
 8005abc:	e00d      	b.n	8005ada <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005abe:	4b23      	ldr	r3, [pc, #140]	; (8005b4c <prvAddNewTaskToReadyList+0xc0>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d109      	bne.n	8005ada <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005ac6:	4b20      	ldr	r3, [pc, #128]	; (8005b48 <prvAddNewTaskToReadyList+0xbc>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d802      	bhi.n	8005ada <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ad4:	4a1c      	ldr	r2, [pc, #112]	; (8005b48 <prvAddNewTaskToReadyList+0xbc>)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005ada:	4b1d      	ldr	r3, [pc, #116]	; (8005b50 <prvAddNewTaskToReadyList+0xc4>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	3301      	adds	r3, #1
 8005ae0:	4a1b      	ldr	r2, [pc, #108]	; (8005b50 <prvAddNewTaskToReadyList+0xc4>)
 8005ae2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae8:	2201      	movs	r2, #1
 8005aea:	409a      	lsls	r2, r3
 8005aec:	4b19      	ldr	r3, [pc, #100]	; (8005b54 <prvAddNewTaskToReadyList+0xc8>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	4a18      	ldr	r2, [pc, #96]	; (8005b54 <prvAddNewTaskToReadyList+0xc8>)
 8005af4:	6013      	str	r3, [r2, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005afa:	4613      	mov	r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	4413      	add	r3, r2
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	4a15      	ldr	r2, [pc, #84]	; (8005b58 <prvAddNewTaskToReadyList+0xcc>)
 8005b04:	441a      	add	r2, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	3304      	adds	r3, #4
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	4610      	mov	r0, r2
 8005b0e:	f7fe feb6 	bl	800487e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b12:	f001 f80f 	bl	8006b34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b16:	4b0d      	ldr	r3, [pc, #52]	; (8005b4c <prvAddNewTaskToReadyList+0xc0>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00e      	beq.n	8005b3c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b1e:	4b0a      	ldr	r3, [pc, #40]	; (8005b48 <prvAddNewTaskToReadyList+0xbc>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d207      	bcs.n	8005b3c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005b2c:	4b0b      	ldr	r3, [pc, #44]	; (8005b5c <prvAddNewTaskToReadyList+0xd0>)
 8005b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b32:	601a      	str	r2, [r3, #0]
 8005b34:	f3bf 8f4f 	dsb	sy
 8005b38:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b3c:	bf00      	nop
 8005b3e:	3708      	adds	r7, #8
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	20000460 	.word	0x20000460
 8005b48:	20000360 	.word	0x20000360
 8005b4c:	2000046c 	.word	0x2000046c
 8005b50:	2000047c 	.word	0x2000047c
 8005b54:	20000468 	.word	0x20000468
 8005b58:	20000364 	.word	0x20000364
 8005b5c:	e000ed04 	.word	0xe000ed04

08005b60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d017      	beq.n	8005ba2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005b72:	4b13      	ldr	r3, [pc, #76]	; (8005bc0 <vTaskDelay+0x60>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00a      	beq.n	8005b90 <vTaskDelay+0x30>
	__asm volatile
 8005b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7e:	f383 8811 	msr	BASEPRI, r3
 8005b82:	f3bf 8f6f 	isb	sy
 8005b86:	f3bf 8f4f 	dsb	sy
 8005b8a:	60bb      	str	r3, [r7, #8]
}
 8005b8c:	bf00      	nop
 8005b8e:	e7fe      	b.n	8005b8e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005b90:	f000 f884 	bl	8005c9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005b94:	2100      	movs	r1, #0
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 fe06 	bl	80067a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005b9c:	f000 f88c 	bl	8005cb8 <xTaskResumeAll>
 8005ba0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d107      	bne.n	8005bb8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005ba8:	4b06      	ldr	r3, [pc, #24]	; (8005bc4 <vTaskDelay+0x64>)
 8005baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bae:	601a      	str	r2, [r3, #0]
 8005bb0:	f3bf 8f4f 	dsb	sy
 8005bb4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005bb8:	bf00      	nop
 8005bba:	3710      	adds	r7, #16
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	20000488 	.word	0x20000488
 8005bc4:	e000ed04 	.word	0xe000ed04

08005bc8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b08a      	sub	sp, #40	; 0x28
 8005bcc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005bd6:	463a      	mov	r2, r7
 8005bd8:	1d39      	adds	r1, r7, #4
 8005bda:	f107 0308 	add.w	r3, r7, #8
 8005bde:	4618      	mov	r0, r3
 8005be0:	f7fa fcd2 	bl	8000588 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005be4:	6839      	ldr	r1, [r7, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	9202      	str	r2, [sp, #8]
 8005bec:	9301      	str	r3, [sp, #4]
 8005bee:	2300      	movs	r3, #0
 8005bf0:	9300      	str	r3, [sp, #0]
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	460a      	mov	r2, r1
 8005bf6:	4921      	ldr	r1, [pc, #132]	; (8005c7c <vTaskStartScheduler+0xb4>)
 8005bf8:	4821      	ldr	r0, [pc, #132]	; (8005c80 <vTaskStartScheduler+0xb8>)
 8005bfa:	f7ff fe07 	bl	800580c <xTaskCreateStatic>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	4a20      	ldr	r2, [pc, #128]	; (8005c84 <vTaskStartScheduler+0xbc>)
 8005c02:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005c04:	4b1f      	ldr	r3, [pc, #124]	; (8005c84 <vTaskStartScheduler+0xbc>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d002      	beq.n	8005c12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	617b      	str	r3, [r7, #20]
 8005c10:	e001      	b.n	8005c16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005c12:	2300      	movs	r3, #0
 8005c14:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d11b      	bne.n	8005c54 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c20:	f383 8811 	msr	BASEPRI, r3
 8005c24:	f3bf 8f6f 	isb	sy
 8005c28:	f3bf 8f4f 	dsb	sy
 8005c2c:	613b      	str	r3, [r7, #16]
}
 8005c2e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005c30:	4b15      	ldr	r3, [pc, #84]	; (8005c88 <vTaskStartScheduler+0xc0>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	334c      	adds	r3, #76	; 0x4c
 8005c36:	4a15      	ldr	r2, [pc, #84]	; (8005c8c <vTaskStartScheduler+0xc4>)
 8005c38:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005c3a:	4b15      	ldr	r3, [pc, #84]	; (8005c90 <vTaskStartScheduler+0xc8>)
 8005c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c40:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005c42:	4b14      	ldr	r3, [pc, #80]	; (8005c94 <vTaskStartScheduler+0xcc>)
 8005c44:	2201      	movs	r2, #1
 8005c46:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005c48:	4b13      	ldr	r3, [pc, #76]	; (8005c98 <vTaskStartScheduler+0xd0>)
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005c4e:	f000 fe9f 	bl	8006990 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005c52:	e00e      	b.n	8005c72 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c5a:	d10a      	bne.n	8005c72 <vTaskStartScheduler+0xaa>
	__asm volatile
 8005c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c60:	f383 8811 	msr	BASEPRI, r3
 8005c64:	f3bf 8f6f 	isb	sy
 8005c68:	f3bf 8f4f 	dsb	sy
 8005c6c:	60fb      	str	r3, [r7, #12]
}
 8005c6e:	bf00      	nop
 8005c70:	e7fe      	b.n	8005c70 <vTaskStartScheduler+0xa8>
}
 8005c72:	bf00      	nop
 8005c74:	3718      	adds	r7, #24
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	0801479c 	.word	0x0801479c
 8005c80:	0800627d 	.word	0x0800627d
 8005c84:	20000484 	.word	0x20000484
 8005c88:	20000360 	.word	0x20000360
 8005c8c:	20000020 	.word	0x20000020
 8005c90:	20000480 	.word	0x20000480
 8005c94:	2000046c 	.word	0x2000046c
 8005c98:	20000464 	.word	0x20000464

08005c9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005ca0:	4b04      	ldr	r3, [pc, #16]	; (8005cb4 <vTaskSuspendAll+0x18>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	4a03      	ldr	r2, [pc, #12]	; (8005cb4 <vTaskSuspendAll+0x18>)
 8005ca8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005caa:	bf00      	nop
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr
 8005cb4:	20000488 	.word	0x20000488

08005cb8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005cc6:	4b41      	ldr	r3, [pc, #260]	; (8005dcc <xTaskResumeAll+0x114>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10a      	bne.n	8005ce4 <xTaskResumeAll+0x2c>
	__asm volatile
 8005cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd2:	f383 8811 	msr	BASEPRI, r3
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	603b      	str	r3, [r7, #0]
}
 8005ce0:	bf00      	nop
 8005ce2:	e7fe      	b.n	8005ce2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005ce4:	f000 fef6 	bl	8006ad4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005ce8:	4b38      	ldr	r3, [pc, #224]	; (8005dcc <xTaskResumeAll+0x114>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	3b01      	subs	r3, #1
 8005cee:	4a37      	ldr	r2, [pc, #220]	; (8005dcc <xTaskResumeAll+0x114>)
 8005cf0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cf2:	4b36      	ldr	r3, [pc, #216]	; (8005dcc <xTaskResumeAll+0x114>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d161      	bne.n	8005dbe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005cfa:	4b35      	ldr	r3, [pc, #212]	; (8005dd0 <xTaskResumeAll+0x118>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d05d      	beq.n	8005dbe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d02:	e02e      	b.n	8005d62 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d04:	4b33      	ldr	r3, [pc, #204]	; (8005dd4 <xTaskResumeAll+0x11c>)
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	3318      	adds	r3, #24
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7fe fe11 	bl	8004938 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	3304      	adds	r3, #4
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7fe fe0c 	bl	8004938 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d24:	2201      	movs	r2, #1
 8005d26:	409a      	lsls	r2, r3
 8005d28:	4b2b      	ldr	r3, [pc, #172]	; (8005dd8 <xTaskResumeAll+0x120>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	4a2a      	ldr	r2, [pc, #168]	; (8005dd8 <xTaskResumeAll+0x120>)
 8005d30:	6013      	str	r3, [r2, #0]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d36:	4613      	mov	r3, r2
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	4413      	add	r3, r2
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	4a27      	ldr	r2, [pc, #156]	; (8005ddc <xTaskResumeAll+0x124>)
 8005d40:	441a      	add	r2, r3
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	3304      	adds	r3, #4
 8005d46:	4619      	mov	r1, r3
 8005d48:	4610      	mov	r0, r2
 8005d4a:	f7fe fd98 	bl	800487e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d52:	4b23      	ldr	r3, [pc, #140]	; (8005de0 <xTaskResumeAll+0x128>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d302      	bcc.n	8005d62 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005d5c:	4b21      	ldr	r3, [pc, #132]	; (8005de4 <xTaskResumeAll+0x12c>)
 8005d5e:	2201      	movs	r2, #1
 8005d60:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d62:	4b1c      	ldr	r3, [pc, #112]	; (8005dd4 <xTaskResumeAll+0x11c>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1cc      	bne.n	8005d04 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d001      	beq.n	8005d74 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005d70:	f000 fb3e 	bl	80063f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005d74:	4b1c      	ldr	r3, [pc, #112]	; (8005de8 <xTaskResumeAll+0x130>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d010      	beq.n	8005da2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005d80:	f000 f858 	bl	8005e34 <xTaskIncrementTick>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d002      	beq.n	8005d90 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005d8a:	4b16      	ldr	r3, [pc, #88]	; (8005de4 <xTaskResumeAll+0x12c>)
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	3b01      	subs	r3, #1
 8005d94:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d1f1      	bne.n	8005d80 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005d9c:	4b12      	ldr	r3, [pc, #72]	; (8005de8 <xTaskResumeAll+0x130>)
 8005d9e:	2200      	movs	r2, #0
 8005da0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005da2:	4b10      	ldr	r3, [pc, #64]	; (8005de4 <xTaskResumeAll+0x12c>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d009      	beq.n	8005dbe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005daa:	2301      	movs	r3, #1
 8005dac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005dae:	4b0f      	ldr	r3, [pc, #60]	; (8005dec <xTaskResumeAll+0x134>)
 8005db0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005db4:	601a      	str	r2, [r3, #0]
 8005db6:	f3bf 8f4f 	dsb	sy
 8005dba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005dbe:	f000 feb9 	bl	8006b34 <vPortExitCritical>

	return xAlreadyYielded;
 8005dc2:	68bb      	ldr	r3, [r7, #8]
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3710      	adds	r7, #16
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	20000488 	.word	0x20000488
 8005dd0:	20000460 	.word	0x20000460
 8005dd4:	20000420 	.word	0x20000420
 8005dd8:	20000468 	.word	0x20000468
 8005ddc:	20000364 	.word	0x20000364
 8005de0:	20000360 	.word	0x20000360
 8005de4:	20000474 	.word	0x20000474
 8005de8:	20000470 	.word	0x20000470
 8005dec:	e000ed04 	.word	0xe000ed04

08005df0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005df6:	4b05      	ldr	r3, [pc, #20]	; (8005e0c <xTaskGetTickCount+0x1c>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005dfc:	687b      	ldr	r3, [r7, #4]
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	370c      	adds	r7, #12
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop
 8005e0c:	20000464 	.word	0x20000464

08005e10 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e16:	f000 ff3f 	bl	8006c98 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8005e1e:	4b04      	ldr	r3, [pc, #16]	; (8005e30 <xTaskGetTickCountFromISR+0x20>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e24:	683b      	ldr	r3, [r7, #0]
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3708      	adds	r7, #8
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	20000464 	.word	0x20000464

08005e34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b086      	sub	sp, #24
 8005e38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e3e:	4b4e      	ldr	r3, [pc, #312]	; (8005f78 <xTaskIncrementTick+0x144>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f040 808e 	bne.w	8005f64 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005e48:	4b4c      	ldr	r3, [pc, #304]	; (8005f7c <xTaskIncrementTick+0x148>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005e50:	4a4a      	ldr	r2, [pc, #296]	; (8005f7c <xTaskIncrementTick+0x148>)
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d120      	bne.n	8005e9e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005e5c:	4b48      	ldr	r3, [pc, #288]	; (8005f80 <xTaskIncrementTick+0x14c>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00a      	beq.n	8005e7c <xTaskIncrementTick+0x48>
	__asm volatile
 8005e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6a:	f383 8811 	msr	BASEPRI, r3
 8005e6e:	f3bf 8f6f 	isb	sy
 8005e72:	f3bf 8f4f 	dsb	sy
 8005e76:	603b      	str	r3, [r7, #0]
}
 8005e78:	bf00      	nop
 8005e7a:	e7fe      	b.n	8005e7a <xTaskIncrementTick+0x46>
 8005e7c:	4b40      	ldr	r3, [pc, #256]	; (8005f80 <xTaskIncrementTick+0x14c>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	60fb      	str	r3, [r7, #12]
 8005e82:	4b40      	ldr	r3, [pc, #256]	; (8005f84 <xTaskIncrementTick+0x150>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a3e      	ldr	r2, [pc, #248]	; (8005f80 <xTaskIncrementTick+0x14c>)
 8005e88:	6013      	str	r3, [r2, #0]
 8005e8a:	4a3e      	ldr	r2, [pc, #248]	; (8005f84 <xTaskIncrementTick+0x150>)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6013      	str	r3, [r2, #0]
 8005e90:	4b3d      	ldr	r3, [pc, #244]	; (8005f88 <xTaskIncrementTick+0x154>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	3301      	adds	r3, #1
 8005e96:	4a3c      	ldr	r2, [pc, #240]	; (8005f88 <xTaskIncrementTick+0x154>)
 8005e98:	6013      	str	r3, [r2, #0]
 8005e9a:	f000 faa9 	bl	80063f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005e9e:	4b3b      	ldr	r3, [pc, #236]	; (8005f8c <xTaskIncrementTick+0x158>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	693a      	ldr	r2, [r7, #16]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d348      	bcc.n	8005f3a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ea8:	4b35      	ldr	r3, [pc, #212]	; (8005f80 <xTaskIncrementTick+0x14c>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d104      	bne.n	8005ebc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005eb2:	4b36      	ldr	r3, [pc, #216]	; (8005f8c <xTaskIncrementTick+0x158>)
 8005eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8005eb8:	601a      	str	r2, [r3, #0]
					break;
 8005eba:	e03e      	b.n	8005f3a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ebc:	4b30      	ldr	r3, [pc, #192]	; (8005f80 <xTaskIncrementTick+0x14c>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ecc:	693a      	ldr	r2, [r7, #16]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d203      	bcs.n	8005edc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005ed4:	4a2d      	ldr	r2, [pc, #180]	; (8005f8c <xTaskIncrementTick+0x158>)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005eda:	e02e      	b.n	8005f3a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	3304      	adds	r3, #4
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f7fe fd29 	bl	8004938 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d004      	beq.n	8005ef8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	3318      	adds	r3, #24
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7fe fd20 	bl	8004938 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efc:	2201      	movs	r2, #1
 8005efe:	409a      	lsls	r2, r3
 8005f00:	4b23      	ldr	r3, [pc, #140]	; (8005f90 <xTaskIncrementTick+0x15c>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	4a22      	ldr	r2, [pc, #136]	; (8005f90 <xTaskIncrementTick+0x15c>)
 8005f08:	6013      	str	r3, [r2, #0]
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f0e:	4613      	mov	r3, r2
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	4413      	add	r3, r2
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	4a1f      	ldr	r2, [pc, #124]	; (8005f94 <xTaskIncrementTick+0x160>)
 8005f18:	441a      	add	r2, r3
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	3304      	adds	r3, #4
 8005f1e:	4619      	mov	r1, r3
 8005f20:	4610      	mov	r0, r2
 8005f22:	f7fe fcac 	bl	800487e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f2a:	4b1b      	ldr	r3, [pc, #108]	; (8005f98 <xTaskIncrementTick+0x164>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d3b9      	bcc.n	8005ea8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005f34:	2301      	movs	r3, #1
 8005f36:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f38:	e7b6      	b.n	8005ea8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f3a:	4b17      	ldr	r3, [pc, #92]	; (8005f98 <xTaskIncrementTick+0x164>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f40:	4914      	ldr	r1, [pc, #80]	; (8005f94 <xTaskIncrementTick+0x160>)
 8005f42:	4613      	mov	r3, r2
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	4413      	add	r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	440b      	add	r3, r1
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d901      	bls.n	8005f56 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005f52:	2301      	movs	r3, #1
 8005f54:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005f56:	4b11      	ldr	r3, [pc, #68]	; (8005f9c <xTaskIncrementTick+0x168>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d007      	beq.n	8005f6e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	617b      	str	r3, [r7, #20]
 8005f62:	e004      	b.n	8005f6e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005f64:	4b0e      	ldr	r3, [pc, #56]	; (8005fa0 <xTaskIncrementTick+0x16c>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	4a0d      	ldr	r2, [pc, #52]	; (8005fa0 <xTaskIncrementTick+0x16c>)
 8005f6c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005f6e:	697b      	ldr	r3, [r7, #20]
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3718      	adds	r7, #24
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	20000488 	.word	0x20000488
 8005f7c:	20000464 	.word	0x20000464
 8005f80:	20000418 	.word	0x20000418
 8005f84:	2000041c 	.word	0x2000041c
 8005f88:	20000478 	.word	0x20000478
 8005f8c:	20000480 	.word	0x20000480
 8005f90:	20000468 	.word	0x20000468
 8005f94:	20000364 	.word	0x20000364
 8005f98:	20000360 	.word	0x20000360
 8005f9c:	20000474 	.word	0x20000474
 8005fa0:	20000470 	.word	0x20000470

08005fa4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b087      	sub	sp, #28
 8005fa8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005faa:	4b29      	ldr	r3, [pc, #164]	; (8006050 <vTaskSwitchContext+0xac>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d003      	beq.n	8005fba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005fb2:	4b28      	ldr	r3, [pc, #160]	; (8006054 <vTaskSwitchContext+0xb0>)
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005fb8:	e044      	b.n	8006044 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005fba:	4b26      	ldr	r3, [pc, #152]	; (8006054 <vTaskSwitchContext+0xb0>)
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fc0:	4b25      	ldr	r3, [pc, #148]	; (8006058 <vTaskSwitchContext+0xb4>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	fab3 f383 	clz	r3, r3
 8005fcc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005fce:	7afb      	ldrb	r3, [r7, #11]
 8005fd0:	f1c3 031f 	rsb	r3, r3, #31
 8005fd4:	617b      	str	r3, [r7, #20]
 8005fd6:	4921      	ldr	r1, [pc, #132]	; (800605c <vTaskSwitchContext+0xb8>)
 8005fd8:	697a      	ldr	r2, [r7, #20]
 8005fda:	4613      	mov	r3, r2
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	4413      	add	r3, r2
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	440b      	add	r3, r1
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d10a      	bne.n	8006000 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fee:	f383 8811 	msr	BASEPRI, r3
 8005ff2:	f3bf 8f6f 	isb	sy
 8005ff6:	f3bf 8f4f 	dsb	sy
 8005ffa:	607b      	str	r3, [r7, #4]
}
 8005ffc:	bf00      	nop
 8005ffe:	e7fe      	b.n	8005ffe <vTaskSwitchContext+0x5a>
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	4613      	mov	r3, r2
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	4413      	add	r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	4a14      	ldr	r2, [pc, #80]	; (800605c <vTaskSwitchContext+0xb8>)
 800600c:	4413      	add	r3, r2
 800600e:	613b      	str	r3, [r7, #16]
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	685a      	ldr	r2, [r3, #4]
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	605a      	str	r2, [r3, #4]
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	685a      	ldr	r2, [r3, #4]
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	3308      	adds	r3, #8
 8006022:	429a      	cmp	r2, r3
 8006024:	d104      	bne.n	8006030 <vTaskSwitchContext+0x8c>
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	685a      	ldr	r2, [r3, #4]
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	605a      	str	r2, [r3, #4]
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	4a0a      	ldr	r2, [pc, #40]	; (8006060 <vTaskSwitchContext+0xbc>)
 8006038:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800603a:	4b09      	ldr	r3, [pc, #36]	; (8006060 <vTaskSwitchContext+0xbc>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	334c      	adds	r3, #76	; 0x4c
 8006040:	4a08      	ldr	r2, [pc, #32]	; (8006064 <vTaskSwitchContext+0xc0>)
 8006042:	6013      	str	r3, [r2, #0]
}
 8006044:	bf00      	nop
 8006046:	371c      	adds	r7, #28
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr
 8006050:	20000488 	.word	0x20000488
 8006054:	20000474 	.word	0x20000474
 8006058:	20000468 	.word	0x20000468
 800605c:	20000364 	.word	0x20000364
 8006060:	20000360 	.word	0x20000360
 8006064:	20000020 	.word	0x20000020

08006068 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d10a      	bne.n	800608e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607c:	f383 8811 	msr	BASEPRI, r3
 8006080:	f3bf 8f6f 	isb	sy
 8006084:	f3bf 8f4f 	dsb	sy
 8006088:	60fb      	str	r3, [r7, #12]
}
 800608a:	bf00      	nop
 800608c:	e7fe      	b.n	800608c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800608e:	4b07      	ldr	r3, [pc, #28]	; (80060ac <vTaskPlaceOnEventList+0x44>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	3318      	adds	r3, #24
 8006094:	4619      	mov	r1, r3
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f7fe fc15 	bl	80048c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800609c:	2101      	movs	r1, #1
 800609e:	6838      	ldr	r0, [r7, #0]
 80060a0:	f000 fb82 	bl	80067a8 <prvAddCurrentTaskToDelayedList>
}
 80060a4:	bf00      	nop
 80060a6:	3710      	adds	r7, #16
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	20000360 	.word	0x20000360

080060b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b086      	sub	sp, #24
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d10a      	bne.n	80060dc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80060c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ca:	f383 8811 	msr	BASEPRI, r3
 80060ce:	f3bf 8f6f 	isb	sy
 80060d2:	f3bf 8f4f 	dsb	sy
 80060d6:	60fb      	str	r3, [r7, #12]
}
 80060d8:	bf00      	nop
 80060da:	e7fe      	b.n	80060da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	3318      	adds	r3, #24
 80060e0:	4618      	mov	r0, r3
 80060e2:	f7fe fc29 	bl	8004938 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060e6:	4b1d      	ldr	r3, [pc, #116]	; (800615c <xTaskRemoveFromEventList+0xac>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d11c      	bne.n	8006128 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	3304      	adds	r3, #4
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7fe fc20 	bl	8004938 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fc:	2201      	movs	r2, #1
 80060fe:	409a      	lsls	r2, r3
 8006100:	4b17      	ldr	r3, [pc, #92]	; (8006160 <xTaskRemoveFromEventList+0xb0>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4313      	orrs	r3, r2
 8006106:	4a16      	ldr	r2, [pc, #88]	; (8006160 <xTaskRemoveFromEventList+0xb0>)
 8006108:	6013      	str	r3, [r2, #0]
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800610e:	4613      	mov	r3, r2
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	4413      	add	r3, r2
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	4a13      	ldr	r2, [pc, #76]	; (8006164 <xTaskRemoveFromEventList+0xb4>)
 8006118:	441a      	add	r2, r3
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	3304      	adds	r3, #4
 800611e:	4619      	mov	r1, r3
 8006120:	4610      	mov	r0, r2
 8006122:	f7fe fbac 	bl	800487e <vListInsertEnd>
 8006126:	e005      	b.n	8006134 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	3318      	adds	r3, #24
 800612c:	4619      	mov	r1, r3
 800612e:	480e      	ldr	r0, [pc, #56]	; (8006168 <xTaskRemoveFromEventList+0xb8>)
 8006130:	f7fe fba5 	bl	800487e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006138:	4b0c      	ldr	r3, [pc, #48]	; (800616c <xTaskRemoveFromEventList+0xbc>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613e:	429a      	cmp	r2, r3
 8006140:	d905      	bls.n	800614e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006142:	2301      	movs	r3, #1
 8006144:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006146:	4b0a      	ldr	r3, [pc, #40]	; (8006170 <xTaskRemoveFromEventList+0xc0>)
 8006148:	2201      	movs	r2, #1
 800614a:	601a      	str	r2, [r3, #0]
 800614c:	e001      	b.n	8006152 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800614e:	2300      	movs	r3, #0
 8006150:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006152:	697b      	ldr	r3, [r7, #20]
}
 8006154:	4618      	mov	r0, r3
 8006156:	3718      	adds	r7, #24
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	20000488 	.word	0x20000488
 8006160:	20000468 	.word	0x20000468
 8006164:	20000364 	.word	0x20000364
 8006168:	20000420 	.word	0x20000420
 800616c:	20000360 	.word	0x20000360
 8006170:	20000474 	.word	0x20000474

08006174 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800617c:	4b06      	ldr	r3, [pc, #24]	; (8006198 <vTaskInternalSetTimeOutState+0x24>)
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006184:	4b05      	ldr	r3, [pc, #20]	; (800619c <vTaskInternalSetTimeOutState+0x28>)
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	605a      	str	r2, [r3, #4]
}
 800618c:	bf00      	nop
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr
 8006198:	20000478 	.word	0x20000478
 800619c:	20000464 	.word	0x20000464

080061a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b088      	sub	sp, #32
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d10a      	bne.n	80061c6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80061b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b4:	f383 8811 	msr	BASEPRI, r3
 80061b8:	f3bf 8f6f 	isb	sy
 80061bc:	f3bf 8f4f 	dsb	sy
 80061c0:	613b      	str	r3, [r7, #16]
}
 80061c2:	bf00      	nop
 80061c4:	e7fe      	b.n	80061c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d10a      	bne.n	80061e2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80061cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d0:	f383 8811 	msr	BASEPRI, r3
 80061d4:	f3bf 8f6f 	isb	sy
 80061d8:	f3bf 8f4f 	dsb	sy
 80061dc:	60fb      	str	r3, [r7, #12]
}
 80061de:	bf00      	nop
 80061e0:	e7fe      	b.n	80061e0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80061e2:	f000 fc77 	bl	8006ad4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80061e6:	4b1d      	ldr	r3, [pc, #116]	; (800625c <xTaskCheckForTimeOut+0xbc>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	69ba      	ldr	r2, [r7, #24]
 80061f2:	1ad3      	subs	r3, r2, r3
 80061f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061fe:	d102      	bne.n	8006206 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006200:	2300      	movs	r3, #0
 8006202:	61fb      	str	r3, [r7, #28]
 8006204:	e023      	b.n	800624e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	4b15      	ldr	r3, [pc, #84]	; (8006260 <xTaskCheckForTimeOut+0xc0>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	429a      	cmp	r2, r3
 8006210:	d007      	beq.n	8006222 <xTaskCheckForTimeOut+0x82>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	69ba      	ldr	r2, [r7, #24]
 8006218:	429a      	cmp	r2, r3
 800621a:	d302      	bcc.n	8006222 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800621c:	2301      	movs	r3, #1
 800621e:	61fb      	str	r3, [r7, #28]
 8006220:	e015      	b.n	800624e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	697a      	ldr	r2, [r7, #20]
 8006228:	429a      	cmp	r2, r3
 800622a:	d20b      	bcs.n	8006244 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	1ad2      	subs	r2, r2, r3
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f7ff ff9b 	bl	8006174 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800623e:	2300      	movs	r3, #0
 8006240:	61fb      	str	r3, [r7, #28]
 8006242:	e004      	b.n	800624e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	2200      	movs	r2, #0
 8006248:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800624a:	2301      	movs	r3, #1
 800624c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800624e:	f000 fc71 	bl	8006b34 <vPortExitCritical>

	return xReturn;
 8006252:	69fb      	ldr	r3, [r7, #28]
}
 8006254:	4618      	mov	r0, r3
 8006256:	3720      	adds	r7, #32
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	20000464 	.word	0x20000464
 8006260:	20000478 	.word	0x20000478

08006264 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006264:	b480      	push	{r7}
 8006266:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006268:	4b03      	ldr	r3, [pc, #12]	; (8006278 <vTaskMissedYield+0x14>)
 800626a:	2201      	movs	r2, #1
 800626c:	601a      	str	r2, [r3, #0]
}
 800626e:	bf00      	nop
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr
 8006278:	20000474 	.word	0x20000474

0800627c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b082      	sub	sp, #8
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006284:	f000 f852 	bl	800632c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006288:	4b06      	ldr	r3, [pc, #24]	; (80062a4 <prvIdleTask+0x28>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d9f9      	bls.n	8006284 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006290:	4b05      	ldr	r3, [pc, #20]	; (80062a8 <prvIdleTask+0x2c>)
 8006292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006296:	601a      	str	r2, [r3, #0]
 8006298:	f3bf 8f4f 	dsb	sy
 800629c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80062a0:	e7f0      	b.n	8006284 <prvIdleTask+0x8>
 80062a2:	bf00      	nop
 80062a4:	20000364 	.word	0x20000364
 80062a8:	e000ed04 	.word	0xe000ed04

080062ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b082      	sub	sp, #8
 80062b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062b2:	2300      	movs	r3, #0
 80062b4:	607b      	str	r3, [r7, #4]
 80062b6:	e00c      	b.n	80062d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	4613      	mov	r3, r2
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	4413      	add	r3, r2
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	4a12      	ldr	r2, [pc, #72]	; (800630c <prvInitialiseTaskLists+0x60>)
 80062c4:	4413      	add	r3, r2
 80062c6:	4618      	mov	r0, r3
 80062c8:	f7fe faac 	bl	8004824 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	3301      	adds	r3, #1
 80062d0:	607b      	str	r3, [r7, #4]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2b06      	cmp	r3, #6
 80062d6:	d9ef      	bls.n	80062b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80062d8:	480d      	ldr	r0, [pc, #52]	; (8006310 <prvInitialiseTaskLists+0x64>)
 80062da:	f7fe faa3 	bl	8004824 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80062de:	480d      	ldr	r0, [pc, #52]	; (8006314 <prvInitialiseTaskLists+0x68>)
 80062e0:	f7fe faa0 	bl	8004824 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80062e4:	480c      	ldr	r0, [pc, #48]	; (8006318 <prvInitialiseTaskLists+0x6c>)
 80062e6:	f7fe fa9d 	bl	8004824 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80062ea:	480c      	ldr	r0, [pc, #48]	; (800631c <prvInitialiseTaskLists+0x70>)
 80062ec:	f7fe fa9a 	bl	8004824 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80062f0:	480b      	ldr	r0, [pc, #44]	; (8006320 <prvInitialiseTaskLists+0x74>)
 80062f2:	f7fe fa97 	bl	8004824 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80062f6:	4b0b      	ldr	r3, [pc, #44]	; (8006324 <prvInitialiseTaskLists+0x78>)
 80062f8:	4a05      	ldr	r2, [pc, #20]	; (8006310 <prvInitialiseTaskLists+0x64>)
 80062fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80062fc:	4b0a      	ldr	r3, [pc, #40]	; (8006328 <prvInitialiseTaskLists+0x7c>)
 80062fe:	4a05      	ldr	r2, [pc, #20]	; (8006314 <prvInitialiseTaskLists+0x68>)
 8006300:	601a      	str	r2, [r3, #0]
}
 8006302:	bf00      	nop
 8006304:	3708      	adds	r7, #8
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	20000364 	.word	0x20000364
 8006310:	200003f0 	.word	0x200003f0
 8006314:	20000404 	.word	0x20000404
 8006318:	20000420 	.word	0x20000420
 800631c:	20000434 	.word	0x20000434
 8006320:	2000044c 	.word	0x2000044c
 8006324:	20000418 	.word	0x20000418
 8006328:	2000041c 	.word	0x2000041c

0800632c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006332:	e019      	b.n	8006368 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006334:	f000 fbce 	bl	8006ad4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006338:	4b10      	ldr	r3, [pc, #64]	; (800637c <prvCheckTasksWaitingTermination+0x50>)
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	3304      	adds	r3, #4
 8006344:	4618      	mov	r0, r3
 8006346:	f7fe faf7 	bl	8004938 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800634a:	4b0d      	ldr	r3, [pc, #52]	; (8006380 <prvCheckTasksWaitingTermination+0x54>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	3b01      	subs	r3, #1
 8006350:	4a0b      	ldr	r2, [pc, #44]	; (8006380 <prvCheckTasksWaitingTermination+0x54>)
 8006352:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006354:	4b0b      	ldr	r3, [pc, #44]	; (8006384 <prvCheckTasksWaitingTermination+0x58>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	3b01      	subs	r3, #1
 800635a:	4a0a      	ldr	r2, [pc, #40]	; (8006384 <prvCheckTasksWaitingTermination+0x58>)
 800635c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800635e:	f000 fbe9 	bl	8006b34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 f810 	bl	8006388 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006368:	4b06      	ldr	r3, [pc, #24]	; (8006384 <prvCheckTasksWaitingTermination+0x58>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d1e1      	bne.n	8006334 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006370:	bf00      	nop
 8006372:	bf00      	nop
 8006374:	3708      	adds	r7, #8
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	20000434 	.word	0x20000434
 8006380:	20000460 	.word	0x20000460
 8006384:	20000448 	.word	0x20000448

08006388 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	334c      	adds	r3, #76	; 0x4c
 8006394:	4618      	mov	r0, r3
 8006396:	f00d fac7 	bl	8013928 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d108      	bne.n	80063b6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a8:	4618      	mov	r0, r3
 80063aa:	f000 fd81 	bl	8006eb0 <vPortFree>
				vPortFree( pxTCB );
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 fd7e 	bl	8006eb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80063b4:	e018      	b.n	80063e8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d103      	bne.n	80063c8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 fd75 	bl	8006eb0 <vPortFree>
	}
 80063c6:	e00f      	b.n	80063e8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	d00a      	beq.n	80063e8 <prvDeleteTCB+0x60>
	__asm volatile
 80063d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d6:	f383 8811 	msr	BASEPRI, r3
 80063da:	f3bf 8f6f 	isb	sy
 80063de:	f3bf 8f4f 	dsb	sy
 80063e2:	60fb      	str	r3, [r7, #12]
}
 80063e4:	bf00      	nop
 80063e6:	e7fe      	b.n	80063e6 <prvDeleteTCB+0x5e>
	}
 80063e8:	bf00      	nop
 80063ea:	3710      	adds	r7, #16
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063f6:	4b0c      	ldr	r3, [pc, #48]	; (8006428 <prvResetNextTaskUnblockTime+0x38>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d104      	bne.n	800640a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006400:	4b0a      	ldr	r3, [pc, #40]	; (800642c <prvResetNextTaskUnblockTime+0x3c>)
 8006402:	f04f 32ff 	mov.w	r2, #4294967295
 8006406:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006408:	e008      	b.n	800641c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800640a:	4b07      	ldr	r3, [pc, #28]	; (8006428 <prvResetNextTaskUnblockTime+0x38>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	4a04      	ldr	r2, [pc, #16]	; (800642c <prvResetNextTaskUnblockTime+0x3c>)
 800641a:	6013      	str	r3, [r2, #0]
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr
 8006428:	20000418 	.word	0x20000418
 800642c:	20000480 	.word	0x20000480

08006430 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006436:	4b0b      	ldr	r3, [pc, #44]	; (8006464 <xTaskGetSchedulerState+0x34>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d102      	bne.n	8006444 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800643e:	2301      	movs	r3, #1
 8006440:	607b      	str	r3, [r7, #4]
 8006442:	e008      	b.n	8006456 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006444:	4b08      	ldr	r3, [pc, #32]	; (8006468 <xTaskGetSchedulerState+0x38>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d102      	bne.n	8006452 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800644c:	2302      	movs	r3, #2
 800644e:	607b      	str	r3, [r7, #4]
 8006450:	e001      	b.n	8006456 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006452:	2300      	movs	r3, #0
 8006454:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006456:	687b      	ldr	r3, [r7, #4]
	}
 8006458:	4618      	mov	r0, r3
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr
 8006464:	2000046c 	.word	0x2000046c
 8006468:	20000488 	.word	0x20000488

0800646c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006478:	2300      	movs	r3, #0
 800647a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d05e      	beq.n	8006540 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006486:	4b31      	ldr	r3, [pc, #196]	; (800654c <xTaskPriorityInherit+0xe0>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800648c:	429a      	cmp	r2, r3
 800648e:	d24e      	bcs.n	800652e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	699b      	ldr	r3, [r3, #24]
 8006494:	2b00      	cmp	r3, #0
 8006496:	db06      	blt.n	80064a6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006498:	4b2c      	ldr	r3, [pc, #176]	; (800654c <xTaskPriorityInherit+0xe0>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649e:	f1c3 0207 	rsb	r2, r3, #7
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	6959      	ldr	r1, [r3, #20]
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ae:	4613      	mov	r3, r2
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	4413      	add	r3, r2
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	4a26      	ldr	r2, [pc, #152]	; (8006550 <xTaskPriorityInherit+0xe4>)
 80064b8:	4413      	add	r3, r2
 80064ba:	4299      	cmp	r1, r3
 80064bc:	d12f      	bne.n	800651e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	3304      	adds	r3, #4
 80064c2:	4618      	mov	r0, r3
 80064c4:	f7fe fa38 	bl	8004938 <uxListRemove>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d10a      	bne.n	80064e4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d2:	2201      	movs	r2, #1
 80064d4:	fa02 f303 	lsl.w	r3, r2, r3
 80064d8:	43da      	mvns	r2, r3
 80064da:	4b1e      	ldr	r3, [pc, #120]	; (8006554 <xTaskPriorityInherit+0xe8>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4013      	ands	r3, r2
 80064e0:	4a1c      	ldr	r2, [pc, #112]	; (8006554 <xTaskPriorityInherit+0xe8>)
 80064e2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80064e4:	4b19      	ldr	r3, [pc, #100]	; (800654c <xTaskPriorityInherit+0xe0>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f2:	2201      	movs	r2, #1
 80064f4:	409a      	lsls	r2, r3
 80064f6:	4b17      	ldr	r3, [pc, #92]	; (8006554 <xTaskPriorityInherit+0xe8>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	4a15      	ldr	r2, [pc, #84]	; (8006554 <xTaskPriorityInherit+0xe8>)
 80064fe:	6013      	str	r3, [r2, #0]
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006504:	4613      	mov	r3, r2
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	4413      	add	r3, r2
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	4a10      	ldr	r2, [pc, #64]	; (8006550 <xTaskPriorityInherit+0xe4>)
 800650e:	441a      	add	r2, r3
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	3304      	adds	r3, #4
 8006514:	4619      	mov	r1, r3
 8006516:	4610      	mov	r0, r2
 8006518:	f7fe f9b1 	bl	800487e <vListInsertEnd>
 800651c:	e004      	b.n	8006528 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800651e:	4b0b      	ldr	r3, [pc, #44]	; (800654c <xTaskPriorityInherit+0xe0>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006528:	2301      	movs	r3, #1
 800652a:	60fb      	str	r3, [r7, #12]
 800652c:	e008      	b.n	8006540 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006532:	4b06      	ldr	r3, [pc, #24]	; (800654c <xTaskPriorityInherit+0xe0>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006538:	429a      	cmp	r2, r3
 800653a:	d201      	bcs.n	8006540 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800653c:	2301      	movs	r3, #1
 800653e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006540:	68fb      	ldr	r3, [r7, #12]
	}
 8006542:	4618      	mov	r0, r3
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	20000360 	.word	0x20000360
 8006550:	20000364 	.word	0x20000364
 8006554:	20000468 	.word	0x20000468

08006558 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006558:	b580      	push	{r7, lr}
 800655a:	b086      	sub	sp, #24
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006564:	2300      	movs	r3, #0
 8006566:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d06e      	beq.n	800664c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800656e:	4b3a      	ldr	r3, [pc, #232]	; (8006658 <xTaskPriorityDisinherit+0x100>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	693a      	ldr	r2, [r7, #16]
 8006574:	429a      	cmp	r2, r3
 8006576:	d00a      	beq.n	800658e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657c:	f383 8811 	msr	BASEPRI, r3
 8006580:	f3bf 8f6f 	isb	sy
 8006584:	f3bf 8f4f 	dsb	sy
 8006588:	60fb      	str	r3, [r7, #12]
}
 800658a:	bf00      	nop
 800658c:	e7fe      	b.n	800658c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10a      	bne.n	80065ac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659a:	f383 8811 	msr	BASEPRI, r3
 800659e:	f3bf 8f6f 	isb	sy
 80065a2:	f3bf 8f4f 	dsb	sy
 80065a6:	60bb      	str	r3, [r7, #8]
}
 80065a8:	bf00      	nop
 80065aa:	e7fe      	b.n	80065aa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065b0:	1e5a      	subs	r2, r3, #1
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065be:	429a      	cmp	r2, r3
 80065c0:	d044      	beq.n	800664c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d140      	bne.n	800664c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	3304      	adds	r3, #4
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7fe f9b2 	bl	8004938 <uxListRemove>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d115      	bne.n	8006606 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065de:	491f      	ldr	r1, [pc, #124]	; (800665c <xTaskPriorityDisinherit+0x104>)
 80065e0:	4613      	mov	r3, r2
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	4413      	add	r3, r2
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	440b      	add	r3, r1
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d10a      	bne.n	8006606 <xTaskPriorityDisinherit+0xae>
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f4:	2201      	movs	r2, #1
 80065f6:	fa02 f303 	lsl.w	r3, r2, r3
 80065fa:	43da      	mvns	r2, r3
 80065fc:	4b18      	ldr	r3, [pc, #96]	; (8006660 <xTaskPriorityDisinherit+0x108>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4013      	ands	r3, r2
 8006602:	4a17      	ldr	r2, [pc, #92]	; (8006660 <xTaskPriorityDisinherit+0x108>)
 8006604:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006612:	f1c3 0207 	rsb	r2, r3, #7
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661e:	2201      	movs	r2, #1
 8006620:	409a      	lsls	r2, r3
 8006622:	4b0f      	ldr	r3, [pc, #60]	; (8006660 <xTaskPriorityDisinherit+0x108>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4313      	orrs	r3, r2
 8006628:	4a0d      	ldr	r2, [pc, #52]	; (8006660 <xTaskPriorityDisinherit+0x108>)
 800662a:	6013      	str	r3, [r2, #0]
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006630:	4613      	mov	r3, r2
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	4413      	add	r3, r2
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	4a08      	ldr	r2, [pc, #32]	; (800665c <xTaskPriorityDisinherit+0x104>)
 800663a:	441a      	add	r2, r3
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	3304      	adds	r3, #4
 8006640:	4619      	mov	r1, r3
 8006642:	4610      	mov	r0, r2
 8006644:	f7fe f91b 	bl	800487e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006648:	2301      	movs	r3, #1
 800664a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800664c:	697b      	ldr	r3, [r7, #20]
	}
 800664e:	4618      	mov	r0, r3
 8006650:	3718      	adds	r7, #24
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	20000360 	.word	0x20000360
 800665c:	20000364 	.word	0x20000364
 8006660:	20000468 	.word	0x20000468

08006664 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006664:	b580      	push	{r7, lr}
 8006666:	b088      	sub	sp, #32
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006672:	2301      	movs	r3, #1
 8006674:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d077      	beq.n	800676c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006680:	2b00      	cmp	r3, #0
 8006682:	d10a      	bne.n	800669a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006688:	f383 8811 	msr	BASEPRI, r3
 800668c:	f3bf 8f6f 	isb	sy
 8006690:	f3bf 8f4f 	dsb	sy
 8006694:	60fb      	str	r3, [r7, #12]
}
 8006696:	bf00      	nop
 8006698:	e7fe      	b.n	8006698 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800669e:	683a      	ldr	r2, [r7, #0]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d902      	bls.n	80066aa <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	61fb      	str	r3, [r7, #28]
 80066a8:	e002      	b.n	80066b0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ae:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b4:	69fa      	ldr	r2, [r7, #28]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d058      	beq.n	800676c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066be:	697a      	ldr	r2, [r7, #20]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d153      	bne.n	800676c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80066c4:	4b2b      	ldr	r3, [pc, #172]	; (8006774 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	69ba      	ldr	r2, [r7, #24]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d10a      	bne.n	80066e4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80066ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d2:	f383 8811 	msr	BASEPRI, r3
 80066d6:	f3bf 8f6f 	isb	sy
 80066da:	f3bf 8f4f 	dsb	sy
 80066de:	60bb      	str	r3, [r7, #8]
}
 80066e0:	bf00      	nop
 80066e2:	e7fe      	b.n	80066e2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	69fa      	ldr	r2, [r7, #28]
 80066ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	db04      	blt.n	8006702 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	f1c3 0207 	rsb	r2, r3, #7
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	6959      	ldr	r1, [r3, #20]
 8006706:	693a      	ldr	r2, [r7, #16]
 8006708:	4613      	mov	r3, r2
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	4413      	add	r3, r2
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	4a19      	ldr	r2, [pc, #100]	; (8006778 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006712:	4413      	add	r3, r2
 8006714:	4299      	cmp	r1, r3
 8006716:	d129      	bne.n	800676c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	3304      	adds	r3, #4
 800671c:	4618      	mov	r0, r3
 800671e:	f7fe f90b 	bl	8004938 <uxListRemove>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d10a      	bne.n	800673e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672c:	2201      	movs	r2, #1
 800672e:	fa02 f303 	lsl.w	r3, r2, r3
 8006732:	43da      	mvns	r2, r3
 8006734:	4b11      	ldr	r3, [pc, #68]	; (800677c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4013      	ands	r3, r2
 800673a:	4a10      	ldr	r2, [pc, #64]	; (800677c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800673c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006742:	2201      	movs	r2, #1
 8006744:	409a      	lsls	r2, r3
 8006746:	4b0d      	ldr	r3, [pc, #52]	; (800677c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4313      	orrs	r3, r2
 800674c:	4a0b      	ldr	r2, [pc, #44]	; (800677c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800674e:	6013      	str	r3, [r2, #0]
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006754:	4613      	mov	r3, r2
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	4413      	add	r3, r2
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	4a06      	ldr	r2, [pc, #24]	; (8006778 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800675e:	441a      	add	r2, r3
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	3304      	adds	r3, #4
 8006764:	4619      	mov	r1, r3
 8006766:	4610      	mov	r0, r2
 8006768:	f7fe f889 	bl	800487e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800676c:	bf00      	nop
 800676e:	3720      	adds	r7, #32
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	20000360 	.word	0x20000360
 8006778:	20000364 	.word	0x20000364
 800677c:	20000468 	.word	0x20000468

08006780 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006780:	b480      	push	{r7}
 8006782:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006784:	4b07      	ldr	r3, [pc, #28]	; (80067a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d004      	beq.n	8006796 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800678c:	4b05      	ldr	r3, [pc, #20]	; (80067a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006792:	3201      	adds	r2, #1
 8006794:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006796:	4b03      	ldr	r3, [pc, #12]	; (80067a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8006798:	681b      	ldr	r3, [r3, #0]
	}
 800679a:	4618      	mov	r0, r3
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr
 80067a4:	20000360 	.word	0x20000360

080067a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80067b2:	4b29      	ldr	r3, [pc, #164]	; (8006858 <prvAddCurrentTaskToDelayedList+0xb0>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067b8:	4b28      	ldr	r3, [pc, #160]	; (800685c <prvAddCurrentTaskToDelayedList+0xb4>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	3304      	adds	r3, #4
 80067be:	4618      	mov	r0, r3
 80067c0:	f7fe f8ba 	bl	8004938 <uxListRemove>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d10b      	bne.n	80067e2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80067ca:	4b24      	ldr	r3, [pc, #144]	; (800685c <prvAddCurrentTaskToDelayedList+0xb4>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d0:	2201      	movs	r2, #1
 80067d2:	fa02 f303 	lsl.w	r3, r2, r3
 80067d6:	43da      	mvns	r2, r3
 80067d8:	4b21      	ldr	r3, [pc, #132]	; (8006860 <prvAddCurrentTaskToDelayedList+0xb8>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4013      	ands	r3, r2
 80067de:	4a20      	ldr	r2, [pc, #128]	; (8006860 <prvAddCurrentTaskToDelayedList+0xb8>)
 80067e0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e8:	d10a      	bne.n	8006800 <prvAddCurrentTaskToDelayedList+0x58>
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d007      	beq.n	8006800 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067f0:	4b1a      	ldr	r3, [pc, #104]	; (800685c <prvAddCurrentTaskToDelayedList+0xb4>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	3304      	adds	r3, #4
 80067f6:	4619      	mov	r1, r3
 80067f8:	481a      	ldr	r0, [pc, #104]	; (8006864 <prvAddCurrentTaskToDelayedList+0xbc>)
 80067fa:	f7fe f840 	bl	800487e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80067fe:	e026      	b.n	800684e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4413      	add	r3, r2
 8006806:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006808:	4b14      	ldr	r3, [pc, #80]	; (800685c <prvAddCurrentTaskToDelayedList+0xb4>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	68ba      	ldr	r2, [r7, #8]
 800680e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006810:	68ba      	ldr	r2, [r7, #8]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	429a      	cmp	r2, r3
 8006816:	d209      	bcs.n	800682c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006818:	4b13      	ldr	r3, [pc, #76]	; (8006868 <prvAddCurrentTaskToDelayedList+0xc0>)
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	4b0f      	ldr	r3, [pc, #60]	; (800685c <prvAddCurrentTaskToDelayedList+0xb4>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	3304      	adds	r3, #4
 8006822:	4619      	mov	r1, r3
 8006824:	4610      	mov	r0, r2
 8006826:	f7fe f84e 	bl	80048c6 <vListInsert>
}
 800682a:	e010      	b.n	800684e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800682c:	4b0f      	ldr	r3, [pc, #60]	; (800686c <prvAddCurrentTaskToDelayedList+0xc4>)
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	4b0a      	ldr	r3, [pc, #40]	; (800685c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	3304      	adds	r3, #4
 8006836:	4619      	mov	r1, r3
 8006838:	4610      	mov	r0, r2
 800683a:	f7fe f844 	bl	80048c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800683e:	4b0c      	ldr	r3, [pc, #48]	; (8006870 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68ba      	ldr	r2, [r7, #8]
 8006844:	429a      	cmp	r2, r3
 8006846:	d202      	bcs.n	800684e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006848:	4a09      	ldr	r2, [pc, #36]	; (8006870 <prvAddCurrentTaskToDelayedList+0xc8>)
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	6013      	str	r3, [r2, #0]
}
 800684e:	bf00      	nop
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	20000464 	.word	0x20000464
 800685c:	20000360 	.word	0x20000360
 8006860:	20000468 	.word	0x20000468
 8006864:	2000044c 	.word	0x2000044c
 8006868:	2000041c 	.word	0x2000041c
 800686c:	20000418 	.word	0x20000418
 8006870:	20000480 	.word	0x20000480

08006874 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006874:	b480      	push	{r7}
 8006876:	b085      	sub	sp, #20
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	3b04      	subs	r3, #4
 8006884:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800688c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	3b04      	subs	r3, #4
 8006892:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	f023 0201 	bic.w	r2, r3, #1
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	3b04      	subs	r3, #4
 80068a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80068a4:	4a0c      	ldr	r2, [pc, #48]	; (80068d8 <pxPortInitialiseStack+0x64>)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	3b14      	subs	r3, #20
 80068ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	3b04      	subs	r3, #4
 80068ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f06f 0202 	mvn.w	r2, #2
 80068c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	3b20      	subs	r3, #32
 80068c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80068ca:	68fb      	ldr	r3, [r7, #12]
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3714      	adds	r7, #20
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr
 80068d8:	080068dd 	.word	0x080068dd

080068dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80068e2:	2300      	movs	r3, #0
 80068e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80068e6:	4b12      	ldr	r3, [pc, #72]	; (8006930 <prvTaskExitError+0x54>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ee:	d00a      	beq.n	8006906 <prvTaskExitError+0x2a>
	__asm volatile
 80068f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f4:	f383 8811 	msr	BASEPRI, r3
 80068f8:	f3bf 8f6f 	isb	sy
 80068fc:	f3bf 8f4f 	dsb	sy
 8006900:	60fb      	str	r3, [r7, #12]
}
 8006902:	bf00      	nop
 8006904:	e7fe      	b.n	8006904 <prvTaskExitError+0x28>
	__asm volatile
 8006906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690a:	f383 8811 	msr	BASEPRI, r3
 800690e:	f3bf 8f6f 	isb	sy
 8006912:	f3bf 8f4f 	dsb	sy
 8006916:	60bb      	str	r3, [r7, #8]
}
 8006918:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800691a:	bf00      	nop
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d0fc      	beq.n	800691c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006922:	bf00      	nop
 8006924:	bf00      	nop
 8006926:	3714      	adds	r7, #20
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr
 8006930:	2000000c 	.word	0x2000000c
	...

08006940 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006940:	4b07      	ldr	r3, [pc, #28]	; (8006960 <pxCurrentTCBConst2>)
 8006942:	6819      	ldr	r1, [r3, #0]
 8006944:	6808      	ldr	r0, [r1, #0]
 8006946:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800694a:	f380 8809 	msr	PSP, r0
 800694e:	f3bf 8f6f 	isb	sy
 8006952:	f04f 0000 	mov.w	r0, #0
 8006956:	f380 8811 	msr	BASEPRI, r0
 800695a:	4770      	bx	lr
 800695c:	f3af 8000 	nop.w

08006960 <pxCurrentTCBConst2>:
 8006960:	20000360 	.word	0x20000360
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006964:	bf00      	nop
 8006966:	bf00      	nop

08006968 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006968:	4808      	ldr	r0, [pc, #32]	; (800698c <prvPortStartFirstTask+0x24>)
 800696a:	6800      	ldr	r0, [r0, #0]
 800696c:	6800      	ldr	r0, [r0, #0]
 800696e:	f380 8808 	msr	MSP, r0
 8006972:	f04f 0000 	mov.w	r0, #0
 8006976:	f380 8814 	msr	CONTROL, r0
 800697a:	b662      	cpsie	i
 800697c:	b661      	cpsie	f
 800697e:	f3bf 8f4f 	dsb	sy
 8006982:	f3bf 8f6f 	isb	sy
 8006986:	df00      	svc	0
 8006988:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800698a:	bf00      	nop
 800698c:	e000ed08 	.word	0xe000ed08

08006990 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b086      	sub	sp, #24
 8006994:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006996:	4b46      	ldr	r3, [pc, #280]	; (8006ab0 <xPortStartScheduler+0x120>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a46      	ldr	r2, [pc, #280]	; (8006ab4 <xPortStartScheduler+0x124>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d10a      	bne.n	80069b6 <xPortStartScheduler+0x26>
	__asm volatile
 80069a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a4:	f383 8811 	msr	BASEPRI, r3
 80069a8:	f3bf 8f6f 	isb	sy
 80069ac:	f3bf 8f4f 	dsb	sy
 80069b0:	613b      	str	r3, [r7, #16]
}
 80069b2:	bf00      	nop
 80069b4:	e7fe      	b.n	80069b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80069b6:	4b3e      	ldr	r3, [pc, #248]	; (8006ab0 <xPortStartScheduler+0x120>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a3f      	ldr	r2, [pc, #252]	; (8006ab8 <xPortStartScheduler+0x128>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d10a      	bne.n	80069d6 <xPortStartScheduler+0x46>
	__asm volatile
 80069c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c4:	f383 8811 	msr	BASEPRI, r3
 80069c8:	f3bf 8f6f 	isb	sy
 80069cc:	f3bf 8f4f 	dsb	sy
 80069d0:	60fb      	str	r3, [r7, #12]
}
 80069d2:	bf00      	nop
 80069d4:	e7fe      	b.n	80069d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80069d6:	4b39      	ldr	r3, [pc, #228]	; (8006abc <xPortStartScheduler+0x12c>)
 80069d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	22ff      	movs	r2, #255	; 0xff
 80069e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80069f0:	78fb      	ldrb	r3, [r7, #3]
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80069f8:	b2da      	uxtb	r2, r3
 80069fa:	4b31      	ldr	r3, [pc, #196]	; (8006ac0 <xPortStartScheduler+0x130>)
 80069fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80069fe:	4b31      	ldr	r3, [pc, #196]	; (8006ac4 <xPortStartScheduler+0x134>)
 8006a00:	2207      	movs	r2, #7
 8006a02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a04:	e009      	b.n	8006a1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006a06:	4b2f      	ldr	r3, [pc, #188]	; (8006ac4 <xPortStartScheduler+0x134>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	3b01      	subs	r3, #1
 8006a0c:	4a2d      	ldr	r2, [pc, #180]	; (8006ac4 <xPortStartScheduler+0x134>)
 8006a0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006a10:	78fb      	ldrb	r3, [r7, #3]
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	005b      	lsls	r3, r3, #1
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a1a:	78fb      	ldrb	r3, [r7, #3]
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a22:	2b80      	cmp	r3, #128	; 0x80
 8006a24:	d0ef      	beq.n	8006a06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006a26:	4b27      	ldr	r3, [pc, #156]	; (8006ac4 <xPortStartScheduler+0x134>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f1c3 0307 	rsb	r3, r3, #7
 8006a2e:	2b04      	cmp	r3, #4
 8006a30:	d00a      	beq.n	8006a48 <xPortStartScheduler+0xb8>
	__asm volatile
 8006a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a36:	f383 8811 	msr	BASEPRI, r3
 8006a3a:	f3bf 8f6f 	isb	sy
 8006a3e:	f3bf 8f4f 	dsb	sy
 8006a42:	60bb      	str	r3, [r7, #8]
}
 8006a44:	bf00      	nop
 8006a46:	e7fe      	b.n	8006a46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006a48:	4b1e      	ldr	r3, [pc, #120]	; (8006ac4 <xPortStartScheduler+0x134>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	021b      	lsls	r3, r3, #8
 8006a4e:	4a1d      	ldr	r2, [pc, #116]	; (8006ac4 <xPortStartScheduler+0x134>)
 8006a50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006a52:	4b1c      	ldr	r3, [pc, #112]	; (8006ac4 <xPortStartScheduler+0x134>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a5a:	4a1a      	ldr	r2, [pc, #104]	; (8006ac4 <xPortStartScheduler+0x134>)
 8006a5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	b2da      	uxtb	r2, r3
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006a66:	4b18      	ldr	r3, [pc, #96]	; (8006ac8 <xPortStartScheduler+0x138>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a17      	ldr	r2, [pc, #92]	; (8006ac8 <xPortStartScheduler+0x138>)
 8006a6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006a72:	4b15      	ldr	r3, [pc, #84]	; (8006ac8 <xPortStartScheduler+0x138>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a14      	ldr	r2, [pc, #80]	; (8006ac8 <xPortStartScheduler+0x138>)
 8006a78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006a7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006a7e:	f000 f8dd 	bl	8006c3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006a82:	4b12      	ldr	r3, [pc, #72]	; (8006acc <xPortStartScheduler+0x13c>)
 8006a84:	2200      	movs	r2, #0
 8006a86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006a88:	f000 f8fc 	bl	8006c84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006a8c:	4b10      	ldr	r3, [pc, #64]	; (8006ad0 <xPortStartScheduler+0x140>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a0f      	ldr	r2, [pc, #60]	; (8006ad0 <xPortStartScheduler+0x140>)
 8006a92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006a96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006a98:	f7ff ff66 	bl	8006968 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006a9c:	f7ff fa82 	bl	8005fa4 <vTaskSwitchContext>
	prvTaskExitError();
 8006aa0:	f7ff ff1c 	bl	80068dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3718      	adds	r7, #24
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	e000ed00 	.word	0xe000ed00
 8006ab4:	410fc271 	.word	0x410fc271
 8006ab8:	410fc270 	.word	0x410fc270
 8006abc:	e000e400 	.word	0xe000e400
 8006ac0:	2000048c 	.word	0x2000048c
 8006ac4:	20000490 	.word	0x20000490
 8006ac8:	e000ed20 	.word	0xe000ed20
 8006acc:	2000000c 	.word	0x2000000c
 8006ad0:	e000ef34 	.word	0xe000ef34

08006ad4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
	__asm volatile
 8006ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ade:	f383 8811 	msr	BASEPRI, r3
 8006ae2:	f3bf 8f6f 	isb	sy
 8006ae6:	f3bf 8f4f 	dsb	sy
 8006aea:	607b      	str	r3, [r7, #4]
}
 8006aec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006aee:	4b0f      	ldr	r3, [pc, #60]	; (8006b2c <vPortEnterCritical+0x58>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	3301      	adds	r3, #1
 8006af4:	4a0d      	ldr	r2, [pc, #52]	; (8006b2c <vPortEnterCritical+0x58>)
 8006af6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006af8:	4b0c      	ldr	r3, [pc, #48]	; (8006b2c <vPortEnterCritical+0x58>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d10f      	bne.n	8006b20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006b00:	4b0b      	ldr	r3, [pc, #44]	; (8006b30 <vPortEnterCritical+0x5c>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00a      	beq.n	8006b20 <vPortEnterCritical+0x4c>
	__asm volatile
 8006b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b0e:	f383 8811 	msr	BASEPRI, r3
 8006b12:	f3bf 8f6f 	isb	sy
 8006b16:	f3bf 8f4f 	dsb	sy
 8006b1a:	603b      	str	r3, [r7, #0]
}
 8006b1c:	bf00      	nop
 8006b1e:	e7fe      	b.n	8006b1e <vPortEnterCritical+0x4a>
	}
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr
 8006b2c:	2000000c 	.word	0x2000000c
 8006b30:	e000ed04 	.word	0xe000ed04

08006b34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006b3a:	4b12      	ldr	r3, [pc, #72]	; (8006b84 <vPortExitCritical+0x50>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d10a      	bne.n	8006b58 <vPortExitCritical+0x24>
	__asm volatile
 8006b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b46:	f383 8811 	msr	BASEPRI, r3
 8006b4a:	f3bf 8f6f 	isb	sy
 8006b4e:	f3bf 8f4f 	dsb	sy
 8006b52:	607b      	str	r3, [r7, #4]
}
 8006b54:	bf00      	nop
 8006b56:	e7fe      	b.n	8006b56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006b58:	4b0a      	ldr	r3, [pc, #40]	; (8006b84 <vPortExitCritical+0x50>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	4a09      	ldr	r2, [pc, #36]	; (8006b84 <vPortExitCritical+0x50>)
 8006b60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006b62:	4b08      	ldr	r3, [pc, #32]	; (8006b84 <vPortExitCritical+0x50>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d105      	bne.n	8006b76 <vPortExitCritical+0x42>
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	f383 8811 	msr	BASEPRI, r3
}
 8006b74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006b76:	bf00      	nop
 8006b78:	370c      	adds	r7, #12
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	2000000c 	.word	0x2000000c
	...

08006b90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006b90:	f3ef 8009 	mrs	r0, PSP
 8006b94:	f3bf 8f6f 	isb	sy
 8006b98:	4b15      	ldr	r3, [pc, #84]	; (8006bf0 <pxCurrentTCBConst>)
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	f01e 0f10 	tst.w	lr, #16
 8006ba0:	bf08      	it	eq
 8006ba2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006ba6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006baa:	6010      	str	r0, [r2, #0]
 8006bac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006bb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006bb4:	f380 8811 	msr	BASEPRI, r0
 8006bb8:	f3bf 8f4f 	dsb	sy
 8006bbc:	f3bf 8f6f 	isb	sy
 8006bc0:	f7ff f9f0 	bl	8005fa4 <vTaskSwitchContext>
 8006bc4:	f04f 0000 	mov.w	r0, #0
 8006bc8:	f380 8811 	msr	BASEPRI, r0
 8006bcc:	bc09      	pop	{r0, r3}
 8006bce:	6819      	ldr	r1, [r3, #0]
 8006bd0:	6808      	ldr	r0, [r1, #0]
 8006bd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bd6:	f01e 0f10 	tst.w	lr, #16
 8006bda:	bf08      	it	eq
 8006bdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006be0:	f380 8809 	msr	PSP, r0
 8006be4:	f3bf 8f6f 	isb	sy
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	f3af 8000 	nop.w

08006bf0 <pxCurrentTCBConst>:
 8006bf0:	20000360 	.word	0x20000360
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006bf4:	bf00      	nop
 8006bf6:	bf00      	nop

08006bf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
	__asm volatile
 8006bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c02:	f383 8811 	msr	BASEPRI, r3
 8006c06:	f3bf 8f6f 	isb	sy
 8006c0a:	f3bf 8f4f 	dsb	sy
 8006c0e:	607b      	str	r3, [r7, #4]
}
 8006c10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006c12:	f7ff f90f 	bl	8005e34 <xTaskIncrementTick>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d003      	beq.n	8006c24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006c1c:	4b06      	ldr	r3, [pc, #24]	; (8006c38 <SysTick_Handler+0x40>)
 8006c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c22:	601a      	str	r2, [r3, #0]
 8006c24:	2300      	movs	r3, #0
 8006c26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	f383 8811 	msr	BASEPRI, r3
}
 8006c2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006c30:	bf00      	nop
 8006c32:	3708      	adds	r7, #8
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	e000ed04 	.word	0xe000ed04

08006c3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006c40:	4b0b      	ldr	r3, [pc, #44]	; (8006c70 <vPortSetupTimerInterrupt+0x34>)
 8006c42:	2200      	movs	r2, #0
 8006c44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006c46:	4b0b      	ldr	r3, [pc, #44]	; (8006c74 <vPortSetupTimerInterrupt+0x38>)
 8006c48:	2200      	movs	r2, #0
 8006c4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006c4c:	4b0a      	ldr	r3, [pc, #40]	; (8006c78 <vPortSetupTimerInterrupt+0x3c>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a0a      	ldr	r2, [pc, #40]	; (8006c7c <vPortSetupTimerInterrupt+0x40>)
 8006c52:	fba2 2303 	umull	r2, r3, r2, r3
 8006c56:	099b      	lsrs	r3, r3, #6
 8006c58:	4a09      	ldr	r2, [pc, #36]	; (8006c80 <vPortSetupTimerInterrupt+0x44>)
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006c5e:	4b04      	ldr	r3, [pc, #16]	; (8006c70 <vPortSetupTimerInterrupt+0x34>)
 8006c60:	2207      	movs	r2, #7
 8006c62:	601a      	str	r2, [r3, #0]
}
 8006c64:	bf00      	nop
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	e000e010 	.word	0xe000e010
 8006c74:	e000e018 	.word	0xe000e018
 8006c78:	20000000 	.word	0x20000000
 8006c7c:	10624dd3 	.word	0x10624dd3
 8006c80:	e000e014 	.word	0xe000e014

08006c84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006c84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006c94 <vPortEnableVFP+0x10>
 8006c88:	6801      	ldr	r1, [r0, #0]
 8006c8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006c8e:	6001      	str	r1, [r0, #0]
 8006c90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006c92:	bf00      	nop
 8006c94:	e000ed88 	.word	0xe000ed88

08006c98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006c9e:	f3ef 8305 	mrs	r3, IPSR
 8006ca2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2b0f      	cmp	r3, #15
 8006ca8:	d914      	bls.n	8006cd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006caa:	4a17      	ldr	r2, [pc, #92]	; (8006d08 <vPortValidateInterruptPriority+0x70>)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	4413      	add	r3, r2
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006cb4:	4b15      	ldr	r3, [pc, #84]	; (8006d0c <vPortValidateInterruptPriority+0x74>)
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	7afa      	ldrb	r2, [r7, #11]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d20a      	bcs.n	8006cd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc2:	f383 8811 	msr	BASEPRI, r3
 8006cc6:	f3bf 8f6f 	isb	sy
 8006cca:	f3bf 8f4f 	dsb	sy
 8006cce:	607b      	str	r3, [r7, #4]
}
 8006cd0:	bf00      	nop
 8006cd2:	e7fe      	b.n	8006cd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006cd4:	4b0e      	ldr	r3, [pc, #56]	; (8006d10 <vPortValidateInterruptPriority+0x78>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006cdc:	4b0d      	ldr	r3, [pc, #52]	; (8006d14 <vPortValidateInterruptPriority+0x7c>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d90a      	bls.n	8006cfa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce8:	f383 8811 	msr	BASEPRI, r3
 8006cec:	f3bf 8f6f 	isb	sy
 8006cf0:	f3bf 8f4f 	dsb	sy
 8006cf4:	603b      	str	r3, [r7, #0]
}
 8006cf6:	bf00      	nop
 8006cf8:	e7fe      	b.n	8006cf8 <vPortValidateInterruptPriority+0x60>
	}
 8006cfa:	bf00      	nop
 8006cfc:	3714      	adds	r7, #20
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	e000e3f0 	.word	0xe000e3f0
 8006d0c:	2000048c 	.word	0x2000048c
 8006d10:	e000ed0c 	.word	0xe000ed0c
 8006d14:	20000490 	.word	0x20000490

08006d18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b08a      	sub	sp, #40	; 0x28
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006d20:	2300      	movs	r3, #0
 8006d22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006d24:	f7fe ffba 	bl	8005c9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006d28:	4b5b      	ldr	r3, [pc, #364]	; (8006e98 <pvPortMalloc+0x180>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d101      	bne.n	8006d34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006d30:	f000 f920 	bl	8006f74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006d34:	4b59      	ldr	r3, [pc, #356]	; (8006e9c <pvPortMalloc+0x184>)
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	f040 8093 	bne.w	8006e68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d01d      	beq.n	8006d84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006d48:	2208      	movs	r2, #8
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f003 0307 	and.w	r3, r3, #7
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d014      	beq.n	8006d84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f023 0307 	bic.w	r3, r3, #7
 8006d60:	3308      	adds	r3, #8
 8006d62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f003 0307 	and.w	r3, r3, #7
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00a      	beq.n	8006d84 <pvPortMalloc+0x6c>
	__asm volatile
 8006d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d72:	f383 8811 	msr	BASEPRI, r3
 8006d76:	f3bf 8f6f 	isb	sy
 8006d7a:	f3bf 8f4f 	dsb	sy
 8006d7e:	617b      	str	r3, [r7, #20]
}
 8006d80:	bf00      	nop
 8006d82:	e7fe      	b.n	8006d82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d06e      	beq.n	8006e68 <pvPortMalloc+0x150>
 8006d8a:	4b45      	ldr	r3, [pc, #276]	; (8006ea0 <pvPortMalloc+0x188>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d869      	bhi.n	8006e68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006d94:	4b43      	ldr	r3, [pc, #268]	; (8006ea4 <pvPortMalloc+0x18c>)
 8006d96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006d98:	4b42      	ldr	r3, [pc, #264]	; (8006ea4 <pvPortMalloc+0x18c>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d9e:	e004      	b.n	8006daa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d903      	bls.n	8006dbc <pvPortMalloc+0xa4>
 8006db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d1f1      	bne.n	8006da0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006dbc:	4b36      	ldr	r3, [pc, #216]	; (8006e98 <pvPortMalloc+0x180>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d050      	beq.n	8006e68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006dc6:	6a3b      	ldr	r3, [r7, #32]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2208      	movs	r2, #8
 8006dcc:	4413      	add	r3, r2
 8006dce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	6a3b      	ldr	r3, [r7, #32]
 8006dd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dda:	685a      	ldr	r2, [r3, #4]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	1ad2      	subs	r2, r2, r3
 8006de0:	2308      	movs	r3, #8
 8006de2:	005b      	lsls	r3, r3, #1
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d91f      	bls.n	8006e28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4413      	add	r3, r2
 8006dee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006df0:	69bb      	ldr	r3, [r7, #24]
 8006df2:	f003 0307 	and.w	r3, r3, #7
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00a      	beq.n	8006e10 <pvPortMalloc+0xf8>
	__asm volatile
 8006dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfe:	f383 8811 	msr	BASEPRI, r3
 8006e02:	f3bf 8f6f 	isb	sy
 8006e06:	f3bf 8f4f 	dsb	sy
 8006e0a:	613b      	str	r3, [r7, #16]
}
 8006e0c:	bf00      	nop
 8006e0e:	e7fe      	b.n	8006e0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e12:	685a      	ldr	r2, [r3, #4]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	1ad2      	subs	r2, r2, r3
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006e22:	69b8      	ldr	r0, [r7, #24]
 8006e24:	f000 f908 	bl	8007038 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006e28:	4b1d      	ldr	r3, [pc, #116]	; (8006ea0 <pvPortMalloc+0x188>)
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	4a1b      	ldr	r2, [pc, #108]	; (8006ea0 <pvPortMalloc+0x188>)
 8006e34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006e36:	4b1a      	ldr	r3, [pc, #104]	; (8006ea0 <pvPortMalloc+0x188>)
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	4b1b      	ldr	r3, [pc, #108]	; (8006ea8 <pvPortMalloc+0x190>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d203      	bcs.n	8006e4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006e42:	4b17      	ldr	r3, [pc, #92]	; (8006ea0 <pvPortMalloc+0x188>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a18      	ldr	r2, [pc, #96]	; (8006ea8 <pvPortMalloc+0x190>)
 8006e48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4c:	685a      	ldr	r2, [r3, #4]
 8006e4e:	4b13      	ldr	r3, [pc, #76]	; (8006e9c <pvPortMalloc+0x184>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	431a      	orrs	r2, r3
 8006e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006e5e:	4b13      	ldr	r3, [pc, #76]	; (8006eac <pvPortMalloc+0x194>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	3301      	adds	r3, #1
 8006e64:	4a11      	ldr	r2, [pc, #68]	; (8006eac <pvPortMalloc+0x194>)
 8006e66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006e68:	f7fe ff26 	bl	8005cb8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	f003 0307 	and.w	r3, r3, #7
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00a      	beq.n	8006e8c <pvPortMalloc+0x174>
	__asm volatile
 8006e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e7a:	f383 8811 	msr	BASEPRI, r3
 8006e7e:	f3bf 8f6f 	isb	sy
 8006e82:	f3bf 8f4f 	dsb	sy
 8006e86:	60fb      	str	r3, [r7, #12]
}
 8006e88:	bf00      	nop
 8006e8a:	e7fe      	b.n	8006e8a <pvPortMalloc+0x172>
	return pvReturn;
 8006e8c:	69fb      	ldr	r3, [r7, #28]
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3728      	adds	r7, #40	; 0x28
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	2000849c 	.word	0x2000849c
 8006e9c:	200084b0 	.word	0x200084b0
 8006ea0:	200084a0 	.word	0x200084a0
 8006ea4:	20008494 	.word	0x20008494
 8006ea8:	200084a4 	.word	0x200084a4
 8006eac:	200084a8 	.word	0x200084a8

08006eb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b086      	sub	sp, #24
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d04d      	beq.n	8006f5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006ec2:	2308      	movs	r3, #8
 8006ec4:	425b      	negs	r3, r3
 8006ec6:	697a      	ldr	r2, [r7, #20]
 8006ec8:	4413      	add	r3, r2
 8006eca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	685a      	ldr	r2, [r3, #4]
 8006ed4:	4b24      	ldr	r3, [pc, #144]	; (8006f68 <vPortFree+0xb8>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4013      	ands	r3, r2
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d10a      	bne.n	8006ef4 <vPortFree+0x44>
	__asm volatile
 8006ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee2:	f383 8811 	msr	BASEPRI, r3
 8006ee6:	f3bf 8f6f 	isb	sy
 8006eea:	f3bf 8f4f 	dsb	sy
 8006eee:	60fb      	str	r3, [r7, #12]
}
 8006ef0:	bf00      	nop
 8006ef2:	e7fe      	b.n	8006ef2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00a      	beq.n	8006f12 <vPortFree+0x62>
	__asm volatile
 8006efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f00:	f383 8811 	msr	BASEPRI, r3
 8006f04:	f3bf 8f6f 	isb	sy
 8006f08:	f3bf 8f4f 	dsb	sy
 8006f0c:	60bb      	str	r3, [r7, #8]
}
 8006f0e:	bf00      	nop
 8006f10:	e7fe      	b.n	8006f10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	685a      	ldr	r2, [r3, #4]
 8006f16:	4b14      	ldr	r3, [pc, #80]	; (8006f68 <vPortFree+0xb8>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d01e      	beq.n	8006f5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d11a      	bne.n	8006f5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	685a      	ldr	r2, [r3, #4]
 8006f2c:	4b0e      	ldr	r3, [pc, #56]	; (8006f68 <vPortFree+0xb8>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	43db      	mvns	r3, r3
 8006f32:	401a      	ands	r2, r3
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006f38:	f7fe feb0 	bl	8005c9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	685a      	ldr	r2, [r3, #4]
 8006f40:	4b0a      	ldr	r3, [pc, #40]	; (8006f6c <vPortFree+0xbc>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4413      	add	r3, r2
 8006f46:	4a09      	ldr	r2, [pc, #36]	; (8006f6c <vPortFree+0xbc>)
 8006f48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006f4a:	6938      	ldr	r0, [r7, #16]
 8006f4c:	f000 f874 	bl	8007038 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006f50:	4b07      	ldr	r3, [pc, #28]	; (8006f70 <vPortFree+0xc0>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	3301      	adds	r3, #1
 8006f56:	4a06      	ldr	r2, [pc, #24]	; (8006f70 <vPortFree+0xc0>)
 8006f58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006f5a:	f7fe fead 	bl	8005cb8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006f5e:	bf00      	nop
 8006f60:	3718      	adds	r7, #24
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	200084b0 	.word	0x200084b0
 8006f6c:	200084a0 	.word	0x200084a0
 8006f70:	200084ac 	.word	0x200084ac

08006f74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006f74:	b480      	push	{r7}
 8006f76:	b085      	sub	sp, #20
 8006f78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006f7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006f80:	4b27      	ldr	r3, [pc, #156]	; (8007020 <prvHeapInit+0xac>)
 8006f82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f003 0307 	and.w	r3, r3, #7
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00c      	beq.n	8006fa8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	3307      	adds	r3, #7
 8006f92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f023 0307 	bic.w	r3, r3, #7
 8006f9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006f9c:	68ba      	ldr	r2, [r7, #8]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	4a1f      	ldr	r2, [pc, #124]	; (8007020 <prvHeapInit+0xac>)
 8006fa4:	4413      	add	r3, r2
 8006fa6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006fac:	4a1d      	ldr	r2, [pc, #116]	; (8007024 <prvHeapInit+0xb0>)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006fb2:	4b1c      	ldr	r3, [pc, #112]	; (8007024 <prvHeapInit+0xb0>)
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	68ba      	ldr	r2, [r7, #8]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006fc0:	2208      	movs	r2, #8
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	1a9b      	subs	r3, r3, r2
 8006fc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f023 0307 	bic.w	r3, r3, #7
 8006fce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	4a15      	ldr	r2, [pc, #84]	; (8007028 <prvHeapInit+0xb4>)
 8006fd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006fd6:	4b14      	ldr	r3, [pc, #80]	; (8007028 <prvHeapInit+0xb4>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006fde:	4b12      	ldr	r3, [pc, #72]	; (8007028 <prvHeapInit+0xb4>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	1ad2      	subs	r2, r2, r3
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ff4:	4b0c      	ldr	r3, [pc, #48]	; (8007028 <prvHeapInit+0xb4>)
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	4a0a      	ldr	r2, [pc, #40]	; (800702c <prvHeapInit+0xb8>)
 8007002:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	4a09      	ldr	r2, [pc, #36]	; (8007030 <prvHeapInit+0xbc>)
 800700a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800700c:	4b09      	ldr	r3, [pc, #36]	; (8007034 <prvHeapInit+0xc0>)
 800700e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007012:	601a      	str	r2, [r3, #0]
}
 8007014:	bf00      	nop
 8007016:	3714      	adds	r7, #20
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr
 8007020:	20000494 	.word	0x20000494
 8007024:	20008494 	.word	0x20008494
 8007028:	2000849c 	.word	0x2000849c
 800702c:	200084a4 	.word	0x200084a4
 8007030:	200084a0 	.word	0x200084a0
 8007034:	200084b0 	.word	0x200084b0

08007038 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007040:	4b28      	ldr	r3, [pc, #160]	; (80070e4 <prvInsertBlockIntoFreeList+0xac>)
 8007042:	60fb      	str	r3, [r7, #12]
 8007044:	e002      	b.n	800704c <prvInsertBlockIntoFreeList+0x14>
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	60fb      	str	r3, [r7, #12]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	429a      	cmp	r2, r3
 8007054:	d8f7      	bhi.n	8007046 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	68ba      	ldr	r2, [r7, #8]
 8007060:	4413      	add	r3, r2
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	429a      	cmp	r2, r3
 8007066:	d108      	bne.n	800707a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	685a      	ldr	r2, [r3, #4]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	441a      	add	r2, r3
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	68ba      	ldr	r2, [r7, #8]
 8007084:	441a      	add	r2, r3
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	429a      	cmp	r2, r3
 800708c:	d118      	bne.n	80070c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	4b15      	ldr	r3, [pc, #84]	; (80070e8 <prvInsertBlockIntoFreeList+0xb0>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	429a      	cmp	r2, r3
 8007098:	d00d      	beq.n	80070b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	685a      	ldr	r2, [r3, #4]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	441a      	add	r2, r3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	601a      	str	r2, [r3, #0]
 80070b4:	e008      	b.n	80070c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80070b6:	4b0c      	ldr	r3, [pc, #48]	; (80070e8 <prvInsertBlockIntoFreeList+0xb0>)
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	601a      	str	r2, [r3, #0]
 80070be:	e003      	b.n	80070c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d002      	beq.n	80070d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070d6:	bf00      	nop
 80070d8:	3714      	adds	r7, #20
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr
 80070e2:	bf00      	nop
 80070e4:	20008494 	.word	0x20008494
 80070e8:	2000849c 	.word	0x2000849c

080070ec <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80070f6:	f007 fa97 	bl	800e628 <sys_timeouts_sleeptime>
 80070fa:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007102:	d10b      	bne.n	800711c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8007104:	4813      	ldr	r0, [pc, #76]	; (8007154 <tcpip_timeouts_mbox_fetch+0x68>)
 8007106:	f00c f9bc 	bl	8013482 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800710a:	2200      	movs	r2, #0
 800710c:	6839      	ldr	r1, [r7, #0]
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f00c f92e 	bl	8013370 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8007114:	480f      	ldr	r0, [pc, #60]	; (8007154 <tcpip_timeouts_mbox_fetch+0x68>)
 8007116:	f00c f9a5 	bl	8013464 <sys_mutex_lock>
    return;
 800711a:	e018      	b.n	800714e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d102      	bne.n	8007128 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8007122:	f007 fa47 	bl	800e5b4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8007126:	e7e6      	b.n	80070f6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8007128:	480a      	ldr	r0, [pc, #40]	; (8007154 <tcpip_timeouts_mbox_fetch+0x68>)
 800712a:	f00c f9aa 	bl	8013482 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800712e:	68fa      	ldr	r2, [r7, #12]
 8007130:	6839      	ldr	r1, [r7, #0]
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f00c f91c 	bl	8013370 <sys_arch_mbox_fetch>
 8007138:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800713a:	4806      	ldr	r0, [pc, #24]	; (8007154 <tcpip_timeouts_mbox_fetch+0x68>)
 800713c:	f00c f992 	bl	8013464 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007146:	d102      	bne.n	800714e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8007148:	f007 fa34 	bl	800e5b4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800714c:	e7d3      	b.n	80070f6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800714e:	3710      	adds	r7, #16
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}
 8007154:	2000b820 	.word	0x2000b820

08007158 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8007160:	4810      	ldr	r0, [pc, #64]	; (80071a4 <tcpip_thread+0x4c>)
 8007162:	f00c f97f 	bl	8013464 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8007166:	4b10      	ldr	r3, [pc, #64]	; (80071a8 <tcpip_thread+0x50>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d005      	beq.n	800717a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800716e:	4b0e      	ldr	r3, [pc, #56]	; (80071a8 <tcpip_thread+0x50>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a0e      	ldr	r2, [pc, #56]	; (80071ac <tcpip_thread+0x54>)
 8007174:	6812      	ldr	r2, [r2, #0]
 8007176:	4610      	mov	r0, r2
 8007178:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800717a:	f107 030c 	add.w	r3, r7, #12
 800717e:	4619      	mov	r1, r3
 8007180:	480b      	ldr	r0, [pc, #44]	; (80071b0 <tcpip_thread+0x58>)
 8007182:	f7ff ffb3 	bl	80070ec <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d106      	bne.n	800719a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800718c:	4b09      	ldr	r3, [pc, #36]	; (80071b4 <tcpip_thread+0x5c>)
 800718e:	2291      	movs	r2, #145	; 0x91
 8007190:	4909      	ldr	r1, [pc, #36]	; (80071b8 <tcpip_thread+0x60>)
 8007192:	480a      	ldr	r0, [pc, #40]	; (80071bc <tcpip_thread+0x64>)
 8007194:	f00c fb62 	bl	801385c <iprintf>
      continue;
 8007198:	e003      	b.n	80071a2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	4618      	mov	r0, r3
 800719e:	f000 f80f 	bl	80071c0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80071a2:	e7ea      	b.n	800717a <tcpip_thread+0x22>
 80071a4:	2000b820 	.word	0x2000b820
 80071a8:	200084b4 	.word	0x200084b4
 80071ac:	200084b8 	.word	0x200084b8
 80071b0:	200084bc 	.word	0x200084bc
 80071b4:	080147a4 	.word	0x080147a4
 80071b8:	080147d4 	.word	0x080147d4
 80071bc:	080147f4 	.word	0x080147f4

080071c0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	2b02      	cmp	r3, #2
 80071ce:	d026      	beq.n	800721e <tcpip_thread_handle_msg+0x5e>
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	dc2b      	bgt.n	800722c <tcpip_thread_handle_msg+0x6c>
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d002      	beq.n	80071de <tcpip_thread_handle_msg+0x1e>
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d015      	beq.n	8007208 <tcpip_thread_handle_msg+0x48>
 80071dc:	e026      	b.n	800722c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	6850      	ldr	r0, [r2, #4]
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	6892      	ldr	r2, [r2, #8]
 80071ea:	4611      	mov	r1, r2
 80071ec:	4798      	blx	r3
 80071ee:	4603      	mov	r3, r0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d004      	beq.n	80071fe <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	4618      	mov	r0, r3
 80071fa:	f001 fcd1 	bl	8008ba0 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80071fe:	6879      	ldr	r1, [r7, #4]
 8007200:	2009      	movs	r0, #9
 8007202:	f000 fe1d 	bl	8007e40 <memp_free>
      break;
 8007206:	e018      	b.n	800723a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	6892      	ldr	r2, [r2, #8]
 8007210:	4610      	mov	r0, r2
 8007212:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8007214:	6879      	ldr	r1, [r7, #4]
 8007216:	2008      	movs	r0, #8
 8007218:	f000 fe12 	bl	8007e40 <memp_free>
      break;
 800721c:	e00d      	b.n	800723a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	6892      	ldr	r2, [r2, #8]
 8007226:	4610      	mov	r0, r2
 8007228:	4798      	blx	r3
      break;
 800722a:	e006      	b.n	800723a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800722c:	4b05      	ldr	r3, [pc, #20]	; (8007244 <tcpip_thread_handle_msg+0x84>)
 800722e:	22cf      	movs	r2, #207	; 0xcf
 8007230:	4905      	ldr	r1, [pc, #20]	; (8007248 <tcpip_thread_handle_msg+0x88>)
 8007232:	4806      	ldr	r0, [pc, #24]	; (800724c <tcpip_thread_handle_msg+0x8c>)
 8007234:	f00c fb12 	bl	801385c <iprintf>
      break;
 8007238:	bf00      	nop
  }
}
 800723a:	bf00      	nop
 800723c:	3708      	adds	r7, #8
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop
 8007244:	080147a4 	.word	0x080147a4
 8007248:	080147d4 	.word	0x080147d4
 800724c:	080147f4 	.word	0x080147f4

08007250 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b086      	sub	sp, #24
 8007254:	af00      	add	r7, sp, #0
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800725c:	481a      	ldr	r0, [pc, #104]	; (80072c8 <tcpip_inpkt+0x78>)
 800725e:	f00c f8c6 	bl	80133ee <sys_mbox_valid>
 8007262:	4603      	mov	r3, r0
 8007264:	2b00      	cmp	r3, #0
 8007266:	d105      	bne.n	8007274 <tcpip_inpkt+0x24>
 8007268:	4b18      	ldr	r3, [pc, #96]	; (80072cc <tcpip_inpkt+0x7c>)
 800726a:	22fc      	movs	r2, #252	; 0xfc
 800726c:	4918      	ldr	r1, [pc, #96]	; (80072d0 <tcpip_inpkt+0x80>)
 800726e:	4819      	ldr	r0, [pc, #100]	; (80072d4 <tcpip_inpkt+0x84>)
 8007270:	f00c faf4 	bl	801385c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8007274:	2009      	movs	r0, #9
 8007276:	f000 fd91 	bl	8007d9c <memp_malloc>
 800727a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d102      	bne.n	8007288 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8007282:	f04f 33ff 	mov.w	r3, #4294967295
 8007286:	e01a      	b.n	80072be <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	2200      	movs	r2, #0
 800728c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	68fa      	ldr	r2, [r7, #12]
 8007292:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	68ba      	ldr	r2, [r7, #8]
 8007298:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80072a0:	6979      	ldr	r1, [r7, #20]
 80072a2:	4809      	ldr	r0, [pc, #36]	; (80072c8 <tcpip_inpkt+0x78>)
 80072a4:	f00c f84a 	bl	801333c <sys_mbox_trypost>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d006      	beq.n	80072bc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80072ae:	6979      	ldr	r1, [r7, #20]
 80072b0:	2009      	movs	r0, #9
 80072b2:	f000 fdc5 	bl	8007e40 <memp_free>
    return ERR_MEM;
 80072b6:	f04f 33ff 	mov.w	r3, #4294967295
 80072ba:	e000      	b.n	80072be <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80072bc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3718      	adds	r7, #24
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	200084bc 	.word	0x200084bc
 80072cc:	080147a4 	.word	0x080147a4
 80072d0:	0801481c 	.word	0x0801481c
 80072d4:	080147f4 	.word	0x080147f4

080072d8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80072e8:	f003 0318 	and.w	r3, r3, #24
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d006      	beq.n	80072fe <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80072f0:	4a08      	ldr	r2, [pc, #32]	; (8007314 <tcpip_input+0x3c>)
 80072f2:	6839      	ldr	r1, [r7, #0]
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f7ff ffab 	bl	8007250 <tcpip_inpkt>
 80072fa:	4603      	mov	r3, r0
 80072fc:	e005      	b.n	800730a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80072fe:	4a06      	ldr	r2, [pc, #24]	; (8007318 <tcpip_input+0x40>)
 8007300:	6839      	ldr	r1, [r7, #0]
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f7ff ffa4 	bl	8007250 <tcpip_inpkt>
 8007308:	4603      	mov	r3, r0
}
 800730a:	4618      	mov	r0, r3
 800730c:	3708      	adds	r7, #8
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	0801314d 	.word	0x0801314d
 8007318:	08012025 	.word	0x08012025

0800731c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8007326:	4819      	ldr	r0, [pc, #100]	; (800738c <tcpip_try_callback+0x70>)
 8007328:	f00c f861 	bl	80133ee <sys_mbox_valid>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d106      	bne.n	8007340 <tcpip_try_callback+0x24>
 8007332:	4b17      	ldr	r3, [pc, #92]	; (8007390 <tcpip_try_callback+0x74>)
 8007334:	f240 125d 	movw	r2, #349	; 0x15d
 8007338:	4916      	ldr	r1, [pc, #88]	; (8007394 <tcpip_try_callback+0x78>)
 800733a:	4817      	ldr	r0, [pc, #92]	; (8007398 <tcpip_try_callback+0x7c>)
 800733c:	f00c fa8e 	bl	801385c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8007340:	2008      	movs	r0, #8
 8007342:	f000 fd2b 	bl	8007d9c <memp_malloc>
 8007346:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d102      	bne.n	8007354 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800734e:	f04f 33ff 	mov.w	r3, #4294967295
 8007352:	e017      	b.n	8007384 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2201      	movs	r2, #1
 8007358:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	683a      	ldr	r2, [r7, #0]
 8007364:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8007366:	68f9      	ldr	r1, [r7, #12]
 8007368:	4808      	ldr	r0, [pc, #32]	; (800738c <tcpip_try_callback+0x70>)
 800736a:	f00b ffe7 	bl	801333c <sys_mbox_trypost>
 800736e:	4603      	mov	r3, r0
 8007370:	2b00      	cmp	r3, #0
 8007372:	d006      	beq.n	8007382 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8007374:	68f9      	ldr	r1, [r7, #12]
 8007376:	2008      	movs	r0, #8
 8007378:	f000 fd62 	bl	8007e40 <memp_free>
    return ERR_MEM;
 800737c:	f04f 33ff 	mov.w	r3, #4294967295
 8007380:	e000      	b.n	8007384 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8007382:	2300      	movs	r3, #0
}
 8007384:	4618      	mov	r0, r3
 8007386:	3710      	adds	r7, #16
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}
 800738c:	200084bc 	.word	0x200084bc
 8007390:	080147a4 	.word	0x080147a4
 8007394:	0801481c 	.word	0x0801481c
 8007398:	080147f4 	.word	0x080147f4

0800739c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af02      	add	r7, sp, #8
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
  lwip_init();
 80073a6:	f000 f871 	bl	800748c <lwip_init>

  tcpip_init_done = initfunc;
 80073aa:	4a17      	ldr	r2, [pc, #92]	; (8007408 <tcpip_init+0x6c>)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80073b0:	4a16      	ldr	r2, [pc, #88]	; (800740c <tcpip_init+0x70>)
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80073b6:	2106      	movs	r1, #6
 80073b8:	4815      	ldr	r0, [pc, #84]	; (8007410 <tcpip_init+0x74>)
 80073ba:	f00b ff9d 	bl	80132f8 <sys_mbox_new>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d006      	beq.n	80073d2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80073c4:	4b13      	ldr	r3, [pc, #76]	; (8007414 <tcpip_init+0x78>)
 80073c6:	f240 2261 	movw	r2, #609	; 0x261
 80073ca:	4913      	ldr	r1, [pc, #76]	; (8007418 <tcpip_init+0x7c>)
 80073cc:	4813      	ldr	r0, [pc, #76]	; (800741c <tcpip_init+0x80>)
 80073ce:	f00c fa45 	bl	801385c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80073d2:	4813      	ldr	r0, [pc, #76]	; (8007420 <tcpip_init+0x84>)
 80073d4:	f00c f82a 	bl	801342c <sys_mutex_new>
 80073d8:	4603      	mov	r3, r0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d006      	beq.n	80073ec <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80073de:	4b0d      	ldr	r3, [pc, #52]	; (8007414 <tcpip_init+0x78>)
 80073e0:	f240 2265 	movw	r2, #613	; 0x265
 80073e4:	490f      	ldr	r1, [pc, #60]	; (8007424 <tcpip_init+0x88>)
 80073e6:	480d      	ldr	r0, [pc, #52]	; (800741c <tcpip_init+0x80>)
 80073e8:	f00c fa38 	bl	801385c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80073ec:	2300      	movs	r3, #0
 80073ee:	9300      	str	r3, [sp, #0]
 80073f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073f4:	2200      	movs	r2, #0
 80073f6:	490c      	ldr	r1, [pc, #48]	; (8007428 <tcpip_init+0x8c>)
 80073f8:	480c      	ldr	r0, [pc, #48]	; (800742c <tcpip_init+0x90>)
 80073fa:	f00c f84f 	bl	801349c <sys_thread_new>
}
 80073fe:	bf00      	nop
 8007400:	3708      	adds	r7, #8
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	200084b4 	.word	0x200084b4
 800740c:	200084b8 	.word	0x200084b8
 8007410:	200084bc 	.word	0x200084bc
 8007414:	080147a4 	.word	0x080147a4
 8007418:	0801482c 	.word	0x0801482c
 800741c:	080147f4 	.word	0x080147f4
 8007420:	2000b820 	.word	0x2000b820
 8007424:	08014850 	.word	0x08014850
 8007428:	08007159 	.word	0x08007159
 800742c:	08014874 	.word	0x08014874

08007430 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	4603      	mov	r3, r0
 8007438:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800743a:	88fb      	ldrh	r3, [r7, #6]
 800743c:	021b      	lsls	r3, r3, #8
 800743e:	b21a      	sxth	r2, r3
 8007440:	88fb      	ldrh	r3, [r7, #6]
 8007442:	0a1b      	lsrs	r3, r3, #8
 8007444:	b29b      	uxth	r3, r3
 8007446:	b21b      	sxth	r3, r3
 8007448:	4313      	orrs	r3, r2
 800744a:	b21b      	sxth	r3, r3
 800744c:	b29b      	uxth	r3, r3
}
 800744e:	4618      	mov	r0, r3
 8007450:	370c      	adds	r7, #12
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr

0800745a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800745a:	b480      	push	{r7}
 800745c:	b083      	sub	sp, #12
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	061a      	lsls	r2, r3, #24
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	021b      	lsls	r3, r3, #8
 800746a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800746e:	431a      	orrs	r2, r3
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	0a1b      	lsrs	r3, r3, #8
 8007474:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007478:	431a      	orrs	r2, r3
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	0e1b      	lsrs	r3, r3, #24
 800747e:	4313      	orrs	r3, r2
}
 8007480:	4618      	mov	r0, r3
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8007492:	2300      	movs	r3, #0
 8007494:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8007496:	f00b ffbb 	bl	8013410 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800749a:	f000 f8d5 	bl	8007648 <mem_init>
  memp_init();
 800749e:	f000 fc31 	bl	8007d04 <memp_init>
  pbuf_init();
  netif_init();
 80074a2:	f000 fcf7 	bl	8007e94 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80074a6:	f007 f8f7 	bl	800e698 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80074aa:	f001 fe23 	bl	80090f4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80074ae:	f007 f839 	bl	800e524 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80074b2:	bf00      	nop
 80074b4:	3708      	adds	r7, #8
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
	...

080074bc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	4603      	mov	r3, r0
 80074c4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80074c6:	4b05      	ldr	r3, [pc, #20]	; (80074dc <ptr_to_mem+0x20>)
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	88fb      	ldrh	r3, [r7, #6]
 80074cc:	4413      	add	r3, r2
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	370c      	adds	r7, #12
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	200084c0 	.word	0x200084c0

080074e0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80074e8:	4b05      	ldr	r3, [pc, #20]	; (8007500 <mem_to_ptr+0x20>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	1ad3      	subs	r3, r2, r3
 80074f0:	b29b      	uxth	r3, r3
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	370c      	adds	r7, #12
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr
 80074fe:	bf00      	nop
 8007500:	200084c0 	.word	0x200084c0

08007504 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8007504:	b590      	push	{r4, r7, lr}
 8007506:	b085      	sub	sp, #20
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800750c:	4b45      	ldr	r3, [pc, #276]	; (8007624 <plug_holes+0x120>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	429a      	cmp	r2, r3
 8007514:	d206      	bcs.n	8007524 <plug_holes+0x20>
 8007516:	4b44      	ldr	r3, [pc, #272]	; (8007628 <plug_holes+0x124>)
 8007518:	f240 12df 	movw	r2, #479	; 0x1df
 800751c:	4943      	ldr	r1, [pc, #268]	; (800762c <plug_holes+0x128>)
 800751e:	4844      	ldr	r0, [pc, #272]	; (8007630 <plug_holes+0x12c>)
 8007520:	f00c f99c 	bl	801385c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007524:	4b43      	ldr	r3, [pc, #268]	; (8007634 <plug_holes+0x130>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	429a      	cmp	r2, r3
 800752c:	d306      	bcc.n	800753c <plug_holes+0x38>
 800752e:	4b3e      	ldr	r3, [pc, #248]	; (8007628 <plug_holes+0x124>)
 8007530:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007534:	4940      	ldr	r1, [pc, #256]	; (8007638 <plug_holes+0x134>)
 8007536:	483e      	ldr	r0, [pc, #248]	; (8007630 <plug_holes+0x12c>)
 8007538:	f00c f990 	bl	801385c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	791b      	ldrb	r3, [r3, #4]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d006      	beq.n	8007552 <plug_holes+0x4e>
 8007544:	4b38      	ldr	r3, [pc, #224]	; (8007628 <plug_holes+0x124>)
 8007546:	f240 12e1 	movw	r2, #481	; 0x1e1
 800754a:	493c      	ldr	r1, [pc, #240]	; (800763c <plug_holes+0x138>)
 800754c:	4838      	ldr	r0, [pc, #224]	; (8007630 <plug_holes+0x12c>)
 800754e:	f00c f985 	bl	801385c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	881b      	ldrh	r3, [r3, #0]
 8007556:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800755a:	d906      	bls.n	800756a <plug_holes+0x66>
 800755c:	4b32      	ldr	r3, [pc, #200]	; (8007628 <plug_holes+0x124>)
 800755e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8007562:	4937      	ldr	r1, [pc, #220]	; (8007640 <plug_holes+0x13c>)
 8007564:	4832      	ldr	r0, [pc, #200]	; (8007630 <plug_holes+0x12c>)
 8007566:	f00c f979 	bl	801385c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	881b      	ldrh	r3, [r3, #0]
 800756e:	4618      	mov	r0, r3
 8007570:	f7ff ffa4 	bl	80074bc <ptr_to_mem>
 8007574:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	429a      	cmp	r2, r3
 800757c:	d024      	beq.n	80075c8 <plug_holes+0xc4>
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	791b      	ldrb	r3, [r3, #4]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d120      	bne.n	80075c8 <plug_holes+0xc4>
 8007586:	4b2b      	ldr	r3, [pc, #172]	; (8007634 <plug_holes+0x130>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68fa      	ldr	r2, [r7, #12]
 800758c:	429a      	cmp	r2, r3
 800758e:	d01b      	beq.n	80075c8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8007590:	4b2c      	ldr	r3, [pc, #176]	; (8007644 <plug_holes+0x140>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	429a      	cmp	r2, r3
 8007598:	d102      	bne.n	80075a0 <plug_holes+0x9c>
      lfree = mem;
 800759a:	4a2a      	ldr	r2, [pc, #168]	; (8007644 <plug_holes+0x140>)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	881a      	ldrh	r2, [r3, #0]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	881b      	ldrh	r3, [r3, #0]
 80075ac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80075b0:	d00a      	beq.n	80075c8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	881b      	ldrh	r3, [r3, #0]
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7ff ff80 	bl	80074bc <ptr_to_mem>
 80075bc:	4604      	mov	r4, r0
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f7ff ff8e 	bl	80074e0 <mem_to_ptr>
 80075c4:	4603      	mov	r3, r0
 80075c6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	885b      	ldrh	r3, [r3, #2]
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7ff ff75 	bl	80074bc <ptr_to_mem>
 80075d2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80075d4:	68ba      	ldr	r2, [r7, #8]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	429a      	cmp	r2, r3
 80075da:	d01f      	beq.n	800761c <plug_holes+0x118>
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	791b      	ldrb	r3, [r3, #4]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d11b      	bne.n	800761c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80075e4:	4b17      	ldr	r3, [pc, #92]	; (8007644 <plug_holes+0x140>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d102      	bne.n	80075f4 <plug_holes+0xf0>
      lfree = pmem;
 80075ee:	4a15      	ldr	r2, [pc, #84]	; (8007644 <plug_holes+0x140>)
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	881a      	ldrh	r2, [r3, #0]
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	881b      	ldrh	r3, [r3, #0]
 8007600:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007604:	d00a      	beq.n	800761c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	881b      	ldrh	r3, [r3, #0]
 800760a:	4618      	mov	r0, r3
 800760c:	f7ff ff56 	bl	80074bc <ptr_to_mem>
 8007610:	4604      	mov	r4, r0
 8007612:	68b8      	ldr	r0, [r7, #8]
 8007614:	f7ff ff64 	bl	80074e0 <mem_to_ptr>
 8007618:	4603      	mov	r3, r0
 800761a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800761c:	bf00      	nop
 800761e:	3714      	adds	r7, #20
 8007620:	46bd      	mov	sp, r7
 8007622:	bd90      	pop	{r4, r7, pc}
 8007624:	200084c0 	.word	0x200084c0
 8007628:	08014884 	.word	0x08014884
 800762c:	080148b4 	.word	0x080148b4
 8007630:	080148cc 	.word	0x080148cc
 8007634:	200084c4 	.word	0x200084c4
 8007638:	080148f4 	.word	0x080148f4
 800763c:	08014910 	.word	0x08014910
 8007640:	0801492c 	.word	0x0801492c
 8007644:	200084cc 	.word	0x200084cc

08007648 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800764e:	4b1f      	ldr	r3, [pc, #124]	; (80076cc <mem_init+0x84>)
 8007650:	3303      	adds	r3, #3
 8007652:	f023 0303 	bic.w	r3, r3, #3
 8007656:	461a      	mov	r2, r3
 8007658:	4b1d      	ldr	r3, [pc, #116]	; (80076d0 <mem_init+0x88>)
 800765a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800765c:	4b1c      	ldr	r3, [pc, #112]	; (80076d0 <mem_init+0x88>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007668:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8007676:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800767a:	f7ff ff1f 	bl	80074bc <ptr_to_mem>
 800767e:	4603      	mov	r3, r0
 8007680:	4a14      	ldr	r2, [pc, #80]	; (80076d4 <mem_init+0x8c>)
 8007682:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8007684:	4b13      	ldr	r3, [pc, #76]	; (80076d4 <mem_init+0x8c>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	2201      	movs	r2, #1
 800768a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800768c:	4b11      	ldr	r3, [pc, #68]	; (80076d4 <mem_init+0x8c>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007694:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8007696:	4b0f      	ldr	r3, [pc, #60]	; (80076d4 <mem_init+0x8c>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800769e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80076a0:	4b0b      	ldr	r3, [pc, #44]	; (80076d0 <mem_init+0x88>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a0c      	ldr	r2, [pc, #48]	; (80076d8 <mem_init+0x90>)
 80076a6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80076a8:	480c      	ldr	r0, [pc, #48]	; (80076dc <mem_init+0x94>)
 80076aa:	f00b febf 	bl	801342c <sys_mutex_new>
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d006      	beq.n	80076c2 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80076b4:	4b0a      	ldr	r3, [pc, #40]	; (80076e0 <mem_init+0x98>)
 80076b6:	f240 221f 	movw	r2, #543	; 0x21f
 80076ba:	490a      	ldr	r1, [pc, #40]	; (80076e4 <mem_init+0x9c>)
 80076bc:	480a      	ldr	r0, [pc, #40]	; (80076e8 <mem_init+0xa0>)
 80076be:	f00c f8cd 	bl	801385c <iprintf>
  }
}
 80076c2:	bf00      	nop
 80076c4:	3708      	adds	r7, #8
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	2000b83c 	.word	0x2000b83c
 80076d0:	200084c0 	.word	0x200084c0
 80076d4:	200084c4 	.word	0x200084c4
 80076d8:	200084cc 	.word	0x200084cc
 80076dc:	200084c8 	.word	0x200084c8
 80076e0:	08014884 	.word	0x08014884
 80076e4:	08014958 	.word	0x08014958
 80076e8:	080148cc 	.word	0x080148cc

080076ec <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b086      	sub	sp, #24
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f7ff fef3 	bl	80074e0 <mem_to_ptr>
 80076fa:	4603      	mov	r3, r0
 80076fc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	881b      	ldrh	r3, [r3, #0]
 8007702:	4618      	mov	r0, r3
 8007704:	f7ff feda 	bl	80074bc <ptr_to_mem>
 8007708:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	885b      	ldrh	r3, [r3, #2]
 800770e:	4618      	mov	r0, r3
 8007710:	f7ff fed4 	bl	80074bc <ptr_to_mem>
 8007714:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	881b      	ldrh	r3, [r3, #0]
 800771a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800771e:	d818      	bhi.n	8007752 <mem_link_valid+0x66>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	885b      	ldrh	r3, [r3, #2]
 8007724:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007728:	d813      	bhi.n	8007752 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800772e:	8afa      	ldrh	r2, [r7, #22]
 8007730:	429a      	cmp	r2, r3
 8007732:	d004      	beq.n	800773e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	881b      	ldrh	r3, [r3, #0]
 8007738:	8afa      	ldrh	r2, [r7, #22]
 800773a:	429a      	cmp	r2, r3
 800773c:	d109      	bne.n	8007752 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800773e:	4b08      	ldr	r3, [pc, #32]	; (8007760 <mem_link_valid+0x74>)
 8007740:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007742:	693a      	ldr	r2, [r7, #16]
 8007744:	429a      	cmp	r2, r3
 8007746:	d006      	beq.n	8007756 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	885b      	ldrh	r3, [r3, #2]
 800774c:	8afa      	ldrh	r2, [r7, #22]
 800774e:	429a      	cmp	r2, r3
 8007750:	d001      	beq.n	8007756 <mem_link_valid+0x6a>
    return 0;
 8007752:	2300      	movs	r3, #0
 8007754:	e000      	b.n	8007758 <mem_link_valid+0x6c>
  }
  return 1;
 8007756:	2301      	movs	r3, #1
}
 8007758:	4618      	mov	r0, r3
 800775a:	3718      	adds	r7, #24
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}
 8007760:	200084c4 	.word	0x200084c4

08007764 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b088      	sub	sp, #32
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d070      	beq.n	8007854 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f003 0303 	and.w	r3, r3, #3
 8007778:	2b00      	cmp	r3, #0
 800777a:	d00d      	beq.n	8007798 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800777c:	4b37      	ldr	r3, [pc, #220]	; (800785c <mem_free+0xf8>)
 800777e:	f240 2273 	movw	r2, #627	; 0x273
 8007782:	4937      	ldr	r1, [pc, #220]	; (8007860 <mem_free+0xfc>)
 8007784:	4837      	ldr	r0, [pc, #220]	; (8007864 <mem_free+0x100>)
 8007786:	f00c f869 	bl	801385c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800778a:	f00b fead 	bl	80134e8 <sys_arch_protect>
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	f00b feb7 	bl	8013504 <sys_arch_unprotect>
    return;
 8007796:	e05e      	b.n	8007856 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	3b08      	subs	r3, #8
 800779c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800779e:	4b32      	ldr	r3, [pc, #200]	; (8007868 <mem_free+0x104>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	69fa      	ldr	r2, [r7, #28]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d306      	bcc.n	80077b6 <mem_free+0x52>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f103 020c 	add.w	r2, r3, #12
 80077ae:	4b2f      	ldr	r3, [pc, #188]	; (800786c <mem_free+0x108>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d90d      	bls.n	80077d2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80077b6:	4b29      	ldr	r3, [pc, #164]	; (800785c <mem_free+0xf8>)
 80077b8:	f240 227f 	movw	r2, #639	; 0x27f
 80077bc:	492c      	ldr	r1, [pc, #176]	; (8007870 <mem_free+0x10c>)
 80077be:	4829      	ldr	r0, [pc, #164]	; (8007864 <mem_free+0x100>)
 80077c0:	f00c f84c 	bl	801385c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80077c4:	f00b fe90 	bl	80134e8 <sys_arch_protect>
 80077c8:	6138      	str	r0, [r7, #16]
 80077ca:	6938      	ldr	r0, [r7, #16]
 80077cc:	f00b fe9a 	bl	8013504 <sys_arch_unprotect>
    return;
 80077d0:	e041      	b.n	8007856 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80077d2:	4828      	ldr	r0, [pc, #160]	; (8007874 <mem_free+0x110>)
 80077d4:	f00b fe46 	bl	8013464 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80077d8:	69fb      	ldr	r3, [r7, #28]
 80077da:	791b      	ldrb	r3, [r3, #4]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d110      	bne.n	8007802 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80077e0:	4b1e      	ldr	r3, [pc, #120]	; (800785c <mem_free+0xf8>)
 80077e2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80077e6:	4924      	ldr	r1, [pc, #144]	; (8007878 <mem_free+0x114>)
 80077e8:	481e      	ldr	r0, [pc, #120]	; (8007864 <mem_free+0x100>)
 80077ea:	f00c f837 	bl	801385c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80077ee:	4821      	ldr	r0, [pc, #132]	; (8007874 <mem_free+0x110>)
 80077f0:	f00b fe47 	bl	8013482 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80077f4:	f00b fe78 	bl	80134e8 <sys_arch_protect>
 80077f8:	6178      	str	r0, [r7, #20]
 80077fa:	6978      	ldr	r0, [r7, #20]
 80077fc:	f00b fe82 	bl	8013504 <sys_arch_unprotect>
    return;
 8007800:	e029      	b.n	8007856 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8007802:	69f8      	ldr	r0, [r7, #28]
 8007804:	f7ff ff72 	bl	80076ec <mem_link_valid>
 8007808:	4603      	mov	r3, r0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d110      	bne.n	8007830 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800780e:	4b13      	ldr	r3, [pc, #76]	; (800785c <mem_free+0xf8>)
 8007810:	f240 2295 	movw	r2, #661	; 0x295
 8007814:	4919      	ldr	r1, [pc, #100]	; (800787c <mem_free+0x118>)
 8007816:	4813      	ldr	r0, [pc, #76]	; (8007864 <mem_free+0x100>)
 8007818:	f00c f820 	bl	801385c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800781c:	4815      	ldr	r0, [pc, #84]	; (8007874 <mem_free+0x110>)
 800781e:	f00b fe30 	bl	8013482 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007822:	f00b fe61 	bl	80134e8 <sys_arch_protect>
 8007826:	61b8      	str	r0, [r7, #24]
 8007828:	69b8      	ldr	r0, [r7, #24]
 800782a:	f00b fe6b 	bl	8013504 <sys_arch_unprotect>
    return;
 800782e:	e012      	b.n	8007856 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	2200      	movs	r2, #0
 8007834:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8007836:	4b12      	ldr	r3, [pc, #72]	; (8007880 <mem_free+0x11c>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	69fa      	ldr	r2, [r7, #28]
 800783c:	429a      	cmp	r2, r3
 800783e:	d202      	bcs.n	8007846 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8007840:	4a0f      	ldr	r2, [pc, #60]	; (8007880 <mem_free+0x11c>)
 8007842:	69fb      	ldr	r3, [r7, #28]
 8007844:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8007846:	69f8      	ldr	r0, [r7, #28]
 8007848:	f7ff fe5c 	bl	8007504 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800784c:	4809      	ldr	r0, [pc, #36]	; (8007874 <mem_free+0x110>)
 800784e:	f00b fe18 	bl	8013482 <sys_mutex_unlock>
 8007852:	e000      	b.n	8007856 <mem_free+0xf2>
    return;
 8007854:	bf00      	nop
}
 8007856:	3720      	adds	r7, #32
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	08014884 	.word	0x08014884
 8007860:	08014974 	.word	0x08014974
 8007864:	080148cc 	.word	0x080148cc
 8007868:	200084c0 	.word	0x200084c0
 800786c:	200084c4 	.word	0x200084c4
 8007870:	08014998 	.word	0x08014998
 8007874:	200084c8 	.word	0x200084c8
 8007878:	080149b4 	.word	0x080149b4
 800787c:	080149dc 	.word	0x080149dc
 8007880:	200084cc 	.word	0x200084cc

08007884 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b088      	sub	sp, #32
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	460b      	mov	r3, r1
 800788e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8007890:	887b      	ldrh	r3, [r7, #2]
 8007892:	3303      	adds	r3, #3
 8007894:	b29b      	uxth	r3, r3
 8007896:	f023 0303 	bic.w	r3, r3, #3
 800789a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800789c:	8bfb      	ldrh	r3, [r7, #30]
 800789e:	2b0b      	cmp	r3, #11
 80078a0:	d801      	bhi.n	80078a6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80078a2:	230c      	movs	r3, #12
 80078a4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80078a6:	8bfb      	ldrh	r3, [r7, #30]
 80078a8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80078ac:	d803      	bhi.n	80078b6 <mem_trim+0x32>
 80078ae:	8bfa      	ldrh	r2, [r7, #30]
 80078b0:	887b      	ldrh	r3, [r7, #2]
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d201      	bcs.n	80078ba <mem_trim+0x36>
    return NULL;
 80078b6:	2300      	movs	r3, #0
 80078b8:	e0d8      	b.n	8007a6c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80078ba:	4b6e      	ldr	r3, [pc, #440]	; (8007a74 <mem_trim+0x1f0>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d304      	bcc.n	80078ce <mem_trim+0x4a>
 80078c4:	4b6c      	ldr	r3, [pc, #432]	; (8007a78 <mem_trim+0x1f4>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d306      	bcc.n	80078dc <mem_trim+0x58>
 80078ce:	4b6b      	ldr	r3, [pc, #428]	; (8007a7c <mem_trim+0x1f8>)
 80078d0:	f240 22d1 	movw	r2, #721	; 0x2d1
 80078d4:	496a      	ldr	r1, [pc, #424]	; (8007a80 <mem_trim+0x1fc>)
 80078d6:	486b      	ldr	r0, [pc, #428]	; (8007a84 <mem_trim+0x200>)
 80078d8:	f00b ffc0 	bl	801385c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80078dc:	4b65      	ldr	r3, [pc, #404]	; (8007a74 <mem_trim+0x1f0>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d304      	bcc.n	80078f0 <mem_trim+0x6c>
 80078e6:	4b64      	ldr	r3, [pc, #400]	; (8007a78 <mem_trim+0x1f4>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d307      	bcc.n	8007900 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80078f0:	f00b fdfa 	bl	80134e8 <sys_arch_protect>
 80078f4:	60b8      	str	r0, [r7, #8]
 80078f6:	68b8      	ldr	r0, [r7, #8]
 80078f8:	f00b fe04 	bl	8013504 <sys_arch_unprotect>
    return rmem;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	e0b5      	b.n	8007a6c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	3b08      	subs	r3, #8
 8007904:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8007906:	69b8      	ldr	r0, [r7, #24]
 8007908:	f7ff fdea 	bl	80074e0 <mem_to_ptr>
 800790c:	4603      	mov	r3, r0
 800790e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007910:	69bb      	ldr	r3, [r7, #24]
 8007912:	881a      	ldrh	r2, [r3, #0]
 8007914:	8afb      	ldrh	r3, [r7, #22]
 8007916:	1ad3      	subs	r3, r2, r3
 8007918:	b29b      	uxth	r3, r3
 800791a:	3b08      	subs	r3, #8
 800791c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800791e:	8bfa      	ldrh	r2, [r7, #30]
 8007920:	8abb      	ldrh	r3, [r7, #20]
 8007922:	429a      	cmp	r2, r3
 8007924:	d906      	bls.n	8007934 <mem_trim+0xb0>
 8007926:	4b55      	ldr	r3, [pc, #340]	; (8007a7c <mem_trim+0x1f8>)
 8007928:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800792c:	4956      	ldr	r1, [pc, #344]	; (8007a88 <mem_trim+0x204>)
 800792e:	4855      	ldr	r0, [pc, #340]	; (8007a84 <mem_trim+0x200>)
 8007930:	f00b ff94 	bl	801385c <iprintf>
  if (newsize > size) {
 8007934:	8bfa      	ldrh	r2, [r7, #30]
 8007936:	8abb      	ldrh	r3, [r7, #20]
 8007938:	429a      	cmp	r2, r3
 800793a:	d901      	bls.n	8007940 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800793c:	2300      	movs	r3, #0
 800793e:	e095      	b.n	8007a6c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8007940:	8bfa      	ldrh	r2, [r7, #30]
 8007942:	8abb      	ldrh	r3, [r7, #20]
 8007944:	429a      	cmp	r2, r3
 8007946:	d101      	bne.n	800794c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	e08f      	b.n	8007a6c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800794c:	484f      	ldr	r0, [pc, #316]	; (8007a8c <mem_trim+0x208>)
 800794e:	f00b fd89 	bl	8013464 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	881b      	ldrh	r3, [r3, #0]
 8007956:	4618      	mov	r0, r3
 8007958:	f7ff fdb0 	bl	80074bc <ptr_to_mem>
 800795c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	791b      	ldrb	r3, [r3, #4]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d13f      	bne.n	80079e6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007966:	69bb      	ldr	r3, [r7, #24]
 8007968:	881b      	ldrh	r3, [r3, #0]
 800796a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800796e:	d106      	bne.n	800797e <mem_trim+0xfa>
 8007970:	4b42      	ldr	r3, [pc, #264]	; (8007a7c <mem_trim+0x1f8>)
 8007972:	f240 22f5 	movw	r2, #757	; 0x2f5
 8007976:	4946      	ldr	r1, [pc, #280]	; (8007a90 <mem_trim+0x20c>)
 8007978:	4842      	ldr	r0, [pc, #264]	; (8007a84 <mem_trim+0x200>)
 800797a:	f00b ff6f 	bl	801385c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	881b      	ldrh	r3, [r3, #0]
 8007982:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007984:	8afa      	ldrh	r2, [r7, #22]
 8007986:	8bfb      	ldrh	r3, [r7, #30]
 8007988:	4413      	add	r3, r2
 800798a:	b29b      	uxth	r3, r3
 800798c:	3308      	adds	r3, #8
 800798e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8007990:	4b40      	ldr	r3, [pc, #256]	; (8007a94 <mem_trim+0x210>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	693a      	ldr	r2, [r7, #16]
 8007996:	429a      	cmp	r2, r3
 8007998:	d106      	bne.n	80079a8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800799a:	89fb      	ldrh	r3, [r7, #14]
 800799c:	4618      	mov	r0, r3
 800799e:	f7ff fd8d 	bl	80074bc <ptr_to_mem>
 80079a2:	4603      	mov	r3, r0
 80079a4:	4a3b      	ldr	r2, [pc, #236]	; (8007a94 <mem_trim+0x210>)
 80079a6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80079a8:	89fb      	ldrh	r3, [r7, #14]
 80079aa:	4618      	mov	r0, r3
 80079ac:	f7ff fd86 	bl	80074bc <ptr_to_mem>
 80079b0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	2200      	movs	r2, #0
 80079b6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	89ba      	ldrh	r2, [r7, #12]
 80079bc:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	8afa      	ldrh	r2, [r7, #22]
 80079c2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	89fa      	ldrh	r2, [r7, #14]
 80079c8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	881b      	ldrh	r3, [r3, #0]
 80079ce:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80079d2:	d047      	beq.n	8007a64 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	881b      	ldrh	r3, [r3, #0]
 80079d8:	4618      	mov	r0, r3
 80079da:	f7ff fd6f 	bl	80074bc <ptr_to_mem>
 80079de:	4602      	mov	r2, r0
 80079e0:	89fb      	ldrh	r3, [r7, #14]
 80079e2:	8053      	strh	r3, [r2, #2]
 80079e4:	e03e      	b.n	8007a64 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80079e6:	8bfb      	ldrh	r3, [r7, #30]
 80079e8:	f103 0214 	add.w	r2, r3, #20
 80079ec:	8abb      	ldrh	r3, [r7, #20]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d838      	bhi.n	8007a64 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80079f2:	8afa      	ldrh	r2, [r7, #22]
 80079f4:	8bfb      	ldrh	r3, [r7, #30]
 80079f6:	4413      	add	r3, r2
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	3308      	adds	r3, #8
 80079fc:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80079fe:	69bb      	ldr	r3, [r7, #24]
 8007a00:	881b      	ldrh	r3, [r3, #0]
 8007a02:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007a06:	d106      	bne.n	8007a16 <mem_trim+0x192>
 8007a08:	4b1c      	ldr	r3, [pc, #112]	; (8007a7c <mem_trim+0x1f8>)
 8007a0a:	f240 3216 	movw	r2, #790	; 0x316
 8007a0e:	4920      	ldr	r1, [pc, #128]	; (8007a90 <mem_trim+0x20c>)
 8007a10:	481c      	ldr	r0, [pc, #112]	; (8007a84 <mem_trim+0x200>)
 8007a12:	f00b ff23 	bl	801385c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8007a16:	89fb      	ldrh	r3, [r7, #14]
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f7ff fd4f 	bl	80074bc <ptr_to_mem>
 8007a1e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8007a20:	4b1c      	ldr	r3, [pc, #112]	; (8007a94 <mem_trim+0x210>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	693a      	ldr	r2, [r7, #16]
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d202      	bcs.n	8007a30 <mem_trim+0x1ac>
      lfree = mem2;
 8007a2a:	4a1a      	ldr	r2, [pc, #104]	; (8007a94 <mem_trim+0x210>)
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	2200      	movs	r2, #0
 8007a34:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8007a36:	69bb      	ldr	r3, [r7, #24]
 8007a38:	881a      	ldrh	r2, [r3, #0]
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	8afa      	ldrh	r2, [r7, #22]
 8007a42:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8007a44:	69bb      	ldr	r3, [r7, #24]
 8007a46:	89fa      	ldrh	r2, [r7, #14]
 8007a48:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	881b      	ldrh	r3, [r3, #0]
 8007a4e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007a52:	d007      	beq.n	8007a64 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	881b      	ldrh	r3, [r3, #0]
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f7ff fd2f 	bl	80074bc <ptr_to_mem>
 8007a5e:	4602      	mov	r2, r0
 8007a60:	89fb      	ldrh	r3, [r7, #14]
 8007a62:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8007a64:	4809      	ldr	r0, [pc, #36]	; (8007a8c <mem_trim+0x208>)
 8007a66:	f00b fd0c 	bl	8013482 <sys_mutex_unlock>
  return rmem;
 8007a6a:	687b      	ldr	r3, [r7, #4]
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3720      	adds	r7, #32
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	200084c0 	.word	0x200084c0
 8007a78:	200084c4 	.word	0x200084c4
 8007a7c:	08014884 	.word	0x08014884
 8007a80:	08014a10 	.word	0x08014a10
 8007a84:	080148cc 	.word	0x080148cc
 8007a88:	08014a28 	.word	0x08014a28
 8007a8c:	200084c8 	.word	0x200084c8
 8007a90:	08014a48 	.word	0x08014a48
 8007a94:	200084cc 	.word	0x200084cc

08007a98 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b088      	sub	sp, #32
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8007aa2:	88fb      	ldrh	r3, [r7, #6]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d101      	bne.n	8007aac <mem_malloc+0x14>
    return NULL;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	e0e2      	b.n	8007c72 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8007aac:	88fb      	ldrh	r3, [r7, #6]
 8007aae:	3303      	adds	r3, #3
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	f023 0303 	bic.w	r3, r3, #3
 8007ab6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8007ab8:	8bbb      	ldrh	r3, [r7, #28]
 8007aba:	2b0b      	cmp	r3, #11
 8007abc:	d801      	bhi.n	8007ac2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8007abe:	230c      	movs	r3, #12
 8007ac0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8007ac2:	8bbb      	ldrh	r3, [r7, #28]
 8007ac4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007ac8:	d803      	bhi.n	8007ad2 <mem_malloc+0x3a>
 8007aca:	8bba      	ldrh	r2, [r7, #28]
 8007acc:	88fb      	ldrh	r3, [r7, #6]
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d201      	bcs.n	8007ad6 <mem_malloc+0x3e>
    return NULL;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	e0cd      	b.n	8007c72 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8007ad6:	4869      	ldr	r0, [pc, #420]	; (8007c7c <mem_malloc+0x1e4>)
 8007ad8:	f00b fcc4 	bl	8013464 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007adc:	4b68      	ldr	r3, [pc, #416]	; (8007c80 <mem_malloc+0x1e8>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f7ff fcfd 	bl	80074e0 <mem_to_ptr>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	83fb      	strh	r3, [r7, #30]
 8007aea:	e0b7      	b.n	8007c5c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8007aec:	8bfb      	ldrh	r3, [r7, #30]
 8007aee:	4618      	mov	r0, r3
 8007af0:	f7ff fce4 	bl	80074bc <ptr_to_mem>
 8007af4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	791b      	ldrb	r3, [r3, #4]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	f040 80a7 	bne.w	8007c4e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	881b      	ldrh	r3, [r3, #0]
 8007b04:	461a      	mov	r2, r3
 8007b06:	8bfb      	ldrh	r3, [r7, #30]
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	f1a3 0208 	sub.w	r2, r3, #8
 8007b0e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8007b10:	429a      	cmp	r2, r3
 8007b12:	f0c0 809c 	bcc.w	8007c4e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	881b      	ldrh	r3, [r3, #0]
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	8bfb      	ldrh	r3, [r7, #30]
 8007b1e:	1ad3      	subs	r3, r2, r3
 8007b20:	f1a3 0208 	sub.w	r2, r3, #8
 8007b24:	8bbb      	ldrh	r3, [r7, #28]
 8007b26:	3314      	adds	r3, #20
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d333      	bcc.n	8007b94 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8007b2c:	8bfa      	ldrh	r2, [r7, #30]
 8007b2e:	8bbb      	ldrh	r3, [r7, #28]
 8007b30:	4413      	add	r3, r2
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	3308      	adds	r3, #8
 8007b36:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8007b38:	8a7b      	ldrh	r3, [r7, #18]
 8007b3a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007b3e:	d106      	bne.n	8007b4e <mem_malloc+0xb6>
 8007b40:	4b50      	ldr	r3, [pc, #320]	; (8007c84 <mem_malloc+0x1ec>)
 8007b42:	f240 3287 	movw	r2, #903	; 0x387
 8007b46:	4950      	ldr	r1, [pc, #320]	; (8007c88 <mem_malloc+0x1f0>)
 8007b48:	4850      	ldr	r0, [pc, #320]	; (8007c8c <mem_malloc+0x1f4>)
 8007b4a:	f00b fe87 	bl	801385c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8007b4e:	8a7b      	ldrh	r3, [r7, #18]
 8007b50:	4618      	mov	r0, r3
 8007b52:	f7ff fcb3 	bl	80074bc <ptr_to_mem>
 8007b56:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	881a      	ldrh	r2, [r3, #0]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	8bfa      	ldrh	r2, [r7, #30]
 8007b6a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	8a7a      	ldrh	r2, [r7, #18]
 8007b70:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	2201      	movs	r2, #1
 8007b76:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	881b      	ldrh	r3, [r3, #0]
 8007b7c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007b80:	d00b      	beq.n	8007b9a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	881b      	ldrh	r3, [r3, #0]
 8007b86:	4618      	mov	r0, r3
 8007b88:	f7ff fc98 	bl	80074bc <ptr_to_mem>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	8a7b      	ldrh	r3, [r7, #18]
 8007b90:	8053      	strh	r3, [r2, #2]
 8007b92:	e002      	b.n	8007b9a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	2201      	movs	r2, #1
 8007b98:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8007b9a:	4b39      	ldr	r3, [pc, #228]	; (8007c80 <mem_malloc+0x1e8>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	697a      	ldr	r2, [r7, #20]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d127      	bne.n	8007bf4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8007ba4:	4b36      	ldr	r3, [pc, #216]	; (8007c80 <mem_malloc+0x1e8>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8007baa:	e005      	b.n	8007bb8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8007bac:	69bb      	ldr	r3, [r7, #24]
 8007bae:	881b      	ldrh	r3, [r3, #0]
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f7ff fc83 	bl	80074bc <ptr_to_mem>
 8007bb6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8007bb8:	69bb      	ldr	r3, [r7, #24]
 8007bba:	791b      	ldrb	r3, [r3, #4]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d004      	beq.n	8007bca <mem_malloc+0x132>
 8007bc0:	4b33      	ldr	r3, [pc, #204]	; (8007c90 <mem_malloc+0x1f8>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	69ba      	ldr	r2, [r7, #24]
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d1f0      	bne.n	8007bac <mem_malloc+0x114>
          }
          lfree = cur;
 8007bca:	4a2d      	ldr	r2, [pc, #180]	; (8007c80 <mem_malloc+0x1e8>)
 8007bcc:	69bb      	ldr	r3, [r7, #24]
 8007bce:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8007bd0:	4b2b      	ldr	r3, [pc, #172]	; (8007c80 <mem_malloc+0x1e8>)
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	4b2e      	ldr	r3, [pc, #184]	; (8007c90 <mem_malloc+0x1f8>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d00b      	beq.n	8007bf4 <mem_malloc+0x15c>
 8007bdc:	4b28      	ldr	r3, [pc, #160]	; (8007c80 <mem_malloc+0x1e8>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	791b      	ldrb	r3, [r3, #4]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d006      	beq.n	8007bf4 <mem_malloc+0x15c>
 8007be6:	4b27      	ldr	r3, [pc, #156]	; (8007c84 <mem_malloc+0x1ec>)
 8007be8:	f240 32b5 	movw	r2, #949	; 0x3b5
 8007bec:	4929      	ldr	r1, [pc, #164]	; (8007c94 <mem_malloc+0x1fc>)
 8007bee:	4827      	ldr	r0, [pc, #156]	; (8007c8c <mem_malloc+0x1f4>)
 8007bf0:	f00b fe34 	bl	801385c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8007bf4:	4821      	ldr	r0, [pc, #132]	; (8007c7c <mem_malloc+0x1e4>)
 8007bf6:	f00b fc44 	bl	8013482 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8007bfa:	8bba      	ldrh	r2, [r7, #28]
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	4413      	add	r3, r2
 8007c00:	3308      	adds	r3, #8
 8007c02:	4a23      	ldr	r2, [pc, #140]	; (8007c90 <mem_malloc+0x1f8>)
 8007c04:	6812      	ldr	r2, [r2, #0]
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d906      	bls.n	8007c18 <mem_malloc+0x180>
 8007c0a:	4b1e      	ldr	r3, [pc, #120]	; (8007c84 <mem_malloc+0x1ec>)
 8007c0c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8007c10:	4921      	ldr	r1, [pc, #132]	; (8007c98 <mem_malloc+0x200>)
 8007c12:	481e      	ldr	r0, [pc, #120]	; (8007c8c <mem_malloc+0x1f4>)
 8007c14:	f00b fe22 	bl	801385c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	f003 0303 	and.w	r3, r3, #3
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d006      	beq.n	8007c30 <mem_malloc+0x198>
 8007c22:	4b18      	ldr	r3, [pc, #96]	; (8007c84 <mem_malloc+0x1ec>)
 8007c24:	f240 32bb 	movw	r2, #955	; 0x3bb
 8007c28:	491c      	ldr	r1, [pc, #112]	; (8007c9c <mem_malloc+0x204>)
 8007c2a:	4818      	ldr	r0, [pc, #96]	; (8007c8c <mem_malloc+0x1f4>)
 8007c2c:	f00b fe16 	bl	801385c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	f003 0303 	and.w	r3, r3, #3
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d006      	beq.n	8007c48 <mem_malloc+0x1b0>
 8007c3a:	4b12      	ldr	r3, [pc, #72]	; (8007c84 <mem_malloc+0x1ec>)
 8007c3c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8007c40:	4917      	ldr	r1, [pc, #92]	; (8007ca0 <mem_malloc+0x208>)
 8007c42:	4812      	ldr	r0, [pc, #72]	; (8007c8c <mem_malloc+0x1f4>)
 8007c44:	f00b fe0a 	bl	801385c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	3308      	adds	r3, #8
 8007c4c:	e011      	b.n	8007c72 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8007c4e:	8bfb      	ldrh	r3, [r7, #30]
 8007c50:	4618      	mov	r0, r3
 8007c52:	f7ff fc33 	bl	80074bc <ptr_to_mem>
 8007c56:	4603      	mov	r3, r0
 8007c58:	881b      	ldrh	r3, [r3, #0]
 8007c5a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007c5c:	8bfa      	ldrh	r2, [r7, #30]
 8007c5e:	8bbb      	ldrh	r3, [r7, #28]
 8007c60:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8007c64:	429a      	cmp	r2, r3
 8007c66:	f4ff af41 	bcc.w	8007aec <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8007c6a:	4804      	ldr	r0, [pc, #16]	; (8007c7c <mem_malloc+0x1e4>)
 8007c6c:	f00b fc09 	bl	8013482 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8007c70:	2300      	movs	r3, #0
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3720      	adds	r7, #32
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	200084c8 	.word	0x200084c8
 8007c80:	200084cc 	.word	0x200084cc
 8007c84:	08014884 	.word	0x08014884
 8007c88:	08014a48 	.word	0x08014a48
 8007c8c:	080148cc 	.word	0x080148cc
 8007c90:	200084c4 	.word	0x200084c4
 8007c94:	08014a5c 	.word	0x08014a5c
 8007c98:	08014a78 	.word	0x08014a78
 8007c9c:	08014aa8 	.word	0x08014aa8
 8007ca0:	08014ad8 	.word	0x08014ad8

08007ca4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b085      	sub	sp, #20
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	3303      	adds	r3, #3
 8007cba:	f023 0303 	bic.w	r3, r3, #3
 8007cbe:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	60fb      	str	r3, [r7, #12]
 8007cc4:	e011      	b.n	8007cea <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	68ba      	ldr	r2, [r7, #8]
 8007cd6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	881b      	ldrh	r3, [r3, #0]
 8007cdc:	461a      	mov	r2, r3
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	60fb      	str	r3, [r7, #12]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	885b      	ldrh	r3, [r3, #2]
 8007cee:	461a      	mov	r2, r3
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	dbe7      	blt.n	8007cc6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8007cf6:	bf00      	nop
 8007cf8:	bf00      	nop
 8007cfa:	3714      	adds	r7, #20
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	80fb      	strh	r3, [r7, #6]
 8007d0e:	e009      	b.n	8007d24 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8007d10:	88fb      	ldrh	r3, [r7, #6]
 8007d12:	4a08      	ldr	r2, [pc, #32]	; (8007d34 <memp_init+0x30>)
 8007d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f7ff ffc3 	bl	8007ca4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007d1e:	88fb      	ldrh	r3, [r7, #6]
 8007d20:	3301      	adds	r3, #1
 8007d22:	80fb      	strh	r3, [r7, #6]
 8007d24:	88fb      	ldrh	r3, [r7, #6]
 8007d26:	2b0c      	cmp	r3, #12
 8007d28:	d9f2      	bls.n	8007d10 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8007d2a:	bf00      	nop
 8007d2c:	bf00      	nop
 8007d2e:	3708      	adds	r7, #8
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	08017680 	.word	0x08017680

08007d38 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8007d40:	f00b fbd2 	bl	80134e8 <sys_arch_protect>
 8007d44:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d015      	beq.n	8007d80 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	68ba      	ldr	r2, [r7, #8]
 8007d5a:	6812      	ldr	r2, [r2, #0]
 8007d5c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	f003 0303 	and.w	r3, r3, #3
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d006      	beq.n	8007d76 <do_memp_malloc_pool+0x3e>
 8007d68:	4b09      	ldr	r3, [pc, #36]	; (8007d90 <do_memp_malloc_pool+0x58>)
 8007d6a:	f44f 728c 	mov.w	r2, #280	; 0x118
 8007d6e:	4909      	ldr	r1, [pc, #36]	; (8007d94 <do_memp_malloc_pool+0x5c>)
 8007d70:	4809      	ldr	r0, [pc, #36]	; (8007d98 <do_memp_malloc_pool+0x60>)
 8007d72:	f00b fd73 	bl	801385c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8007d76:	68f8      	ldr	r0, [r7, #12]
 8007d78:	f00b fbc4 	bl	8013504 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	e003      	b.n	8007d88 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8007d80:	68f8      	ldr	r0, [r7, #12]
 8007d82:	f00b fbbf 	bl	8013504 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8007d86:	2300      	movs	r3, #0
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3710      	adds	r7, #16
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	08014afc 	.word	0x08014afc
 8007d94:	08014b2c 	.word	0x08014b2c
 8007d98:	08014b50 	.word	0x08014b50

08007d9c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	4603      	mov	r3, r0
 8007da4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007da6:	79fb      	ldrb	r3, [r7, #7]
 8007da8:	2b0c      	cmp	r3, #12
 8007daa:	d908      	bls.n	8007dbe <memp_malloc+0x22>
 8007dac:	4b0a      	ldr	r3, [pc, #40]	; (8007dd8 <memp_malloc+0x3c>)
 8007dae:	f240 1257 	movw	r2, #343	; 0x157
 8007db2:	490a      	ldr	r1, [pc, #40]	; (8007ddc <memp_malloc+0x40>)
 8007db4:	480a      	ldr	r0, [pc, #40]	; (8007de0 <memp_malloc+0x44>)
 8007db6:	f00b fd51 	bl	801385c <iprintf>
 8007dba:	2300      	movs	r3, #0
 8007dbc:	e008      	b.n	8007dd0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8007dbe:	79fb      	ldrb	r3, [r7, #7]
 8007dc0:	4a08      	ldr	r2, [pc, #32]	; (8007de4 <memp_malloc+0x48>)
 8007dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f7ff ffb6 	bl	8007d38 <do_memp_malloc_pool>
 8007dcc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8007dce:	68fb      	ldr	r3, [r7, #12]
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3710      	adds	r7, #16
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	08014afc 	.word	0x08014afc
 8007ddc:	08014b8c 	.word	0x08014b8c
 8007de0:	08014b50 	.word	0x08014b50
 8007de4:	08017680 	.word	0x08017680

08007de8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	f003 0303 	and.w	r3, r3, #3
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d006      	beq.n	8007e0a <do_memp_free_pool+0x22>
 8007dfc:	4b0d      	ldr	r3, [pc, #52]	; (8007e34 <do_memp_free_pool+0x4c>)
 8007dfe:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8007e02:	490d      	ldr	r1, [pc, #52]	; (8007e38 <do_memp_free_pool+0x50>)
 8007e04:	480d      	ldr	r0, [pc, #52]	; (8007e3c <do_memp_free_pool+0x54>)
 8007e06:	f00b fd29 	bl	801385c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8007e0e:	f00b fb6b 	bl	80134e8 <sys_arch_protect>
 8007e12:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	68fa      	ldr	r2, [r7, #12]
 8007e24:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8007e26:	68b8      	ldr	r0, [r7, #8]
 8007e28:	f00b fb6c 	bl	8013504 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8007e2c:	bf00      	nop
 8007e2e:	3710      	adds	r7, #16
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	08014afc 	.word	0x08014afc
 8007e38:	08014bac 	.word	0x08014bac
 8007e3c:	08014b50 	.word	0x08014b50

08007e40 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	4603      	mov	r3, r0
 8007e48:	6039      	str	r1, [r7, #0]
 8007e4a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007e4c:	79fb      	ldrb	r3, [r7, #7]
 8007e4e:	2b0c      	cmp	r3, #12
 8007e50:	d907      	bls.n	8007e62 <memp_free+0x22>
 8007e52:	4b0c      	ldr	r3, [pc, #48]	; (8007e84 <memp_free+0x44>)
 8007e54:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8007e58:	490b      	ldr	r1, [pc, #44]	; (8007e88 <memp_free+0x48>)
 8007e5a:	480c      	ldr	r0, [pc, #48]	; (8007e8c <memp_free+0x4c>)
 8007e5c:	f00b fcfe 	bl	801385c <iprintf>
 8007e60:	e00c      	b.n	8007e7c <memp_free+0x3c>

  if (mem == NULL) {
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d008      	beq.n	8007e7a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007e68:	79fb      	ldrb	r3, [r7, #7]
 8007e6a:	4a09      	ldr	r2, [pc, #36]	; (8007e90 <memp_free+0x50>)
 8007e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e70:	6839      	ldr	r1, [r7, #0]
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7ff ffb8 	bl	8007de8 <do_memp_free_pool>
 8007e78:	e000      	b.n	8007e7c <memp_free+0x3c>
    return;
 8007e7a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8007e7c:	3708      	adds	r7, #8
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	bf00      	nop
 8007e84:	08014afc 	.word	0x08014afc
 8007e88:	08014bcc 	.word	0x08014bcc
 8007e8c:	08014b50 	.word	0x08014b50
 8007e90:	08017680 	.word	0x08017680

08007e94 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8007e94:	b480      	push	{r7}
 8007e96:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8007e98:	bf00      	nop
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr
	...

08007ea4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b086      	sub	sp, #24
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	60f8      	str	r0, [r7, #12]
 8007eac:	60b9      	str	r1, [r7, #8]
 8007eae:	607a      	str	r2, [r7, #4]
 8007eb0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d108      	bne.n	8007eca <netif_add+0x26>
 8007eb8:	4b5b      	ldr	r3, [pc, #364]	; (8008028 <netif_add+0x184>)
 8007eba:	f240 1227 	movw	r2, #295	; 0x127
 8007ebe:	495b      	ldr	r1, [pc, #364]	; (800802c <netif_add+0x188>)
 8007ec0:	485b      	ldr	r0, [pc, #364]	; (8008030 <netif_add+0x18c>)
 8007ec2:	f00b fccb 	bl	801385c <iprintf>
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	e0a9      	b.n	800801e <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8007eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d108      	bne.n	8007ee2 <netif_add+0x3e>
 8007ed0:	4b55      	ldr	r3, [pc, #340]	; (8008028 <netif_add+0x184>)
 8007ed2:	f44f 7294 	mov.w	r2, #296	; 0x128
 8007ed6:	4957      	ldr	r1, [pc, #348]	; (8008034 <netif_add+0x190>)
 8007ed8:	4855      	ldr	r0, [pc, #340]	; (8008030 <netif_add+0x18c>)
 8007eda:	f00b fcbf 	bl	801385c <iprintf>
 8007ede:	2300      	movs	r3, #0
 8007ee0:	e09d      	b.n	800801e <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d101      	bne.n	8007eec <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8007ee8:	4b53      	ldr	r3, [pc, #332]	; (8008038 <netif_add+0x194>)
 8007eea:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d101      	bne.n	8007ef6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8007ef2:	4b51      	ldr	r3, [pc, #324]	; (8008038 <netif_add+0x194>)
 8007ef4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d101      	bne.n	8007f00 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8007efc:	4b4e      	ldr	r3, [pc, #312]	; (8008038 <netif_add+0x194>)
 8007efe:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2200      	movs	r2, #0
 8007f04:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	4a49      	ldr	r2, [pc, #292]	; (800803c <netif_add+0x198>)
 8007f16:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2200      	movs	r2, #0
 8007f22:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	3324      	adds	r3, #36	; 0x24
 8007f2a:	2204      	movs	r2, #4
 8007f2c:	2100      	movs	r1, #0
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f00b fc31 	bl	8013796 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2200      	movs	r2, #0
 8007f38:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	6a3a      	ldr	r2, [r7, #32]
 8007f3e:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8007f40:	4b3f      	ldr	r3, [pc, #252]	; (8008040 <netif_add+0x19c>)
 8007f42:	781a      	ldrb	r2, [r3, #0]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f4e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	68b9      	ldr	r1, [r7, #8]
 8007f56:	68f8      	ldr	r0, [r7, #12]
 8007f58:	f000 f914 	bl	8008184 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8007f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5e:	68f8      	ldr	r0, [r7, #12]
 8007f60:	4798      	blx	r3
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d001      	beq.n	8007f6c <netif_add+0xc8>
    return NULL;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	e058      	b.n	800801e <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007f72:	2bff      	cmp	r3, #255	; 0xff
 8007f74:	d103      	bne.n	8007f7e <netif_add+0xda>
        netif->num = 0;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007f82:	4b30      	ldr	r3, [pc, #192]	; (8008044 <netif_add+0x1a0>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	617b      	str	r3, [r7, #20]
 8007f88:	e02b      	b.n	8007fe2 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8007f8a:	697a      	ldr	r2, [r7, #20]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d106      	bne.n	8007fa0 <netif_add+0xfc>
 8007f92:	4b25      	ldr	r3, [pc, #148]	; (8008028 <netif_add+0x184>)
 8007f94:	f240 128b 	movw	r2, #395	; 0x18b
 8007f98:	492b      	ldr	r1, [pc, #172]	; (8008048 <netif_add+0x1a4>)
 8007f9a:	4825      	ldr	r0, [pc, #148]	; (8008030 <netif_add+0x18c>)
 8007f9c:	f00b fc5e 	bl	801385c <iprintf>
        num_netifs++;
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	2bff      	cmp	r3, #255	; 0xff
 8007faa:	dd06      	ble.n	8007fba <netif_add+0x116>
 8007fac:	4b1e      	ldr	r3, [pc, #120]	; (8008028 <netif_add+0x184>)
 8007fae:	f240 128d 	movw	r2, #397	; 0x18d
 8007fb2:	4926      	ldr	r1, [pc, #152]	; (800804c <netif_add+0x1a8>)
 8007fb4:	481e      	ldr	r0, [pc, #120]	; (8008030 <netif_add+0x18c>)
 8007fb6:	f00b fc51 	bl	801385c <iprintf>
        if (netif2->num == netif->num) {
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d108      	bne.n	8007fdc <netif_add+0x138>
          netif->num++;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	b2da      	uxtb	r2, r3
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 8007fda:	e005      	b.n	8007fe8 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	617b      	str	r3, [r7, #20]
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d1d0      	bne.n	8007f8a <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d1be      	bne.n	8007f6c <netif_add+0xc8>
  }
  if (netif->num == 254) {
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007ff4:	2bfe      	cmp	r3, #254	; 0xfe
 8007ff6:	d103      	bne.n	8008000 <netif_add+0x15c>
    netif_num = 0;
 8007ff8:	4b11      	ldr	r3, [pc, #68]	; (8008040 <netif_add+0x19c>)
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	701a      	strb	r2, [r3, #0]
 8007ffe:	e006      	b.n	800800e <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008006:	3301      	adds	r3, #1
 8008008:	b2da      	uxtb	r2, r3
 800800a:	4b0d      	ldr	r3, [pc, #52]	; (8008040 <netif_add+0x19c>)
 800800c:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800800e:	4b0d      	ldr	r3, [pc, #52]	; (8008044 <netif_add+0x1a0>)
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8008016:	4a0b      	ldr	r2, [pc, #44]	; (8008044 <netif_add+0x1a0>)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800801c:	68fb      	ldr	r3, [r7, #12]
}
 800801e:	4618      	mov	r0, r3
 8008020:	3718      	adds	r7, #24
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
 8008026:	bf00      	nop
 8008028:	08014be8 	.word	0x08014be8
 800802c:	08014c7c 	.word	0x08014c7c
 8008030:	08014c38 	.word	0x08014c38
 8008034:	08014c98 	.word	0x08014c98
 8008038:	08017704 	.word	0x08017704
 800803c:	08008467 	.word	0x08008467
 8008040:	20008504 	.word	0x20008504
 8008044:	2000ef48 	.word	0x2000ef48
 8008048:	08014cbc 	.word	0x08014cbc
 800804c:	08014cd0 	.word	0x08014cd0

08008050 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800805a:	6839      	ldr	r1, [r7, #0]
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f002 fb91 	bl	800a784 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8008062:	6839      	ldr	r1, [r7, #0]
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f006 ffa3 	bl	800efb0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800806a:	bf00      	nop
 800806c:	3708      	adds	r7, #8
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}
	...

08008074 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b086      	sub	sp, #24
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d106      	bne.n	8008094 <netif_do_set_ipaddr+0x20>
 8008086:	4b1d      	ldr	r3, [pc, #116]	; (80080fc <netif_do_set_ipaddr+0x88>)
 8008088:	f240 12cb 	movw	r2, #459	; 0x1cb
 800808c:	491c      	ldr	r1, [pc, #112]	; (8008100 <netif_do_set_ipaddr+0x8c>)
 800808e:	481d      	ldr	r0, [pc, #116]	; (8008104 <netif_do_set_ipaddr+0x90>)
 8008090:	f00b fbe4 	bl	801385c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d106      	bne.n	80080a8 <netif_do_set_ipaddr+0x34>
 800809a:	4b18      	ldr	r3, [pc, #96]	; (80080fc <netif_do_set_ipaddr+0x88>)
 800809c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80080a0:	4917      	ldr	r1, [pc, #92]	; (8008100 <netif_do_set_ipaddr+0x8c>)
 80080a2:	4818      	ldr	r0, [pc, #96]	; (8008104 <netif_do_set_ipaddr+0x90>)
 80080a4:	f00b fbda 	bl	801385c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	3304      	adds	r3, #4
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d01c      	beq.n	80080f0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	3304      	adds	r3, #4
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80080c6:	f107 0314 	add.w	r3, r7, #20
 80080ca:	4619      	mov	r1, r3
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f7ff ffbf 	bl	8008050 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d002      	beq.n	80080de <netif_do_set_ipaddr+0x6a>
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	e000      	b.n	80080e0 <netif_do_set_ipaddr+0x6c>
 80080de:	2300      	movs	r3, #0
 80080e0:	68fa      	ldr	r2, [r7, #12]
 80080e2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80080e4:	2101      	movs	r1, #1
 80080e6:	68f8      	ldr	r0, [r7, #12]
 80080e8:	f000 f8d2 	bl	8008290 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80080ec:	2301      	movs	r3, #1
 80080ee:	e000      	b.n	80080f2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80080f0:	2300      	movs	r3, #0
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3718      	adds	r7, #24
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop
 80080fc:	08014be8 	.word	0x08014be8
 8008100:	08014d00 	.word	0x08014d00
 8008104:	08014c38 	.word	0x08014c38

08008108 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8008108:	b480      	push	{r7}
 800810a:	b085      	sub	sp, #20
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	681a      	ldr	r2, [r3, #0]
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	3308      	adds	r3, #8
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	429a      	cmp	r2, r3
 8008120:	d00a      	beq.n	8008138 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d002      	beq.n	800812e <netif_do_set_netmask+0x26>
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	e000      	b.n	8008130 <netif_do_set_netmask+0x28>
 800812e:	2300      	movs	r3, #0
 8008130:	68fa      	ldr	r2, [r7, #12]
 8008132:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8008134:	2301      	movs	r3, #1
 8008136:	e000      	b.n	800813a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3714      	adds	r7, #20
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr

08008146 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8008146:	b480      	push	{r7}
 8008148:	b085      	sub	sp, #20
 800814a:	af00      	add	r7, sp, #0
 800814c:	60f8      	str	r0, [r7, #12]
 800814e:	60b9      	str	r1, [r7, #8]
 8008150:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	330c      	adds	r3, #12
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	429a      	cmp	r2, r3
 800815e:	d00a      	beq.n	8008176 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d002      	beq.n	800816c <netif_do_set_gw+0x26>
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	e000      	b.n	800816e <netif_do_set_gw+0x28>
 800816c:	2300      	movs	r3, #0
 800816e:	68fa      	ldr	r2, [r7, #12]
 8008170:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8008172:	2301      	movs	r3, #1
 8008174:	e000      	b.n	8008178 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8008176:	2300      	movs	r3, #0
}
 8008178:	4618      	mov	r0, r3
 800817a:	3714      	adds	r7, #20
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b088      	sub	sp, #32
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	607a      	str	r2, [r7, #4]
 8008190:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8008192:	2300      	movs	r3, #0
 8008194:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8008196:	2300      	movs	r3, #0
 8008198:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d101      	bne.n	80081a4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80081a0:	4b1c      	ldr	r3, [pc, #112]	; (8008214 <netif_set_addr+0x90>)
 80081a2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d101      	bne.n	80081ae <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80081aa:	4b1a      	ldr	r3, [pc, #104]	; (8008214 <netif_set_addr+0x90>)
 80081ac:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d101      	bne.n	80081b8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80081b4:	4b17      	ldr	r3, [pc, #92]	; (8008214 <netif_set_addr+0x90>)
 80081b6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d003      	beq.n	80081c6 <netif_set_addr+0x42>
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d101      	bne.n	80081ca <netif_set_addr+0x46>
 80081c6:	2301      	movs	r3, #1
 80081c8:	e000      	b.n	80081cc <netif_set_addr+0x48>
 80081ca:	2300      	movs	r3, #0
 80081cc:	617b      	str	r3, [r7, #20]
  if (remove) {
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d006      	beq.n	80081e2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80081d4:	f107 0310 	add.w	r3, r7, #16
 80081d8:	461a      	mov	r2, r3
 80081da:	68b9      	ldr	r1, [r7, #8]
 80081dc:	68f8      	ldr	r0, [r7, #12]
 80081de:	f7ff ff49 	bl	8008074 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80081e2:	69fa      	ldr	r2, [r7, #28]
 80081e4:	6879      	ldr	r1, [r7, #4]
 80081e6:	68f8      	ldr	r0, [r7, #12]
 80081e8:	f7ff ff8e 	bl	8008108 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80081ec:	69ba      	ldr	r2, [r7, #24]
 80081ee:	6839      	ldr	r1, [r7, #0]
 80081f0:	68f8      	ldr	r0, [r7, #12]
 80081f2:	f7ff ffa8 	bl	8008146 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d106      	bne.n	800820a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80081fc:	f107 0310 	add.w	r3, r7, #16
 8008200:	461a      	mov	r2, r3
 8008202:	68b9      	ldr	r1, [r7, #8]
 8008204:	68f8      	ldr	r0, [r7, #12]
 8008206:	f7ff ff35 	bl	8008074 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800820a:	bf00      	nop
 800820c:	3720      	adds	r7, #32
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	08017704 	.word	0x08017704

08008218 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8008218:	b480      	push	{r7}
 800821a:	b083      	sub	sp, #12
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8008220:	4a04      	ldr	r2, [pc, #16]	; (8008234 <netif_set_default+0x1c>)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8008226:	bf00      	nop
 8008228:	370c      	adds	r7, #12
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr
 8008232:	bf00      	nop
 8008234:	2000ef4c 	.word	0x2000ef4c

08008238 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d107      	bne.n	8008256 <netif_set_up+0x1e>
 8008246:	4b0f      	ldr	r3, [pc, #60]	; (8008284 <netif_set_up+0x4c>)
 8008248:	f44f 7254 	mov.w	r2, #848	; 0x350
 800824c:	490e      	ldr	r1, [pc, #56]	; (8008288 <netif_set_up+0x50>)
 800824e:	480f      	ldr	r0, [pc, #60]	; (800828c <netif_set_up+0x54>)
 8008250:	f00b fb04 	bl	801385c <iprintf>
 8008254:	e013      	b.n	800827e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800825c:	f003 0301 	and.w	r3, r3, #1
 8008260:	2b00      	cmp	r3, #0
 8008262:	d10c      	bne.n	800827e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800826a:	f043 0301 	orr.w	r3, r3, #1
 800826e:	b2da      	uxtb	r2, r3
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008276:	2103      	movs	r1, #3
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 f809 	bl	8008290 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800827e:	3708      	adds	r7, #8
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}
 8008284:	08014be8 	.word	0x08014be8
 8008288:	08014d70 	.word	0x08014d70
 800828c:	08014c38 	.word	0x08014c38

08008290 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b082      	sub	sp, #8
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	460b      	mov	r3, r1
 800829a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d106      	bne.n	80082b0 <netif_issue_reports+0x20>
 80082a2:	4b18      	ldr	r3, [pc, #96]	; (8008304 <netif_issue_reports+0x74>)
 80082a4:	f240 326d 	movw	r2, #877	; 0x36d
 80082a8:	4917      	ldr	r1, [pc, #92]	; (8008308 <netif_issue_reports+0x78>)
 80082aa:	4818      	ldr	r0, [pc, #96]	; (800830c <netif_issue_reports+0x7c>)
 80082ac:	f00b fad6 	bl	801385c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80082b6:	f003 0304 	and.w	r3, r3, #4
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d01e      	beq.n	80082fc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80082c4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d017      	beq.n	80082fc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80082cc:	78fb      	ldrb	r3, [r7, #3]
 80082ce:	f003 0301 	and.w	r3, r3, #1
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d013      	beq.n	80082fe <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	3304      	adds	r3, #4
 80082da:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d00e      	beq.n	80082fe <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80082e6:	f003 0308 	and.w	r3, r3, #8
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d007      	beq.n	80082fe <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	3304      	adds	r3, #4
 80082f2:	4619      	mov	r1, r3
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f009 fc5b 	bl	8011bb0 <etharp_request>
 80082fa:	e000      	b.n	80082fe <netif_issue_reports+0x6e>
    return;
 80082fc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80082fe:	3708      	adds	r7, #8
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}
 8008304:	08014be8 	.word	0x08014be8
 8008308:	08014d8c 	.word	0x08014d8c
 800830c:	08014c38 	.word	0x08014c38

08008310 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b082      	sub	sp, #8
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d107      	bne.n	800832e <netif_set_down+0x1e>
 800831e:	4b12      	ldr	r3, [pc, #72]	; (8008368 <netif_set_down+0x58>)
 8008320:	f240 329b 	movw	r2, #923	; 0x39b
 8008324:	4911      	ldr	r1, [pc, #68]	; (800836c <netif_set_down+0x5c>)
 8008326:	4812      	ldr	r0, [pc, #72]	; (8008370 <netif_set_down+0x60>)
 8008328:	f00b fa98 	bl	801385c <iprintf>
 800832c:	e019      	b.n	8008362 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008334:	f003 0301 	and.w	r3, r3, #1
 8008338:	2b00      	cmp	r3, #0
 800833a:	d012      	beq.n	8008362 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008342:	f023 0301 	bic.w	r3, r3, #1
 8008346:	b2da      	uxtb	r2, r3
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008354:	f003 0308 	and.w	r3, r3, #8
 8008358:	2b00      	cmp	r3, #0
 800835a:	d002      	beq.n	8008362 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f008 ffe1 	bl	8011324 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8008362:	3708      	adds	r7, #8
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}
 8008368:	08014be8 	.word	0x08014be8
 800836c:	08014db0 	.word	0x08014db0
 8008370:	08014c38 	.word	0x08014c38

08008374 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d107      	bne.n	8008392 <netif_set_link_up+0x1e>
 8008382:	4b15      	ldr	r3, [pc, #84]	; (80083d8 <netif_set_link_up+0x64>)
 8008384:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8008388:	4914      	ldr	r1, [pc, #80]	; (80083dc <netif_set_link_up+0x68>)
 800838a:	4815      	ldr	r0, [pc, #84]	; (80083e0 <netif_set_link_up+0x6c>)
 800838c:	f00b fa66 	bl	801385c <iprintf>
 8008390:	e01e      	b.n	80083d0 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008398:	f003 0304 	and.w	r3, r3, #4
 800839c:	2b00      	cmp	r3, #0
 800839e:	d117      	bne.n	80083d0 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80083a6:	f043 0304 	orr.w	r3, r3, #4
 80083aa:	b2da      	uxtb	r2, r3
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f007 fa26 	bl	800f804 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80083b8:	2103      	movs	r1, #3
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f7ff ff68 	bl	8008290 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	69db      	ldr	r3, [r3, #28]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d003      	beq.n	80083d0 <netif_set_link_up+0x5c>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	69db      	ldr	r3, [r3, #28]
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80083d0:	3708      	adds	r7, #8
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	08014be8 	.word	0x08014be8
 80083dc:	08014dd0 	.word	0x08014dd0
 80083e0:	08014c38 	.word	0x08014c38

080083e4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d107      	bne.n	8008402 <netif_set_link_down+0x1e>
 80083f2:	4b11      	ldr	r3, [pc, #68]	; (8008438 <netif_set_link_down+0x54>)
 80083f4:	f240 4206 	movw	r2, #1030	; 0x406
 80083f8:	4910      	ldr	r1, [pc, #64]	; (800843c <netif_set_link_down+0x58>)
 80083fa:	4811      	ldr	r0, [pc, #68]	; (8008440 <netif_set_link_down+0x5c>)
 80083fc:	f00b fa2e 	bl	801385c <iprintf>
 8008400:	e017      	b.n	8008432 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008408:	f003 0304 	and.w	r3, r3, #4
 800840c:	2b00      	cmp	r3, #0
 800840e:	d010      	beq.n	8008432 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008416:	f023 0304 	bic.w	r3, r3, #4
 800841a:	b2da      	uxtb	r2, r3
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	69db      	ldr	r3, [r3, #28]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d003      	beq.n	8008432 <netif_set_link_down+0x4e>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	69db      	ldr	r3, [r3, #28]
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8008432:	3708      	adds	r7, #8
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	08014be8 	.word	0x08014be8
 800843c:	08014df4 	.word	0x08014df4
 8008440:	08014c38 	.word	0x08014c38

08008444 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8008444:	b480      	push	{r7}
 8008446:	b083      	sub	sp, #12
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d002      	beq.n	800845a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	683a      	ldr	r2, [r7, #0]
 8008458:	61da      	str	r2, [r3, #28]
  }
}
 800845a:	bf00      	nop
 800845c:	370c      	adds	r7, #12
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr

08008466 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8008466:	b480      	push	{r7}
 8008468:	b085      	sub	sp, #20
 800846a:	af00      	add	r7, sp, #0
 800846c:	60f8      	str	r0, [r7, #12]
 800846e:	60b9      	str	r1, [r7, #8]
 8008470:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8008472:	f06f 030b 	mvn.w	r3, #11
}
 8008476:	4618      	mov	r0, r3
 8008478:	3714      	adds	r7, #20
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr
	...

08008484 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8008484:	b480      	push	{r7}
 8008486:	b085      	sub	sp, #20
 8008488:	af00      	add	r7, sp, #0
 800848a:	4603      	mov	r3, r0
 800848c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800848e:	79fb      	ldrb	r3, [r7, #7]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d013      	beq.n	80084bc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8008494:	4b0d      	ldr	r3, [pc, #52]	; (80084cc <netif_get_by_index+0x48>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	60fb      	str	r3, [r7, #12]
 800849a:	e00c      	b.n	80084b6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80084a2:	3301      	adds	r3, #1
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	79fa      	ldrb	r2, [r7, #7]
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d101      	bne.n	80084b0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	e006      	b.n	80084be <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	60fb      	str	r3, [r7, #12]
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d1ef      	bne.n	800849c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80084bc:	2300      	movs	r3, #0
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3714      	adds	r7, #20
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr
 80084ca:	bf00      	nop
 80084cc:	2000ef48 	.word	0x2000ef48

080084d0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b082      	sub	sp, #8
 80084d4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80084d6:	f00b f807 	bl	80134e8 <sys_arch_protect>
 80084da:	6038      	str	r0, [r7, #0]
 80084dc:	4b0d      	ldr	r3, [pc, #52]	; (8008514 <pbuf_free_ooseq+0x44>)
 80084de:	2200      	movs	r2, #0
 80084e0:	701a      	strb	r2, [r3, #0]
 80084e2:	6838      	ldr	r0, [r7, #0]
 80084e4:	f00b f80e 	bl	8013504 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80084e8:	4b0b      	ldr	r3, [pc, #44]	; (8008518 <pbuf_free_ooseq+0x48>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	607b      	str	r3, [r7, #4]
 80084ee:	e00a      	b.n	8008506 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d003      	beq.n	8008500 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f002 f981 	bl	800a800 <tcp_free_ooseq>
      return;
 80084fe:	e005      	b.n	800850c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	607b      	str	r3, [r7, #4]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d1f1      	bne.n	80084f0 <pbuf_free_ooseq+0x20>
    }
  }
}
 800850c:	3708      	adds	r7, #8
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	2000ef50 	.word	0x2000ef50
 8008518:	2000ef58 	.word	0x2000ef58

0800851c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b082      	sub	sp, #8
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8008524:	f7ff ffd4 	bl	80084d0 <pbuf_free_ooseq>
}
 8008528:	bf00      	nop
 800852a:	3708      	adds	r7, #8
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b082      	sub	sp, #8
 8008534:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8008536:	f00a ffd7 	bl	80134e8 <sys_arch_protect>
 800853a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800853c:	4b0f      	ldr	r3, [pc, #60]	; (800857c <pbuf_pool_is_empty+0x4c>)
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8008542:	4b0e      	ldr	r3, [pc, #56]	; (800857c <pbuf_pool_is_empty+0x4c>)
 8008544:	2201      	movs	r2, #1
 8008546:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f00a ffdb 	bl	8013504 <sys_arch_unprotect>

  if (!queued) {
 800854e:	78fb      	ldrb	r3, [r7, #3]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d10f      	bne.n	8008574 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8008554:	2100      	movs	r1, #0
 8008556:	480a      	ldr	r0, [pc, #40]	; (8008580 <pbuf_pool_is_empty+0x50>)
 8008558:	f7fe fee0 	bl	800731c <tcpip_try_callback>
 800855c:	4603      	mov	r3, r0
 800855e:	2b00      	cmp	r3, #0
 8008560:	d008      	beq.n	8008574 <pbuf_pool_is_empty+0x44>
 8008562:	f00a ffc1 	bl	80134e8 <sys_arch_protect>
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	4b04      	ldr	r3, [pc, #16]	; (800857c <pbuf_pool_is_empty+0x4c>)
 800856a:	2200      	movs	r2, #0
 800856c:	701a      	strb	r2, [r3, #0]
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f00a ffc8 	bl	8013504 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8008574:	bf00      	nop
 8008576:	3708      	adds	r7, #8
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}
 800857c:	2000ef50 	.word	0x2000ef50
 8008580:	0800851d 	.word	0x0800851d

08008584 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8008584:	b480      	push	{r7}
 8008586:	b085      	sub	sp, #20
 8008588:	af00      	add	r7, sp, #0
 800858a:	60f8      	str	r0, [r7, #12]
 800858c:	60b9      	str	r1, [r7, #8]
 800858e:	4611      	mov	r1, r2
 8008590:	461a      	mov	r2, r3
 8008592:	460b      	mov	r3, r1
 8008594:	80fb      	strh	r3, [r7, #6]
 8008596:	4613      	mov	r3, r2
 8008598:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2200      	movs	r2, #0
 800859e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	68ba      	ldr	r2, [r7, #8]
 80085a4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	88fa      	ldrh	r2, [r7, #6]
 80085aa:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	88ba      	ldrh	r2, [r7, #4]
 80085b0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80085b2:	8b3b      	ldrh	r3, [r7, #24]
 80085b4:	b2da      	uxtb	r2, r3
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	7f3a      	ldrb	r2, [r7, #28]
 80085be:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2201      	movs	r2, #1
 80085c4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2200      	movs	r2, #0
 80085ca:	73da      	strb	r2, [r3, #15]
}
 80085cc:	bf00      	nop
 80085ce:	3714      	adds	r7, #20
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr

080085d8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b08c      	sub	sp, #48	; 0x30
 80085dc:	af02      	add	r7, sp, #8
 80085de:	4603      	mov	r3, r0
 80085e0:	71fb      	strb	r3, [r7, #7]
 80085e2:	460b      	mov	r3, r1
 80085e4:	80bb      	strh	r3, [r7, #4]
 80085e6:	4613      	mov	r3, r2
 80085e8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80085ea:	79fb      	ldrb	r3, [r7, #7]
 80085ec:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80085ee:	887b      	ldrh	r3, [r7, #2]
 80085f0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80085f4:	d07f      	beq.n	80086f6 <pbuf_alloc+0x11e>
 80085f6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80085fa:	f300 80c8 	bgt.w	800878e <pbuf_alloc+0x1b6>
 80085fe:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8008602:	d010      	beq.n	8008626 <pbuf_alloc+0x4e>
 8008604:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8008608:	f300 80c1 	bgt.w	800878e <pbuf_alloc+0x1b6>
 800860c:	2b01      	cmp	r3, #1
 800860e:	d002      	beq.n	8008616 <pbuf_alloc+0x3e>
 8008610:	2b41      	cmp	r3, #65	; 0x41
 8008612:	f040 80bc 	bne.w	800878e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8008616:	887a      	ldrh	r2, [r7, #2]
 8008618:	88bb      	ldrh	r3, [r7, #4]
 800861a:	4619      	mov	r1, r3
 800861c:	2000      	movs	r0, #0
 800861e:	f000 f8d1 	bl	80087c4 <pbuf_alloc_reference>
 8008622:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8008624:	e0bd      	b.n	80087a2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8008626:	2300      	movs	r3, #0
 8008628:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800862a:	2300      	movs	r3, #0
 800862c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800862e:	88bb      	ldrh	r3, [r7, #4]
 8008630:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8008632:	200c      	movs	r0, #12
 8008634:	f7ff fbb2 	bl	8007d9c <memp_malloc>
 8008638:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d109      	bne.n	8008654 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8008640:	f7ff ff76 	bl	8008530 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8008644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008646:	2b00      	cmp	r3, #0
 8008648:	d002      	beq.n	8008650 <pbuf_alloc+0x78>
            pbuf_free(p);
 800864a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800864c:	f000 faa8 	bl	8008ba0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8008650:	2300      	movs	r3, #0
 8008652:	e0a7      	b.n	80087a4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008654:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008656:	3303      	adds	r3, #3
 8008658:	b29b      	uxth	r3, r3
 800865a:	f023 0303 	bic.w	r3, r3, #3
 800865e:	b29b      	uxth	r3, r3
 8008660:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8008664:	b29b      	uxth	r3, r3
 8008666:	8b7a      	ldrh	r2, [r7, #26]
 8008668:	4293      	cmp	r3, r2
 800866a:	bf28      	it	cs
 800866c:	4613      	movcs	r3, r2
 800866e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8008670:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008672:	3310      	adds	r3, #16
 8008674:	693a      	ldr	r2, [r7, #16]
 8008676:	4413      	add	r3, r2
 8008678:	3303      	adds	r3, #3
 800867a:	f023 0303 	bic.w	r3, r3, #3
 800867e:	4618      	mov	r0, r3
 8008680:	89f9      	ldrh	r1, [r7, #14]
 8008682:	8b7a      	ldrh	r2, [r7, #26]
 8008684:	2300      	movs	r3, #0
 8008686:	9301      	str	r3, [sp, #4]
 8008688:	887b      	ldrh	r3, [r7, #2]
 800868a:	9300      	str	r3, [sp, #0]
 800868c:	460b      	mov	r3, r1
 800868e:	4601      	mov	r1, r0
 8008690:	6938      	ldr	r0, [r7, #16]
 8008692:	f7ff ff77 	bl	8008584 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	f003 0303 	and.w	r3, r3, #3
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d006      	beq.n	80086b0 <pbuf_alloc+0xd8>
 80086a2:	4b42      	ldr	r3, [pc, #264]	; (80087ac <pbuf_alloc+0x1d4>)
 80086a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80086a8:	4941      	ldr	r1, [pc, #260]	; (80087b0 <pbuf_alloc+0x1d8>)
 80086aa:	4842      	ldr	r0, [pc, #264]	; (80087b4 <pbuf_alloc+0x1dc>)
 80086ac:	f00b f8d6 	bl	801385c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80086b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80086b2:	3303      	adds	r3, #3
 80086b4:	f023 0303 	bic.w	r3, r3, #3
 80086b8:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80086bc:	d106      	bne.n	80086cc <pbuf_alloc+0xf4>
 80086be:	4b3b      	ldr	r3, [pc, #236]	; (80087ac <pbuf_alloc+0x1d4>)
 80086c0:	f44f 7281 	mov.w	r2, #258	; 0x102
 80086c4:	493c      	ldr	r1, [pc, #240]	; (80087b8 <pbuf_alloc+0x1e0>)
 80086c6:	483b      	ldr	r0, [pc, #236]	; (80087b4 <pbuf_alloc+0x1dc>)
 80086c8:	f00b f8c8 	bl	801385c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80086cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d102      	bne.n	80086d8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	627b      	str	r3, [r7, #36]	; 0x24
 80086d6:	e002      	b.n	80086de <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	693a      	ldr	r2, [r7, #16]
 80086dc:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80086e2:	8b7a      	ldrh	r2, [r7, #26]
 80086e4:	89fb      	ldrh	r3, [r7, #14]
 80086e6:	1ad3      	subs	r3, r2, r3
 80086e8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80086ea:	2300      	movs	r3, #0
 80086ec:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80086ee:	8b7b      	ldrh	r3, [r7, #26]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d19e      	bne.n	8008632 <pbuf_alloc+0x5a>
      break;
 80086f4:	e055      	b.n	80087a2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80086f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80086f8:	3303      	adds	r3, #3
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	f023 0303 	bic.w	r3, r3, #3
 8008700:	b29a      	uxth	r2, r3
 8008702:	88bb      	ldrh	r3, [r7, #4]
 8008704:	3303      	adds	r3, #3
 8008706:	b29b      	uxth	r3, r3
 8008708:	f023 0303 	bic.w	r3, r3, #3
 800870c:	b29b      	uxth	r3, r3
 800870e:	4413      	add	r3, r2
 8008710:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8008712:	8b3b      	ldrh	r3, [r7, #24]
 8008714:	3310      	adds	r3, #16
 8008716:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008718:	8b3a      	ldrh	r2, [r7, #24]
 800871a:	88bb      	ldrh	r3, [r7, #4]
 800871c:	3303      	adds	r3, #3
 800871e:	f023 0303 	bic.w	r3, r3, #3
 8008722:	429a      	cmp	r2, r3
 8008724:	d306      	bcc.n	8008734 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8008726:	8afa      	ldrh	r2, [r7, #22]
 8008728:	88bb      	ldrh	r3, [r7, #4]
 800872a:	3303      	adds	r3, #3
 800872c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008730:	429a      	cmp	r2, r3
 8008732:	d201      	bcs.n	8008738 <pbuf_alloc+0x160>
        return NULL;
 8008734:	2300      	movs	r3, #0
 8008736:	e035      	b.n	80087a4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8008738:	8afb      	ldrh	r3, [r7, #22]
 800873a:	4618      	mov	r0, r3
 800873c:	f7ff f9ac 	bl	8007a98 <mem_malloc>
 8008740:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8008742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008744:	2b00      	cmp	r3, #0
 8008746:	d101      	bne.n	800874c <pbuf_alloc+0x174>
        return NULL;
 8008748:	2300      	movs	r3, #0
 800874a:	e02b      	b.n	80087a4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800874c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800874e:	3310      	adds	r3, #16
 8008750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008752:	4413      	add	r3, r2
 8008754:	3303      	adds	r3, #3
 8008756:	f023 0303 	bic.w	r3, r3, #3
 800875a:	4618      	mov	r0, r3
 800875c:	88b9      	ldrh	r1, [r7, #4]
 800875e:	88ba      	ldrh	r2, [r7, #4]
 8008760:	2300      	movs	r3, #0
 8008762:	9301      	str	r3, [sp, #4]
 8008764:	887b      	ldrh	r3, [r7, #2]
 8008766:	9300      	str	r3, [sp, #0]
 8008768:	460b      	mov	r3, r1
 800876a:	4601      	mov	r1, r0
 800876c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800876e:	f7ff ff09 	bl	8008584 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8008772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	f003 0303 	and.w	r3, r3, #3
 800877a:	2b00      	cmp	r3, #0
 800877c:	d010      	beq.n	80087a0 <pbuf_alloc+0x1c8>
 800877e:	4b0b      	ldr	r3, [pc, #44]	; (80087ac <pbuf_alloc+0x1d4>)
 8008780:	f44f 7291 	mov.w	r2, #290	; 0x122
 8008784:	490d      	ldr	r1, [pc, #52]	; (80087bc <pbuf_alloc+0x1e4>)
 8008786:	480b      	ldr	r0, [pc, #44]	; (80087b4 <pbuf_alloc+0x1dc>)
 8008788:	f00b f868 	bl	801385c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800878c:	e008      	b.n	80087a0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800878e:	4b07      	ldr	r3, [pc, #28]	; (80087ac <pbuf_alloc+0x1d4>)
 8008790:	f240 1227 	movw	r2, #295	; 0x127
 8008794:	490a      	ldr	r1, [pc, #40]	; (80087c0 <pbuf_alloc+0x1e8>)
 8008796:	4807      	ldr	r0, [pc, #28]	; (80087b4 <pbuf_alloc+0x1dc>)
 8008798:	f00b f860 	bl	801385c <iprintf>
      return NULL;
 800879c:	2300      	movs	r3, #0
 800879e:	e001      	b.n	80087a4 <pbuf_alloc+0x1cc>
      break;
 80087a0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80087a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3728      	adds	r7, #40	; 0x28
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}
 80087ac:	08014e18 	.word	0x08014e18
 80087b0:	08014e48 	.word	0x08014e48
 80087b4:	08014e78 	.word	0x08014e78
 80087b8:	08014ea0 	.word	0x08014ea0
 80087bc:	08014ed4 	.word	0x08014ed4
 80087c0:	08014f00 	.word	0x08014f00

080087c4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b086      	sub	sp, #24
 80087c8:	af02      	add	r7, sp, #8
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	460b      	mov	r3, r1
 80087ce:	807b      	strh	r3, [r7, #2]
 80087d0:	4613      	mov	r3, r2
 80087d2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80087d4:	883b      	ldrh	r3, [r7, #0]
 80087d6:	2b41      	cmp	r3, #65	; 0x41
 80087d8:	d009      	beq.n	80087ee <pbuf_alloc_reference+0x2a>
 80087da:	883b      	ldrh	r3, [r7, #0]
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d006      	beq.n	80087ee <pbuf_alloc_reference+0x2a>
 80087e0:	4b0f      	ldr	r3, [pc, #60]	; (8008820 <pbuf_alloc_reference+0x5c>)
 80087e2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80087e6:	490f      	ldr	r1, [pc, #60]	; (8008824 <pbuf_alloc_reference+0x60>)
 80087e8:	480f      	ldr	r0, [pc, #60]	; (8008828 <pbuf_alloc_reference+0x64>)
 80087ea:	f00b f837 	bl	801385c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80087ee:	200b      	movs	r0, #11
 80087f0:	f7ff fad4 	bl	8007d9c <memp_malloc>
 80087f4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d101      	bne.n	8008800 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80087fc:	2300      	movs	r3, #0
 80087fe:	e00b      	b.n	8008818 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8008800:	8879      	ldrh	r1, [r7, #2]
 8008802:	887a      	ldrh	r2, [r7, #2]
 8008804:	2300      	movs	r3, #0
 8008806:	9301      	str	r3, [sp, #4]
 8008808:	883b      	ldrh	r3, [r7, #0]
 800880a:	9300      	str	r3, [sp, #0]
 800880c:	460b      	mov	r3, r1
 800880e:	6879      	ldr	r1, [r7, #4]
 8008810:	68f8      	ldr	r0, [r7, #12]
 8008812:	f7ff feb7 	bl	8008584 <pbuf_init_alloced_pbuf>
  return p;
 8008816:	68fb      	ldr	r3, [r7, #12]
}
 8008818:	4618      	mov	r0, r3
 800881a:	3710      	adds	r7, #16
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}
 8008820:	08014e18 	.word	0x08014e18
 8008824:	08014f1c 	.word	0x08014f1c
 8008828:	08014e78 	.word	0x08014e78

0800882c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b088      	sub	sp, #32
 8008830:	af02      	add	r7, sp, #8
 8008832:	607b      	str	r3, [r7, #4]
 8008834:	4603      	mov	r3, r0
 8008836:	73fb      	strb	r3, [r7, #15]
 8008838:	460b      	mov	r3, r1
 800883a:	81bb      	strh	r3, [r7, #12]
 800883c:	4613      	mov	r3, r2
 800883e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8008840:	7bfb      	ldrb	r3, [r7, #15]
 8008842:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8008844:	8a7b      	ldrh	r3, [r7, #18]
 8008846:	3303      	adds	r3, #3
 8008848:	f023 0203 	bic.w	r2, r3, #3
 800884c:	89bb      	ldrh	r3, [r7, #12]
 800884e:	441a      	add	r2, r3
 8008850:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008852:	429a      	cmp	r2, r3
 8008854:	d901      	bls.n	800885a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8008856:	2300      	movs	r3, #0
 8008858:	e018      	b.n	800888c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800885a:	6a3b      	ldr	r3, [r7, #32]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d007      	beq.n	8008870 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8008860:	8a7b      	ldrh	r3, [r7, #18]
 8008862:	3303      	adds	r3, #3
 8008864:	f023 0303 	bic.w	r3, r3, #3
 8008868:	6a3a      	ldr	r2, [r7, #32]
 800886a:	4413      	add	r3, r2
 800886c:	617b      	str	r3, [r7, #20]
 800886e:	e001      	b.n	8008874 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8008870:	2300      	movs	r3, #0
 8008872:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	89b9      	ldrh	r1, [r7, #12]
 8008878:	89ba      	ldrh	r2, [r7, #12]
 800887a:	2302      	movs	r3, #2
 800887c:	9301      	str	r3, [sp, #4]
 800887e:	897b      	ldrh	r3, [r7, #10]
 8008880:	9300      	str	r3, [sp, #0]
 8008882:	460b      	mov	r3, r1
 8008884:	6979      	ldr	r1, [r7, #20]
 8008886:	f7ff fe7d 	bl	8008584 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800888a:	687b      	ldr	r3, [r7, #4]
}
 800888c:	4618      	mov	r0, r3
 800888e:	3718      	adds	r7, #24
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	460b      	mov	r3, r1
 800889e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d106      	bne.n	80088b4 <pbuf_realloc+0x20>
 80088a6:	4b3a      	ldr	r3, [pc, #232]	; (8008990 <pbuf_realloc+0xfc>)
 80088a8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80088ac:	4939      	ldr	r1, [pc, #228]	; (8008994 <pbuf_realloc+0x100>)
 80088ae:	483a      	ldr	r0, [pc, #232]	; (8008998 <pbuf_realloc+0x104>)
 80088b0:	f00a ffd4 	bl	801385c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	891b      	ldrh	r3, [r3, #8]
 80088b8:	887a      	ldrh	r2, [r7, #2]
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d263      	bcs.n	8008986 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	891a      	ldrh	r2, [r3, #8]
 80088c2:	887b      	ldrh	r3, [r7, #2]
 80088c4:	1ad3      	subs	r3, r2, r3
 80088c6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80088c8:	887b      	ldrh	r3, [r7, #2]
 80088ca:	817b      	strh	r3, [r7, #10]
  q = p;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80088d0:	e018      	b.n	8008904 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	895b      	ldrh	r3, [r3, #10]
 80088d6:	897a      	ldrh	r2, [r7, #10]
 80088d8:	1ad3      	subs	r3, r2, r3
 80088da:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	891a      	ldrh	r2, [r3, #8]
 80088e0:	893b      	ldrh	r3, [r7, #8]
 80088e2:	1ad3      	subs	r3, r2, r3
 80088e4:	b29a      	uxth	r2, r3
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d106      	bne.n	8008904 <pbuf_realloc+0x70>
 80088f6:	4b26      	ldr	r3, [pc, #152]	; (8008990 <pbuf_realloc+0xfc>)
 80088f8:	f240 12af 	movw	r2, #431	; 0x1af
 80088fc:	4927      	ldr	r1, [pc, #156]	; (800899c <pbuf_realloc+0x108>)
 80088fe:	4826      	ldr	r0, [pc, #152]	; (8008998 <pbuf_realloc+0x104>)
 8008900:	f00a ffac 	bl	801385c <iprintf>
  while (rem_len > q->len) {
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	895b      	ldrh	r3, [r3, #10]
 8008908:	897a      	ldrh	r2, [r7, #10]
 800890a:	429a      	cmp	r2, r3
 800890c:	d8e1      	bhi.n	80088d2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	7b1b      	ldrb	r3, [r3, #12]
 8008912:	f003 030f 	and.w	r3, r3, #15
 8008916:	2b00      	cmp	r3, #0
 8008918:	d121      	bne.n	800895e <pbuf_realloc+0xca>
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	895b      	ldrh	r3, [r3, #10]
 800891e:	897a      	ldrh	r2, [r7, #10]
 8008920:	429a      	cmp	r2, r3
 8008922:	d01c      	beq.n	800895e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	7b5b      	ldrb	r3, [r3, #13]
 8008928:	f003 0302 	and.w	r3, r3, #2
 800892c:	2b00      	cmp	r3, #0
 800892e:	d116      	bne.n	800895e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	685a      	ldr	r2, [r3, #4]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	1ad3      	subs	r3, r2, r3
 8008938:	b29a      	uxth	r2, r3
 800893a:	897b      	ldrh	r3, [r7, #10]
 800893c:	4413      	add	r3, r2
 800893e:	b29b      	uxth	r3, r3
 8008940:	4619      	mov	r1, r3
 8008942:	68f8      	ldr	r0, [r7, #12]
 8008944:	f7fe ff9e 	bl	8007884 <mem_trim>
 8008948:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d106      	bne.n	800895e <pbuf_realloc+0xca>
 8008950:	4b0f      	ldr	r3, [pc, #60]	; (8008990 <pbuf_realloc+0xfc>)
 8008952:	f240 12bd 	movw	r2, #445	; 0x1bd
 8008956:	4912      	ldr	r1, [pc, #72]	; (80089a0 <pbuf_realloc+0x10c>)
 8008958:	480f      	ldr	r0, [pc, #60]	; (8008998 <pbuf_realloc+0x104>)
 800895a:	f00a ff7f 	bl	801385c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	897a      	ldrh	r2, [r7, #10]
 8008962:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	895a      	ldrh	r2, [r3, #10]
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d004      	beq.n	800897e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4618      	mov	r0, r3
 800897a:	f000 f911 	bl	8008ba0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2200      	movs	r2, #0
 8008982:	601a      	str	r2, [r3, #0]
 8008984:	e000      	b.n	8008988 <pbuf_realloc+0xf4>
    return;
 8008986:	bf00      	nop

}
 8008988:	3710      	adds	r7, #16
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
 800898e:	bf00      	nop
 8008990:	08014e18 	.word	0x08014e18
 8008994:	08014f30 	.word	0x08014f30
 8008998:	08014e78 	.word	0x08014e78
 800899c:	08014f48 	.word	0x08014f48
 80089a0:	08014f60 	.word	0x08014f60

080089a4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b086      	sub	sp, #24
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	60f8      	str	r0, [r7, #12]
 80089ac:	60b9      	str	r1, [r7, #8]
 80089ae:	4613      	mov	r3, r2
 80089b0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d106      	bne.n	80089c6 <pbuf_add_header_impl+0x22>
 80089b8:	4b2b      	ldr	r3, [pc, #172]	; (8008a68 <pbuf_add_header_impl+0xc4>)
 80089ba:	f240 12df 	movw	r2, #479	; 0x1df
 80089be:	492b      	ldr	r1, [pc, #172]	; (8008a6c <pbuf_add_header_impl+0xc8>)
 80089c0:	482b      	ldr	r0, [pc, #172]	; (8008a70 <pbuf_add_header_impl+0xcc>)
 80089c2:	f00a ff4b 	bl	801385c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d003      	beq.n	80089d4 <pbuf_add_header_impl+0x30>
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089d2:	d301      	bcc.n	80089d8 <pbuf_add_header_impl+0x34>
    return 1;
 80089d4:	2301      	movs	r3, #1
 80089d6:	e043      	b.n	8008a60 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d101      	bne.n	80089e2 <pbuf_add_header_impl+0x3e>
    return 0;
 80089de:	2300      	movs	r3, #0
 80089e0:	e03e      	b.n	8008a60 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	891a      	ldrh	r2, [r3, #8]
 80089ea:	8a7b      	ldrh	r3, [r7, #18]
 80089ec:	4413      	add	r3, r2
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	8a7a      	ldrh	r2, [r7, #18]
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d901      	bls.n	80089fa <pbuf_add_header_impl+0x56>
    return 1;
 80089f6:	2301      	movs	r3, #1
 80089f8:	e032      	b.n	8008a60 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	7b1b      	ldrb	r3, [r3, #12]
 80089fe:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8008a00:	8a3b      	ldrh	r3, [r7, #16]
 8008a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d00c      	beq.n	8008a24 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	685a      	ldr	r2, [r3, #4]
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	425b      	negs	r3, r3
 8008a12:	4413      	add	r3, r2
 8008a14:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	3310      	adds	r3, #16
 8008a1a:	697a      	ldr	r2, [r7, #20]
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d20d      	bcs.n	8008a3c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8008a20:	2301      	movs	r3, #1
 8008a22:	e01d      	b.n	8008a60 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8008a24:	79fb      	ldrb	r3, [r7, #7]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d006      	beq.n	8008a38 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	685a      	ldr	r2, [r3, #4]
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	425b      	negs	r3, r3
 8008a32:	4413      	add	r3, r2
 8008a34:	617b      	str	r3, [r7, #20]
 8008a36:	e001      	b.n	8008a3c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	e011      	b.n	8008a60 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	697a      	ldr	r2, [r7, #20]
 8008a40:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	895a      	ldrh	r2, [r3, #10]
 8008a46:	8a7b      	ldrh	r3, [r7, #18]
 8008a48:	4413      	add	r3, r2
 8008a4a:	b29a      	uxth	r2, r3
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	891a      	ldrh	r2, [r3, #8]
 8008a54:	8a7b      	ldrh	r3, [r7, #18]
 8008a56:	4413      	add	r3, r2
 8008a58:	b29a      	uxth	r2, r3
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	811a      	strh	r2, [r3, #8]


  return 0;
 8008a5e:	2300      	movs	r3, #0
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3718      	adds	r7, #24
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}
 8008a68:	08014e18 	.word	0x08014e18
 8008a6c:	08014f7c 	.word	0x08014f7c
 8008a70:	08014e78 	.word	0x08014e78

08008a74 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b082      	sub	sp, #8
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8008a7e:	2200      	movs	r2, #0
 8008a80:	6839      	ldr	r1, [r7, #0]
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f7ff ff8e 	bl	80089a4 <pbuf_add_header_impl>
 8008a88:	4603      	mov	r3, r0
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3708      	adds	r7, #8
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
	...

08008a94 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b084      	sub	sp, #16
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d106      	bne.n	8008ab2 <pbuf_remove_header+0x1e>
 8008aa4:	4b20      	ldr	r3, [pc, #128]	; (8008b28 <pbuf_remove_header+0x94>)
 8008aa6:	f240 224b 	movw	r2, #587	; 0x24b
 8008aaa:	4920      	ldr	r1, [pc, #128]	; (8008b2c <pbuf_remove_header+0x98>)
 8008aac:	4820      	ldr	r0, [pc, #128]	; (8008b30 <pbuf_remove_header+0x9c>)
 8008aae:	f00a fed5 	bl	801385c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d003      	beq.n	8008ac0 <pbuf_remove_header+0x2c>
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008abe:	d301      	bcc.n	8008ac4 <pbuf_remove_header+0x30>
    return 1;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	e02c      	b.n	8008b1e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d101      	bne.n	8008ace <pbuf_remove_header+0x3a>
    return 0;
 8008aca:	2300      	movs	r3, #0
 8008acc:	e027      	b.n	8008b1e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	895b      	ldrh	r3, [r3, #10]
 8008ad6:	89fa      	ldrh	r2, [r7, #14]
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d908      	bls.n	8008aee <pbuf_remove_header+0x5a>
 8008adc:	4b12      	ldr	r3, [pc, #72]	; (8008b28 <pbuf_remove_header+0x94>)
 8008ade:	f240 2255 	movw	r2, #597	; 0x255
 8008ae2:	4914      	ldr	r1, [pc, #80]	; (8008b34 <pbuf_remove_header+0xa0>)
 8008ae4:	4812      	ldr	r0, [pc, #72]	; (8008b30 <pbuf_remove_header+0x9c>)
 8008ae6:	f00a feb9 	bl	801385c <iprintf>
 8008aea:	2301      	movs	r3, #1
 8008aec:	e017      	b.n	8008b1e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	685a      	ldr	r2, [r3, #4]
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	441a      	add	r2, r3
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	895a      	ldrh	r2, [r3, #10]
 8008b04:	89fb      	ldrh	r3, [r7, #14]
 8008b06:	1ad3      	subs	r3, r2, r3
 8008b08:	b29a      	uxth	r2, r3
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	891a      	ldrh	r2, [r3, #8]
 8008b12:	89fb      	ldrh	r3, [r7, #14]
 8008b14:	1ad3      	subs	r3, r2, r3
 8008b16:	b29a      	uxth	r2, r3
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8008b1c:	2300      	movs	r3, #0
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3710      	adds	r7, #16
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	08014e18 	.word	0x08014e18
 8008b2c:	08014f7c 	.word	0x08014f7c
 8008b30:	08014e78 	.word	0x08014e78
 8008b34:	08014f88 	.word	0x08014f88

08008b38 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b082      	sub	sp, #8
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	460b      	mov	r3, r1
 8008b42:	807b      	strh	r3, [r7, #2]
 8008b44:	4613      	mov	r3, r2
 8008b46:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8008b48:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	da08      	bge.n	8008b62 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8008b50:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008b54:	425b      	negs	r3, r3
 8008b56:	4619      	mov	r1, r3
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f7ff ff9b 	bl	8008a94 <pbuf_remove_header>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	e007      	b.n	8008b72 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8008b62:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008b66:	787a      	ldrb	r2, [r7, #1]
 8008b68:	4619      	mov	r1, r3
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f7ff ff1a 	bl	80089a4 <pbuf_add_header_impl>
 8008b70:	4603      	mov	r3, r0
  }
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3708      	adds	r7, #8
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}

08008b7a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8008b7a:	b580      	push	{r7, lr}
 8008b7c:	b082      	sub	sp, #8
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
 8008b82:	460b      	mov	r3, r1
 8008b84:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8008b86:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f7ff ffd2 	bl	8008b38 <pbuf_header_impl>
 8008b94:	4603      	mov	r3, r0
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3708      	adds	r7, #8
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
	...

08008ba0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b088      	sub	sp, #32
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d10b      	bne.n	8008bc6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d106      	bne.n	8008bc2 <pbuf_free+0x22>
 8008bb4:	4b3b      	ldr	r3, [pc, #236]	; (8008ca4 <pbuf_free+0x104>)
 8008bb6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8008bba:	493b      	ldr	r1, [pc, #236]	; (8008ca8 <pbuf_free+0x108>)
 8008bbc:	483b      	ldr	r0, [pc, #236]	; (8008cac <pbuf_free+0x10c>)
 8008bbe:	f00a fe4d 	bl	801385c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	e069      	b.n	8008c9a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8008bca:	e062      	b.n	8008c92 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8008bcc:	f00a fc8c 	bl	80134e8 <sys_arch_protect>
 8008bd0:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	7b9b      	ldrb	r3, [r3, #14]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d106      	bne.n	8008be8 <pbuf_free+0x48>
 8008bda:	4b32      	ldr	r3, [pc, #200]	; (8008ca4 <pbuf_free+0x104>)
 8008bdc:	f240 22f1 	movw	r2, #753	; 0x2f1
 8008be0:	4933      	ldr	r1, [pc, #204]	; (8008cb0 <pbuf_free+0x110>)
 8008be2:	4832      	ldr	r0, [pc, #200]	; (8008cac <pbuf_free+0x10c>)
 8008be4:	f00a fe3a 	bl	801385c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	7b9b      	ldrb	r3, [r3, #14]
 8008bec:	3b01      	subs	r3, #1
 8008bee:	b2da      	uxtb	r2, r3
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	739a      	strb	r2, [r3, #14]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	7b9b      	ldrb	r3, [r3, #14]
 8008bf8:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8008bfa:	69b8      	ldr	r0, [r7, #24]
 8008bfc:	f00a fc82 	bl	8013504 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8008c00:	7dfb      	ldrb	r3, [r7, #23]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d143      	bne.n	8008c8e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	7b1b      	ldrb	r3, [r3, #12]
 8008c10:	f003 030f 	and.w	r3, r3, #15
 8008c14:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	7b5b      	ldrb	r3, [r3, #13]
 8008c1a:	f003 0302 	and.w	r3, r3, #2
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d011      	beq.n	8008c46 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	691b      	ldr	r3, [r3, #16]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d106      	bne.n	8008c3c <pbuf_free+0x9c>
 8008c2e:	4b1d      	ldr	r3, [pc, #116]	; (8008ca4 <pbuf_free+0x104>)
 8008c30:	f240 22ff 	movw	r2, #767	; 0x2ff
 8008c34:	491f      	ldr	r1, [pc, #124]	; (8008cb4 <pbuf_free+0x114>)
 8008c36:	481d      	ldr	r0, [pc, #116]	; (8008cac <pbuf_free+0x10c>)
 8008c38:	f00a fe10 	bl	801385c <iprintf>
        pc->custom_free_function(p);
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	691b      	ldr	r3, [r3, #16]
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	4798      	blx	r3
 8008c44:	e01d      	b.n	8008c82 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8008c46:	7bfb      	ldrb	r3, [r7, #15]
 8008c48:	2b02      	cmp	r3, #2
 8008c4a:	d104      	bne.n	8008c56 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8008c4c:	6879      	ldr	r1, [r7, #4]
 8008c4e:	200c      	movs	r0, #12
 8008c50:	f7ff f8f6 	bl	8007e40 <memp_free>
 8008c54:	e015      	b.n	8008c82 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8008c56:	7bfb      	ldrb	r3, [r7, #15]
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d104      	bne.n	8008c66 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8008c5c:	6879      	ldr	r1, [r7, #4]
 8008c5e:	200b      	movs	r0, #11
 8008c60:	f7ff f8ee 	bl	8007e40 <memp_free>
 8008c64:	e00d      	b.n	8008c82 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8008c66:	7bfb      	ldrb	r3, [r7, #15]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d103      	bne.n	8008c74 <pbuf_free+0xd4>
          mem_free(p);
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f7fe fd79 	bl	8007764 <mem_free>
 8008c72:	e006      	b.n	8008c82 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8008c74:	4b0b      	ldr	r3, [pc, #44]	; (8008ca4 <pbuf_free+0x104>)
 8008c76:	f240 320f 	movw	r2, #783	; 0x30f
 8008c7a:	490f      	ldr	r1, [pc, #60]	; (8008cb8 <pbuf_free+0x118>)
 8008c7c:	480b      	ldr	r0, [pc, #44]	; (8008cac <pbuf_free+0x10c>)
 8008c7e:	f00a fded 	bl	801385c <iprintf>
        }
      }
      count++;
 8008c82:	7ffb      	ldrb	r3, [r7, #31]
 8008c84:	3301      	adds	r3, #1
 8008c86:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	607b      	str	r3, [r7, #4]
 8008c8c:	e001      	b.n	8008c92 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d199      	bne.n	8008bcc <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8008c98:	7ffb      	ldrb	r3, [r7, #31]
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3720      	adds	r7, #32
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	08014e18 	.word	0x08014e18
 8008ca8:	08014f7c 	.word	0x08014f7c
 8008cac:	08014e78 	.word	0x08014e78
 8008cb0:	08014fa8 	.word	0x08014fa8
 8008cb4:	08014fc0 	.word	0x08014fc0
 8008cb8:	08014fe4 	.word	0x08014fe4

08008cbc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b085      	sub	sp, #20
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8008cc8:	e005      	b.n	8008cd6 <pbuf_clen+0x1a>
    ++len;
 8008cca:	89fb      	ldrh	r3, [r7, #14]
 8008ccc:	3301      	adds	r3, #1
 8008cce:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d1f6      	bne.n	8008cca <pbuf_clen+0xe>
  }
  return len;
 8008cdc:	89fb      	ldrh	r3, [r7, #14]
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3714      	adds	r7, #20
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr
	...

08008cec <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d016      	beq.n	8008d28 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8008cfa:	f00a fbf5 	bl	80134e8 <sys_arch_protect>
 8008cfe:	60f8      	str	r0, [r7, #12]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	7b9b      	ldrb	r3, [r3, #14]
 8008d04:	3301      	adds	r3, #1
 8008d06:	b2da      	uxtb	r2, r3
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	739a      	strb	r2, [r3, #14]
 8008d0c:	68f8      	ldr	r0, [r7, #12]
 8008d0e:	f00a fbf9 	bl	8013504 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	7b9b      	ldrb	r3, [r3, #14]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d106      	bne.n	8008d28 <pbuf_ref+0x3c>
 8008d1a:	4b05      	ldr	r3, [pc, #20]	; (8008d30 <pbuf_ref+0x44>)
 8008d1c:	f240 3242 	movw	r2, #834	; 0x342
 8008d20:	4904      	ldr	r1, [pc, #16]	; (8008d34 <pbuf_ref+0x48>)
 8008d22:	4805      	ldr	r0, [pc, #20]	; (8008d38 <pbuf_ref+0x4c>)
 8008d24:	f00a fd9a 	bl	801385c <iprintf>
  }
}
 8008d28:	bf00      	nop
 8008d2a:	3710      	adds	r7, #16
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}
 8008d30:	08014e18 	.word	0x08014e18
 8008d34:	08014ff8 	.word	0x08014ff8
 8008d38:	08014e78 	.word	0x08014e78

08008d3c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b084      	sub	sp, #16
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d002      	beq.n	8008d52 <pbuf_cat+0x16>
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d107      	bne.n	8008d62 <pbuf_cat+0x26>
 8008d52:	4b20      	ldr	r3, [pc, #128]	; (8008dd4 <pbuf_cat+0x98>)
 8008d54:	f240 3259 	movw	r2, #857	; 0x359
 8008d58:	491f      	ldr	r1, [pc, #124]	; (8008dd8 <pbuf_cat+0x9c>)
 8008d5a:	4820      	ldr	r0, [pc, #128]	; (8008ddc <pbuf_cat+0xa0>)
 8008d5c:	f00a fd7e 	bl	801385c <iprintf>
 8008d60:	e034      	b.n	8008dcc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	60fb      	str	r3, [r7, #12]
 8008d66:	e00a      	b.n	8008d7e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	891a      	ldrh	r2, [r3, #8]
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	891b      	ldrh	r3, [r3, #8]
 8008d70:	4413      	add	r3, r2
 8008d72:	b29a      	uxth	r2, r3
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	60fb      	str	r3, [r7, #12]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d1f0      	bne.n	8008d68 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	891a      	ldrh	r2, [r3, #8]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	895b      	ldrh	r3, [r3, #10]
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d006      	beq.n	8008da0 <pbuf_cat+0x64>
 8008d92:	4b10      	ldr	r3, [pc, #64]	; (8008dd4 <pbuf_cat+0x98>)
 8008d94:	f240 3262 	movw	r2, #866	; 0x362
 8008d98:	4911      	ldr	r1, [pc, #68]	; (8008de0 <pbuf_cat+0xa4>)
 8008d9a:	4810      	ldr	r0, [pc, #64]	; (8008ddc <pbuf_cat+0xa0>)
 8008d9c:	f00a fd5e 	bl	801385c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d006      	beq.n	8008db6 <pbuf_cat+0x7a>
 8008da8:	4b0a      	ldr	r3, [pc, #40]	; (8008dd4 <pbuf_cat+0x98>)
 8008daa:	f240 3263 	movw	r2, #867	; 0x363
 8008dae:	490d      	ldr	r1, [pc, #52]	; (8008de4 <pbuf_cat+0xa8>)
 8008db0:	480a      	ldr	r0, [pc, #40]	; (8008ddc <pbuf_cat+0xa0>)
 8008db2:	f00a fd53 	bl	801385c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	891a      	ldrh	r2, [r3, #8]
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	891b      	ldrh	r3, [r3, #8]
 8008dbe:	4413      	add	r3, r2
 8008dc0:	b29a      	uxth	r2, r3
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	683a      	ldr	r2, [r7, #0]
 8008dca:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	08014e18 	.word	0x08014e18
 8008dd8:	0801500c 	.word	0x0801500c
 8008ddc:	08014e78 	.word	0x08014e78
 8008de0:	08015044 	.word	0x08015044
 8008de4:	08015074 	.word	0x08015074

08008de8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8008df2:	6839      	ldr	r1, [r7, #0]
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f7ff ffa1 	bl	8008d3c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8008dfa:	6838      	ldr	r0, [r7, #0]
 8008dfc:	f7ff ff76 	bl	8008cec <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8008e00:	bf00      	nop
 8008e02:	3708      	adds	r7, #8
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b086      	sub	sp, #24
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8008e12:	2300      	movs	r3, #0
 8008e14:	617b      	str	r3, [r7, #20]
 8008e16:	2300      	movs	r3, #0
 8008e18:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d008      	beq.n	8008e32 <pbuf_copy+0x2a>
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d005      	beq.n	8008e32 <pbuf_copy+0x2a>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	891a      	ldrh	r2, [r3, #8]
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	891b      	ldrh	r3, [r3, #8]
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d209      	bcs.n	8008e46 <pbuf_copy+0x3e>
 8008e32:	4b57      	ldr	r3, [pc, #348]	; (8008f90 <pbuf_copy+0x188>)
 8008e34:	f240 32c9 	movw	r2, #969	; 0x3c9
 8008e38:	4956      	ldr	r1, [pc, #344]	; (8008f94 <pbuf_copy+0x18c>)
 8008e3a:	4857      	ldr	r0, [pc, #348]	; (8008f98 <pbuf_copy+0x190>)
 8008e3c:	f00a fd0e 	bl	801385c <iprintf>
 8008e40:	f06f 030f 	mvn.w	r3, #15
 8008e44:	e09f      	b.n	8008f86 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	895b      	ldrh	r3, [r3, #10]
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	1ad2      	subs	r2, r2, r3
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	895b      	ldrh	r3, [r3, #10]
 8008e54:	4619      	mov	r1, r3
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	1acb      	subs	r3, r1, r3
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d306      	bcc.n	8008e6c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	895b      	ldrh	r3, [r3, #10]
 8008e62:	461a      	mov	r2, r3
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	1ad3      	subs	r3, r2, r3
 8008e68:	60fb      	str	r3, [r7, #12]
 8008e6a:	e005      	b.n	8008e78 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	895b      	ldrh	r3, [r3, #10]
 8008e70:	461a      	mov	r2, r3
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	1ad3      	subs	r3, r2, r3
 8008e76:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	685a      	ldr	r2, [r3, #4]
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	18d0      	adds	r0, r2, r3
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	685a      	ldr	r2, [r3, #4]
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	4413      	add	r3, r2
 8008e88:	68fa      	ldr	r2, [r7, #12]
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	f00a fc75 	bl	801377a <memcpy>
    offset_to += len;
 8008e90:	697a      	ldr	r2, [r7, #20]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	4413      	add	r3, r2
 8008e96:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8008e98:	693a      	ldr	r2, [r7, #16]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	4413      	add	r3, r2
 8008e9e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	895b      	ldrh	r3, [r3, #10]
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d906      	bls.n	8008eba <pbuf_copy+0xb2>
 8008eac:	4b38      	ldr	r3, [pc, #224]	; (8008f90 <pbuf_copy+0x188>)
 8008eae:	f240 32d9 	movw	r2, #985	; 0x3d9
 8008eb2:	493a      	ldr	r1, [pc, #232]	; (8008f9c <pbuf_copy+0x194>)
 8008eb4:	4838      	ldr	r0, [pc, #224]	; (8008f98 <pbuf_copy+0x190>)
 8008eb6:	f00a fcd1 	bl	801385c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	895b      	ldrh	r3, [r3, #10]
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d906      	bls.n	8008ed4 <pbuf_copy+0xcc>
 8008ec6:	4b32      	ldr	r3, [pc, #200]	; (8008f90 <pbuf_copy+0x188>)
 8008ec8:	f240 32da 	movw	r2, #986	; 0x3da
 8008ecc:	4934      	ldr	r1, [pc, #208]	; (8008fa0 <pbuf_copy+0x198>)
 8008ece:	4832      	ldr	r0, [pc, #200]	; (8008f98 <pbuf_copy+0x190>)
 8008ed0:	f00a fcc4 	bl	801385c <iprintf>
    if (offset_from >= p_from->len) {
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	895b      	ldrh	r3, [r3, #10]
 8008ed8:	461a      	mov	r2, r3
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d304      	bcc.n	8008eea <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	895b      	ldrh	r3, [r3, #10]
 8008eee:	461a      	mov	r2, r3
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d114      	bne.n	8008f20 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d10c      	bne.n	8008f20 <pbuf_copy+0x118>
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d009      	beq.n	8008f20 <pbuf_copy+0x118>
 8008f0c:	4b20      	ldr	r3, [pc, #128]	; (8008f90 <pbuf_copy+0x188>)
 8008f0e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8008f12:	4924      	ldr	r1, [pc, #144]	; (8008fa4 <pbuf_copy+0x19c>)
 8008f14:	4820      	ldr	r0, [pc, #128]	; (8008f98 <pbuf_copy+0x190>)
 8008f16:	f00a fca1 	bl	801385c <iprintf>
 8008f1a:	f06f 030f 	mvn.w	r3, #15
 8008f1e:	e032      	b.n	8008f86 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d013      	beq.n	8008f4e <pbuf_copy+0x146>
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	895a      	ldrh	r2, [r3, #10]
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	891b      	ldrh	r3, [r3, #8]
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d10d      	bne.n	8008f4e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d009      	beq.n	8008f4e <pbuf_copy+0x146>
 8008f3a:	4b15      	ldr	r3, [pc, #84]	; (8008f90 <pbuf_copy+0x188>)
 8008f3c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8008f40:	4919      	ldr	r1, [pc, #100]	; (8008fa8 <pbuf_copy+0x1a0>)
 8008f42:	4815      	ldr	r0, [pc, #84]	; (8008f98 <pbuf_copy+0x190>)
 8008f44:	f00a fc8a 	bl	801385c <iprintf>
 8008f48:	f06f 0305 	mvn.w	r3, #5
 8008f4c:	e01b      	b.n	8008f86 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d013      	beq.n	8008f7c <pbuf_copy+0x174>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	895a      	ldrh	r2, [r3, #10]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	891b      	ldrh	r3, [r3, #8]
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d10d      	bne.n	8008f7c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d009      	beq.n	8008f7c <pbuf_copy+0x174>
 8008f68:	4b09      	ldr	r3, [pc, #36]	; (8008f90 <pbuf_copy+0x188>)
 8008f6a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8008f6e:	490e      	ldr	r1, [pc, #56]	; (8008fa8 <pbuf_copy+0x1a0>)
 8008f70:	4809      	ldr	r0, [pc, #36]	; (8008f98 <pbuf_copy+0x190>)
 8008f72:	f00a fc73 	bl	801385c <iprintf>
 8008f76:	f06f 0305 	mvn.w	r3, #5
 8008f7a:	e004      	b.n	8008f86 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	f47f af61 	bne.w	8008e46 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8008f84:	2300      	movs	r3, #0
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3718      	adds	r7, #24
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	08014e18 	.word	0x08014e18
 8008f94:	080150c0 	.word	0x080150c0
 8008f98:	08014e78 	.word	0x08014e78
 8008f9c:	080150f0 	.word	0x080150f0
 8008fa0:	08015108 	.word	0x08015108
 8008fa4:	08015124 	.word	0x08015124
 8008fa8:	08015134 	.word	0x08015134

08008fac <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b088      	sub	sp, #32
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	60f8      	str	r0, [r7, #12]
 8008fb4:	60b9      	str	r1, [r7, #8]
 8008fb6:	4611      	mov	r1, r2
 8008fb8:	461a      	mov	r2, r3
 8008fba:	460b      	mov	r3, r1
 8008fbc:	80fb      	strh	r3, [r7, #6]
 8008fbe:	4613      	mov	r3, r2
 8008fc0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d108      	bne.n	8008fe2 <pbuf_copy_partial+0x36>
 8008fd0:	4b2b      	ldr	r3, [pc, #172]	; (8009080 <pbuf_copy_partial+0xd4>)
 8008fd2:	f240 420a 	movw	r2, #1034	; 0x40a
 8008fd6:	492b      	ldr	r1, [pc, #172]	; (8009084 <pbuf_copy_partial+0xd8>)
 8008fd8:	482b      	ldr	r0, [pc, #172]	; (8009088 <pbuf_copy_partial+0xdc>)
 8008fda:	f00a fc3f 	bl	801385c <iprintf>
 8008fde:	2300      	movs	r3, #0
 8008fe0:	e04a      	b.n	8009078 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d108      	bne.n	8008ffa <pbuf_copy_partial+0x4e>
 8008fe8:	4b25      	ldr	r3, [pc, #148]	; (8009080 <pbuf_copy_partial+0xd4>)
 8008fea:	f240 420b 	movw	r2, #1035	; 0x40b
 8008fee:	4927      	ldr	r1, [pc, #156]	; (800908c <pbuf_copy_partial+0xe0>)
 8008ff0:	4825      	ldr	r0, [pc, #148]	; (8009088 <pbuf_copy_partial+0xdc>)
 8008ff2:	f00a fc33 	bl	801385c <iprintf>
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	e03e      	b.n	8009078 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	61fb      	str	r3, [r7, #28]
 8008ffe:	e034      	b.n	800906a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8009000:	88bb      	ldrh	r3, [r7, #4]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d00a      	beq.n	800901c <pbuf_copy_partial+0x70>
 8009006:	69fb      	ldr	r3, [r7, #28]
 8009008:	895b      	ldrh	r3, [r3, #10]
 800900a:	88ba      	ldrh	r2, [r7, #4]
 800900c:	429a      	cmp	r2, r3
 800900e:	d305      	bcc.n	800901c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	895b      	ldrh	r3, [r3, #10]
 8009014:	88ba      	ldrh	r2, [r7, #4]
 8009016:	1ad3      	subs	r3, r2, r3
 8009018:	80bb      	strh	r3, [r7, #4]
 800901a:	e023      	b.n	8009064 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	895a      	ldrh	r2, [r3, #10]
 8009020:	88bb      	ldrh	r3, [r7, #4]
 8009022:	1ad3      	subs	r3, r2, r3
 8009024:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8009026:	8b3a      	ldrh	r2, [r7, #24]
 8009028:	88fb      	ldrh	r3, [r7, #6]
 800902a:	429a      	cmp	r2, r3
 800902c:	d901      	bls.n	8009032 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800902e:	88fb      	ldrh	r3, [r7, #6]
 8009030:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8009032:	8b7b      	ldrh	r3, [r7, #26]
 8009034:	68ba      	ldr	r2, [r7, #8]
 8009036:	18d0      	adds	r0, r2, r3
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	685a      	ldr	r2, [r3, #4]
 800903c:	88bb      	ldrh	r3, [r7, #4]
 800903e:	4413      	add	r3, r2
 8009040:	8b3a      	ldrh	r2, [r7, #24]
 8009042:	4619      	mov	r1, r3
 8009044:	f00a fb99 	bl	801377a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8009048:	8afa      	ldrh	r2, [r7, #22]
 800904a:	8b3b      	ldrh	r3, [r7, #24]
 800904c:	4413      	add	r3, r2
 800904e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8009050:	8b7a      	ldrh	r2, [r7, #26]
 8009052:	8b3b      	ldrh	r3, [r7, #24]
 8009054:	4413      	add	r3, r2
 8009056:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8009058:	88fa      	ldrh	r2, [r7, #6]
 800905a:	8b3b      	ldrh	r3, [r7, #24]
 800905c:	1ad3      	subs	r3, r2, r3
 800905e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8009060:	2300      	movs	r3, #0
 8009062:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	61fb      	str	r3, [r7, #28]
 800906a:	88fb      	ldrh	r3, [r7, #6]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d002      	beq.n	8009076 <pbuf_copy_partial+0xca>
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d1c4      	bne.n	8009000 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8009076:	8afb      	ldrh	r3, [r7, #22]
}
 8009078:	4618      	mov	r0, r3
 800907a:	3720      	adds	r7, #32
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}
 8009080:	08014e18 	.word	0x08014e18
 8009084:	08015160 	.word	0x08015160
 8009088:	08014e78 	.word	0x08014e78
 800908c:	08015180 	.word	0x08015180

08009090 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b084      	sub	sp, #16
 8009094:	af00      	add	r7, sp, #0
 8009096:	4603      	mov	r3, r0
 8009098:	603a      	str	r2, [r7, #0]
 800909a:	71fb      	strb	r3, [r7, #7]
 800909c:	460b      	mov	r3, r1
 800909e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	8919      	ldrh	r1, [r3, #8]
 80090a4:	88ba      	ldrh	r2, [r7, #4]
 80090a6:	79fb      	ldrb	r3, [r7, #7]
 80090a8:	4618      	mov	r0, r3
 80090aa:	f7ff fa95 	bl	80085d8 <pbuf_alloc>
 80090ae:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d101      	bne.n	80090ba <pbuf_clone+0x2a>
    return NULL;
 80090b6:	2300      	movs	r3, #0
 80090b8:	e011      	b.n	80090de <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80090ba:	6839      	ldr	r1, [r7, #0]
 80090bc:	68f8      	ldr	r0, [r7, #12]
 80090be:	f7ff fea3 	bl	8008e08 <pbuf_copy>
 80090c2:	4603      	mov	r3, r0
 80090c4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80090c6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d006      	beq.n	80090dc <pbuf_clone+0x4c>
 80090ce:	4b06      	ldr	r3, [pc, #24]	; (80090e8 <pbuf_clone+0x58>)
 80090d0:	f240 5224 	movw	r2, #1316	; 0x524
 80090d4:	4905      	ldr	r1, [pc, #20]	; (80090ec <pbuf_clone+0x5c>)
 80090d6:	4806      	ldr	r0, [pc, #24]	; (80090f0 <pbuf_clone+0x60>)
 80090d8:	f00a fbc0 	bl	801385c <iprintf>
  return q;
 80090dc:	68fb      	ldr	r3, [r7, #12]
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	bf00      	nop
 80090e8:	08014e18 	.word	0x08014e18
 80090ec:	0801528c 	.word	0x0801528c
 80090f0:	08014e78 	.word	0x08014e78

080090f4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80090f8:	f00a fbc8 	bl	801388c <rand>
 80090fc:	4603      	mov	r3, r0
 80090fe:	b29b      	uxth	r3, r3
 8009100:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009104:	b29b      	uxth	r3, r3
 8009106:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800910a:	b29a      	uxth	r2, r3
 800910c:	4b01      	ldr	r3, [pc, #4]	; (8009114 <tcp_init+0x20>)
 800910e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8009110:	bf00      	nop
 8009112:	bd80      	pop	{r7, pc}
 8009114:	20000010 	.word	0x20000010

08009118 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	7d1b      	ldrb	r3, [r3, #20]
 8009124:	2b01      	cmp	r3, #1
 8009126:	d105      	bne.n	8009134 <tcp_free+0x1c>
 8009128:	4b06      	ldr	r3, [pc, #24]	; (8009144 <tcp_free+0x2c>)
 800912a:	22d4      	movs	r2, #212	; 0xd4
 800912c:	4906      	ldr	r1, [pc, #24]	; (8009148 <tcp_free+0x30>)
 800912e:	4807      	ldr	r0, [pc, #28]	; (800914c <tcp_free+0x34>)
 8009130:	f00a fb94 	bl	801385c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8009134:	6879      	ldr	r1, [r7, #4]
 8009136:	2001      	movs	r0, #1
 8009138:	f7fe fe82 	bl	8007e40 <memp_free>
}
 800913c:	bf00      	nop
 800913e:	3708      	adds	r7, #8
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}
 8009144:	08015318 	.word	0x08015318
 8009148:	08015348 	.word	0x08015348
 800914c:	0801535c 	.word	0x0801535c

08009150 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	7d1b      	ldrb	r3, [r3, #20]
 800915c:	2b01      	cmp	r3, #1
 800915e:	d105      	bne.n	800916c <tcp_free_listen+0x1c>
 8009160:	4b06      	ldr	r3, [pc, #24]	; (800917c <tcp_free_listen+0x2c>)
 8009162:	22df      	movs	r2, #223	; 0xdf
 8009164:	4906      	ldr	r1, [pc, #24]	; (8009180 <tcp_free_listen+0x30>)
 8009166:	4807      	ldr	r0, [pc, #28]	; (8009184 <tcp_free_listen+0x34>)
 8009168:	f00a fb78 	bl	801385c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800916c:	6879      	ldr	r1, [r7, #4]
 800916e:	2002      	movs	r0, #2
 8009170:	f7fe fe66 	bl	8007e40 <memp_free>
}
 8009174:	bf00      	nop
 8009176:	3708      	adds	r7, #8
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}
 800917c:	08015318 	.word	0x08015318
 8009180:	08015384 	.word	0x08015384
 8009184:	0801535c 	.word	0x0801535c

08009188 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800918c:	f000 fea2 	bl	8009ed4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8009190:	4b07      	ldr	r3, [pc, #28]	; (80091b0 <tcp_tmr+0x28>)
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	3301      	adds	r3, #1
 8009196:	b2da      	uxtb	r2, r3
 8009198:	4b05      	ldr	r3, [pc, #20]	; (80091b0 <tcp_tmr+0x28>)
 800919a:	701a      	strb	r2, [r3, #0]
 800919c:	4b04      	ldr	r3, [pc, #16]	; (80091b0 <tcp_tmr+0x28>)
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	f003 0301 	and.w	r3, r3, #1
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d001      	beq.n	80091ac <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80091a8:	f000 fb54 	bl	8009854 <tcp_slowtmr>
  }
}
 80091ac:	bf00      	nop
 80091ae:	bd80      	pop	{r7, pc}
 80091b0:	20008505 	.word	0x20008505

080091b4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b084      	sub	sp, #16
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d105      	bne.n	80091d0 <tcp_remove_listener+0x1c>
 80091c4:	4b0d      	ldr	r3, [pc, #52]	; (80091fc <tcp_remove_listener+0x48>)
 80091c6:	22ff      	movs	r2, #255	; 0xff
 80091c8:	490d      	ldr	r1, [pc, #52]	; (8009200 <tcp_remove_listener+0x4c>)
 80091ca:	480e      	ldr	r0, [pc, #56]	; (8009204 <tcp_remove_listener+0x50>)
 80091cc:	f00a fb46 	bl	801385c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	60fb      	str	r3, [r7, #12]
 80091d4:	e00a      	b.n	80091ec <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091da:	683a      	ldr	r2, [r7, #0]
 80091dc:	429a      	cmp	r2, r3
 80091de:	d102      	bne.n	80091e6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2200      	movs	r2, #0
 80091e4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	68db      	ldr	r3, [r3, #12]
 80091ea:	60fb      	str	r3, [r7, #12]
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d1f1      	bne.n	80091d6 <tcp_remove_listener+0x22>
    }
  }
}
 80091f2:	bf00      	nop
 80091f4:	bf00      	nop
 80091f6:	3710      	adds	r7, #16
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}
 80091fc:	08015318 	.word	0x08015318
 8009200:	080153a0 	.word	0x080153a0
 8009204:	0801535c 	.word	0x0801535c

08009208 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b084      	sub	sp, #16
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d106      	bne.n	8009224 <tcp_listen_closed+0x1c>
 8009216:	4b14      	ldr	r3, [pc, #80]	; (8009268 <tcp_listen_closed+0x60>)
 8009218:	f240 1211 	movw	r2, #273	; 0x111
 800921c:	4913      	ldr	r1, [pc, #76]	; (800926c <tcp_listen_closed+0x64>)
 800921e:	4814      	ldr	r0, [pc, #80]	; (8009270 <tcp_listen_closed+0x68>)
 8009220:	f00a fb1c 	bl	801385c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	7d1b      	ldrb	r3, [r3, #20]
 8009228:	2b01      	cmp	r3, #1
 800922a:	d006      	beq.n	800923a <tcp_listen_closed+0x32>
 800922c:	4b0e      	ldr	r3, [pc, #56]	; (8009268 <tcp_listen_closed+0x60>)
 800922e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8009232:	4910      	ldr	r1, [pc, #64]	; (8009274 <tcp_listen_closed+0x6c>)
 8009234:	480e      	ldr	r0, [pc, #56]	; (8009270 <tcp_listen_closed+0x68>)
 8009236:	f00a fb11 	bl	801385c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800923a:	2301      	movs	r3, #1
 800923c:	60fb      	str	r3, [r7, #12]
 800923e:	e00b      	b.n	8009258 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8009240:	4a0d      	ldr	r2, [pc, #52]	; (8009278 <tcp_listen_closed+0x70>)
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	6879      	ldr	r1, [r7, #4]
 800924c:	4618      	mov	r0, r3
 800924e:	f7ff ffb1 	bl	80091b4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	3301      	adds	r3, #1
 8009256:	60fb      	str	r3, [r7, #12]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2b03      	cmp	r3, #3
 800925c:	d9f0      	bls.n	8009240 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800925e:	bf00      	nop
 8009260:	bf00      	nop
 8009262:	3710      	adds	r7, #16
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}
 8009268:	08015318 	.word	0x08015318
 800926c:	080153c8 	.word	0x080153c8
 8009270:	0801535c 	.word	0x0801535c
 8009274:	080153d4 	.word	0x080153d4
 8009278:	080176cc 	.word	0x080176cc

0800927c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800927c:	b5b0      	push	{r4, r5, r7, lr}
 800927e:	b088      	sub	sp, #32
 8009280:	af04      	add	r7, sp, #16
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	460b      	mov	r3, r1
 8009286:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d106      	bne.n	800929c <tcp_close_shutdown+0x20>
 800928e:	4b63      	ldr	r3, [pc, #396]	; (800941c <tcp_close_shutdown+0x1a0>)
 8009290:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8009294:	4962      	ldr	r1, [pc, #392]	; (8009420 <tcp_close_shutdown+0x1a4>)
 8009296:	4863      	ldr	r0, [pc, #396]	; (8009424 <tcp_close_shutdown+0x1a8>)
 8009298:	f00a fae0 	bl	801385c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800929c:	78fb      	ldrb	r3, [r7, #3]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d066      	beq.n	8009370 <tcp_close_shutdown+0xf4>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	7d1b      	ldrb	r3, [r3, #20]
 80092a6:	2b04      	cmp	r3, #4
 80092a8:	d003      	beq.n	80092b2 <tcp_close_shutdown+0x36>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	7d1b      	ldrb	r3, [r3, #20]
 80092ae:	2b07      	cmp	r3, #7
 80092b0:	d15e      	bne.n	8009370 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d104      	bne.n	80092c4 <tcp_close_shutdown+0x48>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092be:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80092c2:	d055      	beq.n	8009370 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	8b5b      	ldrh	r3, [r3, #26]
 80092c8:	f003 0310 	and.w	r3, r3, #16
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d106      	bne.n	80092de <tcp_close_shutdown+0x62>
 80092d0:	4b52      	ldr	r3, [pc, #328]	; (800941c <tcp_close_shutdown+0x1a0>)
 80092d2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80092d6:	4954      	ldr	r1, [pc, #336]	; (8009428 <tcp_close_shutdown+0x1ac>)
 80092d8:	4852      	ldr	r0, [pc, #328]	; (8009424 <tcp_close_shutdown+0x1a8>)
 80092da:	f00a fabf 	bl	801385c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80092e6:	687d      	ldr	r5, [r7, #4]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	3304      	adds	r3, #4
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	8ad2      	ldrh	r2, [r2, #22]
 80092f0:	6879      	ldr	r1, [r7, #4]
 80092f2:	8b09      	ldrh	r1, [r1, #24]
 80092f4:	9102      	str	r1, [sp, #8]
 80092f6:	9201      	str	r2, [sp, #4]
 80092f8:	9300      	str	r3, [sp, #0]
 80092fa:	462b      	mov	r3, r5
 80092fc:	4622      	mov	r2, r4
 80092fe:	4601      	mov	r1, r0
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f004 fe8d 	bl	800e020 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f001 f8c6 	bl	800a498 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800930c:	4b47      	ldr	r3, [pc, #284]	; (800942c <tcp_close_shutdown+0x1b0>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	429a      	cmp	r2, r3
 8009314:	d105      	bne.n	8009322 <tcp_close_shutdown+0xa6>
 8009316:	4b45      	ldr	r3, [pc, #276]	; (800942c <tcp_close_shutdown+0x1b0>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	68db      	ldr	r3, [r3, #12]
 800931c:	4a43      	ldr	r2, [pc, #268]	; (800942c <tcp_close_shutdown+0x1b0>)
 800931e:	6013      	str	r3, [r2, #0]
 8009320:	e013      	b.n	800934a <tcp_close_shutdown+0xce>
 8009322:	4b42      	ldr	r3, [pc, #264]	; (800942c <tcp_close_shutdown+0x1b0>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	60fb      	str	r3, [r7, #12]
 8009328:	e00c      	b.n	8009344 <tcp_close_shutdown+0xc8>
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	68db      	ldr	r3, [r3, #12]
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	429a      	cmp	r2, r3
 8009332:	d104      	bne.n	800933e <tcp_close_shutdown+0xc2>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	68da      	ldr	r2, [r3, #12]
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	60da      	str	r2, [r3, #12]
 800933c:	e005      	b.n	800934a <tcp_close_shutdown+0xce>
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	68db      	ldr	r3, [r3, #12]
 8009342:	60fb      	str	r3, [r7, #12]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d1ef      	bne.n	800932a <tcp_close_shutdown+0xae>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2200      	movs	r2, #0
 800934e:	60da      	str	r2, [r3, #12]
 8009350:	4b37      	ldr	r3, [pc, #220]	; (8009430 <tcp_close_shutdown+0x1b4>)
 8009352:	2201      	movs	r2, #1
 8009354:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8009356:	4b37      	ldr	r3, [pc, #220]	; (8009434 <tcp_close_shutdown+0x1b8>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	429a      	cmp	r2, r3
 800935e:	d102      	bne.n	8009366 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8009360:	f003 fd5a 	bl	800ce18 <tcp_trigger_input_pcb_close>
 8009364:	e002      	b.n	800936c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f7ff fed6 	bl	8009118 <tcp_free>
      }
      return ERR_OK;
 800936c:	2300      	movs	r3, #0
 800936e:	e050      	b.n	8009412 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	7d1b      	ldrb	r3, [r3, #20]
 8009374:	2b02      	cmp	r3, #2
 8009376:	d03b      	beq.n	80093f0 <tcp_close_shutdown+0x174>
 8009378:	2b02      	cmp	r3, #2
 800937a:	dc44      	bgt.n	8009406 <tcp_close_shutdown+0x18a>
 800937c:	2b00      	cmp	r3, #0
 800937e:	d002      	beq.n	8009386 <tcp_close_shutdown+0x10a>
 8009380:	2b01      	cmp	r3, #1
 8009382:	d02a      	beq.n	80093da <tcp_close_shutdown+0x15e>
 8009384:	e03f      	b.n	8009406 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	8adb      	ldrh	r3, [r3, #22]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d021      	beq.n	80093d2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800938e:	4b2a      	ldr	r3, [pc, #168]	; (8009438 <tcp_close_shutdown+0x1bc>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	687a      	ldr	r2, [r7, #4]
 8009394:	429a      	cmp	r2, r3
 8009396:	d105      	bne.n	80093a4 <tcp_close_shutdown+0x128>
 8009398:	4b27      	ldr	r3, [pc, #156]	; (8009438 <tcp_close_shutdown+0x1bc>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	68db      	ldr	r3, [r3, #12]
 800939e:	4a26      	ldr	r2, [pc, #152]	; (8009438 <tcp_close_shutdown+0x1bc>)
 80093a0:	6013      	str	r3, [r2, #0]
 80093a2:	e013      	b.n	80093cc <tcp_close_shutdown+0x150>
 80093a4:	4b24      	ldr	r3, [pc, #144]	; (8009438 <tcp_close_shutdown+0x1bc>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	60bb      	str	r3, [r7, #8]
 80093aa:	e00c      	b.n	80093c6 <tcp_close_shutdown+0x14a>
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	68db      	ldr	r3, [r3, #12]
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	429a      	cmp	r2, r3
 80093b4:	d104      	bne.n	80093c0 <tcp_close_shutdown+0x144>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	68da      	ldr	r2, [r3, #12]
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	60da      	str	r2, [r3, #12]
 80093be:	e005      	b.n	80093cc <tcp_close_shutdown+0x150>
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	68db      	ldr	r3, [r3, #12]
 80093c4:	60bb      	str	r3, [r7, #8]
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d1ef      	bne.n	80093ac <tcp_close_shutdown+0x130>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2200      	movs	r2, #0
 80093d0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f7ff fea0 	bl	8009118 <tcp_free>
      break;
 80093d8:	e01a      	b.n	8009410 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f7ff ff14 	bl	8009208 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80093e0:	6879      	ldr	r1, [r7, #4]
 80093e2:	4816      	ldr	r0, [pc, #88]	; (800943c <tcp_close_shutdown+0x1c0>)
 80093e4:	f001 f8a8 	bl	800a538 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f7ff feb1 	bl	8009150 <tcp_free_listen>
      break;
 80093ee:	e00f      	b.n	8009410 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80093f0:	6879      	ldr	r1, [r7, #4]
 80093f2:	480e      	ldr	r0, [pc, #56]	; (800942c <tcp_close_shutdown+0x1b0>)
 80093f4:	f001 f8a0 	bl	800a538 <tcp_pcb_remove>
 80093f8:	4b0d      	ldr	r3, [pc, #52]	; (8009430 <tcp_close_shutdown+0x1b4>)
 80093fa:	2201      	movs	r2, #1
 80093fc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f7ff fe8a 	bl	8009118 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8009404:	e004      	b.n	8009410 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 f81a 	bl	8009440 <tcp_close_shutdown_fin>
 800940c:	4603      	mov	r3, r0
 800940e:	e000      	b.n	8009412 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8009410:	2300      	movs	r3, #0
}
 8009412:	4618      	mov	r0, r3
 8009414:	3710      	adds	r7, #16
 8009416:	46bd      	mov	sp, r7
 8009418:	bdb0      	pop	{r4, r5, r7, pc}
 800941a:	bf00      	nop
 800941c:	08015318 	.word	0x08015318
 8009420:	080153ec 	.word	0x080153ec
 8009424:	0801535c 	.word	0x0801535c
 8009428:	0801540c 	.word	0x0801540c
 800942c:	2000ef58 	.word	0x2000ef58
 8009430:	2000ef54 	.word	0x2000ef54
 8009434:	2000ef6c 	.word	0x2000ef6c
 8009438:	2000ef64 	.word	0x2000ef64
 800943c:	2000ef60 	.word	0x2000ef60

08009440 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d106      	bne.n	800945c <tcp_close_shutdown_fin+0x1c>
 800944e:	4b2e      	ldr	r3, [pc, #184]	; (8009508 <tcp_close_shutdown_fin+0xc8>)
 8009450:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8009454:	492d      	ldr	r1, [pc, #180]	; (800950c <tcp_close_shutdown_fin+0xcc>)
 8009456:	482e      	ldr	r0, [pc, #184]	; (8009510 <tcp_close_shutdown_fin+0xd0>)
 8009458:	f00a fa00 	bl	801385c <iprintf>

  switch (pcb->state) {
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	7d1b      	ldrb	r3, [r3, #20]
 8009460:	2b07      	cmp	r3, #7
 8009462:	d020      	beq.n	80094a6 <tcp_close_shutdown_fin+0x66>
 8009464:	2b07      	cmp	r3, #7
 8009466:	dc2b      	bgt.n	80094c0 <tcp_close_shutdown_fin+0x80>
 8009468:	2b03      	cmp	r3, #3
 800946a:	d002      	beq.n	8009472 <tcp_close_shutdown_fin+0x32>
 800946c:	2b04      	cmp	r3, #4
 800946e:	d00d      	beq.n	800948c <tcp_close_shutdown_fin+0x4c>
 8009470:	e026      	b.n	80094c0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f003 fee2 	bl	800d23c <tcp_send_fin>
 8009478:	4603      	mov	r3, r0
 800947a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800947c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d11f      	bne.n	80094c4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2205      	movs	r2, #5
 8009488:	751a      	strb	r2, [r3, #20]
      }
      break;
 800948a:	e01b      	b.n	80094c4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f003 fed5 	bl	800d23c <tcp_send_fin>
 8009492:	4603      	mov	r3, r0
 8009494:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d114      	bne.n	80094c8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2205      	movs	r2, #5
 80094a2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80094a4:	e010      	b.n	80094c8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f003 fec8 	bl	800d23c <tcp_send_fin>
 80094ac:	4603      	mov	r3, r0
 80094ae:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80094b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d109      	bne.n	80094cc <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2209      	movs	r2, #9
 80094bc:	751a      	strb	r2, [r3, #20]
      }
      break;
 80094be:	e005      	b.n	80094cc <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80094c0:	2300      	movs	r3, #0
 80094c2:	e01c      	b.n	80094fe <tcp_close_shutdown_fin+0xbe>
      break;
 80094c4:	bf00      	nop
 80094c6:	e002      	b.n	80094ce <tcp_close_shutdown_fin+0x8e>
      break;
 80094c8:	bf00      	nop
 80094ca:	e000      	b.n	80094ce <tcp_close_shutdown_fin+0x8e>
      break;
 80094cc:	bf00      	nop
  }

  if (err == ERR_OK) {
 80094ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d103      	bne.n	80094de <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f003 ffee 	bl	800d4b8 <tcp_output>
 80094dc:	e00d      	b.n	80094fa <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80094de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094e6:	d108      	bne.n	80094fa <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	8b5b      	ldrh	r3, [r3, #26]
 80094ec:	f043 0308 	orr.w	r3, r3, #8
 80094f0:	b29a      	uxth	r2, r3
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80094f6:	2300      	movs	r3, #0
 80094f8:	e001      	b.n	80094fe <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80094fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3710      	adds	r7, #16
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
 8009506:	bf00      	nop
 8009508:	08015318 	.word	0x08015318
 800950c:	080153c8 	.word	0x080153c8
 8009510:	0801535c 	.word	0x0801535c

08009514 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b082      	sub	sp, #8
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d109      	bne.n	8009536 <tcp_close+0x22>
 8009522:	4b0f      	ldr	r3, [pc, #60]	; (8009560 <tcp_close+0x4c>)
 8009524:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8009528:	490e      	ldr	r1, [pc, #56]	; (8009564 <tcp_close+0x50>)
 800952a:	480f      	ldr	r0, [pc, #60]	; (8009568 <tcp_close+0x54>)
 800952c:	f00a f996 	bl	801385c <iprintf>
 8009530:	f06f 030f 	mvn.w	r3, #15
 8009534:	e00f      	b.n	8009556 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	7d1b      	ldrb	r3, [r3, #20]
 800953a:	2b01      	cmp	r3, #1
 800953c:	d006      	beq.n	800954c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	8b5b      	ldrh	r3, [r3, #26]
 8009542:	f043 0310 	orr.w	r3, r3, #16
 8009546:	b29a      	uxth	r2, r3
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800954c:	2101      	movs	r1, #1
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f7ff fe94 	bl	800927c <tcp_close_shutdown>
 8009554:	4603      	mov	r3, r0
}
 8009556:	4618      	mov	r0, r3
 8009558:	3708      	adds	r7, #8
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop
 8009560:	08015318 	.word	0x08015318
 8009564:	08015428 	.word	0x08015428
 8009568:	0801535c 	.word	0x0801535c

0800956c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b08e      	sub	sp, #56	; 0x38
 8009570:	af04      	add	r7, sp, #16
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d107      	bne.n	800958c <tcp_abandon+0x20>
 800957c:	4b52      	ldr	r3, [pc, #328]	; (80096c8 <tcp_abandon+0x15c>)
 800957e:	f240 223d 	movw	r2, #573	; 0x23d
 8009582:	4952      	ldr	r1, [pc, #328]	; (80096cc <tcp_abandon+0x160>)
 8009584:	4852      	ldr	r0, [pc, #328]	; (80096d0 <tcp_abandon+0x164>)
 8009586:	f00a f969 	bl	801385c <iprintf>
 800958a:	e099      	b.n	80096c0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	7d1b      	ldrb	r3, [r3, #20]
 8009590:	2b01      	cmp	r3, #1
 8009592:	d106      	bne.n	80095a2 <tcp_abandon+0x36>
 8009594:	4b4c      	ldr	r3, [pc, #304]	; (80096c8 <tcp_abandon+0x15c>)
 8009596:	f44f 7210 	mov.w	r2, #576	; 0x240
 800959a:	494e      	ldr	r1, [pc, #312]	; (80096d4 <tcp_abandon+0x168>)
 800959c:	484c      	ldr	r0, [pc, #304]	; (80096d0 <tcp_abandon+0x164>)
 800959e:	f00a f95d 	bl	801385c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	7d1b      	ldrb	r3, [r3, #20]
 80095a6:	2b0a      	cmp	r3, #10
 80095a8:	d107      	bne.n	80095ba <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80095aa:	6879      	ldr	r1, [r7, #4]
 80095ac:	484a      	ldr	r0, [pc, #296]	; (80096d8 <tcp_abandon+0x16c>)
 80095ae:	f000 ffc3 	bl	800a538 <tcp_pcb_remove>
    tcp_free(pcb);
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f7ff fdb0 	bl	8009118 <tcp_free>
 80095b8:	e082      	b.n	80096c0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80095ba:	2300      	movs	r3, #0
 80095bc:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80095be:	2300      	movs	r3, #0
 80095c0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095c6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095cc:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095d4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	691b      	ldr	r3, [r3, #16]
 80095da:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	7d1b      	ldrb	r3, [r3, #20]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d126      	bne.n	8009632 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	8adb      	ldrh	r3, [r3, #22]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d02e      	beq.n	800964a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80095ec:	4b3b      	ldr	r3, [pc, #236]	; (80096dc <tcp_abandon+0x170>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	687a      	ldr	r2, [r7, #4]
 80095f2:	429a      	cmp	r2, r3
 80095f4:	d105      	bne.n	8009602 <tcp_abandon+0x96>
 80095f6:	4b39      	ldr	r3, [pc, #228]	; (80096dc <tcp_abandon+0x170>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	68db      	ldr	r3, [r3, #12]
 80095fc:	4a37      	ldr	r2, [pc, #220]	; (80096dc <tcp_abandon+0x170>)
 80095fe:	6013      	str	r3, [r2, #0]
 8009600:	e013      	b.n	800962a <tcp_abandon+0xbe>
 8009602:	4b36      	ldr	r3, [pc, #216]	; (80096dc <tcp_abandon+0x170>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	61fb      	str	r3, [r7, #28]
 8009608:	e00c      	b.n	8009624 <tcp_abandon+0xb8>
 800960a:	69fb      	ldr	r3, [r7, #28]
 800960c:	68db      	ldr	r3, [r3, #12]
 800960e:	687a      	ldr	r2, [r7, #4]
 8009610:	429a      	cmp	r2, r3
 8009612:	d104      	bne.n	800961e <tcp_abandon+0xb2>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	68da      	ldr	r2, [r3, #12]
 8009618:	69fb      	ldr	r3, [r7, #28]
 800961a:	60da      	str	r2, [r3, #12]
 800961c:	e005      	b.n	800962a <tcp_abandon+0xbe>
 800961e:	69fb      	ldr	r3, [r7, #28]
 8009620:	68db      	ldr	r3, [r3, #12]
 8009622:	61fb      	str	r3, [r7, #28]
 8009624:	69fb      	ldr	r3, [r7, #28]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d1ef      	bne.n	800960a <tcp_abandon+0x9e>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2200      	movs	r2, #0
 800962e:	60da      	str	r2, [r3, #12]
 8009630:	e00b      	b.n	800964a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	8adb      	ldrh	r3, [r3, #22]
 800963a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800963c:	6879      	ldr	r1, [r7, #4]
 800963e:	4828      	ldr	r0, [pc, #160]	; (80096e0 <tcp_abandon+0x174>)
 8009640:	f000 ff7a 	bl	800a538 <tcp_pcb_remove>
 8009644:	4b27      	ldr	r3, [pc, #156]	; (80096e4 <tcp_abandon+0x178>)
 8009646:	2201      	movs	r2, #1
 8009648:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800964e:	2b00      	cmp	r3, #0
 8009650:	d004      	beq.n	800965c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009656:	4618      	mov	r0, r3
 8009658:	f000 fd1c 	bl	800a094 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009660:	2b00      	cmp	r3, #0
 8009662:	d004      	beq.n	800966e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009668:	4618      	mov	r0, r3
 800966a:	f000 fd13 	bl	800a094 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009672:	2b00      	cmp	r3, #0
 8009674:	d004      	beq.n	8009680 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800967a:	4618      	mov	r0, r3
 800967c:	f000 fd0a 	bl	800a094 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8009680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009682:	2b00      	cmp	r3, #0
 8009684:	d00e      	beq.n	80096a4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8009686:	6879      	ldr	r1, [r7, #4]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	3304      	adds	r3, #4
 800968c:	687a      	ldr	r2, [r7, #4]
 800968e:	8b12      	ldrh	r2, [r2, #24]
 8009690:	9202      	str	r2, [sp, #8]
 8009692:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009694:	9201      	str	r2, [sp, #4]
 8009696:	9300      	str	r3, [sp, #0]
 8009698:	460b      	mov	r3, r1
 800969a:	697a      	ldr	r2, [r7, #20]
 800969c:	69b9      	ldr	r1, [r7, #24]
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f004 fcbe 	bl	800e020 <tcp_rst>
    }
    last_state = pcb->state;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	7d1b      	ldrb	r3, [r3, #20]
 80096a8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f7ff fd34 	bl	8009118 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d004      	beq.n	80096c0 <tcp_abandon+0x154>
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	f06f 010c 	mvn.w	r1, #12
 80096bc:	68f8      	ldr	r0, [r7, #12]
 80096be:	4798      	blx	r3
  }
}
 80096c0:	3728      	adds	r7, #40	; 0x28
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
 80096c6:	bf00      	nop
 80096c8:	08015318 	.word	0x08015318
 80096cc:	0801545c 	.word	0x0801545c
 80096d0:	0801535c 	.word	0x0801535c
 80096d4:	08015478 	.word	0x08015478
 80096d8:	2000ef68 	.word	0x2000ef68
 80096dc:	2000ef64 	.word	0x2000ef64
 80096e0:	2000ef58 	.word	0x2000ef58
 80096e4:	2000ef54 	.word	0x2000ef54

080096e8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b082      	sub	sp, #8
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80096f0:	2101      	movs	r1, #1
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f7ff ff3a 	bl	800956c <tcp_abandon>
}
 80096f8:	bf00      	nop
 80096fa:	3708      	adds	r7, #8
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b084      	sub	sp, #16
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d106      	bne.n	800971c <tcp_update_rcv_ann_wnd+0x1c>
 800970e:	4b25      	ldr	r3, [pc, #148]	; (80097a4 <tcp_update_rcv_ann_wnd+0xa4>)
 8009710:	f240 32a6 	movw	r2, #934	; 0x3a6
 8009714:	4924      	ldr	r1, [pc, #144]	; (80097a8 <tcp_update_rcv_ann_wnd+0xa8>)
 8009716:	4825      	ldr	r0, [pc, #148]	; (80097ac <tcp_update_rcv_ann_wnd+0xac>)
 8009718:	f00a f8a0 	bl	801385c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8009724:	4413      	add	r3, r2
 8009726:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800972c:	687a      	ldr	r2, [r7, #4]
 800972e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8009730:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8009734:	bf28      	it	cs
 8009736:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800973a:	b292      	uxth	r2, r2
 800973c:	4413      	add	r3, r2
 800973e:	68fa      	ldr	r2, [r7, #12]
 8009740:	1ad3      	subs	r3, r2, r3
 8009742:	2b00      	cmp	r3, #0
 8009744:	db08      	blt.n	8009758 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009752:	68fa      	ldr	r2, [r7, #12]
 8009754:	1ad3      	subs	r3, r2, r3
 8009756:	e020      	b.n	800979a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009760:	1ad3      	subs	r3, r2, r3
 8009762:	2b00      	cmp	r3, #0
 8009764:	dd03      	ble.n	800976e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2200      	movs	r2, #0
 800976a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800976c:	e014      	b.n	8009798 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009776:	1ad3      	subs	r3, r2, r3
 8009778:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009780:	d306      	bcc.n	8009790 <tcp_update_rcv_ann_wnd+0x90>
 8009782:	4b08      	ldr	r3, [pc, #32]	; (80097a4 <tcp_update_rcv_ann_wnd+0xa4>)
 8009784:	f240 32b6 	movw	r2, #950	; 0x3b6
 8009788:	4909      	ldr	r1, [pc, #36]	; (80097b0 <tcp_update_rcv_ann_wnd+0xb0>)
 800978a:	4808      	ldr	r0, [pc, #32]	; (80097ac <tcp_update_rcv_ann_wnd+0xac>)
 800978c:	f00a f866 	bl	801385c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	b29a      	uxth	r2, r3
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8009798:	2300      	movs	r3, #0
  }
}
 800979a:	4618      	mov	r0, r3
 800979c:	3710      	adds	r7, #16
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop
 80097a4:	08015318 	.word	0x08015318
 80097a8:	08015574 	.word	0x08015574
 80097ac:	0801535c 	.word	0x0801535c
 80097b0:	08015598 	.word	0x08015598

080097b4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	460b      	mov	r3, r1
 80097be:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d107      	bne.n	80097d6 <tcp_recved+0x22>
 80097c6:	4b1f      	ldr	r3, [pc, #124]	; (8009844 <tcp_recved+0x90>)
 80097c8:	f240 32cf 	movw	r2, #975	; 0x3cf
 80097cc:	491e      	ldr	r1, [pc, #120]	; (8009848 <tcp_recved+0x94>)
 80097ce:	481f      	ldr	r0, [pc, #124]	; (800984c <tcp_recved+0x98>)
 80097d0:	f00a f844 	bl	801385c <iprintf>
 80097d4:	e032      	b.n	800983c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	7d1b      	ldrb	r3, [r3, #20]
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d106      	bne.n	80097ec <tcp_recved+0x38>
 80097de:	4b19      	ldr	r3, [pc, #100]	; (8009844 <tcp_recved+0x90>)
 80097e0:	f240 32d2 	movw	r2, #978	; 0x3d2
 80097e4:	491a      	ldr	r1, [pc, #104]	; (8009850 <tcp_recved+0x9c>)
 80097e6:	4819      	ldr	r0, [pc, #100]	; (800984c <tcp_recved+0x98>)
 80097e8:	f00a f838 	bl	801385c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80097f0:	887b      	ldrh	r3, [r7, #2]
 80097f2:	4413      	add	r3, r2
 80097f4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80097f6:	89fb      	ldrh	r3, [r7, #14]
 80097f8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80097fc:	d804      	bhi.n	8009808 <tcp_recved+0x54>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009802:	89fa      	ldrh	r2, [r7, #14]
 8009804:	429a      	cmp	r2, r3
 8009806:	d204      	bcs.n	8009812 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800980e:	851a      	strh	r2, [r3, #40]	; 0x28
 8009810:	e002      	b.n	8009818 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	89fa      	ldrh	r2, [r7, #14]
 8009816:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f7ff ff71 	bl	8009700 <tcp_update_rcv_ann_wnd>
 800981e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009826:	d309      	bcc.n	800983c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	8b5b      	ldrh	r3, [r3, #26]
 800982c:	f043 0302 	orr.w	r3, r3, #2
 8009830:	b29a      	uxth	r2, r3
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f003 fe3e 	bl	800d4b8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800983c:	3710      	adds	r7, #16
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
 8009842:	bf00      	nop
 8009844:	08015318 	.word	0x08015318
 8009848:	080155b4 	.word	0x080155b4
 800984c:	0801535c 	.word	0x0801535c
 8009850:	080155cc 	.word	0x080155cc

08009854 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8009854:	b5b0      	push	{r4, r5, r7, lr}
 8009856:	b090      	sub	sp, #64	; 0x40
 8009858:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800985a:	2300      	movs	r3, #0
 800985c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8009860:	4b94      	ldr	r3, [pc, #592]	; (8009ab4 <tcp_slowtmr+0x260>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	3301      	adds	r3, #1
 8009866:	4a93      	ldr	r2, [pc, #588]	; (8009ab4 <tcp_slowtmr+0x260>)
 8009868:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800986a:	4b93      	ldr	r3, [pc, #588]	; (8009ab8 <tcp_slowtmr+0x264>)
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	3301      	adds	r3, #1
 8009870:	b2da      	uxtb	r2, r3
 8009872:	4b91      	ldr	r3, [pc, #580]	; (8009ab8 <tcp_slowtmr+0x264>)
 8009874:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8009876:	2300      	movs	r3, #0
 8009878:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800987a:	4b90      	ldr	r3, [pc, #576]	; (8009abc <tcp_slowtmr+0x268>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8009880:	e29f      	b.n	8009dc2 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8009882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009884:	7d1b      	ldrb	r3, [r3, #20]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d106      	bne.n	8009898 <tcp_slowtmr+0x44>
 800988a:	4b8d      	ldr	r3, [pc, #564]	; (8009ac0 <tcp_slowtmr+0x26c>)
 800988c:	f240 42be 	movw	r2, #1214	; 0x4be
 8009890:	498c      	ldr	r1, [pc, #560]	; (8009ac4 <tcp_slowtmr+0x270>)
 8009892:	488d      	ldr	r0, [pc, #564]	; (8009ac8 <tcp_slowtmr+0x274>)
 8009894:	f009 ffe2 	bl	801385c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8009898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800989a:	7d1b      	ldrb	r3, [r3, #20]
 800989c:	2b01      	cmp	r3, #1
 800989e:	d106      	bne.n	80098ae <tcp_slowtmr+0x5a>
 80098a0:	4b87      	ldr	r3, [pc, #540]	; (8009ac0 <tcp_slowtmr+0x26c>)
 80098a2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80098a6:	4989      	ldr	r1, [pc, #548]	; (8009acc <tcp_slowtmr+0x278>)
 80098a8:	4887      	ldr	r0, [pc, #540]	; (8009ac8 <tcp_slowtmr+0x274>)
 80098aa:	f009 ffd7 	bl	801385c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80098ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b0:	7d1b      	ldrb	r3, [r3, #20]
 80098b2:	2b0a      	cmp	r3, #10
 80098b4:	d106      	bne.n	80098c4 <tcp_slowtmr+0x70>
 80098b6:	4b82      	ldr	r3, [pc, #520]	; (8009ac0 <tcp_slowtmr+0x26c>)
 80098b8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80098bc:	4984      	ldr	r1, [pc, #528]	; (8009ad0 <tcp_slowtmr+0x27c>)
 80098be:	4882      	ldr	r0, [pc, #520]	; (8009ac8 <tcp_slowtmr+0x274>)
 80098c0:	f009 ffcc 	bl	801385c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80098c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098c6:	7f9a      	ldrb	r2, [r3, #30]
 80098c8:	4b7b      	ldr	r3, [pc, #492]	; (8009ab8 <tcp_slowtmr+0x264>)
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d105      	bne.n	80098dc <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80098d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80098d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d6:	68db      	ldr	r3, [r3, #12]
 80098d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80098da:	e272      	b.n	8009dc2 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 80098dc:	4b76      	ldr	r3, [pc, #472]	; (8009ab8 <tcp_slowtmr+0x264>)
 80098de:	781a      	ldrb	r2, [r3, #0]
 80098e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098e2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80098e4:	2300      	movs	r3, #0
 80098e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80098ea:	2300      	movs	r3, #0
 80098ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80098f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f2:	7d1b      	ldrb	r3, [r3, #20]
 80098f4:	2b02      	cmp	r3, #2
 80098f6:	d10a      	bne.n	800990e <tcp_slowtmr+0xba>
 80098f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80098fe:	2b05      	cmp	r3, #5
 8009900:	d905      	bls.n	800990e <tcp_slowtmr+0xba>
      ++pcb_remove;
 8009902:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009906:	3301      	adds	r3, #1
 8009908:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800990c:	e11e      	b.n	8009b4c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800990e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009910:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009914:	2b0b      	cmp	r3, #11
 8009916:	d905      	bls.n	8009924 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8009918:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800991c:	3301      	adds	r3, #1
 800991e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009922:	e113      	b.n	8009b4c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8009924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009926:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800992a:	2b00      	cmp	r3, #0
 800992c:	d075      	beq.n	8009a1a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800992e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009932:	2b00      	cmp	r3, #0
 8009934:	d006      	beq.n	8009944 <tcp_slowtmr+0xf0>
 8009936:	4b62      	ldr	r3, [pc, #392]	; (8009ac0 <tcp_slowtmr+0x26c>)
 8009938:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800993c:	4965      	ldr	r1, [pc, #404]	; (8009ad4 <tcp_slowtmr+0x280>)
 800993e:	4862      	ldr	r0, [pc, #392]	; (8009ac8 <tcp_slowtmr+0x274>)
 8009940:	f009 ff8c 	bl	801385c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8009944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009946:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009948:	2b00      	cmp	r3, #0
 800994a:	d106      	bne.n	800995a <tcp_slowtmr+0x106>
 800994c:	4b5c      	ldr	r3, [pc, #368]	; (8009ac0 <tcp_slowtmr+0x26c>)
 800994e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8009952:	4961      	ldr	r1, [pc, #388]	; (8009ad8 <tcp_slowtmr+0x284>)
 8009954:	485c      	ldr	r0, [pc, #368]	; (8009ac8 <tcp_slowtmr+0x274>)
 8009956:	f009 ff81 	bl	801385c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800995a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800995c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8009960:	2b0b      	cmp	r3, #11
 8009962:	d905      	bls.n	8009970 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8009964:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009968:	3301      	adds	r3, #1
 800996a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800996e:	e0ed      	b.n	8009b4c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8009970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009972:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009976:	3b01      	subs	r3, #1
 8009978:	4a58      	ldr	r2, [pc, #352]	; (8009adc <tcp_slowtmr+0x288>)
 800997a:	5cd3      	ldrb	r3, [r2, r3]
 800997c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800997e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009980:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009984:	7c7a      	ldrb	r2, [r7, #17]
 8009986:	429a      	cmp	r2, r3
 8009988:	d907      	bls.n	800999a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800998a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800998c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009990:	3301      	adds	r3, #1
 8009992:	b2da      	uxtb	r2, r3
 8009994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009996:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800999a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800999c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80099a0:	7c7a      	ldrb	r2, [r7, #17]
 80099a2:	429a      	cmp	r2, r3
 80099a4:	f200 80d2 	bhi.w	8009b4c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80099a8:	2301      	movs	r3, #1
 80099aa:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80099ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d108      	bne.n	80099c8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80099b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80099b8:	f004 fc26 	bl	800e208 <tcp_zero_window_probe>
 80099bc:	4603      	mov	r3, r0
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d014      	beq.n	80099ec <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80099c2:	2300      	movs	r3, #0
 80099c4:	623b      	str	r3, [r7, #32]
 80099c6:	e011      	b.n	80099ec <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80099c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80099ce:	4619      	mov	r1, r3
 80099d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80099d2:	f003 faeb 	bl	800cfac <tcp_split_unsent_seg>
 80099d6:	4603      	mov	r3, r0
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d107      	bne.n	80099ec <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80099dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80099de:	f003 fd6b 	bl	800d4b8 <tcp_output>
 80099e2:	4603      	mov	r3, r0
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d101      	bne.n	80099ec <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80099e8:	2300      	movs	r3, #0
 80099ea:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80099ec:	6a3b      	ldr	r3, [r7, #32]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	f000 80ac 	beq.w	8009b4c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80099f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099f6:	2200      	movs	r2, #0
 80099f8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80099fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099fe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009a02:	2b06      	cmp	r3, #6
 8009a04:	f200 80a2 	bhi.w	8009b4c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8009a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a0a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009a0e:	3301      	adds	r3, #1
 8009a10:	b2da      	uxtb	r2, r3
 8009a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a14:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8009a18:	e098      	b.n	8009b4c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8009a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a1c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	db0f      	blt.n	8009a44 <tcp_slowtmr+0x1f0>
 8009a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a26:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009a2a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d008      	beq.n	8009a44 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8009a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a34:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	b21a      	sxth	r2, r3
 8009a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a42:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8009a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a46:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8009a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a4c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8009a50:	429a      	cmp	r2, r3
 8009a52:	db7b      	blt.n	8009b4c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8009a54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a56:	f004 f821 	bl	800da9c <tcp_rexmit_rto_prepare>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d007      	beq.n	8009a70 <tcp_slowtmr+0x21c>
 8009a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d171      	bne.n	8009b4c <tcp_slowtmr+0x2f8>
 8009a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d06d      	beq.n	8009b4c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8009a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a72:	7d1b      	ldrb	r3, [r3, #20]
 8009a74:	2b02      	cmp	r3, #2
 8009a76:	d03a      	beq.n	8009aee <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8009a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009a7e:	2b0c      	cmp	r3, #12
 8009a80:	bf28      	it	cs
 8009a82:	230c      	movcs	r3, #12
 8009a84:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8009a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a88:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009a8c:	10db      	asrs	r3, r3, #3
 8009a8e:	b21b      	sxth	r3, r3
 8009a90:	461a      	mov	r2, r3
 8009a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a94:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009a98:	4413      	add	r3, r2
 8009a9a:	7efa      	ldrb	r2, [r7, #27]
 8009a9c:	4910      	ldr	r1, [pc, #64]	; (8009ae0 <tcp_slowtmr+0x28c>)
 8009a9e:	5c8a      	ldrb	r2, [r1, r2]
 8009aa0:	4093      	lsls	r3, r2
 8009aa2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	dc1a      	bgt.n	8009ae4 <tcp_slowtmr+0x290>
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	b21a      	sxth	r2, r3
 8009ab2:	e019      	b.n	8009ae8 <tcp_slowtmr+0x294>
 8009ab4:	2000ef5c 	.word	0x2000ef5c
 8009ab8:	20008506 	.word	0x20008506
 8009abc:	2000ef58 	.word	0x2000ef58
 8009ac0:	08015318 	.word	0x08015318
 8009ac4:	0801565c 	.word	0x0801565c
 8009ac8:	0801535c 	.word	0x0801535c
 8009acc:	08015688 	.word	0x08015688
 8009ad0:	080156b4 	.word	0x080156b4
 8009ad4:	080156e4 	.word	0x080156e4
 8009ad8:	08015718 	.word	0x08015718
 8009adc:	080176c4 	.word	0x080176c4
 8009ae0:	080176b4 	.word	0x080176b4
 8009ae4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8009aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009af0:	2200      	movs	r2, #0
 8009af2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8009af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009af6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009afc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009b00:	4293      	cmp	r3, r2
 8009b02:	bf28      	it	cs
 8009b04:	4613      	movcs	r3, r2
 8009b06:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8009b08:	8a7b      	ldrh	r3, [r7, #18]
 8009b0a:	085b      	lsrs	r3, r3, #1
 8009b0c:	b29a      	uxth	r2, r3
 8009b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b10:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b16:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b1e:	005b      	lsls	r3, r3, #1
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d206      	bcs.n	8009b34 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8009b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b2a:	005b      	lsls	r3, r3, #1
 8009b2c:	b29a      	uxth	r2, r3
 8009b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b30:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8009b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b36:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8009b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b3a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8009b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b40:	2200      	movs	r2, #0
 8009b42:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8009b46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b48:	f004 f818 	bl	800db7c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8009b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b4e:	7d1b      	ldrb	r3, [r3, #20]
 8009b50:	2b06      	cmp	r3, #6
 8009b52:	d111      	bne.n	8009b78 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8009b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b56:	8b5b      	ldrh	r3, [r3, #26]
 8009b58:	f003 0310 	and.w	r3, r3, #16
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d00b      	beq.n	8009b78 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009b60:	4b9d      	ldr	r3, [pc, #628]	; (8009dd8 <tcp_slowtmr+0x584>)
 8009b62:	681a      	ldr	r2, [r3, #0]
 8009b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b66:	6a1b      	ldr	r3, [r3, #32]
 8009b68:	1ad3      	subs	r3, r2, r3
 8009b6a:	2b28      	cmp	r3, #40	; 0x28
 8009b6c:	d904      	bls.n	8009b78 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8009b6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b72:	3301      	adds	r3, #1
 8009b74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b7a:	7a5b      	ldrb	r3, [r3, #9]
 8009b7c:	f003 0308 	and.w	r3, r3, #8
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d04c      	beq.n	8009c1e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8009b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b86:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009b88:	2b04      	cmp	r3, #4
 8009b8a:	d003      	beq.n	8009b94 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8009b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b8e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8009b90:	2b07      	cmp	r3, #7
 8009b92:	d144      	bne.n	8009c1e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009b94:	4b90      	ldr	r3, [pc, #576]	; (8009dd8 <tcp_slowtmr+0x584>)
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b9a:	6a1b      	ldr	r3, [r3, #32]
 8009b9c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8009b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ba0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ba4:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8009ba8:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8009bac:	498b      	ldr	r1, [pc, #556]	; (8009ddc <tcp_slowtmr+0x588>)
 8009bae:	fba1 1303 	umull	r1, r3, r1, r3
 8009bb2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	d90a      	bls.n	8009bce <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8009bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009bbc:	3301      	adds	r3, #1
 8009bbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8009bc2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009bcc:	e027      	b.n	8009c1e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009bce:	4b82      	ldr	r3, [pc, #520]	; (8009dd8 <tcp_slowtmr+0x584>)
 8009bd0:	681a      	ldr	r2, [r3, #0]
 8009bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd4:	6a1b      	ldr	r3, [r3, #32]
 8009bd6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8009bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bda:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8009bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009be0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8009be4:	4618      	mov	r0, r3
 8009be6:	4b7e      	ldr	r3, [pc, #504]	; (8009de0 <tcp_slowtmr+0x58c>)
 8009be8:	fb03 f300 	mul.w	r3, r3, r0
 8009bec:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8009bee:	497b      	ldr	r1, [pc, #492]	; (8009ddc <tcp_slowtmr+0x588>)
 8009bf0:	fba1 1303 	umull	r1, r3, r1, r3
 8009bf4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	d911      	bls.n	8009c1e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8009bfa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009bfc:	f004 fac4 	bl	800e188 <tcp_keepalive>
 8009c00:	4603      	mov	r3, r0
 8009c02:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8009c06:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d107      	bne.n	8009c1e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8009c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c10:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8009c14:	3301      	adds	r3, #1
 8009c16:	b2da      	uxtb	r2, r3
 8009c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c1a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8009c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d011      	beq.n	8009c4a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8009c26:	4b6c      	ldr	r3, [pc, #432]	; (8009dd8 <tcp_slowtmr+0x584>)
 8009c28:	681a      	ldr	r2, [r3, #0]
 8009c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c2c:	6a1b      	ldr	r3, [r3, #32]
 8009c2e:	1ad2      	subs	r2, r2, r3
 8009c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c32:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8009c36:	4619      	mov	r1, r3
 8009c38:	460b      	mov	r3, r1
 8009c3a:	005b      	lsls	r3, r3, #1
 8009c3c:	440b      	add	r3, r1
 8009c3e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d302      	bcc.n	8009c4a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8009c44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c46:	f000 fddb 	bl	800a800 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8009c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c4c:	7d1b      	ldrb	r3, [r3, #20]
 8009c4e:	2b03      	cmp	r3, #3
 8009c50:	d10b      	bne.n	8009c6a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009c52:	4b61      	ldr	r3, [pc, #388]	; (8009dd8 <tcp_slowtmr+0x584>)
 8009c54:	681a      	ldr	r2, [r3, #0]
 8009c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c58:	6a1b      	ldr	r3, [r3, #32]
 8009c5a:	1ad3      	subs	r3, r2, r3
 8009c5c:	2b28      	cmp	r3, #40	; 0x28
 8009c5e:	d904      	bls.n	8009c6a <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8009c60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c64:	3301      	adds	r3, #1
 8009c66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8009c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c6c:	7d1b      	ldrb	r3, [r3, #20]
 8009c6e:	2b09      	cmp	r3, #9
 8009c70:	d10b      	bne.n	8009c8a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009c72:	4b59      	ldr	r3, [pc, #356]	; (8009dd8 <tcp_slowtmr+0x584>)
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c78:	6a1b      	ldr	r3, [r3, #32]
 8009c7a:	1ad3      	subs	r3, r2, r3
 8009c7c:	2bf0      	cmp	r3, #240	; 0xf0
 8009c7e:	d904      	bls.n	8009c8a <tcp_slowtmr+0x436>
        ++pcb_remove;
 8009c80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c84:	3301      	adds	r3, #1
 8009c86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009c8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d060      	beq.n	8009d54 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8009c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c98:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8009c9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c9c:	f000 fbfc 	bl	800a498 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8009ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d010      	beq.n	8009cc8 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8009ca6:	4b4f      	ldr	r3, [pc, #316]	; (8009de4 <tcp_slowtmr+0x590>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009cac:	429a      	cmp	r2, r3
 8009cae:	d106      	bne.n	8009cbe <tcp_slowtmr+0x46a>
 8009cb0:	4b4d      	ldr	r3, [pc, #308]	; (8009de8 <tcp_slowtmr+0x594>)
 8009cb2:	f240 526d 	movw	r2, #1389	; 0x56d
 8009cb6:	494d      	ldr	r1, [pc, #308]	; (8009dec <tcp_slowtmr+0x598>)
 8009cb8:	484d      	ldr	r0, [pc, #308]	; (8009df0 <tcp_slowtmr+0x59c>)
 8009cba:	f009 fdcf 	bl	801385c <iprintf>
        prev->next = pcb->next;
 8009cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cc0:	68da      	ldr	r2, [r3, #12]
 8009cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc4:	60da      	str	r2, [r3, #12]
 8009cc6:	e00f      	b.n	8009ce8 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8009cc8:	4b46      	ldr	r3, [pc, #280]	; (8009de4 <tcp_slowtmr+0x590>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d006      	beq.n	8009ce0 <tcp_slowtmr+0x48c>
 8009cd2:	4b45      	ldr	r3, [pc, #276]	; (8009de8 <tcp_slowtmr+0x594>)
 8009cd4:	f240 5271 	movw	r2, #1393	; 0x571
 8009cd8:	4946      	ldr	r1, [pc, #280]	; (8009df4 <tcp_slowtmr+0x5a0>)
 8009cda:	4845      	ldr	r0, [pc, #276]	; (8009df0 <tcp_slowtmr+0x59c>)
 8009cdc:	f009 fdbe 	bl	801385c <iprintf>
        tcp_active_pcbs = pcb->next;
 8009ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ce2:	68db      	ldr	r3, [r3, #12]
 8009ce4:	4a3f      	ldr	r2, [pc, #252]	; (8009de4 <tcp_slowtmr+0x590>)
 8009ce6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8009ce8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d013      	beq.n	8009d18 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cf2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cf6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009cf8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8009cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cfc:	3304      	adds	r3, #4
 8009cfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d00:	8ad2      	ldrh	r2, [r2, #22]
 8009d02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d04:	8b09      	ldrh	r1, [r1, #24]
 8009d06:	9102      	str	r1, [sp, #8]
 8009d08:	9201      	str	r2, [sp, #4]
 8009d0a:	9300      	str	r3, [sp, #0]
 8009d0c:	462b      	mov	r3, r5
 8009d0e:	4622      	mov	r2, r4
 8009d10:	4601      	mov	r1, r0
 8009d12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d14:	f004 f984 	bl	800e020 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8009d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d1a:	691b      	ldr	r3, [r3, #16]
 8009d1c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8009d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d20:	7d1b      	ldrb	r3, [r3, #20]
 8009d22:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8009d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d26:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8009d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d2a:	68db      	ldr	r3, [r3, #12]
 8009d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8009d2e:	6838      	ldr	r0, [r7, #0]
 8009d30:	f7ff f9f2 	bl	8009118 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8009d34:	4b30      	ldr	r3, [pc, #192]	; (8009df8 <tcp_slowtmr+0x5a4>)
 8009d36:	2200      	movs	r2, #0
 8009d38:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d004      	beq.n	8009d4a <tcp_slowtmr+0x4f6>
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f06f 010c 	mvn.w	r1, #12
 8009d46:	68b8      	ldr	r0, [r7, #8]
 8009d48:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8009d4a:	4b2b      	ldr	r3, [pc, #172]	; (8009df8 <tcp_slowtmr+0x5a4>)
 8009d4c:	781b      	ldrb	r3, [r3, #0]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d037      	beq.n	8009dc2 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8009d52:	e590      	b.n	8009876 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8009d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d56:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d5a:	68db      	ldr	r3, [r3, #12]
 8009d5c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8009d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d60:	7f1b      	ldrb	r3, [r3, #28]
 8009d62:	3301      	adds	r3, #1
 8009d64:	b2da      	uxtb	r2, r3
 8009d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d68:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8009d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d6c:	7f1a      	ldrb	r2, [r3, #28]
 8009d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d70:	7f5b      	ldrb	r3, [r3, #29]
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d325      	bcc.n	8009dc2 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8009d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d78:	2200      	movs	r2, #0
 8009d7a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8009d7c:	4b1e      	ldr	r3, [pc, #120]	; (8009df8 <tcp_slowtmr+0x5a4>)
 8009d7e:	2200      	movs	r2, #0
 8009d80:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8009d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d00b      	beq.n	8009da4 <tcp_slowtmr+0x550>
 8009d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d94:	6912      	ldr	r2, [r2, #16]
 8009d96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009d98:	4610      	mov	r0, r2
 8009d9a:	4798      	blx	r3
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8009da2:	e002      	b.n	8009daa <tcp_slowtmr+0x556>
 8009da4:	2300      	movs	r3, #0
 8009da6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8009daa:	4b13      	ldr	r3, [pc, #76]	; (8009df8 <tcp_slowtmr+0x5a4>)
 8009dac:	781b      	ldrb	r3, [r3, #0]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d000      	beq.n	8009db4 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8009db2:	e560      	b.n	8009876 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8009db4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d102      	bne.n	8009dc2 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8009dbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009dbe:	f003 fb7b 	bl	800d4b8 <tcp_output>
  while (pcb != NULL) {
 8009dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	f47f ad5c 	bne.w	8009882 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8009dce:	4b0b      	ldr	r3, [pc, #44]	; (8009dfc <tcp_slowtmr+0x5a8>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8009dd4:	e067      	b.n	8009ea6 <tcp_slowtmr+0x652>
 8009dd6:	bf00      	nop
 8009dd8:	2000ef5c 	.word	0x2000ef5c
 8009ddc:	10624dd3 	.word	0x10624dd3
 8009de0:	000124f8 	.word	0x000124f8
 8009de4:	2000ef58 	.word	0x2000ef58
 8009de8:	08015318 	.word	0x08015318
 8009dec:	08015750 	.word	0x08015750
 8009df0:	0801535c 	.word	0x0801535c
 8009df4:	0801577c 	.word	0x0801577c
 8009df8:	2000ef54 	.word	0x2000ef54
 8009dfc:	2000ef68 	.word	0x2000ef68
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e02:	7d1b      	ldrb	r3, [r3, #20]
 8009e04:	2b0a      	cmp	r3, #10
 8009e06:	d006      	beq.n	8009e16 <tcp_slowtmr+0x5c2>
 8009e08:	4b2b      	ldr	r3, [pc, #172]	; (8009eb8 <tcp_slowtmr+0x664>)
 8009e0a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8009e0e:	492b      	ldr	r1, [pc, #172]	; (8009ebc <tcp_slowtmr+0x668>)
 8009e10:	482b      	ldr	r0, [pc, #172]	; (8009ec0 <tcp_slowtmr+0x66c>)
 8009e12:	f009 fd23 	bl	801385c <iprintf>
    pcb_remove = 0;
 8009e16:	2300      	movs	r3, #0
 8009e18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009e1c:	4b29      	ldr	r3, [pc, #164]	; (8009ec4 <tcp_slowtmr+0x670>)
 8009e1e:	681a      	ldr	r2, [r3, #0]
 8009e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e22:	6a1b      	ldr	r3, [r3, #32]
 8009e24:	1ad3      	subs	r3, r2, r3
 8009e26:	2bf0      	cmp	r3, #240	; 0xf0
 8009e28:	d904      	bls.n	8009e34 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8009e2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e2e:	3301      	adds	r3, #1
 8009e30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009e34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d02f      	beq.n	8009e9c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8009e3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e3e:	f000 fb2b 	bl	800a498 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8009e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d010      	beq.n	8009e6a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009e48:	4b1f      	ldr	r3, [pc, #124]	; (8009ec8 <tcp_slowtmr+0x674>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e4e:	429a      	cmp	r2, r3
 8009e50:	d106      	bne.n	8009e60 <tcp_slowtmr+0x60c>
 8009e52:	4b19      	ldr	r3, [pc, #100]	; (8009eb8 <tcp_slowtmr+0x664>)
 8009e54:	f240 52af 	movw	r2, #1455	; 0x5af
 8009e58:	491c      	ldr	r1, [pc, #112]	; (8009ecc <tcp_slowtmr+0x678>)
 8009e5a:	4819      	ldr	r0, [pc, #100]	; (8009ec0 <tcp_slowtmr+0x66c>)
 8009e5c:	f009 fcfe 	bl	801385c <iprintf>
        prev->next = pcb->next;
 8009e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e62:	68da      	ldr	r2, [r3, #12]
 8009e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e66:	60da      	str	r2, [r3, #12]
 8009e68:	e00f      	b.n	8009e8a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8009e6a:	4b17      	ldr	r3, [pc, #92]	; (8009ec8 <tcp_slowtmr+0x674>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d006      	beq.n	8009e82 <tcp_slowtmr+0x62e>
 8009e74:	4b10      	ldr	r3, [pc, #64]	; (8009eb8 <tcp_slowtmr+0x664>)
 8009e76:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8009e7a:	4915      	ldr	r1, [pc, #84]	; (8009ed0 <tcp_slowtmr+0x67c>)
 8009e7c:	4810      	ldr	r0, [pc, #64]	; (8009ec0 <tcp_slowtmr+0x66c>)
 8009e7e:	f009 fced 	bl	801385c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8009e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e84:	68db      	ldr	r3, [r3, #12]
 8009e86:	4a10      	ldr	r2, [pc, #64]	; (8009ec8 <tcp_slowtmr+0x674>)
 8009e88:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8009e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e8c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8009e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e90:	68db      	ldr	r3, [r3, #12]
 8009e92:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8009e94:	69f8      	ldr	r0, [r7, #28]
 8009e96:	f7ff f93f 	bl	8009118 <tcp_free>
 8009e9a:	e004      	b.n	8009ea6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8009e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e9e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ea2:	68db      	ldr	r3, [r3, #12]
 8009ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8009ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d1a9      	bne.n	8009e00 <tcp_slowtmr+0x5ac>
    }
  }
}
 8009eac:	bf00      	nop
 8009eae:	bf00      	nop
 8009eb0:	3730      	adds	r7, #48	; 0x30
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bdb0      	pop	{r4, r5, r7, pc}
 8009eb6:	bf00      	nop
 8009eb8:	08015318 	.word	0x08015318
 8009ebc:	080157a8 	.word	0x080157a8
 8009ec0:	0801535c 	.word	0x0801535c
 8009ec4:	2000ef5c 	.word	0x2000ef5c
 8009ec8:	2000ef68 	.word	0x2000ef68
 8009ecc:	080157d8 	.word	0x080157d8
 8009ed0:	08015800 	.word	0x08015800

08009ed4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b082      	sub	sp, #8
 8009ed8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8009eda:	4b2d      	ldr	r3, [pc, #180]	; (8009f90 <tcp_fasttmr+0xbc>)
 8009edc:	781b      	ldrb	r3, [r3, #0]
 8009ede:	3301      	adds	r3, #1
 8009ee0:	b2da      	uxtb	r2, r3
 8009ee2:	4b2b      	ldr	r3, [pc, #172]	; (8009f90 <tcp_fasttmr+0xbc>)
 8009ee4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8009ee6:	4b2b      	ldr	r3, [pc, #172]	; (8009f94 <tcp_fasttmr+0xc0>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009eec:	e048      	b.n	8009f80 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	7f9a      	ldrb	r2, [r3, #30]
 8009ef2:	4b27      	ldr	r3, [pc, #156]	; (8009f90 <tcp_fasttmr+0xbc>)
 8009ef4:	781b      	ldrb	r3, [r3, #0]
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d03f      	beq.n	8009f7a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8009efa:	4b25      	ldr	r3, [pc, #148]	; (8009f90 <tcp_fasttmr+0xbc>)
 8009efc:	781a      	ldrb	r2, [r3, #0]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	8b5b      	ldrh	r3, [r3, #26]
 8009f06:	f003 0301 	and.w	r3, r3, #1
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d010      	beq.n	8009f30 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	8b5b      	ldrh	r3, [r3, #26]
 8009f12:	f043 0302 	orr.w	r3, r3, #2
 8009f16:	b29a      	uxth	r2, r3
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f003 facb 	bl	800d4b8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	8b5b      	ldrh	r3, [r3, #26]
 8009f26:	f023 0303 	bic.w	r3, r3, #3
 8009f2a:	b29a      	uxth	r2, r3
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	8b5b      	ldrh	r3, [r3, #26]
 8009f34:	f003 0308 	and.w	r3, r3, #8
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d009      	beq.n	8009f50 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	8b5b      	ldrh	r3, [r3, #26]
 8009f40:	f023 0308 	bic.w	r3, r3, #8
 8009f44:	b29a      	uxth	r2, r3
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f7ff fa78 	bl	8009440 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	68db      	ldr	r3, [r3, #12]
 8009f54:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d00a      	beq.n	8009f74 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8009f5e:	4b0e      	ldr	r3, [pc, #56]	; (8009f98 <tcp_fasttmr+0xc4>)
 8009f60:	2200      	movs	r2, #0
 8009f62:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f000 f819 	bl	8009f9c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8009f6a:	4b0b      	ldr	r3, [pc, #44]	; (8009f98 <tcp_fasttmr+0xc4>)
 8009f6c:	781b      	ldrb	r3, [r3, #0]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d000      	beq.n	8009f74 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8009f72:	e7b8      	b.n	8009ee6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	607b      	str	r3, [r7, #4]
 8009f78:	e002      	b.n	8009f80 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	68db      	ldr	r3, [r3, #12]
 8009f7e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d1b3      	bne.n	8009eee <tcp_fasttmr+0x1a>
    }
  }
}
 8009f86:	bf00      	nop
 8009f88:	bf00      	nop
 8009f8a:	3708      	adds	r7, #8
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}
 8009f90:	20008506 	.word	0x20008506
 8009f94:	2000ef58 	.word	0x2000ef58
 8009f98:	2000ef54 	.word	0x2000ef54

08009f9c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8009f9c:	b590      	push	{r4, r7, lr}
 8009f9e:	b085      	sub	sp, #20
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d109      	bne.n	8009fbe <tcp_process_refused_data+0x22>
 8009faa:	4b37      	ldr	r3, [pc, #220]	; (800a088 <tcp_process_refused_data+0xec>)
 8009fac:	f240 6209 	movw	r2, #1545	; 0x609
 8009fb0:	4936      	ldr	r1, [pc, #216]	; (800a08c <tcp_process_refused_data+0xf0>)
 8009fb2:	4837      	ldr	r0, [pc, #220]	; (800a090 <tcp_process_refused_data+0xf4>)
 8009fb4:	f009 fc52 	bl	801385c <iprintf>
 8009fb8:	f06f 030f 	mvn.w	r3, #15
 8009fbc:	e060      	b.n	800a080 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009fc2:	7b5b      	ldrb	r3, [r3, #13]
 8009fc4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009fca:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d00b      	beq.n	8009ff4 <tcp_process_refused_data+0x58>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6918      	ldr	r0, [r3, #16]
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	68ba      	ldr	r2, [r7, #8]
 8009fea:	6879      	ldr	r1, [r7, #4]
 8009fec:	47a0      	blx	r4
 8009fee:	4603      	mov	r3, r0
 8009ff0:	73fb      	strb	r3, [r7, #15]
 8009ff2:	e007      	b.n	800a004 <tcp_process_refused_data+0x68>
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	68ba      	ldr	r2, [r7, #8]
 8009ff8:	6879      	ldr	r1, [r7, #4]
 8009ffa:	2000      	movs	r0, #0
 8009ffc:	f000 f8a4 	bl	800a148 <tcp_recv_null>
 800a000:	4603      	mov	r3, r0
 800a002:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800a004:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d12a      	bne.n	800a062 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800a00c:	7bbb      	ldrb	r3, [r7, #14]
 800a00e:	f003 0320 	and.w	r3, r3, #32
 800a012:	2b00      	cmp	r3, #0
 800a014:	d033      	beq.n	800a07e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a01a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a01e:	d005      	beq.n	800a02c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a024:	3301      	adds	r3, #1
 800a026:	b29a      	uxth	r2, r3
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a032:	2b00      	cmp	r3, #0
 800a034:	d00b      	beq.n	800a04e <tcp_process_refused_data+0xb2>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6918      	ldr	r0, [r3, #16]
 800a040:	2300      	movs	r3, #0
 800a042:	2200      	movs	r2, #0
 800a044:	6879      	ldr	r1, [r7, #4]
 800a046:	47a0      	blx	r4
 800a048:	4603      	mov	r3, r0
 800a04a:	73fb      	strb	r3, [r7, #15]
 800a04c:	e001      	b.n	800a052 <tcp_process_refused_data+0xb6>
 800a04e:	2300      	movs	r3, #0
 800a050:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800a052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a056:	f113 0f0d 	cmn.w	r3, #13
 800a05a:	d110      	bne.n	800a07e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800a05c:	f06f 030c 	mvn.w	r3, #12
 800a060:	e00e      	b.n	800a080 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800a062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a066:	f113 0f0d 	cmn.w	r3, #13
 800a06a:	d102      	bne.n	800a072 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800a06c:	f06f 030c 	mvn.w	r3, #12
 800a070:	e006      	b.n	800a080 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	68ba      	ldr	r2, [r7, #8]
 800a076:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800a078:	f06f 0304 	mvn.w	r3, #4
 800a07c:	e000      	b.n	800a080 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800a07e:	2300      	movs	r3, #0
}
 800a080:	4618      	mov	r0, r3
 800a082:	3714      	adds	r7, #20
 800a084:	46bd      	mov	sp, r7
 800a086:	bd90      	pop	{r4, r7, pc}
 800a088:	08015318 	.word	0x08015318
 800a08c:	08015828 	.word	0x08015828
 800a090:	0801535c 	.word	0x0801535c

0800a094 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b084      	sub	sp, #16
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800a09c:	e007      	b.n	800a0ae <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f000 f80a 	bl	800a0be <tcp_seg_free>
    seg = next;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d1f4      	bne.n	800a09e <tcp_segs_free+0xa>
  }
}
 800a0b4:	bf00      	nop
 800a0b6:	bf00      	nop
 800a0b8:	3710      	adds	r7, #16
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}

0800a0be <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800a0be:	b580      	push	{r7, lr}
 800a0c0:	b082      	sub	sp, #8
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d00c      	beq.n	800a0e6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d004      	beq.n	800a0de <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f7fe fd61 	bl	8008ba0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800a0de:	6879      	ldr	r1, [r7, #4]
 800a0e0:	2003      	movs	r0, #3
 800a0e2:	f7fd fead 	bl	8007e40 <memp_free>
  }
}
 800a0e6:	bf00      	nop
 800a0e8:	3708      	adds	r7, #8
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
	...

0800a0f0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b084      	sub	sp, #16
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d106      	bne.n	800a10c <tcp_seg_copy+0x1c>
 800a0fe:	4b0f      	ldr	r3, [pc, #60]	; (800a13c <tcp_seg_copy+0x4c>)
 800a100:	f240 6282 	movw	r2, #1666	; 0x682
 800a104:	490e      	ldr	r1, [pc, #56]	; (800a140 <tcp_seg_copy+0x50>)
 800a106:	480f      	ldr	r0, [pc, #60]	; (800a144 <tcp_seg_copy+0x54>)
 800a108:	f009 fba8 	bl	801385c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800a10c:	2003      	movs	r0, #3
 800a10e:	f7fd fe45 	bl	8007d9c <memp_malloc>
 800a112:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d101      	bne.n	800a11e <tcp_seg_copy+0x2e>
    return NULL;
 800a11a:	2300      	movs	r3, #0
 800a11c:	e00a      	b.n	800a134 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800a11e:	2210      	movs	r2, #16
 800a120:	6879      	ldr	r1, [r7, #4]
 800a122:	68f8      	ldr	r0, [r7, #12]
 800a124:	f009 fb29 	bl	801377a <memcpy>
  pbuf_ref(cseg->p);
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	4618      	mov	r0, r3
 800a12e:	f7fe fddd 	bl	8008cec <pbuf_ref>
  return cseg;
 800a132:	68fb      	ldr	r3, [r7, #12]
}
 800a134:	4618      	mov	r0, r3
 800a136:	3710      	adds	r7, #16
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}
 800a13c:	08015318 	.word	0x08015318
 800a140:	0801586c 	.word	0x0801586c
 800a144:	0801535c 	.word	0x0801535c

0800a148 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b084      	sub	sp, #16
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	60f8      	str	r0, [r7, #12]
 800a150:	60b9      	str	r1, [r7, #8]
 800a152:	607a      	str	r2, [r7, #4]
 800a154:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d109      	bne.n	800a170 <tcp_recv_null+0x28>
 800a15c:	4b12      	ldr	r3, [pc, #72]	; (800a1a8 <tcp_recv_null+0x60>)
 800a15e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800a162:	4912      	ldr	r1, [pc, #72]	; (800a1ac <tcp_recv_null+0x64>)
 800a164:	4812      	ldr	r0, [pc, #72]	; (800a1b0 <tcp_recv_null+0x68>)
 800a166:	f009 fb79 	bl	801385c <iprintf>
 800a16a:	f06f 030f 	mvn.w	r3, #15
 800a16e:	e016      	b.n	800a19e <tcp_recv_null+0x56>

  if (p != NULL) {
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d009      	beq.n	800a18a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	891b      	ldrh	r3, [r3, #8]
 800a17a:	4619      	mov	r1, r3
 800a17c:	68b8      	ldr	r0, [r7, #8]
 800a17e:	f7ff fb19 	bl	80097b4 <tcp_recved>
    pbuf_free(p);
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f7fe fd0c 	bl	8008ba0 <pbuf_free>
 800a188:	e008      	b.n	800a19c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800a18a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d104      	bne.n	800a19c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800a192:	68b8      	ldr	r0, [r7, #8]
 800a194:	f7ff f9be 	bl	8009514 <tcp_close>
 800a198:	4603      	mov	r3, r0
 800a19a:	e000      	b.n	800a19e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800a19c:	2300      	movs	r3, #0
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3710      	adds	r7, #16
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	bf00      	nop
 800a1a8:	08015318 	.word	0x08015318
 800a1ac:	08015888 	.word	0x08015888
 800a1b0:	0801535c 	.word	0x0801535c

0800a1b4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b086      	sub	sp, #24
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800a1be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	db01      	blt.n	800a1ca <tcp_kill_prio+0x16>
 800a1c6:	79fb      	ldrb	r3, [r7, #7]
 800a1c8:	e000      	b.n	800a1cc <tcp_kill_prio+0x18>
 800a1ca:	237f      	movs	r3, #127	; 0x7f
 800a1cc:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800a1ce:	7afb      	ldrb	r3, [r7, #11]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d034      	beq.n	800a23e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800a1d4:	7afb      	ldrb	r3, [r7, #11]
 800a1d6:	3b01      	subs	r3, #1
 800a1d8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a1e2:	4b19      	ldr	r3, [pc, #100]	; (800a248 <tcp_kill_prio+0x94>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	617b      	str	r3, [r7, #20]
 800a1e8:	e01f      	b.n	800a22a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	7d5b      	ldrb	r3, [r3, #21]
 800a1ee:	7afa      	ldrb	r2, [r7, #11]
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d80c      	bhi.n	800a20e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800a1f8:	7afa      	ldrb	r2, [r7, #11]
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d112      	bne.n	800a224 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a1fe:	4b13      	ldr	r3, [pc, #76]	; (800a24c <tcp_kill_prio+0x98>)
 800a200:	681a      	ldr	r2, [r3, #0]
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	6a1b      	ldr	r3, [r3, #32]
 800a206:	1ad3      	subs	r3, r2, r3
 800a208:	68fa      	ldr	r2, [r7, #12]
 800a20a:	429a      	cmp	r2, r3
 800a20c:	d80a      	bhi.n	800a224 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800a20e:	4b0f      	ldr	r3, [pc, #60]	; (800a24c <tcp_kill_prio+0x98>)
 800a210:	681a      	ldr	r2, [r3, #0]
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	6a1b      	ldr	r3, [r3, #32]
 800a216:	1ad3      	subs	r3, r2, r3
 800a218:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	7d5b      	ldrb	r3, [r3, #21]
 800a222:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	68db      	ldr	r3, [r3, #12]
 800a228:	617b      	str	r3, [r7, #20]
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d1dc      	bne.n	800a1ea <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d004      	beq.n	800a240 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a236:	6938      	ldr	r0, [r7, #16]
 800a238:	f7ff fa56 	bl	80096e8 <tcp_abort>
 800a23c:	e000      	b.n	800a240 <tcp_kill_prio+0x8c>
    return;
 800a23e:	bf00      	nop
  }
}
 800a240:	3718      	adds	r7, #24
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
 800a246:	bf00      	nop
 800a248:	2000ef58 	.word	0x2000ef58
 800a24c:	2000ef5c 	.word	0x2000ef5c

0800a250 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b086      	sub	sp, #24
 800a254:	af00      	add	r7, sp, #0
 800a256:	4603      	mov	r3, r0
 800a258:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800a25a:	79fb      	ldrb	r3, [r7, #7]
 800a25c:	2b08      	cmp	r3, #8
 800a25e:	d009      	beq.n	800a274 <tcp_kill_state+0x24>
 800a260:	79fb      	ldrb	r3, [r7, #7]
 800a262:	2b09      	cmp	r3, #9
 800a264:	d006      	beq.n	800a274 <tcp_kill_state+0x24>
 800a266:	4b1a      	ldr	r3, [pc, #104]	; (800a2d0 <tcp_kill_state+0x80>)
 800a268:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800a26c:	4919      	ldr	r1, [pc, #100]	; (800a2d4 <tcp_kill_state+0x84>)
 800a26e:	481a      	ldr	r0, [pc, #104]	; (800a2d8 <tcp_kill_state+0x88>)
 800a270:	f009 faf4 	bl	801385c <iprintf>

  inactivity = 0;
 800a274:	2300      	movs	r3, #0
 800a276:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a278:	2300      	movs	r3, #0
 800a27a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a27c:	4b17      	ldr	r3, [pc, #92]	; (800a2dc <tcp_kill_state+0x8c>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	617b      	str	r3, [r7, #20]
 800a282:	e017      	b.n	800a2b4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	7d1b      	ldrb	r3, [r3, #20]
 800a288:	79fa      	ldrb	r2, [r7, #7]
 800a28a:	429a      	cmp	r2, r3
 800a28c:	d10f      	bne.n	800a2ae <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a28e:	4b14      	ldr	r3, [pc, #80]	; (800a2e0 <tcp_kill_state+0x90>)
 800a290:	681a      	ldr	r2, [r3, #0]
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	6a1b      	ldr	r3, [r3, #32]
 800a296:	1ad3      	subs	r3, r2, r3
 800a298:	68fa      	ldr	r2, [r7, #12]
 800a29a:	429a      	cmp	r2, r3
 800a29c:	d807      	bhi.n	800a2ae <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800a29e:	4b10      	ldr	r3, [pc, #64]	; (800a2e0 <tcp_kill_state+0x90>)
 800a2a0:	681a      	ldr	r2, [r3, #0]
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	6a1b      	ldr	r3, [r3, #32]
 800a2a6:	1ad3      	subs	r3, r2, r3
 800a2a8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	68db      	ldr	r3, [r3, #12]
 800a2b2:	617b      	str	r3, [r7, #20]
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d1e4      	bne.n	800a284 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d003      	beq.n	800a2c8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800a2c0:	2100      	movs	r1, #0
 800a2c2:	6938      	ldr	r0, [r7, #16]
 800a2c4:	f7ff f952 	bl	800956c <tcp_abandon>
  }
}
 800a2c8:	bf00      	nop
 800a2ca:	3718      	adds	r7, #24
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}
 800a2d0:	08015318 	.word	0x08015318
 800a2d4:	080158a4 	.word	0x080158a4
 800a2d8:	0801535c 	.word	0x0801535c
 800a2dc:	2000ef58 	.word	0x2000ef58
 800a2e0:	2000ef5c 	.word	0x2000ef5c

0800a2e4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b084      	sub	sp, #16
 800a2e8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a2f2:	4b12      	ldr	r3, [pc, #72]	; (800a33c <tcp_kill_timewait+0x58>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	60fb      	str	r3, [r7, #12]
 800a2f8:	e012      	b.n	800a320 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a2fa:	4b11      	ldr	r3, [pc, #68]	; (800a340 <tcp_kill_timewait+0x5c>)
 800a2fc:	681a      	ldr	r2, [r3, #0]
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	6a1b      	ldr	r3, [r3, #32]
 800a302:	1ad3      	subs	r3, r2, r3
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	429a      	cmp	r2, r3
 800a308:	d807      	bhi.n	800a31a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800a30a:	4b0d      	ldr	r3, [pc, #52]	; (800a340 <tcp_kill_timewait+0x5c>)
 800a30c:	681a      	ldr	r2, [r3, #0]
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	6a1b      	ldr	r3, [r3, #32]
 800a312:	1ad3      	subs	r3, r2, r3
 800a314:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	68db      	ldr	r3, [r3, #12]
 800a31e:	60fb      	str	r3, [r7, #12]
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d1e9      	bne.n	800a2fa <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d002      	beq.n	800a332 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a32c:	68b8      	ldr	r0, [r7, #8]
 800a32e:	f7ff f9db 	bl	80096e8 <tcp_abort>
  }
}
 800a332:	bf00      	nop
 800a334:	3710      	adds	r7, #16
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
 800a33a:	bf00      	nop
 800a33c:	2000ef68 	.word	0x2000ef68
 800a340:	2000ef5c 	.word	0x2000ef5c

0800a344 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b082      	sub	sp, #8
 800a348:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800a34a:	4b10      	ldr	r3, [pc, #64]	; (800a38c <tcp_handle_closepend+0x48>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a350:	e014      	b.n	800a37c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	68db      	ldr	r3, [r3, #12]
 800a356:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	8b5b      	ldrh	r3, [r3, #26]
 800a35c:	f003 0308 	and.w	r3, r3, #8
 800a360:	2b00      	cmp	r3, #0
 800a362:	d009      	beq.n	800a378 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	8b5b      	ldrh	r3, [r3, #26]
 800a368:	f023 0308 	bic.w	r3, r3, #8
 800a36c:	b29a      	uxth	r2, r3
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f7ff f864 	bl	8009440 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d1e7      	bne.n	800a352 <tcp_handle_closepend+0xe>
  }
}
 800a382:	bf00      	nop
 800a384:	bf00      	nop
 800a386:	3708      	adds	r7, #8
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}
 800a38c:	2000ef58 	.word	0x2000ef58

0800a390 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b084      	sub	sp, #16
 800a394:	af00      	add	r7, sp, #0
 800a396:	4603      	mov	r3, r0
 800a398:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a39a:	2001      	movs	r0, #1
 800a39c:	f7fd fcfe 	bl	8007d9c <memp_malloc>
 800a3a0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d126      	bne.n	800a3f6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800a3a8:	f7ff ffcc 	bl	800a344 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800a3ac:	f7ff ff9a 	bl	800a2e4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a3b0:	2001      	movs	r0, #1
 800a3b2:	f7fd fcf3 	bl	8007d9c <memp_malloc>
 800a3b6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d11b      	bne.n	800a3f6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800a3be:	2009      	movs	r0, #9
 800a3c0:	f7ff ff46 	bl	800a250 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a3c4:	2001      	movs	r0, #1
 800a3c6:	f7fd fce9 	bl	8007d9c <memp_malloc>
 800a3ca:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d111      	bne.n	800a3f6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800a3d2:	2008      	movs	r0, #8
 800a3d4:	f7ff ff3c 	bl	800a250 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a3d8:	2001      	movs	r0, #1
 800a3da:	f7fd fcdf 	bl	8007d9c <memp_malloc>
 800a3de:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d107      	bne.n	800a3f6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800a3e6:	79fb      	ldrb	r3, [r7, #7]
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f7ff fee3 	bl	800a1b4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a3ee:	2001      	movs	r0, #1
 800a3f0:	f7fd fcd4 	bl	8007d9c <memp_malloc>
 800a3f4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d03f      	beq.n	800a47c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800a3fc:	229c      	movs	r2, #156	; 0x9c
 800a3fe:	2100      	movs	r1, #0
 800a400:	68f8      	ldr	r0, [r7, #12]
 800a402:	f009 f9c8 	bl	8013796 <memset>
    pcb->prio = prio;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	79fa      	ldrb	r2, [r7, #7]
 800a40a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a412:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a41c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	22ff      	movs	r2, #255	; 0xff
 800a42a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a432:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2206      	movs	r2, #6
 800a438:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	2206      	movs	r2, #6
 800a440:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a448:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	2201      	movs	r2, #1
 800a44e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800a452:	4b0d      	ldr	r3, [pc, #52]	; (800a488 <tcp_alloc+0xf8>)
 800a454:	681a      	ldr	r2, [r3, #0]
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800a45a:	4b0c      	ldr	r3, [pc, #48]	; (800a48c <tcp_alloc+0xfc>)
 800a45c:	781a      	ldrb	r2, [r3, #0]
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a468:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	4a08      	ldr	r2, [pc, #32]	; (800a490 <tcp_alloc+0x100>)
 800a470:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	4a07      	ldr	r2, [pc, #28]	; (800a494 <tcp_alloc+0x104>)
 800a478:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800a47c:	68fb      	ldr	r3, [r7, #12]
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3710      	adds	r7, #16
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}
 800a486:	bf00      	nop
 800a488:	2000ef5c 	.word	0x2000ef5c
 800a48c:	20008506 	.word	0x20008506
 800a490:	0800a149 	.word	0x0800a149
 800a494:	006ddd00 	.word	0x006ddd00

0800a498 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b082      	sub	sp, #8
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d107      	bne.n	800a4b6 <tcp_pcb_purge+0x1e>
 800a4a6:	4b21      	ldr	r3, [pc, #132]	; (800a52c <tcp_pcb_purge+0x94>)
 800a4a8:	f640 0251 	movw	r2, #2129	; 0x851
 800a4ac:	4920      	ldr	r1, [pc, #128]	; (800a530 <tcp_pcb_purge+0x98>)
 800a4ae:	4821      	ldr	r0, [pc, #132]	; (800a534 <tcp_pcb_purge+0x9c>)
 800a4b0:	f009 f9d4 	bl	801385c <iprintf>
 800a4b4:	e037      	b.n	800a526 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	7d1b      	ldrb	r3, [r3, #20]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d033      	beq.n	800a526 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800a4c2:	2b0a      	cmp	r3, #10
 800a4c4:	d02f      	beq.n	800a526 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800a4ca:	2b01      	cmp	r3, #1
 800a4cc:	d02b      	beq.n	800a526 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d007      	beq.n	800a4e6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f7fe fb60 	bl	8008ba0 <pbuf_free>
      pcb->refused_data = NULL;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d002      	beq.n	800a4f4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 f986 	bl	800a800 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a4fa:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a500:	4618      	mov	r0, r3
 800a502:	f7ff fdc7 	bl	800a094 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a50a:	4618      	mov	r0, r3
 800a50c:	f7ff fdc2 	bl	800a094 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2200      	movs	r2, #0
 800a514:	66da      	str	r2, [r3, #108]	; 0x6c
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2200      	movs	r2, #0
 800a522:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800a526:	3708      	adds	r7, #8
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}
 800a52c:	08015318 	.word	0x08015318
 800a530:	08015964 	.word	0x08015964
 800a534:	0801535c 	.word	0x0801535c

0800a538 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d106      	bne.n	800a556 <tcp_pcb_remove+0x1e>
 800a548:	4b3e      	ldr	r3, [pc, #248]	; (800a644 <tcp_pcb_remove+0x10c>)
 800a54a:	f640 0283 	movw	r2, #2179	; 0x883
 800a54e:	493e      	ldr	r1, [pc, #248]	; (800a648 <tcp_pcb_remove+0x110>)
 800a550:	483e      	ldr	r0, [pc, #248]	; (800a64c <tcp_pcb_remove+0x114>)
 800a552:	f009 f983 	bl	801385c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d106      	bne.n	800a56a <tcp_pcb_remove+0x32>
 800a55c:	4b39      	ldr	r3, [pc, #228]	; (800a644 <tcp_pcb_remove+0x10c>)
 800a55e:	f640 0284 	movw	r2, #2180	; 0x884
 800a562:	493b      	ldr	r1, [pc, #236]	; (800a650 <tcp_pcb_remove+0x118>)
 800a564:	4839      	ldr	r0, [pc, #228]	; (800a64c <tcp_pcb_remove+0x114>)
 800a566:	f009 f979 	bl	801385c <iprintf>

  TCP_RMV(pcblist, pcb);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	683a      	ldr	r2, [r7, #0]
 800a570:	429a      	cmp	r2, r3
 800a572:	d105      	bne.n	800a580 <tcp_pcb_remove+0x48>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	68da      	ldr	r2, [r3, #12]
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	601a      	str	r2, [r3, #0]
 800a57e:	e013      	b.n	800a5a8 <tcp_pcb_remove+0x70>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	60fb      	str	r3, [r7, #12]
 800a586:	e00c      	b.n	800a5a2 <tcp_pcb_remove+0x6a>
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	68db      	ldr	r3, [r3, #12]
 800a58c:	683a      	ldr	r2, [r7, #0]
 800a58e:	429a      	cmp	r2, r3
 800a590:	d104      	bne.n	800a59c <tcp_pcb_remove+0x64>
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	68da      	ldr	r2, [r3, #12]
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	60da      	str	r2, [r3, #12]
 800a59a:	e005      	b.n	800a5a8 <tcp_pcb_remove+0x70>
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	68db      	ldr	r3, [r3, #12]
 800a5a0:	60fb      	str	r3, [r7, #12]
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d1ef      	bne.n	800a588 <tcp_pcb_remove+0x50>
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800a5ae:	6838      	ldr	r0, [r7, #0]
 800a5b0:	f7ff ff72 	bl	800a498 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	7d1b      	ldrb	r3, [r3, #20]
 800a5b8:	2b0a      	cmp	r3, #10
 800a5ba:	d013      	beq.n	800a5e4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800a5c0:	2b01      	cmp	r3, #1
 800a5c2:	d00f      	beq.n	800a5e4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	8b5b      	ldrh	r3, [r3, #26]
 800a5c8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d009      	beq.n	800a5e4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	8b5b      	ldrh	r3, [r3, #26]
 800a5d4:	f043 0302 	orr.w	r3, r3, #2
 800a5d8:	b29a      	uxth	r2, r3
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a5de:	6838      	ldr	r0, [r7, #0]
 800a5e0:	f002 ff6a 	bl	800d4b8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	7d1b      	ldrb	r3, [r3, #20]
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d020      	beq.n	800a62e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d006      	beq.n	800a602 <tcp_pcb_remove+0xca>
 800a5f4:	4b13      	ldr	r3, [pc, #76]	; (800a644 <tcp_pcb_remove+0x10c>)
 800a5f6:	f640 0293 	movw	r2, #2195	; 0x893
 800a5fa:	4916      	ldr	r1, [pc, #88]	; (800a654 <tcp_pcb_remove+0x11c>)
 800a5fc:	4813      	ldr	r0, [pc, #76]	; (800a64c <tcp_pcb_remove+0x114>)
 800a5fe:	f009 f92d 	bl	801385c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a606:	2b00      	cmp	r3, #0
 800a608:	d006      	beq.n	800a618 <tcp_pcb_remove+0xe0>
 800a60a:	4b0e      	ldr	r3, [pc, #56]	; (800a644 <tcp_pcb_remove+0x10c>)
 800a60c:	f640 0294 	movw	r2, #2196	; 0x894
 800a610:	4911      	ldr	r1, [pc, #68]	; (800a658 <tcp_pcb_remove+0x120>)
 800a612:	480e      	ldr	r0, [pc, #56]	; (800a64c <tcp_pcb_remove+0x114>)
 800a614:	f009 f922 	bl	801385c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d006      	beq.n	800a62e <tcp_pcb_remove+0xf6>
 800a620:	4b08      	ldr	r3, [pc, #32]	; (800a644 <tcp_pcb_remove+0x10c>)
 800a622:	f640 0296 	movw	r2, #2198	; 0x896
 800a626:	490d      	ldr	r1, [pc, #52]	; (800a65c <tcp_pcb_remove+0x124>)
 800a628:	4808      	ldr	r0, [pc, #32]	; (800a64c <tcp_pcb_remove+0x114>)
 800a62a:	f009 f917 	bl	801385c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	2200      	movs	r2, #0
 800a632:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	2200      	movs	r2, #0
 800a638:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800a63a:	bf00      	nop
 800a63c:	3710      	adds	r7, #16
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
 800a642:	bf00      	nop
 800a644:	08015318 	.word	0x08015318
 800a648:	08015980 	.word	0x08015980
 800a64c:	0801535c 	.word	0x0801535c
 800a650:	0801599c 	.word	0x0801599c
 800a654:	080159bc 	.word	0x080159bc
 800a658:	080159d4 	.word	0x080159d4
 800a65c:	080159f0 	.word	0x080159f0

0800a660 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b082      	sub	sp, #8
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d106      	bne.n	800a67c <tcp_next_iss+0x1c>
 800a66e:	4b0a      	ldr	r3, [pc, #40]	; (800a698 <tcp_next_iss+0x38>)
 800a670:	f640 02af 	movw	r2, #2223	; 0x8af
 800a674:	4909      	ldr	r1, [pc, #36]	; (800a69c <tcp_next_iss+0x3c>)
 800a676:	480a      	ldr	r0, [pc, #40]	; (800a6a0 <tcp_next_iss+0x40>)
 800a678:	f009 f8f0 	bl	801385c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800a67c:	4b09      	ldr	r3, [pc, #36]	; (800a6a4 <tcp_next_iss+0x44>)
 800a67e:	681a      	ldr	r2, [r3, #0]
 800a680:	4b09      	ldr	r3, [pc, #36]	; (800a6a8 <tcp_next_iss+0x48>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4413      	add	r3, r2
 800a686:	4a07      	ldr	r2, [pc, #28]	; (800a6a4 <tcp_next_iss+0x44>)
 800a688:	6013      	str	r3, [r2, #0]
  return iss;
 800a68a:	4b06      	ldr	r3, [pc, #24]	; (800a6a4 <tcp_next_iss+0x44>)
 800a68c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3708      	adds	r7, #8
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}
 800a696:	bf00      	nop
 800a698:	08015318 	.word	0x08015318
 800a69c:	08015a08 	.word	0x08015a08
 800a6a0:	0801535c 	.word	0x0801535c
 800a6a4:	20000014 	.word	0x20000014
 800a6a8:	2000ef5c 	.word	0x2000ef5c

0800a6ac <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b086      	sub	sp, #24
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	60b9      	str	r1, [r7, #8]
 800a6b6:	607a      	str	r2, [r7, #4]
 800a6b8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d106      	bne.n	800a6ce <tcp_eff_send_mss_netif+0x22>
 800a6c0:	4b14      	ldr	r3, [pc, #80]	; (800a714 <tcp_eff_send_mss_netif+0x68>)
 800a6c2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800a6c6:	4914      	ldr	r1, [pc, #80]	; (800a718 <tcp_eff_send_mss_netif+0x6c>)
 800a6c8:	4814      	ldr	r0, [pc, #80]	; (800a71c <tcp_eff_send_mss_netif+0x70>)
 800a6ca:	f009 f8c7 	bl	801385c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d101      	bne.n	800a6d8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800a6d4:	89fb      	ldrh	r3, [r7, #14]
 800a6d6:	e019      	b.n	800a70c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6dc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800a6de:	8afb      	ldrh	r3, [r7, #22]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d012      	beq.n	800a70a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800a6e4:	2328      	movs	r3, #40	; 0x28
 800a6e6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800a6e8:	8afa      	ldrh	r2, [r7, #22]
 800a6ea:	8abb      	ldrh	r3, [r7, #20]
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d904      	bls.n	800a6fa <tcp_eff_send_mss_netif+0x4e>
 800a6f0:	8afa      	ldrh	r2, [r7, #22]
 800a6f2:	8abb      	ldrh	r3, [r7, #20]
 800a6f4:	1ad3      	subs	r3, r2, r3
 800a6f6:	b29b      	uxth	r3, r3
 800a6f8:	e000      	b.n	800a6fc <tcp_eff_send_mss_netif+0x50>
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800a6fe:	8a7a      	ldrh	r2, [r7, #18]
 800a700:	89fb      	ldrh	r3, [r7, #14]
 800a702:	4293      	cmp	r3, r2
 800a704:	bf28      	it	cs
 800a706:	4613      	movcs	r3, r2
 800a708:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800a70a:	89fb      	ldrh	r3, [r7, #14]
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3718      	adds	r7, #24
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}
 800a714:	08015318 	.word	0x08015318
 800a718:	08015a24 	.word	0x08015a24
 800a71c:	0801535c 	.word	0x0801535c

0800a720 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b084      	sub	sp, #16
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d119      	bne.n	800a768 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800a734:	4b10      	ldr	r3, [pc, #64]	; (800a778 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800a736:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800a73a:	4910      	ldr	r1, [pc, #64]	; (800a77c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800a73c:	4810      	ldr	r0, [pc, #64]	; (800a780 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800a73e:	f009 f88d 	bl	801385c <iprintf>

  while (pcb != NULL) {
 800a742:	e011      	b.n	800a768 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	681a      	ldr	r2, [r3, #0]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d108      	bne.n	800a762 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	68db      	ldr	r3, [r3, #12]
 800a754:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800a756:	68f8      	ldr	r0, [r7, #12]
 800a758:	f7fe ffc6 	bl	80096e8 <tcp_abort>
      pcb = next;
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	60fb      	str	r3, [r7, #12]
 800a760:	e002      	b.n	800a768 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	68db      	ldr	r3, [r3, #12]
 800a766:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d1ea      	bne.n	800a744 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800a76e:	bf00      	nop
 800a770:	bf00      	nop
 800a772:	3710      	adds	r7, #16
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}
 800a778:	08015318 	.word	0x08015318
 800a77c:	08015a4c 	.word	0x08015a4c
 800a780:	0801535c 	.word	0x0801535c

0800a784 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b084      	sub	sp, #16
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d02a      	beq.n	800a7ea <tcp_netif_ip_addr_changed+0x66>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d026      	beq.n	800a7ea <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800a79c:	4b15      	ldr	r3, [pc, #84]	; (800a7f4 <tcp_netif_ip_addr_changed+0x70>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4619      	mov	r1, r3
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f7ff ffbc 	bl	800a720 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800a7a8:	4b13      	ldr	r3, [pc, #76]	; (800a7f8 <tcp_netif_ip_addr_changed+0x74>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	4619      	mov	r1, r3
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f7ff ffb6 	bl	800a720 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d017      	beq.n	800a7ea <tcp_netif_ip_addr_changed+0x66>
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d013      	beq.n	800a7ea <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a7c2:	4b0e      	ldr	r3, [pc, #56]	; (800a7fc <tcp_netif_ip_addr_changed+0x78>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	60fb      	str	r3, [r7, #12]
 800a7c8:	e00c      	b.n	800a7e4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	681a      	ldr	r2, [r3, #0]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	d103      	bne.n	800a7de <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	681a      	ldr	r2, [r3, #0]
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	68db      	ldr	r3, [r3, #12]
 800a7e2:	60fb      	str	r3, [r7, #12]
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d1ef      	bne.n	800a7ca <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800a7ea:	bf00      	nop
 800a7ec:	3710      	adds	r7, #16
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}
 800a7f2:	bf00      	nop
 800a7f4:	2000ef58 	.word	0x2000ef58
 800a7f8:	2000ef64 	.word	0x2000ef64
 800a7fc:	2000ef60 	.word	0x2000ef60

0800a800 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b082      	sub	sp, #8
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d007      	beq.n	800a820 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a814:	4618      	mov	r0, r3
 800a816:	f7ff fc3d 	bl	800a094 <tcp_segs_free>
    pcb->ooseq = NULL;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2200      	movs	r2, #0
 800a81e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800a820:	bf00      	nop
 800a822:	3708      	adds	r7, #8
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}

0800a828 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800a828:	b590      	push	{r4, r7, lr}
 800a82a:	b08d      	sub	sp, #52	; 0x34
 800a82c:	af04      	add	r7, sp, #16
 800a82e:	6078      	str	r0, [r7, #4]
 800a830:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d105      	bne.n	800a844 <tcp_input+0x1c>
 800a838:	4b9b      	ldr	r3, [pc, #620]	; (800aaa8 <tcp_input+0x280>)
 800a83a:	2283      	movs	r2, #131	; 0x83
 800a83c:	499b      	ldr	r1, [pc, #620]	; (800aaac <tcp_input+0x284>)
 800a83e:	489c      	ldr	r0, [pc, #624]	; (800aab0 <tcp_input+0x288>)
 800a840:	f009 f80c 	bl	801385c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	685b      	ldr	r3, [r3, #4]
 800a848:	4a9a      	ldr	r2, [pc, #616]	; (800aab4 <tcp_input+0x28c>)
 800a84a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	895b      	ldrh	r3, [r3, #10]
 800a850:	2b13      	cmp	r3, #19
 800a852:	f240 83c4 	bls.w	800afde <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a856:	4b98      	ldr	r3, [pc, #608]	; (800aab8 <tcp_input+0x290>)
 800a858:	695b      	ldr	r3, [r3, #20]
 800a85a:	4a97      	ldr	r2, [pc, #604]	; (800aab8 <tcp_input+0x290>)
 800a85c:	6812      	ldr	r2, [r2, #0]
 800a85e:	4611      	mov	r1, r2
 800a860:	4618      	mov	r0, r3
 800a862:	f007 fdf9 	bl	8012458 <ip4_addr_isbroadcast_u32>
 800a866:	4603      	mov	r3, r0
 800a868:	2b00      	cmp	r3, #0
 800a86a:	f040 83ba 	bne.w	800afe2 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800a86e:	4b92      	ldr	r3, [pc, #584]	; (800aab8 <tcp_input+0x290>)
 800a870:	695b      	ldr	r3, [r3, #20]
 800a872:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a876:	2be0      	cmp	r3, #224	; 0xe0
 800a878:	f000 83b3 	beq.w	800afe2 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800a87c:	4b8d      	ldr	r3, [pc, #564]	; (800aab4 <tcp_input+0x28c>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	899b      	ldrh	r3, [r3, #12]
 800a882:	b29b      	uxth	r3, r3
 800a884:	4618      	mov	r0, r3
 800a886:	f7fc fdd3 	bl	8007430 <lwip_htons>
 800a88a:	4603      	mov	r3, r0
 800a88c:	0b1b      	lsrs	r3, r3, #12
 800a88e:	b29b      	uxth	r3, r3
 800a890:	b2db      	uxtb	r3, r3
 800a892:	009b      	lsls	r3, r3, #2
 800a894:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800a896:	7cbb      	ldrb	r3, [r7, #18]
 800a898:	2b13      	cmp	r3, #19
 800a89a:	f240 83a4 	bls.w	800afe6 <tcp_input+0x7be>
 800a89e:	7cbb      	ldrb	r3, [r7, #18]
 800a8a0:	b29a      	uxth	r2, r3
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	891b      	ldrh	r3, [r3, #8]
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	f200 839d 	bhi.w	800afe6 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a8ac:	7cbb      	ldrb	r3, [r7, #18]
 800a8ae:	b29b      	uxth	r3, r3
 800a8b0:	3b14      	subs	r3, #20
 800a8b2:	b29a      	uxth	r2, r3
 800a8b4:	4b81      	ldr	r3, [pc, #516]	; (800aabc <tcp_input+0x294>)
 800a8b6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800a8b8:	4b81      	ldr	r3, [pc, #516]	; (800aac0 <tcp_input+0x298>)
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	895a      	ldrh	r2, [r3, #10]
 800a8c2:	7cbb      	ldrb	r3, [r7, #18]
 800a8c4:	b29b      	uxth	r3, r3
 800a8c6:	429a      	cmp	r2, r3
 800a8c8:	d309      	bcc.n	800a8de <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800a8ca:	4b7c      	ldr	r3, [pc, #496]	; (800aabc <tcp_input+0x294>)
 800a8cc:	881a      	ldrh	r2, [r3, #0]
 800a8ce:	4b7d      	ldr	r3, [pc, #500]	; (800aac4 <tcp_input+0x29c>)
 800a8d0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800a8d2:	7cbb      	ldrb	r3, [r7, #18]
 800a8d4:	4619      	mov	r1, r3
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f7fe f8dc 	bl	8008a94 <pbuf_remove_header>
 800a8dc:	e04e      	b.n	800a97c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d105      	bne.n	800a8f2 <tcp_input+0xca>
 800a8e6:	4b70      	ldr	r3, [pc, #448]	; (800aaa8 <tcp_input+0x280>)
 800a8e8:	22c2      	movs	r2, #194	; 0xc2
 800a8ea:	4977      	ldr	r1, [pc, #476]	; (800aac8 <tcp_input+0x2a0>)
 800a8ec:	4870      	ldr	r0, [pc, #448]	; (800aab0 <tcp_input+0x288>)
 800a8ee:	f008 ffb5 	bl	801385c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800a8f2:	2114      	movs	r1, #20
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	f7fe f8cd 	bl	8008a94 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	895a      	ldrh	r2, [r3, #10]
 800a8fe:	4b71      	ldr	r3, [pc, #452]	; (800aac4 <tcp_input+0x29c>)
 800a900:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a902:	4b6e      	ldr	r3, [pc, #440]	; (800aabc <tcp_input+0x294>)
 800a904:	881a      	ldrh	r2, [r3, #0]
 800a906:	4b6f      	ldr	r3, [pc, #444]	; (800aac4 <tcp_input+0x29c>)
 800a908:	881b      	ldrh	r3, [r3, #0]
 800a90a:	1ad3      	subs	r3, r2, r3
 800a90c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800a90e:	4b6d      	ldr	r3, [pc, #436]	; (800aac4 <tcp_input+0x29c>)
 800a910:	881b      	ldrh	r3, [r3, #0]
 800a912:	4619      	mov	r1, r3
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f7fe f8bd 	bl	8008a94 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	895b      	ldrh	r3, [r3, #10]
 800a920:	8a3a      	ldrh	r2, [r7, #16]
 800a922:	429a      	cmp	r2, r3
 800a924:	f200 8361 	bhi.w	800afea <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	685b      	ldr	r3, [r3, #4]
 800a92e:	4a64      	ldr	r2, [pc, #400]	; (800aac0 <tcp_input+0x298>)
 800a930:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	8a3a      	ldrh	r2, [r7, #16]
 800a938:	4611      	mov	r1, r2
 800a93a:	4618      	mov	r0, r3
 800a93c:	f7fe f8aa 	bl	8008a94 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	891a      	ldrh	r2, [r3, #8]
 800a944:	8a3b      	ldrh	r3, [r7, #16]
 800a946:	1ad3      	subs	r3, r2, r3
 800a948:	b29a      	uxth	r2, r3
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	895b      	ldrh	r3, [r3, #10]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d005      	beq.n	800a962 <tcp_input+0x13a>
 800a956:	4b54      	ldr	r3, [pc, #336]	; (800aaa8 <tcp_input+0x280>)
 800a958:	22df      	movs	r2, #223	; 0xdf
 800a95a:	495c      	ldr	r1, [pc, #368]	; (800aacc <tcp_input+0x2a4>)
 800a95c:	4854      	ldr	r0, [pc, #336]	; (800aab0 <tcp_input+0x288>)
 800a95e:	f008 ff7d 	bl	801385c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	891a      	ldrh	r2, [r3, #8]
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	891b      	ldrh	r3, [r3, #8]
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d005      	beq.n	800a97c <tcp_input+0x154>
 800a970:	4b4d      	ldr	r3, [pc, #308]	; (800aaa8 <tcp_input+0x280>)
 800a972:	22e0      	movs	r2, #224	; 0xe0
 800a974:	4956      	ldr	r1, [pc, #344]	; (800aad0 <tcp_input+0x2a8>)
 800a976:	484e      	ldr	r0, [pc, #312]	; (800aab0 <tcp_input+0x288>)
 800a978:	f008 ff70 	bl	801385c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800a97c:	4b4d      	ldr	r3, [pc, #308]	; (800aab4 <tcp_input+0x28c>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	881b      	ldrh	r3, [r3, #0]
 800a982:	b29b      	uxth	r3, r3
 800a984:	4a4b      	ldr	r2, [pc, #300]	; (800aab4 <tcp_input+0x28c>)
 800a986:	6814      	ldr	r4, [r2, #0]
 800a988:	4618      	mov	r0, r3
 800a98a:	f7fc fd51 	bl	8007430 <lwip_htons>
 800a98e:	4603      	mov	r3, r0
 800a990:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800a992:	4b48      	ldr	r3, [pc, #288]	; (800aab4 <tcp_input+0x28c>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	885b      	ldrh	r3, [r3, #2]
 800a998:	b29b      	uxth	r3, r3
 800a99a:	4a46      	ldr	r2, [pc, #280]	; (800aab4 <tcp_input+0x28c>)
 800a99c:	6814      	ldr	r4, [r2, #0]
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f7fc fd46 	bl	8007430 <lwip_htons>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a9a8:	4b42      	ldr	r3, [pc, #264]	; (800aab4 <tcp_input+0x28c>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	4a41      	ldr	r2, [pc, #260]	; (800aab4 <tcp_input+0x28c>)
 800a9b0:	6814      	ldr	r4, [r2, #0]
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f7fc fd51 	bl	800745a <lwip_htonl>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	6063      	str	r3, [r4, #4]
 800a9bc:	6863      	ldr	r3, [r4, #4]
 800a9be:	4a45      	ldr	r2, [pc, #276]	; (800aad4 <tcp_input+0x2ac>)
 800a9c0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a9c2:	4b3c      	ldr	r3, [pc, #240]	; (800aab4 <tcp_input+0x28c>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	689b      	ldr	r3, [r3, #8]
 800a9c8:	4a3a      	ldr	r2, [pc, #232]	; (800aab4 <tcp_input+0x28c>)
 800a9ca:	6814      	ldr	r4, [r2, #0]
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f7fc fd44 	bl	800745a <lwip_htonl>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	60a3      	str	r3, [r4, #8]
 800a9d6:	68a3      	ldr	r3, [r4, #8]
 800a9d8:	4a3f      	ldr	r2, [pc, #252]	; (800aad8 <tcp_input+0x2b0>)
 800a9da:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a9dc:	4b35      	ldr	r3, [pc, #212]	; (800aab4 <tcp_input+0x28c>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	89db      	ldrh	r3, [r3, #14]
 800a9e2:	b29b      	uxth	r3, r3
 800a9e4:	4a33      	ldr	r2, [pc, #204]	; (800aab4 <tcp_input+0x28c>)
 800a9e6:	6814      	ldr	r4, [r2, #0]
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f7fc fd21 	bl	8007430 <lwip_htons>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800a9f2:	4b30      	ldr	r3, [pc, #192]	; (800aab4 <tcp_input+0x28c>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	899b      	ldrh	r3, [r3, #12]
 800a9f8:	b29b      	uxth	r3, r3
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f7fc fd18 	bl	8007430 <lwip_htons>
 800aa00:	4603      	mov	r3, r0
 800aa02:	b2db      	uxtb	r3, r3
 800aa04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa08:	b2da      	uxtb	r2, r3
 800aa0a:	4b34      	ldr	r3, [pc, #208]	; (800aadc <tcp_input+0x2b4>)
 800aa0c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	891a      	ldrh	r2, [r3, #8]
 800aa12:	4b33      	ldr	r3, [pc, #204]	; (800aae0 <tcp_input+0x2b8>)
 800aa14:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800aa16:	4b31      	ldr	r3, [pc, #196]	; (800aadc <tcp_input+0x2b4>)
 800aa18:	781b      	ldrb	r3, [r3, #0]
 800aa1a:	f003 0303 	and.w	r3, r3, #3
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d00c      	beq.n	800aa3c <tcp_input+0x214>
    tcplen++;
 800aa22:	4b2f      	ldr	r3, [pc, #188]	; (800aae0 <tcp_input+0x2b8>)
 800aa24:	881b      	ldrh	r3, [r3, #0]
 800aa26:	3301      	adds	r3, #1
 800aa28:	b29a      	uxth	r2, r3
 800aa2a:	4b2d      	ldr	r3, [pc, #180]	; (800aae0 <tcp_input+0x2b8>)
 800aa2c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	891a      	ldrh	r2, [r3, #8]
 800aa32:	4b2b      	ldr	r3, [pc, #172]	; (800aae0 <tcp_input+0x2b8>)
 800aa34:	881b      	ldrh	r3, [r3, #0]
 800aa36:	429a      	cmp	r2, r3
 800aa38:	f200 82d9 	bhi.w	800afee <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800aa40:	4b28      	ldr	r3, [pc, #160]	; (800aae4 <tcp_input+0x2bc>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	61fb      	str	r3, [r7, #28]
 800aa46:	e09d      	b.n	800ab84 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800aa48:	69fb      	ldr	r3, [r7, #28]
 800aa4a:	7d1b      	ldrb	r3, [r3, #20]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d105      	bne.n	800aa5c <tcp_input+0x234>
 800aa50:	4b15      	ldr	r3, [pc, #84]	; (800aaa8 <tcp_input+0x280>)
 800aa52:	22fb      	movs	r2, #251	; 0xfb
 800aa54:	4924      	ldr	r1, [pc, #144]	; (800aae8 <tcp_input+0x2c0>)
 800aa56:	4816      	ldr	r0, [pc, #88]	; (800aab0 <tcp_input+0x288>)
 800aa58:	f008 ff00 	bl	801385c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800aa5c:	69fb      	ldr	r3, [r7, #28]
 800aa5e:	7d1b      	ldrb	r3, [r3, #20]
 800aa60:	2b0a      	cmp	r3, #10
 800aa62:	d105      	bne.n	800aa70 <tcp_input+0x248>
 800aa64:	4b10      	ldr	r3, [pc, #64]	; (800aaa8 <tcp_input+0x280>)
 800aa66:	22fc      	movs	r2, #252	; 0xfc
 800aa68:	4920      	ldr	r1, [pc, #128]	; (800aaec <tcp_input+0x2c4>)
 800aa6a:	4811      	ldr	r0, [pc, #68]	; (800aab0 <tcp_input+0x288>)
 800aa6c:	f008 fef6 	bl	801385c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800aa70:	69fb      	ldr	r3, [r7, #28]
 800aa72:	7d1b      	ldrb	r3, [r3, #20]
 800aa74:	2b01      	cmp	r3, #1
 800aa76:	d105      	bne.n	800aa84 <tcp_input+0x25c>
 800aa78:	4b0b      	ldr	r3, [pc, #44]	; (800aaa8 <tcp_input+0x280>)
 800aa7a:	22fd      	movs	r2, #253	; 0xfd
 800aa7c:	491c      	ldr	r1, [pc, #112]	; (800aaf0 <tcp_input+0x2c8>)
 800aa7e:	480c      	ldr	r0, [pc, #48]	; (800aab0 <tcp_input+0x288>)
 800aa80:	f008 feec 	bl	801385c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800aa84:	69fb      	ldr	r3, [r7, #28]
 800aa86:	7a1b      	ldrb	r3, [r3, #8]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d033      	beq.n	800aaf4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800aa8c:	69fb      	ldr	r3, [r7, #28]
 800aa8e:	7a1a      	ldrb	r2, [r3, #8]
 800aa90:	4b09      	ldr	r3, [pc, #36]	; (800aab8 <tcp_input+0x290>)
 800aa92:	685b      	ldr	r3, [r3, #4]
 800aa94:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aa98:	3301      	adds	r3, #1
 800aa9a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800aa9c:	429a      	cmp	r2, r3
 800aa9e:	d029      	beq.n	800aaf4 <tcp_input+0x2cc>
      prev = pcb;
 800aaa0:	69fb      	ldr	r3, [r7, #28]
 800aaa2:	61bb      	str	r3, [r7, #24]
      continue;
 800aaa4:	e06b      	b.n	800ab7e <tcp_input+0x356>
 800aaa6:	bf00      	nop
 800aaa8:	08015a80 	.word	0x08015a80
 800aaac:	08015ab4 	.word	0x08015ab4
 800aab0:	08015acc 	.word	0x08015acc
 800aab4:	20008518 	.word	0x20008518
 800aab8:	2000b824 	.word	0x2000b824
 800aabc:	2000851c 	.word	0x2000851c
 800aac0:	20008520 	.word	0x20008520
 800aac4:	2000851e 	.word	0x2000851e
 800aac8:	08015af4 	.word	0x08015af4
 800aacc:	08015b04 	.word	0x08015b04
 800aad0:	08015b10 	.word	0x08015b10
 800aad4:	20008528 	.word	0x20008528
 800aad8:	2000852c 	.word	0x2000852c
 800aadc:	20008534 	.word	0x20008534
 800aae0:	20008532 	.word	0x20008532
 800aae4:	2000ef58 	.word	0x2000ef58
 800aae8:	08015b30 	.word	0x08015b30
 800aaec:	08015b58 	.word	0x08015b58
 800aaf0:	08015b84 	.word	0x08015b84
    }

    if (pcb->remote_port == tcphdr->src &&
 800aaf4:	69fb      	ldr	r3, [r7, #28]
 800aaf6:	8b1a      	ldrh	r2, [r3, #24]
 800aaf8:	4b94      	ldr	r3, [pc, #592]	; (800ad4c <tcp_input+0x524>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	881b      	ldrh	r3, [r3, #0]
 800aafe:	b29b      	uxth	r3, r3
 800ab00:	429a      	cmp	r2, r3
 800ab02:	d13a      	bne.n	800ab7a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800ab04:	69fb      	ldr	r3, [r7, #28]
 800ab06:	8ada      	ldrh	r2, [r3, #22]
 800ab08:	4b90      	ldr	r3, [pc, #576]	; (800ad4c <tcp_input+0x524>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	885b      	ldrh	r3, [r3, #2]
 800ab0e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800ab10:	429a      	cmp	r2, r3
 800ab12:	d132      	bne.n	800ab7a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ab14:	69fb      	ldr	r3, [r7, #28]
 800ab16:	685a      	ldr	r2, [r3, #4]
 800ab18:	4b8d      	ldr	r3, [pc, #564]	; (800ad50 <tcp_input+0x528>)
 800ab1a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	d12c      	bne.n	800ab7a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ab20:	69fb      	ldr	r3, [r7, #28]
 800ab22:	681a      	ldr	r2, [r3, #0]
 800ab24:	4b8a      	ldr	r3, [pc, #552]	; (800ad50 <tcp_input+0x528>)
 800ab26:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ab28:	429a      	cmp	r2, r3
 800ab2a:	d126      	bne.n	800ab7a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800ab2c:	69fb      	ldr	r3, [r7, #28]
 800ab2e:	68db      	ldr	r3, [r3, #12]
 800ab30:	69fa      	ldr	r2, [r7, #28]
 800ab32:	429a      	cmp	r2, r3
 800ab34:	d106      	bne.n	800ab44 <tcp_input+0x31c>
 800ab36:	4b87      	ldr	r3, [pc, #540]	; (800ad54 <tcp_input+0x52c>)
 800ab38:	f240 120d 	movw	r2, #269	; 0x10d
 800ab3c:	4986      	ldr	r1, [pc, #536]	; (800ad58 <tcp_input+0x530>)
 800ab3e:	4887      	ldr	r0, [pc, #540]	; (800ad5c <tcp_input+0x534>)
 800ab40:	f008 fe8c 	bl	801385c <iprintf>
      if (prev != NULL) {
 800ab44:	69bb      	ldr	r3, [r7, #24]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d00a      	beq.n	800ab60 <tcp_input+0x338>
        prev->next = pcb->next;
 800ab4a:	69fb      	ldr	r3, [r7, #28]
 800ab4c:	68da      	ldr	r2, [r3, #12]
 800ab4e:	69bb      	ldr	r3, [r7, #24]
 800ab50:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800ab52:	4b83      	ldr	r3, [pc, #524]	; (800ad60 <tcp_input+0x538>)
 800ab54:	681a      	ldr	r2, [r3, #0]
 800ab56:	69fb      	ldr	r3, [r7, #28]
 800ab58:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800ab5a:	4a81      	ldr	r2, [pc, #516]	; (800ad60 <tcp_input+0x538>)
 800ab5c:	69fb      	ldr	r3, [r7, #28]
 800ab5e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800ab60:	69fb      	ldr	r3, [r7, #28]
 800ab62:	68db      	ldr	r3, [r3, #12]
 800ab64:	69fa      	ldr	r2, [r7, #28]
 800ab66:	429a      	cmp	r2, r3
 800ab68:	d111      	bne.n	800ab8e <tcp_input+0x366>
 800ab6a:	4b7a      	ldr	r3, [pc, #488]	; (800ad54 <tcp_input+0x52c>)
 800ab6c:	f240 1215 	movw	r2, #277	; 0x115
 800ab70:	497c      	ldr	r1, [pc, #496]	; (800ad64 <tcp_input+0x53c>)
 800ab72:	487a      	ldr	r0, [pc, #488]	; (800ad5c <tcp_input+0x534>)
 800ab74:	f008 fe72 	bl	801385c <iprintf>
      break;
 800ab78:	e009      	b.n	800ab8e <tcp_input+0x366>
    }
    prev = pcb;
 800ab7a:	69fb      	ldr	r3, [r7, #28]
 800ab7c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ab7e:	69fb      	ldr	r3, [r7, #28]
 800ab80:	68db      	ldr	r3, [r3, #12]
 800ab82:	61fb      	str	r3, [r7, #28]
 800ab84:	69fb      	ldr	r3, [r7, #28]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	f47f af5e 	bne.w	800aa48 <tcp_input+0x220>
 800ab8c:	e000      	b.n	800ab90 <tcp_input+0x368>
      break;
 800ab8e:	bf00      	nop
  }

  if (pcb == NULL) {
 800ab90:	69fb      	ldr	r3, [r7, #28]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	f040 8095 	bne.w	800acc2 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ab98:	4b73      	ldr	r3, [pc, #460]	; (800ad68 <tcp_input+0x540>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	61fb      	str	r3, [r7, #28]
 800ab9e:	e03f      	b.n	800ac20 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800aba0:	69fb      	ldr	r3, [r7, #28]
 800aba2:	7d1b      	ldrb	r3, [r3, #20]
 800aba4:	2b0a      	cmp	r3, #10
 800aba6:	d006      	beq.n	800abb6 <tcp_input+0x38e>
 800aba8:	4b6a      	ldr	r3, [pc, #424]	; (800ad54 <tcp_input+0x52c>)
 800abaa:	f240 121f 	movw	r2, #287	; 0x11f
 800abae:	496f      	ldr	r1, [pc, #444]	; (800ad6c <tcp_input+0x544>)
 800abb0:	486a      	ldr	r0, [pc, #424]	; (800ad5c <tcp_input+0x534>)
 800abb2:	f008 fe53 	bl	801385c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800abb6:	69fb      	ldr	r3, [r7, #28]
 800abb8:	7a1b      	ldrb	r3, [r3, #8]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d009      	beq.n	800abd2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800abbe:	69fb      	ldr	r3, [r7, #28]
 800abc0:	7a1a      	ldrb	r2, [r3, #8]
 800abc2:	4b63      	ldr	r3, [pc, #396]	; (800ad50 <tcp_input+0x528>)
 800abc4:	685b      	ldr	r3, [r3, #4]
 800abc6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800abca:	3301      	adds	r3, #1
 800abcc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800abce:	429a      	cmp	r2, r3
 800abd0:	d122      	bne.n	800ac18 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800abd2:	69fb      	ldr	r3, [r7, #28]
 800abd4:	8b1a      	ldrh	r2, [r3, #24]
 800abd6:	4b5d      	ldr	r3, [pc, #372]	; (800ad4c <tcp_input+0x524>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	881b      	ldrh	r3, [r3, #0]
 800abdc:	b29b      	uxth	r3, r3
 800abde:	429a      	cmp	r2, r3
 800abe0:	d11b      	bne.n	800ac1a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800abe2:	69fb      	ldr	r3, [r7, #28]
 800abe4:	8ada      	ldrh	r2, [r3, #22]
 800abe6:	4b59      	ldr	r3, [pc, #356]	; (800ad4c <tcp_input+0x524>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	885b      	ldrh	r3, [r3, #2]
 800abec:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800abee:	429a      	cmp	r2, r3
 800abf0:	d113      	bne.n	800ac1a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800abf2:	69fb      	ldr	r3, [r7, #28]
 800abf4:	685a      	ldr	r2, [r3, #4]
 800abf6:	4b56      	ldr	r3, [pc, #344]	; (800ad50 <tcp_input+0x528>)
 800abf8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800abfa:	429a      	cmp	r2, r3
 800abfc:	d10d      	bne.n	800ac1a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800abfe:	69fb      	ldr	r3, [r7, #28]
 800ac00:	681a      	ldr	r2, [r3, #0]
 800ac02:	4b53      	ldr	r3, [pc, #332]	; (800ad50 <tcp_input+0x528>)
 800ac04:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ac06:	429a      	cmp	r2, r3
 800ac08:	d107      	bne.n	800ac1a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800ac0a:	69f8      	ldr	r0, [r7, #28]
 800ac0c:	f000 fb54 	bl	800b2b8 <tcp_timewait_input>
        }
        pbuf_free(p);
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f7fd ffc5 	bl	8008ba0 <pbuf_free>
        return;
 800ac16:	e1f0      	b.n	800affa <tcp_input+0x7d2>
        continue;
 800ac18:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ac1a:	69fb      	ldr	r3, [r7, #28]
 800ac1c:	68db      	ldr	r3, [r3, #12]
 800ac1e:	61fb      	str	r3, [r7, #28]
 800ac20:	69fb      	ldr	r3, [r7, #28]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d1bc      	bne.n	800aba0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800ac26:	2300      	movs	r3, #0
 800ac28:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ac2a:	4b51      	ldr	r3, [pc, #324]	; (800ad70 <tcp_input+0x548>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	617b      	str	r3, [r7, #20]
 800ac30:	e02a      	b.n	800ac88 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	7a1b      	ldrb	r3, [r3, #8]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d00c      	beq.n	800ac54 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	7a1a      	ldrb	r2, [r3, #8]
 800ac3e:	4b44      	ldr	r3, [pc, #272]	; (800ad50 <tcp_input+0x528>)
 800ac40:	685b      	ldr	r3, [r3, #4]
 800ac42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ac46:	3301      	adds	r3, #1
 800ac48:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ac4a:	429a      	cmp	r2, r3
 800ac4c:	d002      	beq.n	800ac54 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	61bb      	str	r3, [r7, #24]
        continue;
 800ac52:	e016      	b.n	800ac82 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	8ada      	ldrh	r2, [r3, #22]
 800ac58:	4b3c      	ldr	r3, [pc, #240]	; (800ad4c <tcp_input+0x524>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	885b      	ldrh	r3, [r3, #2]
 800ac5e:	b29b      	uxth	r3, r3
 800ac60:	429a      	cmp	r2, r3
 800ac62:	d10c      	bne.n	800ac7e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	681a      	ldr	r2, [r3, #0]
 800ac68:	4b39      	ldr	r3, [pc, #228]	; (800ad50 <tcp_input+0x528>)
 800ac6a:	695b      	ldr	r3, [r3, #20]
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d00f      	beq.n	800ac90 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d00d      	beq.n	800ac92 <tcp_input+0x46a>
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d009      	beq.n	800ac92 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	68db      	ldr	r3, [r3, #12]
 800ac86:	617b      	str	r3, [r7, #20]
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d1d1      	bne.n	800ac32 <tcp_input+0x40a>
 800ac8e:	e000      	b.n	800ac92 <tcp_input+0x46a>
            break;
 800ac90:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d014      	beq.n	800acc2 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800ac98:	69bb      	ldr	r3, [r7, #24]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d00a      	beq.n	800acb4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	68da      	ldr	r2, [r3, #12]
 800aca2:	69bb      	ldr	r3, [r7, #24]
 800aca4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800aca6:	4b32      	ldr	r3, [pc, #200]	; (800ad70 <tcp_input+0x548>)
 800aca8:	681a      	ldr	r2, [r3, #0]
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800acae:	4a30      	ldr	r2, [pc, #192]	; (800ad70 <tcp_input+0x548>)
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800acb4:	6978      	ldr	r0, [r7, #20]
 800acb6:	f000 fa01 	bl	800b0bc <tcp_listen_input>
      }
      pbuf_free(p);
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f7fd ff70 	bl	8008ba0 <pbuf_free>
      return;
 800acc0:	e19b      	b.n	800affa <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800acc2:	69fb      	ldr	r3, [r7, #28]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	f000 8160 	beq.w	800af8a <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800acca:	4b2a      	ldr	r3, [pc, #168]	; (800ad74 <tcp_input+0x54c>)
 800accc:	2200      	movs	r2, #0
 800acce:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	891a      	ldrh	r2, [r3, #8]
 800acd4:	4b27      	ldr	r3, [pc, #156]	; (800ad74 <tcp_input+0x54c>)
 800acd6:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800acd8:	4a26      	ldr	r2, [pc, #152]	; (800ad74 <tcp_input+0x54c>)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800acde:	4b1b      	ldr	r3, [pc, #108]	; (800ad4c <tcp_input+0x524>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	4a24      	ldr	r2, [pc, #144]	; (800ad74 <tcp_input+0x54c>)
 800ace4:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800ace6:	4b24      	ldr	r3, [pc, #144]	; (800ad78 <tcp_input+0x550>)
 800ace8:	2200      	movs	r2, #0
 800acea:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800acec:	4b23      	ldr	r3, [pc, #140]	; (800ad7c <tcp_input+0x554>)
 800acee:	2200      	movs	r2, #0
 800acf0:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800acf2:	4b23      	ldr	r3, [pc, #140]	; (800ad80 <tcp_input+0x558>)
 800acf4:	2200      	movs	r2, #0
 800acf6:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800acf8:	4b22      	ldr	r3, [pc, #136]	; (800ad84 <tcp_input+0x55c>)
 800acfa:	781b      	ldrb	r3, [r3, #0]
 800acfc:	f003 0308 	and.w	r3, r3, #8
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d006      	beq.n	800ad12 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	7b5b      	ldrb	r3, [r3, #13]
 800ad08:	f043 0301 	orr.w	r3, r3, #1
 800ad0c:	b2da      	uxtb	r2, r3
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800ad12:	69fb      	ldr	r3, [r7, #28]
 800ad14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d038      	beq.n	800ad8c <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ad1a:	69f8      	ldr	r0, [r7, #28]
 800ad1c:	f7ff f93e 	bl	8009f9c <tcp_process_refused_data>
 800ad20:	4603      	mov	r3, r0
 800ad22:	f113 0f0d 	cmn.w	r3, #13
 800ad26:	d007      	beq.n	800ad38 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ad28:	69fb      	ldr	r3, [r7, #28]
 800ad2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d02d      	beq.n	800ad8c <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ad30:	4b15      	ldr	r3, [pc, #84]	; (800ad88 <tcp_input+0x560>)
 800ad32:	881b      	ldrh	r3, [r3, #0]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d029      	beq.n	800ad8c <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800ad38:	69fb      	ldr	r3, [r7, #28]
 800ad3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	f040 8104 	bne.w	800af4a <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800ad42:	69f8      	ldr	r0, [r7, #28]
 800ad44:	f003 f9be 	bl	800e0c4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800ad48:	e0ff      	b.n	800af4a <tcp_input+0x722>
 800ad4a:	bf00      	nop
 800ad4c:	20008518 	.word	0x20008518
 800ad50:	2000b824 	.word	0x2000b824
 800ad54:	08015a80 	.word	0x08015a80
 800ad58:	08015bac 	.word	0x08015bac
 800ad5c:	08015acc 	.word	0x08015acc
 800ad60:	2000ef58 	.word	0x2000ef58
 800ad64:	08015bd8 	.word	0x08015bd8
 800ad68:	2000ef68 	.word	0x2000ef68
 800ad6c:	08015c04 	.word	0x08015c04
 800ad70:	2000ef60 	.word	0x2000ef60
 800ad74:	20008508 	.word	0x20008508
 800ad78:	20008538 	.word	0x20008538
 800ad7c:	20008535 	.word	0x20008535
 800ad80:	20008530 	.word	0x20008530
 800ad84:	20008534 	.word	0x20008534
 800ad88:	20008532 	.word	0x20008532
      }
    }
    tcp_input_pcb = pcb;
 800ad8c:	4a9c      	ldr	r2, [pc, #624]	; (800b000 <tcp_input+0x7d8>)
 800ad8e:	69fb      	ldr	r3, [r7, #28]
 800ad90:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800ad92:	69f8      	ldr	r0, [r7, #28]
 800ad94:	f000 fb0a 	bl	800b3ac <tcp_process>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800ad9c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ada0:	f113 0f0d 	cmn.w	r3, #13
 800ada4:	f000 80d3 	beq.w	800af4e <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800ada8:	4b96      	ldr	r3, [pc, #600]	; (800b004 <tcp_input+0x7dc>)
 800adaa:	781b      	ldrb	r3, [r3, #0]
 800adac:	f003 0308 	and.w	r3, r3, #8
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d015      	beq.n	800ade0 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800adb4:	69fb      	ldr	r3, [r7, #28]
 800adb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d008      	beq.n	800add0 <tcp_input+0x5a8>
 800adbe:	69fb      	ldr	r3, [r7, #28]
 800adc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800adc4:	69fa      	ldr	r2, [r7, #28]
 800adc6:	6912      	ldr	r2, [r2, #16]
 800adc8:	f06f 010d 	mvn.w	r1, #13
 800adcc:	4610      	mov	r0, r2
 800adce:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800add0:	69f9      	ldr	r1, [r7, #28]
 800add2:	488d      	ldr	r0, [pc, #564]	; (800b008 <tcp_input+0x7e0>)
 800add4:	f7ff fbb0 	bl	800a538 <tcp_pcb_remove>
        tcp_free(pcb);
 800add8:	69f8      	ldr	r0, [r7, #28]
 800adda:	f7fe f99d 	bl	8009118 <tcp_free>
 800adde:	e0c1      	b.n	800af64 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800ade0:	2300      	movs	r3, #0
 800ade2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800ade4:	4b89      	ldr	r3, [pc, #548]	; (800b00c <tcp_input+0x7e4>)
 800ade6:	881b      	ldrh	r3, [r3, #0]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d01d      	beq.n	800ae28 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800adec:	4b87      	ldr	r3, [pc, #540]	; (800b00c <tcp_input+0x7e4>)
 800adee:	881b      	ldrh	r3, [r3, #0]
 800adf0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800adf2:	69fb      	ldr	r3, [r7, #28]
 800adf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d00a      	beq.n	800ae12 <tcp_input+0x5ea>
 800adfc:	69fb      	ldr	r3, [r7, #28]
 800adfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae02:	69fa      	ldr	r2, [r7, #28]
 800ae04:	6910      	ldr	r0, [r2, #16]
 800ae06:	89fa      	ldrh	r2, [r7, #14]
 800ae08:	69f9      	ldr	r1, [r7, #28]
 800ae0a:	4798      	blx	r3
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	74fb      	strb	r3, [r7, #19]
 800ae10:	e001      	b.n	800ae16 <tcp_input+0x5ee>
 800ae12:	2300      	movs	r3, #0
 800ae14:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ae16:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ae1a:	f113 0f0d 	cmn.w	r3, #13
 800ae1e:	f000 8098 	beq.w	800af52 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800ae22:	4b7a      	ldr	r3, [pc, #488]	; (800b00c <tcp_input+0x7e4>)
 800ae24:	2200      	movs	r2, #0
 800ae26:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800ae28:	69f8      	ldr	r0, [r7, #28]
 800ae2a:	f000 f907 	bl	800b03c <tcp_input_delayed_close>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	f040 8090 	bne.w	800af56 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800ae36:	4b76      	ldr	r3, [pc, #472]	; (800b010 <tcp_input+0x7e8>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d041      	beq.n	800aec2 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800ae3e:	69fb      	ldr	r3, [r7, #28]
 800ae40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d006      	beq.n	800ae54 <tcp_input+0x62c>
 800ae46:	4b73      	ldr	r3, [pc, #460]	; (800b014 <tcp_input+0x7ec>)
 800ae48:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800ae4c:	4972      	ldr	r1, [pc, #456]	; (800b018 <tcp_input+0x7f0>)
 800ae4e:	4873      	ldr	r0, [pc, #460]	; (800b01c <tcp_input+0x7f4>)
 800ae50:	f008 fd04 	bl	801385c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800ae54:	69fb      	ldr	r3, [r7, #28]
 800ae56:	8b5b      	ldrh	r3, [r3, #26]
 800ae58:	f003 0310 	and.w	r3, r3, #16
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d008      	beq.n	800ae72 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800ae60:	4b6b      	ldr	r3, [pc, #428]	; (800b010 <tcp_input+0x7e8>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	4618      	mov	r0, r3
 800ae66:	f7fd fe9b 	bl	8008ba0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800ae6a:	69f8      	ldr	r0, [r7, #28]
 800ae6c:	f7fe fc3c 	bl	80096e8 <tcp_abort>
            goto aborted;
 800ae70:	e078      	b.n	800af64 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ae72:	69fb      	ldr	r3, [r7, #28]
 800ae74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d00c      	beq.n	800ae96 <tcp_input+0x66e>
 800ae7c:	69fb      	ldr	r3, [r7, #28]
 800ae7e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ae82:	69fb      	ldr	r3, [r7, #28]
 800ae84:	6918      	ldr	r0, [r3, #16]
 800ae86:	4b62      	ldr	r3, [pc, #392]	; (800b010 <tcp_input+0x7e8>)
 800ae88:	681a      	ldr	r2, [r3, #0]
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	69f9      	ldr	r1, [r7, #28]
 800ae8e:	47a0      	blx	r4
 800ae90:	4603      	mov	r3, r0
 800ae92:	74fb      	strb	r3, [r7, #19]
 800ae94:	e008      	b.n	800aea8 <tcp_input+0x680>
 800ae96:	4b5e      	ldr	r3, [pc, #376]	; (800b010 <tcp_input+0x7e8>)
 800ae98:	681a      	ldr	r2, [r3, #0]
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	69f9      	ldr	r1, [r7, #28]
 800ae9e:	2000      	movs	r0, #0
 800aea0:	f7ff f952 	bl	800a148 <tcp_recv_null>
 800aea4:	4603      	mov	r3, r0
 800aea6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800aea8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aeac:	f113 0f0d 	cmn.w	r3, #13
 800aeb0:	d053      	beq.n	800af5a <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800aeb2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d003      	beq.n	800aec2 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800aeba:	4b55      	ldr	r3, [pc, #340]	; (800b010 <tcp_input+0x7e8>)
 800aebc:	681a      	ldr	r2, [r3, #0]
 800aebe:	69fb      	ldr	r3, [r7, #28]
 800aec0:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800aec2:	4b50      	ldr	r3, [pc, #320]	; (800b004 <tcp_input+0x7dc>)
 800aec4:	781b      	ldrb	r3, [r3, #0]
 800aec6:	f003 0320 	and.w	r3, r3, #32
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d030      	beq.n	800af30 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800aece:	69fb      	ldr	r3, [r7, #28]
 800aed0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d009      	beq.n	800aeea <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800aed6:	69fb      	ldr	r3, [r7, #28]
 800aed8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aeda:	7b5a      	ldrb	r2, [r3, #13]
 800aedc:	69fb      	ldr	r3, [r7, #28]
 800aede:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aee0:	f042 0220 	orr.w	r2, r2, #32
 800aee4:	b2d2      	uxtb	r2, r2
 800aee6:	735a      	strb	r2, [r3, #13]
 800aee8:	e022      	b.n	800af30 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800aeea:	69fb      	ldr	r3, [r7, #28]
 800aeec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aeee:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800aef2:	d005      	beq.n	800af00 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800aef4:	69fb      	ldr	r3, [r7, #28]
 800aef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aef8:	3301      	adds	r3, #1
 800aefa:	b29a      	uxth	r2, r3
 800aefc:	69fb      	ldr	r3, [r7, #28]
 800aefe:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800af00:	69fb      	ldr	r3, [r7, #28]
 800af02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af06:	2b00      	cmp	r3, #0
 800af08:	d00b      	beq.n	800af22 <tcp_input+0x6fa>
 800af0a:	69fb      	ldr	r3, [r7, #28]
 800af0c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800af10:	69fb      	ldr	r3, [r7, #28]
 800af12:	6918      	ldr	r0, [r3, #16]
 800af14:	2300      	movs	r3, #0
 800af16:	2200      	movs	r2, #0
 800af18:	69f9      	ldr	r1, [r7, #28]
 800af1a:	47a0      	blx	r4
 800af1c:	4603      	mov	r3, r0
 800af1e:	74fb      	strb	r3, [r7, #19]
 800af20:	e001      	b.n	800af26 <tcp_input+0x6fe>
 800af22:	2300      	movs	r3, #0
 800af24:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800af26:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800af2a:	f113 0f0d 	cmn.w	r3, #13
 800af2e:	d016      	beq.n	800af5e <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800af30:	4b33      	ldr	r3, [pc, #204]	; (800b000 <tcp_input+0x7d8>)
 800af32:	2200      	movs	r2, #0
 800af34:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800af36:	69f8      	ldr	r0, [r7, #28]
 800af38:	f000 f880 	bl	800b03c <tcp_input_delayed_close>
 800af3c:	4603      	mov	r3, r0
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d10f      	bne.n	800af62 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800af42:	69f8      	ldr	r0, [r7, #28]
 800af44:	f002 fab8 	bl	800d4b8 <tcp_output>
 800af48:	e00c      	b.n	800af64 <tcp_input+0x73c>
        goto aborted;
 800af4a:	bf00      	nop
 800af4c:	e00a      	b.n	800af64 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800af4e:	bf00      	nop
 800af50:	e008      	b.n	800af64 <tcp_input+0x73c>
              goto aborted;
 800af52:	bf00      	nop
 800af54:	e006      	b.n	800af64 <tcp_input+0x73c>
          goto aborted;
 800af56:	bf00      	nop
 800af58:	e004      	b.n	800af64 <tcp_input+0x73c>
            goto aborted;
 800af5a:	bf00      	nop
 800af5c:	e002      	b.n	800af64 <tcp_input+0x73c>
              goto aborted;
 800af5e:	bf00      	nop
 800af60:	e000      	b.n	800af64 <tcp_input+0x73c>
          goto aborted;
 800af62:	bf00      	nop
    tcp_input_pcb = NULL;
 800af64:	4b26      	ldr	r3, [pc, #152]	; (800b000 <tcp_input+0x7d8>)
 800af66:	2200      	movs	r2, #0
 800af68:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800af6a:	4b29      	ldr	r3, [pc, #164]	; (800b010 <tcp_input+0x7e8>)
 800af6c:	2200      	movs	r2, #0
 800af6e:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800af70:	4b2b      	ldr	r3, [pc, #172]	; (800b020 <tcp_input+0x7f8>)
 800af72:	685b      	ldr	r3, [r3, #4]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d03f      	beq.n	800aff8 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800af78:	4b29      	ldr	r3, [pc, #164]	; (800b020 <tcp_input+0x7f8>)
 800af7a:	685b      	ldr	r3, [r3, #4]
 800af7c:	4618      	mov	r0, r3
 800af7e:	f7fd fe0f 	bl	8008ba0 <pbuf_free>
      inseg.p = NULL;
 800af82:	4b27      	ldr	r3, [pc, #156]	; (800b020 <tcp_input+0x7f8>)
 800af84:	2200      	movs	r2, #0
 800af86:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800af88:	e036      	b.n	800aff8 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800af8a:	4b26      	ldr	r3, [pc, #152]	; (800b024 <tcp_input+0x7fc>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	899b      	ldrh	r3, [r3, #12]
 800af90:	b29b      	uxth	r3, r3
 800af92:	4618      	mov	r0, r3
 800af94:	f7fc fa4c 	bl	8007430 <lwip_htons>
 800af98:	4603      	mov	r3, r0
 800af9a:	b2db      	uxtb	r3, r3
 800af9c:	f003 0304 	and.w	r3, r3, #4
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d118      	bne.n	800afd6 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800afa4:	4b20      	ldr	r3, [pc, #128]	; (800b028 <tcp_input+0x800>)
 800afa6:	6819      	ldr	r1, [r3, #0]
 800afa8:	4b20      	ldr	r3, [pc, #128]	; (800b02c <tcp_input+0x804>)
 800afaa:	881b      	ldrh	r3, [r3, #0]
 800afac:	461a      	mov	r2, r3
 800afae:	4b20      	ldr	r3, [pc, #128]	; (800b030 <tcp_input+0x808>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800afb4:	4b1b      	ldr	r3, [pc, #108]	; (800b024 <tcp_input+0x7fc>)
 800afb6:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800afb8:	885b      	ldrh	r3, [r3, #2]
 800afba:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800afbc:	4a19      	ldr	r2, [pc, #100]	; (800b024 <tcp_input+0x7fc>)
 800afbe:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800afc0:	8812      	ldrh	r2, [r2, #0]
 800afc2:	b292      	uxth	r2, r2
 800afc4:	9202      	str	r2, [sp, #8]
 800afc6:	9301      	str	r3, [sp, #4]
 800afc8:	4b1a      	ldr	r3, [pc, #104]	; (800b034 <tcp_input+0x80c>)
 800afca:	9300      	str	r3, [sp, #0]
 800afcc:	4b1a      	ldr	r3, [pc, #104]	; (800b038 <tcp_input+0x810>)
 800afce:	4602      	mov	r2, r0
 800afd0:	2000      	movs	r0, #0
 800afd2:	f003 f825 	bl	800e020 <tcp_rst>
    pbuf_free(p);
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f7fd fde2 	bl	8008ba0 <pbuf_free>
  return;
 800afdc:	e00c      	b.n	800aff8 <tcp_input+0x7d0>
    goto dropped;
 800afde:	bf00      	nop
 800afe0:	e006      	b.n	800aff0 <tcp_input+0x7c8>
    goto dropped;
 800afe2:	bf00      	nop
 800afe4:	e004      	b.n	800aff0 <tcp_input+0x7c8>
    goto dropped;
 800afe6:	bf00      	nop
 800afe8:	e002      	b.n	800aff0 <tcp_input+0x7c8>
      goto dropped;
 800afea:	bf00      	nop
 800afec:	e000      	b.n	800aff0 <tcp_input+0x7c8>
      goto dropped;
 800afee:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	f7fd fdd5 	bl	8008ba0 <pbuf_free>
 800aff6:	e000      	b.n	800affa <tcp_input+0x7d2>
  return;
 800aff8:	bf00      	nop
}
 800affa:	3724      	adds	r7, #36	; 0x24
 800affc:	46bd      	mov	sp, r7
 800affe:	bd90      	pop	{r4, r7, pc}
 800b000:	2000ef6c 	.word	0x2000ef6c
 800b004:	20008535 	.word	0x20008535
 800b008:	2000ef58 	.word	0x2000ef58
 800b00c:	20008530 	.word	0x20008530
 800b010:	20008538 	.word	0x20008538
 800b014:	08015a80 	.word	0x08015a80
 800b018:	08015c34 	.word	0x08015c34
 800b01c:	08015acc 	.word	0x08015acc
 800b020:	20008508 	.word	0x20008508
 800b024:	20008518 	.word	0x20008518
 800b028:	2000852c 	.word	0x2000852c
 800b02c:	20008532 	.word	0x20008532
 800b030:	20008528 	.word	0x20008528
 800b034:	2000b834 	.word	0x2000b834
 800b038:	2000b838 	.word	0x2000b838

0800b03c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b082      	sub	sp, #8
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d106      	bne.n	800b058 <tcp_input_delayed_close+0x1c>
 800b04a:	4b17      	ldr	r3, [pc, #92]	; (800b0a8 <tcp_input_delayed_close+0x6c>)
 800b04c:	f240 225a 	movw	r2, #602	; 0x25a
 800b050:	4916      	ldr	r1, [pc, #88]	; (800b0ac <tcp_input_delayed_close+0x70>)
 800b052:	4817      	ldr	r0, [pc, #92]	; (800b0b0 <tcp_input_delayed_close+0x74>)
 800b054:	f008 fc02 	bl	801385c <iprintf>

  if (recv_flags & TF_CLOSED) {
 800b058:	4b16      	ldr	r3, [pc, #88]	; (800b0b4 <tcp_input_delayed_close+0x78>)
 800b05a:	781b      	ldrb	r3, [r3, #0]
 800b05c:	f003 0310 	and.w	r3, r3, #16
 800b060:	2b00      	cmp	r3, #0
 800b062:	d01c      	beq.n	800b09e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	8b5b      	ldrh	r3, [r3, #26]
 800b068:	f003 0310 	and.w	r3, r3, #16
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d10d      	bne.n	800b08c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b076:	2b00      	cmp	r3, #0
 800b078:	d008      	beq.n	800b08c <tcp_input_delayed_close+0x50>
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b080:	687a      	ldr	r2, [r7, #4]
 800b082:	6912      	ldr	r2, [r2, #16]
 800b084:	f06f 010e 	mvn.w	r1, #14
 800b088:	4610      	mov	r0, r2
 800b08a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b08c:	6879      	ldr	r1, [r7, #4]
 800b08e:	480a      	ldr	r0, [pc, #40]	; (800b0b8 <tcp_input_delayed_close+0x7c>)
 800b090:	f7ff fa52 	bl	800a538 <tcp_pcb_remove>
    tcp_free(pcb);
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f7fe f83f 	bl	8009118 <tcp_free>
    return 1;
 800b09a:	2301      	movs	r3, #1
 800b09c:	e000      	b.n	800b0a0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800b09e:	2300      	movs	r3, #0
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3708      	adds	r7, #8
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}
 800b0a8:	08015a80 	.word	0x08015a80
 800b0ac:	08015c50 	.word	0x08015c50
 800b0b0:	08015acc 	.word	0x08015acc
 800b0b4:	20008535 	.word	0x20008535
 800b0b8:	2000ef58 	.word	0x2000ef58

0800b0bc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800b0bc:	b590      	push	{r4, r7, lr}
 800b0be:	b08b      	sub	sp, #44	; 0x2c
 800b0c0:	af04      	add	r7, sp, #16
 800b0c2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800b0c4:	4b6f      	ldr	r3, [pc, #444]	; (800b284 <tcp_listen_input+0x1c8>)
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	f003 0304 	and.w	r3, r3, #4
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	f040 80d2 	bne.w	800b276 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d106      	bne.n	800b0e6 <tcp_listen_input+0x2a>
 800b0d8:	4b6b      	ldr	r3, [pc, #428]	; (800b288 <tcp_listen_input+0x1cc>)
 800b0da:	f240 2281 	movw	r2, #641	; 0x281
 800b0de:	496b      	ldr	r1, [pc, #428]	; (800b28c <tcp_listen_input+0x1d0>)
 800b0e0:	486b      	ldr	r0, [pc, #428]	; (800b290 <tcp_listen_input+0x1d4>)
 800b0e2:	f008 fbbb 	bl	801385c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800b0e6:	4b67      	ldr	r3, [pc, #412]	; (800b284 <tcp_listen_input+0x1c8>)
 800b0e8:	781b      	ldrb	r3, [r3, #0]
 800b0ea:	f003 0310 	and.w	r3, r3, #16
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d019      	beq.n	800b126 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b0f2:	4b68      	ldr	r3, [pc, #416]	; (800b294 <tcp_listen_input+0x1d8>)
 800b0f4:	6819      	ldr	r1, [r3, #0]
 800b0f6:	4b68      	ldr	r3, [pc, #416]	; (800b298 <tcp_listen_input+0x1dc>)
 800b0f8:	881b      	ldrh	r3, [r3, #0]
 800b0fa:	461a      	mov	r2, r3
 800b0fc:	4b67      	ldr	r3, [pc, #412]	; (800b29c <tcp_listen_input+0x1e0>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b102:	4b67      	ldr	r3, [pc, #412]	; (800b2a0 <tcp_listen_input+0x1e4>)
 800b104:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b106:	885b      	ldrh	r3, [r3, #2]
 800b108:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b10a:	4a65      	ldr	r2, [pc, #404]	; (800b2a0 <tcp_listen_input+0x1e4>)
 800b10c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b10e:	8812      	ldrh	r2, [r2, #0]
 800b110:	b292      	uxth	r2, r2
 800b112:	9202      	str	r2, [sp, #8]
 800b114:	9301      	str	r3, [sp, #4]
 800b116:	4b63      	ldr	r3, [pc, #396]	; (800b2a4 <tcp_listen_input+0x1e8>)
 800b118:	9300      	str	r3, [sp, #0]
 800b11a:	4b63      	ldr	r3, [pc, #396]	; (800b2a8 <tcp_listen_input+0x1ec>)
 800b11c:	4602      	mov	r2, r0
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f002 ff7e 	bl	800e020 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800b124:	e0a9      	b.n	800b27a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800b126:	4b57      	ldr	r3, [pc, #348]	; (800b284 <tcp_listen_input+0x1c8>)
 800b128:	781b      	ldrb	r3, [r3, #0]
 800b12a:	f003 0302 	and.w	r3, r3, #2
 800b12e:	2b00      	cmp	r3, #0
 800b130:	f000 80a3 	beq.w	800b27a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	7d5b      	ldrb	r3, [r3, #21]
 800b138:	4618      	mov	r0, r3
 800b13a:	f7ff f929 	bl	800a390 <tcp_alloc>
 800b13e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d111      	bne.n	800b16a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	699b      	ldr	r3, [r3, #24]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d00a      	beq.n	800b164 <tcp_listen_input+0xa8>
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	699b      	ldr	r3, [r3, #24]
 800b152:	687a      	ldr	r2, [r7, #4]
 800b154:	6910      	ldr	r0, [r2, #16]
 800b156:	f04f 32ff 	mov.w	r2, #4294967295
 800b15a:	2100      	movs	r1, #0
 800b15c:	4798      	blx	r3
 800b15e:	4603      	mov	r3, r0
 800b160:	73bb      	strb	r3, [r7, #14]
      return;
 800b162:	e08b      	b.n	800b27c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b164:	23f0      	movs	r3, #240	; 0xf0
 800b166:	73bb      	strb	r3, [r7, #14]
      return;
 800b168:	e088      	b.n	800b27c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800b16a:	4b50      	ldr	r3, [pc, #320]	; (800b2ac <tcp_listen_input+0x1f0>)
 800b16c:	695a      	ldr	r2, [r3, #20]
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800b172:	4b4e      	ldr	r3, [pc, #312]	; (800b2ac <tcp_listen_input+0x1f0>)
 800b174:	691a      	ldr	r2, [r3, #16]
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	8ada      	ldrh	r2, [r3, #22]
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800b182:	4b47      	ldr	r3, [pc, #284]	; (800b2a0 <tcp_listen_input+0x1e4>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	881b      	ldrh	r3, [r3, #0]
 800b188:	b29a      	uxth	r2, r3
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	2203      	movs	r2, #3
 800b192:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800b194:	4b41      	ldr	r3, [pc, #260]	; (800b29c <tcp_listen_input+0x1e0>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	1c5a      	adds	r2, r3, #1
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b1a2:	697b      	ldr	r3, [r7, #20]
 800b1a4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800b1a6:	6978      	ldr	r0, [r7, #20]
 800b1a8:	f7ff fa5a 	bl	800a660 <tcp_next_iss>
 800b1ac:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	693a      	ldr	r2, [r7, #16]
 800b1b2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800b1b4:	697b      	ldr	r3, [r7, #20]
 800b1b6:	693a      	ldr	r2, [r7, #16]
 800b1b8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	693a      	ldr	r2, [r7, #16]
 800b1be:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	693a      	ldr	r2, [r7, #16]
 800b1c4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800b1c6:	4b35      	ldr	r3, [pc, #212]	; (800b29c <tcp_listen_input+0x1e0>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	1e5a      	subs	r2, r3, #1
 800b1cc:	697b      	ldr	r3, [r7, #20]
 800b1ce:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	691a      	ldr	r2, [r3, #16]
 800b1d4:	697b      	ldr	r3, [r7, #20]
 800b1d6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800b1d8:	697b      	ldr	r3, [r7, #20]
 800b1da:	687a      	ldr	r2, [r7, #4]
 800b1dc:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	7a5b      	ldrb	r3, [r3, #9]
 800b1e2:	f003 030c 	and.w	r3, r3, #12
 800b1e6:	b2da      	uxtb	r2, r3
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	7a1a      	ldrb	r2, [r3, #8]
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800b1f4:	4b2e      	ldr	r3, [pc, #184]	; (800b2b0 <tcp_listen_input+0x1f4>)
 800b1f6:	681a      	ldr	r2, [r3, #0]
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	60da      	str	r2, [r3, #12]
 800b1fc:	4a2c      	ldr	r2, [pc, #176]	; (800b2b0 <tcp_listen_input+0x1f4>)
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	6013      	str	r3, [r2, #0]
 800b202:	f003 f8cf 	bl	800e3a4 <tcp_timer_needed>
 800b206:	4b2b      	ldr	r3, [pc, #172]	; (800b2b4 <tcp_listen_input+0x1f8>)
 800b208:	2201      	movs	r2, #1
 800b20a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800b20c:	6978      	ldr	r0, [r7, #20]
 800b20e:	f001 fd8d 	bl	800cd2c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800b212:	4b23      	ldr	r3, [pc, #140]	; (800b2a0 <tcp_listen_input+0x1e4>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	89db      	ldrh	r3, [r3, #14]
 800b218:	b29a      	uxth	r2, r3
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800b22c:	697b      	ldr	r3, [r7, #20]
 800b22e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	3304      	adds	r3, #4
 800b234:	4618      	mov	r0, r3
 800b236:	f006 fe5b 	bl	8011ef0 <ip4_route>
 800b23a:	4601      	mov	r1, r0
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	3304      	adds	r3, #4
 800b240:	461a      	mov	r2, r3
 800b242:	4620      	mov	r0, r4
 800b244:	f7ff fa32 	bl	800a6ac <tcp_eff_send_mss_netif>
 800b248:	4603      	mov	r3, r0
 800b24a:	461a      	mov	r2, r3
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800b250:	2112      	movs	r1, #18
 800b252:	6978      	ldr	r0, [r7, #20]
 800b254:	f002 f842 	bl	800d2dc <tcp_enqueue_flags>
 800b258:	4603      	mov	r3, r0
 800b25a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800b25c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d004      	beq.n	800b26e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800b264:	2100      	movs	r1, #0
 800b266:	6978      	ldr	r0, [r7, #20]
 800b268:	f7fe f980 	bl	800956c <tcp_abandon>
      return;
 800b26c:	e006      	b.n	800b27c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800b26e:	6978      	ldr	r0, [r7, #20]
 800b270:	f002 f922 	bl	800d4b8 <tcp_output>
  return;
 800b274:	e001      	b.n	800b27a <tcp_listen_input+0x1be>
    return;
 800b276:	bf00      	nop
 800b278:	e000      	b.n	800b27c <tcp_listen_input+0x1c0>
  return;
 800b27a:	bf00      	nop
}
 800b27c:	371c      	adds	r7, #28
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd90      	pop	{r4, r7, pc}
 800b282:	bf00      	nop
 800b284:	20008534 	.word	0x20008534
 800b288:	08015a80 	.word	0x08015a80
 800b28c:	08015c78 	.word	0x08015c78
 800b290:	08015acc 	.word	0x08015acc
 800b294:	2000852c 	.word	0x2000852c
 800b298:	20008532 	.word	0x20008532
 800b29c:	20008528 	.word	0x20008528
 800b2a0:	20008518 	.word	0x20008518
 800b2a4:	2000b834 	.word	0x2000b834
 800b2a8:	2000b838 	.word	0x2000b838
 800b2ac:	2000b824 	.word	0x2000b824
 800b2b0:	2000ef58 	.word	0x2000ef58
 800b2b4:	2000ef54 	.word	0x2000ef54

0800b2b8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b086      	sub	sp, #24
 800b2bc:	af04      	add	r7, sp, #16
 800b2be:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800b2c0:	4b2f      	ldr	r3, [pc, #188]	; (800b380 <tcp_timewait_input+0xc8>)
 800b2c2:	781b      	ldrb	r3, [r3, #0]
 800b2c4:	f003 0304 	and.w	r3, r3, #4
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d153      	bne.n	800b374 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d106      	bne.n	800b2e0 <tcp_timewait_input+0x28>
 800b2d2:	4b2c      	ldr	r3, [pc, #176]	; (800b384 <tcp_timewait_input+0xcc>)
 800b2d4:	f240 22ee 	movw	r2, #750	; 0x2ee
 800b2d8:	492b      	ldr	r1, [pc, #172]	; (800b388 <tcp_timewait_input+0xd0>)
 800b2da:	482c      	ldr	r0, [pc, #176]	; (800b38c <tcp_timewait_input+0xd4>)
 800b2dc:	f008 fabe 	bl	801385c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800b2e0:	4b27      	ldr	r3, [pc, #156]	; (800b380 <tcp_timewait_input+0xc8>)
 800b2e2:	781b      	ldrb	r3, [r3, #0]
 800b2e4:	f003 0302 	and.w	r3, r3, #2
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d02a      	beq.n	800b342 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800b2ec:	4b28      	ldr	r3, [pc, #160]	; (800b390 <tcp_timewait_input+0xd8>)
 800b2ee:	681a      	ldr	r2, [r3, #0]
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2f4:	1ad3      	subs	r3, r2, r3
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	db2d      	blt.n	800b356 <tcp_timewait_input+0x9e>
 800b2fa:	4b25      	ldr	r3, [pc, #148]	; (800b390 <tcp_timewait_input+0xd8>)
 800b2fc:	681a      	ldr	r2, [r3, #0]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b302:	6879      	ldr	r1, [r7, #4]
 800b304:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b306:	440b      	add	r3, r1
 800b308:	1ad3      	subs	r3, r2, r3
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	dc23      	bgt.n	800b356 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b30e:	4b21      	ldr	r3, [pc, #132]	; (800b394 <tcp_timewait_input+0xdc>)
 800b310:	6819      	ldr	r1, [r3, #0]
 800b312:	4b21      	ldr	r3, [pc, #132]	; (800b398 <tcp_timewait_input+0xe0>)
 800b314:	881b      	ldrh	r3, [r3, #0]
 800b316:	461a      	mov	r2, r3
 800b318:	4b1d      	ldr	r3, [pc, #116]	; (800b390 <tcp_timewait_input+0xd8>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b31e:	4b1f      	ldr	r3, [pc, #124]	; (800b39c <tcp_timewait_input+0xe4>)
 800b320:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b322:	885b      	ldrh	r3, [r3, #2]
 800b324:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b326:	4a1d      	ldr	r2, [pc, #116]	; (800b39c <tcp_timewait_input+0xe4>)
 800b328:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b32a:	8812      	ldrh	r2, [r2, #0]
 800b32c:	b292      	uxth	r2, r2
 800b32e:	9202      	str	r2, [sp, #8]
 800b330:	9301      	str	r3, [sp, #4]
 800b332:	4b1b      	ldr	r3, [pc, #108]	; (800b3a0 <tcp_timewait_input+0xe8>)
 800b334:	9300      	str	r3, [sp, #0]
 800b336:	4b1b      	ldr	r3, [pc, #108]	; (800b3a4 <tcp_timewait_input+0xec>)
 800b338:	4602      	mov	r2, r0
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f002 fe70 	bl	800e020 <tcp_rst>
      return;
 800b340:	e01b      	b.n	800b37a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800b342:	4b0f      	ldr	r3, [pc, #60]	; (800b380 <tcp_timewait_input+0xc8>)
 800b344:	781b      	ldrb	r3, [r3, #0]
 800b346:	f003 0301 	and.w	r3, r3, #1
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d003      	beq.n	800b356 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800b34e:	4b16      	ldr	r3, [pc, #88]	; (800b3a8 <tcp_timewait_input+0xf0>)
 800b350:	681a      	ldr	r2, [r3, #0]
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800b356:	4b10      	ldr	r3, [pc, #64]	; (800b398 <tcp_timewait_input+0xe0>)
 800b358:	881b      	ldrh	r3, [r3, #0]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d00c      	beq.n	800b378 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	8b5b      	ldrh	r3, [r3, #26]
 800b362:	f043 0302 	orr.w	r3, r3, #2
 800b366:	b29a      	uxth	r2, r3
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f002 f8a3 	bl	800d4b8 <tcp_output>
  }
  return;
 800b372:	e001      	b.n	800b378 <tcp_timewait_input+0xc0>
    return;
 800b374:	bf00      	nop
 800b376:	e000      	b.n	800b37a <tcp_timewait_input+0xc2>
  return;
 800b378:	bf00      	nop
}
 800b37a:	3708      	adds	r7, #8
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}
 800b380:	20008534 	.word	0x20008534
 800b384:	08015a80 	.word	0x08015a80
 800b388:	08015c98 	.word	0x08015c98
 800b38c:	08015acc 	.word	0x08015acc
 800b390:	20008528 	.word	0x20008528
 800b394:	2000852c 	.word	0x2000852c
 800b398:	20008532 	.word	0x20008532
 800b39c:	20008518 	.word	0x20008518
 800b3a0:	2000b834 	.word	0x2000b834
 800b3a4:	2000b838 	.word	0x2000b838
 800b3a8:	2000ef5c 	.word	0x2000ef5c

0800b3ac <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800b3ac:	b590      	push	{r4, r7, lr}
 800b3ae:	b08d      	sub	sp, #52	; 0x34
 800b3b0:	af04      	add	r7, sp, #16
 800b3b2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d106      	bne.n	800b3d0 <tcp_process+0x24>
 800b3c2:	4ba5      	ldr	r3, [pc, #660]	; (800b658 <tcp_process+0x2ac>)
 800b3c4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800b3c8:	49a4      	ldr	r1, [pc, #656]	; (800b65c <tcp_process+0x2b0>)
 800b3ca:	48a5      	ldr	r0, [pc, #660]	; (800b660 <tcp_process+0x2b4>)
 800b3cc:	f008 fa46 	bl	801385c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800b3d0:	4ba4      	ldr	r3, [pc, #656]	; (800b664 <tcp_process+0x2b8>)
 800b3d2:	781b      	ldrb	r3, [r3, #0]
 800b3d4:	f003 0304 	and.w	r3, r3, #4
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d04e      	beq.n	800b47a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	7d1b      	ldrb	r3, [r3, #20]
 800b3e0:	2b02      	cmp	r3, #2
 800b3e2:	d108      	bne.n	800b3f6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b3e8:	4b9f      	ldr	r3, [pc, #636]	; (800b668 <tcp_process+0x2bc>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	429a      	cmp	r2, r3
 800b3ee:	d123      	bne.n	800b438 <tcp_process+0x8c>
        acceptable = 1;
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	76fb      	strb	r3, [r7, #27]
 800b3f4:	e020      	b.n	800b438 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b3fa:	4b9c      	ldr	r3, [pc, #624]	; (800b66c <tcp_process+0x2c0>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	429a      	cmp	r2, r3
 800b400:	d102      	bne.n	800b408 <tcp_process+0x5c>
        acceptable = 1;
 800b402:	2301      	movs	r3, #1
 800b404:	76fb      	strb	r3, [r7, #27]
 800b406:	e017      	b.n	800b438 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b408:	4b98      	ldr	r3, [pc, #608]	; (800b66c <tcp_process+0x2c0>)
 800b40a:	681a      	ldr	r2, [r3, #0]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b410:	1ad3      	subs	r3, r2, r3
 800b412:	2b00      	cmp	r3, #0
 800b414:	db10      	blt.n	800b438 <tcp_process+0x8c>
 800b416:	4b95      	ldr	r3, [pc, #596]	; (800b66c <tcp_process+0x2c0>)
 800b418:	681a      	ldr	r2, [r3, #0]
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b41e:	6879      	ldr	r1, [r7, #4]
 800b420:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b422:	440b      	add	r3, r1
 800b424:	1ad3      	subs	r3, r2, r3
 800b426:	2b00      	cmp	r3, #0
 800b428:	dc06      	bgt.n	800b438 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	8b5b      	ldrh	r3, [r3, #26]
 800b42e:	f043 0302 	orr.w	r3, r3, #2
 800b432:	b29a      	uxth	r2, r3
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800b438:	7efb      	ldrb	r3, [r7, #27]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d01b      	beq.n	800b476 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	7d1b      	ldrb	r3, [r3, #20]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d106      	bne.n	800b454 <tcp_process+0xa8>
 800b446:	4b84      	ldr	r3, [pc, #528]	; (800b658 <tcp_process+0x2ac>)
 800b448:	f44f 724e 	mov.w	r2, #824	; 0x338
 800b44c:	4988      	ldr	r1, [pc, #544]	; (800b670 <tcp_process+0x2c4>)
 800b44e:	4884      	ldr	r0, [pc, #528]	; (800b660 <tcp_process+0x2b4>)
 800b450:	f008 fa04 	bl	801385c <iprintf>
      recv_flags |= TF_RESET;
 800b454:	4b87      	ldr	r3, [pc, #540]	; (800b674 <tcp_process+0x2c8>)
 800b456:	781b      	ldrb	r3, [r3, #0]
 800b458:	f043 0308 	orr.w	r3, r3, #8
 800b45c:	b2da      	uxtb	r2, r3
 800b45e:	4b85      	ldr	r3, [pc, #532]	; (800b674 <tcp_process+0x2c8>)
 800b460:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	8b5b      	ldrh	r3, [r3, #26]
 800b466:	f023 0301 	bic.w	r3, r3, #1
 800b46a:	b29a      	uxth	r2, r3
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800b470:	f06f 030d 	mvn.w	r3, #13
 800b474:	e37a      	b.n	800bb6c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800b476:	2300      	movs	r3, #0
 800b478:	e378      	b.n	800bb6c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800b47a:	4b7a      	ldr	r3, [pc, #488]	; (800b664 <tcp_process+0x2b8>)
 800b47c:	781b      	ldrb	r3, [r3, #0]
 800b47e:	f003 0302 	and.w	r3, r3, #2
 800b482:	2b00      	cmp	r3, #0
 800b484:	d010      	beq.n	800b4a8 <tcp_process+0xfc>
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	7d1b      	ldrb	r3, [r3, #20]
 800b48a:	2b02      	cmp	r3, #2
 800b48c:	d00c      	beq.n	800b4a8 <tcp_process+0xfc>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	7d1b      	ldrb	r3, [r3, #20]
 800b492:	2b03      	cmp	r3, #3
 800b494:	d008      	beq.n	800b4a8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	8b5b      	ldrh	r3, [r3, #26]
 800b49a:	f043 0302 	orr.w	r3, r3, #2
 800b49e:	b29a      	uxth	r2, r3
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	e361      	b.n	800bb6c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	8b5b      	ldrh	r3, [r3, #26]
 800b4ac:	f003 0310 	and.w	r3, r3, #16
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d103      	bne.n	800b4bc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800b4b4:	4b70      	ldr	r3, [pc, #448]	; (800b678 <tcp_process+0x2cc>)
 800b4b6:	681a      	ldr	r2, [r3, #0]
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f001 fc2d 	bl	800cd2c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	7d1b      	ldrb	r3, [r3, #20]
 800b4d6:	3b02      	subs	r3, #2
 800b4d8:	2b07      	cmp	r3, #7
 800b4da:	f200 8337 	bhi.w	800bb4c <tcp_process+0x7a0>
 800b4de:	a201      	add	r2, pc, #4	; (adr r2, 800b4e4 <tcp_process+0x138>)
 800b4e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4e4:	0800b505 	.word	0x0800b505
 800b4e8:	0800b735 	.word	0x0800b735
 800b4ec:	0800b8ad 	.word	0x0800b8ad
 800b4f0:	0800b8d7 	.word	0x0800b8d7
 800b4f4:	0800b9fb 	.word	0x0800b9fb
 800b4f8:	0800b8ad 	.word	0x0800b8ad
 800b4fc:	0800ba87 	.word	0x0800ba87
 800b500:	0800bb17 	.word	0x0800bb17
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800b504:	4b57      	ldr	r3, [pc, #348]	; (800b664 <tcp_process+0x2b8>)
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	f003 0310 	and.w	r3, r3, #16
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	f000 80e4 	beq.w	800b6da <tcp_process+0x32e>
 800b512:	4b54      	ldr	r3, [pc, #336]	; (800b664 <tcp_process+0x2b8>)
 800b514:	781b      	ldrb	r3, [r3, #0]
 800b516:	f003 0302 	and.w	r3, r3, #2
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	f000 80dd 	beq.w	800b6da <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b524:	1c5a      	adds	r2, r3, #1
 800b526:	4b50      	ldr	r3, [pc, #320]	; (800b668 <tcp_process+0x2bc>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	429a      	cmp	r2, r3
 800b52c:	f040 80d5 	bne.w	800b6da <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800b530:	4b4e      	ldr	r3, [pc, #312]	; (800b66c <tcp_process+0x2c0>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	1c5a      	adds	r2, r3, #1
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800b542:	4b49      	ldr	r3, [pc, #292]	; (800b668 <tcp_process+0x2bc>)
 800b544:	681a      	ldr	r2, [r3, #0]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800b54a:	4b4c      	ldr	r3, [pc, #304]	; (800b67c <tcp_process+0x2d0>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	89db      	ldrh	r3, [r3, #14]
 800b550:	b29a      	uxth	r2, r3
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800b564:	4b41      	ldr	r3, [pc, #260]	; (800b66c <tcp_process+0x2c0>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	1e5a      	subs	r2, r3, #1
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2204      	movs	r2, #4
 800b572:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	3304      	adds	r3, #4
 800b57c:	4618      	mov	r0, r3
 800b57e:	f006 fcb7 	bl	8011ef0 <ip4_route>
 800b582:	4601      	mov	r1, r0
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	3304      	adds	r3, #4
 800b588:	461a      	mov	r2, r3
 800b58a:	4620      	mov	r0, r4
 800b58c:	f7ff f88e 	bl	800a6ac <tcp_eff_send_mss_netif>
 800b590:	4603      	mov	r3, r0
 800b592:	461a      	mov	r2, r3
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b59c:	009a      	lsls	r2, r3, #2
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b5a2:	005b      	lsls	r3, r3, #1
 800b5a4:	f241 111c 	movw	r1, #4380	; 0x111c
 800b5a8:	428b      	cmp	r3, r1
 800b5aa:	bf38      	it	cc
 800b5ac:	460b      	movcc	r3, r1
 800b5ae:	429a      	cmp	r2, r3
 800b5b0:	d204      	bcs.n	800b5bc <tcp_process+0x210>
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b5b6:	009b      	lsls	r3, r3, #2
 800b5b8:	b29b      	uxth	r3, r3
 800b5ba:	e00d      	b.n	800b5d8 <tcp_process+0x22c>
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b5c0:	005b      	lsls	r3, r3, #1
 800b5c2:	f241 121c 	movw	r2, #4380	; 0x111c
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d904      	bls.n	800b5d4 <tcp_process+0x228>
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b5ce:	005b      	lsls	r3, r3, #1
 800b5d0:	b29b      	uxth	r3, r3
 800b5d2:	e001      	b.n	800b5d8 <tcp_process+0x22c>
 800b5d4:	f241 131c 	movw	r3, #4380	; 0x111c
 800b5d8:	687a      	ldr	r2, [r7, #4]
 800b5da:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d106      	bne.n	800b5f6 <tcp_process+0x24a>
 800b5e8:	4b1b      	ldr	r3, [pc, #108]	; (800b658 <tcp_process+0x2ac>)
 800b5ea:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800b5ee:	4924      	ldr	r1, [pc, #144]	; (800b680 <tcp_process+0x2d4>)
 800b5f0:	481b      	ldr	r0, [pc, #108]	; (800b660 <tcp_process+0x2b4>)
 800b5f2:	f008 f933 	bl	801385c <iprintf>
        --pcb->snd_queuelen;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b5fc:	3b01      	subs	r3, #1
 800b5fe:	b29a      	uxth	r2, r3
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b60a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800b60c:	69fb      	ldr	r3, [r7, #28]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d111      	bne.n	800b636 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b616:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800b618:	69fb      	ldr	r3, [r7, #28]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d106      	bne.n	800b62c <tcp_process+0x280>
 800b61e:	4b0e      	ldr	r3, [pc, #56]	; (800b658 <tcp_process+0x2ac>)
 800b620:	f44f 725d 	mov.w	r2, #884	; 0x374
 800b624:	4917      	ldr	r1, [pc, #92]	; (800b684 <tcp_process+0x2d8>)
 800b626:	480e      	ldr	r0, [pc, #56]	; (800b660 <tcp_process+0x2b4>)
 800b628:	f008 f918 	bl	801385c <iprintf>
          pcb->unsent = rseg->next;
 800b62c:	69fb      	ldr	r3, [r7, #28]
 800b62e:	681a      	ldr	r2, [r3, #0]
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	66da      	str	r2, [r3, #108]	; 0x6c
 800b634:	e003      	b.n	800b63e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800b636:	69fb      	ldr	r3, [r7, #28]
 800b638:	681a      	ldr	r2, [r3, #0]
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800b63e:	69f8      	ldr	r0, [r7, #28]
 800b640:	f7fe fd3d 	bl	800a0be <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d11d      	bne.n	800b688 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b652:	861a      	strh	r2, [r3, #48]	; 0x30
 800b654:	e01f      	b.n	800b696 <tcp_process+0x2ea>
 800b656:	bf00      	nop
 800b658:	08015a80 	.word	0x08015a80
 800b65c:	08015cb8 	.word	0x08015cb8
 800b660:	08015acc 	.word	0x08015acc
 800b664:	20008534 	.word	0x20008534
 800b668:	2000852c 	.word	0x2000852c
 800b66c:	20008528 	.word	0x20008528
 800b670:	08015cd4 	.word	0x08015cd4
 800b674:	20008535 	.word	0x20008535
 800b678:	2000ef5c 	.word	0x2000ef5c
 800b67c:	20008518 	.word	0x20008518
 800b680:	08015cf4 	.word	0x08015cf4
 800b684:	08015d0c 	.word	0x08015d0c
        } else {
          pcb->rtime = 0;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2200      	movs	r2, #0
 800b68c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2200      	movs	r2, #0
 800b692:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d00a      	beq.n	800b6b6 <tcp_process+0x30a>
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6a6:	687a      	ldr	r2, [r7, #4]
 800b6a8:	6910      	ldr	r0, [r2, #16]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	6879      	ldr	r1, [r7, #4]
 800b6ae:	4798      	blx	r3
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	76bb      	strb	r3, [r7, #26]
 800b6b4:	e001      	b.n	800b6ba <tcp_process+0x30e>
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800b6ba:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b6be:	f113 0f0d 	cmn.w	r3, #13
 800b6c2:	d102      	bne.n	800b6ca <tcp_process+0x31e>
          return ERR_ABRT;
 800b6c4:	f06f 030c 	mvn.w	r3, #12
 800b6c8:	e250      	b.n	800bb6c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	8b5b      	ldrh	r3, [r3, #26]
 800b6ce:	f043 0302 	orr.w	r3, r3, #2
 800b6d2:	b29a      	uxth	r2, r3
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800b6d8:	e23a      	b.n	800bb50 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800b6da:	4b9d      	ldr	r3, [pc, #628]	; (800b950 <tcp_process+0x5a4>)
 800b6dc:	781b      	ldrb	r3, [r3, #0]
 800b6de:	f003 0310 	and.w	r3, r3, #16
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	f000 8234 	beq.w	800bb50 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b6e8:	4b9a      	ldr	r3, [pc, #616]	; (800b954 <tcp_process+0x5a8>)
 800b6ea:	6819      	ldr	r1, [r3, #0]
 800b6ec:	4b9a      	ldr	r3, [pc, #616]	; (800b958 <tcp_process+0x5ac>)
 800b6ee:	881b      	ldrh	r3, [r3, #0]
 800b6f0:	461a      	mov	r2, r3
 800b6f2:	4b9a      	ldr	r3, [pc, #616]	; (800b95c <tcp_process+0x5b0>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b6f8:	4b99      	ldr	r3, [pc, #612]	; (800b960 <tcp_process+0x5b4>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b6fc:	885b      	ldrh	r3, [r3, #2]
 800b6fe:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b700:	4a97      	ldr	r2, [pc, #604]	; (800b960 <tcp_process+0x5b4>)
 800b702:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b704:	8812      	ldrh	r2, [r2, #0]
 800b706:	b292      	uxth	r2, r2
 800b708:	9202      	str	r2, [sp, #8]
 800b70a:	9301      	str	r3, [sp, #4]
 800b70c:	4b95      	ldr	r3, [pc, #596]	; (800b964 <tcp_process+0x5b8>)
 800b70e:	9300      	str	r3, [sp, #0]
 800b710:	4b95      	ldr	r3, [pc, #596]	; (800b968 <tcp_process+0x5bc>)
 800b712:	4602      	mov	r2, r0
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f002 fc83 	bl	800e020 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b720:	2b05      	cmp	r3, #5
 800b722:	f200 8215 	bhi.w	800bb50 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2200      	movs	r2, #0
 800b72a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f002 fa4d 	bl	800dbcc <tcp_rexmit_rto>
      break;
 800b732:	e20d      	b.n	800bb50 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800b734:	4b86      	ldr	r3, [pc, #536]	; (800b950 <tcp_process+0x5a4>)
 800b736:	781b      	ldrb	r3, [r3, #0]
 800b738:	f003 0310 	and.w	r3, r3, #16
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	f000 80a1 	beq.w	800b884 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b742:	4b84      	ldr	r3, [pc, #528]	; (800b954 <tcp_process+0x5a8>)
 800b744:	681a      	ldr	r2, [r3, #0]
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b74a:	1ad3      	subs	r3, r2, r3
 800b74c:	3b01      	subs	r3, #1
 800b74e:	2b00      	cmp	r3, #0
 800b750:	db7e      	blt.n	800b850 <tcp_process+0x4a4>
 800b752:	4b80      	ldr	r3, [pc, #512]	; (800b954 <tcp_process+0x5a8>)
 800b754:	681a      	ldr	r2, [r3, #0]
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b75a:	1ad3      	subs	r3, r2, r3
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	dc77      	bgt.n	800b850 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2204      	movs	r2, #4
 800b764:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d102      	bne.n	800b774 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800b76e:	23fa      	movs	r3, #250	; 0xfa
 800b770:	76bb      	strb	r3, [r7, #26]
 800b772:	e01d      	b.n	800b7b0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b778:	699b      	ldr	r3, [r3, #24]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d106      	bne.n	800b78c <tcp_process+0x3e0>
 800b77e:	4b7b      	ldr	r3, [pc, #492]	; (800b96c <tcp_process+0x5c0>)
 800b780:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800b784:	497a      	ldr	r1, [pc, #488]	; (800b970 <tcp_process+0x5c4>)
 800b786:	487b      	ldr	r0, [pc, #492]	; (800b974 <tcp_process+0x5c8>)
 800b788:	f008 f868 	bl	801385c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b790:	699b      	ldr	r3, [r3, #24]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d00a      	beq.n	800b7ac <tcp_process+0x400>
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b79a:	699b      	ldr	r3, [r3, #24]
 800b79c:	687a      	ldr	r2, [r7, #4]
 800b79e:	6910      	ldr	r0, [r2, #16]
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	6879      	ldr	r1, [r7, #4]
 800b7a4:	4798      	blx	r3
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	76bb      	strb	r3, [r7, #26]
 800b7aa:	e001      	b.n	800b7b0 <tcp_process+0x404>
 800b7ac:	23f0      	movs	r3, #240	; 0xf0
 800b7ae:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800b7b0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d00a      	beq.n	800b7ce <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800b7b8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b7bc:	f113 0f0d 	cmn.w	r3, #13
 800b7c0:	d002      	beq.n	800b7c8 <tcp_process+0x41c>
              tcp_abort(pcb);
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f7fd ff90 	bl	80096e8 <tcp_abort>
            }
            return ERR_ABRT;
 800b7c8:	f06f 030c 	mvn.w	r3, #12
 800b7cc:	e1ce      	b.n	800bb6c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f000 fae0 	bl	800bd94 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800b7d4:	4b68      	ldr	r3, [pc, #416]	; (800b978 <tcp_process+0x5cc>)
 800b7d6:	881b      	ldrh	r3, [r3, #0]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d005      	beq.n	800b7e8 <tcp_process+0x43c>
            recv_acked--;
 800b7dc:	4b66      	ldr	r3, [pc, #408]	; (800b978 <tcp_process+0x5cc>)
 800b7de:	881b      	ldrh	r3, [r3, #0]
 800b7e0:	3b01      	subs	r3, #1
 800b7e2:	b29a      	uxth	r2, r3
 800b7e4:	4b64      	ldr	r3, [pc, #400]	; (800b978 <tcp_process+0x5cc>)
 800b7e6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b7ec:	009a      	lsls	r2, r3, #2
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b7f2:	005b      	lsls	r3, r3, #1
 800b7f4:	f241 111c 	movw	r1, #4380	; 0x111c
 800b7f8:	428b      	cmp	r3, r1
 800b7fa:	bf38      	it	cc
 800b7fc:	460b      	movcc	r3, r1
 800b7fe:	429a      	cmp	r2, r3
 800b800:	d204      	bcs.n	800b80c <tcp_process+0x460>
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b806:	009b      	lsls	r3, r3, #2
 800b808:	b29b      	uxth	r3, r3
 800b80a:	e00d      	b.n	800b828 <tcp_process+0x47c>
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b810:	005b      	lsls	r3, r3, #1
 800b812:	f241 121c 	movw	r2, #4380	; 0x111c
 800b816:	4293      	cmp	r3, r2
 800b818:	d904      	bls.n	800b824 <tcp_process+0x478>
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b81e:	005b      	lsls	r3, r3, #1
 800b820:	b29b      	uxth	r3, r3
 800b822:	e001      	b.n	800b828 <tcp_process+0x47c>
 800b824:	f241 131c 	movw	r3, #4380	; 0x111c
 800b828:	687a      	ldr	r2, [r7, #4]
 800b82a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800b82e:	4b53      	ldr	r3, [pc, #332]	; (800b97c <tcp_process+0x5d0>)
 800b830:	781b      	ldrb	r3, [r3, #0]
 800b832:	f003 0320 	and.w	r3, r3, #32
 800b836:	2b00      	cmp	r3, #0
 800b838:	d037      	beq.n	800b8aa <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	8b5b      	ldrh	r3, [r3, #26]
 800b83e:	f043 0302 	orr.w	r3, r3, #2
 800b842:	b29a      	uxth	r2, r3
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2207      	movs	r2, #7
 800b84c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800b84e:	e02c      	b.n	800b8aa <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b850:	4b40      	ldr	r3, [pc, #256]	; (800b954 <tcp_process+0x5a8>)
 800b852:	6819      	ldr	r1, [r3, #0]
 800b854:	4b40      	ldr	r3, [pc, #256]	; (800b958 <tcp_process+0x5ac>)
 800b856:	881b      	ldrh	r3, [r3, #0]
 800b858:	461a      	mov	r2, r3
 800b85a:	4b40      	ldr	r3, [pc, #256]	; (800b95c <tcp_process+0x5b0>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b860:	4b3f      	ldr	r3, [pc, #252]	; (800b960 <tcp_process+0x5b4>)
 800b862:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b864:	885b      	ldrh	r3, [r3, #2]
 800b866:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b868:	4a3d      	ldr	r2, [pc, #244]	; (800b960 <tcp_process+0x5b4>)
 800b86a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b86c:	8812      	ldrh	r2, [r2, #0]
 800b86e:	b292      	uxth	r2, r2
 800b870:	9202      	str	r2, [sp, #8]
 800b872:	9301      	str	r3, [sp, #4]
 800b874:	4b3b      	ldr	r3, [pc, #236]	; (800b964 <tcp_process+0x5b8>)
 800b876:	9300      	str	r3, [sp, #0]
 800b878:	4b3b      	ldr	r3, [pc, #236]	; (800b968 <tcp_process+0x5bc>)
 800b87a:	4602      	mov	r2, r0
 800b87c:	6878      	ldr	r0, [r7, #4]
 800b87e:	f002 fbcf 	bl	800e020 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800b882:	e167      	b.n	800bb54 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800b884:	4b32      	ldr	r3, [pc, #200]	; (800b950 <tcp_process+0x5a4>)
 800b886:	781b      	ldrb	r3, [r3, #0]
 800b888:	f003 0302 	and.w	r3, r3, #2
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	f000 8161 	beq.w	800bb54 <tcp_process+0x7a8>
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b896:	1e5a      	subs	r2, r3, #1
 800b898:	4b30      	ldr	r3, [pc, #192]	; (800b95c <tcp_process+0x5b0>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	429a      	cmp	r2, r3
 800b89e:	f040 8159 	bne.w	800bb54 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f002 f9b4 	bl	800dc10 <tcp_rexmit>
      break;
 800b8a8:	e154      	b.n	800bb54 <tcp_process+0x7a8>
 800b8aa:	e153      	b.n	800bb54 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f000 fa71 	bl	800bd94 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800b8b2:	4b32      	ldr	r3, [pc, #200]	; (800b97c <tcp_process+0x5d0>)
 800b8b4:	781b      	ldrb	r3, [r3, #0]
 800b8b6:	f003 0320 	and.w	r3, r3, #32
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	f000 814c 	beq.w	800bb58 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	8b5b      	ldrh	r3, [r3, #26]
 800b8c4:	f043 0302 	orr.w	r3, r3, #2
 800b8c8:	b29a      	uxth	r2, r3
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2207      	movs	r2, #7
 800b8d2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b8d4:	e140      	b.n	800bb58 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f000 fa5c 	bl	800bd94 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b8dc:	4b27      	ldr	r3, [pc, #156]	; (800b97c <tcp_process+0x5d0>)
 800b8de:	781b      	ldrb	r3, [r3, #0]
 800b8e0:	f003 0320 	and.w	r3, r3, #32
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d071      	beq.n	800b9cc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b8e8:	4b19      	ldr	r3, [pc, #100]	; (800b950 <tcp_process+0x5a4>)
 800b8ea:	781b      	ldrb	r3, [r3, #0]
 800b8ec:	f003 0310 	and.w	r3, r3, #16
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d060      	beq.n	800b9b6 <tcp_process+0x60a>
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b8f8:	4b16      	ldr	r3, [pc, #88]	; (800b954 <tcp_process+0x5a8>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	d15a      	bne.n	800b9b6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b904:	2b00      	cmp	r3, #0
 800b906:	d156      	bne.n	800b9b6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	8b5b      	ldrh	r3, [r3, #26]
 800b90c:	f043 0302 	orr.w	r3, r3, #2
 800b910:	b29a      	uxth	r2, r3
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f7fe fdbe 	bl	800a498 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800b91c:	4b18      	ldr	r3, [pc, #96]	; (800b980 <tcp_process+0x5d4>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	687a      	ldr	r2, [r7, #4]
 800b922:	429a      	cmp	r2, r3
 800b924:	d105      	bne.n	800b932 <tcp_process+0x586>
 800b926:	4b16      	ldr	r3, [pc, #88]	; (800b980 <tcp_process+0x5d4>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	68db      	ldr	r3, [r3, #12]
 800b92c:	4a14      	ldr	r2, [pc, #80]	; (800b980 <tcp_process+0x5d4>)
 800b92e:	6013      	str	r3, [r2, #0]
 800b930:	e02e      	b.n	800b990 <tcp_process+0x5e4>
 800b932:	4b13      	ldr	r3, [pc, #76]	; (800b980 <tcp_process+0x5d4>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	617b      	str	r3, [r7, #20]
 800b938:	e027      	b.n	800b98a <tcp_process+0x5de>
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	68db      	ldr	r3, [r3, #12]
 800b93e:	687a      	ldr	r2, [r7, #4]
 800b940:	429a      	cmp	r2, r3
 800b942:	d11f      	bne.n	800b984 <tcp_process+0x5d8>
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	68da      	ldr	r2, [r3, #12]
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	60da      	str	r2, [r3, #12]
 800b94c:	e020      	b.n	800b990 <tcp_process+0x5e4>
 800b94e:	bf00      	nop
 800b950:	20008534 	.word	0x20008534
 800b954:	2000852c 	.word	0x2000852c
 800b958:	20008532 	.word	0x20008532
 800b95c:	20008528 	.word	0x20008528
 800b960:	20008518 	.word	0x20008518
 800b964:	2000b834 	.word	0x2000b834
 800b968:	2000b838 	.word	0x2000b838
 800b96c:	08015a80 	.word	0x08015a80
 800b970:	08015d20 	.word	0x08015d20
 800b974:	08015acc 	.word	0x08015acc
 800b978:	20008530 	.word	0x20008530
 800b97c:	20008535 	.word	0x20008535
 800b980:	2000ef58 	.word	0x2000ef58
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	68db      	ldr	r3, [r3, #12]
 800b988:	617b      	str	r3, [r7, #20]
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d1d4      	bne.n	800b93a <tcp_process+0x58e>
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2200      	movs	r2, #0
 800b994:	60da      	str	r2, [r3, #12]
 800b996:	4b77      	ldr	r3, [pc, #476]	; (800bb74 <tcp_process+0x7c8>)
 800b998:	2201      	movs	r2, #1
 800b99a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	220a      	movs	r2, #10
 800b9a0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800b9a2:	4b75      	ldr	r3, [pc, #468]	; (800bb78 <tcp_process+0x7cc>)
 800b9a4:	681a      	ldr	r2, [r3, #0]
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	60da      	str	r2, [r3, #12]
 800b9aa:	4a73      	ldr	r2, [pc, #460]	; (800bb78 <tcp_process+0x7cc>)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6013      	str	r3, [r2, #0]
 800b9b0:	f002 fcf8 	bl	800e3a4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800b9b4:	e0d2      	b.n	800bb5c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	8b5b      	ldrh	r3, [r3, #26]
 800b9ba:	f043 0302 	orr.w	r3, r3, #2
 800b9be:	b29a      	uxth	r2, r3
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2208      	movs	r2, #8
 800b9c8:	751a      	strb	r2, [r3, #20]
      break;
 800b9ca:	e0c7      	b.n	800bb5c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b9cc:	4b6b      	ldr	r3, [pc, #428]	; (800bb7c <tcp_process+0x7d0>)
 800b9ce:	781b      	ldrb	r3, [r3, #0]
 800b9d0:	f003 0310 	and.w	r3, r3, #16
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	f000 80c1 	beq.w	800bb5c <tcp_process+0x7b0>
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b9de:	4b68      	ldr	r3, [pc, #416]	; (800bb80 <tcp_process+0x7d4>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	f040 80ba 	bne.w	800bb5c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	f040 80b5 	bne.w	800bb5c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2206      	movs	r2, #6
 800b9f6:	751a      	strb	r2, [r3, #20]
      break;
 800b9f8:	e0b0      	b.n	800bb5c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f000 f9ca 	bl	800bd94 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ba00:	4b60      	ldr	r3, [pc, #384]	; (800bb84 <tcp_process+0x7d8>)
 800ba02:	781b      	ldrb	r3, [r3, #0]
 800ba04:	f003 0320 	and.w	r3, r3, #32
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	f000 80a9 	beq.w	800bb60 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	8b5b      	ldrh	r3, [r3, #26]
 800ba12:	f043 0302 	orr.w	r3, r3, #2
 800ba16:	b29a      	uxth	r2, r3
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	f7fe fd3b 	bl	800a498 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ba22:	4b59      	ldr	r3, [pc, #356]	; (800bb88 <tcp_process+0x7dc>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	687a      	ldr	r2, [r7, #4]
 800ba28:	429a      	cmp	r2, r3
 800ba2a:	d105      	bne.n	800ba38 <tcp_process+0x68c>
 800ba2c:	4b56      	ldr	r3, [pc, #344]	; (800bb88 <tcp_process+0x7dc>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	68db      	ldr	r3, [r3, #12]
 800ba32:	4a55      	ldr	r2, [pc, #340]	; (800bb88 <tcp_process+0x7dc>)
 800ba34:	6013      	str	r3, [r2, #0]
 800ba36:	e013      	b.n	800ba60 <tcp_process+0x6b4>
 800ba38:	4b53      	ldr	r3, [pc, #332]	; (800bb88 <tcp_process+0x7dc>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	613b      	str	r3, [r7, #16]
 800ba3e:	e00c      	b.n	800ba5a <tcp_process+0x6ae>
 800ba40:	693b      	ldr	r3, [r7, #16]
 800ba42:	68db      	ldr	r3, [r3, #12]
 800ba44:	687a      	ldr	r2, [r7, #4]
 800ba46:	429a      	cmp	r2, r3
 800ba48:	d104      	bne.n	800ba54 <tcp_process+0x6a8>
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	68da      	ldr	r2, [r3, #12]
 800ba4e:	693b      	ldr	r3, [r7, #16]
 800ba50:	60da      	str	r2, [r3, #12]
 800ba52:	e005      	b.n	800ba60 <tcp_process+0x6b4>
 800ba54:	693b      	ldr	r3, [r7, #16]
 800ba56:	68db      	ldr	r3, [r3, #12]
 800ba58:	613b      	str	r3, [r7, #16]
 800ba5a:	693b      	ldr	r3, [r7, #16]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d1ef      	bne.n	800ba40 <tcp_process+0x694>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2200      	movs	r2, #0
 800ba64:	60da      	str	r2, [r3, #12]
 800ba66:	4b43      	ldr	r3, [pc, #268]	; (800bb74 <tcp_process+0x7c8>)
 800ba68:	2201      	movs	r2, #1
 800ba6a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	220a      	movs	r2, #10
 800ba70:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ba72:	4b41      	ldr	r3, [pc, #260]	; (800bb78 <tcp_process+0x7cc>)
 800ba74:	681a      	ldr	r2, [r3, #0]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	60da      	str	r2, [r3, #12]
 800ba7a:	4a3f      	ldr	r2, [pc, #252]	; (800bb78 <tcp_process+0x7cc>)
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6013      	str	r3, [r2, #0]
 800ba80:	f002 fc90 	bl	800e3a4 <tcp_timer_needed>
      }
      break;
 800ba84:	e06c      	b.n	800bb60 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f000 f984 	bl	800bd94 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ba8c:	4b3b      	ldr	r3, [pc, #236]	; (800bb7c <tcp_process+0x7d0>)
 800ba8e:	781b      	ldrb	r3, [r3, #0]
 800ba90:	f003 0310 	and.w	r3, r3, #16
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d065      	beq.n	800bb64 <tcp_process+0x7b8>
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ba9c:	4b38      	ldr	r3, [pc, #224]	; (800bb80 <tcp_process+0x7d4>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	429a      	cmp	r2, r3
 800baa2:	d15f      	bne.n	800bb64 <tcp_process+0x7b8>
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d15b      	bne.n	800bb64 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f7fe fcf3 	bl	800a498 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800bab2:	4b35      	ldr	r3, [pc, #212]	; (800bb88 <tcp_process+0x7dc>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	687a      	ldr	r2, [r7, #4]
 800bab8:	429a      	cmp	r2, r3
 800baba:	d105      	bne.n	800bac8 <tcp_process+0x71c>
 800babc:	4b32      	ldr	r3, [pc, #200]	; (800bb88 <tcp_process+0x7dc>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	68db      	ldr	r3, [r3, #12]
 800bac2:	4a31      	ldr	r2, [pc, #196]	; (800bb88 <tcp_process+0x7dc>)
 800bac4:	6013      	str	r3, [r2, #0]
 800bac6:	e013      	b.n	800baf0 <tcp_process+0x744>
 800bac8:	4b2f      	ldr	r3, [pc, #188]	; (800bb88 <tcp_process+0x7dc>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	60fb      	str	r3, [r7, #12]
 800bace:	e00c      	b.n	800baea <tcp_process+0x73e>
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	68db      	ldr	r3, [r3, #12]
 800bad4:	687a      	ldr	r2, [r7, #4]
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d104      	bne.n	800bae4 <tcp_process+0x738>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	68da      	ldr	r2, [r3, #12]
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	60da      	str	r2, [r3, #12]
 800bae2:	e005      	b.n	800baf0 <tcp_process+0x744>
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	68db      	ldr	r3, [r3, #12]
 800bae8:	60fb      	str	r3, [r7, #12]
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d1ef      	bne.n	800bad0 <tcp_process+0x724>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2200      	movs	r2, #0
 800baf4:	60da      	str	r2, [r3, #12]
 800baf6:	4b1f      	ldr	r3, [pc, #124]	; (800bb74 <tcp_process+0x7c8>)
 800baf8:	2201      	movs	r2, #1
 800bafa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	220a      	movs	r2, #10
 800bb00:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800bb02:	4b1d      	ldr	r3, [pc, #116]	; (800bb78 <tcp_process+0x7cc>)
 800bb04:	681a      	ldr	r2, [r3, #0]
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	60da      	str	r2, [r3, #12]
 800bb0a:	4a1b      	ldr	r2, [pc, #108]	; (800bb78 <tcp_process+0x7cc>)
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	6013      	str	r3, [r2, #0]
 800bb10:	f002 fc48 	bl	800e3a4 <tcp_timer_needed>
      }
      break;
 800bb14:	e026      	b.n	800bb64 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f000 f93c 	bl	800bd94 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800bb1c:	4b17      	ldr	r3, [pc, #92]	; (800bb7c <tcp_process+0x7d0>)
 800bb1e:	781b      	ldrb	r3, [r3, #0]
 800bb20:	f003 0310 	and.w	r3, r3, #16
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d01f      	beq.n	800bb68 <tcp_process+0x7bc>
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bb2c:	4b14      	ldr	r3, [pc, #80]	; (800bb80 <tcp_process+0x7d4>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	429a      	cmp	r2, r3
 800bb32:	d119      	bne.n	800bb68 <tcp_process+0x7bc>
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d115      	bne.n	800bb68 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800bb3c:	4b11      	ldr	r3, [pc, #68]	; (800bb84 <tcp_process+0x7d8>)
 800bb3e:	781b      	ldrb	r3, [r3, #0]
 800bb40:	f043 0310 	orr.w	r3, r3, #16
 800bb44:	b2da      	uxtb	r2, r3
 800bb46:	4b0f      	ldr	r3, [pc, #60]	; (800bb84 <tcp_process+0x7d8>)
 800bb48:	701a      	strb	r2, [r3, #0]
      }
      break;
 800bb4a:	e00d      	b.n	800bb68 <tcp_process+0x7bc>
    default:
      break;
 800bb4c:	bf00      	nop
 800bb4e:	e00c      	b.n	800bb6a <tcp_process+0x7be>
      break;
 800bb50:	bf00      	nop
 800bb52:	e00a      	b.n	800bb6a <tcp_process+0x7be>
      break;
 800bb54:	bf00      	nop
 800bb56:	e008      	b.n	800bb6a <tcp_process+0x7be>
      break;
 800bb58:	bf00      	nop
 800bb5a:	e006      	b.n	800bb6a <tcp_process+0x7be>
      break;
 800bb5c:	bf00      	nop
 800bb5e:	e004      	b.n	800bb6a <tcp_process+0x7be>
      break;
 800bb60:	bf00      	nop
 800bb62:	e002      	b.n	800bb6a <tcp_process+0x7be>
      break;
 800bb64:	bf00      	nop
 800bb66:	e000      	b.n	800bb6a <tcp_process+0x7be>
      break;
 800bb68:	bf00      	nop
  }
  return ERR_OK;
 800bb6a:	2300      	movs	r3, #0
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	3724      	adds	r7, #36	; 0x24
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd90      	pop	{r4, r7, pc}
 800bb74:	2000ef54 	.word	0x2000ef54
 800bb78:	2000ef68 	.word	0x2000ef68
 800bb7c:	20008534 	.word	0x20008534
 800bb80:	2000852c 	.word	0x2000852c
 800bb84:	20008535 	.word	0x20008535
 800bb88:	2000ef58 	.word	0x2000ef58

0800bb8c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800bb8c:	b590      	push	{r4, r7, lr}
 800bb8e:	b085      	sub	sp, #20
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
 800bb94:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d106      	bne.n	800bbaa <tcp_oos_insert_segment+0x1e>
 800bb9c:	4b3b      	ldr	r3, [pc, #236]	; (800bc8c <tcp_oos_insert_segment+0x100>)
 800bb9e:	f240 421f 	movw	r2, #1055	; 0x41f
 800bba2:	493b      	ldr	r1, [pc, #236]	; (800bc90 <tcp_oos_insert_segment+0x104>)
 800bba4:	483b      	ldr	r0, [pc, #236]	; (800bc94 <tcp_oos_insert_segment+0x108>)
 800bba6:	f007 fe59 	bl	801385c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	68db      	ldr	r3, [r3, #12]
 800bbae:	899b      	ldrh	r3, [r3, #12]
 800bbb0:	b29b      	uxth	r3, r3
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f7fb fc3c 	bl	8007430 <lwip_htons>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	b2db      	uxtb	r3, r3
 800bbbc:	f003 0301 	and.w	r3, r3, #1
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d028      	beq.n	800bc16 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800bbc4:	6838      	ldr	r0, [r7, #0]
 800bbc6:	f7fe fa65 	bl	800a094 <tcp_segs_free>
    next = NULL;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	603b      	str	r3, [r7, #0]
 800bbce:	e056      	b.n	800bc7e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	68db      	ldr	r3, [r3, #12]
 800bbd4:	899b      	ldrh	r3, [r3, #12]
 800bbd6:	b29b      	uxth	r3, r3
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f7fb fc29 	bl	8007430 <lwip_htons>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	b2db      	uxtb	r3, r3
 800bbe2:	f003 0301 	and.w	r3, r3, #1
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d00d      	beq.n	800bc06 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	68db      	ldr	r3, [r3, #12]
 800bbee:	899b      	ldrh	r3, [r3, #12]
 800bbf0:	b29c      	uxth	r4, r3
 800bbf2:	2001      	movs	r0, #1
 800bbf4:	f7fb fc1c 	bl	8007430 <lwip_htons>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	461a      	mov	r2, r3
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	68db      	ldr	r3, [r3, #12]
 800bc00:	4322      	orrs	r2, r4
 800bc02:	b292      	uxth	r2, r2
 800bc04:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800bc10:	68f8      	ldr	r0, [r7, #12]
 800bc12:	f7fe fa54 	bl	800a0be <tcp_seg_free>
    while (next &&
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d00e      	beq.n	800bc3a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	891b      	ldrh	r3, [r3, #8]
 800bc20:	461a      	mov	r2, r3
 800bc22:	4b1d      	ldr	r3, [pc, #116]	; (800bc98 <tcp_oos_insert_segment+0x10c>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	441a      	add	r2, r3
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	68db      	ldr	r3, [r3, #12]
 800bc2c:	685b      	ldr	r3, [r3, #4]
 800bc2e:	6839      	ldr	r1, [r7, #0]
 800bc30:	8909      	ldrh	r1, [r1, #8]
 800bc32:	440b      	add	r3, r1
 800bc34:	1ad3      	subs	r3, r2, r3
    while (next &&
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	daca      	bge.n	800bbd0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d01e      	beq.n	800bc7e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	891b      	ldrh	r3, [r3, #8]
 800bc44:	461a      	mov	r2, r3
 800bc46:	4b14      	ldr	r3, [pc, #80]	; (800bc98 <tcp_oos_insert_segment+0x10c>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	441a      	add	r2, r3
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	68db      	ldr	r3, [r3, #12]
 800bc50:	685b      	ldr	r3, [r3, #4]
 800bc52:	1ad3      	subs	r3, r2, r3
    if (next &&
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	dd12      	ble.n	800bc7e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	68db      	ldr	r3, [r3, #12]
 800bc5c:	685b      	ldr	r3, [r3, #4]
 800bc5e:	b29a      	uxth	r2, r3
 800bc60:	4b0d      	ldr	r3, [pc, #52]	; (800bc98 <tcp_oos_insert_segment+0x10c>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	b29b      	uxth	r3, r3
 800bc66:	1ad3      	subs	r3, r2, r3
 800bc68:	b29a      	uxth	r2, r3
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	685a      	ldr	r2, [r3, #4]
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	891b      	ldrh	r3, [r3, #8]
 800bc76:	4619      	mov	r1, r3
 800bc78:	4610      	mov	r0, r2
 800bc7a:	f7fc fe0b 	bl	8008894 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	683a      	ldr	r2, [r7, #0]
 800bc82:	601a      	str	r2, [r3, #0]
}
 800bc84:	bf00      	nop
 800bc86:	3714      	adds	r7, #20
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd90      	pop	{r4, r7, pc}
 800bc8c:	08015a80 	.word	0x08015a80
 800bc90:	08015d40 	.word	0x08015d40
 800bc94:	08015acc 	.word	0x08015acc
 800bc98:	20008528 	.word	0x20008528

0800bc9c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800bc9c:	b5b0      	push	{r4, r5, r7, lr}
 800bc9e:	b086      	sub	sp, #24
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	60f8      	str	r0, [r7, #12]
 800bca4:	60b9      	str	r1, [r7, #8]
 800bca6:	607a      	str	r2, [r7, #4]
 800bca8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800bcaa:	e03e      	b.n	800bd2a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	685b      	ldr	r3, [r3, #4]
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f7fc fffe 	bl	8008cbc <pbuf_clen>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bcca:	8a7a      	ldrh	r2, [r7, #18]
 800bccc:	429a      	cmp	r2, r3
 800bcce:	d906      	bls.n	800bcde <tcp_free_acked_segments+0x42>
 800bcd0:	4b2a      	ldr	r3, [pc, #168]	; (800bd7c <tcp_free_acked_segments+0xe0>)
 800bcd2:	f240 4257 	movw	r2, #1111	; 0x457
 800bcd6:	492a      	ldr	r1, [pc, #168]	; (800bd80 <tcp_free_acked_segments+0xe4>)
 800bcd8:	482a      	ldr	r0, [pc, #168]	; (800bd84 <tcp_free_acked_segments+0xe8>)
 800bcda:	f007 fdbf 	bl	801385c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800bce4:	8a7b      	ldrh	r3, [r7, #18]
 800bce6:	1ad3      	subs	r3, r2, r3
 800bce8:	b29a      	uxth	r2, r3
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800bcf0:	697b      	ldr	r3, [r7, #20]
 800bcf2:	891a      	ldrh	r2, [r3, #8]
 800bcf4:	4b24      	ldr	r3, [pc, #144]	; (800bd88 <tcp_free_acked_segments+0xec>)
 800bcf6:	881b      	ldrh	r3, [r3, #0]
 800bcf8:	4413      	add	r3, r2
 800bcfa:	b29a      	uxth	r2, r3
 800bcfc:	4b22      	ldr	r3, [pc, #136]	; (800bd88 <tcp_free_acked_segments+0xec>)
 800bcfe:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800bd00:	6978      	ldr	r0, [r7, #20]
 800bd02:	f7fe f9dc 	bl	800a0be <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d00c      	beq.n	800bd2a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d109      	bne.n	800bd2a <tcp_free_acked_segments+0x8e>
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d106      	bne.n	800bd2a <tcp_free_acked_segments+0x8e>
 800bd1c:	4b17      	ldr	r3, [pc, #92]	; (800bd7c <tcp_free_acked_segments+0xe0>)
 800bd1e:	f240 4261 	movw	r2, #1121	; 0x461
 800bd22:	491a      	ldr	r1, [pc, #104]	; (800bd8c <tcp_free_acked_segments+0xf0>)
 800bd24:	4817      	ldr	r0, [pc, #92]	; (800bd84 <tcp_free_acked_segments+0xe8>)
 800bd26:	f007 fd99 	bl	801385c <iprintf>
  while (seg_list != NULL &&
 800bd2a:	68bb      	ldr	r3, [r7, #8]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d020      	beq.n	800bd72 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	68db      	ldr	r3, [r3, #12]
 800bd34:	685b      	ldr	r3, [r3, #4]
 800bd36:	4618      	mov	r0, r3
 800bd38:	f7fb fb8f 	bl	800745a <lwip_htonl>
 800bd3c:	4604      	mov	r4, r0
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	891b      	ldrh	r3, [r3, #8]
 800bd42:	461d      	mov	r5, r3
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	68db      	ldr	r3, [r3, #12]
 800bd48:	899b      	ldrh	r3, [r3, #12]
 800bd4a:	b29b      	uxth	r3, r3
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	f7fb fb6f 	bl	8007430 <lwip_htons>
 800bd52:	4603      	mov	r3, r0
 800bd54:	b2db      	uxtb	r3, r3
 800bd56:	f003 0303 	and.w	r3, r3, #3
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d001      	beq.n	800bd62 <tcp_free_acked_segments+0xc6>
 800bd5e:	2301      	movs	r3, #1
 800bd60:	e000      	b.n	800bd64 <tcp_free_acked_segments+0xc8>
 800bd62:	2300      	movs	r3, #0
 800bd64:	442b      	add	r3, r5
 800bd66:	18e2      	adds	r2, r4, r3
 800bd68:	4b09      	ldr	r3, [pc, #36]	; (800bd90 <tcp_free_acked_segments+0xf4>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	dd9c      	ble.n	800bcac <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800bd72:	68bb      	ldr	r3, [r7, #8]
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	3718      	adds	r7, #24
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bdb0      	pop	{r4, r5, r7, pc}
 800bd7c:	08015a80 	.word	0x08015a80
 800bd80:	08015d68 	.word	0x08015d68
 800bd84:	08015acc 	.word	0x08015acc
 800bd88:	20008530 	.word	0x20008530
 800bd8c:	08015d90 	.word	0x08015d90
 800bd90:	2000852c 	.word	0x2000852c

0800bd94 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800bd94:	b5b0      	push	{r4, r5, r7, lr}
 800bd96:	b094      	sub	sp, #80	; 0x50
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d106      	bne.n	800bdb4 <tcp_receive+0x20>
 800bda6:	4ba6      	ldr	r3, [pc, #664]	; (800c040 <tcp_receive+0x2ac>)
 800bda8:	f240 427b 	movw	r2, #1147	; 0x47b
 800bdac:	49a5      	ldr	r1, [pc, #660]	; (800c044 <tcp_receive+0x2b0>)
 800bdae:	48a6      	ldr	r0, [pc, #664]	; (800c048 <tcp_receive+0x2b4>)
 800bdb0:	f007 fd54 	bl	801385c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	7d1b      	ldrb	r3, [r3, #20]
 800bdb8:	2b03      	cmp	r3, #3
 800bdba:	d806      	bhi.n	800bdca <tcp_receive+0x36>
 800bdbc:	4ba0      	ldr	r3, [pc, #640]	; (800c040 <tcp_receive+0x2ac>)
 800bdbe:	f240 427c 	movw	r2, #1148	; 0x47c
 800bdc2:	49a2      	ldr	r1, [pc, #648]	; (800c04c <tcp_receive+0x2b8>)
 800bdc4:	48a0      	ldr	r0, [pc, #640]	; (800c048 <tcp_receive+0x2b4>)
 800bdc6:	f007 fd49 	bl	801385c <iprintf>

  if (flags & TCP_ACK) {
 800bdca:	4ba1      	ldr	r3, [pc, #644]	; (800c050 <tcp_receive+0x2bc>)
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	f003 0310 	and.w	r3, r3, #16
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	f000 8263 	beq.w	800c29e <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bdde:	461a      	mov	r2, r3
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bde4:	4413      	add	r3, r2
 800bde6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bdec:	4b99      	ldr	r3, [pc, #612]	; (800c054 <tcp_receive+0x2c0>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	1ad3      	subs	r3, r2, r3
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	db1b      	blt.n	800be2e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bdfa:	4b96      	ldr	r3, [pc, #600]	; (800c054 <tcp_receive+0x2c0>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800bdfe:	429a      	cmp	r2, r3
 800be00:	d106      	bne.n	800be10 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800be06:	4b94      	ldr	r3, [pc, #592]	; (800c058 <tcp_receive+0x2c4>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	1ad3      	subs	r3, r2, r3
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	db0e      	blt.n	800be2e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800be14:	4b90      	ldr	r3, [pc, #576]	; (800c058 <tcp_receive+0x2c4>)
 800be16:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800be18:	429a      	cmp	r2, r3
 800be1a:	d125      	bne.n	800be68 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800be1c:	4b8f      	ldr	r3, [pc, #572]	; (800c05c <tcp_receive+0x2c8>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	89db      	ldrh	r3, [r3, #14]
 800be22:	b29a      	uxth	r2, r3
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800be2a:	429a      	cmp	r2, r3
 800be2c:	d91c      	bls.n	800be68 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800be2e:	4b8b      	ldr	r3, [pc, #556]	; (800c05c <tcp_receive+0x2c8>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	89db      	ldrh	r3, [r3, #14]
 800be34:	b29a      	uxth	r2, r3
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800be48:	429a      	cmp	r2, r3
 800be4a:	d205      	bcs.n	800be58 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800be58:	4b7e      	ldr	r3, [pc, #504]	; (800c054 <tcp_receive+0x2c0>)
 800be5a:	681a      	ldr	r2, [r3, #0]
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800be60:	4b7d      	ldr	r3, [pc, #500]	; (800c058 <tcp_receive+0x2c4>)
 800be62:	681a      	ldr	r2, [r3, #0]
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800be68:	4b7b      	ldr	r3, [pc, #492]	; (800c058 <tcp_receive+0x2c4>)
 800be6a:	681a      	ldr	r2, [r3, #0]
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be70:	1ad3      	subs	r3, r2, r3
 800be72:	2b00      	cmp	r3, #0
 800be74:	dc58      	bgt.n	800bf28 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800be76:	4b7a      	ldr	r3, [pc, #488]	; (800c060 <tcp_receive+0x2cc>)
 800be78:	881b      	ldrh	r3, [r3, #0]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d14b      	bne.n	800bf16 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be82:	687a      	ldr	r2, [r7, #4]
 800be84:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800be88:	4413      	add	r3, r2
 800be8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be8c:	429a      	cmp	r2, r3
 800be8e:	d142      	bne.n	800bf16 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800be96:	2b00      	cmp	r3, #0
 800be98:	db3d      	blt.n	800bf16 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800be9e:	4b6e      	ldr	r3, [pc, #440]	; (800c058 <tcp_receive+0x2c4>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	429a      	cmp	r2, r3
 800bea4:	d137      	bne.n	800bf16 <tcp_receive+0x182>
              found_dupack = 1;
 800bea6:	2301      	movs	r3, #1
 800bea8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800beb0:	2bff      	cmp	r3, #255	; 0xff
 800beb2:	d007      	beq.n	800bec4 <tcp_receive+0x130>
                ++pcb->dupacks;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800beba:	3301      	adds	r3, #1
 800bebc:	b2da      	uxtb	r2, r3
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800beca:	2b03      	cmp	r3, #3
 800becc:	d91b      	bls.n	800bf06 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bed8:	4413      	add	r3, r2
 800beda:	b29a      	uxth	r2, r3
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bee2:	429a      	cmp	r2, r3
 800bee4:	d30a      	bcc.n	800befc <tcp_receive+0x168>
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bef0:	4413      	add	r3, r2
 800bef2:	b29a      	uxth	r2, r3
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800befa:	e004      	b.n	800bf06 <tcp_receive+0x172>
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bf02:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bf0c:	2b02      	cmp	r3, #2
 800bf0e:	d902      	bls.n	800bf16 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800bf10:	6878      	ldr	r0, [r7, #4]
 800bf12:	f001 fee9 	bl	800dce8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800bf16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	f040 8160 	bne.w	800c1de <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2200      	movs	r2, #0
 800bf22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bf26:	e15a      	b.n	800c1de <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bf28:	4b4b      	ldr	r3, [pc, #300]	; (800c058 <tcp_receive+0x2c4>)
 800bf2a:	681a      	ldr	r2, [r3, #0]
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf30:	1ad3      	subs	r3, r2, r3
 800bf32:	3b01      	subs	r3, #1
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	f2c0 814d 	blt.w	800c1d4 <tcp_receive+0x440>
 800bf3a:	4b47      	ldr	r3, [pc, #284]	; (800c058 <tcp_receive+0x2c4>)
 800bf3c:	681a      	ldr	r2, [r3, #0]
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf42:	1ad3      	subs	r3, r2, r3
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	f300 8145 	bgt.w	800c1d4 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	8b5b      	ldrh	r3, [r3, #26]
 800bf4e:	f003 0304 	and.w	r3, r3, #4
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d010      	beq.n	800bf78 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	8b5b      	ldrh	r3, [r3, #26]
 800bf5a:	f023 0304 	bic.w	r3, r3, #4
 800bf5e:	b29a      	uxth	r2, r3
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2200      	movs	r2, #0
 800bf74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bf86:	10db      	asrs	r3, r3, #3
 800bf88:	b21b      	sxth	r3, r3
 800bf8a:	b29a      	uxth	r2, r3
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bf92:	b29b      	uxth	r3, r3
 800bf94:	4413      	add	r3, r2
 800bf96:	b29b      	uxth	r3, r3
 800bf98:	b21a      	sxth	r2, r3
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800bfa0:	4b2d      	ldr	r3, [pc, #180]	; (800c058 <tcp_receive+0x2c4>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	b29a      	uxth	r2, r3
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfaa:	b29b      	uxth	r3, r3
 800bfac:	1ad3      	subs	r3, r2, r3
 800bfae:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800bfb8:	4b27      	ldr	r3, [pc, #156]	; (800c058 <tcp_receive+0x2c4>)
 800bfba:	681a      	ldr	r2, [r3, #0]
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	7d1b      	ldrb	r3, [r3, #20]
 800bfc4:	2b03      	cmp	r3, #3
 800bfc6:	f240 8096 	bls.w	800c0f6 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d244      	bcs.n	800c064 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	8b5b      	ldrh	r3, [r3, #26]
 800bfde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d001      	beq.n	800bfea <tcp_receive+0x256>
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	e000      	b.n	800bfec <tcp_receive+0x258>
 800bfea:	2302      	movs	r3, #2
 800bfec:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800bff0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800bff4:	b29a      	uxth	r2, r3
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bffa:	fb12 f303 	smulbb	r3, r2, r3
 800bffe:	b29b      	uxth	r3, r3
 800c000:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c002:	4293      	cmp	r3, r2
 800c004:	bf28      	it	cs
 800c006:	4613      	movcs	r3, r2
 800c008:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c010:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c012:	4413      	add	r3, r2
 800c014:	b29a      	uxth	r2, r3
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c01c:	429a      	cmp	r2, r3
 800c01e:	d309      	bcc.n	800c034 <tcp_receive+0x2a0>
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c026:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c028:	4413      	add	r3, r2
 800c02a:	b29a      	uxth	r2, r3
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c032:	e060      	b.n	800c0f6 <tcp_receive+0x362>
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c03a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c03e:	e05a      	b.n	800c0f6 <tcp_receive+0x362>
 800c040:	08015a80 	.word	0x08015a80
 800c044:	08015db0 	.word	0x08015db0
 800c048:	08015acc 	.word	0x08015acc
 800c04c:	08015dcc 	.word	0x08015dcc
 800c050:	20008534 	.word	0x20008534
 800c054:	20008528 	.word	0x20008528
 800c058:	2000852c 	.word	0x2000852c
 800c05c:	20008518 	.word	0x20008518
 800c060:	20008532 	.word	0x20008532
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c06a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c06c:	4413      	add	r3, r2
 800c06e:	b29a      	uxth	r2, r3
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c076:	429a      	cmp	r2, r3
 800c078:	d309      	bcc.n	800c08e <tcp_receive+0x2fa>
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c080:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c082:	4413      	add	r3, r2
 800c084:	b29a      	uxth	r2, r3
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c08c:	e004      	b.n	800c098 <tcp_receive+0x304>
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c094:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c0a4:	429a      	cmp	r2, r3
 800c0a6:	d326      	bcc.n	800c0f6 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c0b4:	1ad3      	subs	r3, r2, r3
 800c0b6:	b29a      	uxth	r2, r3
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c0c8:	4413      	add	r3, r2
 800c0ca:	b29a      	uxth	r2, r3
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c0d2:	429a      	cmp	r2, r3
 800c0d4:	d30a      	bcc.n	800c0ec <tcp_receive+0x358>
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c0e0:	4413      	add	r3, r2
 800c0e2:	b29a      	uxth	r2, r3
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c0ea:	e004      	b.n	800c0f6 <tcp_receive+0x362>
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c0f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0fe:	4a98      	ldr	r2, [pc, #608]	; (800c360 <tcp_receive+0x5cc>)
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f7ff fdcb 	bl	800bc9c <tcp_free_acked_segments>
 800c106:	4602      	mov	r2, r0
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c114:	4a93      	ldr	r2, [pc, #588]	; (800c364 <tcp_receive+0x5d0>)
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f7ff fdc0 	bl	800bc9c <tcp_free_acked_segments>
 800c11c:	4602      	mov	r2, r0
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c126:	2b00      	cmp	r3, #0
 800c128:	d104      	bne.n	800c134 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c130:	861a      	strh	r2, [r3, #48]	; 0x30
 800c132:	e002      	b.n	800c13a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2200      	movs	r2, #0
 800c138:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2200      	movs	r2, #0
 800c13e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c144:	2b00      	cmp	r3, #0
 800c146:	d103      	bne.n	800c150 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2200      	movs	r2, #0
 800c14c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800c156:	4b84      	ldr	r3, [pc, #528]	; (800c368 <tcp_receive+0x5d4>)
 800c158:	881b      	ldrh	r3, [r3, #0]
 800c15a:	4413      	add	r3, r2
 800c15c:	b29a      	uxth	r2, r3
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	8b5b      	ldrh	r3, [r3, #26]
 800c168:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d035      	beq.n	800c1dc <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c174:	2b00      	cmp	r3, #0
 800c176:	d118      	bne.n	800c1aa <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d00c      	beq.n	800c19a <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c188:	68db      	ldr	r3, [r3, #12]
 800c18a:	685b      	ldr	r3, [r3, #4]
 800c18c:	4618      	mov	r0, r3
 800c18e:	f7fb f964 	bl	800745a <lwip_htonl>
 800c192:	4603      	mov	r3, r0
 800c194:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800c196:	2b00      	cmp	r3, #0
 800c198:	dc20      	bgt.n	800c1dc <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	8b5b      	ldrh	r3, [r3, #26]
 800c19e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c1a2:	b29a      	uxth	r2, r3
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c1a8:	e018      	b.n	800c1dc <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1b2:	68db      	ldr	r3, [r3, #12]
 800c1b4:	685b      	ldr	r3, [r3, #4]
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f7fb f94f 	bl	800745a <lwip_htonl>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	1ae3      	subs	r3, r4, r3
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	dc0b      	bgt.n	800c1dc <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	8b5b      	ldrh	r3, [r3, #26]
 800c1c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c1cc:	b29a      	uxth	r2, r3
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c1d2:	e003      	b.n	800c1dc <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f001 ff75 	bl	800e0c4 <tcp_send_empty_ack>
 800c1da:	e000      	b.n	800c1de <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c1dc:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d05b      	beq.n	800c29e <tcp_receive+0x50a>
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c1ea:	4b60      	ldr	r3, [pc, #384]	; (800c36c <tcp_receive+0x5d8>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	1ad3      	subs	r3, r2, r3
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	da54      	bge.n	800c29e <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800c1f4:	4b5e      	ldr	r3, [pc, #376]	; (800c370 <tcp_receive+0x5dc>)
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	b29a      	uxth	r2, r3
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1fe:	b29b      	uxth	r3, r3
 800c200:	1ad3      	subs	r3, r2, r3
 800c202:	b29b      	uxth	r3, r3
 800c204:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800c208:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c212:	10db      	asrs	r3, r3, #3
 800c214:	b21b      	sxth	r3, r3
 800c216:	b29b      	uxth	r3, r3
 800c218:	1ad3      	subs	r3, r2, r3
 800c21a:	b29b      	uxth	r3, r3
 800c21c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c226:	b29a      	uxth	r2, r3
 800c228:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c22c:	4413      	add	r3, r2
 800c22e:	b29b      	uxth	r3, r3
 800c230:	b21a      	sxth	r2, r3
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800c236:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	da05      	bge.n	800c24a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800c23e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c242:	425b      	negs	r3, r3
 800c244:	b29b      	uxth	r3, r3
 800c246:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800c24a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c254:	109b      	asrs	r3, r3, #2
 800c256:	b21b      	sxth	r3, r3
 800c258:	b29b      	uxth	r3, r3
 800c25a:	1ad3      	subs	r3, r2, r3
 800c25c:	b29b      	uxth	r3, r3
 800c25e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c268:	b29a      	uxth	r2, r3
 800c26a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c26e:	4413      	add	r3, r2
 800c270:	b29b      	uxth	r3, r3
 800c272:	b21a      	sxth	r2, r3
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c27e:	10db      	asrs	r3, r3, #3
 800c280:	b21b      	sxth	r3, r3
 800c282:	b29a      	uxth	r2, r3
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c28a:	b29b      	uxth	r3, r3
 800c28c:	4413      	add	r3, r2
 800c28e:	b29b      	uxth	r3, r3
 800c290:	b21a      	sxth	r2, r3
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2200      	movs	r2, #0
 800c29c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800c29e:	4b35      	ldr	r3, [pc, #212]	; (800c374 <tcp_receive+0x5e0>)
 800c2a0:	881b      	ldrh	r3, [r3, #0]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	f000 84e1 	beq.w	800cc6a <tcp_receive+0xed6>
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	7d1b      	ldrb	r3, [r3, #20]
 800c2ac:	2b06      	cmp	r3, #6
 800c2ae:	f200 84dc 	bhi.w	800cc6a <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c2b6:	4b30      	ldr	r3, [pc, #192]	; (800c378 <tcp_receive+0x5e4>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	1ad3      	subs	r3, r2, r3
 800c2bc:	3b01      	subs	r3, #1
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	f2c0 808e 	blt.w	800c3e0 <tcp_receive+0x64c>
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c2c8:	4b2a      	ldr	r3, [pc, #168]	; (800c374 <tcp_receive+0x5e0>)
 800c2ca:	881b      	ldrh	r3, [r3, #0]
 800c2cc:	4619      	mov	r1, r3
 800c2ce:	4b2a      	ldr	r3, [pc, #168]	; (800c378 <tcp_receive+0x5e4>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	440b      	add	r3, r1
 800c2d4:	1ad3      	subs	r3, r2, r3
 800c2d6:	3301      	adds	r3, #1
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	f300 8081 	bgt.w	800c3e0 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800c2de:	4b27      	ldr	r3, [pc, #156]	; (800c37c <tcp_receive+0x5e8>)
 800c2e0:	685b      	ldr	r3, [r3, #4]
 800c2e2:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c2e8:	4b23      	ldr	r3, [pc, #140]	; (800c378 <tcp_receive+0x5e4>)
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	1ad3      	subs	r3, r2, r3
 800c2ee:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800c2f0:	4b22      	ldr	r3, [pc, #136]	; (800c37c <tcp_receive+0x5e8>)
 800c2f2:	685b      	ldr	r3, [r3, #4]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d106      	bne.n	800c306 <tcp_receive+0x572>
 800c2f8:	4b21      	ldr	r3, [pc, #132]	; (800c380 <tcp_receive+0x5ec>)
 800c2fa:	f240 5294 	movw	r2, #1428	; 0x594
 800c2fe:	4921      	ldr	r1, [pc, #132]	; (800c384 <tcp_receive+0x5f0>)
 800c300:	4821      	ldr	r0, [pc, #132]	; (800c388 <tcp_receive+0x5f4>)
 800c302:	f007 faab 	bl	801385c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800c306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c308:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c30c:	4293      	cmp	r3, r2
 800c30e:	d906      	bls.n	800c31e <tcp_receive+0x58a>
 800c310:	4b1b      	ldr	r3, [pc, #108]	; (800c380 <tcp_receive+0x5ec>)
 800c312:	f240 5295 	movw	r2, #1429	; 0x595
 800c316:	491d      	ldr	r1, [pc, #116]	; (800c38c <tcp_receive+0x5f8>)
 800c318:	481b      	ldr	r0, [pc, #108]	; (800c388 <tcp_receive+0x5f4>)
 800c31a:	f007 fa9f 	bl	801385c <iprintf>
      off = (u16_t)off32;
 800c31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c320:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c324:	4b15      	ldr	r3, [pc, #84]	; (800c37c <tcp_receive+0x5e8>)
 800c326:	685b      	ldr	r3, [r3, #4]
 800c328:	891b      	ldrh	r3, [r3, #8]
 800c32a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c32e:	429a      	cmp	r2, r3
 800c330:	d906      	bls.n	800c340 <tcp_receive+0x5ac>
 800c332:	4b13      	ldr	r3, [pc, #76]	; (800c380 <tcp_receive+0x5ec>)
 800c334:	f240 5297 	movw	r2, #1431	; 0x597
 800c338:	4915      	ldr	r1, [pc, #84]	; (800c390 <tcp_receive+0x5fc>)
 800c33a:	4813      	ldr	r0, [pc, #76]	; (800c388 <tcp_receive+0x5f4>)
 800c33c:	f007 fa8e 	bl	801385c <iprintf>
      inseg.len -= off;
 800c340:	4b0e      	ldr	r3, [pc, #56]	; (800c37c <tcp_receive+0x5e8>)
 800c342:	891a      	ldrh	r2, [r3, #8]
 800c344:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c348:	1ad3      	subs	r3, r2, r3
 800c34a:	b29a      	uxth	r2, r3
 800c34c:	4b0b      	ldr	r3, [pc, #44]	; (800c37c <tcp_receive+0x5e8>)
 800c34e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c350:	4b0a      	ldr	r3, [pc, #40]	; (800c37c <tcp_receive+0x5e8>)
 800c352:	685b      	ldr	r3, [r3, #4]
 800c354:	891a      	ldrh	r2, [r3, #8]
 800c356:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c35a:	1ad3      	subs	r3, r2, r3
 800c35c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800c35e:	e029      	b.n	800c3b4 <tcp_receive+0x620>
 800c360:	08015de8 	.word	0x08015de8
 800c364:	08015df0 	.word	0x08015df0
 800c368:	20008530 	.word	0x20008530
 800c36c:	2000852c 	.word	0x2000852c
 800c370:	2000ef5c 	.word	0x2000ef5c
 800c374:	20008532 	.word	0x20008532
 800c378:	20008528 	.word	0x20008528
 800c37c:	20008508 	.word	0x20008508
 800c380:	08015a80 	.word	0x08015a80
 800c384:	08015df8 	.word	0x08015df8
 800c388:	08015acc 	.word	0x08015acc
 800c38c:	08015e08 	.word	0x08015e08
 800c390:	08015e18 	.word	0x08015e18
        off -= p->len;
 800c394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c396:	895b      	ldrh	r3, [r3, #10]
 800c398:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c39c:	1ad3      	subs	r3, r2, r3
 800c39e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800c3a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c3a4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c3a6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800c3a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800c3ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800c3b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c3b6:	895b      	ldrh	r3, [r3, #10]
 800c3b8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c3bc:	429a      	cmp	r2, r3
 800c3be:	d8e9      	bhi.n	800c394 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800c3c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c3c4:	4619      	mov	r1, r3
 800c3c6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c3c8:	f7fc fb64 	bl	8008a94 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3d0:	4a91      	ldr	r2, [pc, #580]	; (800c618 <tcp_receive+0x884>)
 800c3d2:	6013      	str	r3, [r2, #0]
 800c3d4:	4b91      	ldr	r3, [pc, #580]	; (800c61c <tcp_receive+0x888>)
 800c3d6:	68db      	ldr	r3, [r3, #12]
 800c3d8:	4a8f      	ldr	r2, [pc, #572]	; (800c618 <tcp_receive+0x884>)
 800c3da:	6812      	ldr	r2, [r2, #0]
 800c3dc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c3de:	e00d      	b.n	800c3fc <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800c3e0:	4b8d      	ldr	r3, [pc, #564]	; (800c618 <tcp_receive+0x884>)
 800c3e2:	681a      	ldr	r2, [r3, #0]
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3e8:	1ad3      	subs	r3, r2, r3
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	da06      	bge.n	800c3fc <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	8b5b      	ldrh	r3, [r3, #26]
 800c3f2:	f043 0302 	orr.w	r3, r3, #2
 800c3f6:	b29a      	uxth	r2, r3
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c3fc:	4b86      	ldr	r3, [pc, #536]	; (800c618 <tcp_receive+0x884>)
 800c3fe:	681a      	ldr	r2, [r3, #0]
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c404:	1ad3      	subs	r3, r2, r3
 800c406:	2b00      	cmp	r3, #0
 800c408:	f2c0 842a 	blt.w	800cc60 <tcp_receive+0xecc>
 800c40c:	4b82      	ldr	r3, [pc, #520]	; (800c618 <tcp_receive+0x884>)
 800c40e:	681a      	ldr	r2, [r3, #0]
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c414:	6879      	ldr	r1, [r7, #4]
 800c416:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c418:	440b      	add	r3, r1
 800c41a:	1ad3      	subs	r3, r2, r3
 800c41c:	3301      	adds	r3, #1
 800c41e:	2b00      	cmp	r3, #0
 800c420:	f300 841e 	bgt.w	800cc60 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c428:	4b7b      	ldr	r3, [pc, #492]	; (800c618 <tcp_receive+0x884>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	429a      	cmp	r2, r3
 800c42e:	f040 829a 	bne.w	800c966 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800c432:	4b7a      	ldr	r3, [pc, #488]	; (800c61c <tcp_receive+0x888>)
 800c434:	891c      	ldrh	r4, [r3, #8]
 800c436:	4b79      	ldr	r3, [pc, #484]	; (800c61c <tcp_receive+0x888>)
 800c438:	68db      	ldr	r3, [r3, #12]
 800c43a:	899b      	ldrh	r3, [r3, #12]
 800c43c:	b29b      	uxth	r3, r3
 800c43e:	4618      	mov	r0, r3
 800c440:	f7fa fff6 	bl	8007430 <lwip_htons>
 800c444:	4603      	mov	r3, r0
 800c446:	b2db      	uxtb	r3, r3
 800c448:	f003 0303 	and.w	r3, r3, #3
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d001      	beq.n	800c454 <tcp_receive+0x6c0>
 800c450:	2301      	movs	r3, #1
 800c452:	e000      	b.n	800c456 <tcp_receive+0x6c2>
 800c454:	2300      	movs	r3, #0
 800c456:	4423      	add	r3, r4
 800c458:	b29a      	uxth	r2, r3
 800c45a:	4b71      	ldr	r3, [pc, #452]	; (800c620 <tcp_receive+0x88c>)
 800c45c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c462:	4b6f      	ldr	r3, [pc, #444]	; (800c620 <tcp_receive+0x88c>)
 800c464:	881b      	ldrh	r3, [r3, #0]
 800c466:	429a      	cmp	r2, r3
 800c468:	d275      	bcs.n	800c556 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c46a:	4b6c      	ldr	r3, [pc, #432]	; (800c61c <tcp_receive+0x888>)
 800c46c:	68db      	ldr	r3, [r3, #12]
 800c46e:	899b      	ldrh	r3, [r3, #12]
 800c470:	b29b      	uxth	r3, r3
 800c472:	4618      	mov	r0, r3
 800c474:	f7fa ffdc 	bl	8007430 <lwip_htons>
 800c478:	4603      	mov	r3, r0
 800c47a:	b2db      	uxtb	r3, r3
 800c47c:	f003 0301 	and.w	r3, r3, #1
 800c480:	2b00      	cmp	r3, #0
 800c482:	d01f      	beq.n	800c4c4 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800c484:	4b65      	ldr	r3, [pc, #404]	; (800c61c <tcp_receive+0x888>)
 800c486:	68db      	ldr	r3, [r3, #12]
 800c488:	899b      	ldrh	r3, [r3, #12]
 800c48a:	b29b      	uxth	r3, r3
 800c48c:	b21b      	sxth	r3, r3
 800c48e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c492:	b21c      	sxth	r4, r3
 800c494:	4b61      	ldr	r3, [pc, #388]	; (800c61c <tcp_receive+0x888>)
 800c496:	68db      	ldr	r3, [r3, #12]
 800c498:	899b      	ldrh	r3, [r3, #12]
 800c49a:	b29b      	uxth	r3, r3
 800c49c:	4618      	mov	r0, r3
 800c49e:	f7fa ffc7 	bl	8007430 <lwip_htons>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	b2db      	uxtb	r3, r3
 800c4a6:	b29b      	uxth	r3, r3
 800c4a8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c4ac:	b29b      	uxth	r3, r3
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f7fa ffbe 	bl	8007430 <lwip_htons>
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	b21b      	sxth	r3, r3
 800c4b8:	4323      	orrs	r3, r4
 800c4ba:	b21a      	sxth	r2, r3
 800c4bc:	4b57      	ldr	r3, [pc, #348]	; (800c61c <tcp_receive+0x888>)
 800c4be:	68db      	ldr	r3, [r3, #12]
 800c4c0:	b292      	uxth	r2, r2
 800c4c2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c4c8:	4b54      	ldr	r3, [pc, #336]	; (800c61c <tcp_receive+0x888>)
 800c4ca:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c4cc:	4b53      	ldr	r3, [pc, #332]	; (800c61c <tcp_receive+0x888>)
 800c4ce:	68db      	ldr	r3, [r3, #12]
 800c4d0:	899b      	ldrh	r3, [r3, #12]
 800c4d2:	b29b      	uxth	r3, r3
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f7fa ffab 	bl	8007430 <lwip_htons>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	b2db      	uxtb	r3, r3
 800c4de:	f003 0302 	and.w	r3, r3, #2
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d005      	beq.n	800c4f2 <tcp_receive+0x75e>
            inseg.len -= 1;
 800c4e6:	4b4d      	ldr	r3, [pc, #308]	; (800c61c <tcp_receive+0x888>)
 800c4e8:	891b      	ldrh	r3, [r3, #8]
 800c4ea:	3b01      	subs	r3, #1
 800c4ec:	b29a      	uxth	r2, r3
 800c4ee:	4b4b      	ldr	r3, [pc, #300]	; (800c61c <tcp_receive+0x888>)
 800c4f0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800c4f2:	4b4a      	ldr	r3, [pc, #296]	; (800c61c <tcp_receive+0x888>)
 800c4f4:	685b      	ldr	r3, [r3, #4]
 800c4f6:	4a49      	ldr	r2, [pc, #292]	; (800c61c <tcp_receive+0x888>)
 800c4f8:	8912      	ldrh	r2, [r2, #8]
 800c4fa:	4611      	mov	r1, r2
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f7fc f9c9 	bl	8008894 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800c502:	4b46      	ldr	r3, [pc, #280]	; (800c61c <tcp_receive+0x888>)
 800c504:	891c      	ldrh	r4, [r3, #8]
 800c506:	4b45      	ldr	r3, [pc, #276]	; (800c61c <tcp_receive+0x888>)
 800c508:	68db      	ldr	r3, [r3, #12]
 800c50a:	899b      	ldrh	r3, [r3, #12]
 800c50c:	b29b      	uxth	r3, r3
 800c50e:	4618      	mov	r0, r3
 800c510:	f7fa ff8e 	bl	8007430 <lwip_htons>
 800c514:	4603      	mov	r3, r0
 800c516:	b2db      	uxtb	r3, r3
 800c518:	f003 0303 	and.w	r3, r3, #3
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d001      	beq.n	800c524 <tcp_receive+0x790>
 800c520:	2301      	movs	r3, #1
 800c522:	e000      	b.n	800c526 <tcp_receive+0x792>
 800c524:	2300      	movs	r3, #0
 800c526:	4423      	add	r3, r4
 800c528:	b29a      	uxth	r2, r3
 800c52a:	4b3d      	ldr	r3, [pc, #244]	; (800c620 <tcp_receive+0x88c>)
 800c52c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c52e:	4b3c      	ldr	r3, [pc, #240]	; (800c620 <tcp_receive+0x88c>)
 800c530:	881b      	ldrh	r3, [r3, #0]
 800c532:	461a      	mov	r2, r3
 800c534:	4b38      	ldr	r3, [pc, #224]	; (800c618 <tcp_receive+0x884>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	441a      	add	r2, r3
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c53e:	6879      	ldr	r1, [r7, #4]
 800c540:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c542:	440b      	add	r3, r1
 800c544:	429a      	cmp	r2, r3
 800c546:	d006      	beq.n	800c556 <tcp_receive+0x7c2>
 800c548:	4b36      	ldr	r3, [pc, #216]	; (800c624 <tcp_receive+0x890>)
 800c54a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800c54e:	4936      	ldr	r1, [pc, #216]	; (800c628 <tcp_receive+0x894>)
 800c550:	4836      	ldr	r0, [pc, #216]	; (800c62c <tcp_receive+0x898>)
 800c552:	f007 f983 	bl	801385c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	f000 80e7 	beq.w	800c72e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c560:	4b2e      	ldr	r3, [pc, #184]	; (800c61c <tcp_receive+0x888>)
 800c562:	68db      	ldr	r3, [r3, #12]
 800c564:	899b      	ldrh	r3, [r3, #12]
 800c566:	b29b      	uxth	r3, r3
 800c568:	4618      	mov	r0, r3
 800c56a:	f7fa ff61 	bl	8007430 <lwip_htons>
 800c56e:	4603      	mov	r3, r0
 800c570:	b2db      	uxtb	r3, r3
 800c572:	f003 0301 	and.w	r3, r3, #1
 800c576:	2b00      	cmp	r3, #0
 800c578:	d010      	beq.n	800c59c <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800c57a:	e00a      	b.n	800c592 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c580:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c586:	681a      	ldr	r2, [r3, #0]
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800c58c:	68f8      	ldr	r0, [r7, #12]
 800c58e:	f7fd fd96 	bl	800a0be <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c596:	2b00      	cmp	r3, #0
 800c598:	d1f0      	bne.n	800c57c <tcp_receive+0x7e8>
 800c59a:	e0c8      	b.n	800c72e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5a0:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800c5a2:	e052      	b.n	800c64a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c5a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5a6:	68db      	ldr	r3, [r3, #12]
 800c5a8:	899b      	ldrh	r3, [r3, #12]
 800c5aa:	b29b      	uxth	r3, r3
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	f7fa ff3f 	bl	8007430 <lwip_htons>
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	b2db      	uxtb	r3, r3
 800c5b6:	f003 0301 	and.w	r3, r3, #1
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d03d      	beq.n	800c63a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800c5be:	4b17      	ldr	r3, [pc, #92]	; (800c61c <tcp_receive+0x888>)
 800c5c0:	68db      	ldr	r3, [r3, #12]
 800c5c2:	899b      	ldrh	r3, [r3, #12]
 800c5c4:	b29b      	uxth	r3, r3
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f7fa ff32 	bl	8007430 <lwip_htons>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	b2db      	uxtb	r3, r3
 800c5d0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d130      	bne.n	800c63a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800c5d8:	4b10      	ldr	r3, [pc, #64]	; (800c61c <tcp_receive+0x888>)
 800c5da:	68db      	ldr	r3, [r3, #12]
 800c5dc:	899b      	ldrh	r3, [r3, #12]
 800c5de:	b29c      	uxth	r4, r3
 800c5e0:	2001      	movs	r0, #1
 800c5e2:	f7fa ff25 	bl	8007430 <lwip_htons>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	461a      	mov	r2, r3
 800c5ea:	4b0c      	ldr	r3, [pc, #48]	; (800c61c <tcp_receive+0x888>)
 800c5ec:	68db      	ldr	r3, [r3, #12]
 800c5ee:	4322      	orrs	r2, r4
 800c5f0:	b292      	uxth	r2, r2
 800c5f2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800c5f4:	4b09      	ldr	r3, [pc, #36]	; (800c61c <tcp_receive+0x888>)
 800c5f6:	891c      	ldrh	r4, [r3, #8]
 800c5f8:	4b08      	ldr	r3, [pc, #32]	; (800c61c <tcp_receive+0x888>)
 800c5fa:	68db      	ldr	r3, [r3, #12]
 800c5fc:	899b      	ldrh	r3, [r3, #12]
 800c5fe:	b29b      	uxth	r3, r3
 800c600:	4618      	mov	r0, r3
 800c602:	f7fa ff15 	bl	8007430 <lwip_htons>
 800c606:	4603      	mov	r3, r0
 800c608:	b2db      	uxtb	r3, r3
 800c60a:	f003 0303 	and.w	r3, r3, #3
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d00e      	beq.n	800c630 <tcp_receive+0x89c>
 800c612:	2301      	movs	r3, #1
 800c614:	e00d      	b.n	800c632 <tcp_receive+0x89e>
 800c616:	bf00      	nop
 800c618:	20008528 	.word	0x20008528
 800c61c:	20008508 	.word	0x20008508
 800c620:	20008532 	.word	0x20008532
 800c624:	08015a80 	.word	0x08015a80
 800c628:	08015e28 	.word	0x08015e28
 800c62c:	08015acc 	.word	0x08015acc
 800c630:	2300      	movs	r3, #0
 800c632:	4423      	add	r3, r4
 800c634:	b29a      	uxth	r2, r3
 800c636:	4b98      	ldr	r3, [pc, #608]	; (800c898 <tcp_receive+0xb04>)
 800c638:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800c63a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c63c:	613b      	str	r3, [r7, #16]
              next = next->next;
 800c63e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800c644:	6938      	ldr	r0, [r7, #16]
 800c646:	f7fd fd3a 	bl	800a0be <tcp_seg_free>
            while (next &&
 800c64a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d00e      	beq.n	800c66e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800c650:	4b91      	ldr	r3, [pc, #580]	; (800c898 <tcp_receive+0xb04>)
 800c652:	881b      	ldrh	r3, [r3, #0]
 800c654:	461a      	mov	r2, r3
 800c656:	4b91      	ldr	r3, [pc, #580]	; (800c89c <tcp_receive+0xb08>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	441a      	add	r2, r3
 800c65c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c65e:	68db      	ldr	r3, [r3, #12]
 800c660:	685b      	ldr	r3, [r3, #4]
 800c662:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c664:	8909      	ldrh	r1, [r1, #8]
 800c666:	440b      	add	r3, r1
 800c668:	1ad3      	subs	r3, r2, r3
            while (next &&
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	da9a      	bge.n	800c5a4 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800c66e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c670:	2b00      	cmp	r3, #0
 800c672:	d059      	beq.n	800c728 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800c674:	4b88      	ldr	r3, [pc, #544]	; (800c898 <tcp_receive+0xb04>)
 800c676:	881b      	ldrh	r3, [r3, #0]
 800c678:	461a      	mov	r2, r3
 800c67a:	4b88      	ldr	r3, [pc, #544]	; (800c89c <tcp_receive+0xb08>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	441a      	add	r2, r3
 800c680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c682:	68db      	ldr	r3, [r3, #12]
 800c684:	685b      	ldr	r3, [r3, #4]
 800c686:	1ad3      	subs	r3, r2, r3
            if (next &&
 800c688:	2b00      	cmp	r3, #0
 800c68a:	dd4d      	ble.n	800c728 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800c68c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c68e:	68db      	ldr	r3, [r3, #12]
 800c690:	685b      	ldr	r3, [r3, #4]
 800c692:	b29a      	uxth	r2, r3
 800c694:	4b81      	ldr	r3, [pc, #516]	; (800c89c <tcp_receive+0xb08>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	b29b      	uxth	r3, r3
 800c69a:	1ad3      	subs	r3, r2, r3
 800c69c:	b29a      	uxth	r2, r3
 800c69e:	4b80      	ldr	r3, [pc, #512]	; (800c8a0 <tcp_receive+0xb0c>)
 800c6a0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c6a2:	4b7f      	ldr	r3, [pc, #508]	; (800c8a0 <tcp_receive+0xb0c>)
 800c6a4:	68db      	ldr	r3, [r3, #12]
 800c6a6:	899b      	ldrh	r3, [r3, #12]
 800c6a8:	b29b      	uxth	r3, r3
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f7fa fec0 	bl	8007430 <lwip_htons>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	b2db      	uxtb	r3, r3
 800c6b4:	f003 0302 	and.w	r3, r3, #2
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d005      	beq.n	800c6c8 <tcp_receive+0x934>
                inseg.len -= 1;
 800c6bc:	4b78      	ldr	r3, [pc, #480]	; (800c8a0 <tcp_receive+0xb0c>)
 800c6be:	891b      	ldrh	r3, [r3, #8]
 800c6c0:	3b01      	subs	r3, #1
 800c6c2:	b29a      	uxth	r2, r3
 800c6c4:	4b76      	ldr	r3, [pc, #472]	; (800c8a0 <tcp_receive+0xb0c>)
 800c6c6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800c6c8:	4b75      	ldr	r3, [pc, #468]	; (800c8a0 <tcp_receive+0xb0c>)
 800c6ca:	685b      	ldr	r3, [r3, #4]
 800c6cc:	4a74      	ldr	r2, [pc, #464]	; (800c8a0 <tcp_receive+0xb0c>)
 800c6ce:	8912      	ldrh	r2, [r2, #8]
 800c6d0:	4611      	mov	r1, r2
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f7fc f8de 	bl	8008894 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800c6d8:	4b71      	ldr	r3, [pc, #452]	; (800c8a0 <tcp_receive+0xb0c>)
 800c6da:	891c      	ldrh	r4, [r3, #8]
 800c6dc:	4b70      	ldr	r3, [pc, #448]	; (800c8a0 <tcp_receive+0xb0c>)
 800c6de:	68db      	ldr	r3, [r3, #12]
 800c6e0:	899b      	ldrh	r3, [r3, #12]
 800c6e2:	b29b      	uxth	r3, r3
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	f7fa fea3 	bl	8007430 <lwip_htons>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	b2db      	uxtb	r3, r3
 800c6ee:	f003 0303 	and.w	r3, r3, #3
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d001      	beq.n	800c6fa <tcp_receive+0x966>
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	e000      	b.n	800c6fc <tcp_receive+0x968>
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	4423      	add	r3, r4
 800c6fe:	b29a      	uxth	r2, r3
 800c700:	4b65      	ldr	r3, [pc, #404]	; (800c898 <tcp_receive+0xb04>)
 800c702:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800c704:	4b64      	ldr	r3, [pc, #400]	; (800c898 <tcp_receive+0xb04>)
 800c706:	881b      	ldrh	r3, [r3, #0]
 800c708:	461a      	mov	r2, r3
 800c70a:	4b64      	ldr	r3, [pc, #400]	; (800c89c <tcp_receive+0xb08>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	441a      	add	r2, r3
 800c710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c712:	68db      	ldr	r3, [r3, #12]
 800c714:	685b      	ldr	r3, [r3, #4]
 800c716:	429a      	cmp	r2, r3
 800c718:	d006      	beq.n	800c728 <tcp_receive+0x994>
 800c71a:	4b62      	ldr	r3, [pc, #392]	; (800c8a4 <tcp_receive+0xb10>)
 800c71c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800c720:	4961      	ldr	r1, [pc, #388]	; (800c8a8 <tcp_receive+0xb14>)
 800c722:	4862      	ldr	r0, [pc, #392]	; (800c8ac <tcp_receive+0xb18>)
 800c724:	f007 f89a 	bl	801385c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c72c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800c72e:	4b5a      	ldr	r3, [pc, #360]	; (800c898 <tcp_receive+0xb04>)
 800c730:	881b      	ldrh	r3, [r3, #0]
 800c732:	461a      	mov	r2, r3
 800c734:	4b59      	ldr	r3, [pc, #356]	; (800c89c <tcp_receive+0xb08>)
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	441a      	add	r2, r3
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c742:	4b55      	ldr	r3, [pc, #340]	; (800c898 <tcp_receive+0xb04>)
 800c744:	881b      	ldrh	r3, [r3, #0]
 800c746:	429a      	cmp	r2, r3
 800c748:	d206      	bcs.n	800c758 <tcp_receive+0x9c4>
 800c74a:	4b56      	ldr	r3, [pc, #344]	; (800c8a4 <tcp_receive+0xb10>)
 800c74c:	f240 6207 	movw	r2, #1543	; 0x607
 800c750:	4957      	ldr	r1, [pc, #348]	; (800c8b0 <tcp_receive+0xb1c>)
 800c752:	4856      	ldr	r0, [pc, #344]	; (800c8ac <tcp_receive+0xb18>)
 800c754:	f007 f882 	bl	801385c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c75c:	4b4e      	ldr	r3, [pc, #312]	; (800c898 <tcp_receive+0xb04>)
 800c75e:	881b      	ldrh	r3, [r3, #0]
 800c760:	1ad3      	subs	r3, r2, r3
 800c762:	b29a      	uxth	r2, r3
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800c768:	6878      	ldr	r0, [r7, #4]
 800c76a:	f7fc ffc9 	bl	8009700 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800c76e:	4b4c      	ldr	r3, [pc, #304]	; (800c8a0 <tcp_receive+0xb0c>)
 800c770:	685b      	ldr	r3, [r3, #4]
 800c772:	891b      	ldrh	r3, [r3, #8]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d006      	beq.n	800c786 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800c778:	4b49      	ldr	r3, [pc, #292]	; (800c8a0 <tcp_receive+0xb0c>)
 800c77a:	685b      	ldr	r3, [r3, #4]
 800c77c:	4a4d      	ldr	r2, [pc, #308]	; (800c8b4 <tcp_receive+0xb20>)
 800c77e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800c780:	4b47      	ldr	r3, [pc, #284]	; (800c8a0 <tcp_receive+0xb0c>)
 800c782:	2200      	movs	r2, #0
 800c784:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c786:	4b46      	ldr	r3, [pc, #280]	; (800c8a0 <tcp_receive+0xb0c>)
 800c788:	68db      	ldr	r3, [r3, #12]
 800c78a:	899b      	ldrh	r3, [r3, #12]
 800c78c:	b29b      	uxth	r3, r3
 800c78e:	4618      	mov	r0, r3
 800c790:	f7fa fe4e 	bl	8007430 <lwip_htons>
 800c794:	4603      	mov	r3, r0
 800c796:	b2db      	uxtb	r3, r3
 800c798:	f003 0301 	and.w	r3, r3, #1
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	f000 80b8 	beq.w	800c912 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800c7a2:	4b45      	ldr	r3, [pc, #276]	; (800c8b8 <tcp_receive+0xb24>)
 800c7a4:	781b      	ldrb	r3, [r3, #0]
 800c7a6:	f043 0320 	orr.w	r3, r3, #32
 800c7aa:	b2da      	uxtb	r2, r3
 800c7ac:	4b42      	ldr	r3, [pc, #264]	; (800c8b8 <tcp_receive+0xb24>)
 800c7ae:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800c7b0:	e0af      	b.n	800c912 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7b6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7bc:	68db      	ldr	r3, [r3, #12]
 800c7be:	685b      	ldr	r3, [r3, #4]
 800c7c0:	4a36      	ldr	r2, [pc, #216]	; (800c89c <tcp_receive+0xb08>)
 800c7c2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c7c4:	68bb      	ldr	r3, [r7, #8]
 800c7c6:	891b      	ldrh	r3, [r3, #8]
 800c7c8:	461c      	mov	r4, r3
 800c7ca:	68bb      	ldr	r3, [r7, #8]
 800c7cc:	68db      	ldr	r3, [r3, #12]
 800c7ce:	899b      	ldrh	r3, [r3, #12]
 800c7d0:	b29b      	uxth	r3, r3
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f7fa fe2c 	bl	8007430 <lwip_htons>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	b2db      	uxtb	r3, r3
 800c7dc:	f003 0303 	and.w	r3, r3, #3
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d001      	beq.n	800c7e8 <tcp_receive+0xa54>
 800c7e4:	2301      	movs	r3, #1
 800c7e6:	e000      	b.n	800c7ea <tcp_receive+0xa56>
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	191a      	adds	r2, r3, r4
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7f0:	441a      	add	r2, r3
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c7fa:	461c      	mov	r4, r3
 800c7fc:	68bb      	ldr	r3, [r7, #8]
 800c7fe:	891b      	ldrh	r3, [r3, #8]
 800c800:	461d      	mov	r5, r3
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	68db      	ldr	r3, [r3, #12]
 800c806:	899b      	ldrh	r3, [r3, #12]
 800c808:	b29b      	uxth	r3, r3
 800c80a:	4618      	mov	r0, r3
 800c80c:	f7fa fe10 	bl	8007430 <lwip_htons>
 800c810:	4603      	mov	r3, r0
 800c812:	b2db      	uxtb	r3, r3
 800c814:	f003 0303 	and.w	r3, r3, #3
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d001      	beq.n	800c820 <tcp_receive+0xa8c>
 800c81c:	2301      	movs	r3, #1
 800c81e:	e000      	b.n	800c822 <tcp_receive+0xa8e>
 800c820:	2300      	movs	r3, #0
 800c822:	442b      	add	r3, r5
 800c824:	429c      	cmp	r4, r3
 800c826:	d206      	bcs.n	800c836 <tcp_receive+0xaa2>
 800c828:	4b1e      	ldr	r3, [pc, #120]	; (800c8a4 <tcp_receive+0xb10>)
 800c82a:	f240 622b 	movw	r2, #1579	; 0x62b
 800c82e:	4923      	ldr	r1, [pc, #140]	; (800c8bc <tcp_receive+0xb28>)
 800c830:	481e      	ldr	r0, [pc, #120]	; (800c8ac <tcp_receive+0xb18>)
 800c832:	f007 f813 	bl	801385c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	891b      	ldrh	r3, [r3, #8]
 800c83a:	461c      	mov	r4, r3
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	68db      	ldr	r3, [r3, #12]
 800c840:	899b      	ldrh	r3, [r3, #12]
 800c842:	b29b      	uxth	r3, r3
 800c844:	4618      	mov	r0, r3
 800c846:	f7fa fdf3 	bl	8007430 <lwip_htons>
 800c84a:	4603      	mov	r3, r0
 800c84c:	b2db      	uxtb	r3, r3
 800c84e:	f003 0303 	and.w	r3, r3, #3
 800c852:	2b00      	cmp	r3, #0
 800c854:	d001      	beq.n	800c85a <tcp_receive+0xac6>
 800c856:	2301      	movs	r3, #1
 800c858:	e000      	b.n	800c85c <tcp_receive+0xac8>
 800c85a:	2300      	movs	r3, #0
 800c85c:	1919      	adds	r1, r3, r4
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c862:	b28b      	uxth	r3, r1
 800c864:	1ad3      	subs	r3, r2, r3
 800c866:	b29a      	uxth	r2, r3
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	f7fc ff47 	bl	8009700 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800c872:	68bb      	ldr	r3, [r7, #8]
 800c874:	685b      	ldr	r3, [r3, #4]
 800c876:	891b      	ldrh	r3, [r3, #8]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d028      	beq.n	800c8ce <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800c87c:	4b0d      	ldr	r3, [pc, #52]	; (800c8b4 <tcp_receive+0xb20>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d01d      	beq.n	800c8c0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800c884:	4b0b      	ldr	r3, [pc, #44]	; (800c8b4 <tcp_receive+0xb20>)
 800c886:	681a      	ldr	r2, [r3, #0]
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	685b      	ldr	r3, [r3, #4]
 800c88c:	4619      	mov	r1, r3
 800c88e:	4610      	mov	r0, r2
 800c890:	f7fc fa54 	bl	8008d3c <pbuf_cat>
 800c894:	e018      	b.n	800c8c8 <tcp_receive+0xb34>
 800c896:	bf00      	nop
 800c898:	20008532 	.word	0x20008532
 800c89c:	20008528 	.word	0x20008528
 800c8a0:	20008508 	.word	0x20008508
 800c8a4:	08015a80 	.word	0x08015a80
 800c8a8:	08015e60 	.word	0x08015e60
 800c8ac:	08015acc 	.word	0x08015acc
 800c8b0:	08015e9c 	.word	0x08015e9c
 800c8b4:	20008538 	.word	0x20008538
 800c8b8:	20008535 	.word	0x20008535
 800c8bc:	08015ebc 	.word	0x08015ebc
            } else {
              recv_data = cseg->p;
 800c8c0:	68bb      	ldr	r3, [r7, #8]
 800c8c2:	685b      	ldr	r3, [r3, #4]
 800c8c4:	4a70      	ldr	r2, [pc, #448]	; (800ca88 <tcp_receive+0xcf4>)
 800c8c6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800c8c8:	68bb      	ldr	r3, [r7, #8]
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c8ce:	68bb      	ldr	r3, [r7, #8]
 800c8d0:	68db      	ldr	r3, [r3, #12]
 800c8d2:	899b      	ldrh	r3, [r3, #12]
 800c8d4:	b29b      	uxth	r3, r3
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	f7fa fdaa 	bl	8007430 <lwip_htons>
 800c8dc:	4603      	mov	r3, r0
 800c8de:	b2db      	uxtb	r3, r3
 800c8e0:	f003 0301 	and.w	r3, r3, #1
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d00d      	beq.n	800c904 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800c8e8:	4b68      	ldr	r3, [pc, #416]	; (800ca8c <tcp_receive+0xcf8>)
 800c8ea:	781b      	ldrb	r3, [r3, #0]
 800c8ec:	f043 0320 	orr.w	r3, r3, #32
 800c8f0:	b2da      	uxtb	r2, r3
 800c8f2:	4b66      	ldr	r3, [pc, #408]	; (800ca8c <tcp_receive+0xcf8>)
 800c8f4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	7d1b      	ldrb	r3, [r3, #20]
 800c8fa:	2b04      	cmp	r3, #4
 800c8fc:	d102      	bne.n	800c904 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2207      	movs	r2, #7
 800c902:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	681a      	ldr	r2, [r3, #0]
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800c90c:	68b8      	ldr	r0, [r7, #8]
 800c90e:	f7fd fbd6 	bl	800a0be <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c916:	2b00      	cmp	r3, #0
 800c918:	d008      	beq.n	800c92c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c91e:	68db      	ldr	r3, [r3, #12]
 800c920:	685a      	ldr	r2, [r3, #4]
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800c926:	429a      	cmp	r2, r3
 800c928:	f43f af43 	beq.w	800c7b2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	8b5b      	ldrh	r3, [r3, #26]
 800c930:	f003 0301 	and.w	r3, r3, #1
 800c934:	2b00      	cmp	r3, #0
 800c936:	d00e      	beq.n	800c956 <tcp_receive+0xbc2>
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	8b5b      	ldrh	r3, [r3, #26]
 800c93c:	f023 0301 	bic.w	r3, r3, #1
 800c940:	b29a      	uxth	r2, r3
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	835a      	strh	r2, [r3, #26]
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	8b5b      	ldrh	r3, [r3, #26]
 800c94a:	f043 0302 	orr.w	r3, r3, #2
 800c94e:	b29a      	uxth	r2, r3
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c954:	e188      	b.n	800cc68 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	8b5b      	ldrh	r3, [r3, #26]
 800c95a:	f043 0301 	orr.w	r3, r3, #1
 800c95e:	b29a      	uxth	r2, r3
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c964:	e180      	b.n	800cc68 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d106      	bne.n	800c97c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800c96e:	4848      	ldr	r0, [pc, #288]	; (800ca90 <tcp_receive+0xcfc>)
 800c970:	f7fd fbbe 	bl	800a0f0 <tcp_seg_copy>
 800c974:	4602      	mov	r2, r0
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	675a      	str	r2, [r3, #116]	; 0x74
 800c97a:	e16d      	b.n	800cc58 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800c97c:	2300      	movs	r3, #0
 800c97e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c984:	63bb      	str	r3, [r7, #56]	; 0x38
 800c986:	e157      	b.n	800cc38 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800c988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c98a:	68db      	ldr	r3, [r3, #12]
 800c98c:	685a      	ldr	r2, [r3, #4]
 800c98e:	4b41      	ldr	r3, [pc, #260]	; (800ca94 <tcp_receive+0xd00>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	429a      	cmp	r2, r3
 800c994:	d11d      	bne.n	800c9d2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800c996:	4b3e      	ldr	r3, [pc, #248]	; (800ca90 <tcp_receive+0xcfc>)
 800c998:	891a      	ldrh	r2, [r3, #8]
 800c99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c99c:	891b      	ldrh	r3, [r3, #8]
 800c99e:	429a      	cmp	r2, r3
 800c9a0:	f240 814f 	bls.w	800cc42 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c9a4:	483a      	ldr	r0, [pc, #232]	; (800ca90 <tcp_receive+0xcfc>)
 800c9a6:	f7fd fba3 	bl	800a0f0 <tcp_seg_copy>
 800c9aa:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800c9ac:	697b      	ldr	r3, [r7, #20]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	f000 8149 	beq.w	800cc46 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800c9b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d003      	beq.n	800c9c2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800c9ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9bc:	697a      	ldr	r2, [r7, #20]
 800c9be:	601a      	str	r2, [r3, #0]
 800c9c0:	e002      	b.n	800c9c8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	697a      	ldr	r2, [r7, #20]
 800c9c6:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800c9c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c9ca:	6978      	ldr	r0, [r7, #20]
 800c9cc:	f7ff f8de 	bl	800bb8c <tcp_oos_insert_segment>
                }
                break;
 800c9d0:	e139      	b.n	800cc46 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800c9d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d117      	bne.n	800ca08 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800c9d8:	4b2e      	ldr	r3, [pc, #184]	; (800ca94 <tcp_receive+0xd00>)
 800c9da:	681a      	ldr	r2, [r3, #0]
 800c9dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9de:	68db      	ldr	r3, [r3, #12]
 800c9e0:	685b      	ldr	r3, [r3, #4]
 800c9e2:	1ad3      	subs	r3, r2, r3
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	da57      	bge.n	800ca98 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c9e8:	4829      	ldr	r0, [pc, #164]	; (800ca90 <tcp_receive+0xcfc>)
 800c9ea:	f7fd fb81 	bl	800a0f0 <tcp_seg_copy>
 800c9ee:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800c9f0:	69bb      	ldr	r3, [r7, #24]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	f000 8129 	beq.w	800cc4a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	69ba      	ldr	r2, [r7, #24]
 800c9fc:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800c9fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ca00:	69b8      	ldr	r0, [r7, #24]
 800ca02:	f7ff f8c3 	bl	800bb8c <tcp_oos_insert_segment>
                  }
                  break;
 800ca06:	e120      	b.n	800cc4a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800ca08:	4b22      	ldr	r3, [pc, #136]	; (800ca94 <tcp_receive+0xd00>)
 800ca0a:	681a      	ldr	r2, [r3, #0]
 800ca0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca0e:	68db      	ldr	r3, [r3, #12]
 800ca10:	685b      	ldr	r3, [r3, #4]
 800ca12:	1ad3      	subs	r3, r2, r3
 800ca14:	3b01      	subs	r3, #1
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	db3e      	blt.n	800ca98 <tcp_receive+0xd04>
 800ca1a:	4b1e      	ldr	r3, [pc, #120]	; (800ca94 <tcp_receive+0xd00>)
 800ca1c:	681a      	ldr	r2, [r3, #0]
 800ca1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca20:	68db      	ldr	r3, [r3, #12]
 800ca22:	685b      	ldr	r3, [r3, #4]
 800ca24:	1ad3      	subs	r3, r2, r3
 800ca26:	3301      	adds	r3, #1
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	dc35      	bgt.n	800ca98 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ca2c:	4818      	ldr	r0, [pc, #96]	; (800ca90 <tcp_receive+0xcfc>)
 800ca2e:	f7fd fb5f 	bl	800a0f0 <tcp_seg_copy>
 800ca32:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800ca34:	69fb      	ldr	r3, [r7, #28]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	f000 8109 	beq.w	800cc4e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800ca3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca3e:	68db      	ldr	r3, [r3, #12]
 800ca40:	685b      	ldr	r3, [r3, #4]
 800ca42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca44:	8912      	ldrh	r2, [r2, #8]
 800ca46:	441a      	add	r2, r3
 800ca48:	4b12      	ldr	r3, [pc, #72]	; (800ca94 <tcp_receive+0xd00>)
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	1ad3      	subs	r3, r2, r3
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	dd12      	ble.n	800ca78 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800ca52:	4b10      	ldr	r3, [pc, #64]	; (800ca94 <tcp_receive+0xd00>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	b29a      	uxth	r2, r3
 800ca58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca5a:	68db      	ldr	r3, [r3, #12]
 800ca5c:	685b      	ldr	r3, [r3, #4]
 800ca5e:	b29b      	uxth	r3, r3
 800ca60:	1ad3      	subs	r3, r2, r3
 800ca62:	b29a      	uxth	r2, r3
 800ca64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca66:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800ca68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca6a:	685a      	ldr	r2, [r3, #4]
 800ca6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca6e:	891b      	ldrh	r3, [r3, #8]
 800ca70:	4619      	mov	r1, r3
 800ca72:	4610      	mov	r0, r2
 800ca74:	f7fb ff0e 	bl	8008894 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800ca78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca7a:	69fa      	ldr	r2, [r7, #28]
 800ca7c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800ca7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ca80:	69f8      	ldr	r0, [r7, #28]
 800ca82:	f7ff f883 	bl	800bb8c <tcp_oos_insert_segment>
                  }
                  break;
 800ca86:	e0e2      	b.n	800cc4e <tcp_receive+0xeba>
 800ca88:	20008538 	.word	0x20008538
 800ca8c:	20008535 	.word	0x20008535
 800ca90:	20008508 	.word	0x20008508
 800ca94:	20008528 	.word	0x20008528
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800ca98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca9a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800ca9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	f040 80c6 	bne.w	800cc32 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800caa6:	4b80      	ldr	r3, [pc, #512]	; (800cca8 <tcp_receive+0xf14>)
 800caa8:	681a      	ldr	r2, [r3, #0]
 800caaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caac:	68db      	ldr	r3, [r3, #12]
 800caae:	685b      	ldr	r3, [r3, #4]
 800cab0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	f340 80bd 	ble.w	800cc32 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800cab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caba:	68db      	ldr	r3, [r3, #12]
 800cabc:	899b      	ldrh	r3, [r3, #12]
 800cabe:	b29b      	uxth	r3, r3
 800cac0:	4618      	mov	r0, r3
 800cac2:	f7fa fcb5 	bl	8007430 <lwip_htons>
 800cac6:	4603      	mov	r3, r0
 800cac8:	b2db      	uxtb	r3, r3
 800caca:	f003 0301 	and.w	r3, r3, #1
 800cace:	2b00      	cmp	r3, #0
 800cad0:	f040 80bf 	bne.w	800cc52 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800cad4:	4875      	ldr	r0, [pc, #468]	; (800ccac <tcp_receive+0xf18>)
 800cad6:	f7fd fb0b 	bl	800a0f0 <tcp_seg_copy>
 800cada:	4602      	mov	r2, r0
 800cadc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cade:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800cae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	f000 80b6 	beq.w	800cc56 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800caea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caec:	68db      	ldr	r3, [r3, #12]
 800caee:	685b      	ldr	r3, [r3, #4]
 800caf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800caf2:	8912      	ldrh	r2, [r2, #8]
 800caf4:	441a      	add	r2, r3
 800caf6:	4b6c      	ldr	r3, [pc, #432]	; (800cca8 <tcp_receive+0xf14>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	1ad3      	subs	r3, r2, r3
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	dd12      	ble.n	800cb26 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800cb00:	4b69      	ldr	r3, [pc, #420]	; (800cca8 <tcp_receive+0xf14>)
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	b29a      	uxth	r2, r3
 800cb06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb08:	68db      	ldr	r3, [r3, #12]
 800cb0a:	685b      	ldr	r3, [r3, #4]
 800cb0c:	b29b      	uxth	r3, r3
 800cb0e:	1ad3      	subs	r3, r2, r3
 800cb10:	b29a      	uxth	r2, r3
 800cb12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb14:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800cb16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb18:	685a      	ldr	r2, [r3, #4]
 800cb1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb1c:	891b      	ldrh	r3, [r3, #8]
 800cb1e:	4619      	mov	r1, r3
 800cb20:	4610      	mov	r0, r2
 800cb22:	f7fb feb7 	bl	8008894 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800cb26:	4b62      	ldr	r3, [pc, #392]	; (800ccb0 <tcp_receive+0xf1c>)
 800cb28:	881b      	ldrh	r3, [r3, #0]
 800cb2a:	461a      	mov	r2, r3
 800cb2c:	4b5e      	ldr	r3, [pc, #376]	; (800cca8 <tcp_receive+0xf14>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	441a      	add	r2, r3
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb36:	6879      	ldr	r1, [r7, #4]
 800cb38:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cb3a:	440b      	add	r3, r1
 800cb3c:	1ad3      	subs	r3, r2, r3
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	f340 8089 	ble.w	800cc56 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800cb44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	68db      	ldr	r3, [r3, #12]
 800cb4a:	899b      	ldrh	r3, [r3, #12]
 800cb4c:	b29b      	uxth	r3, r3
 800cb4e:	4618      	mov	r0, r3
 800cb50:	f7fa fc6e 	bl	8007430 <lwip_htons>
 800cb54:	4603      	mov	r3, r0
 800cb56:	b2db      	uxtb	r3, r3
 800cb58:	f003 0301 	and.w	r3, r3, #1
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d022      	beq.n	800cba6 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800cb60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	68db      	ldr	r3, [r3, #12]
 800cb66:	899b      	ldrh	r3, [r3, #12]
 800cb68:	b29b      	uxth	r3, r3
 800cb6a:	b21b      	sxth	r3, r3
 800cb6c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cb70:	b21c      	sxth	r4, r3
 800cb72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	68db      	ldr	r3, [r3, #12]
 800cb78:	899b      	ldrh	r3, [r3, #12]
 800cb7a:	b29b      	uxth	r3, r3
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	f7fa fc57 	bl	8007430 <lwip_htons>
 800cb82:	4603      	mov	r3, r0
 800cb84:	b2db      	uxtb	r3, r3
 800cb86:	b29b      	uxth	r3, r3
 800cb88:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800cb8c:	b29b      	uxth	r3, r3
 800cb8e:	4618      	mov	r0, r3
 800cb90:	f7fa fc4e 	bl	8007430 <lwip_htons>
 800cb94:	4603      	mov	r3, r0
 800cb96:	b21b      	sxth	r3, r3
 800cb98:	4323      	orrs	r3, r4
 800cb9a:	b21a      	sxth	r2, r3
 800cb9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	68db      	ldr	r3, [r3, #12]
 800cba2:	b292      	uxth	r2, r2
 800cba4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbaa:	b29a      	uxth	r2, r3
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cbb0:	4413      	add	r3, r2
 800cbb2:	b299      	uxth	r1, r3
 800cbb4:	4b3c      	ldr	r3, [pc, #240]	; (800cca8 <tcp_receive+0xf14>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	b29a      	uxth	r2, r3
 800cbba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	1a8a      	subs	r2, r1, r2
 800cbc0:	b292      	uxth	r2, r2
 800cbc2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800cbc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	685a      	ldr	r2, [r3, #4]
 800cbca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	891b      	ldrh	r3, [r3, #8]
 800cbd0:	4619      	mov	r1, r3
 800cbd2:	4610      	mov	r0, r2
 800cbd4:	f7fb fe5e 	bl	8008894 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800cbd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	891c      	ldrh	r4, [r3, #8]
 800cbde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	68db      	ldr	r3, [r3, #12]
 800cbe4:	899b      	ldrh	r3, [r3, #12]
 800cbe6:	b29b      	uxth	r3, r3
 800cbe8:	4618      	mov	r0, r3
 800cbea:	f7fa fc21 	bl	8007430 <lwip_htons>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	b2db      	uxtb	r3, r3
 800cbf2:	f003 0303 	and.w	r3, r3, #3
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d001      	beq.n	800cbfe <tcp_receive+0xe6a>
 800cbfa:	2301      	movs	r3, #1
 800cbfc:	e000      	b.n	800cc00 <tcp_receive+0xe6c>
 800cbfe:	2300      	movs	r3, #0
 800cc00:	4423      	add	r3, r4
 800cc02:	b29a      	uxth	r2, r3
 800cc04:	4b2a      	ldr	r3, [pc, #168]	; (800ccb0 <tcp_receive+0xf1c>)
 800cc06:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800cc08:	4b29      	ldr	r3, [pc, #164]	; (800ccb0 <tcp_receive+0xf1c>)
 800cc0a:	881b      	ldrh	r3, [r3, #0]
 800cc0c:	461a      	mov	r2, r3
 800cc0e:	4b26      	ldr	r3, [pc, #152]	; (800cca8 <tcp_receive+0xf14>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	441a      	add	r2, r3
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc18:	6879      	ldr	r1, [r7, #4]
 800cc1a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cc1c:	440b      	add	r3, r1
 800cc1e:	429a      	cmp	r2, r3
 800cc20:	d019      	beq.n	800cc56 <tcp_receive+0xec2>
 800cc22:	4b24      	ldr	r3, [pc, #144]	; (800ccb4 <tcp_receive+0xf20>)
 800cc24:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800cc28:	4923      	ldr	r1, [pc, #140]	; (800ccb8 <tcp_receive+0xf24>)
 800cc2a:	4824      	ldr	r0, [pc, #144]	; (800ccbc <tcp_receive+0xf28>)
 800cc2c:	f006 fe16 	bl	801385c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800cc30:	e011      	b.n	800cc56 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800cc32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	63bb      	str	r3, [r7, #56]	; 0x38
 800cc38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	f47f aea4 	bne.w	800c988 <tcp_receive+0xbf4>
 800cc40:	e00a      	b.n	800cc58 <tcp_receive+0xec4>
                break;
 800cc42:	bf00      	nop
 800cc44:	e008      	b.n	800cc58 <tcp_receive+0xec4>
                break;
 800cc46:	bf00      	nop
 800cc48:	e006      	b.n	800cc58 <tcp_receive+0xec4>
                  break;
 800cc4a:	bf00      	nop
 800cc4c:	e004      	b.n	800cc58 <tcp_receive+0xec4>
                  break;
 800cc4e:	bf00      	nop
 800cc50:	e002      	b.n	800cc58 <tcp_receive+0xec4>
                  break;
 800cc52:	bf00      	nop
 800cc54:	e000      	b.n	800cc58 <tcp_receive+0xec4>
                break;
 800cc56:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f001 fa33 	bl	800e0c4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800cc5e:	e003      	b.n	800cc68 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800cc60:	6878      	ldr	r0, [r7, #4]
 800cc62:	f001 fa2f 	bl	800e0c4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800cc66:	e01a      	b.n	800cc9e <tcp_receive+0xf0a>
 800cc68:	e019      	b.n	800cc9e <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800cc6a:	4b0f      	ldr	r3, [pc, #60]	; (800cca8 <tcp_receive+0xf14>)
 800cc6c:	681a      	ldr	r2, [r3, #0]
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc72:	1ad3      	subs	r3, r2, r3
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	db0a      	blt.n	800cc8e <tcp_receive+0xefa>
 800cc78:	4b0b      	ldr	r3, [pc, #44]	; (800cca8 <tcp_receive+0xf14>)
 800cc7a:	681a      	ldr	r2, [r3, #0]
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc80:	6879      	ldr	r1, [r7, #4]
 800cc82:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cc84:	440b      	add	r3, r1
 800cc86:	1ad3      	subs	r3, r2, r3
 800cc88:	3301      	adds	r3, #1
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	dd07      	ble.n	800cc9e <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	8b5b      	ldrh	r3, [r3, #26]
 800cc92:	f043 0302 	orr.w	r3, r3, #2
 800cc96:	b29a      	uxth	r2, r3
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800cc9c:	e7ff      	b.n	800cc9e <tcp_receive+0xf0a>
 800cc9e:	bf00      	nop
 800cca0:	3750      	adds	r7, #80	; 0x50
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bdb0      	pop	{r4, r5, r7, pc}
 800cca6:	bf00      	nop
 800cca8:	20008528 	.word	0x20008528
 800ccac:	20008508 	.word	0x20008508
 800ccb0:	20008532 	.word	0x20008532
 800ccb4:	08015a80 	.word	0x08015a80
 800ccb8:	08015e28 	.word	0x08015e28
 800ccbc:	08015acc 	.word	0x08015acc

0800ccc0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800ccc0:	b480      	push	{r7}
 800ccc2:	b083      	sub	sp, #12
 800ccc4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800ccc6:	4b15      	ldr	r3, [pc, #84]	; (800cd1c <tcp_get_next_optbyte+0x5c>)
 800ccc8:	881b      	ldrh	r3, [r3, #0]
 800ccca:	1c5a      	adds	r2, r3, #1
 800cccc:	b291      	uxth	r1, r2
 800ccce:	4a13      	ldr	r2, [pc, #76]	; (800cd1c <tcp_get_next_optbyte+0x5c>)
 800ccd0:	8011      	strh	r1, [r2, #0]
 800ccd2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ccd4:	4b12      	ldr	r3, [pc, #72]	; (800cd20 <tcp_get_next_optbyte+0x60>)
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d004      	beq.n	800cce6 <tcp_get_next_optbyte+0x26>
 800ccdc:	4b11      	ldr	r3, [pc, #68]	; (800cd24 <tcp_get_next_optbyte+0x64>)
 800ccde:	881b      	ldrh	r3, [r3, #0]
 800cce0:	88fa      	ldrh	r2, [r7, #6]
 800cce2:	429a      	cmp	r2, r3
 800cce4:	d208      	bcs.n	800ccf8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800cce6:	4b10      	ldr	r3, [pc, #64]	; (800cd28 <tcp_get_next_optbyte+0x68>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	3314      	adds	r3, #20
 800ccec:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800ccee:	88fb      	ldrh	r3, [r7, #6]
 800ccf0:	683a      	ldr	r2, [r7, #0]
 800ccf2:	4413      	add	r3, r2
 800ccf4:	781b      	ldrb	r3, [r3, #0]
 800ccf6:	e00b      	b.n	800cd10 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ccf8:	88fb      	ldrh	r3, [r7, #6]
 800ccfa:	b2da      	uxtb	r2, r3
 800ccfc:	4b09      	ldr	r3, [pc, #36]	; (800cd24 <tcp_get_next_optbyte+0x64>)
 800ccfe:	881b      	ldrh	r3, [r3, #0]
 800cd00:	b2db      	uxtb	r3, r3
 800cd02:	1ad3      	subs	r3, r2, r3
 800cd04:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800cd06:	4b06      	ldr	r3, [pc, #24]	; (800cd20 <tcp_get_next_optbyte+0x60>)
 800cd08:	681a      	ldr	r2, [r3, #0]
 800cd0a:	797b      	ldrb	r3, [r7, #5]
 800cd0c:	4413      	add	r3, r2
 800cd0e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cd10:	4618      	mov	r0, r3
 800cd12:	370c      	adds	r7, #12
 800cd14:	46bd      	mov	sp, r7
 800cd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1a:	4770      	bx	lr
 800cd1c:	20008524 	.word	0x20008524
 800cd20:	20008520 	.word	0x20008520
 800cd24:	2000851e 	.word	0x2000851e
 800cd28:	20008518 	.word	0x20008518

0800cd2c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b084      	sub	sp, #16
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d106      	bne.n	800cd48 <tcp_parseopt+0x1c>
 800cd3a:	4b32      	ldr	r3, [pc, #200]	; (800ce04 <tcp_parseopt+0xd8>)
 800cd3c:	f240 727d 	movw	r2, #1917	; 0x77d
 800cd40:	4931      	ldr	r1, [pc, #196]	; (800ce08 <tcp_parseopt+0xdc>)
 800cd42:	4832      	ldr	r0, [pc, #200]	; (800ce0c <tcp_parseopt+0xe0>)
 800cd44:	f006 fd8a 	bl	801385c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800cd48:	4b31      	ldr	r3, [pc, #196]	; (800ce10 <tcp_parseopt+0xe4>)
 800cd4a:	881b      	ldrh	r3, [r3, #0]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d055      	beq.n	800cdfc <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800cd50:	4b30      	ldr	r3, [pc, #192]	; (800ce14 <tcp_parseopt+0xe8>)
 800cd52:	2200      	movs	r2, #0
 800cd54:	801a      	strh	r2, [r3, #0]
 800cd56:	e045      	b.n	800cde4 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800cd58:	f7ff ffb2 	bl	800ccc0 <tcp_get_next_optbyte>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800cd60:	7bfb      	ldrb	r3, [r7, #15]
 800cd62:	2b02      	cmp	r3, #2
 800cd64:	d006      	beq.n	800cd74 <tcp_parseopt+0x48>
 800cd66:	2b02      	cmp	r3, #2
 800cd68:	dc2b      	bgt.n	800cdc2 <tcp_parseopt+0x96>
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d041      	beq.n	800cdf2 <tcp_parseopt+0xc6>
 800cd6e:	2b01      	cmp	r3, #1
 800cd70:	d127      	bne.n	800cdc2 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800cd72:	e037      	b.n	800cde4 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800cd74:	f7ff ffa4 	bl	800ccc0 <tcp_get_next_optbyte>
 800cd78:	4603      	mov	r3, r0
 800cd7a:	2b04      	cmp	r3, #4
 800cd7c:	d13b      	bne.n	800cdf6 <tcp_parseopt+0xca>
 800cd7e:	4b25      	ldr	r3, [pc, #148]	; (800ce14 <tcp_parseopt+0xe8>)
 800cd80:	881b      	ldrh	r3, [r3, #0]
 800cd82:	3301      	adds	r3, #1
 800cd84:	4a22      	ldr	r2, [pc, #136]	; (800ce10 <tcp_parseopt+0xe4>)
 800cd86:	8812      	ldrh	r2, [r2, #0]
 800cd88:	4293      	cmp	r3, r2
 800cd8a:	da34      	bge.n	800cdf6 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800cd8c:	f7ff ff98 	bl	800ccc0 <tcp_get_next_optbyte>
 800cd90:	4603      	mov	r3, r0
 800cd92:	b29b      	uxth	r3, r3
 800cd94:	021b      	lsls	r3, r3, #8
 800cd96:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800cd98:	f7ff ff92 	bl	800ccc0 <tcp_get_next_optbyte>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	b29a      	uxth	r2, r3
 800cda0:	89bb      	ldrh	r3, [r7, #12]
 800cda2:	4313      	orrs	r3, r2
 800cda4:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800cda6:	89bb      	ldrh	r3, [r7, #12]
 800cda8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800cdac:	d804      	bhi.n	800cdb8 <tcp_parseopt+0x8c>
 800cdae:	89bb      	ldrh	r3, [r7, #12]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d001      	beq.n	800cdb8 <tcp_parseopt+0x8c>
 800cdb4:	89ba      	ldrh	r2, [r7, #12]
 800cdb6:	e001      	b.n	800cdbc <tcp_parseopt+0x90>
 800cdb8:	f44f 7206 	mov.w	r2, #536	; 0x218
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800cdc0:	e010      	b.n	800cde4 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800cdc2:	f7ff ff7d 	bl	800ccc0 <tcp_get_next_optbyte>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800cdca:	7afb      	ldrb	r3, [r7, #11]
 800cdcc:	2b01      	cmp	r3, #1
 800cdce:	d914      	bls.n	800cdfa <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800cdd0:	7afb      	ldrb	r3, [r7, #11]
 800cdd2:	b29a      	uxth	r2, r3
 800cdd4:	4b0f      	ldr	r3, [pc, #60]	; (800ce14 <tcp_parseopt+0xe8>)
 800cdd6:	881b      	ldrh	r3, [r3, #0]
 800cdd8:	4413      	add	r3, r2
 800cdda:	b29b      	uxth	r3, r3
 800cddc:	3b02      	subs	r3, #2
 800cdde:	b29a      	uxth	r2, r3
 800cde0:	4b0c      	ldr	r3, [pc, #48]	; (800ce14 <tcp_parseopt+0xe8>)
 800cde2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800cde4:	4b0b      	ldr	r3, [pc, #44]	; (800ce14 <tcp_parseopt+0xe8>)
 800cde6:	881a      	ldrh	r2, [r3, #0]
 800cde8:	4b09      	ldr	r3, [pc, #36]	; (800ce10 <tcp_parseopt+0xe4>)
 800cdea:	881b      	ldrh	r3, [r3, #0]
 800cdec:	429a      	cmp	r2, r3
 800cdee:	d3b3      	bcc.n	800cd58 <tcp_parseopt+0x2c>
 800cdf0:	e004      	b.n	800cdfc <tcp_parseopt+0xd0>
          return;
 800cdf2:	bf00      	nop
 800cdf4:	e002      	b.n	800cdfc <tcp_parseopt+0xd0>
            return;
 800cdf6:	bf00      	nop
 800cdf8:	e000      	b.n	800cdfc <tcp_parseopt+0xd0>
            return;
 800cdfa:	bf00      	nop
      }
    }
  }
}
 800cdfc:	3710      	adds	r7, #16
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}
 800ce02:	bf00      	nop
 800ce04:	08015a80 	.word	0x08015a80
 800ce08:	08015ee4 	.word	0x08015ee4
 800ce0c:	08015acc 	.word	0x08015acc
 800ce10:	2000851c 	.word	0x2000851c
 800ce14:	20008524 	.word	0x20008524

0800ce18 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800ce18:	b480      	push	{r7}
 800ce1a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800ce1c:	4b05      	ldr	r3, [pc, #20]	; (800ce34 <tcp_trigger_input_pcb_close+0x1c>)
 800ce1e:	781b      	ldrb	r3, [r3, #0]
 800ce20:	f043 0310 	orr.w	r3, r3, #16
 800ce24:	b2da      	uxtb	r2, r3
 800ce26:	4b03      	ldr	r3, [pc, #12]	; (800ce34 <tcp_trigger_input_pcb_close+0x1c>)
 800ce28:	701a      	strb	r2, [r3, #0]
}
 800ce2a:	bf00      	nop
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce32:	4770      	bx	lr
 800ce34:	20008535 	.word	0x20008535

0800ce38 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b084      	sub	sp, #16
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	60f8      	str	r0, [r7, #12]
 800ce40:	60b9      	str	r1, [r7, #8]
 800ce42:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d00a      	beq.n	800ce60 <tcp_route+0x28>
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	7a1b      	ldrb	r3, [r3, #8]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d006      	beq.n	800ce60 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	7a1b      	ldrb	r3, [r3, #8]
 800ce56:	4618      	mov	r0, r3
 800ce58:	f7fb fb14 	bl	8008484 <netif_get_by_index>
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	e003      	b.n	800ce68 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f005 f845 	bl	8011ef0 <ip4_route>
 800ce66:	4603      	mov	r3, r0
  }
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	3710      	adds	r7, #16
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}

0800ce70 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800ce70:	b590      	push	{r4, r7, lr}
 800ce72:	b087      	sub	sp, #28
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	60f8      	str	r0, [r7, #12]
 800ce78:	60b9      	str	r1, [r7, #8]
 800ce7a:	603b      	str	r3, [r7, #0]
 800ce7c:	4613      	mov	r3, r2
 800ce7e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d105      	bne.n	800ce92 <tcp_create_segment+0x22>
 800ce86:	4b44      	ldr	r3, [pc, #272]	; (800cf98 <tcp_create_segment+0x128>)
 800ce88:	22a3      	movs	r2, #163	; 0xa3
 800ce8a:	4944      	ldr	r1, [pc, #272]	; (800cf9c <tcp_create_segment+0x12c>)
 800ce8c:	4844      	ldr	r0, [pc, #272]	; (800cfa0 <tcp_create_segment+0x130>)
 800ce8e:	f006 fce5 	bl	801385c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800ce92:	68bb      	ldr	r3, [r7, #8]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d105      	bne.n	800cea4 <tcp_create_segment+0x34>
 800ce98:	4b3f      	ldr	r3, [pc, #252]	; (800cf98 <tcp_create_segment+0x128>)
 800ce9a:	22a4      	movs	r2, #164	; 0xa4
 800ce9c:	4941      	ldr	r1, [pc, #260]	; (800cfa4 <tcp_create_segment+0x134>)
 800ce9e:	4840      	ldr	r0, [pc, #256]	; (800cfa0 <tcp_create_segment+0x130>)
 800cea0:	f006 fcdc 	bl	801385c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cea4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cea8:	009b      	lsls	r3, r3, #2
 800ceaa:	b2db      	uxtb	r3, r3
 800ceac:	f003 0304 	and.w	r3, r3, #4
 800ceb0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800ceb2:	2003      	movs	r0, #3
 800ceb4:	f7fa ff72 	bl	8007d9c <memp_malloc>
 800ceb8:	6138      	str	r0, [r7, #16]
 800ceba:	693b      	ldr	r3, [r7, #16]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d104      	bne.n	800ceca <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800cec0:	68b8      	ldr	r0, [r7, #8]
 800cec2:	f7fb fe6d 	bl	8008ba0 <pbuf_free>
    return NULL;
 800cec6:	2300      	movs	r3, #0
 800cec8:	e061      	b.n	800cf8e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800ceca:	693b      	ldr	r3, [r7, #16]
 800cecc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ced0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800ced2:	693b      	ldr	r3, [r7, #16]
 800ced4:	2200      	movs	r2, #0
 800ced6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800ced8:	693b      	ldr	r3, [r7, #16]
 800ceda:	68ba      	ldr	r2, [r7, #8]
 800cedc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800cede:	68bb      	ldr	r3, [r7, #8]
 800cee0:	891a      	ldrh	r2, [r3, #8]
 800cee2:	7dfb      	ldrb	r3, [r7, #23]
 800cee4:	b29b      	uxth	r3, r3
 800cee6:	429a      	cmp	r2, r3
 800cee8:	d205      	bcs.n	800cef6 <tcp_create_segment+0x86>
 800ceea:	4b2b      	ldr	r3, [pc, #172]	; (800cf98 <tcp_create_segment+0x128>)
 800ceec:	22b0      	movs	r2, #176	; 0xb0
 800ceee:	492e      	ldr	r1, [pc, #184]	; (800cfa8 <tcp_create_segment+0x138>)
 800cef0:	482b      	ldr	r0, [pc, #172]	; (800cfa0 <tcp_create_segment+0x130>)
 800cef2:	f006 fcb3 	bl	801385c <iprintf>
  seg->len = p->tot_len - optlen;
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	891a      	ldrh	r2, [r3, #8]
 800cefa:	7dfb      	ldrb	r3, [r7, #23]
 800cefc:	b29b      	uxth	r3, r3
 800cefe:	1ad3      	subs	r3, r2, r3
 800cf00:	b29a      	uxth	r2, r3
 800cf02:	693b      	ldr	r3, [r7, #16]
 800cf04:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800cf06:	2114      	movs	r1, #20
 800cf08:	68b8      	ldr	r0, [r7, #8]
 800cf0a:	f7fb fdb3 	bl	8008a74 <pbuf_add_header>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d004      	beq.n	800cf1e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800cf14:	6938      	ldr	r0, [r7, #16]
 800cf16:	f7fd f8d2 	bl	800a0be <tcp_seg_free>
    return NULL;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	e037      	b.n	800cf8e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800cf1e:	693b      	ldr	r3, [r7, #16]
 800cf20:	685b      	ldr	r3, [r3, #4]
 800cf22:	685a      	ldr	r2, [r3, #4]
 800cf24:	693b      	ldr	r3, [r7, #16]
 800cf26:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	8ada      	ldrh	r2, [r3, #22]
 800cf2c:	693b      	ldr	r3, [r7, #16]
 800cf2e:	68dc      	ldr	r4, [r3, #12]
 800cf30:	4610      	mov	r0, r2
 800cf32:	f7fa fa7d 	bl	8007430 <lwip_htons>
 800cf36:	4603      	mov	r3, r0
 800cf38:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	8b1a      	ldrh	r2, [r3, #24]
 800cf3e:	693b      	ldr	r3, [r7, #16]
 800cf40:	68dc      	ldr	r4, [r3, #12]
 800cf42:	4610      	mov	r0, r2
 800cf44:	f7fa fa74 	bl	8007430 <lwip_htons>
 800cf48:	4603      	mov	r3, r0
 800cf4a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800cf4c:	693b      	ldr	r3, [r7, #16]
 800cf4e:	68dc      	ldr	r4, [r3, #12]
 800cf50:	6838      	ldr	r0, [r7, #0]
 800cf52:	f7fa fa82 	bl	800745a <lwip_htonl>
 800cf56:	4603      	mov	r3, r0
 800cf58:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800cf5a:	7dfb      	ldrb	r3, [r7, #23]
 800cf5c:	089b      	lsrs	r3, r3, #2
 800cf5e:	b2db      	uxtb	r3, r3
 800cf60:	b29b      	uxth	r3, r3
 800cf62:	3305      	adds	r3, #5
 800cf64:	b29b      	uxth	r3, r3
 800cf66:	031b      	lsls	r3, r3, #12
 800cf68:	b29a      	uxth	r2, r3
 800cf6a:	79fb      	ldrb	r3, [r7, #7]
 800cf6c:	b29b      	uxth	r3, r3
 800cf6e:	4313      	orrs	r3, r2
 800cf70:	b29a      	uxth	r2, r3
 800cf72:	693b      	ldr	r3, [r7, #16]
 800cf74:	68dc      	ldr	r4, [r3, #12]
 800cf76:	4610      	mov	r0, r2
 800cf78:	f7fa fa5a 	bl	8007430 <lwip_htons>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800cf80:	693b      	ldr	r3, [r7, #16]
 800cf82:	68db      	ldr	r3, [r3, #12]
 800cf84:	2200      	movs	r2, #0
 800cf86:	749a      	strb	r2, [r3, #18]
 800cf88:	2200      	movs	r2, #0
 800cf8a:	74da      	strb	r2, [r3, #19]
  return seg;
 800cf8c:	693b      	ldr	r3, [r7, #16]
}
 800cf8e:	4618      	mov	r0, r3
 800cf90:	371c      	adds	r7, #28
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd90      	pop	{r4, r7, pc}
 800cf96:	bf00      	nop
 800cf98:	08015f00 	.word	0x08015f00
 800cf9c:	08015f34 	.word	0x08015f34
 800cfa0:	08015f54 	.word	0x08015f54
 800cfa4:	08015f7c 	.word	0x08015f7c
 800cfa8:	08015fa0 	.word	0x08015fa0

0800cfac <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800cfac:	b590      	push	{r4, r7, lr}
 800cfae:	b08b      	sub	sp, #44	; 0x2c
 800cfb0:	af02      	add	r7, sp, #8
 800cfb2:	6078      	str	r0, [r7, #4]
 800cfb4:	460b      	mov	r3, r1
 800cfb6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800cfb8:	2300      	movs	r3, #0
 800cfba:	61fb      	str	r3, [r7, #28]
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d106      	bne.n	800cfd8 <tcp_split_unsent_seg+0x2c>
 800cfca:	4b95      	ldr	r3, [pc, #596]	; (800d220 <tcp_split_unsent_seg+0x274>)
 800cfcc:	f240 324b 	movw	r2, #843	; 0x34b
 800cfd0:	4994      	ldr	r1, [pc, #592]	; (800d224 <tcp_split_unsent_seg+0x278>)
 800cfd2:	4895      	ldr	r0, [pc, #596]	; (800d228 <tcp_split_unsent_seg+0x27c>)
 800cfd4:	f006 fc42 	bl	801385c <iprintf>

  useg = pcb->unsent;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfdc:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800cfde:	697b      	ldr	r3, [r7, #20]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d102      	bne.n	800cfea <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800cfe4:	f04f 33ff 	mov.w	r3, #4294967295
 800cfe8:	e116      	b.n	800d218 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800cfea:	887b      	ldrh	r3, [r7, #2]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d109      	bne.n	800d004 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800cff0:	4b8b      	ldr	r3, [pc, #556]	; (800d220 <tcp_split_unsent_seg+0x274>)
 800cff2:	f240 3253 	movw	r2, #851	; 0x353
 800cff6:	498d      	ldr	r1, [pc, #564]	; (800d22c <tcp_split_unsent_seg+0x280>)
 800cff8:	488b      	ldr	r0, [pc, #556]	; (800d228 <tcp_split_unsent_seg+0x27c>)
 800cffa:	f006 fc2f 	bl	801385c <iprintf>
    return ERR_VAL;
 800cffe:	f06f 0305 	mvn.w	r3, #5
 800d002:	e109      	b.n	800d218 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800d004:	697b      	ldr	r3, [r7, #20]
 800d006:	891b      	ldrh	r3, [r3, #8]
 800d008:	887a      	ldrh	r2, [r7, #2]
 800d00a:	429a      	cmp	r2, r3
 800d00c:	d301      	bcc.n	800d012 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800d00e:	2300      	movs	r3, #0
 800d010:	e102      	b.n	800d218 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d016:	887a      	ldrh	r2, [r7, #2]
 800d018:	429a      	cmp	r2, r3
 800d01a:	d906      	bls.n	800d02a <tcp_split_unsent_seg+0x7e>
 800d01c:	4b80      	ldr	r3, [pc, #512]	; (800d220 <tcp_split_unsent_seg+0x274>)
 800d01e:	f240 325b 	movw	r2, #859	; 0x35b
 800d022:	4983      	ldr	r1, [pc, #524]	; (800d230 <tcp_split_unsent_seg+0x284>)
 800d024:	4880      	ldr	r0, [pc, #512]	; (800d228 <tcp_split_unsent_seg+0x27c>)
 800d026:	f006 fc19 	bl	801385c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800d02a:	697b      	ldr	r3, [r7, #20]
 800d02c:	891b      	ldrh	r3, [r3, #8]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d106      	bne.n	800d040 <tcp_split_unsent_seg+0x94>
 800d032:	4b7b      	ldr	r3, [pc, #492]	; (800d220 <tcp_split_unsent_seg+0x274>)
 800d034:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800d038:	497e      	ldr	r1, [pc, #504]	; (800d234 <tcp_split_unsent_seg+0x288>)
 800d03a:	487b      	ldr	r0, [pc, #492]	; (800d228 <tcp_split_unsent_seg+0x27c>)
 800d03c:	f006 fc0e 	bl	801385c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800d040:	697b      	ldr	r3, [r7, #20]
 800d042:	7a9b      	ldrb	r3, [r3, #10]
 800d044:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800d046:	7bfb      	ldrb	r3, [r7, #15]
 800d048:	009b      	lsls	r3, r3, #2
 800d04a:	b2db      	uxtb	r3, r3
 800d04c:	f003 0304 	and.w	r3, r3, #4
 800d050:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800d052:	697b      	ldr	r3, [r7, #20]
 800d054:	891a      	ldrh	r2, [r3, #8]
 800d056:	887b      	ldrh	r3, [r7, #2]
 800d058:	1ad3      	subs	r3, r2, r3
 800d05a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800d05c:	7bbb      	ldrb	r3, [r7, #14]
 800d05e:	b29a      	uxth	r2, r3
 800d060:	89bb      	ldrh	r3, [r7, #12]
 800d062:	4413      	add	r3, r2
 800d064:	b29b      	uxth	r3, r3
 800d066:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d06a:	4619      	mov	r1, r3
 800d06c:	2036      	movs	r0, #54	; 0x36
 800d06e:	f7fb fab3 	bl	80085d8 <pbuf_alloc>
 800d072:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d074:	693b      	ldr	r3, [r7, #16]
 800d076:	2b00      	cmp	r3, #0
 800d078:	f000 80b7 	beq.w	800d1ea <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800d07c:	697b      	ldr	r3, [r7, #20]
 800d07e:	685b      	ldr	r3, [r3, #4]
 800d080:	891a      	ldrh	r2, [r3, #8]
 800d082:	697b      	ldr	r3, [r7, #20]
 800d084:	891b      	ldrh	r3, [r3, #8]
 800d086:	1ad3      	subs	r3, r2, r3
 800d088:	b29a      	uxth	r2, r3
 800d08a:	887b      	ldrh	r3, [r7, #2]
 800d08c:	4413      	add	r3, r2
 800d08e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800d090:	697b      	ldr	r3, [r7, #20]
 800d092:	6858      	ldr	r0, [r3, #4]
 800d094:	693b      	ldr	r3, [r7, #16]
 800d096:	685a      	ldr	r2, [r3, #4]
 800d098:	7bbb      	ldrb	r3, [r7, #14]
 800d09a:	18d1      	adds	r1, r2, r3
 800d09c:	897b      	ldrh	r3, [r7, #10]
 800d09e:	89ba      	ldrh	r2, [r7, #12]
 800d0a0:	f7fb ff84 	bl	8008fac <pbuf_copy_partial>
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	461a      	mov	r2, r3
 800d0a8:	89bb      	ldrh	r3, [r7, #12]
 800d0aa:	4293      	cmp	r3, r2
 800d0ac:	f040 809f 	bne.w	800d1ee <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800d0b0:	697b      	ldr	r3, [r7, #20]
 800d0b2:	68db      	ldr	r3, [r3, #12]
 800d0b4:	899b      	ldrh	r3, [r3, #12]
 800d0b6:	b29b      	uxth	r3, r3
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	f7fa f9b9 	bl	8007430 <lwip_htons>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	b2db      	uxtb	r3, r3
 800d0c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d0c6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800d0cc:	7efb      	ldrb	r3, [r7, #27]
 800d0ce:	f003 0308 	and.w	r3, r3, #8
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d007      	beq.n	800d0e6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800d0d6:	7efb      	ldrb	r3, [r7, #27]
 800d0d8:	f023 0308 	bic.w	r3, r3, #8
 800d0dc:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800d0de:	7ebb      	ldrb	r3, [r7, #26]
 800d0e0:	f043 0308 	orr.w	r3, r3, #8
 800d0e4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800d0e6:	7efb      	ldrb	r3, [r7, #27]
 800d0e8:	f003 0301 	and.w	r3, r3, #1
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d007      	beq.n	800d100 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800d0f0:	7efb      	ldrb	r3, [r7, #27]
 800d0f2:	f023 0301 	bic.w	r3, r3, #1
 800d0f6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800d0f8:	7ebb      	ldrb	r3, [r7, #26]
 800d0fa:	f043 0301 	orr.w	r3, r3, #1
 800d0fe:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800d100:	697b      	ldr	r3, [r7, #20]
 800d102:	68db      	ldr	r3, [r3, #12]
 800d104:	685b      	ldr	r3, [r3, #4]
 800d106:	4618      	mov	r0, r3
 800d108:	f7fa f9a7 	bl	800745a <lwip_htonl>
 800d10c:	4602      	mov	r2, r0
 800d10e:	887b      	ldrh	r3, [r7, #2]
 800d110:	18d1      	adds	r1, r2, r3
 800d112:	7eba      	ldrb	r2, [r7, #26]
 800d114:	7bfb      	ldrb	r3, [r7, #15]
 800d116:	9300      	str	r3, [sp, #0]
 800d118:	460b      	mov	r3, r1
 800d11a:	6939      	ldr	r1, [r7, #16]
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	f7ff fea7 	bl	800ce70 <tcp_create_segment>
 800d122:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800d124:	69fb      	ldr	r3, [r7, #28]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d063      	beq.n	800d1f2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800d12a:	697b      	ldr	r3, [r7, #20]
 800d12c:	685b      	ldr	r3, [r3, #4]
 800d12e:	4618      	mov	r0, r3
 800d130:	f7fb fdc4 	bl	8008cbc <pbuf_clen>
 800d134:	4603      	mov	r3, r0
 800d136:	461a      	mov	r2, r3
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d13e:	1a9b      	subs	r3, r3, r2
 800d140:	b29a      	uxth	r2, r3
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800d148:	697b      	ldr	r3, [r7, #20]
 800d14a:	6858      	ldr	r0, [r3, #4]
 800d14c:	697b      	ldr	r3, [r7, #20]
 800d14e:	685b      	ldr	r3, [r3, #4]
 800d150:	891a      	ldrh	r2, [r3, #8]
 800d152:	89bb      	ldrh	r3, [r7, #12]
 800d154:	1ad3      	subs	r3, r2, r3
 800d156:	b29b      	uxth	r3, r3
 800d158:	4619      	mov	r1, r3
 800d15a:	f7fb fb9b 	bl	8008894 <pbuf_realloc>
  useg->len -= remainder;
 800d15e:	697b      	ldr	r3, [r7, #20]
 800d160:	891a      	ldrh	r2, [r3, #8]
 800d162:	89bb      	ldrh	r3, [r7, #12]
 800d164:	1ad3      	subs	r3, r2, r3
 800d166:	b29a      	uxth	r2, r3
 800d168:	697b      	ldr	r3, [r7, #20]
 800d16a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800d16c:	697b      	ldr	r3, [r7, #20]
 800d16e:	68db      	ldr	r3, [r3, #12]
 800d170:	899b      	ldrh	r3, [r3, #12]
 800d172:	b29c      	uxth	r4, r3
 800d174:	7efb      	ldrb	r3, [r7, #27]
 800d176:	b29b      	uxth	r3, r3
 800d178:	4618      	mov	r0, r3
 800d17a:	f7fa f959 	bl	8007430 <lwip_htons>
 800d17e:	4603      	mov	r3, r0
 800d180:	461a      	mov	r2, r3
 800d182:	697b      	ldr	r3, [r7, #20]
 800d184:	68db      	ldr	r3, [r3, #12]
 800d186:	4322      	orrs	r2, r4
 800d188:	b292      	uxth	r2, r2
 800d18a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800d18c:	697b      	ldr	r3, [r7, #20]
 800d18e:	685b      	ldr	r3, [r3, #4]
 800d190:	4618      	mov	r0, r3
 800d192:	f7fb fd93 	bl	8008cbc <pbuf_clen>
 800d196:	4603      	mov	r3, r0
 800d198:	461a      	mov	r2, r3
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d1a0:	4413      	add	r3, r2
 800d1a2:	b29a      	uxth	r2, r3
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d1aa:	69fb      	ldr	r3, [r7, #28]
 800d1ac:	685b      	ldr	r3, [r3, #4]
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	f7fb fd84 	bl	8008cbc <pbuf_clen>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	461a      	mov	r2, r3
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d1be:	4413      	add	r3, r2
 800d1c0:	b29a      	uxth	r2, r3
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800d1c8:	697b      	ldr	r3, [r7, #20]
 800d1ca:	681a      	ldr	r2, [r3, #0]
 800d1cc:	69fb      	ldr	r3, [r7, #28]
 800d1ce:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	69fa      	ldr	r2, [r7, #28]
 800d1d4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800d1d6:	69fb      	ldr	r3, [r7, #28]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d103      	bne.n	800d1e6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	e016      	b.n	800d218 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800d1ea:	bf00      	nop
 800d1ec:	e002      	b.n	800d1f4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800d1ee:	bf00      	nop
 800d1f0:	e000      	b.n	800d1f4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800d1f2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800d1f4:	69fb      	ldr	r3, [r7, #28]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d006      	beq.n	800d208 <tcp_split_unsent_seg+0x25c>
 800d1fa:	4b09      	ldr	r3, [pc, #36]	; (800d220 <tcp_split_unsent_seg+0x274>)
 800d1fc:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800d200:	490d      	ldr	r1, [pc, #52]	; (800d238 <tcp_split_unsent_seg+0x28c>)
 800d202:	4809      	ldr	r0, [pc, #36]	; (800d228 <tcp_split_unsent_seg+0x27c>)
 800d204:	f006 fb2a 	bl	801385c <iprintf>
  if (p != NULL) {
 800d208:	693b      	ldr	r3, [r7, #16]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d002      	beq.n	800d214 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800d20e:	6938      	ldr	r0, [r7, #16]
 800d210:	f7fb fcc6 	bl	8008ba0 <pbuf_free>
  }

  return ERR_MEM;
 800d214:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d218:	4618      	mov	r0, r3
 800d21a:	3724      	adds	r7, #36	; 0x24
 800d21c:	46bd      	mov	sp, r7
 800d21e:	bd90      	pop	{r4, r7, pc}
 800d220:	08015f00 	.word	0x08015f00
 800d224:	08016294 	.word	0x08016294
 800d228:	08015f54 	.word	0x08015f54
 800d22c:	080162b8 	.word	0x080162b8
 800d230:	080162dc 	.word	0x080162dc
 800d234:	080162ec 	.word	0x080162ec
 800d238:	080162fc 	.word	0x080162fc

0800d23c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800d23c:	b590      	push	{r4, r7, lr}
 800d23e:	b085      	sub	sp, #20
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d106      	bne.n	800d258 <tcp_send_fin+0x1c>
 800d24a:	4b21      	ldr	r3, [pc, #132]	; (800d2d0 <tcp_send_fin+0x94>)
 800d24c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800d250:	4920      	ldr	r1, [pc, #128]	; (800d2d4 <tcp_send_fin+0x98>)
 800d252:	4821      	ldr	r0, [pc, #132]	; (800d2d8 <tcp_send_fin+0x9c>)
 800d254:	f006 fb02 	bl	801385c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d02e      	beq.n	800d2be <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d264:	60fb      	str	r3, [r7, #12]
 800d266:	e002      	b.n	800d26e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d1f8      	bne.n	800d268 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	68db      	ldr	r3, [r3, #12]
 800d27a:	899b      	ldrh	r3, [r3, #12]
 800d27c:	b29b      	uxth	r3, r3
 800d27e:	4618      	mov	r0, r3
 800d280:	f7fa f8d6 	bl	8007430 <lwip_htons>
 800d284:	4603      	mov	r3, r0
 800d286:	b2db      	uxtb	r3, r3
 800d288:	f003 0307 	and.w	r3, r3, #7
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d116      	bne.n	800d2be <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	68db      	ldr	r3, [r3, #12]
 800d294:	899b      	ldrh	r3, [r3, #12]
 800d296:	b29c      	uxth	r4, r3
 800d298:	2001      	movs	r0, #1
 800d29a:	f7fa f8c9 	bl	8007430 <lwip_htons>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	461a      	mov	r2, r3
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	68db      	ldr	r3, [r3, #12]
 800d2a6:	4322      	orrs	r2, r4
 800d2a8:	b292      	uxth	r2, r2
 800d2aa:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	8b5b      	ldrh	r3, [r3, #26]
 800d2b0:	f043 0320 	orr.w	r3, r3, #32
 800d2b4:	b29a      	uxth	r2, r3
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	e004      	b.n	800d2c8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800d2be:	2101      	movs	r1, #1
 800d2c0:	6878      	ldr	r0, [r7, #4]
 800d2c2:	f000 f80b 	bl	800d2dc <tcp_enqueue_flags>
 800d2c6:	4603      	mov	r3, r0
}
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	3714      	adds	r7, #20
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bd90      	pop	{r4, r7, pc}
 800d2d0:	08015f00 	.word	0x08015f00
 800d2d4:	08016308 	.word	0x08016308
 800d2d8:	08015f54 	.word	0x08015f54

0800d2dc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b08a      	sub	sp, #40	; 0x28
 800d2e0:	af02      	add	r7, sp, #8
 800d2e2:	6078      	str	r0, [r7, #4]
 800d2e4:	460b      	mov	r3, r1
 800d2e6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800d2f0:	78fb      	ldrb	r3, [r7, #3]
 800d2f2:	f003 0303 	and.w	r3, r3, #3
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d106      	bne.n	800d308 <tcp_enqueue_flags+0x2c>
 800d2fa:	4b67      	ldr	r3, [pc, #412]	; (800d498 <tcp_enqueue_flags+0x1bc>)
 800d2fc:	f240 4211 	movw	r2, #1041	; 0x411
 800d300:	4966      	ldr	r1, [pc, #408]	; (800d49c <tcp_enqueue_flags+0x1c0>)
 800d302:	4867      	ldr	r0, [pc, #412]	; (800d4a0 <tcp_enqueue_flags+0x1c4>)
 800d304:	f006 faaa 	bl	801385c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d106      	bne.n	800d31c <tcp_enqueue_flags+0x40>
 800d30e:	4b62      	ldr	r3, [pc, #392]	; (800d498 <tcp_enqueue_flags+0x1bc>)
 800d310:	f240 4213 	movw	r2, #1043	; 0x413
 800d314:	4963      	ldr	r1, [pc, #396]	; (800d4a4 <tcp_enqueue_flags+0x1c8>)
 800d316:	4862      	ldr	r0, [pc, #392]	; (800d4a0 <tcp_enqueue_flags+0x1c4>)
 800d318:	f006 faa0 	bl	801385c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800d31c:	78fb      	ldrb	r3, [r7, #3]
 800d31e:	f003 0302 	and.w	r3, r3, #2
 800d322:	2b00      	cmp	r3, #0
 800d324:	d001      	beq.n	800d32a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800d326:	2301      	movs	r3, #1
 800d328:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d32a:	7ffb      	ldrb	r3, [r7, #31]
 800d32c:	009b      	lsls	r3, r3, #2
 800d32e:	b2db      	uxtb	r3, r3
 800d330:	f003 0304 	and.w	r3, r3, #4
 800d334:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d336:	7dfb      	ldrb	r3, [r7, #23]
 800d338:	b29b      	uxth	r3, r3
 800d33a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d33e:	4619      	mov	r1, r3
 800d340:	2036      	movs	r0, #54	; 0x36
 800d342:	f7fb f949 	bl	80085d8 <pbuf_alloc>
 800d346:	6138      	str	r0, [r7, #16]
 800d348:	693b      	ldr	r3, [r7, #16]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d109      	bne.n	800d362 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	8b5b      	ldrh	r3, [r3, #26]
 800d352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d356:	b29a      	uxth	r2, r3
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d35c:	f04f 33ff 	mov.w	r3, #4294967295
 800d360:	e095      	b.n	800d48e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800d362:	693b      	ldr	r3, [r7, #16]
 800d364:	895a      	ldrh	r2, [r3, #10]
 800d366:	7dfb      	ldrb	r3, [r7, #23]
 800d368:	b29b      	uxth	r3, r3
 800d36a:	429a      	cmp	r2, r3
 800d36c:	d206      	bcs.n	800d37c <tcp_enqueue_flags+0xa0>
 800d36e:	4b4a      	ldr	r3, [pc, #296]	; (800d498 <tcp_enqueue_flags+0x1bc>)
 800d370:	f240 4239 	movw	r2, #1081	; 0x439
 800d374:	494c      	ldr	r1, [pc, #304]	; (800d4a8 <tcp_enqueue_flags+0x1cc>)
 800d376:	484a      	ldr	r0, [pc, #296]	; (800d4a0 <tcp_enqueue_flags+0x1c4>)
 800d378:	f006 fa70 	bl	801385c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800d380:	78fa      	ldrb	r2, [r7, #3]
 800d382:	7ffb      	ldrb	r3, [r7, #31]
 800d384:	9300      	str	r3, [sp, #0]
 800d386:	460b      	mov	r3, r1
 800d388:	6939      	ldr	r1, [r7, #16]
 800d38a:	6878      	ldr	r0, [r7, #4]
 800d38c:	f7ff fd70 	bl	800ce70 <tcp_create_segment>
 800d390:	60f8      	str	r0, [r7, #12]
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d109      	bne.n	800d3ac <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	8b5b      	ldrh	r3, [r3, #26]
 800d39c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3a0:	b29a      	uxth	r2, r3
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d3a6:	f04f 33ff 	mov.w	r3, #4294967295
 800d3aa:	e070      	b.n	800d48e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	68db      	ldr	r3, [r3, #12]
 800d3b0:	f003 0303 	and.w	r3, r3, #3
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d006      	beq.n	800d3c6 <tcp_enqueue_flags+0xea>
 800d3b8:	4b37      	ldr	r3, [pc, #220]	; (800d498 <tcp_enqueue_flags+0x1bc>)
 800d3ba:	f240 4242 	movw	r2, #1090	; 0x442
 800d3be:	493b      	ldr	r1, [pc, #236]	; (800d4ac <tcp_enqueue_flags+0x1d0>)
 800d3c0:	4837      	ldr	r0, [pc, #220]	; (800d4a0 <tcp_enqueue_flags+0x1c4>)
 800d3c2:	f006 fa4b 	bl	801385c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	891b      	ldrh	r3, [r3, #8]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d006      	beq.n	800d3dc <tcp_enqueue_flags+0x100>
 800d3ce:	4b32      	ldr	r3, [pc, #200]	; (800d498 <tcp_enqueue_flags+0x1bc>)
 800d3d0:	f240 4243 	movw	r2, #1091	; 0x443
 800d3d4:	4936      	ldr	r1, [pc, #216]	; (800d4b0 <tcp_enqueue_flags+0x1d4>)
 800d3d6:	4832      	ldr	r0, [pc, #200]	; (800d4a0 <tcp_enqueue_flags+0x1c4>)
 800d3d8:	f006 fa40 	bl	801385c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d103      	bne.n	800d3ec <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	68fa      	ldr	r2, [r7, #12]
 800d3e8:	66da      	str	r2, [r3, #108]	; 0x6c
 800d3ea:	e00d      	b.n	800d408 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3f0:	61bb      	str	r3, [r7, #24]
 800d3f2:	e002      	b.n	800d3fa <tcp_enqueue_flags+0x11e>
 800d3f4:	69bb      	ldr	r3, [r7, #24]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	61bb      	str	r3, [r7, #24]
 800d3fa:	69bb      	ldr	r3, [r7, #24]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d1f8      	bne.n	800d3f4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800d402:	69bb      	ldr	r3, [r7, #24]
 800d404:	68fa      	ldr	r2, [r7, #12]
 800d406:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2200      	movs	r2, #0
 800d40c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800d410:	78fb      	ldrb	r3, [r7, #3]
 800d412:	f003 0302 	and.w	r3, r3, #2
 800d416:	2b00      	cmp	r3, #0
 800d418:	d104      	bne.n	800d424 <tcp_enqueue_flags+0x148>
 800d41a:	78fb      	ldrb	r3, [r7, #3]
 800d41c:	f003 0301 	and.w	r3, r3, #1
 800d420:	2b00      	cmp	r3, #0
 800d422:	d004      	beq.n	800d42e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d428:	1c5a      	adds	r2, r3, #1
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800d42e:	78fb      	ldrb	r3, [r7, #3]
 800d430:	f003 0301 	and.w	r3, r3, #1
 800d434:	2b00      	cmp	r3, #0
 800d436:	d006      	beq.n	800d446 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	8b5b      	ldrh	r3, [r3, #26]
 800d43c:	f043 0320 	orr.w	r3, r3, #32
 800d440:	b29a      	uxth	r2, r3
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	685b      	ldr	r3, [r3, #4]
 800d44a:	4618      	mov	r0, r3
 800d44c:	f7fb fc36 	bl	8008cbc <pbuf_clen>
 800d450:	4603      	mov	r3, r0
 800d452:	461a      	mov	r2, r3
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d45a:	4413      	add	r3, r2
 800d45c:	b29a      	uxth	r2, r3
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d00e      	beq.n	800d48c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d472:	2b00      	cmp	r3, #0
 800d474:	d10a      	bne.n	800d48c <tcp_enqueue_flags+0x1b0>
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d106      	bne.n	800d48c <tcp_enqueue_flags+0x1b0>
 800d47e:	4b06      	ldr	r3, [pc, #24]	; (800d498 <tcp_enqueue_flags+0x1bc>)
 800d480:	f240 4265 	movw	r2, #1125	; 0x465
 800d484:	490b      	ldr	r1, [pc, #44]	; (800d4b4 <tcp_enqueue_flags+0x1d8>)
 800d486:	4806      	ldr	r0, [pc, #24]	; (800d4a0 <tcp_enqueue_flags+0x1c4>)
 800d488:	f006 f9e8 	bl	801385c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800d48c:	2300      	movs	r3, #0
}
 800d48e:	4618      	mov	r0, r3
 800d490:	3720      	adds	r7, #32
 800d492:	46bd      	mov	sp, r7
 800d494:	bd80      	pop	{r7, pc}
 800d496:	bf00      	nop
 800d498:	08015f00 	.word	0x08015f00
 800d49c:	08016324 	.word	0x08016324
 800d4a0:	08015f54 	.word	0x08015f54
 800d4a4:	0801637c 	.word	0x0801637c
 800d4a8:	0801639c 	.word	0x0801639c
 800d4ac:	080163d8 	.word	0x080163d8
 800d4b0:	080163f0 	.word	0x080163f0
 800d4b4:	0801641c 	.word	0x0801641c

0800d4b8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800d4b8:	b5b0      	push	{r4, r5, r7, lr}
 800d4ba:	b08a      	sub	sp, #40	; 0x28
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d106      	bne.n	800d4d4 <tcp_output+0x1c>
 800d4c6:	4b9e      	ldr	r3, [pc, #632]	; (800d740 <tcp_output+0x288>)
 800d4c8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800d4cc:	499d      	ldr	r1, [pc, #628]	; (800d744 <tcp_output+0x28c>)
 800d4ce:	489e      	ldr	r0, [pc, #632]	; (800d748 <tcp_output+0x290>)
 800d4d0:	f006 f9c4 	bl	801385c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	7d1b      	ldrb	r3, [r3, #20]
 800d4d8:	2b01      	cmp	r3, #1
 800d4da:	d106      	bne.n	800d4ea <tcp_output+0x32>
 800d4dc:	4b98      	ldr	r3, [pc, #608]	; (800d740 <tcp_output+0x288>)
 800d4de:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800d4e2:	499a      	ldr	r1, [pc, #616]	; (800d74c <tcp_output+0x294>)
 800d4e4:	4898      	ldr	r0, [pc, #608]	; (800d748 <tcp_output+0x290>)
 800d4e6:	f006 f9b9 	bl	801385c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800d4ea:	4b99      	ldr	r3, [pc, #612]	; (800d750 <tcp_output+0x298>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	687a      	ldr	r2, [r7, #4]
 800d4f0:	429a      	cmp	r2, r3
 800d4f2:	d101      	bne.n	800d4f8 <tcp_output+0x40>
    return ERR_OK;
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	e1ce      	b.n	800d896 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d504:	4293      	cmp	r3, r2
 800d506:	bf28      	it	cs
 800d508:	4613      	movcs	r3, r2
 800d50a:	b29b      	uxth	r3, r3
 800d50c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d512:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800d514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d516:	2b00      	cmp	r3, #0
 800d518:	d10b      	bne.n	800d532 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	8b5b      	ldrh	r3, [r3, #26]
 800d51e:	f003 0302 	and.w	r3, r3, #2
 800d522:	2b00      	cmp	r3, #0
 800d524:	f000 81aa 	beq.w	800d87c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800d528:	6878      	ldr	r0, [r7, #4]
 800d52a:	f000 fdcb 	bl	800e0c4 <tcp_send_empty_ack>
 800d52e:	4603      	mov	r3, r0
 800d530:	e1b1      	b.n	800d896 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800d532:	6879      	ldr	r1, [r7, #4]
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	3304      	adds	r3, #4
 800d538:	461a      	mov	r2, r3
 800d53a:	6878      	ldr	r0, [r7, #4]
 800d53c:	f7ff fc7c 	bl	800ce38 <tcp_route>
 800d540:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800d542:	697b      	ldr	r3, [r7, #20]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d102      	bne.n	800d54e <tcp_output+0x96>
    return ERR_RTE;
 800d548:	f06f 0303 	mvn.w	r3, #3
 800d54c:	e1a3      	b.n	800d896 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d003      	beq.n	800d55c <tcp_output+0xa4>
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d111      	bne.n	800d580 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800d55c:	697b      	ldr	r3, [r7, #20]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d002      	beq.n	800d568 <tcp_output+0xb0>
 800d562:	697b      	ldr	r3, [r7, #20]
 800d564:	3304      	adds	r3, #4
 800d566:	e000      	b.n	800d56a <tcp_output+0xb2>
 800d568:	2300      	movs	r3, #0
 800d56a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800d56c:	693b      	ldr	r3, [r7, #16]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d102      	bne.n	800d578 <tcp_output+0xc0>
      return ERR_RTE;
 800d572:	f06f 0303 	mvn.w	r3, #3
 800d576:	e18e      	b.n	800d896 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d578:	693b      	ldr	r3, [r7, #16]
 800d57a:	681a      	ldr	r2, [r3, #0]
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800d580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d582:	68db      	ldr	r3, [r3, #12]
 800d584:	685b      	ldr	r3, [r3, #4]
 800d586:	4618      	mov	r0, r3
 800d588:	f7f9 ff67 	bl	800745a <lwip_htonl>
 800d58c:	4602      	mov	r2, r0
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d592:	1ad3      	subs	r3, r2, r3
 800d594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d596:	8912      	ldrh	r2, [r2, #8]
 800d598:	4413      	add	r3, r2
 800d59a:	69ba      	ldr	r2, [r7, #24]
 800d59c:	429a      	cmp	r2, r3
 800d59e:	d227      	bcs.n	800d5f0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d5a6:	461a      	mov	r2, r3
 800d5a8:	69bb      	ldr	r3, [r7, #24]
 800d5aa:	4293      	cmp	r3, r2
 800d5ac:	d114      	bne.n	800d5d8 <tcp_output+0x120>
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d110      	bne.n	800d5d8 <tcp_output+0x120>
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d10b      	bne.n	800d5d8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	2201      	movs	r2, #1
 800d5cc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	8b5b      	ldrh	r3, [r3, #26]
 800d5dc:	f003 0302 	and.w	r3, r3, #2
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	f000 814d 	beq.w	800d880 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800d5e6:	6878      	ldr	r0, [r7, #4]
 800d5e8:	f000 fd6c 	bl	800e0c4 <tcp_send_empty_ack>
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	e152      	b.n	800d896 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5fc:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800d5fe:	6a3b      	ldr	r3, [r7, #32]
 800d600:	2b00      	cmp	r3, #0
 800d602:	f000 811c 	beq.w	800d83e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800d606:	e002      	b.n	800d60e <tcp_output+0x156>
 800d608:	6a3b      	ldr	r3, [r7, #32]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	623b      	str	r3, [r7, #32]
 800d60e:	6a3b      	ldr	r3, [r7, #32]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d1f8      	bne.n	800d608 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800d616:	e112      	b.n	800d83e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800d618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d61a:	68db      	ldr	r3, [r3, #12]
 800d61c:	899b      	ldrh	r3, [r3, #12]
 800d61e:	b29b      	uxth	r3, r3
 800d620:	4618      	mov	r0, r3
 800d622:	f7f9 ff05 	bl	8007430 <lwip_htons>
 800d626:	4603      	mov	r3, r0
 800d628:	b2db      	uxtb	r3, r3
 800d62a:	f003 0304 	and.w	r3, r3, #4
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d006      	beq.n	800d640 <tcp_output+0x188>
 800d632:	4b43      	ldr	r3, [pc, #268]	; (800d740 <tcp_output+0x288>)
 800d634:	f240 5236 	movw	r2, #1334	; 0x536
 800d638:	4946      	ldr	r1, [pc, #280]	; (800d754 <tcp_output+0x29c>)
 800d63a:	4843      	ldr	r0, [pc, #268]	; (800d748 <tcp_output+0x290>)
 800d63c:	f006 f90e 	bl	801385c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d644:	2b00      	cmp	r3, #0
 800d646:	d01f      	beq.n	800d688 <tcp_output+0x1d0>
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	8b5b      	ldrh	r3, [r3, #26]
 800d64c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800d650:	2b00      	cmp	r3, #0
 800d652:	d119      	bne.n	800d688 <tcp_output+0x1d0>
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d00b      	beq.n	800d674 <tcp_output+0x1bc>
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d110      	bne.n	800d688 <tcp_output+0x1d0>
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d66a:	891a      	ldrh	r2, [r3, #8]
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d670:	429a      	cmp	r2, r3
 800d672:	d209      	bcs.n	800d688 <tcp_output+0x1d0>
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d004      	beq.n	800d688 <tcp_output+0x1d0>
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d684:	2b08      	cmp	r3, #8
 800d686:	d901      	bls.n	800d68c <tcp_output+0x1d4>
 800d688:	2301      	movs	r3, #1
 800d68a:	e000      	b.n	800d68e <tcp_output+0x1d6>
 800d68c:	2300      	movs	r3, #0
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d106      	bne.n	800d6a0 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	8b5b      	ldrh	r3, [r3, #26]
 800d696:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	f000 80e4 	beq.w	800d868 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	7d1b      	ldrb	r3, [r3, #20]
 800d6a4:	2b02      	cmp	r3, #2
 800d6a6:	d00d      	beq.n	800d6c4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800d6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6aa:	68db      	ldr	r3, [r3, #12]
 800d6ac:	899b      	ldrh	r3, [r3, #12]
 800d6ae:	b29c      	uxth	r4, r3
 800d6b0:	2010      	movs	r0, #16
 800d6b2:	f7f9 febd 	bl	8007430 <lwip_htons>
 800d6b6:	4603      	mov	r3, r0
 800d6b8:	461a      	mov	r2, r3
 800d6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6bc:	68db      	ldr	r3, [r3, #12]
 800d6be:	4322      	orrs	r2, r4
 800d6c0:	b292      	uxth	r2, r2
 800d6c2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800d6c4:	697a      	ldr	r2, [r7, #20]
 800d6c6:	6879      	ldr	r1, [r7, #4]
 800d6c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d6ca:	f000 f909 	bl	800d8e0 <tcp_output_segment>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800d6d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d009      	beq.n	800d6ee <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	8b5b      	ldrh	r3, [r3, #26]
 800d6de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6e2:	b29a      	uxth	r2, r3
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	835a      	strh	r2, [r3, #26]
      return err;
 800d6e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6ec:	e0d3      	b.n	800d896 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800d6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6f0:	681a      	ldr	r2, [r3, #0]
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	7d1b      	ldrb	r3, [r3, #20]
 800d6fa:	2b02      	cmp	r3, #2
 800d6fc:	d006      	beq.n	800d70c <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	8b5b      	ldrh	r3, [r3, #26]
 800d702:	f023 0303 	bic.w	r3, r3, #3
 800d706:	b29a      	uxth	r2, r3
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d70e:	68db      	ldr	r3, [r3, #12]
 800d710:	685b      	ldr	r3, [r3, #4]
 800d712:	4618      	mov	r0, r3
 800d714:	f7f9 fea1 	bl	800745a <lwip_htonl>
 800d718:	4604      	mov	r4, r0
 800d71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d71c:	891b      	ldrh	r3, [r3, #8]
 800d71e:	461d      	mov	r5, r3
 800d720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d722:	68db      	ldr	r3, [r3, #12]
 800d724:	899b      	ldrh	r3, [r3, #12]
 800d726:	b29b      	uxth	r3, r3
 800d728:	4618      	mov	r0, r3
 800d72a:	f7f9 fe81 	bl	8007430 <lwip_htons>
 800d72e:	4603      	mov	r3, r0
 800d730:	b2db      	uxtb	r3, r3
 800d732:	f003 0303 	and.w	r3, r3, #3
 800d736:	2b00      	cmp	r3, #0
 800d738:	d00e      	beq.n	800d758 <tcp_output+0x2a0>
 800d73a:	2301      	movs	r3, #1
 800d73c:	e00d      	b.n	800d75a <tcp_output+0x2a2>
 800d73e:	bf00      	nop
 800d740:	08015f00 	.word	0x08015f00
 800d744:	08016444 	.word	0x08016444
 800d748:	08015f54 	.word	0x08015f54
 800d74c:	0801645c 	.word	0x0801645c
 800d750:	2000ef6c 	.word	0x2000ef6c
 800d754:	08016484 	.word	0x08016484
 800d758:	2300      	movs	r3, #0
 800d75a:	442b      	add	r3, r5
 800d75c:	4423      	add	r3, r4
 800d75e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d764:	68bb      	ldr	r3, [r7, #8]
 800d766:	1ad3      	subs	r3, r2, r3
 800d768:	2b00      	cmp	r3, #0
 800d76a:	da02      	bge.n	800d772 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	68ba      	ldr	r2, [r7, #8]
 800d770:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800d772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d774:	891b      	ldrh	r3, [r3, #8]
 800d776:	461c      	mov	r4, r3
 800d778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d77a:	68db      	ldr	r3, [r3, #12]
 800d77c:	899b      	ldrh	r3, [r3, #12]
 800d77e:	b29b      	uxth	r3, r3
 800d780:	4618      	mov	r0, r3
 800d782:	f7f9 fe55 	bl	8007430 <lwip_htons>
 800d786:	4603      	mov	r3, r0
 800d788:	b2db      	uxtb	r3, r3
 800d78a:	f003 0303 	and.w	r3, r3, #3
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d001      	beq.n	800d796 <tcp_output+0x2de>
 800d792:	2301      	movs	r3, #1
 800d794:	e000      	b.n	800d798 <tcp_output+0x2e0>
 800d796:	2300      	movs	r3, #0
 800d798:	4423      	add	r3, r4
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d049      	beq.n	800d832 <tcp_output+0x37a>
      seg->next = NULL;
 800d79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d105      	bne.n	800d7b8 <tcp_output+0x300>
        pcb->unacked = seg;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7b0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800d7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7b4:	623b      	str	r3, [r7, #32]
 800d7b6:	e03f      	b.n	800d838 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800d7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ba:	68db      	ldr	r3, [r3, #12]
 800d7bc:	685b      	ldr	r3, [r3, #4]
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f7f9 fe4b 	bl	800745a <lwip_htonl>
 800d7c4:	4604      	mov	r4, r0
 800d7c6:	6a3b      	ldr	r3, [r7, #32]
 800d7c8:	68db      	ldr	r3, [r3, #12]
 800d7ca:	685b      	ldr	r3, [r3, #4]
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	f7f9 fe44 	bl	800745a <lwip_htonl>
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	1ae3      	subs	r3, r4, r3
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	da24      	bge.n	800d824 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	3370      	adds	r3, #112	; 0x70
 800d7de:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d7e0:	e002      	b.n	800d7e8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800d7e2:	69fb      	ldr	r3, [r7, #28]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d7e8:	69fb      	ldr	r3, [r7, #28]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d011      	beq.n	800d814 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d7f0:	69fb      	ldr	r3, [r7, #28]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	68db      	ldr	r3, [r3, #12]
 800d7f6:	685b      	ldr	r3, [r3, #4]
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	f7f9 fe2e 	bl	800745a <lwip_htonl>
 800d7fe:	4604      	mov	r4, r0
 800d800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d802:	68db      	ldr	r3, [r3, #12]
 800d804:	685b      	ldr	r3, [r3, #4]
 800d806:	4618      	mov	r0, r3
 800d808:	f7f9 fe27 	bl	800745a <lwip_htonl>
 800d80c:	4603      	mov	r3, r0
 800d80e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800d810:	2b00      	cmp	r3, #0
 800d812:	dbe6      	blt.n	800d7e2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800d814:	69fb      	ldr	r3, [r7, #28]
 800d816:	681a      	ldr	r2, [r3, #0]
 800d818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d81a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800d81c:	69fb      	ldr	r3, [r7, #28]
 800d81e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d820:	601a      	str	r2, [r3, #0]
 800d822:	e009      	b.n	800d838 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800d824:	6a3b      	ldr	r3, [r7, #32]
 800d826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d828:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800d82a:	6a3b      	ldr	r3, [r7, #32]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	623b      	str	r3, [r7, #32]
 800d830:	e002      	b.n	800d838 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800d832:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d834:	f7fc fc43 	bl	800a0be <tcp_seg_free>
    }
    seg = pcb->unsent;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d83c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800d83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d840:	2b00      	cmp	r3, #0
 800d842:	d012      	beq.n	800d86a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800d844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d846:	68db      	ldr	r3, [r3, #12]
 800d848:	685b      	ldr	r3, [r3, #4]
 800d84a:	4618      	mov	r0, r3
 800d84c:	f7f9 fe05 	bl	800745a <lwip_htonl>
 800d850:	4602      	mov	r2, r0
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d856:	1ad3      	subs	r3, r2, r3
 800d858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d85a:	8912      	ldrh	r2, [r2, #8]
 800d85c:	4413      	add	r3, r2
  while (seg != NULL &&
 800d85e:	69ba      	ldr	r2, [r7, #24]
 800d860:	429a      	cmp	r2, r3
 800d862:	f4bf aed9 	bcs.w	800d618 <tcp_output+0x160>
 800d866:	e000      	b.n	800d86a <tcp_output+0x3b2>
      break;
 800d868:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d108      	bne.n	800d884 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	2200      	movs	r2, #0
 800d876:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800d87a:	e004      	b.n	800d886 <tcp_output+0x3ce>
    goto output_done;
 800d87c:	bf00      	nop
 800d87e:	e002      	b.n	800d886 <tcp_output+0x3ce>
    goto output_done;
 800d880:	bf00      	nop
 800d882:	e000      	b.n	800d886 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800d884:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	8b5b      	ldrh	r3, [r3, #26]
 800d88a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d88e:	b29a      	uxth	r2, r3
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800d894:	2300      	movs	r3, #0
}
 800d896:	4618      	mov	r0, r3
 800d898:	3728      	adds	r7, #40	; 0x28
 800d89a:	46bd      	mov	sp, r7
 800d89c:	bdb0      	pop	{r4, r5, r7, pc}
 800d89e:	bf00      	nop

0800d8a0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b082      	sub	sp, #8
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d106      	bne.n	800d8bc <tcp_output_segment_busy+0x1c>
 800d8ae:	4b09      	ldr	r3, [pc, #36]	; (800d8d4 <tcp_output_segment_busy+0x34>)
 800d8b0:	f240 529a 	movw	r2, #1434	; 0x59a
 800d8b4:	4908      	ldr	r1, [pc, #32]	; (800d8d8 <tcp_output_segment_busy+0x38>)
 800d8b6:	4809      	ldr	r0, [pc, #36]	; (800d8dc <tcp_output_segment_busy+0x3c>)
 800d8b8:	f005 ffd0 	bl	801385c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	685b      	ldr	r3, [r3, #4]
 800d8c0:	7b9b      	ldrb	r3, [r3, #14]
 800d8c2:	2b01      	cmp	r3, #1
 800d8c4:	d001      	beq.n	800d8ca <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800d8c6:	2301      	movs	r3, #1
 800d8c8:	e000      	b.n	800d8cc <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800d8ca:	2300      	movs	r3, #0
}
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	3708      	adds	r7, #8
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}
 800d8d4:	08015f00 	.word	0x08015f00
 800d8d8:	0801649c 	.word	0x0801649c
 800d8dc:	08015f54 	.word	0x08015f54

0800d8e0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800d8e0:	b5b0      	push	{r4, r5, r7, lr}
 800d8e2:	b08c      	sub	sp, #48	; 0x30
 800d8e4:	af04      	add	r7, sp, #16
 800d8e6:	60f8      	str	r0, [r7, #12]
 800d8e8:	60b9      	str	r1, [r7, #8]
 800d8ea:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d106      	bne.n	800d900 <tcp_output_segment+0x20>
 800d8f2:	4b63      	ldr	r3, [pc, #396]	; (800da80 <tcp_output_segment+0x1a0>)
 800d8f4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800d8f8:	4962      	ldr	r1, [pc, #392]	; (800da84 <tcp_output_segment+0x1a4>)
 800d8fa:	4863      	ldr	r0, [pc, #396]	; (800da88 <tcp_output_segment+0x1a8>)
 800d8fc:	f005 ffae 	bl	801385c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800d900:	68bb      	ldr	r3, [r7, #8]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d106      	bne.n	800d914 <tcp_output_segment+0x34>
 800d906:	4b5e      	ldr	r3, [pc, #376]	; (800da80 <tcp_output_segment+0x1a0>)
 800d908:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800d90c:	495f      	ldr	r1, [pc, #380]	; (800da8c <tcp_output_segment+0x1ac>)
 800d90e:	485e      	ldr	r0, [pc, #376]	; (800da88 <tcp_output_segment+0x1a8>)
 800d910:	f005 ffa4 	bl	801385c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d106      	bne.n	800d928 <tcp_output_segment+0x48>
 800d91a:	4b59      	ldr	r3, [pc, #356]	; (800da80 <tcp_output_segment+0x1a0>)
 800d91c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800d920:	495b      	ldr	r1, [pc, #364]	; (800da90 <tcp_output_segment+0x1b0>)
 800d922:	4859      	ldr	r0, [pc, #356]	; (800da88 <tcp_output_segment+0x1a8>)
 800d924:	f005 ff9a 	bl	801385c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800d928:	68f8      	ldr	r0, [r7, #12]
 800d92a:	f7ff ffb9 	bl	800d8a0 <tcp_output_segment_busy>
 800d92e:	4603      	mov	r3, r0
 800d930:	2b00      	cmp	r3, #0
 800d932:	d001      	beq.n	800d938 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800d934:	2300      	movs	r3, #0
 800d936:	e09f      	b.n	800da78 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d938:	68bb      	ldr	r3, [r7, #8]
 800d93a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	68dc      	ldr	r4, [r3, #12]
 800d940:	4610      	mov	r0, r2
 800d942:	f7f9 fd8a 	bl	800745a <lwip_htonl>
 800d946:	4603      	mov	r3, r0
 800d948:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d94a:	68bb      	ldr	r3, [r7, #8]
 800d94c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	68dc      	ldr	r4, [r3, #12]
 800d952:	4610      	mov	r0, r2
 800d954:	f7f9 fd6c 	bl	8007430 <lwip_htons>
 800d958:	4603      	mov	r3, r0
 800d95a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d95c:	68bb      	ldr	r3, [r7, #8]
 800d95e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d960:	68ba      	ldr	r2, [r7, #8]
 800d962:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d964:	441a      	add	r2, r3
 800d966:	68bb      	ldr	r3, [r7, #8]
 800d968:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	68db      	ldr	r3, [r3, #12]
 800d96e:	3314      	adds	r3, #20
 800d970:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	7a9b      	ldrb	r3, [r3, #10]
 800d976:	f003 0301 	and.w	r3, r3, #1
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d015      	beq.n	800d9aa <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800d97e:	68bb      	ldr	r3, [r7, #8]
 800d980:	3304      	adds	r3, #4
 800d982:	461a      	mov	r2, r3
 800d984:	6879      	ldr	r1, [r7, #4]
 800d986:	f44f 7006 	mov.w	r0, #536	; 0x218
 800d98a:	f7fc fe8f 	bl	800a6ac <tcp_eff_send_mss_netif>
 800d98e:	4603      	mov	r3, r0
 800d990:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d992:	8b7b      	ldrh	r3, [r7, #26]
 800d994:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800d998:	4618      	mov	r0, r3
 800d99a:	f7f9 fd5e 	bl	800745a <lwip_htonl>
 800d99e:	4602      	mov	r2, r0
 800d9a0:	69fb      	ldr	r3, [r7, #28]
 800d9a2:	601a      	str	r2, [r3, #0]
    opts += 1;
 800d9a4:	69fb      	ldr	r3, [r7, #28]
 800d9a6:	3304      	adds	r3, #4
 800d9a8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800d9aa:	68bb      	ldr	r3, [r7, #8]
 800d9ac:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	da02      	bge.n	800d9ba <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800d9b4:	68bb      	ldr	r3, [r7, #8]
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800d9ba:	68bb      	ldr	r3, [r7, #8]
 800d9bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d10c      	bne.n	800d9dc <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800d9c2:	4b34      	ldr	r3, [pc, #208]	; (800da94 <tcp_output_segment+0x1b4>)
 800d9c4:	681a      	ldr	r2, [r3, #0]
 800d9c6:	68bb      	ldr	r3, [r7, #8]
 800d9c8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	68db      	ldr	r3, [r3, #12]
 800d9ce:	685b      	ldr	r3, [r3, #4]
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f7f9 fd42 	bl	800745a <lwip_htonl>
 800d9d6:	4602      	mov	r2, r0
 800d9d8:	68bb      	ldr	r3, [r7, #8]
 800d9da:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	68da      	ldr	r2, [r3, #12]
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	685b      	ldr	r3, [r3, #4]
 800d9e4:	685b      	ldr	r3, [r3, #4]
 800d9e6:	1ad3      	subs	r3, r2, r3
 800d9e8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	685b      	ldr	r3, [r3, #4]
 800d9ee:	8959      	ldrh	r1, [r3, #10]
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	685b      	ldr	r3, [r3, #4]
 800d9f4:	8b3a      	ldrh	r2, [r7, #24]
 800d9f6:	1a8a      	subs	r2, r1, r2
 800d9f8:	b292      	uxth	r2, r2
 800d9fa:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	685b      	ldr	r3, [r3, #4]
 800da00:	8919      	ldrh	r1, [r3, #8]
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	685b      	ldr	r3, [r3, #4]
 800da06:	8b3a      	ldrh	r2, [r7, #24]
 800da08:	1a8a      	subs	r2, r1, r2
 800da0a:	b292      	uxth	r2, r2
 800da0c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	685b      	ldr	r3, [r3, #4]
 800da12:	68fa      	ldr	r2, [r7, #12]
 800da14:	68d2      	ldr	r2, [r2, #12]
 800da16:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	68db      	ldr	r3, [r3, #12]
 800da1c:	2200      	movs	r2, #0
 800da1e:	741a      	strb	r2, [r3, #16]
 800da20:	2200      	movs	r2, #0
 800da22:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	68db      	ldr	r3, [r3, #12]
 800da28:	f103 0214 	add.w	r2, r3, #20
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	7a9b      	ldrb	r3, [r3, #10]
 800da30:	009b      	lsls	r3, r3, #2
 800da32:	f003 0304 	and.w	r3, r3, #4
 800da36:	4413      	add	r3, r2
 800da38:	69fa      	ldr	r2, [r7, #28]
 800da3a:	429a      	cmp	r2, r3
 800da3c:	d006      	beq.n	800da4c <tcp_output_segment+0x16c>
 800da3e:	4b10      	ldr	r3, [pc, #64]	; (800da80 <tcp_output_segment+0x1a0>)
 800da40:	f240 621c 	movw	r2, #1564	; 0x61c
 800da44:	4914      	ldr	r1, [pc, #80]	; (800da98 <tcp_output_segment+0x1b8>)
 800da46:	4810      	ldr	r0, [pc, #64]	; (800da88 <tcp_output_segment+0x1a8>)
 800da48:	f005 ff08 	bl	801385c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	6858      	ldr	r0, [r3, #4]
 800da50:	68b9      	ldr	r1, [r7, #8]
 800da52:	68bb      	ldr	r3, [r7, #8]
 800da54:	1d1c      	adds	r4, r3, #4
 800da56:	68bb      	ldr	r3, [r7, #8]
 800da58:	7add      	ldrb	r5, [r3, #11]
 800da5a:	68bb      	ldr	r3, [r7, #8]
 800da5c:	7a9b      	ldrb	r3, [r3, #10]
 800da5e:	687a      	ldr	r2, [r7, #4]
 800da60:	9202      	str	r2, [sp, #8]
 800da62:	2206      	movs	r2, #6
 800da64:	9201      	str	r2, [sp, #4]
 800da66:	9300      	str	r3, [sp, #0]
 800da68:	462b      	mov	r3, r5
 800da6a:	4622      	mov	r2, r4
 800da6c:	f004 fc1c 	bl	80122a8 <ip4_output_if>
 800da70:	4603      	mov	r3, r0
 800da72:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800da74:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800da78:	4618      	mov	r0, r3
 800da7a:	3720      	adds	r7, #32
 800da7c:	46bd      	mov	sp, r7
 800da7e:	bdb0      	pop	{r4, r5, r7, pc}
 800da80:	08015f00 	.word	0x08015f00
 800da84:	080164c4 	.word	0x080164c4
 800da88:	08015f54 	.word	0x08015f54
 800da8c:	080164e4 	.word	0x080164e4
 800da90:	08016504 	.word	0x08016504
 800da94:	2000ef5c 	.word	0x2000ef5c
 800da98:	08016528 	.word	0x08016528

0800da9c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800da9c:	b5b0      	push	{r4, r5, r7, lr}
 800da9e:	b084      	sub	sp, #16
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d106      	bne.n	800dab8 <tcp_rexmit_rto_prepare+0x1c>
 800daaa:	4b31      	ldr	r3, [pc, #196]	; (800db70 <tcp_rexmit_rto_prepare+0xd4>)
 800daac:	f240 6263 	movw	r2, #1635	; 0x663
 800dab0:	4930      	ldr	r1, [pc, #192]	; (800db74 <tcp_rexmit_rto_prepare+0xd8>)
 800dab2:	4831      	ldr	r0, [pc, #196]	; (800db78 <tcp_rexmit_rto_prepare+0xdc>)
 800dab4:	f005 fed2 	bl	801385c <iprintf>

  if (pcb->unacked == NULL) {
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d102      	bne.n	800dac6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800dac0:	f06f 0305 	mvn.w	r3, #5
 800dac4:	e050      	b.n	800db68 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800daca:	60fb      	str	r3, [r7, #12]
 800dacc:	e00b      	b.n	800dae6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800dace:	68f8      	ldr	r0, [r7, #12]
 800dad0:	f7ff fee6 	bl	800d8a0 <tcp_output_segment_busy>
 800dad4:	4603      	mov	r3, r0
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d002      	beq.n	800dae0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800dada:	f06f 0305 	mvn.w	r3, #5
 800dade:	e043      	b.n	800db68 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	60fb      	str	r3, [r7, #12]
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d1ef      	bne.n	800dace <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800daee:	68f8      	ldr	r0, [r7, #12]
 800daf0:	f7ff fed6 	bl	800d8a0 <tcp_output_segment_busy>
 800daf4:	4603      	mov	r3, r0
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d002      	beq.n	800db00 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800dafa:	f06f 0305 	mvn.w	r3, #5
 800dafe:	e033      	b.n	800db68 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	2200      	movs	r2, #0
 800db14:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	8b5b      	ldrh	r3, [r3, #26]
 800db1a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800db1e:	b29a      	uxth	r2, r3
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	68db      	ldr	r3, [r3, #12]
 800db28:	685b      	ldr	r3, [r3, #4]
 800db2a:	4618      	mov	r0, r3
 800db2c:	f7f9 fc95 	bl	800745a <lwip_htonl>
 800db30:	4604      	mov	r4, r0
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	891b      	ldrh	r3, [r3, #8]
 800db36:	461d      	mov	r5, r3
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	68db      	ldr	r3, [r3, #12]
 800db3c:	899b      	ldrh	r3, [r3, #12]
 800db3e:	b29b      	uxth	r3, r3
 800db40:	4618      	mov	r0, r3
 800db42:	f7f9 fc75 	bl	8007430 <lwip_htons>
 800db46:	4603      	mov	r3, r0
 800db48:	b2db      	uxtb	r3, r3
 800db4a:	f003 0303 	and.w	r3, r3, #3
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d001      	beq.n	800db56 <tcp_rexmit_rto_prepare+0xba>
 800db52:	2301      	movs	r3, #1
 800db54:	e000      	b.n	800db58 <tcp_rexmit_rto_prepare+0xbc>
 800db56:	2300      	movs	r3, #0
 800db58:	442b      	add	r3, r5
 800db5a:	18e2      	adds	r2, r4, r3
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2200      	movs	r2, #0
 800db64:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800db66:	2300      	movs	r3, #0
}
 800db68:	4618      	mov	r0, r3
 800db6a:	3710      	adds	r7, #16
 800db6c:	46bd      	mov	sp, r7
 800db6e:	bdb0      	pop	{r4, r5, r7, pc}
 800db70:	08015f00 	.word	0x08015f00
 800db74:	0801653c 	.word	0x0801653c
 800db78:	08015f54 	.word	0x08015f54

0800db7c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b082      	sub	sp, #8
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d106      	bne.n	800db98 <tcp_rexmit_rto_commit+0x1c>
 800db8a:	4b0d      	ldr	r3, [pc, #52]	; (800dbc0 <tcp_rexmit_rto_commit+0x44>)
 800db8c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800db90:	490c      	ldr	r1, [pc, #48]	; (800dbc4 <tcp_rexmit_rto_commit+0x48>)
 800db92:	480d      	ldr	r0, [pc, #52]	; (800dbc8 <tcp_rexmit_rto_commit+0x4c>)
 800db94:	f005 fe62 	bl	801385c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800db9e:	2bff      	cmp	r3, #255	; 0xff
 800dba0:	d007      	beq.n	800dbb2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dba8:	3301      	adds	r3, #1
 800dbaa:	b2da      	uxtb	r2, r3
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800dbb2:	6878      	ldr	r0, [r7, #4]
 800dbb4:	f7ff fc80 	bl	800d4b8 <tcp_output>
}
 800dbb8:	bf00      	nop
 800dbba:	3708      	adds	r7, #8
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	bd80      	pop	{r7, pc}
 800dbc0:	08015f00 	.word	0x08015f00
 800dbc4:	08016560 	.word	0x08016560
 800dbc8:	08015f54 	.word	0x08015f54

0800dbcc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b082      	sub	sp, #8
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d106      	bne.n	800dbe8 <tcp_rexmit_rto+0x1c>
 800dbda:	4b0a      	ldr	r3, [pc, #40]	; (800dc04 <tcp_rexmit_rto+0x38>)
 800dbdc:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800dbe0:	4909      	ldr	r1, [pc, #36]	; (800dc08 <tcp_rexmit_rto+0x3c>)
 800dbe2:	480a      	ldr	r0, [pc, #40]	; (800dc0c <tcp_rexmit_rto+0x40>)
 800dbe4:	f005 fe3a 	bl	801385c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	f7ff ff57 	bl	800da9c <tcp_rexmit_rto_prepare>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d102      	bne.n	800dbfa <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800dbf4:	6878      	ldr	r0, [r7, #4]
 800dbf6:	f7ff ffc1 	bl	800db7c <tcp_rexmit_rto_commit>
  }
}
 800dbfa:	bf00      	nop
 800dbfc:	3708      	adds	r7, #8
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bd80      	pop	{r7, pc}
 800dc02:	bf00      	nop
 800dc04:	08015f00 	.word	0x08015f00
 800dc08:	08016584 	.word	0x08016584
 800dc0c:	08015f54 	.word	0x08015f54

0800dc10 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800dc10:	b590      	push	{r4, r7, lr}
 800dc12:	b085      	sub	sp, #20
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d106      	bne.n	800dc2c <tcp_rexmit+0x1c>
 800dc1e:	4b2f      	ldr	r3, [pc, #188]	; (800dcdc <tcp_rexmit+0xcc>)
 800dc20:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800dc24:	492e      	ldr	r1, [pc, #184]	; (800dce0 <tcp_rexmit+0xd0>)
 800dc26:	482f      	ldr	r0, [pc, #188]	; (800dce4 <tcp_rexmit+0xd4>)
 800dc28:	f005 fe18 	bl	801385c <iprintf>

  if (pcb->unacked == NULL) {
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d102      	bne.n	800dc3a <tcp_rexmit+0x2a>
    return ERR_VAL;
 800dc34:	f06f 0305 	mvn.w	r3, #5
 800dc38:	e04c      	b.n	800dcd4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc3e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800dc40:	68b8      	ldr	r0, [r7, #8]
 800dc42:	f7ff fe2d 	bl	800d8a0 <tcp_output_segment_busy>
 800dc46:	4603      	mov	r3, r0
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d002      	beq.n	800dc52 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800dc4c:	f06f 0305 	mvn.w	r3, #5
 800dc50:	e040      	b.n	800dcd4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800dc52:	68bb      	ldr	r3, [r7, #8]
 800dc54:	681a      	ldr	r2, [r3, #0]
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	336c      	adds	r3, #108	; 0x6c
 800dc5e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800dc60:	e002      	b.n	800dc68 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d011      	beq.n	800dc94 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	68db      	ldr	r3, [r3, #12]
 800dc76:	685b      	ldr	r3, [r3, #4]
 800dc78:	4618      	mov	r0, r3
 800dc7a:	f7f9 fbee 	bl	800745a <lwip_htonl>
 800dc7e:	4604      	mov	r4, r0
 800dc80:	68bb      	ldr	r3, [r7, #8]
 800dc82:	68db      	ldr	r3, [r3, #12]
 800dc84:	685b      	ldr	r3, [r3, #4]
 800dc86:	4618      	mov	r0, r3
 800dc88:	f7f9 fbe7 	bl	800745a <lwip_htonl>
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	dbe6      	blt.n	800dc62 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	681a      	ldr	r2, [r3, #0]
 800dc98:	68bb      	ldr	r3, [r7, #8]
 800dc9a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	68ba      	ldr	r2, [r7, #8]
 800dca0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800dca2:	68bb      	ldr	r3, [r7, #8]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d103      	bne.n	800dcb2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	2200      	movs	r2, #0
 800dcae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dcb8:	2bff      	cmp	r3, #255	; 0xff
 800dcba:	d007      	beq.n	800dccc <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dcc2:	3301      	adds	r3, #1
 800dcc4:	b2da      	uxtb	r2, r3
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2200      	movs	r2, #0
 800dcd0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800dcd2:	2300      	movs	r3, #0
}
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	3714      	adds	r7, #20
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	bd90      	pop	{r4, r7, pc}
 800dcdc:	08015f00 	.word	0x08015f00
 800dce0:	080165a0 	.word	0x080165a0
 800dce4:	08015f54 	.word	0x08015f54

0800dce8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b082      	sub	sp, #8
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d106      	bne.n	800dd04 <tcp_rexmit_fast+0x1c>
 800dcf6:	4b2a      	ldr	r3, [pc, #168]	; (800dda0 <tcp_rexmit_fast+0xb8>)
 800dcf8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800dcfc:	4929      	ldr	r1, [pc, #164]	; (800dda4 <tcp_rexmit_fast+0xbc>)
 800dcfe:	482a      	ldr	r0, [pc, #168]	; (800dda8 <tcp_rexmit_fast+0xc0>)
 800dd00:	f005 fdac 	bl	801385c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d044      	beq.n	800dd96 <tcp_rexmit_fast+0xae>
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	8b5b      	ldrh	r3, [r3, #26]
 800dd10:	f003 0304 	and.w	r3, r3, #4
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d13e      	bne.n	800dd96 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	f7ff ff79 	bl	800dc10 <tcp_rexmit>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d138      	bne.n	800dd96 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dd30:	4293      	cmp	r3, r2
 800dd32:	bf28      	it	cs
 800dd34:	4613      	movcs	r3, r2
 800dd36:	b29b      	uxth	r3, r3
 800dd38:	0fda      	lsrs	r2, r3, #31
 800dd3a:	4413      	add	r3, r2
 800dd3c:	105b      	asrs	r3, r3, #1
 800dd3e:	b29a      	uxth	r2, r3
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800dd4c:	461a      	mov	r2, r3
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd52:	005b      	lsls	r3, r3, #1
 800dd54:	429a      	cmp	r2, r3
 800dd56:	d206      	bcs.n	800dd66 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd5c:	005b      	lsls	r3, r3, #1
 800dd5e:	b29a      	uxth	r2, r3
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd70:	4619      	mov	r1, r3
 800dd72:	0049      	lsls	r1, r1, #1
 800dd74:	440b      	add	r3, r1
 800dd76:	b29b      	uxth	r3, r3
 800dd78:	4413      	add	r3, r2
 800dd7a:	b29a      	uxth	r2, r3
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	8b5b      	ldrh	r3, [r3, #26]
 800dd86:	f043 0304 	orr.w	r3, r3, #4
 800dd8a:	b29a      	uxth	r2, r3
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	2200      	movs	r2, #0
 800dd94:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800dd96:	bf00      	nop
 800dd98:	3708      	adds	r7, #8
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	bd80      	pop	{r7, pc}
 800dd9e:	bf00      	nop
 800dda0:	08015f00 	.word	0x08015f00
 800dda4:	080165b8 	.word	0x080165b8
 800dda8:	08015f54 	.word	0x08015f54

0800ddac <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b086      	sub	sp, #24
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	60f8      	str	r0, [r7, #12]
 800ddb4:	607b      	str	r3, [r7, #4]
 800ddb6:	460b      	mov	r3, r1
 800ddb8:	817b      	strh	r3, [r7, #10]
 800ddba:	4613      	mov	r3, r2
 800ddbc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ddbe:	897a      	ldrh	r2, [r7, #10]
 800ddc0:	893b      	ldrh	r3, [r7, #8]
 800ddc2:	4413      	add	r3, r2
 800ddc4:	b29b      	uxth	r3, r3
 800ddc6:	3314      	adds	r3, #20
 800ddc8:	b29b      	uxth	r3, r3
 800ddca:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ddce:	4619      	mov	r1, r3
 800ddd0:	2022      	movs	r0, #34	; 0x22
 800ddd2:	f7fa fc01 	bl	80085d8 <pbuf_alloc>
 800ddd6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800ddd8:	697b      	ldr	r3, [r7, #20]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d04d      	beq.n	800de7a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800ddde:	897b      	ldrh	r3, [r7, #10]
 800dde0:	3313      	adds	r3, #19
 800dde2:	697a      	ldr	r2, [r7, #20]
 800dde4:	8952      	ldrh	r2, [r2, #10]
 800dde6:	4293      	cmp	r3, r2
 800dde8:	db06      	blt.n	800ddf8 <tcp_output_alloc_header_common+0x4c>
 800ddea:	4b26      	ldr	r3, [pc, #152]	; (800de84 <tcp_output_alloc_header_common+0xd8>)
 800ddec:	f240 7223 	movw	r2, #1827	; 0x723
 800ddf0:	4925      	ldr	r1, [pc, #148]	; (800de88 <tcp_output_alloc_header_common+0xdc>)
 800ddf2:	4826      	ldr	r0, [pc, #152]	; (800de8c <tcp_output_alloc_header_common+0xe0>)
 800ddf4:	f005 fd32 	bl	801385c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800ddf8:	697b      	ldr	r3, [r7, #20]
 800ddfa:	685b      	ldr	r3, [r3, #4]
 800ddfc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800ddfe:	8c3b      	ldrh	r3, [r7, #32]
 800de00:	4618      	mov	r0, r3
 800de02:	f7f9 fb15 	bl	8007430 <lwip_htons>
 800de06:	4603      	mov	r3, r0
 800de08:	461a      	mov	r2, r3
 800de0a:	693b      	ldr	r3, [r7, #16]
 800de0c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800de0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de10:	4618      	mov	r0, r3
 800de12:	f7f9 fb0d 	bl	8007430 <lwip_htons>
 800de16:	4603      	mov	r3, r0
 800de18:	461a      	mov	r2, r3
 800de1a:	693b      	ldr	r3, [r7, #16]
 800de1c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800de1e:	693b      	ldr	r3, [r7, #16]
 800de20:	687a      	ldr	r2, [r7, #4]
 800de22:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800de24:	68f8      	ldr	r0, [r7, #12]
 800de26:	f7f9 fb18 	bl	800745a <lwip_htonl>
 800de2a:	4602      	mov	r2, r0
 800de2c:	693b      	ldr	r3, [r7, #16]
 800de2e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800de30:	897b      	ldrh	r3, [r7, #10]
 800de32:	089b      	lsrs	r3, r3, #2
 800de34:	b29b      	uxth	r3, r3
 800de36:	3305      	adds	r3, #5
 800de38:	b29b      	uxth	r3, r3
 800de3a:	031b      	lsls	r3, r3, #12
 800de3c:	b29a      	uxth	r2, r3
 800de3e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800de42:	b29b      	uxth	r3, r3
 800de44:	4313      	orrs	r3, r2
 800de46:	b29b      	uxth	r3, r3
 800de48:	4618      	mov	r0, r3
 800de4a:	f7f9 faf1 	bl	8007430 <lwip_htons>
 800de4e:	4603      	mov	r3, r0
 800de50:	461a      	mov	r2, r3
 800de52:	693b      	ldr	r3, [r7, #16]
 800de54:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800de56:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800de58:	4618      	mov	r0, r3
 800de5a:	f7f9 fae9 	bl	8007430 <lwip_htons>
 800de5e:	4603      	mov	r3, r0
 800de60:	461a      	mov	r2, r3
 800de62:	693b      	ldr	r3, [r7, #16]
 800de64:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800de66:	693b      	ldr	r3, [r7, #16]
 800de68:	2200      	movs	r2, #0
 800de6a:	741a      	strb	r2, [r3, #16]
 800de6c:	2200      	movs	r2, #0
 800de6e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800de70:	693b      	ldr	r3, [r7, #16]
 800de72:	2200      	movs	r2, #0
 800de74:	749a      	strb	r2, [r3, #18]
 800de76:	2200      	movs	r2, #0
 800de78:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800de7a:	697b      	ldr	r3, [r7, #20]
}
 800de7c:	4618      	mov	r0, r3
 800de7e:	3718      	adds	r7, #24
 800de80:	46bd      	mov	sp, r7
 800de82:	bd80      	pop	{r7, pc}
 800de84:	08015f00 	.word	0x08015f00
 800de88:	080165d8 	.word	0x080165d8
 800de8c:	08015f54 	.word	0x08015f54

0800de90 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800de90:	b5b0      	push	{r4, r5, r7, lr}
 800de92:	b08a      	sub	sp, #40	; 0x28
 800de94:	af04      	add	r7, sp, #16
 800de96:	60f8      	str	r0, [r7, #12]
 800de98:	607b      	str	r3, [r7, #4]
 800de9a:	460b      	mov	r3, r1
 800de9c:	817b      	strh	r3, [r7, #10]
 800de9e:	4613      	mov	r3, r2
 800dea0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d106      	bne.n	800deb6 <tcp_output_alloc_header+0x26>
 800dea8:	4b15      	ldr	r3, [pc, #84]	; (800df00 <tcp_output_alloc_header+0x70>)
 800deaa:	f240 7242 	movw	r2, #1858	; 0x742
 800deae:	4915      	ldr	r1, [pc, #84]	; (800df04 <tcp_output_alloc_header+0x74>)
 800deb0:	4815      	ldr	r0, [pc, #84]	; (800df08 <tcp_output_alloc_header+0x78>)
 800deb2:	f005 fcd3 	bl	801385c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	8adb      	ldrh	r3, [r3, #22]
 800debe:	68fa      	ldr	r2, [r7, #12]
 800dec0:	8b12      	ldrh	r2, [r2, #24]
 800dec2:	68f9      	ldr	r1, [r7, #12]
 800dec4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800dec6:	893d      	ldrh	r5, [r7, #8]
 800dec8:	897c      	ldrh	r4, [r7, #10]
 800deca:	9103      	str	r1, [sp, #12]
 800decc:	2110      	movs	r1, #16
 800dece:	9102      	str	r1, [sp, #8]
 800ded0:	9201      	str	r2, [sp, #4]
 800ded2:	9300      	str	r3, [sp, #0]
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	462a      	mov	r2, r5
 800ded8:	4621      	mov	r1, r4
 800deda:	f7ff ff67 	bl	800ddac <tcp_output_alloc_header_common>
 800dede:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800dee0:	697b      	ldr	r3, [r7, #20]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d006      	beq.n	800def4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deea:	68fa      	ldr	r2, [r7, #12]
 800deec:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800deee:	441a      	add	r2, r3
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800def4:	697b      	ldr	r3, [r7, #20]
}
 800def6:	4618      	mov	r0, r3
 800def8:	3718      	adds	r7, #24
 800defa:	46bd      	mov	sp, r7
 800defc:	bdb0      	pop	{r4, r5, r7, pc}
 800defe:	bf00      	nop
 800df00:	08015f00 	.word	0x08015f00
 800df04:	08016608 	.word	0x08016608
 800df08:	08015f54 	.word	0x08015f54

0800df0c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b088      	sub	sp, #32
 800df10:	af00      	add	r7, sp, #0
 800df12:	60f8      	str	r0, [r7, #12]
 800df14:	60b9      	str	r1, [r7, #8]
 800df16:	4611      	mov	r1, r2
 800df18:	461a      	mov	r2, r3
 800df1a:	460b      	mov	r3, r1
 800df1c:	71fb      	strb	r3, [r7, #7]
 800df1e:	4613      	mov	r3, r2
 800df20:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800df22:	2300      	movs	r3, #0
 800df24:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800df26:	68bb      	ldr	r3, [r7, #8]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d106      	bne.n	800df3a <tcp_output_fill_options+0x2e>
 800df2c:	4b13      	ldr	r3, [pc, #76]	; (800df7c <tcp_output_fill_options+0x70>)
 800df2e:	f240 7256 	movw	r2, #1878	; 0x756
 800df32:	4913      	ldr	r1, [pc, #76]	; (800df80 <tcp_output_fill_options+0x74>)
 800df34:	4813      	ldr	r0, [pc, #76]	; (800df84 <tcp_output_fill_options+0x78>)
 800df36:	f005 fc91 	bl	801385c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800df3a:	68bb      	ldr	r3, [r7, #8]
 800df3c:	685b      	ldr	r3, [r3, #4]
 800df3e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800df40:	69bb      	ldr	r3, [r7, #24]
 800df42:	3314      	adds	r3, #20
 800df44:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800df46:	69bb      	ldr	r3, [r7, #24]
 800df48:	f103 0214 	add.w	r2, r3, #20
 800df4c:	8bfb      	ldrh	r3, [r7, #30]
 800df4e:	009b      	lsls	r3, r3, #2
 800df50:	4619      	mov	r1, r3
 800df52:	79fb      	ldrb	r3, [r7, #7]
 800df54:	009b      	lsls	r3, r3, #2
 800df56:	f003 0304 	and.w	r3, r3, #4
 800df5a:	440b      	add	r3, r1
 800df5c:	4413      	add	r3, r2
 800df5e:	697a      	ldr	r2, [r7, #20]
 800df60:	429a      	cmp	r2, r3
 800df62:	d006      	beq.n	800df72 <tcp_output_fill_options+0x66>
 800df64:	4b05      	ldr	r3, [pc, #20]	; (800df7c <tcp_output_fill_options+0x70>)
 800df66:	f240 7275 	movw	r2, #1909	; 0x775
 800df6a:	4907      	ldr	r1, [pc, #28]	; (800df88 <tcp_output_fill_options+0x7c>)
 800df6c:	4805      	ldr	r0, [pc, #20]	; (800df84 <tcp_output_fill_options+0x78>)
 800df6e:	f005 fc75 	bl	801385c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800df72:	bf00      	nop
 800df74:	3720      	adds	r7, #32
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}
 800df7a:	bf00      	nop
 800df7c:	08015f00 	.word	0x08015f00
 800df80:	08016630 	.word	0x08016630
 800df84:	08015f54 	.word	0x08015f54
 800df88:	08016528 	.word	0x08016528

0800df8c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b08a      	sub	sp, #40	; 0x28
 800df90:	af04      	add	r7, sp, #16
 800df92:	60f8      	str	r0, [r7, #12]
 800df94:	60b9      	str	r1, [r7, #8]
 800df96:	607a      	str	r2, [r7, #4]
 800df98:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800df9a:	68bb      	ldr	r3, [r7, #8]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d106      	bne.n	800dfae <tcp_output_control_segment+0x22>
 800dfa0:	4b1c      	ldr	r3, [pc, #112]	; (800e014 <tcp_output_control_segment+0x88>)
 800dfa2:	f240 7287 	movw	r2, #1927	; 0x787
 800dfa6:	491c      	ldr	r1, [pc, #112]	; (800e018 <tcp_output_control_segment+0x8c>)
 800dfa8:	481c      	ldr	r0, [pc, #112]	; (800e01c <tcp_output_control_segment+0x90>)
 800dfaa:	f005 fc57 	bl	801385c <iprintf>

  netif = tcp_route(pcb, src, dst);
 800dfae:	683a      	ldr	r2, [r7, #0]
 800dfb0:	6879      	ldr	r1, [r7, #4]
 800dfb2:	68f8      	ldr	r0, [r7, #12]
 800dfb4:	f7fe ff40 	bl	800ce38 <tcp_route>
 800dfb8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800dfba:	693b      	ldr	r3, [r7, #16]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d102      	bne.n	800dfc6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800dfc0:	23fc      	movs	r3, #252	; 0xfc
 800dfc2:	75fb      	strb	r3, [r7, #23]
 800dfc4:	e01c      	b.n	800e000 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d006      	beq.n	800dfda <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	7adb      	ldrb	r3, [r3, #11]
 800dfd0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	7a9b      	ldrb	r3, [r3, #10]
 800dfd6:	757b      	strb	r3, [r7, #21]
 800dfd8:	e003      	b.n	800dfe2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800dfda:	23ff      	movs	r3, #255	; 0xff
 800dfdc:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800dfde:	2300      	movs	r3, #0
 800dfe0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800dfe2:	7dba      	ldrb	r2, [r7, #22]
 800dfe4:	693b      	ldr	r3, [r7, #16]
 800dfe6:	9302      	str	r3, [sp, #8]
 800dfe8:	2306      	movs	r3, #6
 800dfea:	9301      	str	r3, [sp, #4]
 800dfec:	7d7b      	ldrb	r3, [r7, #21]
 800dfee:	9300      	str	r3, [sp, #0]
 800dff0:	4613      	mov	r3, r2
 800dff2:	683a      	ldr	r2, [r7, #0]
 800dff4:	6879      	ldr	r1, [r7, #4]
 800dff6:	68b8      	ldr	r0, [r7, #8]
 800dff8:	f004 f956 	bl	80122a8 <ip4_output_if>
 800dffc:	4603      	mov	r3, r0
 800dffe:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800e000:	68b8      	ldr	r0, [r7, #8]
 800e002:	f7fa fdcd 	bl	8008ba0 <pbuf_free>
  return err;
 800e006:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e00a:	4618      	mov	r0, r3
 800e00c:	3718      	adds	r7, #24
 800e00e:	46bd      	mov	sp, r7
 800e010:	bd80      	pop	{r7, pc}
 800e012:	bf00      	nop
 800e014:	08015f00 	.word	0x08015f00
 800e018:	08016658 	.word	0x08016658
 800e01c:	08015f54 	.word	0x08015f54

0800e020 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800e020:	b590      	push	{r4, r7, lr}
 800e022:	b08b      	sub	sp, #44	; 0x2c
 800e024:	af04      	add	r7, sp, #16
 800e026:	60f8      	str	r0, [r7, #12]
 800e028:	60b9      	str	r1, [r7, #8]
 800e02a:	607a      	str	r2, [r7, #4]
 800e02c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800e02e:	683b      	ldr	r3, [r7, #0]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d106      	bne.n	800e042 <tcp_rst+0x22>
 800e034:	4b1f      	ldr	r3, [pc, #124]	; (800e0b4 <tcp_rst+0x94>)
 800e036:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800e03a:	491f      	ldr	r1, [pc, #124]	; (800e0b8 <tcp_rst+0x98>)
 800e03c:	481f      	ldr	r0, [pc, #124]	; (800e0bc <tcp_rst+0x9c>)
 800e03e:	f005 fc0d 	bl	801385c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800e042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e044:	2b00      	cmp	r3, #0
 800e046:	d106      	bne.n	800e056 <tcp_rst+0x36>
 800e048:	4b1a      	ldr	r3, [pc, #104]	; (800e0b4 <tcp_rst+0x94>)
 800e04a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800e04e:	491c      	ldr	r1, [pc, #112]	; (800e0c0 <tcp_rst+0xa0>)
 800e050:	481a      	ldr	r0, [pc, #104]	; (800e0bc <tcp_rst+0x9c>)
 800e052:	f005 fc03 	bl	801385c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e056:	2300      	movs	r3, #0
 800e058:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800e05a:	f246 0308 	movw	r3, #24584	; 0x6008
 800e05e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800e060:	7dfb      	ldrb	r3, [r7, #23]
 800e062:	b29c      	uxth	r4, r3
 800e064:	68b8      	ldr	r0, [r7, #8]
 800e066:	f7f9 f9f8 	bl	800745a <lwip_htonl>
 800e06a:	4602      	mov	r2, r0
 800e06c:	8abb      	ldrh	r3, [r7, #20]
 800e06e:	9303      	str	r3, [sp, #12]
 800e070:	2314      	movs	r3, #20
 800e072:	9302      	str	r3, [sp, #8]
 800e074:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800e076:	9301      	str	r3, [sp, #4]
 800e078:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e07a:	9300      	str	r3, [sp, #0]
 800e07c:	4613      	mov	r3, r2
 800e07e:	2200      	movs	r2, #0
 800e080:	4621      	mov	r1, r4
 800e082:	6878      	ldr	r0, [r7, #4]
 800e084:	f7ff fe92 	bl	800ddac <tcp_output_alloc_header_common>
 800e088:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800e08a:	693b      	ldr	r3, [r7, #16]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d00c      	beq.n	800e0aa <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e090:	7dfb      	ldrb	r3, [r7, #23]
 800e092:	2200      	movs	r2, #0
 800e094:	6939      	ldr	r1, [r7, #16]
 800e096:	68f8      	ldr	r0, [r7, #12]
 800e098:	f7ff ff38 	bl	800df0c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800e09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e09e:	683a      	ldr	r2, [r7, #0]
 800e0a0:	6939      	ldr	r1, [r7, #16]
 800e0a2:	68f8      	ldr	r0, [r7, #12]
 800e0a4:	f7ff ff72 	bl	800df8c <tcp_output_control_segment>
 800e0a8:	e000      	b.n	800e0ac <tcp_rst+0x8c>
    return;
 800e0aa:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800e0ac:	371c      	adds	r7, #28
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bd90      	pop	{r4, r7, pc}
 800e0b2:	bf00      	nop
 800e0b4:	08015f00 	.word	0x08015f00
 800e0b8:	08016684 	.word	0x08016684
 800e0bc:	08015f54 	.word	0x08015f54
 800e0c0:	080166a0 	.word	0x080166a0

0800e0c4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800e0c4:	b590      	push	{r4, r7, lr}
 800e0c6:	b087      	sub	sp, #28
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d106      	bne.n	800e0e8 <tcp_send_empty_ack+0x24>
 800e0da:	4b28      	ldr	r3, [pc, #160]	; (800e17c <tcp_send_empty_ack+0xb8>)
 800e0dc:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800e0e0:	4927      	ldr	r1, [pc, #156]	; (800e180 <tcp_send_empty_ack+0xbc>)
 800e0e2:	4828      	ldr	r0, [pc, #160]	; (800e184 <tcp_send_empty_ack+0xc0>)
 800e0e4:	f005 fbba 	bl	801385c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e0e8:	7dfb      	ldrb	r3, [r7, #23]
 800e0ea:	009b      	lsls	r3, r3, #2
 800e0ec:	b2db      	uxtb	r3, r3
 800e0ee:	f003 0304 	and.w	r3, r3, #4
 800e0f2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800e0f4:	7d7b      	ldrb	r3, [r7, #21]
 800e0f6:	b29c      	uxth	r4, r3
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f7f9 f9ac 	bl	800745a <lwip_htonl>
 800e102:	4603      	mov	r3, r0
 800e104:	2200      	movs	r2, #0
 800e106:	4621      	mov	r1, r4
 800e108:	6878      	ldr	r0, [r7, #4]
 800e10a:	f7ff fec1 	bl	800de90 <tcp_output_alloc_header>
 800e10e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e110:	693b      	ldr	r3, [r7, #16]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d109      	bne.n	800e12a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	8b5b      	ldrh	r3, [r3, #26]
 800e11a:	f043 0303 	orr.w	r3, r3, #3
 800e11e:	b29a      	uxth	r2, r3
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800e124:	f06f 0301 	mvn.w	r3, #1
 800e128:	e023      	b.n	800e172 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800e12a:	7dbb      	ldrb	r3, [r7, #22]
 800e12c:	7dfa      	ldrb	r2, [r7, #23]
 800e12e:	6939      	ldr	r1, [r7, #16]
 800e130:	6878      	ldr	r0, [r7, #4]
 800e132:	f7ff feeb 	bl	800df0c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e136:	687a      	ldr	r2, [r7, #4]
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	3304      	adds	r3, #4
 800e13c:	6939      	ldr	r1, [r7, #16]
 800e13e:	6878      	ldr	r0, [r7, #4]
 800e140:	f7ff ff24 	bl	800df8c <tcp_output_control_segment>
 800e144:	4603      	mov	r3, r0
 800e146:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800e148:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d007      	beq.n	800e160 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	8b5b      	ldrh	r3, [r3, #26]
 800e154:	f043 0303 	orr.w	r3, r3, #3
 800e158:	b29a      	uxth	r2, r3
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	835a      	strh	r2, [r3, #26]
 800e15e:	e006      	b.n	800e16e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	8b5b      	ldrh	r3, [r3, #26]
 800e164:	f023 0303 	bic.w	r3, r3, #3
 800e168:	b29a      	uxth	r2, r3
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800e16e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e172:	4618      	mov	r0, r3
 800e174:	371c      	adds	r7, #28
 800e176:	46bd      	mov	sp, r7
 800e178:	bd90      	pop	{r4, r7, pc}
 800e17a:	bf00      	nop
 800e17c:	08015f00 	.word	0x08015f00
 800e180:	080166bc 	.word	0x080166bc
 800e184:	08015f54 	.word	0x08015f54

0800e188 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800e188:	b590      	push	{r4, r7, lr}
 800e18a:	b087      	sub	sp, #28
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e190:	2300      	movs	r3, #0
 800e192:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d106      	bne.n	800e1a8 <tcp_keepalive+0x20>
 800e19a:	4b18      	ldr	r3, [pc, #96]	; (800e1fc <tcp_keepalive+0x74>)
 800e19c:	f640 0224 	movw	r2, #2084	; 0x824
 800e1a0:	4917      	ldr	r1, [pc, #92]	; (800e200 <tcp_keepalive+0x78>)
 800e1a2:	4818      	ldr	r0, [pc, #96]	; (800e204 <tcp_keepalive+0x7c>)
 800e1a4:	f005 fb5a 	bl	801385c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800e1a8:	7dfb      	ldrb	r3, [r7, #23]
 800e1aa:	b29c      	uxth	r4, r3
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1b0:	3b01      	subs	r3, #1
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f7f9 f951 	bl	800745a <lwip_htonl>
 800e1b8:	4603      	mov	r3, r0
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	4621      	mov	r1, r4
 800e1be:	6878      	ldr	r0, [r7, #4]
 800e1c0:	f7ff fe66 	bl	800de90 <tcp_output_alloc_header>
 800e1c4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e1c6:	693b      	ldr	r3, [r7, #16]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d102      	bne.n	800e1d2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800e1cc:	f04f 33ff 	mov.w	r3, #4294967295
 800e1d0:	e010      	b.n	800e1f4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e1d2:	7dfb      	ldrb	r3, [r7, #23]
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	6939      	ldr	r1, [r7, #16]
 800e1d8:	6878      	ldr	r0, [r7, #4]
 800e1da:	f7ff fe97 	bl	800df0c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e1de:	687a      	ldr	r2, [r7, #4]
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	3304      	adds	r3, #4
 800e1e4:	6939      	ldr	r1, [r7, #16]
 800e1e6:	6878      	ldr	r0, [r7, #4]
 800e1e8:	f7ff fed0 	bl	800df8c <tcp_output_control_segment>
 800e1ec:	4603      	mov	r3, r0
 800e1ee:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e1f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	371c      	adds	r7, #28
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	bd90      	pop	{r4, r7, pc}
 800e1fc:	08015f00 	.word	0x08015f00
 800e200:	080166dc 	.word	0x080166dc
 800e204:	08015f54 	.word	0x08015f54

0800e208 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800e208:	b590      	push	{r4, r7, lr}
 800e20a:	b08b      	sub	sp, #44	; 0x2c
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e210:	2300      	movs	r3, #0
 800e212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d106      	bne.n	800e22a <tcp_zero_window_probe+0x22>
 800e21c:	4b4c      	ldr	r3, [pc, #304]	; (800e350 <tcp_zero_window_probe+0x148>)
 800e21e:	f640 024f 	movw	r2, #2127	; 0x84f
 800e222:	494c      	ldr	r1, [pc, #304]	; (800e354 <tcp_zero_window_probe+0x14c>)
 800e224:	484c      	ldr	r0, [pc, #304]	; (800e358 <tcp_zero_window_probe+0x150>)
 800e226:	f005 fb19 	bl	801385c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e22e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800e230:	6a3b      	ldr	r3, [r7, #32]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d101      	bne.n	800e23a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800e236:	2300      	movs	r3, #0
 800e238:	e086      	b.n	800e348 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e240:	2bff      	cmp	r3, #255	; 0xff
 800e242:	d007      	beq.n	800e254 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e24a:	3301      	adds	r3, #1
 800e24c:	b2da      	uxtb	r2, r3
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800e254:	6a3b      	ldr	r3, [r7, #32]
 800e256:	68db      	ldr	r3, [r3, #12]
 800e258:	899b      	ldrh	r3, [r3, #12]
 800e25a:	b29b      	uxth	r3, r3
 800e25c:	4618      	mov	r0, r3
 800e25e:	f7f9 f8e7 	bl	8007430 <lwip_htons>
 800e262:	4603      	mov	r3, r0
 800e264:	b2db      	uxtb	r3, r3
 800e266:	f003 0301 	and.w	r3, r3, #1
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d005      	beq.n	800e27a <tcp_zero_window_probe+0x72>
 800e26e:	6a3b      	ldr	r3, [r7, #32]
 800e270:	891b      	ldrh	r3, [r3, #8]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d101      	bne.n	800e27a <tcp_zero_window_probe+0x72>
 800e276:	2301      	movs	r3, #1
 800e278:	e000      	b.n	800e27c <tcp_zero_window_probe+0x74>
 800e27a:	2300      	movs	r3, #0
 800e27c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800e27e:	7ffb      	ldrb	r3, [r7, #31]
 800e280:	2b00      	cmp	r3, #0
 800e282:	bf0c      	ite	eq
 800e284:	2301      	moveq	r3, #1
 800e286:	2300      	movne	r3, #0
 800e288:	b2db      	uxtb	r3, r3
 800e28a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800e28c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e290:	b299      	uxth	r1, r3
 800e292:	6a3b      	ldr	r3, [r7, #32]
 800e294:	68db      	ldr	r3, [r3, #12]
 800e296:	685b      	ldr	r3, [r3, #4]
 800e298:	8bba      	ldrh	r2, [r7, #28]
 800e29a:	6878      	ldr	r0, [r7, #4]
 800e29c:	f7ff fdf8 	bl	800de90 <tcp_output_alloc_header>
 800e2a0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800e2a2:	69bb      	ldr	r3, [r7, #24]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d102      	bne.n	800e2ae <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800e2a8:	f04f 33ff 	mov.w	r3, #4294967295
 800e2ac:	e04c      	b.n	800e348 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800e2ae:	69bb      	ldr	r3, [r7, #24]
 800e2b0:	685b      	ldr	r3, [r3, #4]
 800e2b2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800e2b4:	7ffb      	ldrb	r3, [r7, #31]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d011      	beq.n	800e2de <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800e2ba:	697b      	ldr	r3, [r7, #20]
 800e2bc:	899b      	ldrh	r3, [r3, #12]
 800e2be:	b29b      	uxth	r3, r3
 800e2c0:	b21b      	sxth	r3, r3
 800e2c2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e2c6:	b21c      	sxth	r4, r3
 800e2c8:	2011      	movs	r0, #17
 800e2ca:	f7f9 f8b1 	bl	8007430 <lwip_htons>
 800e2ce:	4603      	mov	r3, r0
 800e2d0:	b21b      	sxth	r3, r3
 800e2d2:	4323      	orrs	r3, r4
 800e2d4:	b21b      	sxth	r3, r3
 800e2d6:	b29a      	uxth	r2, r3
 800e2d8:	697b      	ldr	r3, [r7, #20]
 800e2da:	819a      	strh	r2, [r3, #12]
 800e2dc:	e010      	b.n	800e300 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800e2de:	69bb      	ldr	r3, [r7, #24]
 800e2e0:	685b      	ldr	r3, [r3, #4]
 800e2e2:	3314      	adds	r3, #20
 800e2e4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800e2e6:	6a3b      	ldr	r3, [r7, #32]
 800e2e8:	6858      	ldr	r0, [r3, #4]
 800e2ea:	6a3b      	ldr	r3, [r7, #32]
 800e2ec:	685b      	ldr	r3, [r3, #4]
 800e2ee:	891a      	ldrh	r2, [r3, #8]
 800e2f0:	6a3b      	ldr	r3, [r7, #32]
 800e2f2:	891b      	ldrh	r3, [r3, #8]
 800e2f4:	1ad3      	subs	r3, r2, r3
 800e2f6:	b29b      	uxth	r3, r3
 800e2f8:	2201      	movs	r2, #1
 800e2fa:	6939      	ldr	r1, [r7, #16]
 800e2fc:	f7fa fe56 	bl	8008fac <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800e300:	6a3b      	ldr	r3, [r7, #32]
 800e302:	68db      	ldr	r3, [r3, #12]
 800e304:	685b      	ldr	r3, [r3, #4]
 800e306:	4618      	mov	r0, r3
 800e308:	f7f9 f8a7 	bl	800745a <lwip_htonl>
 800e30c:	4603      	mov	r3, r0
 800e30e:	3301      	adds	r3, #1
 800e310:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	1ad3      	subs	r3, r2, r3
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	da02      	bge.n	800e324 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	68fa      	ldr	r2, [r7, #12]
 800e322:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e324:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e328:	2200      	movs	r2, #0
 800e32a:	69b9      	ldr	r1, [r7, #24]
 800e32c:	6878      	ldr	r0, [r7, #4]
 800e32e:	f7ff fded 	bl	800df0c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e332:	687a      	ldr	r2, [r7, #4]
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	3304      	adds	r3, #4
 800e338:	69b9      	ldr	r1, [r7, #24]
 800e33a:	6878      	ldr	r0, [r7, #4]
 800e33c:	f7ff fe26 	bl	800df8c <tcp_output_control_segment>
 800e340:	4603      	mov	r3, r0
 800e342:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e344:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e348:	4618      	mov	r0, r3
 800e34a:	372c      	adds	r7, #44	; 0x2c
 800e34c:	46bd      	mov	sp, r7
 800e34e:	bd90      	pop	{r4, r7, pc}
 800e350:	08015f00 	.word	0x08015f00
 800e354:	080166f8 	.word	0x080166f8
 800e358:	08015f54 	.word	0x08015f54

0800e35c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b082      	sub	sp, #8
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800e364:	f7fa ff10 	bl	8009188 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800e368:	4b0a      	ldr	r3, [pc, #40]	; (800e394 <tcpip_tcp_timer+0x38>)
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d103      	bne.n	800e378 <tcpip_tcp_timer+0x1c>
 800e370:	4b09      	ldr	r3, [pc, #36]	; (800e398 <tcpip_tcp_timer+0x3c>)
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d005      	beq.n	800e384 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e378:	2200      	movs	r2, #0
 800e37a:	4908      	ldr	r1, [pc, #32]	; (800e39c <tcpip_tcp_timer+0x40>)
 800e37c:	20fa      	movs	r0, #250	; 0xfa
 800e37e:	f000 f8f3 	bl	800e568 <sys_timeout>
 800e382:	e003      	b.n	800e38c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800e384:	4b06      	ldr	r3, [pc, #24]	; (800e3a0 <tcpip_tcp_timer+0x44>)
 800e386:	2200      	movs	r2, #0
 800e388:	601a      	str	r2, [r3, #0]
  }
}
 800e38a:	bf00      	nop
 800e38c:	bf00      	nop
 800e38e:	3708      	adds	r7, #8
 800e390:	46bd      	mov	sp, r7
 800e392:	bd80      	pop	{r7, pc}
 800e394:	2000ef58 	.word	0x2000ef58
 800e398:	2000ef68 	.word	0x2000ef68
 800e39c:	0800e35d 	.word	0x0800e35d
 800e3a0:	20008544 	.word	0x20008544

0800e3a4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800e3a8:	4b0a      	ldr	r3, [pc, #40]	; (800e3d4 <tcp_timer_needed+0x30>)
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d10f      	bne.n	800e3d0 <tcp_timer_needed+0x2c>
 800e3b0:	4b09      	ldr	r3, [pc, #36]	; (800e3d8 <tcp_timer_needed+0x34>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d103      	bne.n	800e3c0 <tcp_timer_needed+0x1c>
 800e3b8:	4b08      	ldr	r3, [pc, #32]	; (800e3dc <tcp_timer_needed+0x38>)
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d007      	beq.n	800e3d0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800e3c0:	4b04      	ldr	r3, [pc, #16]	; (800e3d4 <tcp_timer_needed+0x30>)
 800e3c2:	2201      	movs	r2, #1
 800e3c4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	4905      	ldr	r1, [pc, #20]	; (800e3e0 <tcp_timer_needed+0x3c>)
 800e3ca:	20fa      	movs	r0, #250	; 0xfa
 800e3cc:	f000 f8cc 	bl	800e568 <sys_timeout>
  }
}
 800e3d0:	bf00      	nop
 800e3d2:	bd80      	pop	{r7, pc}
 800e3d4:	20008544 	.word	0x20008544
 800e3d8:	2000ef58 	.word	0x2000ef58
 800e3dc:	2000ef68 	.word	0x2000ef68
 800e3e0:	0800e35d 	.word	0x0800e35d

0800e3e4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b086      	sub	sp, #24
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	60f8      	str	r0, [r7, #12]
 800e3ec:	60b9      	str	r1, [r7, #8]
 800e3ee:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800e3f0:	200a      	movs	r0, #10
 800e3f2:	f7f9 fcd3 	bl	8007d9c <memp_malloc>
 800e3f6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800e3f8:	693b      	ldr	r3, [r7, #16]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d109      	bne.n	800e412 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800e3fe:	693b      	ldr	r3, [r7, #16]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d151      	bne.n	800e4a8 <sys_timeout_abs+0xc4>
 800e404:	4b2a      	ldr	r3, [pc, #168]	; (800e4b0 <sys_timeout_abs+0xcc>)
 800e406:	22be      	movs	r2, #190	; 0xbe
 800e408:	492a      	ldr	r1, [pc, #168]	; (800e4b4 <sys_timeout_abs+0xd0>)
 800e40a:	482b      	ldr	r0, [pc, #172]	; (800e4b8 <sys_timeout_abs+0xd4>)
 800e40c:	f005 fa26 	bl	801385c <iprintf>
    return;
 800e410:	e04a      	b.n	800e4a8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800e412:	693b      	ldr	r3, [r7, #16]
 800e414:	2200      	movs	r2, #0
 800e416:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800e418:	693b      	ldr	r3, [r7, #16]
 800e41a:	68ba      	ldr	r2, [r7, #8]
 800e41c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800e41e:	693b      	ldr	r3, [r7, #16]
 800e420:	687a      	ldr	r2, [r7, #4]
 800e422:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800e424:	693b      	ldr	r3, [r7, #16]
 800e426:	68fa      	ldr	r2, [r7, #12]
 800e428:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800e42a:	4b24      	ldr	r3, [pc, #144]	; (800e4bc <sys_timeout_abs+0xd8>)
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d103      	bne.n	800e43a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800e432:	4a22      	ldr	r2, [pc, #136]	; (800e4bc <sys_timeout_abs+0xd8>)
 800e434:	693b      	ldr	r3, [r7, #16]
 800e436:	6013      	str	r3, [r2, #0]
    return;
 800e438:	e037      	b.n	800e4aa <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800e43a:	693b      	ldr	r3, [r7, #16]
 800e43c:	685a      	ldr	r2, [r3, #4]
 800e43e:	4b1f      	ldr	r3, [pc, #124]	; (800e4bc <sys_timeout_abs+0xd8>)
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	685b      	ldr	r3, [r3, #4]
 800e444:	1ad3      	subs	r3, r2, r3
 800e446:	0fdb      	lsrs	r3, r3, #31
 800e448:	f003 0301 	and.w	r3, r3, #1
 800e44c:	b2db      	uxtb	r3, r3
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d007      	beq.n	800e462 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800e452:	4b1a      	ldr	r3, [pc, #104]	; (800e4bc <sys_timeout_abs+0xd8>)
 800e454:	681a      	ldr	r2, [r3, #0]
 800e456:	693b      	ldr	r3, [r7, #16]
 800e458:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800e45a:	4a18      	ldr	r2, [pc, #96]	; (800e4bc <sys_timeout_abs+0xd8>)
 800e45c:	693b      	ldr	r3, [r7, #16]
 800e45e:	6013      	str	r3, [r2, #0]
 800e460:	e023      	b.n	800e4aa <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800e462:	4b16      	ldr	r3, [pc, #88]	; (800e4bc <sys_timeout_abs+0xd8>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	617b      	str	r3, [r7, #20]
 800e468:	e01a      	b.n	800e4a0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800e46a:	697b      	ldr	r3, [r7, #20]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d00b      	beq.n	800e48a <sys_timeout_abs+0xa6>
 800e472:	693b      	ldr	r3, [r7, #16]
 800e474:	685a      	ldr	r2, [r3, #4]
 800e476:	697b      	ldr	r3, [r7, #20]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	685b      	ldr	r3, [r3, #4]
 800e47c:	1ad3      	subs	r3, r2, r3
 800e47e:	0fdb      	lsrs	r3, r3, #31
 800e480:	f003 0301 	and.w	r3, r3, #1
 800e484:	b2db      	uxtb	r3, r3
 800e486:	2b00      	cmp	r3, #0
 800e488:	d007      	beq.n	800e49a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800e48a:	697b      	ldr	r3, [r7, #20]
 800e48c:	681a      	ldr	r2, [r3, #0]
 800e48e:	693b      	ldr	r3, [r7, #16]
 800e490:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800e492:	697b      	ldr	r3, [r7, #20]
 800e494:	693a      	ldr	r2, [r7, #16]
 800e496:	601a      	str	r2, [r3, #0]
        break;
 800e498:	e007      	b.n	800e4aa <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800e49a:	697b      	ldr	r3, [r7, #20]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	617b      	str	r3, [r7, #20]
 800e4a0:	697b      	ldr	r3, [r7, #20]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d1e1      	bne.n	800e46a <sys_timeout_abs+0x86>
 800e4a6:	e000      	b.n	800e4aa <sys_timeout_abs+0xc6>
    return;
 800e4a8:	bf00      	nop
      }
    }
  }
}
 800e4aa:	3718      	adds	r7, #24
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bd80      	pop	{r7, pc}
 800e4b0:	0801671c 	.word	0x0801671c
 800e4b4:	08016750 	.word	0x08016750
 800e4b8:	08016790 	.word	0x08016790
 800e4bc:	2000853c 	.word	0x2000853c

0800e4c0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b086      	sub	sp, #24
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800e4cc:	697b      	ldr	r3, [r7, #20]
 800e4ce:	685b      	ldr	r3, [r3, #4]
 800e4d0:	4798      	blx	r3

  now = sys_now();
 800e4d2:	f7f5 fe0d 	bl	80040f0 <sys_now>
 800e4d6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800e4d8:	697b      	ldr	r3, [r7, #20]
 800e4da:	681a      	ldr	r2, [r3, #0]
 800e4dc:	4b0f      	ldr	r3, [pc, #60]	; (800e51c <lwip_cyclic_timer+0x5c>)
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	4413      	add	r3, r2
 800e4e2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800e4e4:	68fa      	ldr	r2, [r7, #12]
 800e4e6:	693b      	ldr	r3, [r7, #16]
 800e4e8:	1ad3      	subs	r3, r2, r3
 800e4ea:	0fdb      	lsrs	r3, r3, #31
 800e4ec:	f003 0301 	and.w	r3, r3, #1
 800e4f0:	b2db      	uxtb	r3, r3
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d009      	beq.n	800e50a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800e4f6:	697b      	ldr	r3, [r7, #20]
 800e4f8:	681a      	ldr	r2, [r3, #0]
 800e4fa:	693b      	ldr	r3, [r7, #16]
 800e4fc:	4413      	add	r3, r2
 800e4fe:	687a      	ldr	r2, [r7, #4]
 800e500:	4907      	ldr	r1, [pc, #28]	; (800e520 <lwip_cyclic_timer+0x60>)
 800e502:	4618      	mov	r0, r3
 800e504:	f7ff ff6e 	bl	800e3e4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800e508:	e004      	b.n	800e514 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800e50a:	687a      	ldr	r2, [r7, #4]
 800e50c:	4904      	ldr	r1, [pc, #16]	; (800e520 <lwip_cyclic_timer+0x60>)
 800e50e:	68f8      	ldr	r0, [r7, #12]
 800e510:	f7ff ff68 	bl	800e3e4 <sys_timeout_abs>
}
 800e514:	bf00      	nop
 800e516:	3718      	adds	r7, #24
 800e518:	46bd      	mov	sp, r7
 800e51a:	bd80      	pop	{r7, pc}
 800e51c:	20008540 	.word	0x20008540
 800e520:	0800e4c1 	.word	0x0800e4c1

0800e524 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b082      	sub	sp, #8
 800e528:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e52a:	2301      	movs	r3, #1
 800e52c:	607b      	str	r3, [r7, #4]
 800e52e:	e00e      	b.n	800e54e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800e530:	4a0b      	ldr	r2, [pc, #44]	; (800e560 <sys_timeouts_init+0x3c>)
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	00db      	lsls	r3, r3, #3
 800e53c:	4a08      	ldr	r2, [pc, #32]	; (800e560 <sys_timeouts_init+0x3c>)
 800e53e:	4413      	add	r3, r2
 800e540:	461a      	mov	r2, r3
 800e542:	4908      	ldr	r1, [pc, #32]	; (800e564 <sys_timeouts_init+0x40>)
 800e544:	f000 f810 	bl	800e568 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	3301      	adds	r3, #1
 800e54c:	607b      	str	r3, [r7, #4]
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	2b04      	cmp	r3, #4
 800e552:	d9ed      	bls.n	800e530 <sys_timeouts_init+0xc>
  }
}
 800e554:	bf00      	nop
 800e556:	bf00      	nop
 800e558:	3708      	adds	r7, #8
 800e55a:	46bd      	mov	sp, r7
 800e55c:	bd80      	pop	{r7, pc}
 800e55e:	bf00      	nop
 800e560:	080176dc 	.word	0x080176dc
 800e564:	0800e4c1 	.word	0x0800e4c1

0800e568 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b086      	sub	sp, #24
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	60f8      	str	r0, [r7, #12]
 800e570:	60b9      	str	r1, [r7, #8]
 800e572:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e57a:	d306      	bcc.n	800e58a <sys_timeout+0x22>
 800e57c:	4b0a      	ldr	r3, [pc, #40]	; (800e5a8 <sys_timeout+0x40>)
 800e57e:	f240 1229 	movw	r2, #297	; 0x129
 800e582:	490a      	ldr	r1, [pc, #40]	; (800e5ac <sys_timeout+0x44>)
 800e584:	480a      	ldr	r0, [pc, #40]	; (800e5b0 <sys_timeout+0x48>)
 800e586:	f005 f969 	bl	801385c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800e58a:	f7f5 fdb1 	bl	80040f0 <sys_now>
 800e58e:	4602      	mov	r2, r0
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	4413      	add	r3, r2
 800e594:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800e596:	687a      	ldr	r2, [r7, #4]
 800e598:	68b9      	ldr	r1, [r7, #8]
 800e59a:	6978      	ldr	r0, [r7, #20]
 800e59c:	f7ff ff22 	bl	800e3e4 <sys_timeout_abs>
#endif
}
 800e5a0:	bf00      	nop
 800e5a2:	3718      	adds	r7, #24
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	bd80      	pop	{r7, pc}
 800e5a8:	0801671c 	.word	0x0801671c
 800e5ac:	080167b8 	.word	0x080167b8
 800e5b0:	08016790 	.word	0x08016790

0800e5b4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b084      	sub	sp, #16
 800e5b8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800e5ba:	f7f5 fd99 	bl	80040f0 <sys_now>
 800e5be:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800e5c0:	4b17      	ldr	r3, [pc, #92]	; (800e620 <sys_check_timeouts+0x6c>)
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800e5c6:	68bb      	ldr	r3, [r7, #8]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d022      	beq.n	800e612 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800e5cc:	68bb      	ldr	r3, [r7, #8]
 800e5ce:	685b      	ldr	r3, [r3, #4]
 800e5d0:	68fa      	ldr	r2, [r7, #12]
 800e5d2:	1ad3      	subs	r3, r2, r3
 800e5d4:	0fdb      	lsrs	r3, r3, #31
 800e5d6:	f003 0301 	and.w	r3, r3, #1
 800e5da:	b2db      	uxtb	r3, r3
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d11a      	bne.n	800e616 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800e5e0:	68bb      	ldr	r3, [r7, #8]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	4a0e      	ldr	r2, [pc, #56]	; (800e620 <sys_check_timeouts+0x6c>)
 800e5e6:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800e5e8:	68bb      	ldr	r3, [r7, #8]
 800e5ea:	689b      	ldr	r3, [r3, #8]
 800e5ec:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800e5ee:	68bb      	ldr	r3, [r7, #8]
 800e5f0:	68db      	ldr	r3, [r3, #12]
 800e5f2:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800e5f4:	68bb      	ldr	r3, [r7, #8]
 800e5f6:	685b      	ldr	r3, [r3, #4]
 800e5f8:	4a0a      	ldr	r2, [pc, #40]	; (800e624 <sys_check_timeouts+0x70>)
 800e5fa:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800e5fc:	68b9      	ldr	r1, [r7, #8]
 800e5fe:	200a      	movs	r0, #10
 800e600:	f7f9 fc1e 	bl	8007e40 <memp_free>
    if (handler != NULL) {
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d0da      	beq.n	800e5c0 <sys_check_timeouts+0xc>
      handler(arg);
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	6838      	ldr	r0, [r7, #0]
 800e60e:	4798      	blx	r3
  do {
 800e610:	e7d6      	b.n	800e5c0 <sys_check_timeouts+0xc>
      return;
 800e612:	bf00      	nop
 800e614:	e000      	b.n	800e618 <sys_check_timeouts+0x64>
      return;
 800e616:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800e618:	3710      	adds	r7, #16
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bd80      	pop	{r7, pc}
 800e61e:	bf00      	nop
 800e620:	2000853c 	.word	0x2000853c
 800e624:	20008540 	.word	0x20008540

0800e628 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b082      	sub	sp, #8
 800e62c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800e62e:	4b16      	ldr	r3, [pc, #88]	; (800e688 <sys_timeouts_sleeptime+0x60>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d102      	bne.n	800e63c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800e636:	f04f 33ff 	mov.w	r3, #4294967295
 800e63a:	e020      	b.n	800e67e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 800e63c:	f7f5 fd58 	bl	80040f0 <sys_now>
 800e640:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800e642:	4b11      	ldr	r3, [pc, #68]	; (800e688 <sys_timeouts_sleeptime+0x60>)
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	685a      	ldr	r2, [r3, #4]
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	1ad3      	subs	r3, r2, r3
 800e64c:	0fdb      	lsrs	r3, r3, #31
 800e64e:	f003 0301 	and.w	r3, r3, #1
 800e652:	b2db      	uxtb	r3, r3
 800e654:	2b00      	cmp	r3, #0
 800e656:	d001      	beq.n	800e65c <sys_timeouts_sleeptime+0x34>
    return 0;
 800e658:	2300      	movs	r3, #0
 800e65a:	e010      	b.n	800e67e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 800e65c:	4b0a      	ldr	r3, [pc, #40]	; (800e688 <sys_timeouts_sleeptime+0x60>)
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	685a      	ldr	r2, [r3, #4]
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	1ad3      	subs	r3, r2, r3
 800e666:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 800e668:	683b      	ldr	r3, [r7, #0]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	da06      	bge.n	800e67c <sys_timeouts_sleeptime+0x54>
 800e66e:	4b07      	ldr	r3, [pc, #28]	; (800e68c <sys_timeouts_sleeptime+0x64>)
 800e670:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800e674:	4906      	ldr	r1, [pc, #24]	; (800e690 <sys_timeouts_sleeptime+0x68>)
 800e676:	4807      	ldr	r0, [pc, #28]	; (800e694 <sys_timeouts_sleeptime+0x6c>)
 800e678:	f005 f8f0 	bl	801385c <iprintf>
    return ret;
 800e67c:	683b      	ldr	r3, [r7, #0]
  }
}
 800e67e:	4618      	mov	r0, r3
 800e680:	3708      	adds	r7, #8
 800e682:	46bd      	mov	sp, r7
 800e684:	bd80      	pop	{r7, pc}
 800e686:	bf00      	nop
 800e688:	2000853c 	.word	0x2000853c
 800e68c:	0801671c 	.word	0x0801671c
 800e690:	080167f0 	.word	0x080167f0
 800e694:	08016790 	.word	0x08016790

0800e698 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e69c:	f005 f8f6 	bl	801388c <rand>
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	b29b      	uxth	r3, r3
 800e6a4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e6a8:	b29b      	uxth	r3, r3
 800e6aa:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e6ae:	b29a      	uxth	r2, r3
 800e6b0:	4b01      	ldr	r3, [pc, #4]	; (800e6b8 <udp_init+0x20>)
 800e6b2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e6b4:	bf00      	nop
 800e6b6:	bd80      	pop	{r7, pc}
 800e6b8:	20000018 	.word	0x20000018

0800e6bc <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800e6bc:	b480      	push	{r7}
 800e6be:	b083      	sub	sp, #12
 800e6c0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800e6c6:	4b17      	ldr	r3, [pc, #92]	; (800e724 <udp_new_port+0x68>)
 800e6c8:	881b      	ldrh	r3, [r3, #0]
 800e6ca:	1c5a      	adds	r2, r3, #1
 800e6cc:	b291      	uxth	r1, r2
 800e6ce:	4a15      	ldr	r2, [pc, #84]	; (800e724 <udp_new_port+0x68>)
 800e6d0:	8011      	strh	r1, [r2, #0]
 800e6d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e6d6:	4293      	cmp	r3, r2
 800e6d8:	d103      	bne.n	800e6e2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800e6da:	4b12      	ldr	r3, [pc, #72]	; (800e724 <udp_new_port+0x68>)
 800e6dc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800e6e0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e6e2:	4b11      	ldr	r3, [pc, #68]	; (800e728 <udp_new_port+0x6c>)
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	603b      	str	r3, [r7, #0]
 800e6e8:	e011      	b.n	800e70e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800e6ea:	683b      	ldr	r3, [r7, #0]
 800e6ec:	8a5a      	ldrh	r2, [r3, #18]
 800e6ee:	4b0d      	ldr	r3, [pc, #52]	; (800e724 <udp_new_port+0x68>)
 800e6f0:	881b      	ldrh	r3, [r3, #0]
 800e6f2:	429a      	cmp	r2, r3
 800e6f4:	d108      	bne.n	800e708 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800e6f6:	88fb      	ldrh	r3, [r7, #6]
 800e6f8:	3301      	adds	r3, #1
 800e6fa:	80fb      	strh	r3, [r7, #6]
 800e6fc:	88fb      	ldrh	r3, [r7, #6]
 800e6fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e702:	d3e0      	bcc.n	800e6c6 <udp_new_port+0xa>
        return 0;
 800e704:	2300      	movs	r3, #0
 800e706:	e007      	b.n	800e718 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	68db      	ldr	r3, [r3, #12]
 800e70c:	603b      	str	r3, [r7, #0]
 800e70e:	683b      	ldr	r3, [r7, #0]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d1ea      	bne.n	800e6ea <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800e714:	4b03      	ldr	r3, [pc, #12]	; (800e724 <udp_new_port+0x68>)
 800e716:	881b      	ldrh	r3, [r3, #0]
}
 800e718:	4618      	mov	r0, r3
 800e71a:	370c      	adds	r7, #12
 800e71c:	46bd      	mov	sp, r7
 800e71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e722:	4770      	bx	lr
 800e724:	20000018 	.word	0x20000018
 800e728:	2000ef70 	.word	0x2000ef70

0800e72c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b084      	sub	sp, #16
 800e730:	af00      	add	r7, sp, #0
 800e732:	60f8      	str	r0, [r7, #12]
 800e734:	60b9      	str	r1, [r7, #8]
 800e736:	4613      	mov	r3, r2
 800e738:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d105      	bne.n	800e74c <udp_input_local_match+0x20>
 800e740:	4b27      	ldr	r3, [pc, #156]	; (800e7e0 <udp_input_local_match+0xb4>)
 800e742:	2287      	movs	r2, #135	; 0x87
 800e744:	4927      	ldr	r1, [pc, #156]	; (800e7e4 <udp_input_local_match+0xb8>)
 800e746:	4828      	ldr	r0, [pc, #160]	; (800e7e8 <udp_input_local_match+0xbc>)
 800e748:	f005 f888 	bl	801385c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800e74c:	68bb      	ldr	r3, [r7, #8]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d105      	bne.n	800e75e <udp_input_local_match+0x32>
 800e752:	4b23      	ldr	r3, [pc, #140]	; (800e7e0 <udp_input_local_match+0xb4>)
 800e754:	2288      	movs	r2, #136	; 0x88
 800e756:	4925      	ldr	r1, [pc, #148]	; (800e7ec <udp_input_local_match+0xc0>)
 800e758:	4823      	ldr	r0, [pc, #140]	; (800e7e8 <udp_input_local_match+0xbc>)
 800e75a:	f005 f87f 	bl	801385c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	7a1b      	ldrb	r3, [r3, #8]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d00b      	beq.n	800e77e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	7a1a      	ldrb	r2, [r3, #8]
 800e76a:	4b21      	ldr	r3, [pc, #132]	; (800e7f0 <udp_input_local_match+0xc4>)
 800e76c:	685b      	ldr	r3, [r3, #4]
 800e76e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e772:	3301      	adds	r3, #1
 800e774:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e776:	429a      	cmp	r2, r3
 800e778:	d001      	beq.n	800e77e <udp_input_local_match+0x52>
    return 0;
 800e77a:	2300      	movs	r3, #0
 800e77c:	e02b      	b.n	800e7d6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800e77e:	79fb      	ldrb	r3, [r7, #7]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d018      	beq.n	800e7b6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d013      	beq.n	800e7b2 <udp_input_local_match+0x86>
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d00f      	beq.n	800e7b2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e792:	4b17      	ldr	r3, [pc, #92]	; (800e7f0 <udp_input_local_match+0xc4>)
 800e794:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e79a:	d00a      	beq.n	800e7b2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	681a      	ldr	r2, [r3, #0]
 800e7a0:	4b13      	ldr	r3, [pc, #76]	; (800e7f0 <udp_input_local_match+0xc4>)
 800e7a2:	695b      	ldr	r3, [r3, #20]
 800e7a4:	405a      	eors	r2, r3
 800e7a6:	68bb      	ldr	r3, [r7, #8]
 800e7a8:	3308      	adds	r3, #8
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d110      	bne.n	800e7d4 <udp_input_local_match+0xa8>
          return 1;
 800e7b2:	2301      	movs	r3, #1
 800e7b4:	e00f      	b.n	800e7d6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d009      	beq.n	800e7d0 <udp_input_local_match+0xa4>
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d005      	beq.n	800e7d0 <udp_input_local_match+0xa4>
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	681a      	ldr	r2, [r3, #0]
 800e7c8:	4b09      	ldr	r3, [pc, #36]	; (800e7f0 <udp_input_local_match+0xc4>)
 800e7ca:	695b      	ldr	r3, [r3, #20]
 800e7cc:	429a      	cmp	r2, r3
 800e7ce:	d101      	bne.n	800e7d4 <udp_input_local_match+0xa8>
        return 1;
 800e7d0:	2301      	movs	r3, #1
 800e7d2:	e000      	b.n	800e7d6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800e7d4:	2300      	movs	r3, #0
}
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	3710      	adds	r7, #16
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bd80      	pop	{r7, pc}
 800e7de:	bf00      	nop
 800e7e0:	08016804 	.word	0x08016804
 800e7e4:	08016834 	.word	0x08016834
 800e7e8:	08016858 	.word	0x08016858
 800e7ec:	08016880 	.word	0x08016880
 800e7f0:	2000b824 	.word	0x2000b824

0800e7f4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800e7f4:	b590      	push	{r4, r7, lr}
 800e7f6:	b08d      	sub	sp, #52	; 0x34
 800e7f8:	af02      	add	r7, sp, #8
 800e7fa:	6078      	str	r0, [r7, #4]
 800e7fc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800e7fe:	2300      	movs	r3, #0
 800e800:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d105      	bne.n	800e814 <udp_input+0x20>
 800e808:	4b7c      	ldr	r3, [pc, #496]	; (800e9fc <udp_input+0x208>)
 800e80a:	22cf      	movs	r2, #207	; 0xcf
 800e80c:	497c      	ldr	r1, [pc, #496]	; (800ea00 <udp_input+0x20c>)
 800e80e:	487d      	ldr	r0, [pc, #500]	; (800ea04 <udp_input+0x210>)
 800e810:	f005 f824 	bl	801385c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800e814:	683b      	ldr	r3, [r7, #0]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d105      	bne.n	800e826 <udp_input+0x32>
 800e81a:	4b78      	ldr	r3, [pc, #480]	; (800e9fc <udp_input+0x208>)
 800e81c:	22d0      	movs	r2, #208	; 0xd0
 800e81e:	497a      	ldr	r1, [pc, #488]	; (800ea08 <udp_input+0x214>)
 800e820:	4878      	ldr	r0, [pc, #480]	; (800ea04 <udp_input+0x210>)
 800e822:	f005 f81b 	bl	801385c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	895b      	ldrh	r3, [r3, #10]
 800e82a:	2b07      	cmp	r3, #7
 800e82c:	d803      	bhi.n	800e836 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800e82e:	6878      	ldr	r0, [r7, #4]
 800e830:	f7fa f9b6 	bl	8008ba0 <pbuf_free>
    goto end;
 800e834:	e0de      	b.n	800e9f4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	685b      	ldr	r3, [r3, #4]
 800e83a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800e83c:	4b73      	ldr	r3, [pc, #460]	; (800ea0c <udp_input+0x218>)
 800e83e:	695b      	ldr	r3, [r3, #20]
 800e840:	4a72      	ldr	r2, [pc, #456]	; (800ea0c <udp_input+0x218>)
 800e842:	6812      	ldr	r2, [r2, #0]
 800e844:	4611      	mov	r1, r2
 800e846:	4618      	mov	r0, r3
 800e848:	f003 fe06 	bl	8012458 <ip4_addr_isbroadcast_u32>
 800e84c:	4603      	mov	r3, r0
 800e84e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800e850:	697b      	ldr	r3, [r7, #20]
 800e852:	881b      	ldrh	r3, [r3, #0]
 800e854:	b29b      	uxth	r3, r3
 800e856:	4618      	mov	r0, r3
 800e858:	f7f8 fdea 	bl	8007430 <lwip_htons>
 800e85c:	4603      	mov	r3, r0
 800e85e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800e860:	697b      	ldr	r3, [r7, #20]
 800e862:	885b      	ldrh	r3, [r3, #2]
 800e864:	b29b      	uxth	r3, r3
 800e866:	4618      	mov	r0, r3
 800e868:	f7f8 fde2 	bl	8007430 <lwip_htons>
 800e86c:	4603      	mov	r3, r0
 800e86e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800e870:	2300      	movs	r3, #0
 800e872:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800e874:	2300      	movs	r3, #0
 800e876:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800e878:	2300      	movs	r3, #0
 800e87a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e87c:	4b64      	ldr	r3, [pc, #400]	; (800ea10 <udp_input+0x21c>)
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	627b      	str	r3, [r7, #36]	; 0x24
 800e882:	e054      	b.n	800e92e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800e884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e886:	8a5b      	ldrh	r3, [r3, #18]
 800e888:	89fa      	ldrh	r2, [r7, #14]
 800e88a:	429a      	cmp	r2, r3
 800e88c:	d14a      	bne.n	800e924 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800e88e:	7cfb      	ldrb	r3, [r7, #19]
 800e890:	461a      	mov	r2, r3
 800e892:	6839      	ldr	r1, [r7, #0]
 800e894:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e896:	f7ff ff49 	bl	800e72c <udp_input_local_match>
 800e89a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d041      	beq.n	800e924 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800e8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a2:	7c1b      	ldrb	r3, [r3, #16]
 800e8a4:	f003 0304 	and.w	r3, r3, #4
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d11d      	bne.n	800e8e8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800e8ac:	69fb      	ldr	r3, [r7, #28]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d102      	bne.n	800e8b8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800e8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b4:	61fb      	str	r3, [r7, #28]
 800e8b6:	e017      	b.n	800e8e8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800e8b8:	7cfb      	ldrb	r3, [r7, #19]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d014      	beq.n	800e8e8 <udp_input+0xf4>
 800e8be:	4b53      	ldr	r3, [pc, #332]	; (800ea0c <udp_input+0x218>)
 800e8c0:	695b      	ldr	r3, [r3, #20]
 800e8c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8c6:	d10f      	bne.n	800e8e8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800e8c8:	69fb      	ldr	r3, [r7, #28]
 800e8ca:	681a      	ldr	r2, [r3, #0]
 800e8cc:	683b      	ldr	r3, [r7, #0]
 800e8ce:	3304      	adds	r3, #4
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	429a      	cmp	r2, r3
 800e8d4:	d008      	beq.n	800e8e8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800e8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8d8:	681a      	ldr	r2, [r3, #0]
 800e8da:	683b      	ldr	r3, [r7, #0]
 800e8dc:	3304      	adds	r3, #4
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	429a      	cmp	r2, r3
 800e8e2:	d101      	bne.n	800e8e8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800e8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8e6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800e8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ea:	8a9b      	ldrh	r3, [r3, #20]
 800e8ec:	8a3a      	ldrh	r2, [r7, #16]
 800e8ee:	429a      	cmp	r2, r3
 800e8f0:	d118      	bne.n	800e924 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8f4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d005      	beq.n	800e906 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800e8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8fc:	685a      	ldr	r2, [r3, #4]
 800e8fe:	4b43      	ldr	r3, [pc, #268]	; (800ea0c <udp_input+0x218>)
 800e900:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e902:	429a      	cmp	r2, r3
 800e904:	d10e      	bne.n	800e924 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800e906:	6a3b      	ldr	r3, [r7, #32]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d014      	beq.n	800e936 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800e90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e90e:	68da      	ldr	r2, [r3, #12]
 800e910:	6a3b      	ldr	r3, [r7, #32]
 800e912:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800e914:	4b3e      	ldr	r3, [pc, #248]	; (800ea10 <udp_input+0x21c>)
 800e916:	681a      	ldr	r2, [r3, #0]
 800e918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e91a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800e91c:	4a3c      	ldr	r2, [pc, #240]	; (800ea10 <udp_input+0x21c>)
 800e91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e920:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800e922:	e008      	b.n	800e936 <udp_input+0x142>
      }
    }

    prev = pcb;
 800e924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e926:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e92a:	68db      	ldr	r3, [r3, #12]
 800e92c:	627b      	str	r3, [r7, #36]	; 0x24
 800e92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e930:	2b00      	cmp	r3, #0
 800e932:	d1a7      	bne.n	800e884 <udp_input+0x90>
 800e934:	e000      	b.n	800e938 <udp_input+0x144>
        break;
 800e936:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800e938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d101      	bne.n	800e942 <udp_input+0x14e>
    pcb = uncon_pcb;
 800e93e:	69fb      	ldr	r3, [r7, #28]
 800e940:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800e942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e944:	2b00      	cmp	r3, #0
 800e946:	d002      	beq.n	800e94e <udp_input+0x15a>
    for_us = 1;
 800e948:	2301      	movs	r3, #1
 800e94a:	76fb      	strb	r3, [r7, #27]
 800e94c:	e00a      	b.n	800e964 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800e94e:	683b      	ldr	r3, [r7, #0]
 800e950:	3304      	adds	r3, #4
 800e952:	681a      	ldr	r2, [r3, #0]
 800e954:	4b2d      	ldr	r3, [pc, #180]	; (800ea0c <udp_input+0x218>)
 800e956:	695b      	ldr	r3, [r3, #20]
 800e958:	429a      	cmp	r2, r3
 800e95a:	bf0c      	ite	eq
 800e95c:	2301      	moveq	r3, #1
 800e95e:	2300      	movne	r3, #0
 800e960:	b2db      	uxtb	r3, r3
 800e962:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800e964:	7efb      	ldrb	r3, [r7, #27]
 800e966:	2b00      	cmp	r3, #0
 800e968:	d041      	beq.n	800e9ee <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800e96a:	2108      	movs	r1, #8
 800e96c:	6878      	ldr	r0, [r7, #4]
 800e96e:	f7fa f891 	bl	8008a94 <pbuf_remove_header>
 800e972:	4603      	mov	r3, r0
 800e974:	2b00      	cmp	r3, #0
 800e976:	d00a      	beq.n	800e98e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800e978:	4b20      	ldr	r3, [pc, #128]	; (800e9fc <udp_input+0x208>)
 800e97a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800e97e:	4925      	ldr	r1, [pc, #148]	; (800ea14 <udp_input+0x220>)
 800e980:	4820      	ldr	r0, [pc, #128]	; (800ea04 <udp_input+0x210>)
 800e982:	f004 ff6b 	bl	801385c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800e986:	6878      	ldr	r0, [r7, #4]
 800e988:	f7fa f90a 	bl	8008ba0 <pbuf_free>
      goto end;
 800e98c:	e032      	b.n	800e9f4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800e98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e990:	2b00      	cmp	r3, #0
 800e992:	d012      	beq.n	800e9ba <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800e994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e996:	699b      	ldr	r3, [r3, #24]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d00a      	beq.n	800e9b2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800e99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e99e:	699c      	ldr	r4, [r3, #24]
 800e9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9a2:	69d8      	ldr	r0, [r3, #28]
 800e9a4:	8a3b      	ldrh	r3, [r7, #16]
 800e9a6:	9300      	str	r3, [sp, #0]
 800e9a8:	4b1b      	ldr	r3, [pc, #108]	; (800ea18 <udp_input+0x224>)
 800e9aa:	687a      	ldr	r2, [r7, #4]
 800e9ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e9ae:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800e9b0:	e021      	b.n	800e9f6 <udp_input+0x202>
        pbuf_free(p);
 800e9b2:	6878      	ldr	r0, [r7, #4]
 800e9b4:	f7fa f8f4 	bl	8008ba0 <pbuf_free>
        goto end;
 800e9b8:	e01c      	b.n	800e9f4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800e9ba:	7cfb      	ldrb	r3, [r7, #19]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d112      	bne.n	800e9e6 <udp_input+0x1f2>
 800e9c0:	4b12      	ldr	r3, [pc, #72]	; (800ea0c <udp_input+0x218>)
 800e9c2:	695b      	ldr	r3, [r3, #20]
 800e9c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e9c8:	2be0      	cmp	r3, #224	; 0xe0
 800e9ca:	d00c      	beq.n	800e9e6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800e9cc:	4b0f      	ldr	r3, [pc, #60]	; (800ea0c <udp_input+0x218>)
 800e9ce:	899b      	ldrh	r3, [r3, #12]
 800e9d0:	3308      	adds	r3, #8
 800e9d2:	b29b      	uxth	r3, r3
 800e9d4:	b21b      	sxth	r3, r3
 800e9d6:	4619      	mov	r1, r3
 800e9d8:	6878      	ldr	r0, [r7, #4]
 800e9da:	f7fa f8ce 	bl	8008b7a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800e9de:	2103      	movs	r1, #3
 800e9e0:	6878      	ldr	r0, [r7, #4]
 800e9e2:	f003 f9fb 	bl	8011ddc <icmp_dest_unreach>
      pbuf_free(p);
 800e9e6:	6878      	ldr	r0, [r7, #4]
 800e9e8:	f7fa f8da 	bl	8008ba0 <pbuf_free>
  return;
 800e9ec:	e003      	b.n	800e9f6 <udp_input+0x202>
    pbuf_free(p);
 800e9ee:	6878      	ldr	r0, [r7, #4]
 800e9f0:	f7fa f8d6 	bl	8008ba0 <pbuf_free>
  return;
 800e9f4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800e9f6:	372c      	adds	r7, #44	; 0x2c
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	bd90      	pop	{r4, r7, pc}
 800e9fc:	08016804 	.word	0x08016804
 800ea00:	080168a8 	.word	0x080168a8
 800ea04:	08016858 	.word	0x08016858
 800ea08:	080168c0 	.word	0x080168c0
 800ea0c:	2000b824 	.word	0x2000b824
 800ea10:	2000ef70 	.word	0x2000ef70
 800ea14:	080168dc 	.word	0x080168dc
 800ea18:	2000b834 	.word	0x2000b834

0800ea1c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b088      	sub	sp, #32
 800ea20:	af02      	add	r7, sp, #8
 800ea22:	60f8      	str	r0, [r7, #12]
 800ea24:	60b9      	str	r1, [r7, #8]
 800ea26:	607a      	str	r2, [r7, #4]
 800ea28:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d109      	bne.n	800ea44 <udp_sendto_if+0x28>
 800ea30:	4b2e      	ldr	r3, [pc, #184]	; (800eaec <udp_sendto_if+0xd0>)
 800ea32:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ea36:	492e      	ldr	r1, [pc, #184]	; (800eaf0 <udp_sendto_if+0xd4>)
 800ea38:	482e      	ldr	r0, [pc, #184]	; (800eaf4 <udp_sendto_if+0xd8>)
 800ea3a:	f004 ff0f 	bl	801385c <iprintf>
 800ea3e:	f06f 030f 	mvn.w	r3, #15
 800ea42:	e04f      	b.n	800eae4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800ea44:	68bb      	ldr	r3, [r7, #8]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d109      	bne.n	800ea5e <udp_sendto_if+0x42>
 800ea4a:	4b28      	ldr	r3, [pc, #160]	; (800eaec <udp_sendto_if+0xd0>)
 800ea4c:	f240 2281 	movw	r2, #641	; 0x281
 800ea50:	4929      	ldr	r1, [pc, #164]	; (800eaf8 <udp_sendto_if+0xdc>)
 800ea52:	4828      	ldr	r0, [pc, #160]	; (800eaf4 <udp_sendto_if+0xd8>)
 800ea54:	f004 ff02 	bl	801385c <iprintf>
 800ea58:	f06f 030f 	mvn.w	r3, #15
 800ea5c:	e042      	b.n	800eae4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d109      	bne.n	800ea78 <udp_sendto_if+0x5c>
 800ea64:	4b21      	ldr	r3, [pc, #132]	; (800eaec <udp_sendto_if+0xd0>)
 800ea66:	f240 2282 	movw	r2, #642	; 0x282
 800ea6a:	4924      	ldr	r1, [pc, #144]	; (800eafc <udp_sendto_if+0xe0>)
 800ea6c:	4821      	ldr	r0, [pc, #132]	; (800eaf4 <udp_sendto_if+0xd8>)
 800ea6e:	f004 fef5 	bl	801385c <iprintf>
 800ea72:	f06f 030f 	mvn.w	r3, #15
 800ea76:	e035      	b.n	800eae4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800ea78:	6a3b      	ldr	r3, [r7, #32]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d109      	bne.n	800ea92 <udp_sendto_if+0x76>
 800ea7e:	4b1b      	ldr	r3, [pc, #108]	; (800eaec <udp_sendto_if+0xd0>)
 800ea80:	f240 2283 	movw	r2, #643	; 0x283
 800ea84:	491e      	ldr	r1, [pc, #120]	; (800eb00 <udp_sendto_if+0xe4>)
 800ea86:	481b      	ldr	r0, [pc, #108]	; (800eaf4 <udp_sendto_if+0xd8>)
 800ea88:	f004 fee8 	bl	801385c <iprintf>
 800ea8c:	f06f 030f 	mvn.w	r3, #15
 800ea90:	e028      	b.n	800eae4 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d009      	beq.n	800eaac <udp_sendto_if+0x90>
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d005      	beq.n	800eaac <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800eaa8:	2be0      	cmp	r3, #224	; 0xe0
 800eaaa:	d103      	bne.n	800eab4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800eaac:	6a3b      	ldr	r3, [r7, #32]
 800eaae:	3304      	adds	r3, #4
 800eab0:	617b      	str	r3, [r7, #20]
 800eab2:	e00b      	b.n	800eacc <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	681a      	ldr	r2, [r3, #0]
 800eab8:	6a3b      	ldr	r3, [r7, #32]
 800eaba:	3304      	adds	r3, #4
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	429a      	cmp	r2, r3
 800eac0:	d002      	beq.n	800eac8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800eac2:	f06f 0303 	mvn.w	r3, #3
 800eac6:	e00d      	b.n	800eae4 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800eacc:	887a      	ldrh	r2, [r7, #2]
 800eace:	697b      	ldr	r3, [r7, #20]
 800ead0:	9301      	str	r3, [sp, #4]
 800ead2:	6a3b      	ldr	r3, [r7, #32]
 800ead4:	9300      	str	r3, [sp, #0]
 800ead6:	4613      	mov	r3, r2
 800ead8:	687a      	ldr	r2, [r7, #4]
 800eada:	68b9      	ldr	r1, [r7, #8]
 800eadc:	68f8      	ldr	r0, [r7, #12]
 800eade:	f000 f811 	bl	800eb04 <udp_sendto_if_src>
 800eae2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800eae4:	4618      	mov	r0, r3
 800eae6:	3718      	adds	r7, #24
 800eae8:	46bd      	mov	sp, r7
 800eaea:	bd80      	pop	{r7, pc}
 800eaec:	08016804 	.word	0x08016804
 800eaf0:	08016978 	.word	0x08016978
 800eaf4:	08016858 	.word	0x08016858
 800eaf8:	08016994 	.word	0x08016994
 800eafc:	080169b0 	.word	0x080169b0
 800eb00:	080169d0 	.word	0x080169d0

0800eb04 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b08c      	sub	sp, #48	; 0x30
 800eb08:	af04      	add	r7, sp, #16
 800eb0a:	60f8      	str	r0, [r7, #12]
 800eb0c:	60b9      	str	r1, [r7, #8]
 800eb0e:	607a      	str	r2, [r7, #4]
 800eb10:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d109      	bne.n	800eb2c <udp_sendto_if_src+0x28>
 800eb18:	4b65      	ldr	r3, [pc, #404]	; (800ecb0 <udp_sendto_if_src+0x1ac>)
 800eb1a:	f240 22d1 	movw	r2, #721	; 0x2d1
 800eb1e:	4965      	ldr	r1, [pc, #404]	; (800ecb4 <udp_sendto_if_src+0x1b0>)
 800eb20:	4865      	ldr	r0, [pc, #404]	; (800ecb8 <udp_sendto_if_src+0x1b4>)
 800eb22:	f004 fe9b 	bl	801385c <iprintf>
 800eb26:	f06f 030f 	mvn.w	r3, #15
 800eb2a:	e0bc      	b.n	800eca6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800eb2c:	68bb      	ldr	r3, [r7, #8]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d109      	bne.n	800eb46 <udp_sendto_if_src+0x42>
 800eb32:	4b5f      	ldr	r3, [pc, #380]	; (800ecb0 <udp_sendto_if_src+0x1ac>)
 800eb34:	f240 22d2 	movw	r2, #722	; 0x2d2
 800eb38:	4960      	ldr	r1, [pc, #384]	; (800ecbc <udp_sendto_if_src+0x1b8>)
 800eb3a:	485f      	ldr	r0, [pc, #380]	; (800ecb8 <udp_sendto_if_src+0x1b4>)
 800eb3c:	f004 fe8e 	bl	801385c <iprintf>
 800eb40:	f06f 030f 	mvn.w	r3, #15
 800eb44:	e0af      	b.n	800eca6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d109      	bne.n	800eb60 <udp_sendto_if_src+0x5c>
 800eb4c:	4b58      	ldr	r3, [pc, #352]	; (800ecb0 <udp_sendto_if_src+0x1ac>)
 800eb4e:	f240 22d3 	movw	r2, #723	; 0x2d3
 800eb52:	495b      	ldr	r1, [pc, #364]	; (800ecc0 <udp_sendto_if_src+0x1bc>)
 800eb54:	4858      	ldr	r0, [pc, #352]	; (800ecb8 <udp_sendto_if_src+0x1b4>)
 800eb56:	f004 fe81 	bl	801385c <iprintf>
 800eb5a:	f06f 030f 	mvn.w	r3, #15
 800eb5e:	e0a2      	b.n	800eca6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800eb60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d109      	bne.n	800eb7a <udp_sendto_if_src+0x76>
 800eb66:	4b52      	ldr	r3, [pc, #328]	; (800ecb0 <udp_sendto_if_src+0x1ac>)
 800eb68:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800eb6c:	4955      	ldr	r1, [pc, #340]	; (800ecc4 <udp_sendto_if_src+0x1c0>)
 800eb6e:	4852      	ldr	r0, [pc, #328]	; (800ecb8 <udp_sendto_if_src+0x1b4>)
 800eb70:	f004 fe74 	bl	801385c <iprintf>
 800eb74:	f06f 030f 	mvn.w	r3, #15
 800eb78:	e095      	b.n	800eca6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800eb7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d109      	bne.n	800eb94 <udp_sendto_if_src+0x90>
 800eb80:	4b4b      	ldr	r3, [pc, #300]	; (800ecb0 <udp_sendto_if_src+0x1ac>)
 800eb82:	f240 22d5 	movw	r2, #725	; 0x2d5
 800eb86:	4950      	ldr	r1, [pc, #320]	; (800ecc8 <udp_sendto_if_src+0x1c4>)
 800eb88:	484b      	ldr	r0, [pc, #300]	; (800ecb8 <udp_sendto_if_src+0x1b4>)
 800eb8a:	f004 fe67 	bl	801385c <iprintf>
 800eb8e:	f06f 030f 	mvn.w	r3, #15
 800eb92:	e088      	b.n	800eca6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	8a5b      	ldrh	r3, [r3, #18]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d10f      	bne.n	800ebbc <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800eb9c:	68f9      	ldr	r1, [r7, #12]
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	8a5b      	ldrh	r3, [r3, #18]
 800eba2:	461a      	mov	r2, r3
 800eba4:	68f8      	ldr	r0, [r7, #12]
 800eba6:	f000 f893 	bl	800ecd0 <udp_bind>
 800ebaa:	4603      	mov	r3, r0
 800ebac:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800ebae:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d002      	beq.n	800ebbc <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800ebb6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ebba:	e074      	b.n	800eca6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800ebbc:	68bb      	ldr	r3, [r7, #8]
 800ebbe:	891b      	ldrh	r3, [r3, #8]
 800ebc0:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800ebc4:	4293      	cmp	r3, r2
 800ebc6:	d902      	bls.n	800ebce <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800ebc8:	f04f 33ff 	mov.w	r3, #4294967295
 800ebcc:	e06b      	b.n	800eca6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800ebce:	2108      	movs	r1, #8
 800ebd0:	68b8      	ldr	r0, [r7, #8]
 800ebd2:	f7f9 ff4f 	bl	8008a74 <pbuf_add_header>
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d015      	beq.n	800ec08 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800ebdc:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ebe0:	2108      	movs	r1, #8
 800ebe2:	2022      	movs	r0, #34	; 0x22
 800ebe4:	f7f9 fcf8 	bl	80085d8 <pbuf_alloc>
 800ebe8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800ebea:	69fb      	ldr	r3, [r7, #28]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d102      	bne.n	800ebf6 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800ebf0:	f04f 33ff 	mov.w	r3, #4294967295
 800ebf4:	e057      	b.n	800eca6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800ebf6:	68bb      	ldr	r3, [r7, #8]
 800ebf8:	891b      	ldrh	r3, [r3, #8]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d006      	beq.n	800ec0c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800ebfe:	68b9      	ldr	r1, [r7, #8]
 800ec00:	69f8      	ldr	r0, [r7, #28]
 800ec02:	f7fa f8f1 	bl	8008de8 <pbuf_chain>
 800ec06:	e001      	b.n	800ec0c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800ec08:	68bb      	ldr	r3, [r7, #8]
 800ec0a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800ec0c:	69fb      	ldr	r3, [r7, #28]
 800ec0e:	895b      	ldrh	r3, [r3, #10]
 800ec10:	2b07      	cmp	r3, #7
 800ec12:	d806      	bhi.n	800ec22 <udp_sendto_if_src+0x11e>
 800ec14:	4b26      	ldr	r3, [pc, #152]	; (800ecb0 <udp_sendto_if_src+0x1ac>)
 800ec16:	f240 320d 	movw	r2, #781	; 0x30d
 800ec1a:	492c      	ldr	r1, [pc, #176]	; (800eccc <udp_sendto_if_src+0x1c8>)
 800ec1c:	4826      	ldr	r0, [pc, #152]	; (800ecb8 <udp_sendto_if_src+0x1b4>)
 800ec1e:	f004 fe1d 	bl	801385c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800ec22:	69fb      	ldr	r3, [r7, #28]
 800ec24:	685b      	ldr	r3, [r3, #4]
 800ec26:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	8a5b      	ldrh	r3, [r3, #18]
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	f7f8 fbff 	bl	8007430 <lwip_htons>
 800ec32:	4603      	mov	r3, r0
 800ec34:	461a      	mov	r2, r3
 800ec36:	697b      	ldr	r3, [r7, #20]
 800ec38:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800ec3a:	887b      	ldrh	r3, [r7, #2]
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	f7f8 fbf7 	bl	8007430 <lwip_htons>
 800ec42:	4603      	mov	r3, r0
 800ec44:	461a      	mov	r2, r3
 800ec46:	697b      	ldr	r3, [r7, #20]
 800ec48:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800ec4a:	697b      	ldr	r3, [r7, #20]
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	719a      	strb	r2, [r3, #6]
 800ec50:	2200      	movs	r2, #0
 800ec52:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800ec54:	69fb      	ldr	r3, [r7, #28]
 800ec56:	891b      	ldrh	r3, [r3, #8]
 800ec58:	4618      	mov	r0, r3
 800ec5a:	f7f8 fbe9 	bl	8007430 <lwip_htons>
 800ec5e:	4603      	mov	r3, r0
 800ec60:	461a      	mov	r2, r3
 800ec62:	697b      	ldr	r3, [r7, #20]
 800ec64:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800ec66:	2311      	movs	r3, #17
 800ec68:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	7adb      	ldrb	r3, [r3, #11]
 800ec6e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	7a9b      	ldrb	r3, [r3, #10]
 800ec74:	7cb9      	ldrb	r1, [r7, #18]
 800ec76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec78:	9202      	str	r2, [sp, #8]
 800ec7a:	7cfa      	ldrb	r2, [r7, #19]
 800ec7c:	9201      	str	r2, [sp, #4]
 800ec7e:	9300      	str	r3, [sp, #0]
 800ec80:	460b      	mov	r3, r1
 800ec82:	687a      	ldr	r2, [r7, #4]
 800ec84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ec86:	69f8      	ldr	r0, [r7, #28]
 800ec88:	f003 fb38 	bl	80122fc <ip4_output_if_src>
 800ec8c:	4603      	mov	r3, r0
 800ec8e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800ec90:	69fa      	ldr	r2, [r7, #28]
 800ec92:	68bb      	ldr	r3, [r7, #8]
 800ec94:	429a      	cmp	r2, r3
 800ec96:	d004      	beq.n	800eca2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800ec98:	69f8      	ldr	r0, [r7, #28]
 800ec9a:	f7f9 ff81 	bl	8008ba0 <pbuf_free>
    q = NULL;
 800ec9e:	2300      	movs	r3, #0
 800eca0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800eca2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800eca6:	4618      	mov	r0, r3
 800eca8:	3720      	adds	r7, #32
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	bd80      	pop	{r7, pc}
 800ecae:	bf00      	nop
 800ecb0:	08016804 	.word	0x08016804
 800ecb4:	080169f0 	.word	0x080169f0
 800ecb8:	08016858 	.word	0x08016858
 800ecbc:	08016a10 	.word	0x08016a10
 800ecc0:	08016a30 	.word	0x08016a30
 800ecc4:	08016a54 	.word	0x08016a54
 800ecc8:	08016a78 	.word	0x08016a78
 800eccc:	08016a9c 	.word	0x08016a9c

0800ecd0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b086      	sub	sp, #24
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	60f8      	str	r0, [r7, #12]
 800ecd8:	60b9      	str	r1, [r7, #8]
 800ecda:	4613      	mov	r3, r2
 800ecdc:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ecde:	68bb      	ldr	r3, [r7, #8]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d101      	bne.n	800ece8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800ece4:	4b39      	ldr	r3, [pc, #228]	; (800edcc <udp_bind+0xfc>)
 800ece6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d109      	bne.n	800ed02 <udp_bind+0x32>
 800ecee:	4b38      	ldr	r3, [pc, #224]	; (800edd0 <udp_bind+0x100>)
 800ecf0:	f240 32b7 	movw	r2, #951	; 0x3b7
 800ecf4:	4937      	ldr	r1, [pc, #220]	; (800edd4 <udp_bind+0x104>)
 800ecf6:	4838      	ldr	r0, [pc, #224]	; (800edd8 <udp_bind+0x108>)
 800ecf8:	f004 fdb0 	bl	801385c <iprintf>
 800ecfc:	f06f 030f 	mvn.w	r3, #15
 800ed00:	e060      	b.n	800edc4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800ed02:	2300      	movs	r3, #0
 800ed04:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ed06:	4b35      	ldr	r3, [pc, #212]	; (800eddc <udp_bind+0x10c>)
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	617b      	str	r3, [r7, #20]
 800ed0c:	e009      	b.n	800ed22 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800ed0e:	68fa      	ldr	r2, [r7, #12]
 800ed10:	697b      	ldr	r3, [r7, #20]
 800ed12:	429a      	cmp	r2, r3
 800ed14:	d102      	bne.n	800ed1c <udp_bind+0x4c>
      rebind = 1;
 800ed16:	2301      	movs	r3, #1
 800ed18:	74fb      	strb	r3, [r7, #19]
      break;
 800ed1a:	e005      	b.n	800ed28 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ed1c:	697b      	ldr	r3, [r7, #20]
 800ed1e:	68db      	ldr	r3, [r3, #12]
 800ed20:	617b      	str	r3, [r7, #20]
 800ed22:	697b      	ldr	r3, [r7, #20]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d1f2      	bne.n	800ed0e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800ed28:	88fb      	ldrh	r3, [r7, #6]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d109      	bne.n	800ed42 <udp_bind+0x72>
    port = udp_new_port();
 800ed2e:	f7ff fcc5 	bl	800e6bc <udp_new_port>
 800ed32:	4603      	mov	r3, r0
 800ed34:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800ed36:	88fb      	ldrh	r3, [r7, #6]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d12c      	bne.n	800ed96 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800ed3c:	f06f 0307 	mvn.w	r3, #7
 800ed40:	e040      	b.n	800edc4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ed42:	4b26      	ldr	r3, [pc, #152]	; (800eddc <udp_bind+0x10c>)
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	617b      	str	r3, [r7, #20]
 800ed48:	e022      	b.n	800ed90 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800ed4a:	68fa      	ldr	r2, [r7, #12]
 800ed4c:	697b      	ldr	r3, [r7, #20]
 800ed4e:	429a      	cmp	r2, r3
 800ed50:	d01b      	beq.n	800ed8a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800ed52:	697b      	ldr	r3, [r7, #20]
 800ed54:	8a5b      	ldrh	r3, [r3, #18]
 800ed56:	88fa      	ldrh	r2, [r7, #6]
 800ed58:	429a      	cmp	r2, r3
 800ed5a:	d116      	bne.n	800ed8a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ed5c:	697b      	ldr	r3, [r7, #20]
 800ed5e:	681a      	ldr	r2, [r3, #0]
 800ed60:	68bb      	ldr	r3, [r7, #8]
 800ed62:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800ed64:	429a      	cmp	r2, r3
 800ed66:	d00d      	beq.n	800ed84 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ed68:	68bb      	ldr	r3, [r7, #8]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d00a      	beq.n	800ed84 <udp_bind+0xb4>
 800ed6e:	68bb      	ldr	r3, [r7, #8]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d006      	beq.n	800ed84 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800ed76:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d003      	beq.n	800ed84 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800ed7c:	697b      	ldr	r3, [r7, #20]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d102      	bne.n	800ed8a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800ed84:	f06f 0307 	mvn.w	r3, #7
 800ed88:	e01c      	b.n	800edc4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ed8a:	697b      	ldr	r3, [r7, #20]
 800ed8c:	68db      	ldr	r3, [r3, #12]
 800ed8e:	617b      	str	r3, [r7, #20]
 800ed90:	697b      	ldr	r3, [r7, #20]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d1d9      	bne.n	800ed4a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800ed96:	68bb      	ldr	r3, [r7, #8]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d002      	beq.n	800eda2 <udp_bind+0xd2>
 800ed9c:	68bb      	ldr	r3, [r7, #8]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	e000      	b.n	800eda4 <udp_bind+0xd4>
 800eda2:	2300      	movs	r3, #0
 800eda4:	68fa      	ldr	r2, [r7, #12]
 800eda6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	88fa      	ldrh	r2, [r7, #6]
 800edac:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800edae:	7cfb      	ldrb	r3, [r7, #19]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d106      	bne.n	800edc2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800edb4:	4b09      	ldr	r3, [pc, #36]	; (800eddc <udp_bind+0x10c>)
 800edb6:	681a      	ldr	r2, [r3, #0]
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800edbc:	4a07      	ldr	r2, [pc, #28]	; (800eddc <udp_bind+0x10c>)
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800edc2:	2300      	movs	r3, #0
}
 800edc4:	4618      	mov	r0, r3
 800edc6:	3718      	adds	r7, #24
 800edc8:	46bd      	mov	sp, r7
 800edca:	bd80      	pop	{r7, pc}
 800edcc:	08017704 	.word	0x08017704
 800edd0:	08016804 	.word	0x08016804
 800edd4:	08016acc 	.word	0x08016acc
 800edd8:	08016858 	.word	0x08016858
 800eddc:	2000ef70 	.word	0x2000ef70

0800ede0 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ede0:	b580      	push	{r7, lr}
 800ede2:	b086      	sub	sp, #24
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	60f8      	str	r0, [r7, #12]
 800ede8:	60b9      	str	r1, [r7, #8]
 800edea:	4613      	mov	r3, r2
 800edec:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d109      	bne.n	800ee08 <udp_connect+0x28>
 800edf4:	4b2c      	ldr	r3, [pc, #176]	; (800eea8 <udp_connect+0xc8>)
 800edf6:	f240 4235 	movw	r2, #1077	; 0x435
 800edfa:	492c      	ldr	r1, [pc, #176]	; (800eeac <udp_connect+0xcc>)
 800edfc:	482c      	ldr	r0, [pc, #176]	; (800eeb0 <udp_connect+0xd0>)
 800edfe:	f004 fd2d 	bl	801385c <iprintf>
 800ee02:	f06f 030f 	mvn.w	r3, #15
 800ee06:	e04b      	b.n	800eea0 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800ee08:	68bb      	ldr	r3, [r7, #8]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d109      	bne.n	800ee22 <udp_connect+0x42>
 800ee0e:	4b26      	ldr	r3, [pc, #152]	; (800eea8 <udp_connect+0xc8>)
 800ee10:	f240 4236 	movw	r2, #1078	; 0x436
 800ee14:	4927      	ldr	r1, [pc, #156]	; (800eeb4 <udp_connect+0xd4>)
 800ee16:	4826      	ldr	r0, [pc, #152]	; (800eeb0 <udp_connect+0xd0>)
 800ee18:	f004 fd20 	bl	801385c <iprintf>
 800ee1c:	f06f 030f 	mvn.w	r3, #15
 800ee20:	e03e      	b.n	800eea0 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	8a5b      	ldrh	r3, [r3, #18]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d10f      	bne.n	800ee4a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800ee2a:	68f9      	ldr	r1, [r7, #12]
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	8a5b      	ldrh	r3, [r3, #18]
 800ee30:	461a      	mov	r2, r3
 800ee32:	68f8      	ldr	r0, [r7, #12]
 800ee34:	f7ff ff4c 	bl	800ecd0 <udp_bind>
 800ee38:	4603      	mov	r3, r0
 800ee3a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800ee3c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d002      	beq.n	800ee4a <udp_connect+0x6a>
      return err;
 800ee44:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ee48:	e02a      	b.n	800eea0 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800ee4a:	68bb      	ldr	r3, [r7, #8]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d002      	beq.n	800ee56 <udp_connect+0x76>
 800ee50:	68bb      	ldr	r3, [r7, #8]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	e000      	b.n	800ee58 <udp_connect+0x78>
 800ee56:	2300      	movs	r3, #0
 800ee58:	68fa      	ldr	r2, [r7, #12]
 800ee5a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	88fa      	ldrh	r2, [r7, #6]
 800ee60:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	7c1b      	ldrb	r3, [r3, #16]
 800ee66:	f043 0304 	orr.w	r3, r3, #4
 800ee6a:	b2da      	uxtb	r2, r3
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ee70:	4b11      	ldr	r3, [pc, #68]	; (800eeb8 <udp_connect+0xd8>)
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	617b      	str	r3, [r7, #20]
 800ee76:	e008      	b.n	800ee8a <udp_connect+0xaa>
    if (pcb == ipcb) {
 800ee78:	68fa      	ldr	r2, [r7, #12]
 800ee7a:	697b      	ldr	r3, [r7, #20]
 800ee7c:	429a      	cmp	r2, r3
 800ee7e:	d101      	bne.n	800ee84 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800ee80:	2300      	movs	r3, #0
 800ee82:	e00d      	b.n	800eea0 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ee84:	697b      	ldr	r3, [r7, #20]
 800ee86:	68db      	ldr	r3, [r3, #12]
 800ee88:	617b      	str	r3, [r7, #20]
 800ee8a:	697b      	ldr	r3, [r7, #20]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d1f3      	bne.n	800ee78 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800ee90:	4b09      	ldr	r3, [pc, #36]	; (800eeb8 <udp_connect+0xd8>)
 800ee92:	681a      	ldr	r2, [r3, #0]
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800ee98:	4a07      	ldr	r2, [pc, #28]	; (800eeb8 <udp_connect+0xd8>)
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800ee9e:	2300      	movs	r3, #0
}
 800eea0:	4618      	mov	r0, r3
 800eea2:	3718      	adds	r7, #24
 800eea4:	46bd      	mov	sp, r7
 800eea6:	bd80      	pop	{r7, pc}
 800eea8:	08016804 	.word	0x08016804
 800eeac:	08016ae4 	.word	0x08016ae4
 800eeb0:	08016858 	.word	0x08016858
 800eeb4:	08016b00 	.word	0x08016b00
 800eeb8:	2000ef70 	.word	0x2000ef70

0800eebc <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800eebc:	b580      	push	{r7, lr}
 800eebe:	b084      	sub	sp, #16
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	60f8      	str	r0, [r7, #12]
 800eec4:	60b9      	str	r1, [r7, #8]
 800eec6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d107      	bne.n	800eede <udp_recv+0x22>
 800eece:	4b08      	ldr	r3, [pc, #32]	; (800eef0 <udp_recv+0x34>)
 800eed0:	f240 428a 	movw	r2, #1162	; 0x48a
 800eed4:	4907      	ldr	r1, [pc, #28]	; (800eef4 <udp_recv+0x38>)
 800eed6:	4808      	ldr	r0, [pc, #32]	; (800eef8 <udp_recv+0x3c>)
 800eed8:	f004 fcc0 	bl	801385c <iprintf>
 800eedc:	e005      	b.n	800eeea <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	68ba      	ldr	r2, [r7, #8]
 800eee2:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	687a      	ldr	r2, [r7, #4]
 800eee8:	61da      	str	r2, [r3, #28]
}
 800eeea:	3710      	adds	r7, #16
 800eeec:	46bd      	mov	sp, r7
 800eeee:	bd80      	pop	{r7, pc}
 800eef0:	08016804 	.word	0x08016804
 800eef4:	08016b38 	.word	0x08016b38
 800eef8:	08016858 	.word	0x08016858

0800eefc <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b084      	sub	sp, #16
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d107      	bne.n	800ef1a <udp_remove+0x1e>
 800ef0a:	4b19      	ldr	r3, [pc, #100]	; (800ef70 <udp_remove+0x74>)
 800ef0c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800ef10:	4918      	ldr	r1, [pc, #96]	; (800ef74 <udp_remove+0x78>)
 800ef12:	4819      	ldr	r0, [pc, #100]	; (800ef78 <udp_remove+0x7c>)
 800ef14:	f004 fca2 	bl	801385c <iprintf>
 800ef18:	e026      	b.n	800ef68 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800ef1a:	4b18      	ldr	r3, [pc, #96]	; (800ef7c <udp_remove+0x80>)
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	687a      	ldr	r2, [r7, #4]
 800ef20:	429a      	cmp	r2, r3
 800ef22:	d105      	bne.n	800ef30 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800ef24:	4b15      	ldr	r3, [pc, #84]	; (800ef7c <udp_remove+0x80>)
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	68db      	ldr	r3, [r3, #12]
 800ef2a:	4a14      	ldr	r2, [pc, #80]	; (800ef7c <udp_remove+0x80>)
 800ef2c:	6013      	str	r3, [r2, #0]
 800ef2e:	e017      	b.n	800ef60 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800ef30:	4b12      	ldr	r3, [pc, #72]	; (800ef7c <udp_remove+0x80>)
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	60fb      	str	r3, [r7, #12]
 800ef36:	e010      	b.n	800ef5a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	68db      	ldr	r3, [r3, #12]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d009      	beq.n	800ef54 <udp_remove+0x58>
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	68db      	ldr	r3, [r3, #12]
 800ef44:	687a      	ldr	r2, [r7, #4]
 800ef46:	429a      	cmp	r2, r3
 800ef48:	d104      	bne.n	800ef54 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	68da      	ldr	r2, [r3, #12]
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	60da      	str	r2, [r3, #12]
        break;
 800ef52:	e005      	b.n	800ef60 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	68db      	ldr	r3, [r3, #12]
 800ef58:	60fb      	str	r3, [r7, #12]
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d1eb      	bne.n	800ef38 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800ef60:	6879      	ldr	r1, [r7, #4]
 800ef62:	2000      	movs	r0, #0
 800ef64:	f7f8 ff6c 	bl	8007e40 <memp_free>
}
 800ef68:	3710      	adds	r7, #16
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	bd80      	pop	{r7, pc}
 800ef6e:	bf00      	nop
 800ef70:	08016804 	.word	0x08016804
 800ef74:	08016b50 	.word	0x08016b50
 800ef78:	08016858 	.word	0x08016858
 800ef7c:	2000ef70 	.word	0x2000ef70

0800ef80 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b082      	sub	sp, #8
 800ef84:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800ef86:	2000      	movs	r0, #0
 800ef88:	f7f8 ff08 	bl	8007d9c <memp_malloc>
 800ef8c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d007      	beq.n	800efa4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800ef94:	2220      	movs	r2, #32
 800ef96:	2100      	movs	r1, #0
 800ef98:	6878      	ldr	r0, [r7, #4]
 800ef9a:	f004 fbfc 	bl	8013796 <memset>
    pcb->ttl = UDP_TTL;
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	22ff      	movs	r2, #255	; 0xff
 800efa2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800efa4:	687b      	ldr	r3, [r7, #4]
}
 800efa6:	4618      	mov	r0, r3
 800efa8:	3708      	adds	r7, #8
 800efaa:	46bd      	mov	sp, r7
 800efac:	bd80      	pop	{r7, pc}
	...

0800efb0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800efb0:	b480      	push	{r7}
 800efb2:	b085      	sub	sp, #20
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
 800efb8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d01e      	beq.n	800effe <udp_netif_ip_addr_changed+0x4e>
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d01a      	beq.n	800effe <udp_netif_ip_addr_changed+0x4e>
 800efc8:	683b      	ldr	r3, [r7, #0]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d017      	beq.n	800effe <udp_netif_ip_addr_changed+0x4e>
 800efce:	683b      	ldr	r3, [r7, #0]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d013      	beq.n	800effe <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800efd6:	4b0d      	ldr	r3, [pc, #52]	; (800f00c <udp_netif_ip_addr_changed+0x5c>)
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	60fb      	str	r3, [r7, #12]
 800efdc:	e00c      	b.n	800eff8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	681a      	ldr	r2, [r3, #0]
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	429a      	cmp	r2, r3
 800efe8:	d103      	bne.n	800eff2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800efea:	683b      	ldr	r3, [r7, #0]
 800efec:	681a      	ldr	r2, [r3, #0]
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	68db      	ldr	r3, [r3, #12]
 800eff6:	60fb      	str	r3, [r7, #12]
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d1ef      	bne.n	800efde <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800effe:	bf00      	nop
 800f000:	3714      	adds	r7, #20
 800f002:	46bd      	mov	sp, r7
 800f004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f008:	4770      	bx	lr
 800f00a:	bf00      	nop
 800f00c:	2000ef70 	.word	0x2000ef70

0800f010 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800f010:	b580      	push	{r7, lr}
 800f012:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800f014:	4b20      	ldr	r3, [pc, #128]	; (800f098 <dhcp_inc_pcb_refcount+0x88>)
 800f016:	781b      	ldrb	r3, [r3, #0]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d133      	bne.n	800f084 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800f01c:	4b1f      	ldr	r3, [pc, #124]	; (800f09c <dhcp_inc_pcb_refcount+0x8c>)
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d005      	beq.n	800f030 <dhcp_inc_pcb_refcount+0x20>
 800f024:	4b1e      	ldr	r3, [pc, #120]	; (800f0a0 <dhcp_inc_pcb_refcount+0x90>)
 800f026:	22e5      	movs	r2, #229	; 0xe5
 800f028:	491e      	ldr	r1, [pc, #120]	; (800f0a4 <dhcp_inc_pcb_refcount+0x94>)
 800f02a:	481f      	ldr	r0, [pc, #124]	; (800f0a8 <dhcp_inc_pcb_refcount+0x98>)
 800f02c:	f004 fc16 	bl	801385c <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800f030:	f7ff ffa6 	bl	800ef80 <udp_new>
 800f034:	4603      	mov	r3, r0
 800f036:	4a19      	ldr	r2, [pc, #100]	; (800f09c <dhcp_inc_pcb_refcount+0x8c>)
 800f038:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 800f03a:	4b18      	ldr	r3, [pc, #96]	; (800f09c <dhcp_inc_pcb_refcount+0x8c>)
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d102      	bne.n	800f048 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800f042:	f04f 33ff 	mov.w	r3, #4294967295
 800f046:	e024      	b.n	800f092 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800f048:	4b14      	ldr	r3, [pc, #80]	; (800f09c <dhcp_inc_pcb_refcount+0x8c>)
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	7a5a      	ldrb	r2, [r3, #9]
 800f04e:	4b13      	ldr	r3, [pc, #76]	; (800f09c <dhcp_inc_pcb_refcount+0x8c>)
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	f042 0220 	orr.w	r2, r2, #32
 800f056:	b2d2      	uxtb	r2, r2
 800f058:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800f05a:	4b10      	ldr	r3, [pc, #64]	; (800f09c <dhcp_inc_pcb_refcount+0x8c>)
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	2244      	movs	r2, #68	; 0x44
 800f060:	4912      	ldr	r1, [pc, #72]	; (800f0ac <dhcp_inc_pcb_refcount+0x9c>)
 800f062:	4618      	mov	r0, r3
 800f064:	f7ff fe34 	bl	800ecd0 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800f068:	4b0c      	ldr	r3, [pc, #48]	; (800f09c <dhcp_inc_pcb_refcount+0x8c>)
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	2243      	movs	r2, #67	; 0x43
 800f06e:	490f      	ldr	r1, [pc, #60]	; (800f0ac <dhcp_inc_pcb_refcount+0x9c>)
 800f070:	4618      	mov	r0, r3
 800f072:	f7ff feb5 	bl	800ede0 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800f076:	4b09      	ldr	r3, [pc, #36]	; (800f09c <dhcp_inc_pcb_refcount+0x8c>)
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	2200      	movs	r2, #0
 800f07c:	490c      	ldr	r1, [pc, #48]	; (800f0b0 <dhcp_inc_pcb_refcount+0xa0>)
 800f07e:	4618      	mov	r0, r3
 800f080:	f7ff ff1c 	bl	800eebc <udp_recv>
  }

  dhcp_pcb_refcount++;
 800f084:	4b04      	ldr	r3, [pc, #16]	; (800f098 <dhcp_inc_pcb_refcount+0x88>)
 800f086:	781b      	ldrb	r3, [r3, #0]
 800f088:	3301      	adds	r3, #1
 800f08a:	b2da      	uxtb	r2, r3
 800f08c:	4b02      	ldr	r3, [pc, #8]	; (800f098 <dhcp_inc_pcb_refcount+0x88>)
 800f08e:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800f090:	2300      	movs	r3, #0
}
 800f092:	4618      	mov	r0, r3
 800f094:	bd80      	pop	{r7, pc}
 800f096:	bf00      	nop
 800f098:	2000854c 	.word	0x2000854c
 800f09c:	20008548 	.word	0x20008548
 800f0a0:	08016b68 	.word	0x08016b68
 800f0a4:	08016ba0 	.word	0x08016ba0
 800f0a8:	08016bc8 	.word	0x08016bc8
 800f0ac:	08017704 	.word	0x08017704
 800f0b0:	08010945 	.word	0x08010945

0800f0b4 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800f0b8:	4b0e      	ldr	r3, [pc, #56]	; (800f0f4 <dhcp_dec_pcb_refcount+0x40>)
 800f0ba:	781b      	ldrb	r3, [r3, #0]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d105      	bne.n	800f0cc <dhcp_dec_pcb_refcount+0x18>
 800f0c0:	4b0d      	ldr	r3, [pc, #52]	; (800f0f8 <dhcp_dec_pcb_refcount+0x44>)
 800f0c2:	22ff      	movs	r2, #255	; 0xff
 800f0c4:	490d      	ldr	r1, [pc, #52]	; (800f0fc <dhcp_dec_pcb_refcount+0x48>)
 800f0c6:	480e      	ldr	r0, [pc, #56]	; (800f100 <dhcp_dec_pcb_refcount+0x4c>)
 800f0c8:	f004 fbc8 	bl	801385c <iprintf>
  dhcp_pcb_refcount--;
 800f0cc:	4b09      	ldr	r3, [pc, #36]	; (800f0f4 <dhcp_dec_pcb_refcount+0x40>)
 800f0ce:	781b      	ldrb	r3, [r3, #0]
 800f0d0:	3b01      	subs	r3, #1
 800f0d2:	b2da      	uxtb	r2, r3
 800f0d4:	4b07      	ldr	r3, [pc, #28]	; (800f0f4 <dhcp_dec_pcb_refcount+0x40>)
 800f0d6:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800f0d8:	4b06      	ldr	r3, [pc, #24]	; (800f0f4 <dhcp_dec_pcb_refcount+0x40>)
 800f0da:	781b      	ldrb	r3, [r3, #0]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d107      	bne.n	800f0f0 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800f0e0:	4b08      	ldr	r3, [pc, #32]	; (800f104 <dhcp_dec_pcb_refcount+0x50>)
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	f7ff ff09 	bl	800eefc <udp_remove>
    dhcp_pcb = NULL;
 800f0ea:	4b06      	ldr	r3, [pc, #24]	; (800f104 <dhcp_dec_pcb_refcount+0x50>)
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	601a      	str	r2, [r3, #0]
  }
}
 800f0f0:	bf00      	nop
 800f0f2:	bd80      	pop	{r7, pc}
 800f0f4:	2000854c 	.word	0x2000854c
 800f0f8:	08016b68 	.word	0x08016b68
 800f0fc:	08016bf0 	.word	0x08016bf0
 800f100:	08016bc8 	.word	0x08016bc8
 800f104:	20008548 	.word	0x20008548

0800f108 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800f108:	b580      	push	{r7, lr}
 800f10a:	b084      	sub	sp, #16
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f114:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800f116:	210c      	movs	r1, #12
 800f118:	68f8      	ldr	r0, [r7, #12]
 800f11a:	f001 f855 	bl	80101c8 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800f11e:	4b06      	ldr	r3, [pc, #24]	; (800f138 <dhcp_handle_nak+0x30>)
 800f120:	4a05      	ldr	r2, [pc, #20]	; (800f138 <dhcp_handle_nak+0x30>)
 800f122:	4905      	ldr	r1, [pc, #20]	; (800f138 <dhcp_handle_nak+0x30>)
 800f124:	6878      	ldr	r0, [r7, #4]
 800f126:	f7f9 f82d 	bl	8008184 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800f12a:	6878      	ldr	r0, [r7, #4]
 800f12c:	f000 fc48 	bl	800f9c0 <dhcp_discover>
}
 800f130:	bf00      	nop
 800f132:	3710      	adds	r7, #16
 800f134:	46bd      	mov	sp, r7
 800f136:	bd80      	pop	{r7, pc}
 800f138:	08017704 	.word	0x08017704

0800f13c <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800f13c:	b580      	push	{r7, lr}
 800f13e:	b084      	sub	sp, #16
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f148:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800f14a:	2108      	movs	r1, #8
 800f14c:	68f8      	ldr	r0, [r7, #12]
 800f14e:	f001 f83b 	bl	80101c8 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	331c      	adds	r3, #28
 800f156:	2200      	movs	r2, #0
 800f158:	4619      	mov	r1, r3
 800f15a:	6878      	ldr	r0, [r7, #4]
 800f15c:	f002 fb3c 	bl	80117d8 <etharp_query>
 800f160:	4603      	mov	r3, r0
 800f162:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	799b      	ldrb	r3, [r3, #6]
 800f168:	2bff      	cmp	r3, #255	; 0xff
 800f16a:	d005      	beq.n	800f178 <dhcp_check+0x3c>
    dhcp->tries++;
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	799b      	ldrb	r3, [r3, #6]
 800f170:	3301      	adds	r3, #1
 800f172:	b2da      	uxtb	r2, r3
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800f178:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800f17c:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f17e:	893b      	ldrh	r3, [r7, #8]
 800f180:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f184:	4a06      	ldr	r2, [pc, #24]	; (800f1a0 <dhcp_check+0x64>)
 800f186:	fb82 1203 	smull	r1, r2, r2, r3
 800f18a:	1152      	asrs	r2, r2, #5
 800f18c:	17db      	asrs	r3, r3, #31
 800f18e:	1ad3      	subs	r3, r2, r3
 800f190:	b29a      	uxth	r2, r3
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800f196:	bf00      	nop
 800f198:	3710      	adds	r7, #16
 800f19a:	46bd      	mov	sp, r7
 800f19c:	bd80      	pop	{r7, pc}
 800f19e:	bf00      	nop
 800f1a0:	10624dd3 	.word	0x10624dd3

0800f1a4 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b084      	sub	sp, #16
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	6078      	str	r0, [r7, #4]
 800f1ac:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1b2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800f1b4:	4b0c      	ldr	r3, [pc, #48]	; (800f1e8 <dhcp_handle_offer+0x44>)
 800f1b6:	789b      	ldrb	r3, [r3, #2]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d011      	beq.n	800f1e0 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	2200      	movs	r2, #0
 800f1c0:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800f1c2:	4b0a      	ldr	r3, [pc, #40]	; (800f1ec <dhcp_handle_offer+0x48>)
 800f1c4:	689b      	ldr	r3, [r3, #8]
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	f7f8 f947 	bl	800745a <lwip_htonl>
 800f1cc:	4602      	mov	r2, r0
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800f1d2:	683b      	ldr	r3, [r7, #0]
 800f1d4:	691a      	ldr	r2, [r3, #16]
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800f1da:	6878      	ldr	r0, [r7, #4]
 800f1dc:	f000 f808 	bl	800f1f0 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800f1e0:	bf00      	nop
 800f1e2:	3710      	adds	r7, #16
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	bd80      	pop	{r7, pc}
 800f1e8:	2000ef74 	.word	0x2000ef74
 800f1ec:	2000ef7c 	.word	0x2000ef7c

0800f1f0 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800f1f0:	b5b0      	push	{r4, r5, r7, lr}
 800f1f2:	b08a      	sub	sp, #40	; 0x28
 800f1f4:	af02      	add	r7, sp, #8
 800f1f6:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d109      	bne.n	800f212 <dhcp_select+0x22>
 800f1fe:	4b71      	ldr	r3, [pc, #452]	; (800f3c4 <dhcp_select+0x1d4>)
 800f200:	f240 1277 	movw	r2, #375	; 0x177
 800f204:	4970      	ldr	r1, [pc, #448]	; (800f3c8 <dhcp_select+0x1d8>)
 800f206:	4871      	ldr	r0, [pc, #452]	; (800f3cc <dhcp_select+0x1dc>)
 800f208:	f004 fb28 	bl	801385c <iprintf>
 800f20c:	f06f 030f 	mvn.w	r3, #15
 800f210:	e0d3      	b.n	800f3ba <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f216:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800f218:	69bb      	ldr	r3, [r7, #24]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d109      	bne.n	800f232 <dhcp_select+0x42>
 800f21e:	4b69      	ldr	r3, [pc, #420]	; (800f3c4 <dhcp_select+0x1d4>)
 800f220:	f240 1279 	movw	r2, #377	; 0x179
 800f224:	496a      	ldr	r1, [pc, #424]	; (800f3d0 <dhcp_select+0x1e0>)
 800f226:	4869      	ldr	r0, [pc, #420]	; (800f3cc <dhcp_select+0x1dc>)
 800f228:	f004 fb18 	bl	801385c <iprintf>
 800f22c:	f06f 0305 	mvn.w	r3, #5
 800f230:	e0c3      	b.n	800f3ba <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800f232:	2101      	movs	r1, #1
 800f234:	69b8      	ldr	r0, [r7, #24]
 800f236:	f000 ffc7 	bl	80101c8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800f23a:	f107 030c 	add.w	r3, r7, #12
 800f23e:	2203      	movs	r2, #3
 800f240:	69b9      	ldr	r1, [r7, #24]
 800f242:	6878      	ldr	r0, [r7, #4]
 800f244:	f001 fc4c 	bl	8010ae0 <dhcp_create_msg>
 800f248:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800f24a:	697b      	ldr	r3, [r7, #20]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	f000 8085 	beq.w	800f35c <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f252:	697b      	ldr	r3, [r7, #20]
 800f254:	685b      	ldr	r3, [r3, #4]
 800f256:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f258:	89b8      	ldrh	r0, [r7, #12]
 800f25a:	693b      	ldr	r3, [r7, #16]
 800f25c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f260:	2302      	movs	r3, #2
 800f262:	2239      	movs	r2, #57	; 0x39
 800f264:	f000 ffca 	bl	80101fc <dhcp_option>
 800f268:	4603      	mov	r3, r0
 800f26a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800f26c:	89b8      	ldrh	r0, [r7, #12]
 800f26e:	693b      	ldr	r3, [r7, #16]
 800f270:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f278:	461a      	mov	r2, r3
 800f27a:	f001 f819 	bl	80102b0 <dhcp_option_short>
 800f27e:	4603      	mov	r3, r0
 800f280:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800f282:	89b8      	ldrh	r0, [r7, #12]
 800f284:	693b      	ldr	r3, [r7, #16]
 800f286:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f28a:	2304      	movs	r3, #4
 800f28c:	2232      	movs	r2, #50	; 0x32
 800f28e:	f000 ffb5 	bl	80101fc <dhcp_option>
 800f292:	4603      	mov	r3, r0
 800f294:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800f296:	89bc      	ldrh	r4, [r7, #12]
 800f298:	693b      	ldr	r3, [r7, #16]
 800f29a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800f29e:	69bb      	ldr	r3, [r7, #24]
 800f2a0:	69db      	ldr	r3, [r3, #28]
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	f7f8 f8d9 	bl	800745a <lwip_htonl>
 800f2a8:	4603      	mov	r3, r0
 800f2aa:	461a      	mov	r2, r3
 800f2ac:	4629      	mov	r1, r5
 800f2ae:	4620      	mov	r0, r4
 800f2b0:	f001 f830 	bl	8010314 <dhcp_option_long>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800f2b8:	89b8      	ldrh	r0, [r7, #12]
 800f2ba:	693b      	ldr	r3, [r7, #16]
 800f2bc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f2c0:	2304      	movs	r3, #4
 800f2c2:	2236      	movs	r2, #54	; 0x36
 800f2c4:	f000 ff9a 	bl	80101fc <dhcp_option>
 800f2c8:	4603      	mov	r3, r0
 800f2ca:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800f2cc:	89bc      	ldrh	r4, [r7, #12]
 800f2ce:	693b      	ldr	r3, [r7, #16]
 800f2d0:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800f2d4:	69bb      	ldr	r3, [r7, #24]
 800f2d6:	699b      	ldr	r3, [r3, #24]
 800f2d8:	4618      	mov	r0, r3
 800f2da:	f7f8 f8be 	bl	800745a <lwip_htonl>
 800f2de:	4603      	mov	r3, r0
 800f2e0:	461a      	mov	r2, r3
 800f2e2:	4629      	mov	r1, r5
 800f2e4:	4620      	mov	r0, r4
 800f2e6:	f001 f815 	bl	8010314 <dhcp_option_long>
 800f2ea:	4603      	mov	r3, r0
 800f2ec:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f2ee:	89b8      	ldrh	r0, [r7, #12]
 800f2f0:	693b      	ldr	r3, [r7, #16]
 800f2f2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f2f6:	2303      	movs	r3, #3
 800f2f8:	2237      	movs	r2, #55	; 0x37
 800f2fa:	f000 ff7f 	bl	80101fc <dhcp_option>
 800f2fe:	4603      	mov	r3, r0
 800f300:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f302:	2300      	movs	r3, #0
 800f304:	77bb      	strb	r3, [r7, #30]
 800f306:	e00e      	b.n	800f326 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800f308:	89b8      	ldrh	r0, [r7, #12]
 800f30a:	693b      	ldr	r3, [r7, #16]
 800f30c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f310:	7fbb      	ldrb	r3, [r7, #30]
 800f312:	4a30      	ldr	r2, [pc, #192]	; (800f3d4 <dhcp_select+0x1e4>)
 800f314:	5cd3      	ldrb	r3, [r2, r3]
 800f316:	461a      	mov	r2, r3
 800f318:	f000 ffa4 	bl	8010264 <dhcp_option_byte>
 800f31c:	4603      	mov	r3, r0
 800f31e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f320:	7fbb      	ldrb	r3, [r7, #30]
 800f322:	3301      	adds	r3, #1
 800f324:	77bb      	strb	r3, [r7, #30]
 800f326:	7fbb      	ldrb	r3, [r7, #30]
 800f328:	2b02      	cmp	r3, #2
 800f32a:	d9ed      	bls.n	800f308 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f32c:	89b8      	ldrh	r0, [r7, #12]
 800f32e:	693b      	ldr	r3, [r7, #16]
 800f330:	33f0      	adds	r3, #240	; 0xf0
 800f332:	697a      	ldr	r2, [r7, #20]
 800f334:	4619      	mov	r1, r3
 800f336:	f001 fca9 	bl	8010c8c <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800f33a:	4b27      	ldr	r3, [pc, #156]	; (800f3d8 <dhcp_select+0x1e8>)
 800f33c:	6818      	ldr	r0, [r3, #0]
 800f33e:	4b27      	ldr	r3, [pc, #156]	; (800f3dc <dhcp_select+0x1ec>)
 800f340:	9301      	str	r3, [sp, #4]
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	9300      	str	r3, [sp, #0]
 800f346:	2343      	movs	r3, #67	; 0x43
 800f348:	4a25      	ldr	r2, [pc, #148]	; (800f3e0 <dhcp_select+0x1f0>)
 800f34a:	6979      	ldr	r1, [r7, #20]
 800f34c:	f7ff fbda 	bl	800eb04 <udp_sendto_if_src>
 800f350:	4603      	mov	r3, r0
 800f352:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800f354:	6978      	ldr	r0, [r7, #20]
 800f356:	f7f9 fc23 	bl	8008ba0 <pbuf_free>
 800f35a:	e001      	b.n	800f360 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800f35c:	23ff      	movs	r3, #255	; 0xff
 800f35e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800f360:	69bb      	ldr	r3, [r7, #24]
 800f362:	799b      	ldrb	r3, [r3, #6]
 800f364:	2bff      	cmp	r3, #255	; 0xff
 800f366:	d005      	beq.n	800f374 <dhcp_select+0x184>
    dhcp->tries++;
 800f368:	69bb      	ldr	r3, [r7, #24]
 800f36a:	799b      	ldrb	r3, [r3, #6]
 800f36c:	3301      	adds	r3, #1
 800f36e:	b2da      	uxtb	r2, r3
 800f370:	69bb      	ldr	r3, [r7, #24]
 800f372:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800f374:	69bb      	ldr	r3, [r7, #24]
 800f376:	799b      	ldrb	r3, [r3, #6]
 800f378:	2b05      	cmp	r3, #5
 800f37a:	d80d      	bhi.n	800f398 <dhcp_select+0x1a8>
 800f37c:	69bb      	ldr	r3, [r7, #24]
 800f37e:	799b      	ldrb	r3, [r3, #6]
 800f380:	461a      	mov	r2, r3
 800f382:	2301      	movs	r3, #1
 800f384:	4093      	lsls	r3, r2
 800f386:	b29b      	uxth	r3, r3
 800f388:	461a      	mov	r2, r3
 800f38a:	0152      	lsls	r2, r2, #5
 800f38c:	1ad2      	subs	r2, r2, r3
 800f38e:	0092      	lsls	r2, r2, #2
 800f390:	4413      	add	r3, r2
 800f392:	00db      	lsls	r3, r3, #3
 800f394:	b29b      	uxth	r3, r3
 800f396:	e001      	b.n	800f39c <dhcp_select+0x1ac>
 800f398:	f64e 2360 	movw	r3, #60000	; 0xea60
 800f39c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f39e:	89fb      	ldrh	r3, [r7, #14]
 800f3a0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f3a4:	4a0f      	ldr	r2, [pc, #60]	; (800f3e4 <dhcp_select+0x1f4>)
 800f3a6:	fb82 1203 	smull	r1, r2, r2, r3
 800f3aa:	1152      	asrs	r2, r2, #5
 800f3ac:	17db      	asrs	r3, r3, #31
 800f3ae:	1ad3      	subs	r3, r2, r3
 800f3b0:	b29a      	uxth	r2, r3
 800f3b2:	69bb      	ldr	r3, [r7, #24]
 800f3b4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f3b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	3720      	adds	r7, #32
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	bdb0      	pop	{r4, r5, r7, pc}
 800f3c2:	bf00      	nop
 800f3c4:	08016b68 	.word	0x08016b68
 800f3c8:	08016c14 	.word	0x08016c14
 800f3cc:	08016bc8 	.word	0x08016bc8
 800f3d0:	08016c30 	.word	0x08016c30
 800f3d4:	2000001c 	.word	0x2000001c
 800f3d8:	20008548 	.word	0x20008548
 800f3dc:	08017704 	.word	0x08017704
 800f3e0:	08017708 	.word	0x08017708
 800f3e4:	10624dd3 	.word	0x10624dd3

0800f3e8 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b082      	sub	sp, #8
 800f3ec:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800f3ee:	4b27      	ldr	r3, [pc, #156]	; (800f48c <dhcp_coarse_tmr+0xa4>)
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	607b      	str	r3, [r7, #4]
 800f3f4:	e042      	b.n	800f47c <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3fa:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800f3fc:	683b      	ldr	r3, [r7, #0]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d039      	beq.n	800f476 <dhcp_coarse_tmr+0x8e>
 800f402:	683b      	ldr	r3, [r7, #0]
 800f404:	795b      	ldrb	r3, [r3, #5]
 800f406:	2b00      	cmp	r3, #0
 800f408:	d035      	beq.n	800f476 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800f40a:	683b      	ldr	r3, [r7, #0]
 800f40c:	8a9b      	ldrh	r3, [r3, #20]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d012      	beq.n	800f438 <dhcp_coarse_tmr+0x50>
 800f412:	683b      	ldr	r3, [r7, #0]
 800f414:	8a5b      	ldrh	r3, [r3, #18]
 800f416:	3301      	adds	r3, #1
 800f418:	b29a      	uxth	r2, r3
 800f41a:	683b      	ldr	r3, [r7, #0]
 800f41c:	825a      	strh	r2, [r3, #18]
 800f41e:	683b      	ldr	r3, [r7, #0]
 800f420:	8a5a      	ldrh	r2, [r3, #18]
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	8a9b      	ldrh	r3, [r3, #20]
 800f426:	429a      	cmp	r2, r3
 800f428:	d106      	bne.n	800f438 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800f42a:	6878      	ldr	r0, [r7, #4]
 800f42c:	f000 fe32 	bl	8010094 <dhcp_release_and_stop>
        dhcp_start(netif);
 800f430:	6878      	ldr	r0, [r7, #4]
 800f432:	f000 f969 	bl	800f708 <dhcp_start>
 800f436:	e01e      	b.n	800f476 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800f438:	683b      	ldr	r3, [r7, #0]
 800f43a:	8a1b      	ldrh	r3, [r3, #16]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d00b      	beq.n	800f458 <dhcp_coarse_tmr+0x70>
 800f440:	683b      	ldr	r3, [r7, #0]
 800f442:	8a1b      	ldrh	r3, [r3, #16]
 800f444:	1e5a      	subs	r2, r3, #1
 800f446:	b291      	uxth	r1, r2
 800f448:	683a      	ldr	r2, [r7, #0]
 800f44a:	8211      	strh	r1, [r2, #16]
 800f44c:	2b01      	cmp	r3, #1
 800f44e:	d103      	bne.n	800f458 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800f450:	6878      	ldr	r0, [r7, #4]
 800f452:	f000 f8c6 	bl	800f5e2 <dhcp_t2_timeout>
 800f456:	e00e      	b.n	800f476 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800f458:	683b      	ldr	r3, [r7, #0]
 800f45a:	89db      	ldrh	r3, [r3, #14]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d00a      	beq.n	800f476 <dhcp_coarse_tmr+0x8e>
 800f460:	683b      	ldr	r3, [r7, #0]
 800f462:	89db      	ldrh	r3, [r3, #14]
 800f464:	1e5a      	subs	r2, r3, #1
 800f466:	b291      	uxth	r1, r2
 800f468:	683a      	ldr	r2, [r7, #0]
 800f46a:	81d1      	strh	r1, [r2, #14]
 800f46c:	2b01      	cmp	r3, #1
 800f46e:	d102      	bne.n	800f476 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800f470:	6878      	ldr	r0, [r7, #4]
 800f472:	f000 f888 	bl	800f586 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	607b      	str	r3, [r7, #4]
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d1b9      	bne.n	800f3f6 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800f482:	bf00      	nop
 800f484:	bf00      	nop
 800f486:	3708      	adds	r7, #8
 800f488:	46bd      	mov	sp, r7
 800f48a:	bd80      	pop	{r7, pc}
 800f48c:	2000ef48 	.word	0x2000ef48

0800f490 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b082      	sub	sp, #8
 800f494:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800f496:	4b16      	ldr	r3, [pc, #88]	; (800f4f0 <dhcp_fine_tmr+0x60>)
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	607b      	str	r3, [r7, #4]
 800f49c:	e020      	b.n	800f4e0 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4a2:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800f4a4:	683b      	ldr	r3, [r7, #0]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d017      	beq.n	800f4da <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800f4aa:	683b      	ldr	r3, [r7, #0]
 800f4ac:	891b      	ldrh	r3, [r3, #8]
 800f4ae:	2b01      	cmp	r3, #1
 800f4b0:	d906      	bls.n	800f4c0 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800f4b2:	683b      	ldr	r3, [r7, #0]
 800f4b4:	891b      	ldrh	r3, [r3, #8]
 800f4b6:	3b01      	subs	r3, #1
 800f4b8:	b29a      	uxth	r2, r3
 800f4ba:	683b      	ldr	r3, [r7, #0]
 800f4bc:	811a      	strh	r2, [r3, #8]
 800f4be:	e00c      	b.n	800f4da <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800f4c0:	683b      	ldr	r3, [r7, #0]
 800f4c2:	891b      	ldrh	r3, [r3, #8]
 800f4c4:	2b01      	cmp	r3, #1
 800f4c6:	d108      	bne.n	800f4da <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800f4c8:	683b      	ldr	r3, [r7, #0]
 800f4ca:	891b      	ldrh	r3, [r3, #8]
 800f4cc:	3b01      	subs	r3, #1
 800f4ce:	b29a      	uxth	r2, r3
 800f4d0:	683b      	ldr	r3, [r7, #0]
 800f4d2:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800f4d4:	6878      	ldr	r0, [r7, #4]
 800f4d6:	f000 f80d 	bl	800f4f4 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	607b      	str	r3, [r7, #4]
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d1db      	bne.n	800f49e <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800f4e6:	bf00      	nop
 800f4e8:	bf00      	nop
 800f4ea:	3708      	adds	r7, #8
 800f4ec:	46bd      	mov	sp, r7
 800f4ee:	bd80      	pop	{r7, pc}
 800f4f0:	2000ef48 	.word	0x2000ef48

0800f4f4 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	b084      	sub	sp, #16
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f500:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	795b      	ldrb	r3, [r3, #5]
 800f506:	2b0c      	cmp	r3, #12
 800f508:	d003      	beq.n	800f512 <dhcp_timeout+0x1e>
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	795b      	ldrb	r3, [r3, #5]
 800f50e:	2b06      	cmp	r3, #6
 800f510:	d103      	bne.n	800f51a <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800f512:	6878      	ldr	r0, [r7, #4]
 800f514:	f000 fa54 	bl	800f9c0 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800f518:	e031      	b.n	800f57e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	795b      	ldrb	r3, [r3, #5]
 800f51e:	2b01      	cmp	r3, #1
 800f520:	d10e      	bne.n	800f540 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	799b      	ldrb	r3, [r3, #6]
 800f526:	2b05      	cmp	r3, #5
 800f528:	d803      	bhi.n	800f532 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800f52a:	6878      	ldr	r0, [r7, #4]
 800f52c:	f7ff fe60 	bl	800f1f0 <dhcp_select>
}
 800f530:	e025      	b.n	800f57e <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800f532:	6878      	ldr	r0, [r7, #4]
 800f534:	f000 fdae 	bl	8010094 <dhcp_release_and_stop>
      dhcp_start(netif);
 800f538:	6878      	ldr	r0, [r7, #4]
 800f53a:	f000 f8e5 	bl	800f708 <dhcp_start>
}
 800f53e:	e01e      	b.n	800f57e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	795b      	ldrb	r3, [r3, #5]
 800f544:	2b08      	cmp	r3, #8
 800f546:	d10b      	bne.n	800f560 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	799b      	ldrb	r3, [r3, #6]
 800f54c:	2b01      	cmp	r3, #1
 800f54e:	d803      	bhi.n	800f558 <dhcp_timeout+0x64>
      dhcp_check(netif);
 800f550:	6878      	ldr	r0, [r7, #4]
 800f552:	f7ff fdf3 	bl	800f13c <dhcp_check>
}
 800f556:	e012      	b.n	800f57e <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800f558:	6878      	ldr	r0, [r7, #4]
 800f55a:	f000 fad3 	bl	800fb04 <dhcp_bind>
}
 800f55e:	e00e      	b.n	800f57e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	795b      	ldrb	r3, [r3, #5]
 800f564:	2b03      	cmp	r3, #3
 800f566:	d10a      	bne.n	800f57e <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	799b      	ldrb	r3, [r3, #6]
 800f56c:	2b01      	cmp	r3, #1
 800f56e:	d803      	bhi.n	800f578 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800f570:	6878      	ldr	r0, [r7, #4]
 800f572:	f000 fcd9 	bl	800ff28 <dhcp_reboot>
}
 800f576:	e002      	b.n	800f57e <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800f578:	6878      	ldr	r0, [r7, #4]
 800f57a:	f000 fa21 	bl	800f9c0 <dhcp_discover>
}
 800f57e:	bf00      	nop
 800f580:	3710      	adds	r7, #16
 800f582:	46bd      	mov	sp, r7
 800f584:	bd80      	pop	{r7, pc}

0800f586 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800f586:	b580      	push	{r7, lr}
 800f588:	b084      	sub	sp, #16
 800f58a:	af00      	add	r7, sp, #0
 800f58c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f592:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	795b      	ldrb	r3, [r3, #5]
 800f598:	2b01      	cmp	r3, #1
 800f59a:	d007      	beq.n	800f5ac <dhcp_t1_timeout+0x26>
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	795b      	ldrb	r3, [r3, #5]
 800f5a0:	2b0a      	cmp	r3, #10
 800f5a2:	d003      	beq.n	800f5ac <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800f5a8:	2b05      	cmp	r3, #5
 800f5aa:	d116      	bne.n	800f5da <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800f5ac:	6878      	ldr	r0, [r7, #4]
 800f5ae:	f000 fb83 	bl	800fcb8 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	899b      	ldrh	r3, [r3, #12]
 800f5b6:	461a      	mov	r2, r3
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	8a5b      	ldrh	r3, [r3, #18]
 800f5bc:	1ad3      	subs	r3, r2, r3
 800f5be:	2b01      	cmp	r3, #1
 800f5c0:	dd0b      	ble.n	800f5da <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	899b      	ldrh	r3, [r3, #12]
 800f5c6:	461a      	mov	r2, r3
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	8a5b      	ldrh	r3, [r3, #18]
 800f5cc:	1ad3      	subs	r3, r2, r3
 800f5ce:	0fda      	lsrs	r2, r3, #31
 800f5d0:	4413      	add	r3, r2
 800f5d2:	105b      	asrs	r3, r3, #1
 800f5d4:	b29a      	uxth	r2, r3
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	81da      	strh	r2, [r3, #14]
    }
  }
}
 800f5da:	bf00      	nop
 800f5dc:	3710      	adds	r7, #16
 800f5de:	46bd      	mov	sp, r7
 800f5e0:	bd80      	pop	{r7, pc}

0800f5e2 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800f5e2:	b580      	push	{r7, lr}
 800f5e4:	b084      	sub	sp, #16
 800f5e6:	af00      	add	r7, sp, #0
 800f5e8:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5ee:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	795b      	ldrb	r3, [r3, #5]
 800f5f4:	2b01      	cmp	r3, #1
 800f5f6:	d00b      	beq.n	800f610 <dhcp_t2_timeout+0x2e>
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	795b      	ldrb	r3, [r3, #5]
 800f5fc:	2b0a      	cmp	r3, #10
 800f5fe:	d007      	beq.n	800f610 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800f604:	2b05      	cmp	r3, #5
 800f606:	d003      	beq.n	800f610 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	795b      	ldrb	r3, [r3, #5]
 800f60c:	2b04      	cmp	r3, #4
 800f60e:	d116      	bne.n	800f63e <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800f610:	6878      	ldr	r0, [r7, #4]
 800f612:	f000 fbed 	bl	800fdf0 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	8a9b      	ldrh	r3, [r3, #20]
 800f61a:	461a      	mov	r2, r3
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	8a5b      	ldrh	r3, [r3, #18]
 800f620:	1ad3      	subs	r3, r2, r3
 800f622:	2b01      	cmp	r3, #1
 800f624:	dd0b      	ble.n	800f63e <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	8a9b      	ldrh	r3, [r3, #20]
 800f62a:	461a      	mov	r2, r3
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	8a5b      	ldrh	r3, [r3, #18]
 800f630:	1ad3      	subs	r3, r2, r3
 800f632:	0fda      	lsrs	r2, r3, #31
 800f634:	4413      	add	r3, r2
 800f636:	105b      	asrs	r3, r3, #1
 800f638:	b29a      	uxth	r2, r3
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	821a      	strh	r2, [r3, #16]
    }
  }
}
 800f63e:	bf00      	nop
 800f640:	3710      	adds	r7, #16
 800f642:	46bd      	mov	sp, r7
 800f644:	bd80      	pop	{r7, pc}
	...

0800f648 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 800f648:	b580      	push	{r7, lr}
 800f64a:	b084      	sub	sp, #16
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
 800f650:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f656:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	2200      	movs	r2, #0
 800f65c:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	2200      	movs	r2, #0
 800f662:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800f664:	4b26      	ldr	r3, [pc, #152]	; (800f700 <dhcp_handle_ack+0xb8>)
 800f666:	78db      	ldrb	r3, [r3, #3]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d003      	beq.n	800f674 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800f66c:	4b25      	ldr	r3, [pc, #148]	; (800f704 <dhcp_handle_ack+0xbc>)
 800f66e:	68da      	ldr	r2, [r3, #12]
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800f674:	4b22      	ldr	r3, [pc, #136]	; (800f700 <dhcp_handle_ack+0xb8>)
 800f676:	791b      	ldrb	r3, [r3, #4]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d004      	beq.n	800f686 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800f67c:	4b21      	ldr	r3, [pc, #132]	; (800f704 <dhcp_handle_ack+0xbc>)
 800f67e:	691a      	ldr	r2, [r3, #16]
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	62da      	str	r2, [r3, #44]	; 0x2c
 800f684:	e004      	b.n	800f690 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f68a:	085a      	lsrs	r2, r3, #1
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800f690:	4b1b      	ldr	r3, [pc, #108]	; (800f700 <dhcp_handle_ack+0xb8>)
 800f692:	795b      	ldrb	r3, [r3, #5]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d004      	beq.n	800f6a2 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800f698:	4b1a      	ldr	r3, [pc, #104]	; (800f704 <dhcp_handle_ack+0xbc>)
 800f69a:	695a      	ldr	r2, [r3, #20]
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	631a      	str	r2, [r3, #48]	; 0x30
 800f6a0:	e007      	b.n	800f6b2 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f6a6:	4613      	mov	r3, r2
 800f6a8:	00db      	lsls	r3, r3, #3
 800f6aa:	1a9b      	subs	r3, r3, r2
 800f6ac:	08da      	lsrs	r2, r3, #3
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800f6b2:	683b      	ldr	r3, [r7, #0]
 800f6b4:	691a      	ldr	r2, [r3, #16]
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800f6ba:	4b11      	ldr	r3, [pc, #68]	; (800f700 <dhcp_handle_ack+0xb8>)
 800f6bc:	799b      	ldrb	r3, [r3, #6]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d00b      	beq.n	800f6da <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800f6c2:	4b10      	ldr	r3, [pc, #64]	; (800f704 <dhcp_handle_ack+0xbc>)
 800f6c4:	699b      	ldr	r3, [r3, #24]
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	f7f7 fec7 	bl	800745a <lwip_htonl>
 800f6cc:	4602      	mov	r2, r0
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	2201      	movs	r2, #1
 800f6d6:	71da      	strb	r2, [r3, #7]
 800f6d8:	e002      	b.n	800f6e0 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	2200      	movs	r2, #0
 800f6de:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800f6e0:	4b07      	ldr	r3, [pc, #28]	; (800f700 <dhcp_handle_ack+0xb8>)
 800f6e2:	79db      	ldrb	r3, [r3, #7]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d007      	beq.n	800f6f8 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800f6e8:	4b06      	ldr	r3, [pc, #24]	; (800f704 <dhcp_handle_ack+0xbc>)
 800f6ea:	69db      	ldr	r3, [r3, #28]
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	f7f7 feb4 	bl	800745a <lwip_htonl>
 800f6f2:	4602      	mov	r2, r0
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800f6f8:	bf00      	nop
 800f6fa:	3710      	adds	r7, #16
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	bd80      	pop	{r7, pc}
 800f700:	2000ef74 	.word	0x2000ef74
 800f704:	2000ef7c 	.word	0x2000ef7c

0800f708 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800f708:	b580      	push	{r7, lr}
 800f70a:	b084      	sub	sp, #16
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d109      	bne.n	800f72a <dhcp_start+0x22>
 800f716:	4b37      	ldr	r3, [pc, #220]	; (800f7f4 <dhcp_start+0xec>)
 800f718:	f240 22e7 	movw	r2, #743	; 0x2e7
 800f71c:	4936      	ldr	r1, [pc, #216]	; (800f7f8 <dhcp_start+0xf0>)
 800f71e:	4837      	ldr	r0, [pc, #220]	; (800f7fc <dhcp_start+0xf4>)
 800f720:	f004 f89c 	bl	801385c <iprintf>
 800f724:	f06f 030f 	mvn.w	r3, #15
 800f728:	e060      	b.n	800f7ec <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f730:	f003 0301 	and.w	r3, r3, #1
 800f734:	2b00      	cmp	r3, #0
 800f736:	d109      	bne.n	800f74c <dhcp_start+0x44>
 800f738:	4b2e      	ldr	r3, [pc, #184]	; (800f7f4 <dhcp_start+0xec>)
 800f73a:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 800f73e:	4930      	ldr	r1, [pc, #192]	; (800f800 <dhcp_start+0xf8>)
 800f740:	482e      	ldr	r0, [pc, #184]	; (800f7fc <dhcp_start+0xf4>)
 800f742:	f004 f88b 	bl	801385c <iprintf>
 800f746:	f06f 030f 	mvn.w	r3, #15
 800f74a:	e04f      	b.n	800f7ec <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f750:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f756:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800f75a:	d202      	bcs.n	800f762 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800f75c:	f04f 33ff 	mov.w	r3, #4294967295
 800f760:	e044      	b.n	800f7ec <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d10d      	bne.n	800f784 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800f768:	2034      	movs	r0, #52	; 0x34
 800f76a:	f7f8 f995 	bl	8007a98 <mem_malloc>
 800f76e:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	2b00      	cmp	r3, #0
 800f774:	d102      	bne.n	800f77c <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800f776:	f04f 33ff 	mov.w	r3, #4294967295
 800f77a:	e037      	b.n	800f7ec <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	68fa      	ldr	r2, [r7, #12]
 800f780:	625a      	str	r2, [r3, #36]	; 0x24
 800f782:	e005      	b.n	800f790 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	791b      	ldrb	r3, [r3, #4]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d001      	beq.n	800f790 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800f78c:	f7ff fc92 	bl	800f0b4 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800f790:	2234      	movs	r2, #52	; 0x34
 800f792:	2100      	movs	r1, #0
 800f794:	68f8      	ldr	r0, [r7, #12]
 800f796:	f003 fffe 	bl	8013796 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800f79a:	f7ff fc39 	bl	800f010 <dhcp_inc_pcb_refcount>
 800f79e:	4603      	mov	r3, r0
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d002      	beq.n	800f7aa <dhcp_start+0xa2>
    return ERR_MEM;
 800f7a4:	f04f 33ff 	mov.w	r3, #4294967295
 800f7a8:	e020      	b.n	800f7ec <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	2201      	movs	r2, #1
 800f7ae:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f7b6:	f003 0304 	and.w	r3, r3, #4
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d105      	bne.n	800f7ca <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800f7be:	2102      	movs	r1, #2
 800f7c0:	68f8      	ldr	r0, [r7, #12]
 800f7c2:	f000 fd01 	bl	80101c8 <dhcp_set_state>
    return ERR_OK;
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	e010      	b.n	800f7ec <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800f7ca:	6878      	ldr	r0, [r7, #4]
 800f7cc:	f000 f8f8 	bl	800f9c0 <dhcp_discover>
 800f7d0:	4603      	mov	r3, r0
 800f7d2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800f7d4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d005      	beq.n	800f7e8 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 800f7dc:	6878      	ldr	r0, [r7, #4]
 800f7de:	f000 fc59 	bl	8010094 <dhcp_release_and_stop>
    return ERR_MEM;
 800f7e2:	f04f 33ff 	mov.w	r3, #4294967295
 800f7e6:	e001      	b.n	800f7ec <dhcp_start+0xe4>
  }
  return result;
 800f7e8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	3710      	adds	r7, #16
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	bd80      	pop	{r7, pc}
 800f7f4:	08016b68 	.word	0x08016b68
 800f7f8:	08016c4c 	.word	0x08016c4c
 800f7fc:	08016bc8 	.word	0x08016bc8
 800f800:	08016c90 	.word	0x08016c90

0800f804 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 800f804:	b580      	push	{r7, lr}
 800f806:	b084      	sub	sp, #16
 800f808:	af00      	add	r7, sp, #0
 800f80a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f810:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d025      	beq.n	800f864 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	795b      	ldrb	r3, [r3, #5]
 800f81c:	2b0a      	cmp	r3, #10
 800f81e:	d008      	beq.n	800f832 <dhcp_network_changed+0x2e>
 800f820:	2b0a      	cmp	r3, #10
 800f822:	dc0d      	bgt.n	800f840 <dhcp_network_changed+0x3c>
 800f824:	2b00      	cmp	r3, #0
 800f826:	d01f      	beq.n	800f868 <dhcp_network_changed+0x64>
 800f828:	2b00      	cmp	r3, #0
 800f82a:	db09      	blt.n	800f840 <dhcp_network_changed+0x3c>
 800f82c:	3b03      	subs	r3, #3
 800f82e:	2b02      	cmp	r3, #2
 800f830:	d806      	bhi.n	800f840 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	2200      	movs	r2, #0
 800f836:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 800f838:	6878      	ldr	r0, [r7, #4]
 800f83a:	f000 fb75 	bl	800ff28 <dhcp_reboot>
      break;
 800f83e:	e014      	b.n	800f86a <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	795b      	ldrb	r3, [r3, #5]
 800f844:	2b0c      	cmp	r3, #12
 800f846:	d906      	bls.n	800f856 <dhcp_network_changed+0x52>
 800f848:	4b09      	ldr	r3, [pc, #36]	; (800f870 <dhcp_network_changed+0x6c>)
 800f84a:	f240 326d 	movw	r2, #877	; 0x36d
 800f84e:	4909      	ldr	r1, [pc, #36]	; (800f874 <dhcp_network_changed+0x70>)
 800f850:	4809      	ldr	r0, [pc, #36]	; (800f878 <dhcp_network_changed+0x74>)
 800f852:	f004 f803 	bl	801385c <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	2200      	movs	r2, #0
 800f85a:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 800f85c:	6878      	ldr	r0, [r7, #4]
 800f85e:	f000 f8af 	bl	800f9c0 <dhcp_discover>
      break;
 800f862:	e002      	b.n	800f86a <dhcp_network_changed+0x66>
    return;
 800f864:	bf00      	nop
 800f866:	e000      	b.n	800f86a <dhcp_network_changed+0x66>
      break;
 800f868:	bf00      	nop
  }
}
 800f86a:	3710      	adds	r7, #16
 800f86c:	46bd      	mov	sp, r7
 800f86e:	bd80      	pop	{r7, pc}
 800f870:	08016b68 	.word	0x08016b68
 800f874:	08016cb4 	.word	0x08016cb4
 800f878:	08016bc8 	.word	0x08016bc8

0800f87c <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b084      	sub	sp, #16
 800f880:	af00      	add	r7, sp, #0
 800f882:	6078      	str	r0, [r7, #4]
 800f884:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d107      	bne.n	800f89c <dhcp_arp_reply+0x20>
 800f88c:	4b0e      	ldr	r3, [pc, #56]	; (800f8c8 <dhcp_arp_reply+0x4c>)
 800f88e:	f240 328b 	movw	r2, #907	; 0x38b
 800f892:	490e      	ldr	r1, [pc, #56]	; (800f8cc <dhcp_arp_reply+0x50>)
 800f894:	480e      	ldr	r0, [pc, #56]	; (800f8d0 <dhcp_arp_reply+0x54>)
 800f896:	f003 ffe1 	bl	801385c <iprintf>
 800f89a:	e012      	b.n	800f8c2 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8a0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d00c      	beq.n	800f8c2 <dhcp_arp_reply+0x46>
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	795b      	ldrb	r3, [r3, #5]
 800f8ac:	2b08      	cmp	r3, #8
 800f8ae:	d108      	bne.n	800f8c2 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800f8b0:	683b      	ldr	r3, [r7, #0]
 800f8b2:	681a      	ldr	r2, [r3, #0]
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	69db      	ldr	r3, [r3, #28]
 800f8b8:	429a      	cmp	r2, r3
 800f8ba:	d102      	bne.n	800f8c2 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800f8bc:	6878      	ldr	r0, [r7, #4]
 800f8be:	f000 f809 	bl	800f8d4 <dhcp_decline>
    }
  }
}
 800f8c2:	3710      	adds	r7, #16
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	bd80      	pop	{r7, pc}
 800f8c8:	08016b68 	.word	0x08016b68
 800f8cc:	08016c4c 	.word	0x08016c4c
 800f8d0:	08016bc8 	.word	0x08016bc8

0800f8d4 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800f8d4:	b5b0      	push	{r4, r5, r7, lr}
 800f8d6:	b08a      	sub	sp, #40	; 0x28
 800f8d8:	af02      	add	r7, sp, #8
 800f8da:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8e0:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800f8e2:	210c      	movs	r1, #12
 800f8e4:	69b8      	ldr	r0, [r7, #24]
 800f8e6:	f000 fc6f 	bl	80101c8 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800f8ea:	f107 030c 	add.w	r3, r7, #12
 800f8ee:	2204      	movs	r2, #4
 800f8f0:	69b9      	ldr	r1, [r7, #24]
 800f8f2:	6878      	ldr	r0, [r7, #4]
 800f8f4:	f001 f8f4 	bl	8010ae0 <dhcp_create_msg>
 800f8f8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800f8fa:	697b      	ldr	r3, [r7, #20]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d035      	beq.n	800f96c <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f900:	697b      	ldr	r3, [r7, #20]
 800f902:	685b      	ldr	r3, [r3, #4]
 800f904:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800f906:	89b8      	ldrh	r0, [r7, #12]
 800f908:	693b      	ldr	r3, [r7, #16]
 800f90a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f90e:	2304      	movs	r3, #4
 800f910:	2232      	movs	r2, #50	; 0x32
 800f912:	f000 fc73 	bl	80101fc <dhcp_option>
 800f916:	4603      	mov	r3, r0
 800f918:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800f91a:	89bc      	ldrh	r4, [r7, #12]
 800f91c:	693b      	ldr	r3, [r7, #16]
 800f91e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800f922:	69bb      	ldr	r3, [r7, #24]
 800f924:	69db      	ldr	r3, [r3, #28]
 800f926:	4618      	mov	r0, r3
 800f928:	f7f7 fd97 	bl	800745a <lwip_htonl>
 800f92c:	4603      	mov	r3, r0
 800f92e:	461a      	mov	r2, r3
 800f930:	4629      	mov	r1, r5
 800f932:	4620      	mov	r0, r4
 800f934:	f000 fcee 	bl	8010314 <dhcp_option_long>
 800f938:	4603      	mov	r3, r0
 800f93a:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f93c:	89b8      	ldrh	r0, [r7, #12]
 800f93e:	693b      	ldr	r3, [r7, #16]
 800f940:	33f0      	adds	r3, #240	; 0xf0
 800f942:	697a      	ldr	r2, [r7, #20]
 800f944:	4619      	mov	r1, r3
 800f946:	f001 f9a1 	bl	8010c8c <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800f94a:	4b19      	ldr	r3, [pc, #100]	; (800f9b0 <dhcp_decline+0xdc>)
 800f94c:	6818      	ldr	r0, [r3, #0]
 800f94e:	4b19      	ldr	r3, [pc, #100]	; (800f9b4 <dhcp_decline+0xe0>)
 800f950:	9301      	str	r3, [sp, #4]
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	9300      	str	r3, [sp, #0]
 800f956:	2343      	movs	r3, #67	; 0x43
 800f958:	4a17      	ldr	r2, [pc, #92]	; (800f9b8 <dhcp_decline+0xe4>)
 800f95a:	6979      	ldr	r1, [r7, #20]
 800f95c:	f7ff f8d2 	bl	800eb04 <udp_sendto_if_src>
 800f960:	4603      	mov	r3, r0
 800f962:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800f964:	6978      	ldr	r0, [r7, #20]
 800f966:	f7f9 f91b 	bl	8008ba0 <pbuf_free>
 800f96a:	e001      	b.n	800f970 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800f96c:	23ff      	movs	r3, #255	; 0xff
 800f96e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800f970:	69bb      	ldr	r3, [r7, #24]
 800f972:	799b      	ldrb	r3, [r3, #6]
 800f974:	2bff      	cmp	r3, #255	; 0xff
 800f976:	d005      	beq.n	800f984 <dhcp_decline+0xb0>
    dhcp->tries++;
 800f978:	69bb      	ldr	r3, [r7, #24]
 800f97a:	799b      	ldrb	r3, [r3, #6]
 800f97c:	3301      	adds	r3, #1
 800f97e:	b2da      	uxtb	r2, r3
 800f980:	69bb      	ldr	r3, [r7, #24]
 800f982:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 800f984:	f242 7310 	movw	r3, #10000	; 0x2710
 800f988:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f98a:	89fb      	ldrh	r3, [r7, #14]
 800f98c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f990:	4a0a      	ldr	r2, [pc, #40]	; (800f9bc <dhcp_decline+0xe8>)
 800f992:	fb82 1203 	smull	r1, r2, r2, r3
 800f996:	1152      	asrs	r2, r2, #5
 800f998:	17db      	asrs	r3, r3, #31
 800f99a:	1ad3      	subs	r3, r2, r3
 800f99c:	b29a      	uxth	r2, r3
 800f99e:	69bb      	ldr	r3, [r7, #24]
 800f9a0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f9a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	3720      	adds	r7, #32
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	bdb0      	pop	{r4, r5, r7, pc}
 800f9ae:	bf00      	nop
 800f9b0:	20008548 	.word	0x20008548
 800f9b4:	08017704 	.word	0x08017704
 800f9b8:	08017708 	.word	0x08017708
 800f9bc:	10624dd3 	.word	0x10624dd3

0800f9c0 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	b08a      	sub	sp, #40	; 0x28
 800f9c4:	af02      	add	r7, sp, #8
 800f9c6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9cc:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800f9d2:	69bb      	ldr	r3, [r7, #24]
 800f9d4:	2200      	movs	r2, #0
 800f9d6:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800f9d8:	2106      	movs	r1, #6
 800f9da:	69b8      	ldr	r0, [r7, #24]
 800f9dc:	f000 fbf4 	bl	80101c8 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 800f9e0:	f107 0308 	add.w	r3, r7, #8
 800f9e4:	2201      	movs	r2, #1
 800f9e6:	69b9      	ldr	r1, [r7, #24]
 800f9e8:	6878      	ldr	r0, [r7, #4]
 800f9ea:	f001 f879 	bl	8010ae0 <dhcp_create_msg>
 800f9ee:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 800f9f0:	693b      	ldr	r3, [r7, #16]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d04b      	beq.n	800fa8e <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f9f6:	693b      	ldr	r3, [r7, #16]
 800f9f8:	685b      	ldr	r3, [r3, #4]
 800f9fa:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f9fc:	8938      	ldrh	r0, [r7, #8]
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fa04:	2302      	movs	r3, #2
 800fa06:	2239      	movs	r2, #57	; 0x39
 800fa08:	f000 fbf8 	bl	80101fc <dhcp_option>
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800fa10:	8938      	ldrh	r0, [r7, #8]
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fa1c:	461a      	mov	r2, r3
 800fa1e:	f000 fc47 	bl	80102b0 <dhcp_option_short>
 800fa22:	4603      	mov	r3, r0
 800fa24:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800fa26:	8938      	ldrh	r0, [r7, #8]
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fa2e:	2303      	movs	r3, #3
 800fa30:	2237      	movs	r2, #55	; 0x37
 800fa32:	f000 fbe3 	bl	80101fc <dhcp_option>
 800fa36:	4603      	mov	r3, r0
 800fa38:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fa3a:	2300      	movs	r3, #0
 800fa3c:	77fb      	strb	r3, [r7, #31]
 800fa3e:	e00e      	b.n	800fa5e <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800fa40:	8938      	ldrh	r0, [r7, #8]
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fa48:	7ffb      	ldrb	r3, [r7, #31]
 800fa4a:	4a29      	ldr	r2, [pc, #164]	; (800faf0 <dhcp_discover+0x130>)
 800fa4c:	5cd3      	ldrb	r3, [r2, r3]
 800fa4e:	461a      	mov	r2, r3
 800fa50:	f000 fc08 	bl	8010264 <dhcp_option_byte>
 800fa54:	4603      	mov	r3, r0
 800fa56:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fa58:	7ffb      	ldrb	r3, [r7, #31]
 800fa5a:	3301      	adds	r3, #1
 800fa5c:	77fb      	strb	r3, [r7, #31]
 800fa5e:	7ffb      	ldrb	r3, [r7, #31]
 800fa60:	2b02      	cmp	r3, #2
 800fa62:	d9ed      	bls.n	800fa40 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800fa64:	8938      	ldrh	r0, [r7, #8]
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	33f0      	adds	r3, #240	; 0xf0
 800fa6a:	693a      	ldr	r2, [r7, #16]
 800fa6c:	4619      	mov	r1, r3
 800fa6e:	f001 f90d 	bl	8010c8c <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800fa72:	4b20      	ldr	r3, [pc, #128]	; (800faf4 <dhcp_discover+0x134>)
 800fa74:	6818      	ldr	r0, [r3, #0]
 800fa76:	4b20      	ldr	r3, [pc, #128]	; (800faf8 <dhcp_discover+0x138>)
 800fa78:	9301      	str	r3, [sp, #4]
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	9300      	str	r3, [sp, #0]
 800fa7e:	2343      	movs	r3, #67	; 0x43
 800fa80:	4a1e      	ldr	r2, [pc, #120]	; (800fafc <dhcp_discover+0x13c>)
 800fa82:	6939      	ldr	r1, [r7, #16]
 800fa84:	f7ff f83e 	bl	800eb04 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 800fa88:	6938      	ldr	r0, [r7, #16]
 800fa8a:	f7f9 f889 	bl	8008ba0 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800fa8e:	69bb      	ldr	r3, [r7, #24]
 800fa90:	799b      	ldrb	r3, [r3, #6]
 800fa92:	2bff      	cmp	r3, #255	; 0xff
 800fa94:	d005      	beq.n	800faa2 <dhcp_discover+0xe2>
    dhcp->tries++;
 800fa96:	69bb      	ldr	r3, [r7, #24]
 800fa98:	799b      	ldrb	r3, [r3, #6]
 800fa9a:	3301      	adds	r3, #1
 800fa9c:	b2da      	uxtb	r2, r3
 800fa9e:	69bb      	ldr	r3, [r7, #24]
 800faa0:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800faa2:	69bb      	ldr	r3, [r7, #24]
 800faa4:	799b      	ldrb	r3, [r3, #6]
 800faa6:	2b05      	cmp	r3, #5
 800faa8:	d80d      	bhi.n	800fac6 <dhcp_discover+0x106>
 800faaa:	69bb      	ldr	r3, [r7, #24]
 800faac:	799b      	ldrb	r3, [r3, #6]
 800faae:	461a      	mov	r2, r3
 800fab0:	2301      	movs	r3, #1
 800fab2:	4093      	lsls	r3, r2
 800fab4:	b29b      	uxth	r3, r3
 800fab6:	461a      	mov	r2, r3
 800fab8:	0152      	lsls	r2, r2, #5
 800faba:	1ad2      	subs	r2, r2, r3
 800fabc:	0092      	lsls	r2, r2, #2
 800fabe:	4413      	add	r3, r2
 800fac0:	00db      	lsls	r3, r3, #3
 800fac2:	b29b      	uxth	r3, r3
 800fac4:	e001      	b.n	800faca <dhcp_discover+0x10a>
 800fac6:	f64e 2360 	movw	r3, #60000	; 0xea60
 800faca:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800facc:	897b      	ldrh	r3, [r7, #10]
 800face:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800fad2:	4a0b      	ldr	r2, [pc, #44]	; (800fb00 <dhcp_discover+0x140>)
 800fad4:	fb82 1203 	smull	r1, r2, r2, r3
 800fad8:	1152      	asrs	r2, r2, #5
 800fada:	17db      	asrs	r3, r3, #31
 800fadc:	1ad3      	subs	r3, r2, r3
 800fade:	b29a      	uxth	r2, r3
 800fae0:	69bb      	ldr	r3, [r7, #24]
 800fae2:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800fae4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fae8:	4618      	mov	r0, r3
 800faea:	3720      	adds	r7, #32
 800faec:	46bd      	mov	sp, r7
 800faee:	bd80      	pop	{r7, pc}
 800faf0:	2000001c 	.word	0x2000001c
 800faf4:	20008548 	.word	0x20008548
 800faf8:	08017704 	.word	0x08017704
 800fafc:	08017708 	.word	0x08017708
 800fb00:	10624dd3 	.word	0x10624dd3

0800fb04 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b088      	sub	sp, #32
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d107      	bne.n	800fb22 <dhcp_bind+0x1e>
 800fb12:	4b64      	ldr	r3, [pc, #400]	; (800fca4 <dhcp_bind+0x1a0>)
 800fb14:	f240 4215 	movw	r2, #1045	; 0x415
 800fb18:	4963      	ldr	r1, [pc, #396]	; (800fca8 <dhcp_bind+0x1a4>)
 800fb1a:	4864      	ldr	r0, [pc, #400]	; (800fcac <dhcp_bind+0x1a8>)
 800fb1c:	f003 fe9e 	bl	801385c <iprintf>
 800fb20:	e0bc      	b.n	800fc9c <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb26:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800fb28:	69bb      	ldr	r3, [r7, #24]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d107      	bne.n	800fb3e <dhcp_bind+0x3a>
 800fb2e:	4b5d      	ldr	r3, [pc, #372]	; (800fca4 <dhcp_bind+0x1a0>)
 800fb30:	f240 4217 	movw	r2, #1047	; 0x417
 800fb34:	495e      	ldr	r1, [pc, #376]	; (800fcb0 <dhcp_bind+0x1ac>)
 800fb36:	485d      	ldr	r0, [pc, #372]	; (800fcac <dhcp_bind+0x1a8>)
 800fb38:	f003 fe90 	bl	801385c <iprintf>
 800fb3c:	e0ae      	b.n	800fc9c <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800fb3e:	69bb      	ldr	r3, [r7, #24]
 800fb40:	2200      	movs	r2, #0
 800fb42:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800fb44:	69bb      	ldr	r3, [r7, #24]
 800fb46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb4c:	d019      	beq.n	800fb82 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800fb4e:	69bb      	ldr	r3, [r7, #24]
 800fb50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb52:	331e      	adds	r3, #30
 800fb54:	4a57      	ldr	r2, [pc, #348]	; (800fcb4 <dhcp_bind+0x1b0>)
 800fb56:	fba2 2303 	umull	r2, r3, r2, r3
 800fb5a:	095b      	lsrs	r3, r3, #5
 800fb5c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800fb5e:	69fb      	ldr	r3, [r7, #28]
 800fb60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fb64:	d302      	bcc.n	800fb6c <dhcp_bind+0x68>
      timeout = 0xffff;
 800fb66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fb6a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 800fb6c:	69fb      	ldr	r3, [r7, #28]
 800fb6e:	b29a      	uxth	r2, r3
 800fb70:	69bb      	ldr	r3, [r7, #24]
 800fb72:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 800fb74:	69bb      	ldr	r3, [r7, #24]
 800fb76:	8a9b      	ldrh	r3, [r3, #20]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d102      	bne.n	800fb82 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 800fb7c:	69bb      	ldr	r3, [r7, #24]
 800fb7e:	2201      	movs	r2, #1
 800fb80:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800fb82:	69bb      	ldr	r3, [r7, #24]
 800fb84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb8a:	d01d      	beq.n	800fbc8 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800fb8c:	69bb      	ldr	r3, [r7, #24]
 800fb8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb90:	331e      	adds	r3, #30
 800fb92:	4a48      	ldr	r2, [pc, #288]	; (800fcb4 <dhcp_bind+0x1b0>)
 800fb94:	fba2 2303 	umull	r2, r3, r2, r3
 800fb98:	095b      	lsrs	r3, r3, #5
 800fb9a:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800fb9c:	69fb      	ldr	r3, [r7, #28]
 800fb9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fba2:	d302      	bcc.n	800fbaa <dhcp_bind+0xa6>
      timeout = 0xffff;
 800fba4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fba8:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800fbaa:	69fb      	ldr	r3, [r7, #28]
 800fbac:	b29a      	uxth	r2, r3
 800fbae:	69bb      	ldr	r3, [r7, #24]
 800fbb0:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 800fbb2:	69bb      	ldr	r3, [r7, #24]
 800fbb4:	895b      	ldrh	r3, [r3, #10]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d102      	bne.n	800fbc0 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800fbba:	69bb      	ldr	r3, [r7, #24]
 800fbbc:	2201      	movs	r2, #1
 800fbbe:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800fbc0:	69bb      	ldr	r3, [r7, #24]
 800fbc2:	895a      	ldrh	r2, [r3, #10]
 800fbc4:	69bb      	ldr	r3, [r7, #24]
 800fbc6:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800fbc8:	69bb      	ldr	r3, [r7, #24]
 800fbca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbd0:	d01d      	beq.n	800fc0e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800fbd2:	69bb      	ldr	r3, [r7, #24]
 800fbd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbd6:	331e      	adds	r3, #30
 800fbd8:	4a36      	ldr	r2, [pc, #216]	; (800fcb4 <dhcp_bind+0x1b0>)
 800fbda:	fba2 2303 	umull	r2, r3, r2, r3
 800fbde:	095b      	lsrs	r3, r3, #5
 800fbe0:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800fbe2:	69fb      	ldr	r3, [r7, #28]
 800fbe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fbe8:	d302      	bcc.n	800fbf0 <dhcp_bind+0xec>
      timeout = 0xffff;
 800fbea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fbee:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800fbf0:	69fb      	ldr	r3, [r7, #28]
 800fbf2:	b29a      	uxth	r2, r3
 800fbf4:	69bb      	ldr	r3, [r7, #24]
 800fbf6:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 800fbf8:	69bb      	ldr	r3, [r7, #24]
 800fbfa:	899b      	ldrh	r3, [r3, #12]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d102      	bne.n	800fc06 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800fc00:	69bb      	ldr	r3, [r7, #24]
 800fc02:	2201      	movs	r2, #1
 800fc04:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800fc06:	69bb      	ldr	r3, [r7, #24]
 800fc08:	899a      	ldrh	r2, [r3, #12]
 800fc0a:	69bb      	ldr	r3, [r7, #24]
 800fc0c:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800fc0e:	69bb      	ldr	r3, [r7, #24]
 800fc10:	895a      	ldrh	r2, [r3, #10]
 800fc12:	69bb      	ldr	r3, [r7, #24]
 800fc14:	899b      	ldrh	r3, [r3, #12]
 800fc16:	429a      	cmp	r2, r3
 800fc18:	d306      	bcc.n	800fc28 <dhcp_bind+0x124>
 800fc1a:	69bb      	ldr	r3, [r7, #24]
 800fc1c:	899b      	ldrh	r3, [r3, #12]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d002      	beq.n	800fc28 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800fc22:	69bb      	ldr	r3, [r7, #24]
 800fc24:	2200      	movs	r2, #0
 800fc26:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 800fc28:	69bb      	ldr	r3, [r7, #24]
 800fc2a:	79db      	ldrb	r3, [r3, #7]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d003      	beq.n	800fc38 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800fc30:	69bb      	ldr	r3, [r7, #24]
 800fc32:	6a1b      	ldr	r3, [r3, #32]
 800fc34:	613b      	str	r3, [r7, #16]
 800fc36:	e014      	b.n	800fc62 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800fc38:	69bb      	ldr	r3, [r7, #24]
 800fc3a:	331c      	adds	r3, #28
 800fc3c:	781b      	ldrb	r3, [r3, #0]
 800fc3e:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800fc40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	db02      	blt.n	800fc4e <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800fc48:	23ff      	movs	r3, #255	; 0xff
 800fc4a:	613b      	str	r3, [r7, #16]
 800fc4c:	e009      	b.n	800fc62 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800fc4e:	7dfb      	ldrb	r3, [r7, #23]
 800fc50:	2bbf      	cmp	r3, #191	; 0xbf
 800fc52:	d903      	bls.n	800fc5c <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800fc54:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800fc58:	613b      	str	r3, [r7, #16]
 800fc5a:	e002      	b.n	800fc62 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800fc5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fc60:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800fc62:	69bb      	ldr	r3, [r7, #24]
 800fc64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc66:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d108      	bne.n	800fc80 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800fc6e:	69bb      	ldr	r3, [r7, #24]
 800fc70:	69da      	ldr	r2, [r3, #28]
 800fc72:	693b      	ldr	r3, [r7, #16]
 800fc74:	4013      	ands	r3, r2
 800fc76:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800fc7e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800fc80:	210a      	movs	r1, #10
 800fc82:	69b8      	ldr	r0, [r7, #24]
 800fc84:	f000 faa0 	bl	80101c8 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800fc88:	69bb      	ldr	r3, [r7, #24]
 800fc8a:	f103 011c 	add.w	r1, r3, #28
 800fc8e:	f107 030c 	add.w	r3, r7, #12
 800fc92:	f107 0210 	add.w	r2, r7, #16
 800fc96:	6878      	ldr	r0, [r7, #4]
 800fc98:	f7f8 fa74 	bl	8008184 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800fc9c:	3720      	adds	r7, #32
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	bd80      	pop	{r7, pc}
 800fca2:	bf00      	nop
 800fca4:	08016b68 	.word	0x08016b68
 800fca8:	08016cc8 	.word	0x08016cc8
 800fcac:	08016bc8 	.word	0x08016bc8
 800fcb0:	08016ce4 	.word	0x08016ce4
 800fcb4:	88888889 	.word	0x88888889

0800fcb8 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b08a      	sub	sp, #40	; 0x28
 800fcbc:	af02      	add	r7, sp, #8
 800fcbe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcc4:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800fcc6:	2105      	movs	r1, #5
 800fcc8:	69b8      	ldr	r0, [r7, #24]
 800fcca:	f000 fa7d 	bl	80101c8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800fcce:	f107 030c 	add.w	r3, r7, #12
 800fcd2:	2203      	movs	r2, #3
 800fcd4:	69b9      	ldr	r1, [r7, #24]
 800fcd6:	6878      	ldr	r0, [r7, #4]
 800fcd8:	f000 ff02 	bl	8010ae0 <dhcp_create_msg>
 800fcdc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800fcde:	697b      	ldr	r3, [r7, #20]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d04e      	beq.n	800fd82 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800fce4:	697b      	ldr	r3, [r7, #20]
 800fce6:	685b      	ldr	r3, [r3, #4]
 800fce8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800fcea:	89b8      	ldrh	r0, [r7, #12]
 800fcec:	693b      	ldr	r3, [r7, #16]
 800fcee:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fcf2:	2302      	movs	r3, #2
 800fcf4:	2239      	movs	r2, #57	; 0x39
 800fcf6:	f000 fa81 	bl	80101fc <dhcp_option>
 800fcfa:	4603      	mov	r3, r0
 800fcfc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800fcfe:	89b8      	ldrh	r0, [r7, #12]
 800fd00:	693b      	ldr	r3, [r7, #16]
 800fd02:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fd0a:	461a      	mov	r2, r3
 800fd0c:	f000 fad0 	bl	80102b0 <dhcp_option_short>
 800fd10:	4603      	mov	r3, r0
 800fd12:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800fd14:	89b8      	ldrh	r0, [r7, #12]
 800fd16:	693b      	ldr	r3, [r7, #16]
 800fd18:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fd1c:	2303      	movs	r3, #3
 800fd1e:	2237      	movs	r2, #55	; 0x37
 800fd20:	f000 fa6c 	bl	80101fc <dhcp_option>
 800fd24:	4603      	mov	r3, r0
 800fd26:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fd28:	2300      	movs	r3, #0
 800fd2a:	77bb      	strb	r3, [r7, #30]
 800fd2c:	e00e      	b.n	800fd4c <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800fd2e:	89b8      	ldrh	r0, [r7, #12]
 800fd30:	693b      	ldr	r3, [r7, #16]
 800fd32:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fd36:	7fbb      	ldrb	r3, [r7, #30]
 800fd38:	4a2a      	ldr	r2, [pc, #168]	; (800fde4 <dhcp_renew+0x12c>)
 800fd3a:	5cd3      	ldrb	r3, [r2, r3]
 800fd3c:	461a      	mov	r2, r3
 800fd3e:	f000 fa91 	bl	8010264 <dhcp_option_byte>
 800fd42:	4603      	mov	r3, r0
 800fd44:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fd46:	7fbb      	ldrb	r3, [r7, #30]
 800fd48:	3301      	adds	r3, #1
 800fd4a:	77bb      	strb	r3, [r7, #30]
 800fd4c:	7fbb      	ldrb	r3, [r7, #30]
 800fd4e:	2b02      	cmp	r3, #2
 800fd50:	d9ed      	bls.n	800fd2e <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800fd52:	89b8      	ldrh	r0, [r7, #12]
 800fd54:	693b      	ldr	r3, [r7, #16]
 800fd56:	33f0      	adds	r3, #240	; 0xf0
 800fd58:	697a      	ldr	r2, [r7, #20]
 800fd5a:	4619      	mov	r1, r3
 800fd5c:	f000 ff96 	bl	8010c8c <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800fd60:	4b21      	ldr	r3, [pc, #132]	; (800fde8 <dhcp_renew+0x130>)
 800fd62:	6818      	ldr	r0, [r3, #0]
 800fd64:	69bb      	ldr	r3, [r7, #24]
 800fd66:	f103 0218 	add.w	r2, r3, #24
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	9300      	str	r3, [sp, #0]
 800fd6e:	2343      	movs	r3, #67	; 0x43
 800fd70:	6979      	ldr	r1, [r7, #20]
 800fd72:	f7fe fe53 	bl	800ea1c <udp_sendto_if>
 800fd76:	4603      	mov	r3, r0
 800fd78:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800fd7a:	6978      	ldr	r0, [r7, #20]
 800fd7c:	f7f8 ff10 	bl	8008ba0 <pbuf_free>
 800fd80:	e001      	b.n	800fd86 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800fd82:	23ff      	movs	r3, #255	; 0xff
 800fd84:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800fd86:	69bb      	ldr	r3, [r7, #24]
 800fd88:	799b      	ldrb	r3, [r3, #6]
 800fd8a:	2bff      	cmp	r3, #255	; 0xff
 800fd8c:	d005      	beq.n	800fd9a <dhcp_renew+0xe2>
    dhcp->tries++;
 800fd8e:	69bb      	ldr	r3, [r7, #24]
 800fd90:	799b      	ldrb	r3, [r3, #6]
 800fd92:	3301      	adds	r3, #1
 800fd94:	b2da      	uxtb	r2, r3
 800fd96:	69bb      	ldr	r3, [r7, #24]
 800fd98:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800fd9a:	69bb      	ldr	r3, [r7, #24]
 800fd9c:	799b      	ldrb	r3, [r3, #6]
 800fd9e:	2b09      	cmp	r3, #9
 800fda0:	d80a      	bhi.n	800fdb8 <dhcp_renew+0x100>
 800fda2:	69bb      	ldr	r3, [r7, #24]
 800fda4:	799b      	ldrb	r3, [r3, #6]
 800fda6:	b29b      	uxth	r3, r3
 800fda8:	461a      	mov	r2, r3
 800fdaa:	0152      	lsls	r2, r2, #5
 800fdac:	1ad2      	subs	r2, r2, r3
 800fdae:	0092      	lsls	r2, r2, #2
 800fdb0:	4413      	add	r3, r2
 800fdb2:	011b      	lsls	r3, r3, #4
 800fdb4:	b29b      	uxth	r3, r3
 800fdb6:	e001      	b.n	800fdbc <dhcp_renew+0x104>
 800fdb8:	f644 6320 	movw	r3, #20000	; 0x4e20
 800fdbc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800fdbe:	89fb      	ldrh	r3, [r7, #14]
 800fdc0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800fdc4:	4a09      	ldr	r2, [pc, #36]	; (800fdec <dhcp_renew+0x134>)
 800fdc6:	fb82 1203 	smull	r1, r2, r2, r3
 800fdca:	1152      	asrs	r2, r2, #5
 800fdcc:	17db      	asrs	r3, r3, #31
 800fdce:	1ad3      	subs	r3, r2, r3
 800fdd0:	b29a      	uxth	r2, r3
 800fdd2:	69bb      	ldr	r3, [r7, #24]
 800fdd4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800fdd6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fdda:	4618      	mov	r0, r3
 800fddc:	3720      	adds	r7, #32
 800fdde:	46bd      	mov	sp, r7
 800fde0:	bd80      	pop	{r7, pc}
 800fde2:	bf00      	nop
 800fde4:	2000001c 	.word	0x2000001c
 800fde8:	20008548 	.word	0x20008548
 800fdec:	10624dd3 	.word	0x10624dd3

0800fdf0 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800fdf0:	b580      	push	{r7, lr}
 800fdf2:	b08a      	sub	sp, #40	; 0x28
 800fdf4:	af02      	add	r7, sp, #8
 800fdf6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdfc:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800fdfe:	2104      	movs	r1, #4
 800fe00:	69b8      	ldr	r0, [r7, #24]
 800fe02:	f000 f9e1 	bl	80101c8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800fe06:	f107 030c 	add.w	r3, r7, #12
 800fe0a:	2203      	movs	r2, #3
 800fe0c:	69b9      	ldr	r1, [r7, #24]
 800fe0e:	6878      	ldr	r0, [r7, #4]
 800fe10:	f000 fe66 	bl	8010ae0 <dhcp_create_msg>
 800fe14:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800fe16:	697b      	ldr	r3, [r7, #20]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d04c      	beq.n	800feb6 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800fe1c:	697b      	ldr	r3, [r7, #20]
 800fe1e:	685b      	ldr	r3, [r3, #4]
 800fe20:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800fe22:	89b8      	ldrh	r0, [r7, #12]
 800fe24:	693b      	ldr	r3, [r7, #16]
 800fe26:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fe2a:	2302      	movs	r3, #2
 800fe2c:	2239      	movs	r2, #57	; 0x39
 800fe2e:	f000 f9e5 	bl	80101fc <dhcp_option>
 800fe32:	4603      	mov	r3, r0
 800fe34:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800fe36:	89b8      	ldrh	r0, [r7, #12]
 800fe38:	693b      	ldr	r3, [r7, #16]
 800fe3a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fe42:	461a      	mov	r2, r3
 800fe44:	f000 fa34 	bl	80102b0 <dhcp_option_short>
 800fe48:	4603      	mov	r3, r0
 800fe4a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800fe4c:	89b8      	ldrh	r0, [r7, #12]
 800fe4e:	693b      	ldr	r3, [r7, #16]
 800fe50:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fe54:	2303      	movs	r3, #3
 800fe56:	2237      	movs	r2, #55	; 0x37
 800fe58:	f000 f9d0 	bl	80101fc <dhcp_option>
 800fe5c:	4603      	mov	r3, r0
 800fe5e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fe60:	2300      	movs	r3, #0
 800fe62:	77bb      	strb	r3, [r7, #30]
 800fe64:	e00e      	b.n	800fe84 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800fe66:	89b8      	ldrh	r0, [r7, #12]
 800fe68:	693b      	ldr	r3, [r7, #16]
 800fe6a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fe6e:	7fbb      	ldrb	r3, [r7, #30]
 800fe70:	4a29      	ldr	r2, [pc, #164]	; (800ff18 <dhcp_rebind+0x128>)
 800fe72:	5cd3      	ldrb	r3, [r2, r3]
 800fe74:	461a      	mov	r2, r3
 800fe76:	f000 f9f5 	bl	8010264 <dhcp_option_byte>
 800fe7a:	4603      	mov	r3, r0
 800fe7c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fe7e:	7fbb      	ldrb	r3, [r7, #30]
 800fe80:	3301      	adds	r3, #1
 800fe82:	77bb      	strb	r3, [r7, #30]
 800fe84:	7fbb      	ldrb	r3, [r7, #30]
 800fe86:	2b02      	cmp	r3, #2
 800fe88:	d9ed      	bls.n	800fe66 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800fe8a:	89b8      	ldrh	r0, [r7, #12]
 800fe8c:	693b      	ldr	r3, [r7, #16]
 800fe8e:	33f0      	adds	r3, #240	; 0xf0
 800fe90:	697a      	ldr	r2, [r7, #20]
 800fe92:	4619      	mov	r1, r3
 800fe94:	f000 fefa 	bl	8010c8c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800fe98:	4b20      	ldr	r3, [pc, #128]	; (800ff1c <dhcp_rebind+0x12c>)
 800fe9a:	6818      	ldr	r0, [r3, #0]
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	9300      	str	r3, [sp, #0]
 800fea0:	2343      	movs	r3, #67	; 0x43
 800fea2:	4a1f      	ldr	r2, [pc, #124]	; (800ff20 <dhcp_rebind+0x130>)
 800fea4:	6979      	ldr	r1, [r7, #20]
 800fea6:	f7fe fdb9 	bl	800ea1c <udp_sendto_if>
 800feaa:	4603      	mov	r3, r0
 800feac:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800feae:	6978      	ldr	r0, [r7, #20]
 800feb0:	f7f8 fe76 	bl	8008ba0 <pbuf_free>
 800feb4:	e001      	b.n	800feba <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800feb6:	23ff      	movs	r3, #255	; 0xff
 800feb8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800feba:	69bb      	ldr	r3, [r7, #24]
 800febc:	799b      	ldrb	r3, [r3, #6]
 800febe:	2bff      	cmp	r3, #255	; 0xff
 800fec0:	d005      	beq.n	800fece <dhcp_rebind+0xde>
    dhcp->tries++;
 800fec2:	69bb      	ldr	r3, [r7, #24]
 800fec4:	799b      	ldrb	r3, [r3, #6]
 800fec6:	3301      	adds	r3, #1
 800fec8:	b2da      	uxtb	r2, r3
 800feca:	69bb      	ldr	r3, [r7, #24]
 800fecc:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800fece:	69bb      	ldr	r3, [r7, #24]
 800fed0:	799b      	ldrb	r3, [r3, #6]
 800fed2:	2b09      	cmp	r3, #9
 800fed4:	d80a      	bhi.n	800feec <dhcp_rebind+0xfc>
 800fed6:	69bb      	ldr	r3, [r7, #24]
 800fed8:	799b      	ldrb	r3, [r3, #6]
 800feda:	b29b      	uxth	r3, r3
 800fedc:	461a      	mov	r2, r3
 800fede:	0152      	lsls	r2, r2, #5
 800fee0:	1ad2      	subs	r2, r2, r3
 800fee2:	0092      	lsls	r2, r2, #2
 800fee4:	4413      	add	r3, r2
 800fee6:	00db      	lsls	r3, r3, #3
 800fee8:	b29b      	uxth	r3, r3
 800feea:	e001      	b.n	800fef0 <dhcp_rebind+0x100>
 800feec:	f242 7310 	movw	r3, #10000	; 0x2710
 800fef0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800fef2:	89fb      	ldrh	r3, [r7, #14]
 800fef4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800fef8:	4a0a      	ldr	r2, [pc, #40]	; (800ff24 <dhcp_rebind+0x134>)
 800fefa:	fb82 1203 	smull	r1, r2, r2, r3
 800fefe:	1152      	asrs	r2, r2, #5
 800ff00:	17db      	asrs	r3, r3, #31
 800ff02:	1ad3      	subs	r3, r2, r3
 800ff04:	b29a      	uxth	r2, r3
 800ff06:	69bb      	ldr	r3, [r7, #24]
 800ff08:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800ff0a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ff0e:	4618      	mov	r0, r3
 800ff10:	3720      	adds	r7, #32
 800ff12:	46bd      	mov	sp, r7
 800ff14:	bd80      	pop	{r7, pc}
 800ff16:	bf00      	nop
 800ff18:	2000001c 	.word	0x2000001c
 800ff1c:	20008548 	.word	0x20008548
 800ff20:	08017708 	.word	0x08017708
 800ff24:	10624dd3 	.word	0x10624dd3

0800ff28 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800ff28:	b5b0      	push	{r4, r5, r7, lr}
 800ff2a:	b08a      	sub	sp, #40	; 0x28
 800ff2c:	af02      	add	r7, sp, #8
 800ff2e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff34:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800ff36:	2103      	movs	r1, #3
 800ff38:	69b8      	ldr	r0, [r7, #24]
 800ff3a:	f000 f945 	bl	80101c8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800ff3e:	f107 030c 	add.w	r3, r7, #12
 800ff42:	2203      	movs	r2, #3
 800ff44:	69b9      	ldr	r1, [r7, #24]
 800ff46:	6878      	ldr	r0, [r7, #4]
 800ff48:	f000 fdca 	bl	8010ae0 <dhcp_create_msg>
 800ff4c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800ff4e:	697b      	ldr	r3, [r7, #20]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d066      	beq.n	8010022 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800ff54:	697b      	ldr	r3, [r7, #20]
 800ff56:	685b      	ldr	r3, [r3, #4]
 800ff58:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800ff5a:	89b8      	ldrh	r0, [r7, #12]
 800ff5c:	693b      	ldr	r3, [r7, #16]
 800ff5e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ff62:	2302      	movs	r3, #2
 800ff64:	2239      	movs	r2, #57	; 0x39
 800ff66:	f000 f949 	bl	80101fc <dhcp_option>
 800ff6a:	4603      	mov	r3, r0
 800ff6c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800ff6e:	89b8      	ldrh	r0, [r7, #12]
 800ff70:	693b      	ldr	r3, [r7, #16]
 800ff72:	33f0      	adds	r3, #240	; 0xf0
 800ff74:	f44f 7210 	mov.w	r2, #576	; 0x240
 800ff78:	4619      	mov	r1, r3
 800ff7a:	f000 f999 	bl	80102b0 <dhcp_option_short>
 800ff7e:	4603      	mov	r3, r0
 800ff80:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800ff82:	89b8      	ldrh	r0, [r7, #12]
 800ff84:	693b      	ldr	r3, [r7, #16]
 800ff86:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ff8a:	2304      	movs	r3, #4
 800ff8c:	2232      	movs	r2, #50	; 0x32
 800ff8e:	f000 f935 	bl	80101fc <dhcp_option>
 800ff92:	4603      	mov	r3, r0
 800ff94:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800ff96:	89bc      	ldrh	r4, [r7, #12]
 800ff98:	693b      	ldr	r3, [r7, #16]
 800ff9a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800ff9e:	69bb      	ldr	r3, [r7, #24]
 800ffa0:	69db      	ldr	r3, [r3, #28]
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f7f7 fa59 	bl	800745a <lwip_htonl>
 800ffa8:	4603      	mov	r3, r0
 800ffaa:	461a      	mov	r2, r3
 800ffac:	4629      	mov	r1, r5
 800ffae:	4620      	mov	r0, r4
 800ffb0:	f000 f9b0 	bl	8010314 <dhcp_option_long>
 800ffb4:	4603      	mov	r3, r0
 800ffb6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800ffb8:	89b8      	ldrh	r0, [r7, #12]
 800ffba:	693b      	ldr	r3, [r7, #16]
 800ffbc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ffc0:	2303      	movs	r3, #3
 800ffc2:	2237      	movs	r2, #55	; 0x37
 800ffc4:	f000 f91a 	bl	80101fc <dhcp_option>
 800ffc8:	4603      	mov	r3, r0
 800ffca:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ffcc:	2300      	movs	r3, #0
 800ffce:	77bb      	strb	r3, [r7, #30]
 800ffd0:	e00e      	b.n	800fff0 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800ffd2:	89b8      	ldrh	r0, [r7, #12]
 800ffd4:	693b      	ldr	r3, [r7, #16]
 800ffd6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ffda:	7fbb      	ldrb	r3, [r7, #30]
 800ffdc:	4a29      	ldr	r2, [pc, #164]	; (8010084 <dhcp_reboot+0x15c>)
 800ffde:	5cd3      	ldrb	r3, [r2, r3]
 800ffe0:	461a      	mov	r2, r3
 800ffe2:	f000 f93f 	bl	8010264 <dhcp_option_byte>
 800ffe6:	4603      	mov	r3, r0
 800ffe8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ffea:	7fbb      	ldrb	r3, [r7, #30]
 800ffec:	3301      	adds	r3, #1
 800ffee:	77bb      	strb	r3, [r7, #30]
 800fff0:	7fbb      	ldrb	r3, [r7, #30]
 800fff2:	2b02      	cmp	r3, #2
 800fff4:	d9ed      	bls.n	800ffd2 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800fff6:	89b8      	ldrh	r0, [r7, #12]
 800fff8:	693b      	ldr	r3, [r7, #16]
 800fffa:	33f0      	adds	r3, #240	; 0xf0
 800fffc:	697a      	ldr	r2, [r7, #20]
 800fffe:	4619      	mov	r1, r3
 8010000:	f000 fe44 	bl	8010c8c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8010004:	4b20      	ldr	r3, [pc, #128]	; (8010088 <dhcp_reboot+0x160>)
 8010006:	6818      	ldr	r0, [r3, #0]
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	9300      	str	r3, [sp, #0]
 801000c:	2343      	movs	r3, #67	; 0x43
 801000e:	4a1f      	ldr	r2, [pc, #124]	; (801008c <dhcp_reboot+0x164>)
 8010010:	6979      	ldr	r1, [r7, #20]
 8010012:	f7fe fd03 	bl	800ea1c <udp_sendto_if>
 8010016:	4603      	mov	r3, r0
 8010018:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801001a:	6978      	ldr	r0, [r7, #20]
 801001c:	f7f8 fdc0 	bl	8008ba0 <pbuf_free>
 8010020:	e001      	b.n	8010026 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8010022:	23ff      	movs	r3, #255	; 0xff
 8010024:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8010026:	69bb      	ldr	r3, [r7, #24]
 8010028:	799b      	ldrb	r3, [r3, #6]
 801002a:	2bff      	cmp	r3, #255	; 0xff
 801002c:	d005      	beq.n	801003a <dhcp_reboot+0x112>
    dhcp->tries++;
 801002e:	69bb      	ldr	r3, [r7, #24]
 8010030:	799b      	ldrb	r3, [r3, #6]
 8010032:	3301      	adds	r3, #1
 8010034:	b2da      	uxtb	r2, r3
 8010036:	69bb      	ldr	r3, [r7, #24]
 8010038:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801003a:	69bb      	ldr	r3, [r7, #24]
 801003c:	799b      	ldrb	r3, [r3, #6]
 801003e:	2b09      	cmp	r3, #9
 8010040:	d80a      	bhi.n	8010058 <dhcp_reboot+0x130>
 8010042:	69bb      	ldr	r3, [r7, #24]
 8010044:	799b      	ldrb	r3, [r3, #6]
 8010046:	b29b      	uxth	r3, r3
 8010048:	461a      	mov	r2, r3
 801004a:	0152      	lsls	r2, r2, #5
 801004c:	1ad2      	subs	r2, r2, r3
 801004e:	0092      	lsls	r2, r2, #2
 8010050:	4413      	add	r3, r2
 8010052:	00db      	lsls	r3, r3, #3
 8010054:	b29b      	uxth	r3, r3
 8010056:	e001      	b.n	801005c <dhcp_reboot+0x134>
 8010058:	f242 7310 	movw	r3, #10000	; 0x2710
 801005c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801005e:	89fb      	ldrh	r3, [r7, #14]
 8010060:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010064:	4a0a      	ldr	r2, [pc, #40]	; (8010090 <dhcp_reboot+0x168>)
 8010066:	fb82 1203 	smull	r1, r2, r2, r3
 801006a:	1152      	asrs	r2, r2, #5
 801006c:	17db      	asrs	r3, r3, #31
 801006e:	1ad3      	subs	r3, r2, r3
 8010070:	b29a      	uxth	r2, r3
 8010072:	69bb      	ldr	r3, [r7, #24]
 8010074:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010076:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801007a:	4618      	mov	r0, r3
 801007c:	3720      	adds	r7, #32
 801007e:	46bd      	mov	sp, r7
 8010080:	bdb0      	pop	{r4, r5, r7, pc}
 8010082:	bf00      	nop
 8010084:	2000001c 	.word	0x2000001c
 8010088:	20008548 	.word	0x20008548
 801008c:	08017708 	.word	0x08017708
 8010090:	10624dd3 	.word	0x10624dd3

08010094 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8010094:	b5b0      	push	{r4, r5, r7, lr}
 8010096:	b08a      	sub	sp, #40	; 0x28
 8010098:	af02      	add	r7, sp, #8
 801009a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100a0:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 80100a2:	69fb      	ldr	r3, [r7, #28]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	f000 8084 	beq.w	80101b2 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 80100aa:	69fb      	ldr	r3, [r7, #28]
 80100ac:	795b      	ldrb	r3, [r3, #5]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	f000 8081 	beq.w	80101b6 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80100b4:	69fb      	ldr	r3, [r7, #28]
 80100b6:	699b      	ldr	r3, [r3, #24]
 80100b8:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 80100ba:	69fb      	ldr	r3, [r7, #28]
 80100bc:	2200      	movs	r2, #0
 80100be:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 80100c0:	69fb      	ldr	r3, [r7, #28]
 80100c2:	2200      	movs	r2, #0
 80100c4:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80100c6:	69fb      	ldr	r3, [r7, #28]
 80100c8:	2200      	movs	r2, #0
 80100ca:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80100cc:	69fb      	ldr	r3, [r7, #28]
 80100ce:	2200      	movs	r2, #0
 80100d0:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80100d2:	69fb      	ldr	r3, [r7, #28]
 80100d4:	2200      	movs	r2, #0
 80100d6:	631a      	str	r2, [r3, #48]	; 0x30
 80100d8:	69fb      	ldr	r3, [r7, #28]
 80100da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80100dc:	69fb      	ldr	r3, [r7, #28]
 80100de:	62da      	str	r2, [r3, #44]	; 0x2c
 80100e0:	69fb      	ldr	r3, [r7, #28]
 80100e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100e4:	69fb      	ldr	r3, [r7, #28]
 80100e6:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 80100e8:	69fb      	ldr	r3, [r7, #28]
 80100ea:	2200      	movs	r2, #0
 80100ec:	829a      	strh	r2, [r3, #20]
 80100ee:	69fb      	ldr	r3, [r7, #28]
 80100f0:	8a9a      	ldrh	r2, [r3, #20]
 80100f2:	69fb      	ldr	r3, [r7, #28]
 80100f4:	825a      	strh	r2, [r3, #18]
 80100f6:	69fb      	ldr	r3, [r7, #28]
 80100f8:	8a5a      	ldrh	r2, [r3, #18]
 80100fa:	69fb      	ldr	r3, [r7, #28]
 80100fc:	821a      	strh	r2, [r3, #16]
 80100fe:	69fb      	ldr	r3, [r7, #28]
 8010100:	8a1a      	ldrh	r2, [r3, #16]
 8010102:	69fb      	ldr	r3, [r7, #28]
 8010104:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8010106:	6878      	ldr	r0, [r7, #4]
 8010108:	f000 fdee 	bl	8010ce8 <dhcp_supplied_address>
 801010c:	4603      	mov	r3, r0
 801010e:	2b00      	cmp	r3, #0
 8010110:	d03b      	beq.n	801018a <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8010112:	f107 030e 	add.w	r3, r7, #14
 8010116:	2207      	movs	r2, #7
 8010118:	69f9      	ldr	r1, [r7, #28]
 801011a:	6878      	ldr	r0, [r7, #4]
 801011c:	f000 fce0 	bl	8010ae0 <dhcp_create_msg>
 8010120:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8010122:	69bb      	ldr	r3, [r7, #24]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d030      	beq.n	801018a <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010128:	69bb      	ldr	r3, [r7, #24]
 801012a:	685b      	ldr	r3, [r3, #4]
 801012c:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801012e:	89f8      	ldrh	r0, [r7, #14]
 8010130:	697b      	ldr	r3, [r7, #20]
 8010132:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010136:	2304      	movs	r3, #4
 8010138:	2236      	movs	r2, #54	; 0x36
 801013a:	f000 f85f 	bl	80101fc <dhcp_option>
 801013e:	4603      	mov	r3, r0
 8010140:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8010142:	89fc      	ldrh	r4, [r7, #14]
 8010144:	697b      	ldr	r3, [r7, #20]
 8010146:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801014a:	693b      	ldr	r3, [r7, #16]
 801014c:	4618      	mov	r0, r3
 801014e:	f7f7 f984 	bl	800745a <lwip_htonl>
 8010152:	4603      	mov	r3, r0
 8010154:	461a      	mov	r2, r3
 8010156:	4629      	mov	r1, r5
 8010158:	4620      	mov	r0, r4
 801015a:	f000 f8db 	bl	8010314 <dhcp_option_long>
 801015e:	4603      	mov	r3, r0
 8010160:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010162:	89f8      	ldrh	r0, [r7, #14]
 8010164:	697b      	ldr	r3, [r7, #20]
 8010166:	33f0      	adds	r3, #240	; 0xf0
 8010168:	69ba      	ldr	r2, [r7, #24]
 801016a:	4619      	mov	r1, r3
 801016c:	f000 fd8e 	bl	8010c8c <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8010170:	4b13      	ldr	r3, [pc, #76]	; (80101c0 <dhcp_release_and_stop+0x12c>)
 8010172:	6818      	ldr	r0, [r3, #0]
 8010174:	f107 0210 	add.w	r2, r7, #16
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	9300      	str	r3, [sp, #0]
 801017c:	2343      	movs	r3, #67	; 0x43
 801017e:	69b9      	ldr	r1, [r7, #24]
 8010180:	f7fe fc4c 	bl	800ea1c <udp_sendto_if>
      pbuf_free(p_out);
 8010184:	69b8      	ldr	r0, [r7, #24]
 8010186:	f7f8 fd0b 	bl	8008ba0 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801018a:	4b0e      	ldr	r3, [pc, #56]	; (80101c4 <dhcp_release_and_stop+0x130>)
 801018c:	4a0d      	ldr	r2, [pc, #52]	; (80101c4 <dhcp_release_and_stop+0x130>)
 801018e:	490d      	ldr	r1, [pc, #52]	; (80101c4 <dhcp_release_and_stop+0x130>)
 8010190:	6878      	ldr	r0, [r7, #4]
 8010192:	f7f7 fff7 	bl	8008184 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8010196:	2100      	movs	r1, #0
 8010198:	69f8      	ldr	r0, [r7, #28]
 801019a:	f000 f815 	bl	80101c8 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801019e:	69fb      	ldr	r3, [r7, #28]
 80101a0:	791b      	ldrb	r3, [r3, #4]
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d008      	beq.n	80101b8 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80101a6:	f7fe ff85 	bl	800f0b4 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 80101aa:	69fb      	ldr	r3, [r7, #28]
 80101ac:	2200      	movs	r2, #0
 80101ae:	711a      	strb	r2, [r3, #4]
 80101b0:	e002      	b.n	80101b8 <dhcp_release_and_stop+0x124>
    return;
 80101b2:	bf00      	nop
 80101b4:	e000      	b.n	80101b8 <dhcp_release_and_stop+0x124>
    return;
 80101b6:	bf00      	nop
  }
}
 80101b8:	3720      	adds	r7, #32
 80101ba:	46bd      	mov	sp, r7
 80101bc:	bdb0      	pop	{r4, r5, r7, pc}
 80101be:	bf00      	nop
 80101c0:	20008548 	.word	0x20008548
 80101c4:	08017704 	.word	0x08017704

080101c8 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 80101c8:	b480      	push	{r7}
 80101ca:	b083      	sub	sp, #12
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]
 80101d0:	460b      	mov	r3, r1
 80101d2:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	795b      	ldrb	r3, [r3, #5]
 80101d8:	78fa      	ldrb	r2, [r7, #3]
 80101da:	429a      	cmp	r2, r3
 80101dc:	d008      	beq.n	80101f0 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	78fa      	ldrb	r2, [r7, #3]
 80101e2:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	2200      	movs	r2, #0
 80101e8:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	2200      	movs	r2, #0
 80101ee:	811a      	strh	r2, [r3, #8]
  }
}
 80101f0:	bf00      	nop
 80101f2:	370c      	adds	r7, #12
 80101f4:	46bd      	mov	sp, r7
 80101f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fa:	4770      	bx	lr

080101fc <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b082      	sub	sp, #8
 8010200:	af00      	add	r7, sp, #0
 8010202:	6039      	str	r1, [r7, #0]
 8010204:	4611      	mov	r1, r2
 8010206:	461a      	mov	r2, r3
 8010208:	4603      	mov	r3, r0
 801020a:	80fb      	strh	r3, [r7, #6]
 801020c:	460b      	mov	r3, r1
 801020e:	717b      	strb	r3, [r7, #5]
 8010210:	4613      	mov	r3, r2
 8010212:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8010214:	88fa      	ldrh	r2, [r7, #6]
 8010216:	793b      	ldrb	r3, [r7, #4]
 8010218:	4413      	add	r3, r2
 801021a:	3302      	adds	r3, #2
 801021c:	2b44      	cmp	r3, #68	; 0x44
 801021e:	d906      	bls.n	801022e <dhcp_option+0x32>
 8010220:	4b0d      	ldr	r3, [pc, #52]	; (8010258 <dhcp_option+0x5c>)
 8010222:	f240 529a 	movw	r2, #1434	; 0x59a
 8010226:	490d      	ldr	r1, [pc, #52]	; (801025c <dhcp_option+0x60>)
 8010228:	480d      	ldr	r0, [pc, #52]	; (8010260 <dhcp_option+0x64>)
 801022a:	f003 fb17 	bl	801385c <iprintf>
  options[options_out_len++] = option_type;
 801022e:	88fb      	ldrh	r3, [r7, #6]
 8010230:	1c5a      	adds	r2, r3, #1
 8010232:	80fa      	strh	r2, [r7, #6]
 8010234:	461a      	mov	r2, r3
 8010236:	683b      	ldr	r3, [r7, #0]
 8010238:	4413      	add	r3, r2
 801023a:	797a      	ldrb	r2, [r7, #5]
 801023c:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801023e:	88fb      	ldrh	r3, [r7, #6]
 8010240:	1c5a      	adds	r2, r3, #1
 8010242:	80fa      	strh	r2, [r7, #6]
 8010244:	461a      	mov	r2, r3
 8010246:	683b      	ldr	r3, [r7, #0]
 8010248:	4413      	add	r3, r2
 801024a:	793a      	ldrb	r2, [r7, #4]
 801024c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801024e:	88fb      	ldrh	r3, [r7, #6]
}
 8010250:	4618      	mov	r0, r3
 8010252:	3708      	adds	r7, #8
 8010254:	46bd      	mov	sp, r7
 8010256:	bd80      	pop	{r7, pc}
 8010258:	08016b68 	.word	0x08016b68
 801025c:	08016cfc 	.word	0x08016cfc
 8010260:	08016bc8 	.word	0x08016bc8

08010264 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8010264:	b580      	push	{r7, lr}
 8010266:	b082      	sub	sp, #8
 8010268:	af00      	add	r7, sp, #0
 801026a:	4603      	mov	r3, r0
 801026c:	6039      	str	r1, [r7, #0]
 801026e:	80fb      	strh	r3, [r7, #6]
 8010270:	4613      	mov	r3, r2
 8010272:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8010274:	88fb      	ldrh	r3, [r7, #6]
 8010276:	2b43      	cmp	r3, #67	; 0x43
 8010278:	d906      	bls.n	8010288 <dhcp_option_byte+0x24>
 801027a:	4b0a      	ldr	r3, [pc, #40]	; (80102a4 <dhcp_option_byte+0x40>)
 801027c:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8010280:	4909      	ldr	r1, [pc, #36]	; (80102a8 <dhcp_option_byte+0x44>)
 8010282:	480a      	ldr	r0, [pc, #40]	; (80102ac <dhcp_option_byte+0x48>)
 8010284:	f003 faea 	bl	801385c <iprintf>
  options[options_out_len++] = value;
 8010288:	88fb      	ldrh	r3, [r7, #6]
 801028a:	1c5a      	adds	r2, r3, #1
 801028c:	80fa      	strh	r2, [r7, #6]
 801028e:	461a      	mov	r2, r3
 8010290:	683b      	ldr	r3, [r7, #0]
 8010292:	4413      	add	r3, r2
 8010294:	797a      	ldrb	r2, [r7, #5]
 8010296:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010298:	88fb      	ldrh	r3, [r7, #6]
}
 801029a:	4618      	mov	r0, r3
 801029c:	3708      	adds	r7, #8
 801029e:	46bd      	mov	sp, r7
 80102a0:	bd80      	pop	{r7, pc}
 80102a2:	bf00      	nop
 80102a4:	08016b68 	.word	0x08016b68
 80102a8:	08016d40 	.word	0x08016d40
 80102ac:	08016bc8 	.word	0x08016bc8

080102b0 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b082      	sub	sp, #8
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	4603      	mov	r3, r0
 80102b8:	6039      	str	r1, [r7, #0]
 80102ba:	80fb      	strh	r3, [r7, #6]
 80102bc:	4613      	mov	r3, r2
 80102be:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80102c0:	88fb      	ldrh	r3, [r7, #6]
 80102c2:	3302      	adds	r3, #2
 80102c4:	2b44      	cmp	r3, #68	; 0x44
 80102c6:	d906      	bls.n	80102d6 <dhcp_option_short+0x26>
 80102c8:	4b0f      	ldr	r3, [pc, #60]	; (8010308 <dhcp_option_short+0x58>)
 80102ca:	f240 52ae 	movw	r2, #1454	; 0x5ae
 80102ce:	490f      	ldr	r1, [pc, #60]	; (801030c <dhcp_option_short+0x5c>)
 80102d0:	480f      	ldr	r0, [pc, #60]	; (8010310 <dhcp_option_short+0x60>)
 80102d2:	f003 fac3 	bl	801385c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80102d6:	88bb      	ldrh	r3, [r7, #4]
 80102d8:	0a1b      	lsrs	r3, r3, #8
 80102da:	b29a      	uxth	r2, r3
 80102dc:	88fb      	ldrh	r3, [r7, #6]
 80102de:	1c59      	adds	r1, r3, #1
 80102e0:	80f9      	strh	r1, [r7, #6]
 80102e2:	4619      	mov	r1, r3
 80102e4:	683b      	ldr	r3, [r7, #0]
 80102e6:	440b      	add	r3, r1
 80102e8:	b2d2      	uxtb	r2, r2
 80102ea:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80102ec:	88fb      	ldrh	r3, [r7, #6]
 80102ee:	1c5a      	adds	r2, r3, #1
 80102f0:	80fa      	strh	r2, [r7, #6]
 80102f2:	461a      	mov	r2, r3
 80102f4:	683b      	ldr	r3, [r7, #0]
 80102f6:	4413      	add	r3, r2
 80102f8:	88ba      	ldrh	r2, [r7, #4]
 80102fa:	b2d2      	uxtb	r2, r2
 80102fc:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80102fe:	88fb      	ldrh	r3, [r7, #6]
}
 8010300:	4618      	mov	r0, r3
 8010302:	3708      	adds	r7, #8
 8010304:	46bd      	mov	sp, r7
 8010306:	bd80      	pop	{r7, pc}
 8010308:	08016b68 	.word	0x08016b68
 801030c:	08016d78 	.word	0x08016d78
 8010310:	08016bc8 	.word	0x08016bc8

08010314 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8010314:	b580      	push	{r7, lr}
 8010316:	b084      	sub	sp, #16
 8010318:	af00      	add	r7, sp, #0
 801031a:	4603      	mov	r3, r0
 801031c:	60b9      	str	r1, [r7, #8]
 801031e:	607a      	str	r2, [r7, #4]
 8010320:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8010322:	89fb      	ldrh	r3, [r7, #14]
 8010324:	3304      	adds	r3, #4
 8010326:	2b44      	cmp	r3, #68	; 0x44
 8010328:	d906      	bls.n	8010338 <dhcp_option_long+0x24>
 801032a:	4b19      	ldr	r3, [pc, #100]	; (8010390 <dhcp_option_long+0x7c>)
 801032c:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8010330:	4918      	ldr	r1, [pc, #96]	; (8010394 <dhcp_option_long+0x80>)
 8010332:	4819      	ldr	r0, [pc, #100]	; (8010398 <dhcp_option_long+0x84>)
 8010334:	f003 fa92 	bl	801385c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	0e1a      	lsrs	r2, r3, #24
 801033c:	89fb      	ldrh	r3, [r7, #14]
 801033e:	1c59      	adds	r1, r3, #1
 8010340:	81f9      	strh	r1, [r7, #14]
 8010342:	4619      	mov	r1, r3
 8010344:	68bb      	ldr	r3, [r7, #8]
 8010346:	440b      	add	r3, r1
 8010348:	b2d2      	uxtb	r2, r2
 801034a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	0c1a      	lsrs	r2, r3, #16
 8010350:	89fb      	ldrh	r3, [r7, #14]
 8010352:	1c59      	adds	r1, r3, #1
 8010354:	81f9      	strh	r1, [r7, #14]
 8010356:	4619      	mov	r1, r3
 8010358:	68bb      	ldr	r3, [r7, #8]
 801035a:	440b      	add	r3, r1
 801035c:	b2d2      	uxtb	r2, r2
 801035e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	0a1a      	lsrs	r2, r3, #8
 8010364:	89fb      	ldrh	r3, [r7, #14]
 8010366:	1c59      	adds	r1, r3, #1
 8010368:	81f9      	strh	r1, [r7, #14]
 801036a:	4619      	mov	r1, r3
 801036c:	68bb      	ldr	r3, [r7, #8]
 801036e:	440b      	add	r3, r1
 8010370:	b2d2      	uxtb	r2, r2
 8010372:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8010374:	89fb      	ldrh	r3, [r7, #14]
 8010376:	1c5a      	adds	r2, r3, #1
 8010378:	81fa      	strh	r2, [r7, #14]
 801037a:	461a      	mov	r2, r3
 801037c:	68bb      	ldr	r3, [r7, #8]
 801037e:	4413      	add	r3, r2
 8010380:	687a      	ldr	r2, [r7, #4]
 8010382:	b2d2      	uxtb	r2, r2
 8010384:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010386:	89fb      	ldrh	r3, [r7, #14]
}
 8010388:	4618      	mov	r0, r3
 801038a:	3710      	adds	r7, #16
 801038c:	46bd      	mov	sp, r7
 801038e:	bd80      	pop	{r7, pc}
 8010390:	08016b68 	.word	0x08016b68
 8010394:	08016db4 	.word	0x08016db4
 8010398:	08016bc8 	.word	0x08016bc8

0801039c <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 801039c:	b580      	push	{r7, lr}
 801039e:	b090      	sub	sp, #64	; 0x40
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	6078      	str	r0, [r7, #4]
 80103a4:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 80103a6:	2300      	movs	r3, #0
 80103a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 80103aa:	2300      	movs	r3, #0
 80103ac:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 80103ae:	2208      	movs	r2, #8
 80103b0:	2100      	movs	r1, #0
 80103b2:	48be      	ldr	r0, [pc, #760]	; (80106ac <dhcp_parse_reply+0x310>)
 80103b4:	f003 f9ef 	bl	8013796 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	895b      	ldrh	r3, [r3, #10]
 80103bc:	2b2b      	cmp	r3, #43	; 0x2b
 80103be:	d802      	bhi.n	80103c6 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 80103c0:	f06f 0301 	mvn.w	r3, #1
 80103c4:	e2a8      	b.n	8010918 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	685b      	ldr	r3, [r3, #4]
 80103ca:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 80103cc:	23f0      	movs	r3, #240	; 0xf0
 80103ce:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	891b      	ldrh	r3, [r3, #8]
 80103d4:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80103da:	e00c      	b.n	80103f6 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 80103dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103de:	895b      	ldrh	r3, [r3, #10]
 80103e0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80103e2:	1ad3      	subs	r3, r2, r3
 80103e4:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 80103e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103e8:	895b      	ldrh	r3, [r3, #10]
 80103ea:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80103ec:	1ad3      	subs	r3, r2, r3
 80103ee:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 80103f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80103f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d004      	beq.n	8010406 <dhcp_parse_reply+0x6a>
 80103fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103fe:	895b      	ldrh	r3, [r3, #10]
 8010400:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010402:	429a      	cmp	r2, r3
 8010404:	d2ea      	bcs.n	80103dc <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8010406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010408:	2b00      	cmp	r3, #0
 801040a:	d102      	bne.n	8010412 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 801040c:	f06f 0301 	mvn.w	r3, #1
 8010410:	e282      	b.n	8010918 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 8010412:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010414:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8010416:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010418:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 801041a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801041c:	685b      	ldr	r3, [r3, #4]
 801041e:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8010420:	e23a      	b.n	8010898 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 8010422:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010424:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010426:	4413      	add	r3, r2
 8010428:	781b      	ldrb	r3, [r3, #0]
 801042a:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 801042c:	2300      	movs	r3, #0
 801042e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8010432:	f04f 33ff 	mov.w	r3, #4294967295
 8010436:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8010438:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801043a:	3302      	adds	r3, #2
 801043c:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801043e:	8bfa      	ldrh	r2, [r7, #30]
 8010440:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010442:	429a      	cmp	r2, r3
 8010444:	d202      	bcs.n	801044c <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8010446:	f06f 0301 	mvn.w	r3, #1
 801044a:	e265      	b.n	8010918 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801044c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801044e:	3301      	adds	r3, #1
 8010450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010452:	8952      	ldrh	r2, [r2, #10]
 8010454:	4293      	cmp	r3, r2
 8010456:	da07      	bge.n	8010468 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8010458:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801045a:	3301      	adds	r3, #1
 801045c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801045e:	4413      	add	r3, r2
 8010460:	781b      	ldrb	r3, [r3, #0]
 8010462:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010466:	e00b      	b.n	8010480 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8010468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d004      	beq.n	801047a <dhcp_parse_reply+0xde>
 8010470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	685b      	ldr	r3, [r3, #4]
 8010476:	781b      	ldrb	r3, [r3, #0]
 8010478:	e000      	b.n	801047c <dhcp_parse_reply+0xe0>
 801047a:	2300      	movs	r3, #0
 801047c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8010480:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010484:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8010488:	7dfb      	ldrb	r3, [r7, #23]
 801048a:	2b3b      	cmp	r3, #59	; 0x3b
 801048c:	f200 812d 	bhi.w	80106ea <dhcp_parse_reply+0x34e>
 8010490:	a201      	add	r2, pc, #4	; (adr r2, 8010498 <dhcp_parse_reply+0xfc>)
 8010492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010496:	bf00      	nop
 8010498:	08010589 	.word	0x08010589
 801049c:	08010599 	.word	0x08010599
 80104a0:	080106eb 	.word	0x080106eb
 80104a4:	080105bb 	.word	0x080105bb
 80104a8:	080106eb 	.word	0x080106eb
 80104ac:	080106eb 	.word	0x080106eb
 80104b0:	080106eb 	.word	0x080106eb
 80104b4:	080106eb 	.word	0x080106eb
 80104b8:	080106eb 	.word	0x080106eb
 80104bc:	080106eb 	.word	0x080106eb
 80104c0:	080106eb 	.word	0x080106eb
 80104c4:	080106eb 	.word	0x080106eb
 80104c8:	080106eb 	.word	0x080106eb
 80104cc:	080106eb 	.word	0x080106eb
 80104d0:	080106eb 	.word	0x080106eb
 80104d4:	080106eb 	.word	0x080106eb
 80104d8:	080106eb 	.word	0x080106eb
 80104dc:	080106eb 	.word	0x080106eb
 80104e0:	080106eb 	.word	0x080106eb
 80104e4:	080106eb 	.word	0x080106eb
 80104e8:	080106eb 	.word	0x080106eb
 80104ec:	080106eb 	.word	0x080106eb
 80104f0:	080106eb 	.word	0x080106eb
 80104f4:	080106eb 	.word	0x080106eb
 80104f8:	080106eb 	.word	0x080106eb
 80104fc:	080106eb 	.word	0x080106eb
 8010500:	080106eb 	.word	0x080106eb
 8010504:	080106eb 	.word	0x080106eb
 8010508:	080106eb 	.word	0x080106eb
 801050c:	080106eb 	.word	0x080106eb
 8010510:	080106eb 	.word	0x080106eb
 8010514:	080106eb 	.word	0x080106eb
 8010518:	080106eb 	.word	0x080106eb
 801051c:	080106eb 	.word	0x080106eb
 8010520:	080106eb 	.word	0x080106eb
 8010524:	080106eb 	.word	0x080106eb
 8010528:	080106eb 	.word	0x080106eb
 801052c:	080106eb 	.word	0x080106eb
 8010530:	080106eb 	.word	0x080106eb
 8010534:	080106eb 	.word	0x080106eb
 8010538:	080106eb 	.word	0x080106eb
 801053c:	080106eb 	.word	0x080106eb
 8010540:	080106eb 	.word	0x080106eb
 8010544:	080106eb 	.word	0x080106eb
 8010548:	080106eb 	.word	0x080106eb
 801054c:	080106eb 	.word	0x080106eb
 8010550:	080106eb 	.word	0x080106eb
 8010554:	080106eb 	.word	0x080106eb
 8010558:	080106eb 	.word	0x080106eb
 801055c:	080106eb 	.word	0x080106eb
 8010560:	080106eb 	.word	0x080106eb
 8010564:	080105e7 	.word	0x080105e7
 8010568:	08010609 	.word	0x08010609
 801056c:	08010645 	.word	0x08010645
 8010570:	08010667 	.word	0x08010667
 8010574:	080106eb 	.word	0x080106eb
 8010578:	080106eb 	.word	0x080106eb
 801057c:	080106eb 	.word	0x080106eb
 8010580:	08010689 	.word	0x08010689
 8010584:	080106c9 	.word	0x080106c9
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8010588:	2300      	movs	r3, #0
 801058a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801058e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010592:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8010596:	e0ac      	b.n	80106f2 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010598:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801059c:	2b04      	cmp	r3, #4
 801059e:	d009      	beq.n	80105b4 <dhcp_parse_reply+0x218>
 80105a0:	4b43      	ldr	r3, [pc, #268]	; (80106b0 <dhcp_parse_reply+0x314>)
 80105a2:	f240 622e 	movw	r2, #1582	; 0x62e
 80105a6:	4943      	ldr	r1, [pc, #268]	; (80106b4 <dhcp_parse_reply+0x318>)
 80105a8:	4843      	ldr	r0, [pc, #268]	; (80106b8 <dhcp_parse_reply+0x31c>)
 80105aa:	f003 f957 	bl	801385c <iprintf>
 80105ae:	f06f 0305 	mvn.w	r3, #5
 80105b2:	e1b1      	b.n	8010918 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 80105b4:	2306      	movs	r3, #6
 80105b6:	623b      	str	r3, [r7, #32]
        break;
 80105b8:	e09b      	b.n	80106f2 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 80105ba:	2304      	movs	r3, #4
 80105bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80105c0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80105c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80105c8:	429a      	cmp	r2, r3
 80105ca:	d209      	bcs.n	80105e0 <dhcp_parse_reply+0x244>
 80105cc:	4b38      	ldr	r3, [pc, #224]	; (80106b0 <dhcp_parse_reply+0x314>)
 80105ce:	f240 6233 	movw	r2, #1587	; 0x633
 80105d2:	493a      	ldr	r1, [pc, #232]	; (80106bc <dhcp_parse_reply+0x320>)
 80105d4:	4838      	ldr	r0, [pc, #224]	; (80106b8 <dhcp_parse_reply+0x31c>)
 80105d6:	f003 f941 	bl	801385c <iprintf>
 80105da:	f06f 0305 	mvn.w	r3, #5
 80105de:	e19b      	b.n	8010918 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 80105e0:	2307      	movs	r3, #7
 80105e2:	623b      	str	r3, [r7, #32]
        break;
 80105e4:	e085      	b.n	80106f2 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80105e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80105ea:	2b04      	cmp	r3, #4
 80105ec:	d009      	beq.n	8010602 <dhcp_parse_reply+0x266>
 80105ee:	4b30      	ldr	r3, [pc, #192]	; (80106b0 <dhcp_parse_reply+0x314>)
 80105f0:	f240 6241 	movw	r2, #1601	; 0x641
 80105f4:	492f      	ldr	r1, [pc, #188]	; (80106b4 <dhcp_parse_reply+0x318>)
 80105f6:	4830      	ldr	r0, [pc, #192]	; (80106b8 <dhcp_parse_reply+0x31c>)
 80105f8:	f003 f930 	bl	801385c <iprintf>
 80105fc:	f06f 0305 	mvn.w	r3, #5
 8010600:	e18a      	b.n	8010918 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8010602:	2303      	movs	r3, #3
 8010604:	623b      	str	r3, [r7, #32]
        break;
 8010606:	e074      	b.n	80106f2 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8010608:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801060c:	2b01      	cmp	r3, #1
 801060e:	d009      	beq.n	8010624 <dhcp_parse_reply+0x288>
 8010610:	4b27      	ldr	r3, [pc, #156]	; (80106b0 <dhcp_parse_reply+0x314>)
 8010612:	f240 624f 	movw	r2, #1615	; 0x64f
 8010616:	492a      	ldr	r1, [pc, #168]	; (80106c0 <dhcp_parse_reply+0x324>)
 8010618:	4827      	ldr	r0, [pc, #156]	; (80106b8 <dhcp_parse_reply+0x31c>)
 801061a:	f003 f91f 	bl	801385c <iprintf>
 801061e:	f06f 0305 	mvn.w	r3, #5
 8010622:	e179      	b.n	8010918 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8010624:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010626:	2bf0      	cmp	r3, #240	; 0xf0
 8010628:	d009      	beq.n	801063e <dhcp_parse_reply+0x2a2>
 801062a:	4b21      	ldr	r3, [pc, #132]	; (80106b0 <dhcp_parse_reply+0x314>)
 801062c:	f240 6251 	movw	r2, #1617	; 0x651
 8010630:	4924      	ldr	r1, [pc, #144]	; (80106c4 <dhcp_parse_reply+0x328>)
 8010632:	4821      	ldr	r0, [pc, #132]	; (80106b8 <dhcp_parse_reply+0x31c>)
 8010634:	f003 f912 	bl	801385c <iprintf>
 8010638:	f06f 0305 	mvn.w	r3, #5
 801063c:	e16c      	b.n	8010918 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801063e:	2300      	movs	r3, #0
 8010640:	623b      	str	r3, [r7, #32]
        break;
 8010642:	e056      	b.n	80106f2 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8010644:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010648:	2b01      	cmp	r3, #1
 801064a:	d009      	beq.n	8010660 <dhcp_parse_reply+0x2c4>
 801064c:	4b18      	ldr	r3, [pc, #96]	; (80106b0 <dhcp_parse_reply+0x314>)
 801064e:	f240 6255 	movw	r2, #1621	; 0x655
 8010652:	491b      	ldr	r1, [pc, #108]	; (80106c0 <dhcp_parse_reply+0x324>)
 8010654:	4818      	ldr	r0, [pc, #96]	; (80106b8 <dhcp_parse_reply+0x31c>)
 8010656:	f003 f901 	bl	801385c <iprintf>
 801065a:	f06f 0305 	mvn.w	r3, #5
 801065e:	e15b      	b.n	8010918 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8010660:	2301      	movs	r3, #1
 8010662:	623b      	str	r3, [r7, #32]
        break;
 8010664:	e045      	b.n	80106f2 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010666:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801066a:	2b04      	cmp	r3, #4
 801066c:	d009      	beq.n	8010682 <dhcp_parse_reply+0x2e6>
 801066e:	4b10      	ldr	r3, [pc, #64]	; (80106b0 <dhcp_parse_reply+0x314>)
 8010670:	f240 6259 	movw	r2, #1625	; 0x659
 8010674:	490f      	ldr	r1, [pc, #60]	; (80106b4 <dhcp_parse_reply+0x318>)
 8010676:	4810      	ldr	r0, [pc, #64]	; (80106b8 <dhcp_parse_reply+0x31c>)
 8010678:	f003 f8f0 	bl	801385c <iprintf>
 801067c:	f06f 0305 	mvn.w	r3, #5
 8010680:	e14a      	b.n	8010918 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8010682:	2302      	movs	r3, #2
 8010684:	623b      	str	r3, [r7, #32]
        break;
 8010686:	e034      	b.n	80106f2 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010688:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801068c:	2b04      	cmp	r3, #4
 801068e:	d009      	beq.n	80106a4 <dhcp_parse_reply+0x308>
 8010690:	4b07      	ldr	r3, [pc, #28]	; (80106b0 <dhcp_parse_reply+0x314>)
 8010692:	f240 625d 	movw	r2, #1629	; 0x65d
 8010696:	4907      	ldr	r1, [pc, #28]	; (80106b4 <dhcp_parse_reply+0x318>)
 8010698:	4807      	ldr	r0, [pc, #28]	; (80106b8 <dhcp_parse_reply+0x31c>)
 801069a:	f003 f8df 	bl	801385c <iprintf>
 801069e:	f06f 0305 	mvn.w	r3, #5
 80106a2:	e139      	b.n	8010918 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 80106a4:	2304      	movs	r3, #4
 80106a6:	623b      	str	r3, [r7, #32]
        break;
 80106a8:	e023      	b.n	80106f2 <dhcp_parse_reply+0x356>
 80106aa:	bf00      	nop
 80106ac:	2000ef74 	.word	0x2000ef74
 80106b0:	08016b68 	.word	0x08016b68
 80106b4:	08016df0 	.word	0x08016df0
 80106b8:	08016bc8 	.word	0x08016bc8
 80106bc:	08016dfc 	.word	0x08016dfc
 80106c0:	08016e10 	.word	0x08016e10
 80106c4:	08016e1c 	.word	0x08016e1c
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80106c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80106cc:	2b04      	cmp	r3, #4
 80106ce:	d009      	beq.n	80106e4 <dhcp_parse_reply+0x348>
 80106d0:	4b93      	ldr	r3, [pc, #588]	; (8010920 <dhcp_parse_reply+0x584>)
 80106d2:	f240 6261 	movw	r2, #1633	; 0x661
 80106d6:	4993      	ldr	r1, [pc, #588]	; (8010924 <dhcp_parse_reply+0x588>)
 80106d8:	4893      	ldr	r0, [pc, #588]	; (8010928 <dhcp_parse_reply+0x58c>)
 80106da:	f003 f8bf 	bl	801385c <iprintf>
 80106de:	f06f 0305 	mvn.w	r3, #5
 80106e2:	e119      	b.n	8010918 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 80106e4:	2305      	movs	r3, #5
 80106e6:	623b      	str	r3, [r7, #32]
        break;
 80106e8:	e003      	b.n	80106f2 <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 80106ea:	2300      	movs	r3, #0
 80106ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 80106f0:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 80106f2:	7dfb      	ldrb	r3, [r7, #23]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d103      	bne.n	8010700 <dhcp_parse_reply+0x364>
      offset++;
 80106f8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80106fa:	3301      	adds	r3, #1
 80106fc:	877b      	strh	r3, [r7, #58]	; 0x3a
 80106fe:	e0a1      	b.n	8010844 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8010700:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010702:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010706:	4413      	add	r3, r2
 8010708:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801070c:	4293      	cmp	r3, r2
 801070e:	dd02      	ble.n	8010716 <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 8010710:	f06f 0301 	mvn.w	r3, #1
 8010714:	e100      	b.n	8010918 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 8010716:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801071a:	b29a      	uxth	r2, r3
 801071c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801071e:	4413      	add	r3, r2
 8010720:	b29b      	uxth	r3, r3
 8010722:	3302      	adds	r3, #2
 8010724:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8010726:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801072a:	2b00      	cmp	r3, #0
 801072c:	f000 808a 	beq.w	8010844 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 8010730:	2300      	movs	r3, #0
 8010732:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8010734:	6a3b      	ldr	r3, [r7, #32]
 8010736:	2b00      	cmp	r3, #0
 8010738:	db02      	blt.n	8010740 <dhcp_parse_reply+0x3a4>
 801073a:	6a3b      	ldr	r3, [r7, #32]
 801073c:	2b07      	cmp	r3, #7
 801073e:	dd06      	ble.n	801074e <dhcp_parse_reply+0x3b2>
 8010740:	4b77      	ldr	r3, [pc, #476]	; (8010920 <dhcp_parse_reply+0x584>)
 8010742:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8010746:	4979      	ldr	r1, [pc, #484]	; (801092c <dhcp_parse_reply+0x590>)
 8010748:	4877      	ldr	r0, [pc, #476]	; (8010928 <dhcp_parse_reply+0x58c>)
 801074a:	f003 f887 	bl	801385c <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801074e:	4a78      	ldr	r2, [pc, #480]	; (8010930 <dhcp_parse_reply+0x594>)
 8010750:	6a3b      	ldr	r3, [r7, #32]
 8010752:	4413      	add	r3, r2
 8010754:	781b      	ldrb	r3, [r3, #0]
 8010756:	2b00      	cmp	r3, #0
 8010758:	d174      	bne.n	8010844 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 801075a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801075e:	2b04      	cmp	r3, #4
 8010760:	bf28      	it	cs
 8010762:	2304      	movcs	r3, #4
 8010764:	b2db      	uxtb	r3, r3
 8010766:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8010768:	8bfb      	ldrh	r3, [r7, #30]
 801076a:	8aba      	ldrh	r2, [r7, #20]
 801076c:	f107 0108 	add.w	r1, r7, #8
 8010770:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010772:	f7f8 fc1b 	bl	8008fac <pbuf_copy_partial>
 8010776:	4603      	mov	r3, r0
 8010778:	461a      	mov	r2, r3
 801077a:	8abb      	ldrh	r3, [r7, #20]
 801077c:	4293      	cmp	r3, r2
 801077e:	d002      	beq.n	8010786 <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 8010780:	f06f 0301 	mvn.w	r3, #1
 8010784:	e0c8      	b.n	8010918 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 8010786:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801078a:	2b04      	cmp	r3, #4
 801078c:	d933      	bls.n	80107f6 <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801078e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010792:	f003 0303 	and.w	r3, r3, #3
 8010796:	b2db      	uxtb	r3, r3
 8010798:	2b00      	cmp	r3, #0
 801079a:	d009      	beq.n	80107b0 <dhcp_parse_reply+0x414>
 801079c:	4b60      	ldr	r3, [pc, #384]	; (8010920 <dhcp_parse_reply+0x584>)
 801079e:	f240 6281 	movw	r2, #1665	; 0x681
 80107a2:	4964      	ldr	r1, [pc, #400]	; (8010934 <dhcp_parse_reply+0x598>)
 80107a4:	4860      	ldr	r0, [pc, #384]	; (8010928 <dhcp_parse_reply+0x58c>)
 80107a6:	f003 f859 	bl	801385c <iprintf>
 80107aa:	f06f 0305 	mvn.w	r3, #5
 80107ae:	e0b3      	b.n	8010918 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 80107b0:	4a5f      	ldr	r2, [pc, #380]	; (8010930 <dhcp_parse_reply+0x594>)
 80107b2:	6a3b      	ldr	r3, [r7, #32]
 80107b4:	4413      	add	r3, r2
 80107b6:	2201      	movs	r2, #1
 80107b8:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80107ba:	68bb      	ldr	r3, [r7, #8]
 80107bc:	4618      	mov	r0, r3
 80107be:	f7f6 fe4c 	bl	800745a <lwip_htonl>
 80107c2:	4602      	mov	r2, r0
 80107c4:	495c      	ldr	r1, [pc, #368]	; (8010938 <dhcp_parse_reply+0x59c>)
 80107c6:	6a3b      	ldr	r3, [r7, #32]
 80107c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 80107cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80107d0:	3b04      	subs	r3, #4
 80107d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 80107d6:	8bfb      	ldrh	r3, [r7, #30]
 80107d8:	3304      	adds	r3, #4
 80107da:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 80107dc:	8a7a      	ldrh	r2, [r7, #18]
 80107de:	8bfb      	ldrh	r3, [r7, #30]
 80107e0:	429a      	cmp	r2, r3
 80107e2:	d202      	bcs.n	80107ea <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 80107e4:	f06f 0301 	mvn.w	r3, #1
 80107e8:	e096      	b.n	8010918 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 80107ea:	8a7b      	ldrh	r3, [r7, #18]
 80107ec:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 80107ee:	6a3b      	ldr	r3, [r7, #32]
 80107f0:	3301      	adds	r3, #1
 80107f2:	623b      	str	r3, [r7, #32]
            goto decode_next;
 80107f4:	e79e      	b.n	8010734 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 80107f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80107fa:	2b04      	cmp	r3, #4
 80107fc:	d106      	bne.n	801080c <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 80107fe:	68bb      	ldr	r3, [r7, #8]
 8010800:	4618      	mov	r0, r3
 8010802:	f7f6 fe2a 	bl	800745a <lwip_htonl>
 8010806:	4603      	mov	r3, r0
 8010808:	60bb      	str	r3, [r7, #8]
 801080a:	e011      	b.n	8010830 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801080c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010810:	2b01      	cmp	r3, #1
 8010812:	d009      	beq.n	8010828 <dhcp_parse_reply+0x48c>
 8010814:	4b42      	ldr	r3, [pc, #264]	; (8010920 <dhcp_parse_reply+0x584>)
 8010816:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 801081a:	4948      	ldr	r1, [pc, #288]	; (801093c <dhcp_parse_reply+0x5a0>)
 801081c:	4842      	ldr	r0, [pc, #264]	; (8010928 <dhcp_parse_reply+0x58c>)
 801081e:	f003 f81d 	bl	801385c <iprintf>
 8010822:	f06f 0305 	mvn.w	r3, #5
 8010826:	e077      	b.n	8010918 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 8010828:	f107 0308 	add.w	r3, r7, #8
 801082c:	781b      	ldrb	r3, [r3, #0]
 801082e:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8010830:	4a3f      	ldr	r2, [pc, #252]	; (8010930 <dhcp_parse_reply+0x594>)
 8010832:	6a3b      	ldr	r3, [r7, #32]
 8010834:	4413      	add	r3, r2
 8010836:	2201      	movs	r2, #1
 8010838:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801083a:	68ba      	ldr	r2, [r7, #8]
 801083c:	493e      	ldr	r1, [pc, #248]	; (8010938 <dhcp_parse_reply+0x59c>)
 801083e:	6a3b      	ldr	r3, [r7, #32]
 8010840:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8010844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010846:	895b      	ldrh	r3, [r3, #10]
 8010848:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801084a:	429a      	cmp	r2, r3
 801084c:	d324      	bcc.n	8010898 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 801084e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010850:	895b      	ldrh	r3, [r3, #10]
 8010852:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010854:	1ad3      	subs	r3, r2, r3
 8010856:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8010858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801085a:	895b      	ldrh	r3, [r3, #10]
 801085c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801085e:	1ad3      	subs	r3, r2, r3
 8010860:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8010862:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010864:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8010866:	429a      	cmp	r2, r3
 8010868:	d213      	bcs.n	8010892 <dhcp_parse_reply+0x4f6>
        q = q->next;
 801086a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8010870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010872:	2b00      	cmp	r3, #0
 8010874:	d109      	bne.n	801088a <dhcp_parse_reply+0x4ee>
 8010876:	4b2a      	ldr	r3, [pc, #168]	; (8010920 <dhcp_parse_reply+0x584>)
 8010878:	f240 629d 	movw	r2, #1693	; 0x69d
 801087c:	4930      	ldr	r1, [pc, #192]	; (8010940 <dhcp_parse_reply+0x5a4>)
 801087e:	482a      	ldr	r0, [pc, #168]	; (8010928 <dhcp_parse_reply+0x58c>)
 8010880:	f002 ffec 	bl	801385c <iprintf>
 8010884:	f06f 0305 	mvn.w	r3, #5
 8010888:	e046      	b.n	8010918 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 801088a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801088c:	685b      	ldr	r3, [r3, #4]
 801088e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010890:	e002      	b.n	8010898 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8010892:	f06f 0301 	mvn.w	r3, #1
 8010896:	e03f      	b.n	8010918 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8010898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801089a:	2b00      	cmp	r3, #0
 801089c:	d00a      	beq.n	80108b4 <dhcp_parse_reply+0x518>
 801089e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80108a0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80108a2:	429a      	cmp	r2, r3
 80108a4:	d206      	bcs.n	80108b4 <dhcp_parse_reply+0x518>
 80108a6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80108a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80108aa:	4413      	add	r3, r2
 80108ac:	781b      	ldrb	r3, [r3, #0]
 80108ae:	2bff      	cmp	r3, #255	; 0xff
 80108b0:	f47f adb7 	bne.w	8010422 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 80108b4:	4b1e      	ldr	r3, [pc, #120]	; (8010930 <dhcp_parse_reply+0x594>)
 80108b6:	781b      	ldrb	r3, [r3, #0]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d018      	beq.n	80108ee <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80108bc:	4b1e      	ldr	r3, [pc, #120]	; (8010938 <dhcp_parse_reply+0x59c>)
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80108c2:	4b1b      	ldr	r3, [pc, #108]	; (8010930 <dhcp_parse_reply+0x594>)
 80108c4:	2200      	movs	r2, #0
 80108c6:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	2b01      	cmp	r3, #1
 80108cc:	d102      	bne.n	80108d4 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 80108ce:	2301      	movs	r3, #1
 80108d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80108d2:	e00c      	b.n	80108ee <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	2b02      	cmp	r3, #2
 80108d8:	d102      	bne.n	80108e0 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 80108da:	2301      	movs	r3, #1
 80108dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80108de:	e006      	b.n	80108ee <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	2b03      	cmp	r3, #3
 80108e4:	d103      	bne.n	80108ee <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 80108e6:	2301      	movs	r3, #1
 80108e8:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 80108ea:	2301      	movs	r3, #1
 80108ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 80108ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d006      	beq.n	8010902 <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 80108f4:	2300      	movs	r3, #0
 80108f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 80108f8:	236c      	movs	r3, #108	; 0x6c
 80108fa:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80108fc:	23ec      	movs	r3, #236	; 0xec
 80108fe:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8010900:	e569      	b.n	80103d6 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8010902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010904:	2b00      	cmp	r3, #0
 8010906:	d006      	beq.n	8010916 <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 8010908:	2300      	movs	r3, #0
 801090a:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 801090c:	232c      	movs	r3, #44	; 0x2c
 801090e:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8010910:	236c      	movs	r3, #108	; 0x6c
 8010912:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8010914:	e55f      	b.n	80103d6 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8010916:	2300      	movs	r3, #0
}
 8010918:	4618      	mov	r0, r3
 801091a:	3740      	adds	r7, #64	; 0x40
 801091c:	46bd      	mov	sp, r7
 801091e:	bd80      	pop	{r7, pc}
 8010920:	08016b68 	.word	0x08016b68
 8010924:	08016df0 	.word	0x08016df0
 8010928:	08016bc8 	.word	0x08016bc8
 801092c:	08016e34 	.word	0x08016e34
 8010930:	2000ef74 	.word	0x2000ef74
 8010934:	08016e48 	.word	0x08016e48
 8010938:	2000ef7c 	.word	0x2000ef7c
 801093c:	08016e60 	.word	0x08016e60
 8010940:	08016e74 	.word	0x08016e74

08010944 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8010944:	b580      	push	{r7, lr}
 8010946:	b08a      	sub	sp, #40	; 0x28
 8010948:	af00      	add	r7, sp, #0
 801094a:	60f8      	str	r0, [r7, #12]
 801094c:	60b9      	str	r1, [r7, #8]
 801094e:	607a      	str	r2, [r7, #4]
 8010950:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8010952:	4b60      	ldr	r3, [pc, #384]	; (8010ad4 <dhcp_recv+0x190>)
 8010954:	685b      	ldr	r3, [r3, #4]
 8010956:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010958:	6a3b      	ldr	r3, [r7, #32]
 801095a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801095c:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	685b      	ldr	r3, [r3, #4]
 8010962:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8010964:	69fb      	ldr	r3, [r7, #28]
 8010966:	2b00      	cmp	r3, #0
 8010968:	f000 809d 	beq.w	8010aa6 <dhcp_recv+0x162>
 801096c:	69fb      	ldr	r3, [r7, #28]
 801096e:	791b      	ldrb	r3, [r3, #4]
 8010970:	2b00      	cmp	r3, #0
 8010972:	f000 8098 	beq.w	8010aa6 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	895b      	ldrh	r3, [r3, #10]
 801097a:	2b2b      	cmp	r3, #43	; 0x2b
 801097c:	f240 8095 	bls.w	8010aaa <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8010980:	69bb      	ldr	r3, [r7, #24]
 8010982:	781b      	ldrb	r3, [r3, #0]
 8010984:	2b02      	cmp	r3, #2
 8010986:	f040 8092 	bne.w	8010aae <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801098a:	2300      	movs	r3, #0
 801098c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010990:	e012      	b.n	80109b8 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8010992:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010996:	6a3a      	ldr	r2, [r7, #32]
 8010998:	4413      	add	r3, r2
 801099a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801099e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80109a2:	69b9      	ldr	r1, [r7, #24]
 80109a4:	440b      	add	r3, r1
 80109a6:	7f1b      	ldrb	r3, [r3, #28]
 80109a8:	429a      	cmp	r2, r3
 80109aa:	f040 8082 	bne.w	8010ab2 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80109ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80109b2:	3301      	adds	r3, #1
 80109b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80109b8:	6a3b      	ldr	r3, [r7, #32]
 80109ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80109be:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80109c2:	429a      	cmp	r2, r3
 80109c4:	d203      	bcs.n	80109ce <dhcp_recv+0x8a>
 80109c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80109ca:	2b05      	cmp	r3, #5
 80109cc:	d9e1      	bls.n	8010992 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 80109ce:	69bb      	ldr	r3, [r7, #24]
 80109d0:	685b      	ldr	r3, [r3, #4]
 80109d2:	4618      	mov	r0, r3
 80109d4:	f7f6 fd41 	bl	800745a <lwip_htonl>
 80109d8:	4602      	mov	r2, r0
 80109da:	69fb      	ldr	r3, [r7, #28]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	429a      	cmp	r2, r3
 80109e0:	d169      	bne.n	8010ab6 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 80109e2:	69f9      	ldr	r1, [r7, #28]
 80109e4:	6878      	ldr	r0, [r7, #4]
 80109e6:	f7ff fcd9 	bl	801039c <dhcp_parse_reply>
 80109ea:	4603      	mov	r3, r0
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d164      	bne.n	8010aba <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80109f0:	4b39      	ldr	r3, [pc, #228]	; (8010ad8 <dhcp_recv+0x194>)
 80109f2:	785b      	ldrb	r3, [r3, #1]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d062      	beq.n	8010abe <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	685b      	ldr	r3, [r3, #4]
 80109fc:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80109fe:	4b37      	ldr	r3, [pc, #220]	; (8010adc <dhcp_recv+0x198>)
 8010a00:	685b      	ldr	r3, [r3, #4]
 8010a02:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8010a04:	7cfb      	ldrb	r3, [r7, #19]
 8010a06:	2b05      	cmp	r3, #5
 8010a08:	d12a      	bne.n	8010a60 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8010a0a:	69fb      	ldr	r3, [r7, #28]
 8010a0c:	795b      	ldrb	r3, [r3, #5]
 8010a0e:	2b01      	cmp	r3, #1
 8010a10:	d112      	bne.n	8010a38 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8010a12:	6979      	ldr	r1, [r7, #20]
 8010a14:	6a38      	ldr	r0, [r7, #32]
 8010a16:	f7fe fe17 	bl	800f648 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8010a1a:	6a3b      	ldr	r3, [r7, #32]
 8010a1c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010a20:	f003 0308 	and.w	r3, r3, #8
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d003      	beq.n	8010a30 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8010a28:	6a38      	ldr	r0, [r7, #32]
 8010a2a:	f7fe fb87 	bl	800f13c <dhcp_check>
 8010a2e:	e049      	b.n	8010ac4 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8010a30:	6a38      	ldr	r0, [r7, #32]
 8010a32:	f7ff f867 	bl	800fb04 <dhcp_bind>
 8010a36:	e045      	b.n	8010ac4 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8010a38:	69fb      	ldr	r3, [r7, #28]
 8010a3a:	795b      	ldrb	r3, [r3, #5]
 8010a3c:	2b03      	cmp	r3, #3
 8010a3e:	d007      	beq.n	8010a50 <dhcp_recv+0x10c>
 8010a40:	69fb      	ldr	r3, [r7, #28]
 8010a42:	795b      	ldrb	r3, [r3, #5]
 8010a44:	2b04      	cmp	r3, #4
 8010a46:	d003      	beq.n	8010a50 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8010a48:	69fb      	ldr	r3, [r7, #28]
 8010a4a:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8010a4c:	2b05      	cmp	r3, #5
 8010a4e:	d139      	bne.n	8010ac4 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8010a50:	6979      	ldr	r1, [r7, #20]
 8010a52:	6a38      	ldr	r0, [r7, #32]
 8010a54:	f7fe fdf8 	bl	800f648 <dhcp_handle_ack>
      dhcp_bind(netif);
 8010a58:	6a38      	ldr	r0, [r7, #32]
 8010a5a:	f7ff f853 	bl	800fb04 <dhcp_bind>
 8010a5e:	e031      	b.n	8010ac4 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8010a60:	7cfb      	ldrb	r3, [r7, #19]
 8010a62:	2b06      	cmp	r3, #6
 8010a64:	d113      	bne.n	8010a8e <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8010a66:	69fb      	ldr	r3, [r7, #28]
 8010a68:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8010a6a:	2b03      	cmp	r3, #3
 8010a6c:	d00b      	beq.n	8010a86 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8010a6e:	69fb      	ldr	r3, [r7, #28]
 8010a70:	795b      	ldrb	r3, [r3, #5]
 8010a72:	2b01      	cmp	r3, #1
 8010a74:	d007      	beq.n	8010a86 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8010a76:	69fb      	ldr	r3, [r7, #28]
 8010a78:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8010a7a:	2b04      	cmp	r3, #4
 8010a7c:	d003      	beq.n	8010a86 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8010a7e:	69fb      	ldr	r3, [r7, #28]
 8010a80:	795b      	ldrb	r3, [r3, #5]
 8010a82:	2b05      	cmp	r3, #5
 8010a84:	d103      	bne.n	8010a8e <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8010a86:	6a38      	ldr	r0, [r7, #32]
 8010a88:	f7fe fb3e 	bl	800f108 <dhcp_handle_nak>
 8010a8c:	e01a      	b.n	8010ac4 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8010a8e:	7cfb      	ldrb	r3, [r7, #19]
 8010a90:	2b02      	cmp	r3, #2
 8010a92:	d116      	bne.n	8010ac2 <dhcp_recv+0x17e>
 8010a94:	69fb      	ldr	r3, [r7, #28]
 8010a96:	795b      	ldrb	r3, [r3, #5]
 8010a98:	2b06      	cmp	r3, #6
 8010a9a:	d112      	bne.n	8010ac2 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8010a9c:	6979      	ldr	r1, [r7, #20]
 8010a9e:	6a38      	ldr	r0, [r7, #32]
 8010aa0:	f7fe fb80 	bl	800f1a4 <dhcp_handle_offer>
 8010aa4:	e00e      	b.n	8010ac4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8010aa6:	bf00      	nop
 8010aa8:	e00c      	b.n	8010ac4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8010aaa:	bf00      	nop
 8010aac:	e00a      	b.n	8010ac4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8010aae:	bf00      	nop
 8010ab0:	e008      	b.n	8010ac4 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8010ab2:	bf00      	nop
 8010ab4:	e006      	b.n	8010ac4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8010ab6:	bf00      	nop
 8010ab8:	e004      	b.n	8010ac4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8010aba:	bf00      	nop
 8010abc:	e002      	b.n	8010ac4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8010abe:	bf00      	nop
 8010ac0:	e000      	b.n	8010ac4 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8010ac2:	bf00      	nop
  pbuf_free(p);
 8010ac4:	6878      	ldr	r0, [r7, #4]
 8010ac6:	f7f8 f86b 	bl	8008ba0 <pbuf_free>
}
 8010aca:	bf00      	nop
 8010acc:	3728      	adds	r7, #40	; 0x28
 8010ace:	46bd      	mov	sp, r7
 8010ad0:	bd80      	pop	{r7, pc}
 8010ad2:	bf00      	nop
 8010ad4:	2000b824 	.word	0x2000b824
 8010ad8:	2000ef74 	.word	0x2000ef74
 8010adc:	2000ef7c 	.word	0x2000ef7c

08010ae0 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8010ae0:	b580      	push	{r7, lr}
 8010ae2:	b088      	sub	sp, #32
 8010ae4:	af00      	add	r7, sp, #0
 8010ae6:	60f8      	str	r0, [r7, #12]
 8010ae8:	60b9      	str	r1, [r7, #8]
 8010aea:	603b      	str	r3, [r7, #0]
 8010aec:	4613      	mov	r3, r2
 8010aee:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d108      	bne.n	8010b08 <dhcp_create_msg+0x28>
 8010af6:	4b5f      	ldr	r3, [pc, #380]	; (8010c74 <dhcp_create_msg+0x194>)
 8010af8:	f240 7269 	movw	r2, #1897	; 0x769
 8010afc:	495e      	ldr	r1, [pc, #376]	; (8010c78 <dhcp_create_msg+0x198>)
 8010afe:	485f      	ldr	r0, [pc, #380]	; (8010c7c <dhcp_create_msg+0x19c>)
 8010b00:	f002 feac 	bl	801385c <iprintf>
 8010b04:	2300      	movs	r3, #0
 8010b06:	e0b1      	b.n	8010c6c <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8010b08:	68bb      	ldr	r3, [r7, #8]
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d108      	bne.n	8010b20 <dhcp_create_msg+0x40>
 8010b0e:	4b59      	ldr	r3, [pc, #356]	; (8010c74 <dhcp_create_msg+0x194>)
 8010b10:	f240 726a 	movw	r2, #1898	; 0x76a
 8010b14:	495a      	ldr	r1, [pc, #360]	; (8010c80 <dhcp_create_msg+0x1a0>)
 8010b16:	4859      	ldr	r0, [pc, #356]	; (8010c7c <dhcp_create_msg+0x19c>)
 8010b18:	f002 fea0 	bl	801385c <iprintf>
 8010b1c:	2300      	movs	r3, #0
 8010b1e:	e0a5      	b.n	8010c6c <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8010b20:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010b24:	f44f 719a 	mov.w	r1, #308	; 0x134
 8010b28:	2036      	movs	r0, #54	; 0x36
 8010b2a:	f7f7 fd55 	bl	80085d8 <pbuf_alloc>
 8010b2e:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8010b30:	69bb      	ldr	r3, [r7, #24]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d101      	bne.n	8010b3a <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8010b36:	2300      	movs	r3, #0
 8010b38:	e098      	b.n	8010c6c <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8010b3a:	69bb      	ldr	r3, [r7, #24]
 8010b3c:	895b      	ldrh	r3, [r3, #10]
 8010b3e:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8010b42:	d206      	bcs.n	8010b52 <dhcp_create_msg+0x72>
 8010b44:	4b4b      	ldr	r3, [pc, #300]	; (8010c74 <dhcp_create_msg+0x194>)
 8010b46:	f240 7271 	movw	r2, #1905	; 0x771
 8010b4a:	494e      	ldr	r1, [pc, #312]	; (8010c84 <dhcp_create_msg+0x1a4>)
 8010b4c:	484b      	ldr	r0, [pc, #300]	; (8010c7c <dhcp_create_msg+0x19c>)
 8010b4e:	f002 fe85 	bl	801385c <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8010b52:	79fb      	ldrb	r3, [r7, #7]
 8010b54:	2b03      	cmp	r3, #3
 8010b56:	d103      	bne.n	8010b60 <dhcp_create_msg+0x80>
 8010b58:	68bb      	ldr	r3, [r7, #8]
 8010b5a:	795b      	ldrb	r3, [r3, #5]
 8010b5c:	2b03      	cmp	r3, #3
 8010b5e:	d10d      	bne.n	8010b7c <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8010b60:	68bb      	ldr	r3, [r7, #8]
 8010b62:	799b      	ldrb	r3, [r3, #6]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d105      	bne.n	8010b74 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8010b68:	f002 fe90 	bl	801388c <rand>
 8010b6c:	4603      	mov	r3, r0
 8010b6e:	461a      	mov	r2, r3
 8010b70:	4b45      	ldr	r3, [pc, #276]	; (8010c88 <dhcp_create_msg+0x1a8>)
 8010b72:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8010b74:	4b44      	ldr	r3, [pc, #272]	; (8010c88 <dhcp_create_msg+0x1a8>)
 8010b76:	681a      	ldr	r2, [r3, #0]
 8010b78:	68bb      	ldr	r3, [r7, #8]
 8010b7a:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8010b7c:	69bb      	ldr	r3, [r7, #24]
 8010b7e:	685b      	ldr	r3, [r3, #4]
 8010b80:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8010b82:	f44f 729a 	mov.w	r2, #308	; 0x134
 8010b86:	2100      	movs	r1, #0
 8010b88:	6978      	ldr	r0, [r7, #20]
 8010b8a:	f002 fe04 	bl	8013796 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8010b8e:	697b      	ldr	r3, [r7, #20]
 8010b90:	2201      	movs	r2, #1
 8010b92:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8010b94:	697b      	ldr	r3, [r7, #20]
 8010b96:	2201      	movs	r2, #1
 8010b98:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8010ba0:	697b      	ldr	r3, [r7, #20]
 8010ba2:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8010ba4:	68bb      	ldr	r3, [r7, #8]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	4618      	mov	r0, r3
 8010baa:	f7f6 fc56 	bl	800745a <lwip_htonl>
 8010bae:	4602      	mov	r2, r0
 8010bb0:	697b      	ldr	r3, [r7, #20]
 8010bb2:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8010bb4:	79fb      	ldrb	r3, [r7, #7]
 8010bb6:	2b08      	cmp	r3, #8
 8010bb8:	d010      	beq.n	8010bdc <dhcp_create_msg+0xfc>
 8010bba:	79fb      	ldrb	r3, [r7, #7]
 8010bbc:	2b04      	cmp	r3, #4
 8010bbe:	d00d      	beq.n	8010bdc <dhcp_create_msg+0xfc>
 8010bc0:	79fb      	ldrb	r3, [r7, #7]
 8010bc2:	2b07      	cmp	r3, #7
 8010bc4:	d00a      	beq.n	8010bdc <dhcp_create_msg+0xfc>
 8010bc6:	79fb      	ldrb	r3, [r7, #7]
 8010bc8:	2b03      	cmp	r3, #3
 8010bca:	d10c      	bne.n	8010be6 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8010bcc:	68bb      	ldr	r3, [r7, #8]
 8010bce:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8010bd0:	2b05      	cmp	r3, #5
 8010bd2:	d003      	beq.n	8010bdc <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8010bd4:	68bb      	ldr	r3, [r7, #8]
 8010bd6:	795b      	ldrb	r3, [r3, #5]
 8010bd8:	2b04      	cmp	r3, #4
 8010bda:	d104      	bne.n	8010be6 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	3304      	adds	r3, #4
 8010be0:	681a      	ldr	r2, [r3, #0]
 8010be2:	697b      	ldr	r3, [r7, #20]
 8010be4:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8010be6:	2300      	movs	r3, #0
 8010be8:	83fb      	strh	r3, [r7, #30]
 8010bea:	e00c      	b.n	8010c06 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8010bec:	8bfa      	ldrh	r2, [r7, #30]
 8010bee:	8bfb      	ldrh	r3, [r7, #30]
 8010bf0:	68f9      	ldr	r1, [r7, #12]
 8010bf2:	440a      	add	r2, r1
 8010bf4:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8010bf8:	697a      	ldr	r2, [r7, #20]
 8010bfa:	4413      	add	r3, r2
 8010bfc:	460a      	mov	r2, r1
 8010bfe:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8010c00:	8bfb      	ldrh	r3, [r7, #30]
 8010c02:	3301      	adds	r3, #1
 8010c04:	83fb      	strh	r3, [r7, #30]
 8010c06:	8bfb      	ldrh	r3, [r7, #30]
 8010c08:	2b05      	cmp	r3, #5
 8010c0a:	d9ef      	bls.n	8010bec <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8010c0c:	697b      	ldr	r3, [r7, #20]
 8010c0e:	2200      	movs	r2, #0
 8010c10:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8010c14:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8010c18:	2200      	movs	r2, #0
 8010c1a:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8010c1e:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8010c22:	2200      	movs	r2, #0
 8010c24:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8010c28:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8010c2c:	2200      	movs	r2, #0
 8010c2e:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8010c32:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8010c36:	697b      	ldr	r3, [r7, #20]
 8010c38:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010c3c:	2301      	movs	r3, #1
 8010c3e:	2235      	movs	r2, #53	; 0x35
 8010c40:	2000      	movs	r0, #0
 8010c42:	f7ff fadb 	bl	80101fc <dhcp_option>
 8010c46:	4603      	mov	r3, r0
 8010c48:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8010c4a:	697b      	ldr	r3, [r7, #20]
 8010c4c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010c50:	79fa      	ldrb	r2, [r7, #7]
 8010c52:	8a7b      	ldrh	r3, [r7, #18]
 8010c54:	4618      	mov	r0, r3
 8010c56:	f7ff fb05 	bl	8010264 <dhcp_option_byte>
 8010c5a:	4603      	mov	r3, r0
 8010c5c:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8010c5e:	683b      	ldr	r3, [r7, #0]
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d002      	beq.n	8010c6a <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8010c64:	683b      	ldr	r3, [r7, #0]
 8010c66:	8a7a      	ldrh	r2, [r7, #18]
 8010c68:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8010c6a:	69bb      	ldr	r3, [r7, #24]
}
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	3720      	adds	r7, #32
 8010c70:	46bd      	mov	sp, r7
 8010c72:	bd80      	pop	{r7, pc}
 8010c74:	08016b68 	.word	0x08016b68
 8010c78:	08016e88 	.word	0x08016e88
 8010c7c:	08016bc8 	.word	0x08016bc8
 8010c80:	08016ea8 	.word	0x08016ea8
 8010c84:	08016ec8 	.word	0x08016ec8
 8010c88:	20008550 	.word	0x20008550

08010c8c <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8010c8c:	b580      	push	{r7, lr}
 8010c8e:	b084      	sub	sp, #16
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	4603      	mov	r3, r0
 8010c94:	60b9      	str	r1, [r7, #8]
 8010c96:	607a      	str	r2, [r7, #4]
 8010c98:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8010c9a:	89fb      	ldrh	r3, [r7, #14]
 8010c9c:	1c5a      	adds	r2, r3, #1
 8010c9e:	81fa      	strh	r2, [r7, #14]
 8010ca0:	461a      	mov	r2, r3
 8010ca2:	68bb      	ldr	r3, [r7, #8]
 8010ca4:	4413      	add	r3, r2
 8010ca6:	22ff      	movs	r2, #255	; 0xff
 8010ca8:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8010caa:	e007      	b.n	8010cbc <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8010cac:	89fb      	ldrh	r3, [r7, #14]
 8010cae:	1c5a      	adds	r2, r3, #1
 8010cb0:	81fa      	strh	r2, [r7, #14]
 8010cb2:	461a      	mov	r2, r3
 8010cb4:	68bb      	ldr	r3, [r7, #8]
 8010cb6:	4413      	add	r3, r2
 8010cb8:	2200      	movs	r2, #0
 8010cba:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8010cbc:	89fb      	ldrh	r3, [r7, #14]
 8010cbe:	2b43      	cmp	r3, #67	; 0x43
 8010cc0:	d904      	bls.n	8010ccc <dhcp_option_trailer+0x40>
 8010cc2:	89fb      	ldrh	r3, [r7, #14]
 8010cc4:	f003 0303 	and.w	r3, r3, #3
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d002      	beq.n	8010cd2 <dhcp_option_trailer+0x46>
 8010ccc:	89fb      	ldrh	r3, [r7, #14]
 8010cce:	2b43      	cmp	r3, #67	; 0x43
 8010cd0:	d9ec      	bls.n	8010cac <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8010cd2:	89fb      	ldrh	r3, [r7, #14]
 8010cd4:	33f0      	adds	r3, #240	; 0xf0
 8010cd6:	b29b      	uxth	r3, r3
 8010cd8:	4619      	mov	r1, r3
 8010cda:	6878      	ldr	r0, [r7, #4]
 8010cdc:	f7f7 fdda 	bl	8008894 <pbuf_realloc>
}
 8010ce0:	bf00      	nop
 8010ce2:	3710      	adds	r7, #16
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	bd80      	pop	{r7, pc}

08010ce8 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8010ce8:	b480      	push	{r7}
 8010cea:	b085      	sub	sp, #20
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d017      	beq.n	8010d26 <dhcp_supplied_address+0x3e>
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d013      	beq.n	8010d26 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d02:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	795b      	ldrb	r3, [r3, #5]
 8010d08:	2b0a      	cmp	r3, #10
 8010d0a:	d007      	beq.n	8010d1c <dhcp_supplied_address+0x34>
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	795b      	ldrb	r3, [r3, #5]
 8010d10:	2b05      	cmp	r3, #5
 8010d12:	d003      	beq.n	8010d1c <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8010d18:	2b04      	cmp	r3, #4
 8010d1a:	d101      	bne.n	8010d20 <dhcp_supplied_address+0x38>
 8010d1c:	2301      	movs	r3, #1
 8010d1e:	e000      	b.n	8010d22 <dhcp_supplied_address+0x3a>
 8010d20:	2300      	movs	r3, #0
 8010d22:	b2db      	uxtb	r3, r3
 8010d24:	e000      	b.n	8010d28 <dhcp_supplied_address+0x40>
  }
  return 0;
 8010d26:	2300      	movs	r3, #0
}
 8010d28:	4618      	mov	r0, r3
 8010d2a:	3714      	adds	r7, #20
 8010d2c:	46bd      	mov	sp, r7
 8010d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d32:	4770      	bx	lr

08010d34 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8010d34:	b580      	push	{r7, lr}
 8010d36:	b082      	sub	sp, #8
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8010d3c:	4915      	ldr	r1, [pc, #84]	; (8010d94 <etharp_free_entry+0x60>)
 8010d3e:	687a      	ldr	r2, [r7, #4]
 8010d40:	4613      	mov	r3, r2
 8010d42:	005b      	lsls	r3, r3, #1
 8010d44:	4413      	add	r3, r2
 8010d46:	00db      	lsls	r3, r3, #3
 8010d48:	440b      	add	r3, r1
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d013      	beq.n	8010d78 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8010d50:	4910      	ldr	r1, [pc, #64]	; (8010d94 <etharp_free_entry+0x60>)
 8010d52:	687a      	ldr	r2, [r7, #4]
 8010d54:	4613      	mov	r3, r2
 8010d56:	005b      	lsls	r3, r3, #1
 8010d58:	4413      	add	r3, r2
 8010d5a:	00db      	lsls	r3, r3, #3
 8010d5c:	440b      	add	r3, r1
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	4618      	mov	r0, r3
 8010d62:	f7f7 ff1d 	bl	8008ba0 <pbuf_free>
    arp_table[i].q = NULL;
 8010d66:	490b      	ldr	r1, [pc, #44]	; (8010d94 <etharp_free_entry+0x60>)
 8010d68:	687a      	ldr	r2, [r7, #4]
 8010d6a:	4613      	mov	r3, r2
 8010d6c:	005b      	lsls	r3, r3, #1
 8010d6e:	4413      	add	r3, r2
 8010d70:	00db      	lsls	r3, r3, #3
 8010d72:	440b      	add	r3, r1
 8010d74:	2200      	movs	r2, #0
 8010d76:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8010d78:	4906      	ldr	r1, [pc, #24]	; (8010d94 <etharp_free_entry+0x60>)
 8010d7a:	687a      	ldr	r2, [r7, #4]
 8010d7c:	4613      	mov	r3, r2
 8010d7e:	005b      	lsls	r3, r3, #1
 8010d80:	4413      	add	r3, r2
 8010d82:	00db      	lsls	r3, r3, #3
 8010d84:	440b      	add	r3, r1
 8010d86:	3314      	adds	r3, #20
 8010d88:	2200      	movs	r2, #0
 8010d8a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8010d8c:	bf00      	nop
 8010d8e:	3708      	adds	r7, #8
 8010d90:	46bd      	mov	sp, r7
 8010d92:	bd80      	pop	{r7, pc}
 8010d94:	20008554 	.word	0x20008554

08010d98 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8010d98:	b580      	push	{r7, lr}
 8010d9a:	b082      	sub	sp, #8
 8010d9c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010d9e:	2300      	movs	r3, #0
 8010da0:	607b      	str	r3, [r7, #4]
 8010da2:	e096      	b.n	8010ed2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8010da4:	494f      	ldr	r1, [pc, #316]	; (8010ee4 <etharp_tmr+0x14c>)
 8010da6:	687a      	ldr	r2, [r7, #4]
 8010da8:	4613      	mov	r3, r2
 8010daa:	005b      	lsls	r3, r3, #1
 8010dac:	4413      	add	r3, r2
 8010dae:	00db      	lsls	r3, r3, #3
 8010db0:	440b      	add	r3, r1
 8010db2:	3314      	adds	r3, #20
 8010db4:	781b      	ldrb	r3, [r3, #0]
 8010db6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8010db8:	78fb      	ldrb	r3, [r7, #3]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	f000 8086 	beq.w	8010ecc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8010dc0:	4948      	ldr	r1, [pc, #288]	; (8010ee4 <etharp_tmr+0x14c>)
 8010dc2:	687a      	ldr	r2, [r7, #4]
 8010dc4:	4613      	mov	r3, r2
 8010dc6:	005b      	lsls	r3, r3, #1
 8010dc8:	4413      	add	r3, r2
 8010dca:	00db      	lsls	r3, r3, #3
 8010dcc:	440b      	add	r3, r1
 8010dce:	3312      	adds	r3, #18
 8010dd0:	881b      	ldrh	r3, [r3, #0]
 8010dd2:	3301      	adds	r3, #1
 8010dd4:	b298      	uxth	r0, r3
 8010dd6:	4943      	ldr	r1, [pc, #268]	; (8010ee4 <etharp_tmr+0x14c>)
 8010dd8:	687a      	ldr	r2, [r7, #4]
 8010dda:	4613      	mov	r3, r2
 8010ddc:	005b      	lsls	r3, r3, #1
 8010dde:	4413      	add	r3, r2
 8010de0:	00db      	lsls	r3, r3, #3
 8010de2:	440b      	add	r3, r1
 8010de4:	3312      	adds	r3, #18
 8010de6:	4602      	mov	r2, r0
 8010de8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010dea:	493e      	ldr	r1, [pc, #248]	; (8010ee4 <etharp_tmr+0x14c>)
 8010dec:	687a      	ldr	r2, [r7, #4]
 8010dee:	4613      	mov	r3, r2
 8010df0:	005b      	lsls	r3, r3, #1
 8010df2:	4413      	add	r3, r2
 8010df4:	00db      	lsls	r3, r3, #3
 8010df6:	440b      	add	r3, r1
 8010df8:	3312      	adds	r3, #18
 8010dfa:	881b      	ldrh	r3, [r3, #0]
 8010dfc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8010e00:	d215      	bcs.n	8010e2e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010e02:	4938      	ldr	r1, [pc, #224]	; (8010ee4 <etharp_tmr+0x14c>)
 8010e04:	687a      	ldr	r2, [r7, #4]
 8010e06:	4613      	mov	r3, r2
 8010e08:	005b      	lsls	r3, r3, #1
 8010e0a:	4413      	add	r3, r2
 8010e0c:	00db      	lsls	r3, r3, #3
 8010e0e:	440b      	add	r3, r1
 8010e10:	3314      	adds	r3, #20
 8010e12:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010e14:	2b01      	cmp	r3, #1
 8010e16:	d10e      	bne.n	8010e36 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8010e18:	4932      	ldr	r1, [pc, #200]	; (8010ee4 <etharp_tmr+0x14c>)
 8010e1a:	687a      	ldr	r2, [r7, #4]
 8010e1c:	4613      	mov	r3, r2
 8010e1e:	005b      	lsls	r3, r3, #1
 8010e20:	4413      	add	r3, r2
 8010e22:	00db      	lsls	r3, r3, #3
 8010e24:	440b      	add	r3, r1
 8010e26:	3312      	adds	r3, #18
 8010e28:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010e2a:	2b04      	cmp	r3, #4
 8010e2c:	d903      	bls.n	8010e36 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8010e2e:	6878      	ldr	r0, [r7, #4]
 8010e30:	f7ff ff80 	bl	8010d34 <etharp_free_entry>
 8010e34:	e04a      	b.n	8010ecc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8010e36:	492b      	ldr	r1, [pc, #172]	; (8010ee4 <etharp_tmr+0x14c>)
 8010e38:	687a      	ldr	r2, [r7, #4]
 8010e3a:	4613      	mov	r3, r2
 8010e3c:	005b      	lsls	r3, r3, #1
 8010e3e:	4413      	add	r3, r2
 8010e40:	00db      	lsls	r3, r3, #3
 8010e42:	440b      	add	r3, r1
 8010e44:	3314      	adds	r3, #20
 8010e46:	781b      	ldrb	r3, [r3, #0]
 8010e48:	2b03      	cmp	r3, #3
 8010e4a:	d10a      	bne.n	8010e62 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010e4c:	4925      	ldr	r1, [pc, #148]	; (8010ee4 <etharp_tmr+0x14c>)
 8010e4e:	687a      	ldr	r2, [r7, #4]
 8010e50:	4613      	mov	r3, r2
 8010e52:	005b      	lsls	r3, r3, #1
 8010e54:	4413      	add	r3, r2
 8010e56:	00db      	lsls	r3, r3, #3
 8010e58:	440b      	add	r3, r1
 8010e5a:	3314      	adds	r3, #20
 8010e5c:	2204      	movs	r2, #4
 8010e5e:	701a      	strb	r2, [r3, #0]
 8010e60:	e034      	b.n	8010ecc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8010e62:	4920      	ldr	r1, [pc, #128]	; (8010ee4 <etharp_tmr+0x14c>)
 8010e64:	687a      	ldr	r2, [r7, #4]
 8010e66:	4613      	mov	r3, r2
 8010e68:	005b      	lsls	r3, r3, #1
 8010e6a:	4413      	add	r3, r2
 8010e6c:	00db      	lsls	r3, r3, #3
 8010e6e:	440b      	add	r3, r1
 8010e70:	3314      	adds	r3, #20
 8010e72:	781b      	ldrb	r3, [r3, #0]
 8010e74:	2b04      	cmp	r3, #4
 8010e76:	d10a      	bne.n	8010e8e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8010e78:	491a      	ldr	r1, [pc, #104]	; (8010ee4 <etharp_tmr+0x14c>)
 8010e7a:	687a      	ldr	r2, [r7, #4]
 8010e7c:	4613      	mov	r3, r2
 8010e7e:	005b      	lsls	r3, r3, #1
 8010e80:	4413      	add	r3, r2
 8010e82:	00db      	lsls	r3, r3, #3
 8010e84:	440b      	add	r3, r1
 8010e86:	3314      	adds	r3, #20
 8010e88:	2202      	movs	r2, #2
 8010e8a:	701a      	strb	r2, [r3, #0]
 8010e8c:	e01e      	b.n	8010ecc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010e8e:	4915      	ldr	r1, [pc, #84]	; (8010ee4 <etharp_tmr+0x14c>)
 8010e90:	687a      	ldr	r2, [r7, #4]
 8010e92:	4613      	mov	r3, r2
 8010e94:	005b      	lsls	r3, r3, #1
 8010e96:	4413      	add	r3, r2
 8010e98:	00db      	lsls	r3, r3, #3
 8010e9a:	440b      	add	r3, r1
 8010e9c:	3314      	adds	r3, #20
 8010e9e:	781b      	ldrb	r3, [r3, #0]
 8010ea0:	2b01      	cmp	r3, #1
 8010ea2:	d113      	bne.n	8010ecc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8010ea4:	490f      	ldr	r1, [pc, #60]	; (8010ee4 <etharp_tmr+0x14c>)
 8010ea6:	687a      	ldr	r2, [r7, #4]
 8010ea8:	4613      	mov	r3, r2
 8010eaa:	005b      	lsls	r3, r3, #1
 8010eac:	4413      	add	r3, r2
 8010eae:	00db      	lsls	r3, r3, #3
 8010eb0:	440b      	add	r3, r1
 8010eb2:	3308      	adds	r3, #8
 8010eb4:	6818      	ldr	r0, [r3, #0]
 8010eb6:	687a      	ldr	r2, [r7, #4]
 8010eb8:	4613      	mov	r3, r2
 8010eba:	005b      	lsls	r3, r3, #1
 8010ebc:	4413      	add	r3, r2
 8010ebe:	00db      	lsls	r3, r3, #3
 8010ec0:	4a08      	ldr	r2, [pc, #32]	; (8010ee4 <etharp_tmr+0x14c>)
 8010ec2:	4413      	add	r3, r2
 8010ec4:	3304      	adds	r3, #4
 8010ec6:	4619      	mov	r1, r3
 8010ec8:	f000 fe72 	bl	8011bb0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	3301      	adds	r3, #1
 8010ed0:	607b      	str	r3, [r7, #4]
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	2b09      	cmp	r3, #9
 8010ed6:	f77f af65 	ble.w	8010da4 <etharp_tmr+0xc>
      }
    }
  }
}
 8010eda:	bf00      	nop
 8010edc:	bf00      	nop
 8010ede:	3708      	adds	r7, #8
 8010ee0:	46bd      	mov	sp, r7
 8010ee2:	bd80      	pop	{r7, pc}
 8010ee4:	20008554 	.word	0x20008554

08010ee8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	b08a      	sub	sp, #40	; 0x28
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	60f8      	str	r0, [r7, #12]
 8010ef0:	460b      	mov	r3, r1
 8010ef2:	607a      	str	r2, [r7, #4]
 8010ef4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8010ef6:	230a      	movs	r3, #10
 8010ef8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010efa:	230a      	movs	r3, #10
 8010efc:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8010efe:	230a      	movs	r3, #10
 8010f00:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8010f02:	2300      	movs	r3, #0
 8010f04:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8010f06:	230a      	movs	r3, #10
 8010f08:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8010f0a:	2300      	movs	r3, #0
 8010f0c:	83bb      	strh	r3, [r7, #28]
 8010f0e:	2300      	movs	r3, #0
 8010f10:	837b      	strh	r3, [r7, #26]
 8010f12:	2300      	movs	r3, #0
 8010f14:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010f16:	2300      	movs	r3, #0
 8010f18:	843b      	strh	r3, [r7, #32]
 8010f1a:	e0ae      	b.n	801107a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8010f1c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010f20:	49a6      	ldr	r1, [pc, #664]	; (80111bc <etharp_find_entry+0x2d4>)
 8010f22:	4613      	mov	r3, r2
 8010f24:	005b      	lsls	r3, r3, #1
 8010f26:	4413      	add	r3, r2
 8010f28:	00db      	lsls	r3, r3, #3
 8010f2a:	440b      	add	r3, r1
 8010f2c:	3314      	adds	r3, #20
 8010f2e:	781b      	ldrb	r3, [r3, #0]
 8010f30:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8010f32:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010f36:	2b0a      	cmp	r3, #10
 8010f38:	d105      	bne.n	8010f46 <etharp_find_entry+0x5e>
 8010f3a:	7dfb      	ldrb	r3, [r7, #23]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d102      	bne.n	8010f46 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8010f40:	8c3b      	ldrh	r3, [r7, #32]
 8010f42:	847b      	strh	r3, [r7, #34]	; 0x22
 8010f44:	e095      	b.n	8011072 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8010f46:	7dfb      	ldrb	r3, [r7, #23]
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	f000 8092 	beq.w	8011072 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8010f4e:	7dfb      	ldrb	r3, [r7, #23]
 8010f50:	2b01      	cmp	r3, #1
 8010f52:	d009      	beq.n	8010f68 <etharp_find_entry+0x80>
 8010f54:	7dfb      	ldrb	r3, [r7, #23]
 8010f56:	2b01      	cmp	r3, #1
 8010f58:	d806      	bhi.n	8010f68 <etharp_find_entry+0x80>
 8010f5a:	4b99      	ldr	r3, [pc, #612]	; (80111c0 <etharp_find_entry+0x2d8>)
 8010f5c:	f240 1223 	movw	r2, #291	; 0x123
 8010f60:	4998      	ldr	r1, [pc, #608]	; (80111c4 <etharp_find_entry+0x2dc>)
 8010f62:	4899      	ldr	r0, [pc, #612]	; (80111c8 <etharp_find_entry+0x2e0>)
 8010f64:	f002 fc7a 	bl	801385c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d020      	beq.n	8010fb0 <etharp_find_entry+0xc8>
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	6819      	ldr	r1, [r3, #0]
 8010f72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010f76:	4891      	ldr	r0, [pc, #580]	; (80111bc <etharp_find_entry+0x2d4>)
 8010f78:	4613      	mov	r3, r2
 8010f7a:	005b      	lsls	r3, r3, #1
 8010f7c:	4413      	add	r3, r2
 8010f7e:	00db      	lsls	r3, r3, #3
 8010f80:	4403      	add	r3, r0
 8010f82:	3304      	adds	r3, #4
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	4299      	cmp	r1, r3
 8010f88:	d112      	bne.n	8010fb0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d00c      	beq.n	8010faa <etharp_find_entry+0xc2>
 8010f90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010f94:	4989      	ldr	r1, [pc, #548]	; (80111bc <etharp_find_entry+0x2d4>)
 8010f96:	4613      	mov	r3, r2
 8010f98:	005b      	lsls	r3, r3, #1
 8010f9a:	4413      	add	r3, r2
 8010f9c:	00db      	lsls	r3, r3, #3
 8010f9e:	440b      	add	r3, r1
 8010fa0:	3308      	adds	r3, #8
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	687a      	ldr	r2, [r7, #4]
 8010fa6:	429a      	cmp	r2, r3
 8010fa8:	d102      	bne.n	8010fb0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8010faa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010fae:	e100      	b.n	80111b2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8010fb0:	7dfb      	ldrb	r3, [r7, #23]
 8010fb2:	2b01      	cmp	r3, #1
 8010fb4:	d140      	bne.n	8011038 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8010fb6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010fba:	4980      	ldr	r1, [pc, #512]	; (80111bc <etharp_find_entry+0x2d4>)
 8010fbc:	4613      	mov	r3, r2
 8010fbe:	005b      	lsls	r3, r3, #1
 8010fc0:	4413      	add	r3, r2
 8010fc2:	00db      	lsls	r3, r3, #3
 8010fc4:	440b      	add	r3, r1
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d01a      	beq.n	8011002 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8010fcc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010fd0:	497a      	ldr	r1, [pc, #488]	; (80111bc <etharp_find_entry+0x2d4>)
 8010fd2:	4613      	mov	r3, r2
 8010fd4:	005b      	lsls	r3, r3, #1
 8010fd6:	4413      	add	r3, r2
 8010fd8:	00db      	lsls	r3, r3, #3
 8010fda:	440b      	add	r3, r1
 8010fdc:	3312      	adds	r3, #18
 8010fde:	881b      	ldrh	r3, [r3, #0]
 8010fe0:	8bba      	ldrh	r2, [r7, #28]
 8010fe2:	429a      	cmp	r2, r3
 8010fe4:	d845      	bhi.n	8011072 <etharp_find_entry+0x18a>
            old_queue = i;
 8010fe6:	8c3b      	ldrh	r3, [r7, #32]
 8010fe8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8010fea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010fee:	4973      	ldr	r1, [pc, #460]	; (80111bc <etharp_find_entry+0x2d4>)
 8010ff0:	4613      	mov	r3, r2
 8010ff2:	005b      	lsls	r3, r3, #1
 8010ff4:	4413      	add	r3, r2
 8010ff6:	00db      	lsls	r3, r3, #3
 8010ff8:	440b      	add	r3, r1
 8010ffa:	3312      	adds	r3, #18
 8010ffc:	881b      	ldrh	r3, [r3, #0]
 8010ffe:	83bb      	strh	r3, [r7, #28]
 8011000:	e037      	b.n	8011072 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8011002:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011006:	496d      	ldr	r1, [pc, #436]	; (80111bc <etharp_find_entry+0x2d4>)
 8011008:	4613      	mov	r3, r2
 801100a:	005b      	lsls	r3, r3, #1
 801100c:	4413      	add	r3, r2
 801100e:	00db      	lsls	r3, r3, #3
 8011010:	440b      	add	r3, r1
 8011012:	3312      	adds	r3, #18
 8011014:	881b      	ldrh	r3, [r3, #0]
 8011016:	8b7a      	ldrh	r2, [r7, #26]
 8011018:	429a      	cmp	r2, r3
 801101a:	d82a      	bhi.n	8011072 <etharp_find_entry+0x18a>
            old_pending = i;
 801101c:	8c3b      	ldrh	r3, [r7, #32]
 801101e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8011020:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011024:	4965      	ldr	r1, [pc, #404]	; (80111bc <etharp_find_entry+0x2d4>)
 8011026:	4613      	mov	r3, r2
 8011028:	005b      	lsls	r3, r3, #1
 801102a:	4413      	add	r3, r2
 801102c:	00db      	lsls	r3, r3, #3
 801102e:	440b      	add	r3, r1
 8011030:	3312      	adds	r3, #18
 8011032:	881b      	ldrh	r3, [r3, #0]
 8011034:	837b      	strh	r3, [r7, #26]
 8011036:	e01c      	b.n	8011072 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8011038:	7dfb      	ldrb	r3, [r7, #23]
 801103a:	2b01      	cmp	r3, #1
 801103c:	d919      	bls.n	8011072 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801103e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011042:	495e      	ldr	r1, [pc, #376]	; (80111bc <etharp_find_entry+0x2d4>)
 8011044:	4613      	mov	r3, r2
 8011046:	005b      	lsls	r3, r3, #1
 8011048:	4413      	add	r3, r2
 801104a:	00db      	lsls	r3, r3, #3
 801104c:	440b      	add	r3, r1
 801104e:	3312      	adds	r3, #18
 8011050:	881b      	ldrh	r3, [r3, #0]
 8011052:	8b3a      	ldrh	r2, [r7, #24]
 8011054:	429a      	cmp	r2, r3
 8011056:	d80c      	bhi.n	8011072 <etharp_find_entry+0x18a>
            old_stable = i;
 8011058:	8c3b      	ldrh	r3, [r7, #32]
 801105a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801105c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011060:	4956      	ldr	r1, [pc, #344]	; (80111bc <etharp_find_entry+0x2d4>)
 8011062:	4613      	mov	r3, r2
 8011064:	005b      	lsls	r3, r3, #1
 8011066:	4413      	add	r3, r2
 8011068:	00db      	lsls	r3, r3, #3
 801106a:	440b      	add	r3, r1
 801106c:	3312      	adds	r3, #18
 801106e:	881b      	ldrh	r3, [r3, #0]
 8011070:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011072:	8c3b      	ldrh	r3, [r7, #32]
 8011074:	3301      	adds	r3, #1
 8011076:	b29b      	uxth	r3, r3
 8011078:	843b      	strh	r3, [r7, #32]
 801107a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801107e:	2b09      	cmp	r3, #9
 8011080:	f77f af4c 	ble.w	8010f1c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8011084:	7afb      	ldrb	r3, [r7, #11]
 8011086:	f003 0302 	and.w	r3, r3, #2
 801108a:	2b00      	cmp	r3, #0
 801108c:	d108      	bne.n	80110a0 <etharp_find_entry+0x1b8>
 801108e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011092:	2b0a      	cmp	r3, #10
 8011094:	d107      	bne.n	80110a6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8011096:	7afb      	ldrb	r3, [r7, #11]
 8011098:	f003 0301 	and.w	r3, r3, #1
 801109c:	2b00      	cmp	r3, #0
 801109e:	d102      	bne.n	80110a6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80110a0:	f04f 33ff 	mov.w	r3, #4294967295
 80110a4:	e085      	b.n	80111b2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80110a6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80110aa:	2b09      	cmp	r3, #9
 80110ac:	dc02      	bgt.n	80110b4 <etharp_find_entry+0x1cc>
    i = empty;
 80110ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80110b0:	843b      	strh	r3, [r7, #32]
 80110b2:	e039      	b.n	8011128 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80110b4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80110b8:	2b09      	cmp	r3, #9
 80110ba:	dc14      	bgt.n	80110e6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80110bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80110be:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80110c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80110c4:	493d      	ldr	r1, [pc, #244]	; (80111bc <etharp_find_entry+0x2d4>)
 80110c6:	4613      	mov	r3, r2
 80110c8:	005b      	lsls	r3, r3, #1
 80110ca:	4413      	add	r3, r2
 80110cc:	00db      	lsls	r3, r3, #3
 80110ce:	440b      	add	r3, r1
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d018      	beq.n	8011108 <etharp_find_entry+0x220>
 80110d6:	4b3a      	ldr	r3, [pc, #232]	; (80111c0 <etharp_find_entry+0x2d8>)
 80110d8:	f240 126d 	movw	r2, #365	; 0x16d
 80110dc:	493b      	ldr	r1, [pc, #236]	; (80111cc <etharp_find_entry+0x2e4>)
 80110de:	483a      	ldr	r0, [pc, #232]	; (80111c8 <etharp_find_entry+0x2e0>)
 80110e0:	f002 fbbc 	bl	801385c <iprintf>
 80110e4:	e010      	b.n	8011108 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80110e6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80110ea:	2b09      	cmp	r3, #9
 80110ec:	dc02      	bgt.n	80110f4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80110ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80110f0:	843b      	strh	r3, [r7, #32]
 80110f2:	e009      	b.n	8011108 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80110f4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80110f8:	2b09      	cmp	r3, #9
 80110fa:	dc02      	bgt.n	8011102 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80110fc:	8bfb      	ldrh	r3, [r7, #30]
 80110fe:	843b      	strh	r3, [r7, #32]
 8011100:	e002      	b.n	8011108 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8011102:	f04f 33ff 	mov.w	r3, #4294967295
 8011106:	e054      	b.n	80111b2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011108:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801110c:	2b09      	cmp	r3, #9
 801110e:	dd06      	ble.n	801111e <etharp_find_entry+0x236>
 8011110:	4b2b      	ldr	r3, [pc, #172]	; (80111c0 <etharp_find_entry+0x2d8>)
 8011112:	f240 127f 	movw	r2, #383	; 0x17f
 8011116:	492e      	ldr	r1, [pc, #184]	; (80111d0 <etharp_find_entry+0x2e8>)
 8011118:	482b      	ldr	r0, [pc, #172]	; (80111c8 <etharp_find_entry+0x2e0>)
 801111a:	f002 fb9f 	bl	801385c <iprintf>
    etharp_free_entry(i);
 801111e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011122:	4618      	mov	r0, r3
 8011124:	f7ff fe06 	bl	8010d34 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011128:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801112c:	2b09      	cmp	r3, #9
 801112e:	dd06      	ble.n	801113e <etharp_find_entry+0x256>
 8011130:	4b23      	ldr	r3, [pc, #140]	; (80111c0 <etharp_find_entry+0x2d8>)
 8011132:	f240 1283 	movw	r2, #387	; 0x183
 8011136:	4926      	ldr	r1, [pc, #152]	; (80111d0 <etharp_find_entry+0x2e8>)
 8011138:	4823      	ldr	r0, [pc, #140]	; (80111c8 <etharp_find_entry+0x2e0>)
 801113a:	f002 fb8f 	bl	801385c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801113e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011142:	491e      	ldr	r1, [pc, #120]	; (80111bc <etharp_find_entry+0x2d4>)
 8011144:	4613      	mov	r3, r2
 8011146:	005b      	lsls	r3, r3, #1
 8011148:	4413      	add	r3, r2
 801114a:	00db      	lsls	r3, r3, #3
 801114c:	440b      	add	r3, r1
 801114e:	3314      	adds	r3, #20
 8011150:	781b      	ldrb	r3, [r3, #0]
 8011152:	2b00      	cmp	r3, #0
 8011154:	d006      	beq.n	8011164 <etharp_find_entry+0x27c>
 8011156:	4b1a      	ldr	r3, [pc, #104]	; (80111c0 <etharp_find_entry+0x2d8>)
 8011158:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801115c:	491d      	ldr	r1, [pc, #116]	; (80111d4 <etharp_find_entry+0x2ec>)
 801115e:	481a      	ldr	r0, [pc, #104]	; (80111c8 <etharp_find_entry+0x2e0>)
 8011160:	f002 fb7c 	bl	801385c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	2b00      	cmp	r3, #0
 8011168:	d00b      	beq.n	8011182 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801116a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	6819      	ldr	r1, [r3, #0]
 8011172:	4812      	ldr	r0, [pc, #72]	; (80111bc <etharp_find_entry+0x2d4>)
 8011174:	4613      	mov	r3, r2
 8011176:	005b      	lsls	r3, r3, #1
 8011178:	4413      	add	r3, r2
 801117a:	00db      	lsls	r3, r3, #3
 801117c:	4403      	add	r3, r0
 801117e:	3304      	adds	r3, #4
 8011180:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8011182:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011186:	490d      	ldr	r1, [pc, #52]	; (80111bc <etharp_find_entry+0x2d4>)
 8011188:	4613      	mov	r3, r2
 801118a:	005b      	lsls	r3, r3, #1
 801118c:	4413      	add	r3, r2
 801118e:	00db      	lsls	r3, r3, #3
 8011190:	440b      	add	r3, r1
 8011192:	3312      	adds	r3, #18
 8011194:	2200      	movs	r2, #0
 8011196:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8011198:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801119c:	4907      	ldr	r1, [pc, #28]	; (80111bc <etharp_find_entry+0x2d4>)
 801119e:	4613      	mov	r3, r2
 80111a0:	005b      	lsls	r3, r3, #1
 80111a2:	4413      	add	r3, r2
 80111a4:	00db      	lsls	r3, r3, #3
 80111a6:	440b      	add	r3, r1
 80111a8:	3308      	adds	r3, #8
 80111aa:	687a      	ldr	r2, [r7, #4]
 80111ac:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80111ae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80111b2:	4618      	mov	r0, r3
 80111b4:	3728      	adds	r7, #40	; 0x28
 80111b6:	46bd      	mov	sp, r7
 80111b8:	bd80      	pop	{r7, pc}
 80111ba:	bf00      	nop
 80111bc:	20008554 	.word	0x20008554
 80111c0:	08016f08 	.word	0x08016f08
 80111c4:	08016f40 	.word	0x08016f40
 80111c8:	08016f80 	.word	0x08016f80
 80111cc:	08016fa8 	.word	0x08016fa8
 80111d0:	08016fc0 	.word	0x08016fc0
 80111d4:	08016fd4 	.word	0x08016fd4

080111d8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80111d8:	b580      	push	{r7, lr}
 80111da:	b088      	sub	sp, #32
 80111dc:	af02      	add	r7, sp, #8
 80111de:	60f8      	str	r0, [r7, #12]
 80111e0:	60b9      	str	r1, [r7, #8]
 80111e2:	607a      	str	r2, [r7, #4]
 80111e4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80111ec:	2b06      	cmp	r3, #6
 80111ee:	d006      	beq.n	80111fe <etharp_update_arp_entry+0x26>
 80111f0:	4b48      	ldr	r3, [pc, #288]	; (8011314 <etharp_update_arp_entry+0x13c>)
 80111f2:	f240 12a9 	movw	r2, #425	; 0x1a9
 80111f6:	4948      	ldr	r1, [pc, #288]	; (8011318 <etharp_update_arp_entry+0x140>)
 80111f8:	4848      	ldr	r0, [pc, #288]	; (801131c <etharp_update_arp_entry+0x144>)
 80111fa:	f002 fb2f 	bl	801385c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80111fe:	68bb      	ldr	r3, [r7, #8]
 8011200:	2b00      	cmp	r3, #0
 8011202:	d012      	beq.n	801122a <etharp_update_arp_entry+0x52>
 8011204:	68bb      	ldr	r3, [r7, #8]
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	2b00      	cmp	r3, #0
 801120a:	d00e      	beq.n	801122a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801120c:	68bb      	ldr	r3, [r7, #8]
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	68f9      	ldr	r1, [r7, #12]
 8011212:	4618      	mov	r0, r3
 8011214:	f001 f920 	bl	8012458 <ip4_addr_isbroadcast_u32>
 8011218:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801121a:	2b00      	cmp	r3, #0
 801121c:	d105      	bne.n	801122a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801121e:	68bb      	ldr	r3, [r7, #8]
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011226:	2be0      	cmp	r3, #224	; 0xe0
 8011228:	d102      	bne.n	8011230 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801122a:	f06f 030f 	mvn.w	r3, #15
 801122e:	e06c      	b.n	801130a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8011230:	78fb      	ldrb	r3, [r7, #3]
 8011232:	68fa      	ldr	r2, [r7, #12]
 8011234:	4619      	mov	r1, r3
 8011236:	68b8      	ldr	r0, [r7, #8]
 8011238:	f7ff fe56 	bl	8010ee8 <etharp_find_entry>
 801123c:	4603      	mov	r3, r0
 801123e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8011240:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011244:	2b00      	cmp	r3, #0
 8011246:	da02      	bge.n	801124e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8011248:	8afb      	ldrh	r3, [r7, #22]
 801124a:	b25b      	sxtb	r3, r3
 801124c:	e05d      	b.n	801130a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801124e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011252:	4933      	ldr	r1, [pc, #204]	; (8011320 <etharp_update_arp_entry+0x148>)
 8011254:	4613      	mov	r3, r2
 8011256:	005b      	lsls	r3, r3, #1
 8011258:	4413      	add	r3, r2
 801125a:	00db      	lsls	r3, r3, #3
 801125c:	440b      	add	r3, r1
 801125e:	3314      	adds	r3, #20
 8011260:	2202      	movs	r2, #2
 8011262:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8011264:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011268:	492d      	ldr	r1, [pc, #180]	; (8011320 <etharp_update_arp_entry+0x148>)
 801126a:	4613      	mov	r3, r2
 801126c:	005b      	lsls	r3, r3, #1
 801126e:	4413      	add	r3, r2
 8011270:	00db      	lsls	r3, r3, #3
 8011272:	440b      	add	r3, r1
 8011274:	3308      	adds	r3, #8
 8011276:	68fa      	ldr	r2, [r7, #12]
 8011278:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801127a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801127e:	4613      	mov	r3, r2
 8011280:	005b      	lsls	r3, r3, #1
 8011282:	4413      	add	r3, r2
 8011284:	00db      	lsls	r3, r3, #3
 8011286:	3308      	adds	r3, #8
 8011288:	4a25      	ldr	r2, [pc, #148]	; (8011320 <etharp_update_arp_entry+0x148>)
 801128a:	4413      	add	r3, r2
 801128c:	3304      	adds	r3, #4
 801128e:	2206      	movs	r2, #6
 8011290:	6879      	ldr	r1, [r7, #4]
 8011292:	4618      	mov	r0, r3
 8011294:	f002 fa71 	bl	801377a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8011298:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801129c:	4920      	ldr	r1, [pc, #128]	; (8011320 <etharp_update_arp_entry+0x148>)
 801129e:	4613      	mov	r3, r2
 80112a0:	005b      	lsls	r3, r3, #1
 80112a2:	4413      	add	r3, r2
 80112a4:	00db      	lsls	r3, r3, #3
 80112a6:	440b      	add	r3, r1
 80112a8:	3312      	adds	r3, #18
 80112aa:	2200      	movs	r2, #0
 80112ac:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80112ae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80112b2:	491b      	ldr	r1, [pc, #108]	; (8011320 <etharp_update_arp_entry+0x148>)
 80112b4:	4613      	mov	r3, r2
 80112b6:	005b      	lsls	r3, r3, #1
 80112b8:	4413      	add	r3, r2
 80112ba:	00db      	lsls	r3, r3, #3
 80112bc:	440b      	add	r3, r1
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d021      	beq.n	8011308 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80112c4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80112c8:	4915      	ldr	r1, [pc, #84]	; (8011320 <etharp_update_arp_entry+0x148>)
 80112ca:	4613      	mov	r3, r2
 80112cc:	005b      	lsls	r3, r3, #1
 80112ce:	4413      	add	r3, r2
 80112d0:	00db      	lsls	r3, r3, #3
 80112d2:	440b      	add	r3, r1
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80112d8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80112dc:	4910      	ldr	r1, [pc, #64]	; (8011320 <etharp_update_arp_entry+0x148>)
 80112de:	4613      	mov	r3, r2
 80112e0:	005b      	lsls	r3, r3, #1
 80112e2:	4413      	add	r3, r2
 80112e4:	00db      	lsls	r3, r3, #3
 80112e6:	440b      	add	r3, r1
 80112e8:	2200      	movs	r2, #0
 80112ea:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80112f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80112f6:	9300      	str	r3, [sp, #0]
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	6939      	ldr	r1, [r7, #16]
 80112fc:	68f8      	ldr	r0, [r7, #12]
 80112fe:	f001 ffb3 	bl	8013268 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8011302:	6938      	ldr	r0, [r7, #16]
 8011304:	f7f7 fc4c 	bl	8008ba0 <pbuf_free>
  }
  return ERR_OK;
 8011308:	2300      	movs	r3, #0
}
 801130a:	4618      	mov	r0, r3
 801130c:	3718      	adds	r7, #24
 801130e:	46bd      	mov	sp, r7
 8011310:	bd80      	pop	{r7, pc}
 8011312:	bf00      	nop
 8011314:	08016f08 	.word	0x08016f08
 8011318:	08017000 	.word	0x08017000
 801131c:	08016f80 	.word	0x08016f80
 8011320:	20008554 	.word	0x20008554

08011324 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8011324:	b580      	push	{r7, lr}
 8011326:	b084      	sub	sp, #16
 8011328:	af00      	add	r7, sp, #0
 801132a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801132c:	2300      	movs	r3, #0
 801132e:	60fb      	str	r3, [r7, #12]
 8011330:	e01e      	b.n	8011370 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8011332:	4913      	ldr	r1, [pc, #76]	; (8011380 <etharp_cleanup_netif+0x5c>)
 8011334:	68fa      	ldr	r2, [r7, #12]
 8011336:	4613      	mov	r3, r2
 8011338:	005b      	lsls	r3, r3, #1
 801133a:	4413      	add	r3, r2
 801133c:	00db      	lsls	r3, r3, #3
 801133e:	440b      	add	r3, r1
 8011340:	3314      	adds	r3, #20
 8011342:	781b      	ldrb	r3, [r3, #0]
 8011344:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8011346:	7afb      	ldrb	r3, [r7, #11]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d00e      	beq.n	801136a <etharp_cleanup_netif+0x46>
 801134c:	490c      	ldr	r1, [pc, #48]	; (8011380 <etharp_cleanup_netif+0x5c>)
 801134e:	68fa      	ldr	r2, [r7, #12]
 8011350:	4613      	mov	r3, r2
 8011352:	005b      	lsls	r3, r3, #1
 8011354:	4413      	add	r3, r2
 8011356:	00db      	lsls	r3, r3, #3
 8011358:	440b      	add	r3, r1
 801135a:	3308      	adds	r3, #8
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	687a      	ldr	r2, [r7, #4]
 8011360:	429a      	cmp	r2, r3
 8011362:	d102      	bne.n	801136a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8011364:	68f8      	ldr	r0, [r7, #12]
 8011366:	f7ff fce5 	bl	8010d34 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	3301      	adds	r3, #1
 801136e:	60fb      	str	r3, [r7, #12]
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	2b09      	cmp	r3, #9
 8011374:	dddd      	ble.n	8011332 <etharp_cleanup_netif+0xe>
    }
  }
}
 8011376:	bf00      	nop
 8011378:	bf00      	nop
 801137a:	3710      	adds	r7, #16
 801137c:	46bd      	mov	sp, r7
 801137e:	bd80      	pop	{r7, pc}
 8011380:	20008554 	.word	0x20008554

08011384 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8011384:	b5b0      	push	{r4, r5, r7, lr}
 8011386:	b08a      	sub	sp, #40	; 0x28
 8011388:	af04      	add	r7, sp, #16
 801138a:	6078      	str	r0, [r7, #4]
 801138c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801138e:	683b      	ldr	r3, [r7, #0]
 8011390:	2b00      	cmp	r3, #0
 8011392:	d107      	bne.n	80113a4 <etharp_input+0x20>
 8011394:	4b3f      	ldr	r3, [pc, #252]	; (8011494 <etharp_input+0x110>)
 8011396:	f240 228a 	movw	r2, #650	; 0x28a
 801139a:	493f      	ldr	r1, [pc, #252]	; (8011498 <etharp_input+0x114>)
 801139c:	483f      	ldr	r0, [pc, #252]	; (801149c <etharp_input+0x118>)
 801139e:	f002 fa5d 	bl	801385c <iprintf>
 80113a2:	e074      	b.n	801148e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	685b      	ldr	r3, [r3, #4]
 80113a8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80113aa:	693b      	ldr	r3, [r7, #16]
 80113ac:	881b      	ldrh	r3, [r3, #0]
 80113ae:	b29b      	uxth	r3, r3
 80113b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80113b4:	d10c      	bne.n	80113d0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80113b6:	693b      	ldr	r3, [r7, #16]
 80113b8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80113ba:	2b06      	cmp	r3, #6
 80113bc:	d108      	bne.n	80113d0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80113be:	693b      	ldr	r3, [r7, #16]
 80113c0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80113c2:	2b04      	cmp	r3, #4
 80113c4:	d104      	bne.n	80113d0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80113c6:	693b      	ldr	r3, [r7, #16]
 80113c8:	885b      	ldrh	r3, [r3, #2]
 80113ca:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80113cc:	2b08      	cmp	r3, #8
 80113ce:	d003      	beq.n	80113d8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80113d0:	6878      	ldr	r0, [r7, #4]
 80113d2:	f7f7 fbe5 	bl	8008ba0 <pbuf_free>
    return;
 80113d6:	e05a      	b.n	801148e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80113d8:	693b      	ldr	r3, [r7, #16]
 80113da:	330e      	adds	r3, #14
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80113e0:	693b      	ldr	r3, [r7, #16]
 80113e2:	3318      	adds	r3, #24
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80113e8:	683b      	ldr	r3, [r7, #0]
 80113ea:	3304      	adds	r3, #4
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d102      	bne.n	80113f8 <etharp_input+0x74>
    for_us = 0;
 80113f2:	2300      	movs	r3, #0
 80113f4:	75fb      	strb	r3, [r7, #23]
 80113f6:	e009      	b.n	801140c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80113f8:	68ba      	ldr	r2, [r7, #8]
 80113fa:	683b      	ldr	r3, [r7, #0]
 80113fc:	3304      	adds	r3, #4
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	429a      	cmp	r2, r3
 8011402:	bf0c      	ite	eq
 8011404:	2301      	moveq	r3, #1
 8011406:	2300      	movne	r3, #0
 8011408:	b2db      	uxtb	r3, r3
 801140a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801140c:	693b      	ldr	r3, [r7, #16]
 801140e:	f103 0208 	add.w	r2, r3, #8
 8011412:	7dfb      	ldrb	r3, [r7, #23]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d001      	beq.n	801141c <etharp_input+0x98>
 8011418:	2301      	movs	r3, #1
 801141a:	e000      	b.n	801141e <etharp_input+0x9a>
 801141c:	2302      	movs	r3, #2
 801141e:	f107 010c 	add.w	r1, r7, #12
 8011422:	6838      	ldr	r0, [r7, #0]
 8011424:	f7ff fed8 	bl	80111d8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8011428:	693b      	ldr	r3, [r7, #16]
 801142a:	88db      	ldrh	r3, [r3, #6]
 801142c:	b29b      	uxth	r3, r3
 801142e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011432:	d003      	beq.n	801143c <etharp_input+0xb8>
 8011434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011438:	d01e      	beq.n	8011478 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801143a:	e025      	b.n	8011488 <etharp_input+0x104>
      if (for_us) {
 801143c:	7dfb      	ldrb	r3, [r7, #23]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d021      	beq.n	8011486 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8011442:	683b      	ldr	r3, [r7, #0]
 8011444:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8011448:	693b      	ldr	r3, [r7, #16]
 801144a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801144e:	683b      	ldr	r3, [r7, #0]
 8011450:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8011454:	683b      	ldr	r3, [r7, #0]
 8011456:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8011458:	693a      	ldr	r2, [r7, #16]
 801145a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801145c:	2102      	movs	r1, #2
 801145e:	9103      	str	r1, [sp, #12]
 8011460:	f107 010c 	add.w	r1, r7, #12
 8011464:	9102      	str	r1, [sp, #8]
 8011466:	9201      	str	r2, [sp, #4]
 8011468:	9300      	str	r3, [sp, #0]
 801146a:	462b      	mov	r3, r5
 801146c:	4622      	mov	r2, r4
 801146e:	4601      	mov	r1, r0
 8011470:	6838      	ldr	r0, [r7, #0]
 8011472:	f000 faef 	bl	8011a54 <etharp_raw>
      break;
 8011476:	e006      	b.n	8011486 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8011478:	f107 030c 	add.w	r3, r7, #12
 801147c:	4619      	mov	r1, r3
 801147e:	6838      	ldr	r0, [r7, #0]
 8011480:	f7fe f9fc 	bl	800f87c <dhcp_arp_reply>
      break;
 8011484:	e000      	b.n	8011488 <etharp_input+0x104>
      break;
 8011486:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8011488:	6878      	ldr	r0, [r7, #4]
 801148a:	f7f7 fb89 	bl	8008ba0 <pbuf_free>
}
 801148e:	3718      	adds	r7, #24
 8011490:	46bd      	mov	sp, r7
 8011492:	bdb0      	pop	{r4, r5, r7, pc}
 8011494:	08016f08 	.word	0x08016f08
 8011498:	08017058 	.word	0x08017058
 801149c:	08016f80 	.word	0x08016f80

080114a0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80114a0:	b580      	push	{r7, lr}
 80114a2:	b086      	sub	sp, #24
 80114a4:	af02      	add	r7, sp, #8
 80114a6:	60f8      	str	r0, [r7, #12]
 80114a8:	60b9      	str	r1, [r7, #8]
 80114aa:	4613      	mov	r3, r2
 80114ac:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80114ae:	79fa      	ldrb	r2, [r7, #7]
 80114b0:	4944      	ldr	r1, [pc, #272]	; (80115c4 <etharp_output_to_arp_index+0x124>)
 80114b2:	4613      	mov	r3, r2
 80114b4:	005b      	lsls	r3, r3, #1
 80114b6:	4413      	add	r3, r2
 80114b8:	00db      	lsls	r3, r3, #3
 80114ba:	440b      	add	r3, r1
 80114bc:	3314      	adds	r3, #20
 80114be:	781b      	ldrb	r3, [r3, #0]
 80114c0:	2b01      	cmp	r3, #1
 80114c2:	d806      	bhi.n	80114d2 <etharp_output_to_arp_index+0x32>
 80114c4:	4b40      	ldr	r3, [pc, #256]	; (80115c8 <etharp_output_to_arp_index+0x128>)
 80114c6:	f240 22ee 	movw	r2, #750	; 0x2ee
 80114ca:	4940      	ldr	r1, [pc, #256]	; (80115cc <etharp_output_to_arp_index+0x12c>)
 80114cc:	4840      	ldr	r0, [pc, #256]	; (80115d0 <etharp_output_to_arp_index+0x130>)
 80114ce:	f002 f9c5 	bl	801385c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80114d2:	79fa      	ldrb	r2, [r7, #7]
 80114d4:	493b      	ldr	r1, [pc, #236]	; (80115c4 <etharp_output_to_arp_index+0x124>)
 80114d6:	4613      	mov	r3, r2
 80114d8:	005b      	lsls	r3, r3, #1
 80114da:	4413      	add	r3, r2
 80114dc:	00db      	lsls	r3, r3, #3
 80114de:	440b      	add	r3, r1
 80114e0:	3314      	adds	r3, #20
 80114e2:	781b      	ldrb	r3, [r3, #0]
 80114e4:	2b02      	cmp	r3, #2
 80114e6:	d153      	bne.n	8011590 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80114e8:	79fa      	ldrb	r2, [r7, #7]
 80114ea:	4936      	ldr	r1, [pc, #216]	; (80115c4 <etharp_output_to_arp_index+0x124>)
 80114ec:	4613      	mov	r3, r2
 80114ee:	005b      	lsls	r3, r3, #1
 80114f0:	4413      	add	r3, r2
 80114f2:	00db      	lsls	r3, r3, #3
 80114f4:	440b      	add	r3, r1
 80114f6:	3312      	adds	r3, #18
 80114f8:	881b      	ldrh	r3, [r3, #0]
 80114fa:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80114fe:	d919      	bls.n	8011534 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8011500:	79fa      	ldrb	r2, [r7, #7]
 8011502:	4613      	mov	r3, r2
 8011504:	005b      	lsls	r3, r3, #1
 8011506:	4413      	add	r3, r2
 8011508:	00db      	lsls	r3, r3, #3
 801150a:	4a2e      	ldr	r2, [pc, #184]	; (80115c4 <etharp_output_to_arp_index+0x124>)
 801150c:	4413      	add	r3, r2
 801150e:	3304      	adds	r3, #4
 8011510:	4619      	mov	r1, r3
 8011512:	68f8      	ldr	r0, [r7, #12]
 8011514:	f000 fb4c 	bl	8011bb0 <etharp_request>
 8011518:	4603      	mov	r3, r0
 801151a:	2b00      	cmp	r3, #0
 801151c:	d138      	bne.n	8011590 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801151e:	79fa      	ldrb	r2, [r7, #7]
 8011520:	4928      	ldr	r1, [pc, #160]	; (80115c4 <etharp_output_to_arp_index+0x124>)
 8011522:	4613      	mov	r3, r2
 8011524:	005b      	lsls	r3, r3, #1
 8011526:	4413      	add	r3, r2
 8011528:	00db      	lsls	r3, r3, #3
 801152a:	440b      	add	r3, r1
 801152c:	3314      	adds	r3, #20
 801152e:	2203      	movs	r2, #3
 8011530:	701a      	strb	r2, [r3, #0]
 8011532:	e02d      	b.n	8011590 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8011534:	79fa      	ldrb	r2, [r7, #7]
 8011536:	4923      	ldr	r1, [pc, #140]	; (80115c4 <etharp_output_to_arp_index+0x124>)
 8011538:	4613      	mov	r3, r2
 801153a:	005b      	lsls	r3, r3, #1
 801153c:	4413      	add	r3, r2
 801153e:	00db      	lsls	r3, r3, #3
 8011540:	440b      	add	r3, r1
 8011542:	3312      	adds	r3, #18
 8011544:	881b      	ldrh	r3, [r3, #0]
 8011546:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801154a:	d321      	bcc.n	8011590 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801154c:	79fa      	ldrb	r2, [r7, #7]
 801154e:	4613      	mov	r3, r2
 8011550:	005b      	lsls	r3, r3, #1
 8011552:	4413      	add	r3, r2
 8011554:	00db      	lsls	r3, r3, #3
 8011556:	4a1b      	ldr	r2, [pc, #108]	; (80115c4 <etharp_output_to_arp_index+0x124>)
 8011558:	4413      	add	r3, r2
 801155a:	1d19      	adds	r1, r3, #4
 801155c:	79fa      	ldrb	r2, [r7, #7]
 801155e:	4613      	mov	r3, r2
 8011560:	005b      	lsls	r3, r3, #1
 8011562:	4413      	add	r3, r2
 8011564:	00db      	lsls	r3, r3, #3
 8011566:	3308      	adds	r3, #8
 8011568:	4a16      	ldr	r2, [pc, #88]	; (80115c4 <etharp_output_to_arp_index+0x124>)
 801156a:	4413      	add	r3, r2
 801156c:	3304      	adds	r3, #4
 801156e:	461a      	mov	r2, r3
 8011570:	68f8      	ldr	r0, [r7, #12]
 8011572:	f000 fafb 	bl	8011b6c <etharp_request_dst>
 8011576:	4603      	mov	r3, r0
 8011578:	2b00      	cmp	r3, #0
 801157a:	d109      	bne.n	8011590 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801157c:	79fa      	ldrb	r2, [r7, #7]
 801157e:	4911      	ldr	r1, [pc, #68]	; (80115c4 <etharp_output_to_arp_index+0x124>)
 8011580:	4613      	mov	r3, r2
 8011582:	005b      	lsls	r3, r3, #1
 8011584:	4413      	add	r3, r2
 8011586:	00db      	lsls	r3, r3, #3
 8011588:	440b      	add	r3, r1
 801158a:	3314      	adds	r3, #20
 801158c:	2203      	movs	r2, #3
 801158e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8011596:	79fa      	ldrb	r2, [r7, #7]
 8011598:	4613      	mov	r3, r2
 801159a:	005b      	lsls	r3, r3, #1
 801159c:	4413      	add	r3, r2
 801159e:	00db      	lsls	r3, r3, #3
 80115a0:	3308      	adds	r3, #8
 80115a2:	4a08      	ldr	r2, [pc, #32]	; (80115c4 <etharp_output_to_arp_index+0x124>)
 80115a4:	4413      	add	r3, r2
 80115a6:	3304      	adds	r3, #4
 80115a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80115ac:	9200      	str	r2, [sp, #0]
 80115ae:	460a      	mov	r2, r1
 80115b0:	68b9      	ldr	r1, [r7, #8]
 80115b2:	68f8      	ldr	r0, [r7, #12]
 80115b4:	f001 fe58 	bl	8013268 <ethernet_output>
 80115b8:	4603      	mov	r3, r0
}
 80115ba:	4618      	mov	r0, r3
 80115bc:	3710      	adds	r7, #16
 80115be:	46bd      	mov	sp, r7
 80115c0:	bd80      	pop	{r7, pc}
 80115c2:	bf00      	nop
 80115c4:	20008554 	.word	0x20008554
 80115c8:	08016f08 	.word	0x08016f08
 80115cc:	08017078 	.word	0x08017078
 80115d0:	08016f80 	.word	0x08016f80

080115d4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80115d4:	b580      	push	{r7, lr}
 80115d6:	b08a      	sub	sp, #40	; 0x28
 80115d8:	af02      	add	r7, sp, #8
 80115da:	60f8      	str	r0, [r7, #12]
 80115dc:	60b9      	str	r1, [r7, #8]
 80115de:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d106      	bne.n	80115f8 <etharp_output+0x24>
 80115ea:	4b73      	ldr	r3, [pc, #460]	; (80117b8 <etharp_output+0x1e4>)
 80115ec:	f240 321e 	movw	r2, #798	; 0x31e
 80115f0:	4972      	ldr	r1, [pc, #456]	; (80117bc <etharp_output+0x1e8>)
 80115f2:	4873      	ldr	r0, [pc, #460]	; (80117c0 <etharp_output+0x1ec>)
 80115f4:	f002 f932 	bl	801385c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80115f8:	68bb      	ldr	r3, [r7, #8]
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d106      	bne.n	801160c <etharp_output+0x38>
 80115fe:	4b6e      	ldr	r3, [pc, #440]	; (80117b8 <etharp_output+0x1e4>)
 8011600:	f240 321f 	movw	r2, #799	; 0x31f
 8011604:	496f      	ldr	r1, [pc, #444]	; (80117c4 <etharp_output+0x1f0>)
 8011606:	486e      	ldr	r0, [pc, #440]	; (80117c0 <etharp_output+0x1ec>)
 8011608:	f002 f928 	bl	801385c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	2b00      	cmp	r3, #0
 8011610:	d106      	bne.n	8011620 <etharp_output+0x4c>
 8011612:	4b69      	ldr	r3, [pc, #420]	; (80117b8 <etharp_output+0x1e4>)
 8011614:	f44f 7248 	mov.w	r2, #800	; 0x320
 8011618:	496b      	ldr	r1, [pc, #428]	; (80117c8 <etharp_output+0x1f4>)
 801161a:	4869      	ldr	r0, [pc, #420]	; (80117c0 <etharp_output+0x1ec>)
 801161c:	f002 f91e 	bl	801385c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	68f9      	ldr	r1, [r7, #12]
 8011626:	4618      	mov	r0, r3
 8011628:	f000 ff16 	bl	8012458 <ip4_addr_isbroadcast_u32>
 801162c:	4603      	mov	r3, r0
 801162e:	2b00      	cmp	r3, #0
 8011630:	d002      	beq.n	8011638 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8011632:	4b66      	ldr	r3, [pc, #408]	; (80117cc <etharp_output+0x1f8>)
 8011634:	61fb      	str	r3, [r7, #28]
 8011636:	e0af      	b.n	8011798 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011640:	2be0      	cmp	r3, #224	; 0xe0
 8011642:	d118      	bne.n	8011676 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8011644:	2301      	movs	r3, #1
 8011646:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8011648:	2300      	movs	r3, #0
 801164a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801164c:	235e      	movs	r3, #94	; 0x5e
 801164e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	3301      	adds	r3, #1
 8011654:	781b      	ldrb	r3, [r3, #0]
 8011656:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801165a:	b2db      	uxtb	r3, r3
 801165c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	3302      	adds	r3, #2
 8011662:	781b      	ldrb	r3, [r3, #0]
 8011664:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	3303      	adds	r3, #3
 801166a:	781b      	ldrb	r3, [r3, #0]
 801166c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801166e:	f107 0310 	add.w	r3, r7, #16
 8011672:	61fb      	str	r3, [r7, #28]
 8011674:	e090      	b.n	8011798 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	681a      	ldr	r2, [r3, #0]
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	3304      	adds	r3, #4
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	405a      	eors	r2, r3
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	3308      	adds	r3, #8
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	4013      	ands	r3, r2
 801168a:	2b00      	cmp	r3, #0
 801168c:	d012      	beq.n	80116b4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011694:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8011698:	4293      	cmp	r3, r2
 801169a:	d00b      	beq.n	80116b4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	330c      	adds	r3, #12
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d003      	beq.n	80116ae <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	330c      	adds	r3, #12
 80116aa:	61bb      	str	r3, [r7, #24]
 80116ac:	e002      	b.n	80116b4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80116ae:	f06f 0303 	mvn.w	r3, #3
 80116b2:	e07d      	b.n	80117b0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80116b4:	4b46      	ldr	r3, [pc, #280]	; (80117d0 <etharp_output+0x1fc>)
 80116b6:	781b      	ldrb	r3, [r3, #0]
 80116b8:	4619      	mov	r1, r3
 80116ba:	4a46      	ldr	r2, [pc, #280]	; (80117d4 <etharp_output+0x200>)
 80116bc:	460b      	mov	r3, r1
 80116be:	005b      	lsls	r3, r3, #1
 80116c0:	440b      	add	r3, r1
 80116c2:	00db      	lsls	r3, r3, #3
 80116c4:	4413      	add	r3, r2
 80116c6:	3314      	adds	r3, #20
 80116c8:	781b      	ldrb	r3, [r3, #0]
 80116ca:	2b01      	cmp	r3, #1
 80116cc:	d925      	bls.n	801171a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80116ce:	4b40      	ldr	r3, [pc, #256]	; (80117d0 <etharp_output+0x1fc>)
 80116d0:	781b      	ldrb	r3, [r3, #0]
 80116d2:	4619      	mov	r1, r3
 80116d4:	4a3f      	ldr	r2, [pc, #252]	; (80117d4 <etharp_output+0x200>)
 80116d6:	460b      	mov	r3, r1
 80116d8:	005b      	lsls	r3, r3, #1
 80116da:	440b      	add	r3, r1
 80116dc:	00db      	lsls	r3, r3, #3
 80116de:	4413      	add	r3, r2
 80116e0:	3308      	adds	r3, #8
 80116e2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80116e4:	68fa      	ldr	r2, [r7, #12]
 80116e6:	429a      	cmp	r2, r3
 80116e8:	d117      	bne.n	801171a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80116ea:	69bb      	ldr	r3, [r7, #24]
 80116ec:	681a      	ldr	r2, [r3, #0]
 80116ee:	4b38      	ldr	r3, [pc, #224]	; (80117d0 <etharp_output+0x1fc>)
 80116f0:	781b      	ldrb	r3, [r3, #0]
 80116f2:	4618      	mov	r0, r3
 80116f4:	4937      	ldr	r1, [pc, #220]	; (80117d4 <etharp_output+0x200>)
 80116f6:	4603      	mov	r3, r0
 80116f8:	005b      	lsls	r3, r3, #1
 80116fa:	4403      	add	r3, r0
 80116fc:	00db      	lsls	r3, r3, #3
 80116fe:	440b      	add	r3, r1
 8011700:	3304      	adds	r3, #4
 8011702:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011704:	429a      	cmp	r2, r3
 8011706:	d108      	bne.n	801171a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8011708:	4b31      	ldr	r3, [pc, #196]	; (80117d0 <etharp_output+0x1fc>)
 801170a:	781b      	ldrb	r3, [r3, #0]
 801170c:	461a      	mov	r2, r3
 801170e:	68b9      	ldr	r1, [r7, #8]
 8011710:	68f8      	ldr	r0, [r7, #12]
 8011712:	f7ff fec5 	bl	80114a0 <etharp_output_to_arp_index>
 8011716:	4603      	mov	r3, r0
 8011718:	e04a      	b.n	80117b0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801171a:	2300      	movs	r3, #0
 801171c:	75fb      	strb	r3, [r7, #23]
 801171e:	e031      	b.n	8011784 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011720:	7dfa      	ldrb	r2, [r7, #23]
 8011722:	492c      	ldr	r1, [pc, #176]	; (80117d4 <etharp_output+0x200>)
 8011724:	4613      	mov	r3, r2
 8011726:	005b      	lsls	r3, r3, #1
 8011728:	4413      	add	r3, r2
 801172a:	00db      	lsls	r3, r3, #3
 801172c:	440b      	add	r3, r1
 801172e:	3314      	adds	r3, #20
 8011730:	781b      	ldrb	r3, [r3, #0]
 8011732:	2b01      	cmp	r3, #1
 8011734:	d923      	bls.n	801177e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8011736:	7dfa      	ldrb	r2, [r7, #23]
 8011738:	4926      	ldr	r1, [pc, #152]	; (80117d4 <etharp_output+0x200>)
 801173a:	4613      	mov	r3, r2
 801173c:	005b      	lsls	r3, r3, #1
 801173e:	4413      	add	r3, r2
 8011740:	00db      	lsls	r3, r3, #3
 8011742:	440b      	add	r3, r1
 8011744:	3308      	adds	r3, #8
 8011746:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011748:	68fa      	ldr	r2, [r7, #12]
 801174a:	429a      	cmp	r2, r3
 801174c:	d117      	bne.n	801177e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801174e:	69bb      	ldr	r3, [r7, #24]
 8011750:	6819      	ldr	r1, [r3, #0]
 8011752:	7dfa      	ldrb	r2, [r7, #23]
 8011754:	481f      	ldr	r0, [pc, #124]	; (80117d4 <etharp_output+0x200>)
 8011756:	4613      	mov	r3, r2
 8011758:	005b      	lsls	r3, r3, #1
 801175a:	4413      	add	r3, r2
 801175c:	00db      	lsls	r3, r3, #3
 801175e:	4403      	add	r3, r0
 8011760:	3304      	adds	r3, #4
 8011762:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8011764:	4299      	cmp	r1, r3
 8011766:	d10a      	bne.n	801177e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8011768:	4a19      	ldr	r2, [pc, #100]	; (80117d0 <etharp_output+0x1fc>)
 801176a:	7dfb      	ldrb	r3, [r7, #23]
 801176c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801176e:	7dfb      	ldrb	r3, [r7, #23]
 8011770:	461a      	mov	r2, r3
 8011772:	68b9      	ldr	r1, [r7, #8]
 8011774:	68f8      	ldr	r0, [r7, #12]
 8011776:	f7ff fe93 	bl	80114a0 <etharp_output_to_arp_index>
 801177a:	4603      	mov	r3, r0
 801177c:	e018      	b.n	80117b0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801177e:	7dfb      	ldrb	r3, [r7, #23]
 8011780:	3301      	adds	r3, #1
 8011782:	75fb      	strb	r3, [r7, #23]
 8011784:	7dfb      	ldrb	r3, [r7, #23]
 8011786:	2b09      	cmp	r3, #9
 8011788:	d9ca      	bls.n	8011720 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801178a:	68ba      	ldr	r2, [r7, #8]
 801178c:	69b9      	ldr	r1, [r7, #24]
 801178e:	68f8      	ldr	r0, [r7, #12]
 8011790:	f000 f822 	bl	80117d8 <etharp_query>
 8011794:	4603      	mov	r3, r0
 8011796:	e00b      	b.n	80117b0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801179e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80117a2:	9300      	str	r3, [sp, #0]
 80117a4:	69fb      	ldr	r3, [r7, #28]
 80117a6:	68b9      	ldr	r1, [r7, #8]
 80117a8:	68f8      	ldr	r0, [r7, #12]
 80117aa:	f001 fd5d 	bl	8013268 <ethernet_output>
 80117ae:	4603      	mov	r3, r0
}
 80117b0:	4618      	mov	r0, r3
 80117b2:	3720      	adds	r7, #32
 80117b4:	46bd      	mov	sp, r7
 80117b6:	bd80      	pop	{r7, pc}
 80117b8:	08016f08 	.word	0x08016f08
 80117bc:	08017058 	.word	0x08017058
 80117c0:	08016f80 	.word	0x08016f80
 80117c4:	080170a8 	.word	0x080170a8
 80117c8:	08017048 	.word	0x08017048
 80117cc:	0801770c 	.word	0x0801770c
 80117d0:	20008644 	.word	0x20008644
 80117d4:	20008554 	.word	0x20008554

080117d8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	b08c      	sub	sp, #48	; 0x30
 80117dc:	af02      	add	r7, sp, #8
 80117de:	60f8      	str	r0, [r7, #12]
 80117e0:	60b9      	str	r1, [r7, #8]
 80117e2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	332a      	adds	r3, #42	; 0x2a
 80117e8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80117ea:	23ff      	movs	r3, #255	; 0xff
 80117ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80117f0:	2300      	movs	r3, #0
 80117f2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80117f4:	68bb      	ldr	r3, [r7, #8]
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	68f9      	ldr	r1, [r7, #12]
 80117fa:	4618      	mov	r0, r3
 80117fc:	f000 fe2c 	bl	8012458 <ip4_addr_isbroadcast_u32>
 8011800:	4603      	mov	r3, r0
 8011802:	2b00      	cmp	r3, #0
 8011804:	d10c      	bne.n	8011820 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011806:	68bb      	ldr	r3, [r7, #8]
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801180e:	2be0      	cmp	r3, #224	; 0xe0
 8011810:	d006      	beq.n	8011820 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011812:	68bb      	ldr	r3, [r7, #8]
 8011814:	2b00      	cmp	r3, #0
 8011816:	d003      	beq.n	8011820 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8011818:	68bb      	ldr	r3, [r7, #8]
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	2b00      	cmp	r3, #0
 801181e:	d102      	bne.n	8011826 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011820:	f06f 030f 	mvn.w	r3, #15
 8011824:	e101      	b.n	8011a2a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8011826:	68fa      	ldr	r2, [r7, #12]
 8011828:	2101      	movs	r1, #1
 801182a:	68b8      	ldr	r0, [r7, #8]
 801182c:	f7ff fb5c 	bl	8010ee8 <etharp_find_entry>
 8011830:	4603      	mov	r3, r0
 8011832:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8011834:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011838:	2b00      	cmp	r3, #0
 801183a:	da02      	bge.n	8011842 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801183c:	8a7b      	ldrh	r3, [r7, #18]
 801183e:	b25b      	sxtb	r3, r3
 8011840:	e0f3      	b.n	8011a2a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8011842:	8a7b      	ldrh	r3, [r7, #18]
 8011844:	2b7e      	cmp	r3, #126	; 0x7e
 8011846:	d906      	bls.n	8011856 <etharp_query+0x7e>
 8011848:	4b7a      	ldr	r3, [pc, #488]	; (8011a34 <etharp_query+0x25c>)
 801184a:	f240 32c1 	movw	r2, #961	; 0x3c1
 801184e:	497a      	ldr	r1, [pc, #488]	; (8011a38 <etharp_query+0x260>)
 8011850:	487a      	ldr	r0, [pc, #488]	; (8011a3c <etharp_query+0x264>)
 8011852:	f002 f803 	bl	801385c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8011856:	8a7b      	ldrh	r3, [r7, #18]
 8011858:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801185a:	7c7a      	ldrb	r2, [r7, #17]
 801185c:	4978      	ldr	r1, [pc, #480]	; (8011a40 <etharp_query+0x268>)
 801185e:	4613      	mov	r3, r2
 8011860:	005b      	lsls	r3, r3, #1
 8011862:	4413      	add	r3, r2
 8011864:	00db      	lsls	r3, r3, #3
 8011866:	440b      	add	r3, r1
 8011868:	3314      	adds	r3, #20
 801186a:	781b      	ldrb	r3, [r3, #0]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d115      	bne.n	801189c <etharp_query+0xc4>
    is_new_entry = 1;
 8011870:	2301      	movs	r3, #1
 8011872:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8011874:	7c7a      	ldrb	r2, [r7, #17]
 8011876:	4972      	ldr	r1, [pc, #456]	; (8011a40 <etharp_query+0x268>)
 8011878:	4613      	mov	r3, r2
 801187a:	005b      	lsls	r3, r3, #1
 801187c:	4413      	add	r3, r2
 801187e:	00db      	lsls	r3, r3, #3
 8011880:	440b      	add	r3, r1
 8011882:	3314      	adds	r3, #20
 8011884:	2201      	movs	r2, #1
 8011886:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8011888:	7c7a      	ldrb	r2, [r7, #17]
 801188a:	496d      	ldr	r1, [pc, #436]	; (8011a40 <etharp_query+0x268>)
 801188c:	4613      	mov	r3, r2
 801188e:	005b      	lsls	r3, r3, #1
 8011890:	4413      	add	r3, r2
 8011892:	00db      	lsls	r3, r3, #3
 8011894:	440b      	add	r3, r1
 8011896:	3308      	adds	r3, #8
 8011898:	68fa      	ldr	r2, [r7, #12]
 801189a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801189c:	7c7a      	ldrb	r2, [r7, #17]
 801189e:	4968      	ldr	r1, [pc, #416]	; (8011a40 <etharp_query+0x268>)
 80118a0:	4613      	mov	r3, r2
 80118a2:	005b      	lsls	r3, r3, #1
 80118a4:	4413      	add	r3, r2
 80118a6:	00db      	lsls	r3, r3, #3
 80118a8:	440b      	add	r3, r1
 80118aa:	3314      	adds	r3, #20
 80118ac:	781b      	ldrb	r3, [r3, #0]
 80118ae:	2b01      	cmp	r3, #1
 80118b0:	d011      	beq.n	80118d6 <etharp_query+0xfe>
 80118b2:	7c7a      	ldrb	r2, [r7, #17]
 80118b4:	4962      	ldr	r1, [pc, #392]	; (8011a40 <etharp_query+0x268>)
 80118b6:	4613      	mov	r3, r2
 80118b8:	005b      	lsls	r3, r3, #1
 80118ba:	4413      	add	r3, r2
 80118bc:	00db      	lsls	r3, r3, #3
 80118be:	440b      	add	r3, r1
 80118c0:	3314      	adds	r3, #20
 80118c2:	781b      	ldrb	r3, [r3, #0]
 80118c4:	2b01      	cmp	r3, #1
 80118c6:	d806      	bhi.n	80118d6 <etharp_query+0xfe>
 80118c8:	4b5a      	ldr	r3, [pc, #360]	; (8011a34 <etharp_query+0x25c>)
 80118ca:	f240 32cd 	movw	r2, #973	; 0x3cd
 80118ce:	495d      	ldr	r1, [pc, #372]	; (8011a44 <etharp_query+0x26c>)
 80118d0:	485a      	ldr	r0, [pc, #360]	; (8011a3c <etharp_query+0x264>)
 80118d2:	f001 ffc3 	bl	801385c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80118d6:	6a3b      	ldr	r3, [r7, #32]
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d102      	bne.n	80118e2 <etharp_query+0x10a>
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d10c      	bne.n	80118fc <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80118e2:	68b9      	ldr	r1, [r7, #8]
 80118e4:	68f8      	ldr	r0, [r7, #12]
 80118e6:	f000 f963 	bl	8011bb0 <etharp_request>
 80118ea:	4603      	mov	r3, r0
 80118ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d102      	bne.n	80118fc <etharp_query+0x124>
      return result;
 80118f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80118fa:	e096      	b.n	8011a2a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d106      	bne.n	8011910 <etharp_query+0x138>
 8011902:	4b4c      	ldr	r3, [pc, #304]	; (8011a34 <etharp_query+0x25c>)
 8011904:	f240 32e1 	movw	r2, #993	; 0x3e1
 8011908:	494f      	ldr	r1, [pc, #316]	; (8011a48 <etharp_query+0x270>)
 801190a:	484c      	ldr	r0, [pc, #304]	; (8011a3c <etharp_query+0x264>)
 801190c:	f001 ffa6 	bl	801385c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8011910:	7c7a      	ldrb	r2, [r7, #17]
 8011912:	494b      	ldr	r1, [pc, #300]	; (8011a40 <etharp_query+0x268>)
 8011914:	4613      	mov	r3, r2
 8011916:	005b      	lsls	r3, r3, #1
 8011918:	4413      	add	r3, r2
 801191a:	00db      	lsls	r3, r3, #3
 801191c:	440b      	add	r3, r1
 801191e:	3314      	adds	r3, #20
 8011920:	781b      	ldrb	r3, [r3, #0]
 8011922:	2b01      	cmp	r3, #1
 8011924:	d917      	bls.n	8011956 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8011926:	4a49      	ldr	r2, [pc, #292]	; (8011a4c <etharp_query+0x274>)
 8011928:	7c7b      	ldrb	r3, [r7, #17]
 801192a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801192c:	7c7a      	ldrb	r2, [r7, #17]
 801192e:	4613      	mov	r3, r2
 8011930:	005b      	lsls	r3, r3, #1
 8011932:	4413      	add	r3, r2
 8011934:	00db      	lsls	r3, r3, #3
 8011936:	3308      	adds	r3, #8
 8011938:	4a41      	ldr	r2, [pc, #260]	; (8011a40 <etharp_query+0x268>)
 801193a:	4413      	add	r3, r2
 801193c:	3304      	adds	r3, #4
 801193e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011942:	9200      	str	r2, [sp, #0]
 8011944:	697a      	ldr	r2, [r7, #20]
 8011946:	6879      	ldr	r1, [r7, #4]
 8011948:	68f8      	ldr	r0, [r7, #12]
 801194a:	f001 fc8d 	bl	8013268 <ethernet_output>
 801194e:	4603      	mov	r3, r0
 8011950:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011954:	e067      	b.n	8011a26 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011956:	7c7a      	ldrb	r2, [r7, #17]
 8011958:	4939      	ldr	r1, [pc, #228]	; (8011a40 <etharp_query+0x268>)
 801195a:	4613      	mov	r3, r2
 801195c:	005b      	lsls	r3, r3, #1
 801195e:	4413      	add	r3, r2
 8011960:	00db      	lsls	r3, r3, #3
 8011962:	440b      	add	r3, r1
 8011964:	3314      	adds	r3, #20
 8011966:	781b      	ldrb	r3, [r3, #0]
 8011968:	2b01      	cmp	r3, #1
 801196a:	d15c      	bne.n	8011a26 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801196c:	2300      	movs	r3, #0
 801196e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011974:	e01c      	b.n	80119b0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8011976:	69fb      	ldr	r3, [r7, #28]
 8011978:	895a      	ldrh	r2, [r3, #10]
 801197a:	69fb      	ldr	r3, [r7, #28]
 801197c:	891b      	ldrh	r3, [r3, #8]
 801197e:	429a      	cmp	r2, r3
 8011980:	d10a      	bne.n	8011998 <etharp_query+0x1c0>
 8011982:	69fb      	ldr	r3, [r7, #28]
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	2b00      	cmp	r3, #0
 8011988:	d006      	beq.n	8011998 <etharp_query+0x1c0>
 801198a:	4b2a      	ldr	r3, [pc, #168]	; (8011a34 <etharp_query+0x25c>)
 801198c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8011990:	492f      	ldr	r1, [pc, #188]	; (8011a50 <etharp_query+0x278>)
 8011992:	482a      	ldr	r0, [pc, #168]	; (8011a3c <etharp_query+0x264>)
 8011994:	f001 ff62 	bl	801385c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8011998:	69fb      	ldr	r3, [r7, #28]
 801199a:	7b1b      	ldrb	r3, [r3, #12]
 801199c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d002      	beq.n	80119aa <etharp_query+0x1d2>
        copy_needed = 1;
 80119a4:	2301      	movs	r3, #1
 80119a6:	61bb      	str	r3, [r7, #24]
        break;
 80119a8:	e005      	b.n	80119b6 <etharp_query+0x1de>
      }
      p = p->next;
 80119aa:	69fb      	ldr	r3, [r7, #28]
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	61fb      	str	r3, [r7, #28]
    while (p) {
 80119b0:	69fb      	ldr	r3, [r7, #28]
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d1df      	bne.n	8011976 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80119b6:	69bb      	ldr	r3, [r7, #24]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d007      	beq.n	80119cc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80119bc:	687a      	ldr	r2, [r7, #4]
 80119be:	f44f 7120 	mov.w	r1, #640	; 0x280
 80119c2:	200e      	movs	r0, #14
 80119c4:	f7f7 fb64 	bl	8009090 <pbuf_clone>
 80119c8:	61f8      	str	r0, [r7, #28]
 80119ca:	e004      	b.n	80119d6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80119d0:	69f8      	ldr	r0, [r7, #28]
 80119d2:	f7f7 f98b 	bl	8008cec <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80119d6:	69fb      	ldr	r3, [r7, #28]
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d021      	beq.n	8011a20 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80119dc:	7c7a      	ldrb	r2, [r7, #17]
 80119de:	4918      	ldr	r1, [pc, #96]	; (8011a40 <etharp_query+0x268>)
 80119e0:	4613      	mov	r3, r2
 80119e2:	005b      	lsls	r3, r3, #1
 80119e4:	4413      	add	r3, r2
 80119e6:	00db      	lsls	r3, r3, #3
 80119e8:	440b      	add	r3, r1
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d00a      	beq.n	8011a06 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80119f0:	7c7a      	ldrb	r2, [r7, #17]
 80119f2:	4913      	ldr	r1, [pc, #76]	; (8011a40 <etharp_query+0x268>)
 80119f4:	4613      	mov	r3, r2
 80119f6:	005b      	lsls	r3, r3, #1
 80119f8:	4413      	add	r3, r2
 80119fa:	00db      	lsls	r3, r3, #3
 80119fc:	440b      	add	r3, r1
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	4618      	mov	r0, r3
 8011a02:	f7f7 f8cd 	bl	8008ba0 <pbuf_free>
      }
      arp_table[i].q = p;
 8011a06:	7c7a      	ldrb	r2, [r7, #17]
 8011a08:	490d      	ldr	r1, [pc, #52]	; (8011a40 <etharp_query+0x268>)
 8011a0a:	4613      	mov	r3, r2
 8011a0c:	005b      	lsls	r3, r3, #1
 8011a0e:	4413      	add	r3, r2
 8011a10:	00db      	lsls	r3, r3, #3
 8011a12:	440b      	add	r3, r1
 8011a14:	69fa      	ldr	r2, [r7, #28]
 8011a16:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8011a18:	2300      	movs	r3, #0
 8011a1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011a1e:	e002      	b.n	8011a26 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8011a20:	23ff      	movs	r3, #255	; 0xff
 8011a22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8011a26:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8011a2a:	4618      	mov	r0, r3
 8011a2c:	3728      	adds	r7, #40	; 0x28
 8011a2e:	46bd      	mov	sp, r7
 8011a30:	bd80      	pop	{r7, pc}
 8011a32:	bf00      	nop
 8011a34:	08016f08 	.word	0x08016f08
 8011a38:	080170b4 	.word	0x080170b4
 8011a3c:	08016f80 	.word	0x08016f80
 8011a40:	20008554 	.word	0x20008554
 8011a44:	080170c4 	.word	0x080170c4
 8011a48:	080170a8 	.word	0x080170a8
 8011a4c:	20008644 	.word	0x20008644
 8011a50:	080170ec 	.word	0x080170ec

08011a54 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8011a54:	b580      	push	{r7, lr}
 8011a56:	b08a      	sub	sp, #40	; 0x28
 8011a58:	af02      	add	r7, sp, #8
 8011a5a:	60f8      	str	r0, [r7, #12]
 8011a5c:	60b9      	str	r1, [r7, #8]
 8011a5e:	607a      	str	r2, [r7, #4]
 8011a60:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8011a62:	2300      	movs	r3, #0
 8011a64:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d106      	bne.n	8011a7a <etharp_raw+0x26>
 8011a6c:	4b3a      	ldr	r3, [pc, #232]	; (8011b58 <etharp_raw+0x104>)
 8011a6e:	f240 4257 	movw	r2, #1111	; 0x457
 8011a72:	493a      	ldr	r1, [pc, #232]	; (8011b5c <etharp_raw+0x108>)
 8011a74:	483a      	ldr	r0, [pc, #232]	; (8011b60 <etharp_raw+0x10c>)
 8011a76:	f001 fef1 	bl	801385c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8011a7a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011a7e:	211c      	movs	r1, #28
 8011a80:	200e      	movs	r0, #14
 8011a82:	f7f6 fda9 	bl	80085d8 <pbuf_alloc>
 8011a86:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8011a88:	69bb      	ldr	r3, [r7, #24]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d102      	bne.n	8011a94 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8011a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8011a92:	e05d      	b.n	8011b50 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8011a94:	69bb      	ldr	r3, [r7, #24]
 8011a96:	895b      	ldrh	r3, [r3, #10]
 8011a98:	2b1b      	cmp	r3, #27
 8011a9a:	d806      	bhi.n	8011aaa <etharp_raw+0x56>
 8011a9c:	4b2e      	ldr	r3, [pc, #184]	; (8011b58 <etharp_raw+0x104>)
 8011a9e:	f240 4262 	movw	r2, #1122	; 0x462
 8011aa2:	4930      	ldr	r1, [pc, #192]	; (8011b64 <etharp_raw+0x110>)
 8011aa4:	482e      	ldr	r0, [pc, #184]	; (8011b60 <etharp_raw+0x10c>)
 8011aa6:	f001 fed9 	bl	801385c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8011aaa:	69bb      	ldr	r3, [r7, #24]
 8011aac:	685b      	ldr	r3, [r3, #4]
 8011aae:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8011ab0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	f7f5 fcbc 	bl	8007430 <lwip_htons>
 8011ab8:	4603      	mov	r3, r0
 8011aba:	461a      	mov	r2, r3
 8011abc:	697b      	ldr	r3, [r7, #20]
 8011abe:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011ac6:	2b06      	cmp	r3, #6
 8011ac8:	d006      	beq.n	8011ad8 <etharp_raw+0x84>
 8011aca:	4b23      	ldr	r3, [pc, #140]	; (8011b58 <etharp_raw+0x104>)
 8011acc:	f240 4269 	movw	r2, #1129	; 0x469
 8011ad0:	4925      	ldr	r1, [pc, #148]	; (8011b68 <etharp_raw+0x114>)
 8011ad2:	4823      	ldr	r0, [pc, #140]	; (8011b60 <etharp_raw+0x10c>)
 8011ad4:	f001 fec2 	bl	801385c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8011ad8:	697b      	ldr	r3, [r7, #20]
 8011ada:	3308      	adds	r3, #8
 8011adc:	2206      	movs	r2, #6
 8011ade:	6839      	ldr	r1, [r7, #0]
 8011ae0:	4618      	mov	r0, r3
 8011ae2:	f001 fe4a 	bl	801377a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8011ae6:	697b      	ldr	r3, [r7, #20]
 8011ae8:	3312      	adds	r3, #18
 8011aea:	2206      	movs	r2, #6
 8011aec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011aee:	4618      	mov	r0, r3
 8011af0:	f001 fe43 	bl	801377a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8011af4:	697b      	ldr	r3, [r7, #20]
 8011af6:	330e      	adds	r3, #14
 8011af8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011afa:	6812      	ldr	r2, [r2, #0]
 8011afc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8011afe:	697b      	ldr	r3, [r7, #20]
 8011b00:	3318      	adds	r3, #24
 8011b02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011b04:	6812      	ldr	r2, [r2, #0]
 8011b06:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8011b08:	697b      	ldr	r3, [r7, #20]
 8011b0a:	2200      	movs	r2, #0
 8011b0c:	701a      	strb	r2, [r3, #0]
 8011b0e:	2200      	movs	r2, #0
 8011b10:	f042 0201 	orr.w	r2, r2, #1
 8011b14:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8011b16:	697b      	ldr	r3, [r7, #20]
 8011b18:	2200      	movs	r2, #0
 8011b1a:	f042 0208 	orr.w	r2, r2, #8
 8011b1e:	709a      	strb	r2, [r3, #2]
 8011b20:	2200      	movs	r2, #0
 8011b22:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8011b24:	697b      	ldr	r3, [r7, #20]
 8011b26:	2206      	movs	r2, #6
 8011b28:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8011b2a:	697b      	ldr	r3, [r7, #20]
 8011b2c:	2204      	movs	r2, #4
 8011b2e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8011b30:	f640 0306 	movw	r3, #2054	; 0x806
 8011b34:	9300      	str	r3, [sp, #0]
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	68ba      	ldr	r2, [r7, #8]
 8011b3a:	69b9      	ldr	r1, [r7, #24]
 8011b3c:	68f8      	ldr	r0, [r7, #12]
 8011b3e:	f001 fb93 	bl	8013268 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8011b42:	69b8      	ldr	r0, [r7, #24]
 8011b44:	f7f7 f82c 	bl	8008ba0 <pbuf_free>
  p = NULL;
 8011b48:	2300      	movs	r3, #0
 8011b4a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8011b4c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011b50:	4618      	mov	r0, r3
 8011b52:	3720      	adds	r7, #32
 8011b54:	46bd      	mov	sp, r7
 8011b56:	bd80      	pop	{r7, pc}
 8011b58:	08016f08 	.word	0x08016f08
 8011b5c:	08017058 	.word	0x08017058
 8011b60:	08016f80 	.word	0x08016f80
 8011b64:	08017108 	.word	0x08017108
 8011b68:	0801713c 	.word	0x0801713c

08011b6c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	b088      	sub	sp, #32
 8011b70:	af04      	add	r7, sp, #16
 8011b72:	60f8      	str	r0, [r7, #12]
 8011b74:	60b9      	str	r1, [r7, #8]
 8011b76:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011b88:	2201      	movs	r2, #1
 8011b8a:	9203      	str	r2, [sp, #12]
 8011b8c:	68ba      	ldr	r2, [r7, #8]
 8011b8e:	9202      	str	r2, [sp, #8]
 8011b90:	4a06      	ldr	r2, [pc, #24]	; (8011bac <etharp_request_dst+0x40>)
 8011b92:	9201      	str	r2, [sp, #4]
 8011b94:	9300      	str	r3, [sp, #0]
 8011b96:	4603      	mov	r3, r0
 8011b98:	687a      	ldr	r2, [r7, #4]
 8011b9a:	68f8      	ldr	r0, [r7, #12]
 8011b9c:	f7ff ff5a 	bl	8011a54 <etharp_raw>
 8011ba0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	3710      	adds	r7, #16
 8011ba6:	46bd      	mov	sp, r7
 8011ba8:	bd80      	pop	{r7, pc}
 8011baa:	bf00      	nop
 8011bac:	08017714 	.word	0x08017714

08011bb0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8011bb0:	b580      	push	{r7, lr}
 8011bb2:	b082      	sub	sp, #8
 8011bb4:	af00      	add	r7, sp, #0
 8011bb6:	6078      	str	r0, [r7, #4]
 8011bb8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8011bba:	4a05      	ldr	r2, [pc, #20]	; (8011bd0 <etharp_request+0x20>)
 8011bbc:	6839      	ldr	r1, [r7, #0]
 8011bbe:	6878      	ldr	r0, [r7, #4]
 8011bc0:	f7ff ffd4 	bl	8011b6c <etharp_request_dst>
 8011bc4:	4603      	mov	r3, r0
}
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	3708      	adds	r7, #8
 8011bca:	46bd      	mov	sp, r7
 8011bcc:	bd80      	pop	{r7, pc}
 8011bce:	bf00      	nop
 8011bd0:	0801770c 	.word	0x0801770c

08011bd4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8011bd4:	b580      	push	{r7, lr}
 8011bd6:	b08e      	sub	sp, #56	; 0x38
 8011bd8:	af04      	add	r7, sp, #16
 8011bda:	6078      	str	r0, [r7, #4]
 8011bdc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8011bde:	4b79      	ldr	r3, [pc, #484]	; (8011dc4 <icmp_input+0x1f0>)
 8011be0:	689b      	ldr	r3, [r3, #8]
 8011be2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8011be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011be6:	781b      	ldrb	r3, [r3, #0]
 8011be8:	f003 030f 	and.w	r3, r3, #15
 8011bec:	b2db      	uxtb	r3, r3
 8011bee:	009b      	lsls	r3, r3, #2
 8011bf0:	b2db      	uxtb	r3, r3
 8011bf2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8011bf4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011bf6:	2b13      	cmp	r3, #19
 8011bf8:	f240 80cd 	bls.w	8011d96 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	895b      	ldrh	r3, [r3, #10]
 8011c00:	2b03      	cmp	r3, #3
 8011c02:	f240 80ca 	bls.w	8011d9a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	685b      	ldr	r3, [r3, #4]
 8011c0a:	781b      	ldrb	r3, [r3, #0]
 8011c0c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8011c10:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	f000 80b7 	beq.w	8011d88 <icmp_input+0x1b4>
 8011c1a:	2b08      	cmp	r3, #8
 8011c1c:	f040 80b7 	bne.w	8011d8e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8011c20:	4b69      	ldr	r3, [pc, #420]	; (8011dc8 <icmp_input+0x1f4>)
 8011c22:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011c24:	4b67      	ldr	r3, [pc, #412]	; (8011dc4 <icmp_input+0x1f0>)
 8011c26:	695b      	ldr	r3, [r3, #20]
 8011c28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011c2c:	2be0      	cmp	r3, #224	; 0xe0
 8011c2e:	f000 80bb 	beq.w	8011da8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8011c32:	4b64      	ldr	r3, [pc, #400]	; (8011dc4 <icmp_input+0x1f0>)
 8011c34:	695b      	ldr	r3, [r3, #20]
 8011c36:	4a63      	ldr	r2, [pc, #396]	; (8011dc4 <icmp_input+0x1f0>)
 8011c38:	6812      	ldr	r2, [r2, #0]
 8011c3a:	4611      	mov	r1, r2
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	f000 fc0b 	bl	8012458 <ip4_addr_isbroadcast_u32>
 8011c42:	4603      	mov	r3, r0
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	f040 80b1 	bne.w	8011dac <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	891b      	ldrh	r3, [r3, #8]
 8011c4e:	2b07      	cmp	r3, #7
 8011c50:	f240 80a5 	bls.w	8011d9e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011c54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011c56:	330e      	adds	r3, #14
 8011c58:	4619      	mov	r1, r3
 8011c5a:	6878      	ldr	r0, [r7, #4]
 8011c5c:	f7f6 ff0a 	bl	8008a74 <pbuf_add_header>
 8011c60:	4603      	mov	r3, r0
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d04b      	beq.n	8011cfe <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	891a      	ldrh	r2, [r3, #8]
 8011c6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011c6c:	4413      	add	r3, r2
 8011c6e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	891b      	ldrh	r3, [r3, #8]
 8011c74:	8b7a      	ldrh	r2, [r7, #26]
 8011c76:	429a      	cmp	r2, r3
 8011c78:	f0c0 809a 	bcc.w	8011db0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8011c7c:	8b7b      	ldrh	r3, [r7, #26]
 8011c7e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011c82:	4619      	mov	r1, r3
 8011c84:	200e      	movs	r0, #14
 8011c86:	f7f6 fca7 	bl	80085d8 <pbuf_alloc>
 8011c8a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8011c8c:	697b      	ldr	r3, [r7, #20]
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	f000 8090 	beq.w	8011db4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8011c94:	697b      	ldr	r3, [r7, #20]
 8011c96:	895b      	ldrh	r3, [r3, #10]
 8011c98:	461a      	mov	r2, r3
 8011c9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011c9c:	3308      	adds	r3, #8
 8011c9e:	429a      	cmp	r2, r3
 8011ca0:	d203      	bcs.n	8011caa <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8011ca2:	6978      	ldr	r0, [r7, #20]
 8011ca4:	f7f6 ff7c 	bl	8008ba0 <pbuf_free>
          goto icmperr;
 8011ca8:	e085      	b.n	8011db6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8011caa:	697b      	ldr	r3, [r7, #20]
 8011cac:	685b      	ldr	r3, [r3, #4]
 8011cae:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011cb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	f001 fd61 	bl	801377a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8011cb8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011cba:	4619      	mov	r1, r3
 8011cbc:	6978      	ldr	r0, [r7, #20]
 8011cbe:	f7f6 fee9 	bl	8008a94 <pbuf_remove_header>
 8011cc2:	4603      	mov	r3, r0
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d009      	beq.n	8011cdc <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8011cc8:	4b40      	ldr	r3, [pc, #256]	; (8011dcc <icmp_input+0x1f8>)
 8011cca:	22b6      	movs	r2, #182	; 0xb6
 8011ccc:	4940      	ldr	r1, [pc, #256]	; (8011dd0 <icmp_input+0x1fc>)
 8011cce:	4841      	ldr	r0, [pc, #260]	; (8011dd4 <icmp_input+0x200>)
 8011cd0:	f001 fdc4 	bl	801385c <iprintf>
          pbuf_free(r);
 8011cd4:	6978      	ldr	r0, [r7, #20]
 8011cd6:	f7f6 ff63 	bl	8008ba0 <pbuf_free>
          goto icmperr;
 8011cda:	e06c      	b.n	8011db6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8011cdc:	6879      	ldr	r1, [r7, #4]
 8011cde:	6978      	ldr	r0, [r7, #20]
 8011ce0:	f7f7 f892 	bl	8008e08 <pbuf_copy>
 8011ce4:	4603      	mov	r3, r0
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d003      	beq.n	8011cf2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8011cea:	6978      	ldr	r0, [r7, #20]
 8011cec:	f7f6 ff58 	bl	8008ba0 <pbuf_free>
          goto icmperr;
 8011cf0:	e061      	b.n	8011db6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8011cf2:	6878      	ldr	r0, [r7, #4]
 8011cf4:	f7f6 ff54 	bl	8008ba0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8011cf8:	697b      	ldr	r3, [r7, #20]
 8011cfa:	607b      	str	r3, [r7, #4]
 8011cfc:	e00f      	b.n	8011d1e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011cfe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011d00:	330e      	adds	r3, #14
 8011d02:	4619      	mov	r1, r3
 8011d04:	6878      	ldr	r0, [r7, #4]
 8011d06:	f7f6 fec5 	bl	8008a94 <pbuf_remove_header>
 8011d0a:	4603      	mov	r3, r0
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d006      	beq.n	8011d1e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8011d10:	4b2e      	ldr	r3, [pc, #184]	; (8011dcc <icmp_input+0x1f8>)
 8011d12:	22c7      	movs	r2, #199	; 0xc7
 8011d14:	4930      	ldr	r1, [pc, #192]	; (8011dd8 <icmp_input+0x204>)
 8011d16:	482f      	ldr	r0, [pc, #188]	; (8011dd4 <icmp_input+0x200>)
 8011d18:	f001 fda0 	bl	801385c <iprintf>
          goto icmperr;
 8011d1c:	e04b      	b.n	8011db6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	685b      	ldr	r3, [r3, #4]
 8011d22:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8011d24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011d26:	4619      	mov	r1, r3
 8011d28:	6878      	ldr	r0, [r7, #4]
 8011d2a:	f7f6 fea3 	bl	8008a74 <pbuf_add_header>
 8011d2e:	4603      	mov	r3, r0
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d12b      	bne.n	8011d8c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	685b      	ldr	r3, [r3, #4]
 8011d38:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8011d3a:	69fb      	ldr	r3, [r7, #28]
 8011d3c:	681a      	ldr	r2, [r3, #0]
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8011d42:	4b20      	ldr	r3, [pc, #128]	; (8011dc4 <icmp_input+0x1f0>)
 8011d44:	691a      	ldr	r2, [r3, #16]
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8011d4a:	693b      	ldr	r3, [r7, #16]
 8011d4c:	2200      	movs	r2, #0
 8011d4e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8011d50:	693b      	ldr	r3, [r7, #16]
 8011d52:	2200      	movs	r2, #0
 8011d54:	709a      	strb	r2, [r3, #2]
 8011d56:	2200      	movs	r2, #0
 8011d58:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	22ff      	movs	r2, #255	; 0xff
 8011d5e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	2200      	movs	r2, #0
 8011d64:	729a      	strb	r2, [r3, #10]
 8011d66:	2200      	movs	r2, #0
 8011d68:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8011d6a:	683b      	ldr	r3, [r7, #0]
 8011d6c:	9302      	str	r3, [sp, #8]
 8011d6e:	2301      	movs	r3, #1
 8011d70:	9301      	str	r3, [sp, #4]
 8011d72:	2300      	movs	r3, #0
 8011d74:	9300      	str	r3, [sp, #0]
 8011d76:	23ff      	movs	r3, #255	; 0xff
 8011d78:	2200      	movs	r2, #0
 8011d7a:	69f9      	ldr	r1, [r7, #28]
 8011d7c:	6878      	ldr	r0, [r7, #4]
 8011d7e:	f000 fa93 	bl	80122a8 <ip4_output_if>
 8011d82:	4603      	mov	r3, r0
 8011d84:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8011d86:	e001      	b.n	8011d8c <icmp_input+0x1b8>
      break;
 8011d88:	bf00      	nop
 8011d8a:	e000      	b.n	8011d8e <icmp_input+0x1ba>
      break;
 8011d8c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8011d8e:	6878      	ldr	r0, [r7, #4]
 8011d90:	f7f6 ff06 	bl	8008ba0 <pbuf_free>
  return;
 8011d94:	e013      	b.n	8011dbe <icmp_input+0x1ea>
    goto lenerr;
 8011d96:	bf00      	nop
 8011d98:	e002      	b.n	8011da0 <icmp_input+0x1cc>
    goto lenerr;
 8011d9a:	bf00      	nop
 8011d9c:	e000      	b.n	8011da0 <icmp_input+0x1cc>
        goto lenerr;
 8011d9e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8011da0:	6878      	ldr	r0, [r7, #4]
 8011da2:	f7f6 fefd 	bl	8008ba0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011da6:	e00a      	b.n	8011dbe <icmp_input+0x1ea>
        goto icmperr;
 8011da8:	bf00      	nop
 8011daa:	e004      	b.n	8011db6 <icmp_input+0x1e2>
        goto icmperr;
 8011dac:	bf00      	nop
 8011dae:	e002      	b.n	8011db6 <icmp_input+0x1e2>
          goto icmperr;
 8011db0:	bf00      	nop
 8011db2:	e000      	b.n	8011db6 <icmp_input+0x1e2>
          goto icmperr;
 8011db4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8011db6:	6878      	ldr	r0, [r7, #4]
 8011db8:	f7f6 fef2 	bl	8008ba0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011dbc:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8011dbe:	3728      	adds	r7, #40	; 0x28
 8011dc0:	46bd      	mov	sp, r7
 8011dc2:	bd80      	pop	{r7, pc}
 8011dc4:	2000b824 	.word	0x2000b824
 8011dc8:	2000b838 	.word	0x2000b838
 8011dcc:	08017180 	.word	0x08017180
 8011dd0:	080171b8 	.word	0x080171b8
 8011dd4:	080171f0 	.word	0x080171f0
 8011dd8:	08017218 	.word	0x08017218

08011ddc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8011ddc:	b580      	push	{r7, lr}
 8011dde:	b082      	sub	sp, #8
 8011de0:	af00      	add	r7, sp, #0
 8011de2:	6078      	str	r0, [r7, #4]
 8011de4:	460b      	mov	r3, r1
 8011de6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8011de8:	78fb      	ldrb	r3, [r7, #3]
 8011dea:	461a      	mov	r2, r3
 8011dec:	2103      	movs	r1, #3
 8011dee:	6878      	ldr	r0, [r7, #4]
 8011df0:	f000 f814 	bl	8011e1c <icmp_send_response>
}
 8011df4:	bf00      	nop
 8011df6:	3708      	adds	r7, #8
 8011df8:	46bd      	mov	sp, r7
 8011dfa:	bd80      	pop	{r7, pc}

08011dfc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8011dfc:	b580      	push	{r7, lr}
 8011dfe:	b082      	sub	sp, #8
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	6078      	str	r0, [r7, #4]
 8011e04:	460b      	mov	r3, r1
 8011e06:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8011e08:	78fb      	ldrb	r3, [r7, #3]
 8011e0a:	461a      	mov	r2, r3
 8011e0c:	210b      	movs	r1, #11
 8011e0e:	6878      	ldr	r0, [r7, #4]
 8011e10:	f000 f804 	bl	8011e1c <icmp_send_response>
}
 8011e14:	bf00      	nop
 8011e16:	3708      	adds	r7, #8
 8011e18:	46bd      	mov	sp, r7
 8011e1a:	bd80      	pop	{r7, pc}

08011e1c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8011e1c:	b580      	push	{r7, lr}
 8011e1e:	b08c      	sub	sp, #48	; 0x30
 8011e20:	af04      	add	r7, sp, #16
 8011e22:	6078      	str	r0, [r7, #4]
 8011e24:	460b      	mov	r3, r1
 8011e26:	70fb      	strb	r3, [r7, #3]
 8011e28:	4613      	mov	r3, r2
 8011e2a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8011e2c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011e30:	2124      	movs	r1, #36	; 0x24
 8011e32:	2022      	movs	r0, #34	; 0x22
 8011e34:	f7f6 fbd0 	bl	80085d8 <pbuf_alloc>
 8011e38:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8011e3a:	69fb      	ldr	r3, [r7, #28]
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d04c      	beq.n	8011eda <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8011e40:	69fb      	ldr	r3, [r7, #28]
 8011e42:	895b      	ldrh	r3, [r3, #10]
 8011e44:	2b23      	cmp	r3, #35	; 0x23
 8011e46:	d806      	bhi.n	8011e56 <icmp_send_response+0x3a>
 8011e48:	4b26      	ldr	r3, [pc, #152]	; (8011ee4 <icmp_send_response+0xc8>)
 8011e4a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8011e4e:	4926      	ldr	r1, [pc, #152]	; (8011ee8 <icmp_send_response+0xcc>)
 8011e50:	4826      	ldr	r0, [pc, #152]	; (8011eec <icmp_send_response+0xd0>)
 8011e52:	f001 fd03 	bl	801385c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	685b      	ldr	r3, [r3, #4]
 8011e5a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8011e5c:	69fb      	ldr	r3, [r7, #28]
 8011e5e:	685b      	ldr	r3, [r3, #4]
 8011e60:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8011e62:	697b      	ldr	r3, [r7, #20]
 8011e64:	78fa      	ldrb	r2, [r7, #3]
 8011e66:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8011e68:	697b      	ldr	r3, [r7, #20]
 8011e6a:	78ba      	ldrb	r2, [r7, #2]
 8011e6c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8011e6e:	697b      	ldr	r3, [r7, #20]
 8011e70:	2200      	movs	r2, #0
 8011e72:	711a      	strb	r2, [r3, #4]
 8011e74:	2200      	movs	r2, #0
 8011e76:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8011e78:	697b      	ldr	r3, [r7, #20]
 8011e7a:	2200      	movs	r2, #0
 8011e7c:	719a      	strb	r2, [r3, #6]
 8011e7e:	2200      	movs	r2, #0
 8011e80:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8011e82:	69fb      	ldr	r3, [r7, #28]
 8011e84:	685b      	ldr	r3, [r3, #4]
 8011e86:	f103 0008 	add.w	r0, r3, #8
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	685b      	ldr	r3, [r3, #4]
 8011e8e:	221c      	movs	r2, #28
 8011e90:	4619      	mov	r1, r3
 8011e92:	f001 fc72 	bl	801377a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8011e96:	69bb      	ldr	r3, [r7, #24]
 8011e98:	68db      	ldr	r3, [r3, #12]
 8011e9a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8011e9c:	f107 030c 	add.w	r3, r7, #12
 8011ea0:	4618      	mov	r0, r3
 8011ea2:	f000 f825 	bl	8011ef0 <ip4_route>
 8011ea6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8011ea8:	693b      	ldr	r3, [r7, #16]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d011      	beq.n	8011ed2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8011eae:	697b      	ldr	r3, [r7, #20]
 8011eb0:	2200      	movs	r2, #0
 8011eb2:	709a      	strb	r2, [r3, #2]
 8011eb4:	2200      	movs	r2, #0
 8011eb6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8011eb8:	f107 020c 	add.w	r2, r7, #12
 8011ebc:	693b      	ldr	r3, [r7, #16]
 8011ebe:	9302      	str	r3, [sp, #8]
 8011ec0:	2301      	movs	r3, #1
 8011ec2:	9301      	str	r3, [sp, #4]
 8011ec4:	2300      	movs	r3, #0
 8011ec6:	9300      	str	r3, [sp, #0]
 8011ec8:	23ff      	movs	r3, #255	; 0xff
 8011eca:	2100      	movs	r1, #0
 8011ecc:	69f8      	ldr	r0, [r7, #28]
 8011ece:	f000 f9eb 	bl	80122a8 <ip4_output_if>
  }
  pbuf_free(q);
 8011ed2:	69f8      	ldr	r0, [r7, #28]
 8011ed4:	f7f6 fe64 	bl	8008ba0 <pbuf_free>
 8011ed8:	e000      	b.n	8011edc <icmp_send_response+0xc0>
    return;
 8011eda:	bf00      	nop
}
 8011edc:	3720      	adds	r7, #32
 8011ede:	46bd      	mov	sp, r7
 8011ee0:	bd80      	pop	{r7, pc}
 8011ee2:	bf00      	nop
 8011ee4:	08017180 	.word	0x08017180
 8011ee8:	0801724c 	.word	0x0801724c
 8011eec:	080171f0 	.word	0x080171f0

08011ef0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8011ef0:	b480      	push	{r7}
 8011ef2:	b085      	sub	sp, #20
 8011ef4:	af00      	add	r7, sp, #0
 8011ef6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8011ef8:	4b33      	ldr	r3, [pc, #204]	; (8011fc8 <ip4_route+0xd8>)
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	60fb      	str	r3, [r7, #12]
 8011efe:	e036      	b.n	8011f6e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011f06:	f003 0301 	and.w	r3, r3, #1
 8011f0a:	b2db      	uxtb	r3, r3
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d02b      	beq.n	8011f68 <ip4_route+0x78>
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011f16:	089b      	lsrs	r3, r3, #2
 8011f18:	f003 0301 	and.w	r3, r3, #1
 8011f1c:	b2db      	uxtb	r3, r3
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d022      	beq.n	8011f68 <ip4_route+0x78>
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	3304      	adds	r3, #4
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d01d      	beq.n	8011f68 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	681a      	ldr	r2, [r3, #0]
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	3304      	adds	r3, #4
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	405a      	eors	r2, r3
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	3308      	adds	r3, #8
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	4013      	ands	r3, r2
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d101      	bne.n	8011f48 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	e038      	b.n	8011fba <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011f4e:	f003 0302 	and.w	r3, r3, #2
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d108      	bne.n	8011f68 <ip4_route+0x78>
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	681a      	ldr	r2, [r3, #0]
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	330c      	adds	r3, #12
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	429a      	cmp	r2, r3
 8011f62:	d101      	bne.n	8011f68 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	e028      	b.n	8011fba <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	60fb      	str	r3, [r7, #12]
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d1c5      	bne.n	8011f00 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011f74:	4b15      	ldr	r3, [pc, #84]	; (8011fcc <ip4_route+0xdc>)
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d01a      	beq.n	8011fb2 <ip4_route+0xc2>
 8011f7c:	4b13      	ldr	r3, [pc, #76]	; (8011fcc <ip4_route+0xdc>)
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011f84:	f003 0301 	and.w	r3, r3, #1
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d012      	beq.n	8011fb2 <ip4_route+0xc2>
 8011f8c:	4b0f      	ldr	r3, [pc, #60]	; (8011fcc <ip4_route+0xdc>)
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011f94:	f003 0304 	and.w	r3, r3, #4
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d00a      	beq.n	8011fb2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011f9c:	4b0b      	ldr	r3, [pc, #44]	; (8011fcc <ip4_route+0xdc>)
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	3304      	adds	r3, #4
 8011fa2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d004      	beq.n	8011fb2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	b2db      	uxtb	r3, r3
 8011fae:	2b7f      	cmp	r3, #127	; 0x7f
 8011fb0:	d101      	bne.n	8011fb6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	e001      	b.n	8011fba <ip4_route+0xca>
  }

  return netif_default;
 8011fb6:	4b05      	ldr	r3, [pc, #20]	; (8011fcc <ip4_route+0xdc>)
 8011fb8:	681b      	ldr	r3, [r3, #0]
}
 8011fba:	4618      	mov	r0, r3
 8011fbc:	3714      	adds	r7, #20
 8011fbe:	46bd      	mov	sp, r7
 8011fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc4:	4770      	bx	lr
 8011fc6:	bf00      	nop
 8011fc8:	2000ef48 	.word	0x2000ef48
 8011fcc:	2000ef4c 	.word	0x2000ef4c

08011fd0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8011fd0:	b580      	push	{r7, lr}
 8011fd2:	b082      	sub	sp, #8
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011fde:	f003 0301 	and.w	r3, r3, #1
 8011fe2:	b2db      	uxtb	r3, r3
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d016      	beq.n	8012016 <ip4_input_accept+0x46>
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	3304      	adds	r3, #4
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d011      	beq.n	8012016 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011ff2:	4b0b      	ldr	r3, [pc, #44]	; (8012020 <ip4_input_accept+0x50>)
 8011ff4:	695a      	ldr	r2, [r3, #20]
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	3304      	adds	r3, #4
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	429a      	cmp	r2, r3
 8011ffe:	d008      	beq.n	8012012 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8012000:	4b07      	ldr	r3, [pc, #28]	; (8012020 <ip4_input_accept+0x50>)
 8012002:	695b      	ldr	r3, [r3, #20]
 8012004:	6879      	ldr	r1, [r7, #4]
 8012006:	4618      	mov	r0, r3
 8012008:	f000 fa26 	bl	8012458 <ip4_addr_isbroadcast_u32>
 801200c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801200e:	2b00      	cmp	r3, #0
 8012010:	d001      	beq.n	8012016 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8012012:	2301      	movs	r3, #1
 8012014:	e000      	b.n	8012018 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8012016:	2300      	movs	r3, #0
}
 8012018:	4618      	mov	r0, r3
 801201a:	3708      	adds	r7, #8
 801201c:	46bd      	mov	sp, r7
 801201e:	bd80      	pop	{r7, pc}
 8012020:	2000b824 	.word	0x2000b824

08012024 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8012024:	b580      	push	{r7, lr}
 8012026:	b088      	sub	sp, #32
 8012028:	af00      	add	r7, sp, #0
 801202a:	6078      	str	r0, [r7, #4]
 801202c:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801202e:	2301      	movs	r3, #1
 8012030:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	685b      	ldr	r3, [r3, #4]
 8012036:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8012038:	69fb      	ldr	r3, [r7, #28]
 801203a:	781b      	ldrb	r3, [r3, #0]
 801203c:	091b      	lsrs	r3, r3, #4
 801203e:	b2db      	uxtb	r3, r3
 8012040:	2b04      	cmp	r3, #4
 8012042:	d004      	beq.n	801204e <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8012044:	6878      	ldr	r0, [r7, #4]
 8012046:	f7f6 fdab 	bl	8008ba0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801204a:	2300      	movs	r3, #0
 801204c:	e123      	b.n	8012296 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801204e:	69fb      	ldr	r3, [r7, #28]
 8012050:	781b      	ldrb	r3, [r3, #0]
 8012052:	f003 030f 	and.w	r3, r3, #15
 8012056:	b2db      	uxtb	r3, r3
 8012058:	009b      	lsls	r3, r3, #2
 801205a:	b2db      	uxtb	r3, r3
 801205c:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801205e:	69fb      	ldr	r3, [r7, #28]
 8012060:	885b      	ldrh	r3, [r3, #2]
 8012062:	b29b      	uxth	r3, r3
 8012064:	4618      	mov	r0, r3
 8012066:	f7f5 f9e3 	bl	8007430 <lwip_htons>
 801206a:	4603      	mov	r3, r0
 801206c:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	891b      	ldrh	r3, [r3, #8]
 8012072:	8a3a      	ldrh	r2, [r7, #16]
 8012074:	429a      	cmp	r2, r3
 8012076:	d204      	bcs.n	8012082 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8012078:	8a3b      	ldrh	r3, [r7, #16]
 801207a:	4619      	mov	r1, r3
 801207c:	6878      	ldr	r0, [r7, #4]
 801207e:	f7f6 fc09 	bl	8008894 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	895b      	ldrh	r3, [r3, #10]
 8012086:	8a7a      	ldrh	r2, [r7, #18]
 8012088:	429a      	cmp	r2, r3
 801208a:	d807      	bhi.n	801209c <ip4_input+0x78>
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	891b      	ldrh	r3, [r3, #8]
 8012090:	8a3a      	ldrh	r2, [r7, #16]
 8012092:	429a      	cmp	r2, r3
 8012094:	d802      	bhi.n	801209c <ip4_input+0x78>
 8012096:	8a7b      	ldrh	r3, [r7, #18]
 8012098:	2b13      	cmp	r3, #19
 801209a:	d804      	bhi.n	80120a6 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801209c:	6878      	ldr	r0, [r7, #4]
 801209e:	f7f6 fd7f 	bl	8008ba0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80120a2:	2300      	movs	r3, #0
 80120a4:	e0f7      	b.n	8012296 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80120a6:	69fb      	ldr	r3, [r7, #28]
 80120a8:	691b      	ldr	r3, [r3, #16]
 80120aa:	4a7d      	ldr	r2, [pc, #500]	; (80122a0 <ip4_input+0x27c>)
 80120ac:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80120ae:	69fb      	ldr	r3, [r7, #28]
 80120b0:	68db      	ldr	r3, [r3, #12]
 80120b2:	4a7b      	ldr	r2, [pc, #492]	; (80122a0 <ip4_input+0x27c>)
 80120b4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80120b6:	4b7a      	ldr	r3, [pc, #488]	; (80122a0 <ip4_input+0x27c>)
 80120b8:	695b      	ldr	r3, [r3, #20]
 80120ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80120be:	2be0      	cmp	r3, #224	; 0xe0
 80120c0:	d112      	bne.n	80120e8 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80120c2:	683b      	ldr	r3, [r7, #0]
 80120c4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80120c8:	f003 0301 	and.w	r3, r3, #1
 80120cc:	b2db      	uxtb	r3, r3
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d007      	beq.n	80120e2 <ip4_input+0xbe>
 80120d2:	683b      	ldr	r3, [r7, #0]
 80120d4:	3304      	adds	r3, #4
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d002      	beq.n	80120e2 <ip4_input+0xbe>
      netif = inp;
 80120dc:	683b      	ldr	r3, [r7, #0]
 80120de:	61bb      	str	r3, [r7, #24]
 80120e0:	e02a      	b.n	8012138 <ip4_input+0x114>
    } else {
      netif = NULL;
 80120e2:	2300      	movs	r3, #0
 80120e4:	61bb      	str	r3, [r7, #24]
 80120e6:	e027      	b.n	8012138 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80120e8:	6838      	ldr	r0, [r7, #0]
 80120ea:	f7ff ff71 	bl	8011fd0 <ip4_input_accept>
 80120ee:	4603      	mov	r3, r0
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d002      	beq.n	80120fa <ip4_input+0xd6>
      netif = inp;
 80120f4:	683b      	ldr	r3, [r7, #0]
 80120f6:	61bb      	str	r3, [r7, #24]
 80120f8:	e01e      	b.n	8012138 <ip4_input+0x114>
    } else {
      netif = NULL;
 80120fa:	2300      	movs	r3, #0
 80120fc:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80120fe:	4b68      	ldr	r3, [pc, #416]	; (80122a0 <ip4_input+0x27c>)
 8012100:	695b      	ldr	r3, [r3, #20]
 8012102:	b2db      	uxtb	r3, r3
 8012104:	2b7f      	cmp	r3, #127	; 0x7f
 8012106:	d017      	beq.n	8012138 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8012108:	4b66      	ldr	r3, [pc, #408]	; (80122a4 <ip4_input+0x280>)
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	61bb      	str	r3, [r7, #24]
 801210e:	e00e      	b.n	801212e <ip4_input+0x10a>
          if (netif == inp) {
 8012110:	69ba      	ldr	r2, [r7, #24]
 8012112:	683b      	ldr	r3, [r7, #0]
 8012114:	429a      	cmp	r2, r3
 8012116:	d006      	beq.n	8012126 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8012118:	69b8      	ldr	r0, [r7, #24]
 801211a:	f7ff ff59 	bl	8011fd0 <ip4_input_accept>
 801211e:	4603      	mov	r3, r0
 8012120:	2b00      	cmp	r3, #0
 8012122:	d108      	bne.n	8012136 <ip4_input+0x112>
 8012124:	e000      	b.n	8012128 <ip4_input+0x104>
            continue;
 8012126:	bf00      	nop
        NETIF_FOREACH(netif) {
 8012128:	69bb      	ldr	r3, [r7, #24]
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	61bb      	str	r3, [r7, #24]
 801212e:	69bb      	ldr	r3, [r7, #24]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d1ed      	bne.n	8012110 <ip4_input+0xec>
 8012134:	e000      	b.n	8012138 <ip4_input+0x114>
            break;
 8012136:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8012138:	69bb      	ldr	r3, [r7, #24]
 801213a:	2b00      	cmp	r3, #0
 801213c:	d111      	bne.n	8012162 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801213e:	69fb      	ldr	r3, [r7, #28]
 8012140:	7a5b      	ldrb	r3, [r3, #9]
 8012142:	2b11      	cmp	r3, #17
 8012144:	d10d      	bne.n	8012162 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8012146:	8a7b      	ldrh	r3, [r7, #18]
 8012148:	69fa      	ldr	r2, [r7, #28]
 801214a:	4413      	add	r3, r2
 801214c:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	885b      	ldrh	r3, [r3, #2]
 8012152:	b29b      	uxth	r3, r3
 8012154:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8012158:	d103      	bne.n	8012162 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801215a:	683b      	ldr	r3, [r7, #0]
 801215c:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801215e:	2300      	movs	r3, #0
 8012160:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8012162:	697b      	ldr	r3, [r7, #20]
 8012164:	2b00      	cmp	r3, #0
 8012166:	d017      	beq.n	8012198 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8012168:	4b4d      	ldr	r3, [pc, #308]	; (80122a0 <ip4_input+0x27c>)
 801216a:	691b      	ldr	r3, [r3, #16]
 801216c:	2b00      	cmp	r3, #0
 801216e:	d013      	beq.n	8012198 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012170:	4b4b      	ldr	r3, [pc, #300]	; (80122a0 <ip4_input+0x27c>)
 8012172:	691b      	ldr	r3, [r3, #16]
 8012174:	6839      	ldr	r1, [r7, #0]
 8012176:	4618      	mov	r0, r3
 8012178:	f000 f96e 	bl	8012458 <ip4_addr_isbroadcast_u32>
 801217c:	4603      	mov	r3, r0
 801217e:	2b00      	cmp	r3, #0
 8012180:	d105      	bne.n	801218e <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8012182:	4b47      	ldr	r3, [pc, #284]	; (80122a0 <ip4_input+0x27c>)
 8012184:	691b      	ldr	r3, [r3, #16]
 8012186:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801218a:	2be0      	cmp	r3, #224	; 0xe0
 801218c:	d104      	bne.n	8012198 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801218e:	6878      	ldr	r0, [r7, #4]
 8012190:	f7f6 fd06 	bl	8008ba0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8012194:	2300      	movs	r3, #0
 8012196:	e07e      	b.n	8012296 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8012198:	69bb      	ldr	r3, [r7, #24]
 801219a:	2b00      	cmp	r3, #0
 801219c:	d104      	bne.n	80121a8 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801219e:	6878      	ldr	r0, [r7, #4]
 80121a0:	f7f6 fcfe 	bl	8008ba0 <pbuf_free>
    return ERR_OK;
 80121a4:	2300      	movs	r3, #0
 80121a6:	e076      	b.n	8012296 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80121a8:	69fb      	ldr	r3, [r7, #28]
 80121aa:	88db      	ldrh	r3, [r3, #6]
 80121ac:	b29b      	uxth	r3, r3
 80121ae:	461a      	mov	r2, r3
 80121b0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80121b4:	4013      	ands	r3, r2
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d00b      	beq.n	80121d2 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80121ba:	6878      	ldr	r0, [r7, #4]
 80121bc:	f000 fc92 	bl	8012ae4 <ip4_reass>
 80121c0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d101      	bne.n	80121cc <ip4_input+0x1a8>
      return ERR_OK;
 80121c8:	2300      	movs	r3, #0
 80121ca:	e064      	b.n	8012296 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	685b      	ldr	r3, [r3, #4]
 80121d0:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80121d2:	4a33      	ldr	r2, [pc, #204]	; (80122a0 <ip4_input+0x27c>)
 80121d4:	69bb      	ldr	r3, [r7, #24]
 80121d6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80121d8:	4a31      	ldr	r2, [pc, #196]	; (80122a0 <ip4_input+0x27c>)
 80121da:	683b      	ldr	r3, [r7, #0]
 80121dc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80121de:	4a30      	ldr	r2, [pc, #192]	; (80122a0 <ip4_input+0x27c>)
 80121e0:	69fb      	ldr	r3, [r7, #28]
 80121e2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80121e4:	69fb      	ldr	r3, [r7, #28]
 80121e6:	781b      	ldrb	r3, [r3, #0]
 80121e8:	f003 030f 	and.w	r3, r3, #15
 80121ec:	b2db      	uxtb	r3, r3
 80121ee:	009b      	lsls	r3, r3, #2
 80121f0:	b2db      	uxtb	r3, r3
 80121f2:	b29a      	uxth	r2, r3
 80121f4:	4b2a      	ldr	r3, [pc, #168]	; (80122a0 <ip4_input+0x27c>)
 80121f6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80121f8:	8a7b      	ldrh	r3, [r7, #18]
 80121fa:	4619      	mov	r1, r3
 80121fc:	6878      	ldr	r0, [r7, #4]
 80121fe:	f7f6 fc49 	bl	8008a94 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8012202:	69fb      	ldr	r3, [r7, #28]
 8012204:	7a5b      	ldrb	r3, [r3, #9]
 8012206:	2b11      	cmp	r3, #17
 8012208:	d006      	beq.n	8012218 <ip4_input+0x1f4>
 801220a:	2b11      	cmp	r3, #17
 801220c:	dc13      	bgt.n	8012236 <ip4_input+0x212>
 801220e:	2b01      	cmp	r3, #1
 8012210:	d00c      	beq.n	801222c <ip4_input+0x208>
 8012212:	2b06      	cmp	r3, #6
 8012214:	d005      	beq.n	8012222 <ip4_input+0x1fe>
 8012216:	e00e      	b.n	8012236 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8012218:	6839      	ldr	r1, [r7, #0]
 801221a:	6878      	ldr	r0, [r7, #4]
 801221c:	f7fc faea 	bl	800e7f4 <udp_input>
        break;
 8012220:	e026      	b.n	8012270 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8012222:	6839      	ldr	r1, [r7, #0]
 8012224:	6878      	ldr	r0, [r7, #4]
 8012226:	f7f8 faff 	bl	800a828 <tcp_input>
        break;
 801222a:	e021      	b.n	8012270 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801222c:	6839      	ldr	r1, [r7, #0]
 801222e:	6878      	ldr	r0, [r7, #4]
 8012230:	f7ff fcd0 	bl	8011bd4 <icmp_input>
        break;
 8012234:	e01c      	b.n	8012270 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012236:	4b1a      	ldr	r3, [pc, #104]	; (80122a0 <ip4_input+0x27c>)
 8012238:	695b      	ldr	r3, [r3, #20]
 801223a:	69b9      	ldr	r1, [r7, #24]
 801223c:	4618      	mov	r0, r3
 801223e:	f000 f90b 	bl	8012458 <ip4_addr_isbroadcast_u32>
 8012242:	4603      	mov	r3, r0
 8012244:	2b00      	cmp	r3, #0
 8012246:	d10f      	bne.n	8012268 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012248:	4b15      	ldr	r3, [pc, #84]	; (80122a0 <ip4_input+0x27c>)
 801224a:	695b      	ldr	r3, [r3, #20]
 801224c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012250:	2be0      	cmp	r3, #224	; 0xe0
 8012252:	d009      	beq.n	8012268 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8012254:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012258:	4619      	mov	r1, r3
 801225a:	6878      	ldr	r0, [r7, #4]
 801225c:	f7f6 fc8d 	bl	8008b7a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8012260:	2102      	movs	r1, #2
 8012262:	6878      	ldr	r0, [r7, #4]
 8012264:	f7ff fdba 	bl	8011ddc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8012268:	6878      	ldr	r0, [r7, #4]
 801226a:	f7f6 fc99 	bl	8008ba0 <pbuf_free>
        break;
 801226e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8012270:	4b0b      	ldr	r3, [pc, #44]	; (80122a0 <ip4_input+0x27c>)
 8012272:	2200      	movs	r2, #0
 8012274:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8012276:	4b0a      	ldr	r3, [pc, #40]	; (80122a0 <ip4_input+0x27c>)
 8012278:	2200      	movs	r2, #0
 801227a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801227c:	4b08      	ldr	r3, [pc, #32]	; (80122a0 <ip4_input+0x27c>)
 801227e:	2200      	movs	r2, #0
 8012280:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8012282:	4b07      	ldr	r3, [pc, #28]	; (80122a0 <ip4_input+0x27c>)
 8012284:	2200      	movs	r2, #0
 8012286:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8012288:	4b05      	ldr	r3, [pc, #20]	; (80122a0 <ip4_input+0x27c>)
 801228a:	2200      	movs	r2, #0
 801228c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801228e:	4b04      	ldr	r3, [pc, #16]	; (80122a0 <ip4_input+0x27c>)
 8012290:	2200      	movs	r2, #0
 8012292:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8012294:	2300      	movs	r3, #0
}
 8012296:	4618      	mov	r0, r3
 8012298:	3720      	adds	r7, #32
 801229a:	46bd      	mov	sp, r7
 801229c:	bd80      	pop	{r7, pc}
 801229e:	bf00      	nop
 80122a0:	2000b824 	.word	0x2000b824
 80122a4:	2000ef48 	.word	0x2000ef48

080122a8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80122a8:	b580      	push	{r7, lr}
 80122aa:	b08a      	sub	sp, #40	; 0x28
 80122ac:	af04      	add	r7, sp, #16
 80122ae:	60f8      	str	r0, [r7, #12]
 80122b0:	60b9      	str	r1, [r7, #8]
 80122b2:	607a      	str	r2, [r7, #4]
 80122b4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80122b6:	68bb      	ldr	r3, [r7, #8]
 80122b8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d009      	beq.n	80122d4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80122c0:	68bb      	ldr	r3, [r7, #8]
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d003      	beq.n	80122ce <ip4_output_if+0x26>
 80122c6:	68bb      	ldr	r3, [r7, #8]
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d102      	bne.n	80122d4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80122ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122d0:	3304      	adds	r3, #4
 80122d2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80122d4:	78fa      	ldrb	r2, [r7, #3]
 80122d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122d8:	9302      	str	r3, [sp, #8]
 80122da:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80122de:	9301      	str	r3, [sp, #4]
 80122e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80122e4:	9300      	str	r3, [sp, #0]
 80122e6:	4613      	mov	r3, r2
 80122e8:	687a      	ldr	r2, [r7, #4]
 80122ea:	6979      	ldr	r1, [r7, #20]
 80122ec:	68f8      	ldr	r0, [r7, #12]
 80122ee:	f000 f805 	bl	80122fc <ip4_output_if_src>
 80122f2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80122f4:	4618      	mov	r0, r3
 80122f6:	3718      	adds	r7, #24
 80122f8:	46bd      	mov	sp, r7
 80122fa:	bd80      	pop	{r7, pc}

080122fc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80122fc:	b580      	push	{r7, lr}
 80122fe:	b088      	sub	sp, #32
 8012300:	af00      	add	r7, sp, #0
 8012302:	60f8      	str	r0, [r7, #12]
 8012304:	60b9      	str	r1, [r7, #8]
 8012306:	607a      	str	r2, [r7, #4]
 8012308:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	7b9b      	ldrb	r3, [r3, #14]
 801230e:	2b01      	cmp	r3, #1
 8012310:	d006      	beq.n	8012320 <ip4_output_if_src+0x24>
 8012312:	4b4b      	ldr	r3, [pc, #300]	; (8012440 <ip4_output_if_src+0x144>)
 8012314:	f44f 7255 	mov.w	r2, #852	; 0x354
 8012318:	494a      	ldr	r1, [pc, #296]	; (8012444 <ip4_output_if_src+0x148>)
 801231a:	484b      	ldr	r0, [pc, #300]	; (8012448 <ip4_output_if_src+0x14c>)
 801231c:	f001 fa9e 	bl	801385c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	2b00      	cmp	r3, #0
 8012324:	d060      	beq.n	80123e8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8012326:	2314      	movs	r3, #20
 8012328:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801232a:	2114      	movs	r1, #20
 801232c:	68f8      	ldr	r0, [r7, #12]
 801232e:	f7f6 fba1 	bl	8008a74 <pbuf_add_header>
 8012332:	4603      	mov	r3, r0
 8012334:	2b00      	cmp	r3, #0
 8012336:	d002      	beq.n	801233e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012338:	f06f 0301 	mvn.w	r3, #1
 801233c:	e07c      	b.n	8012438 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	685b      	ldr	r3, [r3, #4]
 8012342:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	895b      	ldrh	r3, [r3, #10]
 8012348:	2b13      	cmp	r3, #19
 801234a:	d806      	bhi.n	801235a <ip4_output_if_src+0x5e>
 801234c:	4b3c      	ldr	r3, [pc, #240]	; (8012440 <ip4_output_if_src+0x144>)
 801234e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8012352:	493e      	ldr	r1, [pc, #248]	; (801244c <ip4_output_if_src+0x150>)
 8012354:	483c      	ldr	r0, [pc, #240]	; (8012448 <ip4_output_if_src+0x14c>)
 8012356:	f001 fa81 	bl	801385c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801235a:	69fb      	ldr	r3, [r7, #28]
 801235c:	78fa      	ldrb	r2, [r7, #3]
 801235e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8012360:	69fb      	ldr	r3, [r7, #28]
 8012362:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8012366:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	681a      	ldr	r2, [r3, #0]
 801236c:	69fb      	ldr	r3, [r7, #28]
 801236e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8012370:	8b7b      	ldrh	r3, [r7, #26]
 8012372:	089b      	lsrs	r3, r3, #2
 8012374:	b29b      	uxth	r3, r3
 8012376:	b2db      	uxtb	r3, r3
 8012378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801237c:	b2da      	uxtb	r2, r3
 801237e:	69fb      	ldr	r3, [r7, #28]
 8012380:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8012382:	69fb      	ldr	r3, [r7, #28]
 8012384:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012388:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	891b      	ldrh	r3, [r3, #8]
 801238e:	4618      	mov	r0, r3
 8012390:	f7f5 f84e 	bl	8007430 <lwip_htons>
 8012394:	4603      	mov	r3, r0
 8012396:	461a      	mov	r2, r3
 8012398:	69fb      	ldr	r3, [r7, #28]
 801239a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801239c:	69fb      	ldr	r3, [r7, #28]
 801239e:	2200      	movs	r2, #0
 80123a0:	719a      	strb	r2, [r3, #6]
 80123a2:	2200      	movs	r2, #0
 80123a4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80123a6:	4b2a      	ldr	r3, [pc, #168]	; (8012450 <ip4_output_if_src+0x154>)
 80123a8:	881b      	ldrh	r3, [r3, #0]
 80123aa:	4618      	mov	r0, r3
 80123ac:	f7f5 f840 	bl	8007430 <lwip_htons>
 80123b0:	4603      	mov	r3, r0
 80123b2:	461a      	mov	r2, r3
 80123b4:	69fb      	ldr	r3, [r7, #28]
 80123b6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80123b8:	4b25      	ldr	r3, [pc, #148]	; (8012450 <ip4_output_if_src+0x154>)
 80123ba:	881b      	ldrh	r3, [r3, #0]
 80123bc:	3301      	adds	r3, #1
 80123be:	b29a      	uxth	r2, r3
 80123c0:	4b23      	ldr	r3, [pc, #140]	; (8012450 <ip4_output_if_src+0x154>)
 80123c2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80123c4:	68bb      	ldr	r3, [r7, #8]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d104      	bne.n	80123d4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80123ca:	4b22      	ldr	r3, [pc, #136]	; (8012454 <ip4_output_if_src+0x158>)
 80123cc:	681a      	ldr	r2, [r3, #0]
 80123ce:	69fb      	ldr	r3, [r7, #28]
 80123d0:	60da      	str	r2, [r3, #12]
 80123d2:	e003      	b.n	80123dc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80123d4:	68bb      	ldr	r3, [r7, #8]
 80123d6:	681a      	ldr	r2, [r3, #0]
 80123d8:	69fb      	ldr	r3, [r7, #28]
 80123da:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80123dc:	69fb      	ldr	r3, [r7, #28]
 80123de:	2200      	movs	r2, #0
 80123e0:	729a      	strb	r2, [r3, #10]
 80123e2:	2200      	movs	r2, #0
 80123e4:	72da      	strb	r2, [r3, #11]
 80123e6:	e00f      	b.n	8012408 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	895b      	ldrh	r3, [r3, #10]
 80123ec:	2b13      	cmp	r3, #19
 80123ee:	d802      	bhi.n	80123f6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80123f0:	f06f 0301 	mvn.w	r3, #1
 80123f4:	e020      	b.n	8012438 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	685b      	ldr	r3, [r3, #4]
 80123fa:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80123fc:	69fb      	ldr	r3, [r7, #28]
 80123fe:	691b      	ldr	r3, [r3, #16]
 8012400:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8012402:	f107 0314 	add.w	r3, r7, #20
 8012406:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8012408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801240a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801240c:	2b00      	cmp	r3, #0
 801240e:	d00c      	beq.n	801242a <ip4_output_if_src+0x12e>
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	891a      	ldrh	r2, [r3, #8]
 8012414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012418:	429a      	cmp	r2, r3
 801241a:	d906      	bls.n	801242a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801241c:	687a      	ldr	r2, [r7, #4]
 801241e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012420:	68f8      	ldr	r0, [r7, #12]
 8012422:	f000 fd4d 	bl	8012ec0 <ip4_frag>
 8012426:	4603      	mov	r3, r0
 8012428:	e006      	b.n	8012438 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801242a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801242c:	695b      	ldr	r3, [r3, #20]
 801242e:	687a      	ldr	r2, [r7, #4]
 8012430:	68f9      	ldr	r1, [r7, #12]
 8012432:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012434:	4798      	blx	r3
 8012436:	4603      	mov	r3, r0
}
 8012438:	4618      	mov	r0, r3
 801243a:	3720      	adds	r7, #32
 801243c:	46bd      	mov	sp, r7
 801243e:	bd80      	pop	{r7, pc}
 8012440:	08017278 	.word	0x08017278
 8012444:	080172ac 	.word	0x080172ac
 8012448:	080172b8 	.word	0x080172b8
 801244c:	080172e0 	.word	0x080172e0
 8012450:	20008646 	.word	0x20008646
 8012454:	08017704 	.word	0x08017704

08012458 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8012458:	b480      	push	{r7}
 801245a:	b085      	sub	sp, #20
 801245c:	af00      	add	r7, sp, #0
 801245e:	6078      	str	r0, [r7, #4]
 8012460:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	f1b3 3fff 	cmp.w	r3, #4294967295
 801246c:	d002      	beq.n	8012474 <ip4_addr_isbroadcast_u32+0x1c>
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	2b00      	cmp	r3, #0
 8012472:	d101      	bne.n	8012478 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8012474:	2301      	movs	r3, #1
 8012476:	e02a      	b.n	80124ce <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8012478:	683b      	ldr	r3, [r7, #0]
 801247a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801247e:	f003 0302 	and.w	r3, r3, #2
 8012482:	2b00      	cmp	r3, #0
 8012484:	d101      	bne.n	801248a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8012486:	2300      	movs	r3, #0
 8012488:	e021      	b.n	80124ce <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801248a:	683b      	ldr	r3, [r7, #0]
 801248c:	3304      	adds	r3, #4
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	687a      	ldr	r2, [r7, #4]
 8012492:	429a      	cmp	r2, r3
 8012494:	d101      	bne.n	801249a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8012496:	2300      	movs	r3, #0
 8012498:	e019      	b.n	80124ce <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801249a:	68fa      	ldr	r2, [r7, #12]
 801249c:	683b      	ldr	r3, [r7, #0]
 801249e:	3304      	adds	r3, #4
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	405a      	eors	r2, r3
 80124a4:	683b      	ldr	r3, [r7, #0]
 80124a6:	3308      	adds	r3, #8
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	4013      	ands	r3, r2
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d10d      	bne.n	80124cc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80124b0:	683b      	ldr	r3, [r7, #0]
 80124b2:	3308      	adds	r3, #8
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	43da      	mvns	r2, r3
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80124bc:	683b      	ldr	r3, [r7, #0]
 80124be:	3308      	adds	r3, #8
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80124c4:	429a      	cmp	r2, r3
 80124c6:	d101      	bne.n	80124cc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80124c8:	2301      	movs	r3, #1
 80124ca:	e000      	b.n	80124ce <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80124cc:	2300      	movs	r3, #0
  }
}
 80124ce:	4618      	mov	r0, r3
 80124d0:	3714      	adds	r7, #20
 80124d2:	46bd      	mov	sp, r7
 80124d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124d8:	4770      	bx	lr
	...

080124dc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80124dc:	b580      	push	{r7, lr}
 80124de:	b084      	sub	sp, #16
 80124e0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80124e2:	2300      	movs	r3, #0
 80124e4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80124e6:	4b12      	ldr	r3, [pc, #72]	; (8012530 <ip_reass_tmr+0x54>)
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80124ec:	e018      	b.n	8012520 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	7fdb      	ldrb	r3, [r3, #31]
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d00b      	beq.n	801250e <ip_reass_tmr+0x32>
      r->timer--;
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	7fdb      	ldrb	r3, [r3, #31]
 80124fa:	3b01      	subs	r3, #1
 80124fc:	b2da      	uxtb	r2, r3
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	60fb      	str	r3, [r7, #12]
 801250c:	e008      	b.n	8012520 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8012518:	68b9      	ldr	r1, [r7, #8]
 801251a:	6878      	ldr	r0, [r7, #4]
 801251c:	f000 f80a 	bl	8012534 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	2b00      	cmp	r3, #0
 8012524:	d1e3      	bne.n	80124ee <ip_reass_tmr+0x12>
    }
  }
}
 8012526:	bf00      	nop
 8012528:	bf00      	nop
 801252a:	3710      	adds	r7, #16
 801252c:	46bd      	mov	sp, r7
 801252e:	bd80      	pop	{r7, pc}
 8012530:	20008648 	.word	0x20008648

08012534 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012534:	b580      	push	{r7, lr}
 8012536:	b088      	sub	sp, #32
 8012538:	af00      	add	r7, sp, #0
 801253a:	6078      	str	r0, [r7, #4]
 801253c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801253e:	2300      	movs	r3, #0
 8012540:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8012542:	683a      	ldr	r2, [r7, #0]
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	429a      	cmp	r2, r3
 8012548:	d105      	bne.n	8012556 <ip_reass_free_complete_datagram+0x22>
 801254a:	4b45      	ldr	r3, [pc, #276]	; (8012660 <ip_reass_free_complete_datagram+0x12c>)
 801254c:	22ab      	movs	r2, #171	; 0xab
 801254e:	4945      	ldr	r1, [pc, #276]	; (8012664 <ip_reass_free_complete_datagram+0x130>)
 8012550:	4845      	ldr	r0, [pc, #276]	; (8012668 <ip_reass_free_complete_datagram+0x134>)
 8012552:	f001 f983 	bl	801385c <iprintf>
  if (prev != NULL) {
 8012556:	683b      	ldr	r3, [r7, #0]
 8012558:	2b00      	cmp	r3, #0
 801255a:	d00a      	beq.n	8012572 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801255c:	683b      	ldr	r3, [r7, #0]
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	687a      	ldr	r2, [r7, #4]
 8012562:	429a      	cmp	r2, r3
 8012564:	d005      	beq.n	8012572 <ip_reass_free_complete_datagram+0x3e>
 8012566:	4b3e      	ldr	r3, [pc, #248]	; (8012660 <ip_reass_free_complete_datagram+0x12c>)
 8012568:	22ad      	movs	r2, #173	; 0xad
 801256a:	4940      	ldr	r1, [pc, #256]	; (801266c <ip_reass_free_complete_datagram+0x138>)
 801256c:	483e      	ldr	r0, [pc, #248]	; (8012668 <ip_reass_free_complete_datagram+0x134>)
 801256e:	f001 f975 	bl	801385c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	685b      	ldr	r3, [r3, #4]
 8012576:	685b      	ldr	r3, [r3, #4]
 8012578:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801257a:	697b      	ldr	r3, [r7, #20]
 801257c:	889b      	ldrh	r3, [r3, #4]
 801257e:	b29b      	uxth	r3, r3
 8012580:	2b00      	cmp	r3, #0
 8012582:	d12a      	bne.n	80125da <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	685b      	ldr	r3, [r3, #4]
 8012588:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801258a:	697b      	ldr	r3, [r7, #20]
 801258c:	681a      	ldr	r2, [r3, #0]
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8012592:	69bb      	ldr	r3, [r7, #24]
 8012594:	6858      	ldr	r0, [r3, #4]
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	3308      	adds	r3, #8
 801259a:	2214      	movs	r2, #20
 801259c:	4619      	mov	r1, r3
 801259e:	f001 f8ec 	bl	801377a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80125a2:	2101      	movs	r1, #1
 80125a4:	69b8      	ldr	r0, [r7, #24]
 80125a6:	f7ff fc29 	bl	8011dfc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80125aa:	69b8      	ldr	r0, [r7, #24]
 80125ac:	f7f6 fb86 	bl	8008cbc <pbuf_clen>
 80125b0:	4603      	mov	r3, r0
 80125b2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80125b4:	8bfa      	ldrh	r2, [r7, #30]
 80125b6:	8a7b      	ldrh	r3, [r7, #18]
 80125b8:	4413      	add	r3, r2
 80125ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80125be:	db05      	blt.n	80125cc <ip_reass_free_complete_datagram+0x98>
 80125c0:	4b27      	ldr	r3, [pc, #156]	; (8012660 <ip_reass_free_complete_datagram+0x12c>)
 80125c2:	22bc      	movs	r2, #188	; 0xbc
 80125c4:	492a      	ldr	r1, [pc, #168]	; (8012670 <ip_reass_free_complete_datagram+0x13c>)
 80125c6:	4828      	ldr	r0, [pc, #160]	; (8012668 <ip_reass_free_complete_datagram+0x134>)
 80125c8:	f001 f948 	bl	801385c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80125cc:	8bfa      	ldrh	r2, [r7, #30]
 80125ce:	8a7b      	ldrh	r3, [r7, #18]
 80125d0:	4413      	add	r3, r2
 80125d2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80125d4:	69b8      	ldr	r0, [r7, #24]
 80125d6:	f7f6 fae3 	bl	8008ba0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	685b      	ldr	r3, [r3, #4]
 80125de:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80125e0:	e01f      	b.n	8012622 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80125e2:	69bb      	ldr	r3, [r7, #24]
 80125e4:	685b      	ldr	r3, [r3, #4]
 80125e6:	617b      	str	r3, [r7, #20]
    pcur = p;
 80125e8:	69bb      	ldr	r3, [r7, #24]
 80125ea:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80125ec:	697b      	ldr	r3, [r7, #20]
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80125f2:	68f8      	ldr	r0, [r7, #12]
 80125f4:	f7f6 fb62 	bl	8008cbc <pbuf_clen>
 80125f8:	4603      	mov	r3, r0
 80125fa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80125fc:	8bfa      	ldrh	r2, [r7, #30]
 80125fe:	8a7b      	ldrh	r3, [r7, #18]
 8012600:	4413      	add	r3, r2
 8012602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012606:	db05      	blt.n	8012614 <ip_reass_free_complete_datagram+0xe0>
 8012608:	4b15      	ldr	r3, [pc, #84]	; (8012660 <ip_reass_free_complete_datagram+0x12c>)
 801260a:	22cc      	movs	r2, #204	; 0xcc
 801260c:	4918      	ldr	r1, [pc, #96]	; (8012670 <ip_reass_free_complete_datagram+0x13c>)
 801260e:	4816      	ldr	r0, [pc, #88]	; (8012668 <ip_reass_free_complete_datagram+0x134>)
 8012610:	f001 f924 	bl	801385c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012614:	8bfa      	ldrh	r2, [r7, #30]
 8012616:	8a7b      	ldrh	r3, [r7, #18]
 8012618:	4413      	add	r3, r2
 801261a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801261c:	68f8      	ldr	r0, [r7, #12]
 801261e:	f7f6 fabf 	bl	8008ba0 <pbuf_free>
  while (p != NULL) {
 8012622:	69bb      	ldr	r3, [r7, #24]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d1dc      	bne.n	80125e2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8012628:	6839      	ldr	r1, [r7, #0]
 801262a:	6878      	ldr	r0, [r7, #4]
 801262c:	f000 f8c2 	bl	80127b4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8012630:	4b10      	ldr	r3, [pc, #64]	; (8012674 <ip_reass_free_complete_datagram+0x140>)
 8012632:	881b      	ldrh	r3, [r3, #0]
 8012634:	8bfa      	ldrh	r2, [r7, #30]
 8012636:	429a      	cmp	r2, r3
 8012638:	d905      	bls.n	8012646 <ip_reass_free_complete_datagram+0x112>
 801263a:	4b09      	ldr	r3, [pc, #36]	; (8012660 <ip_reass_free_complete_datagram+0x12c>)
 801263c:	22d2      	movs	r2, #210	; 0xd2
 801263e:	490e      	ldr	r1, [pc, #56]	; (8012678 <ip_reass_free_complete_datagram+0x144>)
 8012640:	4809      	ldr	r0, [pc, #36]	; (8012668 <ip_reass_free_complete_datagram+0x134>)
 8012642:	f001 f90b 	bl	801385c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8012646:	4b0b      	ldr	r3, [pc, #44]	; (8012674 <ip_reass_free_complete_datagram+0x140>)
 8012648:	881a      	ldrh	r2, [r3, #0]
 801264a:	8bfb      	ldrh	r3, [r7, #30]
 801264c:	1ad3      	subs	r3, r2, r3
 801264e:	b29a      	uxth	r2, r3
 8012650:	4b08      	ldr	r3, [pc, #32]	; (8012674 <ip_reass_free_complete_datagram+0x140>)
 8012652:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8012654:	8bfb      	ldrh	r3, [r7, #30]
}
 8012656:	4618      	mov	r0, r3
 8012658:	3720      	adds	r7, #32
 801265a:	46bd      	mov	sp, r7
 801265c:	bd80      	pop	{r7, pc}
 801265e:	bf00      	nop
 8012660:	08017310 	.word	0x08017310
 8012664:	0801734c 	.word	0x0801734c
 8012668:	08017358 	.word	0x08017358
 801266c:	08017380 	.word	0x08017380
 8012670:	08017394 	.word	0x08017394
 8012674:	2000864c 	.word	0x2000864c
 8012678:	080173b4 	.word	0x080173b4

0801267c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801267c:	b580      	push	{r7, lr}
 801267e:	b08a      	sub	sp, #40	; 0x28
 8012680:	af00      	add	r7, sp, #0
 8012682:	6078      	str	r0, [r7, #4]
 8012684:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8012686:	2300      	movs	r3, #0
 8012688:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801268a:	2300      	movs	r3, #0
 801268c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801268e:	2300      	movs	r3, #0
 8012690:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8012692:	2300      	movs	r3, #0
 8012694:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8012696:	2300      	movs	r3, #0
 8012698:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801269a:	4b28      	ldr	r3, [pc, #160]	; (801273c <ip_reass_remove_oldest_datagram+0xc0>)
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80126a0:	e030      	b.n	8012704 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80126a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126a4:	695a      	ldr	r2, [r3, #20]
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	68db      	ldr	r3, [r3, #12]
 80126aa:	429a      	cmp	r2, r3
 80126ac:	d10c      	bne.n	80126c8 <ip_reass_remove_oldest_datagram+0x4c>
 80126ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126b0:	699a      	ldr	r2, [r3, #24]
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	691b      	ldr	r3, [r3, #16]
 80126b6:	429a      	cmp	r2, r3
 80126b8:	d106      	bne.n	80126c8 <ip_reass_remove_oldest_datagram+0x4c>
 80126ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126bc:	899a      	ldrh	r2, [r3, #12]
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	889b      	ldrh	r3, [r3, #4]
 80126c2:	b29b      	uxth	r3, r3
 80126c4:	429a      	cmp	r2, r3
 80126c6:	d014      	beq.n	80126f2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80126c8:	693b      	ldr	r3, [r7, #16]
 80126ca:	3301      	adds	r3, #1
 80126cc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80126ce:	6a3b      	ldr	r3, [r7, #32]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d104      	bne.n	80126de <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80126d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126d6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80126d8:	69fb      	ldr	r3, [r7, #28]
 80126da:	61bb      	str	r3, [r7, #24]
 80126dc:	e009      	b.n	80126f2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80126de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126e0:	7fda      	ldrb	r2, [r3, #31]
 80126e2:	6a3b      	ldr	r3, [r7, #32]
 80126e4:	7fdb      	ldrb	r3, [r3, #31]
 80126e6:	429a      	cmp	r2, r3
 80126e8:	d803      	bhi.n	80126f2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80126ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126ec:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80126ee:	69fb      	ldr	r3, [r7, #28]
 80126f0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80126f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d001      	beq.n	80126fe <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80126fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126fc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80126fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012706:	2b00      	cmp	r3, #0
 8012708:	d1cb      	bne.n	80126a2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801270a:	6a3b      	ldr	r3, [r7, #32]
 801270c:	2b00      	cmp	r3, #0
 801270e:	d008      	beq.n	8012722 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8012710:	69b9      	ldr	r1, [r7, #24]
 8012712:	6a38      	ldr	r0, [r7, #32]
 8012714:	f7ff ff0e 	bl	8012534 <ip_reass_free_complete_datagram>
 8012718:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801271a:	697a      	ldr	r2, [r7, #20]
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	4413      	add	r3, r2
 8012720:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8012722:	697a      	ldr	r2, [r7, #20]
 8012724:	683b      	ldr	r3, [r7, #0]
 8012726:	429a      	cmp	r2, r3
 8012728:	da02      	bge.n	8012730 <ip_reass_remove_oldest_datagram+0xb4>
 801272a:	693b      	ldr	r3, [r7, #16]
 801272c:	2b01      	cmp	r3, #1
 801272e:	dcac      	bgt.n	801268a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8012730:	697b      	ldr	r3, [r7, #20]
}
 8012732:	4618      	mov	r0, r3
 8012734:	3728      	adds	r7, #40	; 0x28
 8012736:	46bd      	mov	sp, r7
 8012738:	bd80      	pop	{r7, pc}
 801273a:	bf00      	nop
 801273c:	20008648 	.word	0x20008648

08012740 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8012740:	b580      	push	{r7, lr}
 8012742:	b084      	sub	sp, #16
 8012744:	af00      	add	r7, sp, #0
 8012746:	6078      	str	r0, [r7, #4]
 8012748:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801274a:	2004      	movs	r0, #4
 801274c:	f7f5 fb26 	bl	8007d9c <memp_malloc>
 8012750:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d110      	bne.n	801277a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8012758:	6839      	ldr	r1, [r7, #0]
 801275a:	6878      	ldr	r0, [r7, #4]
 801275c:	f7ff ff8e 	bl	801267c <ip_reass_remove_oldest_datagram>
 8012760:	4602      	mov	r2, r0
 8012762:	683b      	ldr	r3, [r7, #0]
 8012764:	4293      	cmp	r3, r2
 8012766:	dc03      	bgt.n	8012770 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012768:	2004      	movs	r0, #4
 801276a:	f7f5 fb17 	bl	8007d9c <memp_malloc>
 801276e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	2b00      	cmp	r3, #0
 8012774:	d101      	bne.n	801277a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8012776:	2300      	movs	r3, #0
 8012778:	e016      	b.n	80127a8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801277a:	2220      	movs	r2, #32
 801277c:	2100      	movs	r1, #0
 801277e:	68f8      	ldr	r0, [r7, #12]
 8012780:	f001 f809 	bl	8013796 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	220f      	movs	r2, #15
 8012788:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801278a:	4b09      	ldr	r3, [pc, #36]	; (80127b0 <ip_reass_enqueue_new_datagram+0x70>)
 801278c:	681a      	ldr	r2, [r3, #0]
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8012792:	4a07      	ldr	r2, [pc, #28]	; (80127b0 <ip_reass_enqueue_new_datagram+0x70>)
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	3308      	adds	r3, #8
 801279c:	2214      	movs	r2, #20
 801279e:	6879      	ldr	r1, [r7, #4]
 80127a0:	4618      	mov	r0, r3
 80127a2:	f000 ffea 	bl	801377a <memcpy>
  return ipr;
 80127a6:	68fb      	ldr	r3, [r7, #12]
}
 80127a8:	4618      	mov	r0, r3
 80127aa:	3710      	adds	r7, #16
 80127ac:	46bd      	mov	sp, r7
 80127ae:	bd80      	pop	{r7, pc}
 80127b0:	20008648 	.word	0x20008648

080127b4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80127b4:	b580      	push	{r7, lr}
 80127b6:	b082      	sub	sp, #8
 80127b8:	af00      	add	r7, sp, #0
 80127ba:	6078      	str	r0, [r7, #4]
 80127bc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80127be:	4b10      	ldr	r3, [pc, #64]	; (8012800 <ip_reass_dequeue_datagram+0x4c>)
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	687a      	ldr	r2, [r7, #4]
 80127c4:	429a      	cmp	r2, r3
 80127c6:	d104      	bne.n	80127d2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	4a0c      	ldr	r2, [pc, #48]	; (8012800 <ip_reass_dequeue_datagram+0x4c>)
 80127ce:	6013      	str	r3, [r2, #0]
 80127d0:	e00d      	b.n	80127ee <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80127d2:	683b      	ldr	r3, [r7, #0]
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d106      	bne.n	80127e6 <ip_reass_dequeue_datagram+0x32>
 80127d8:	4b0a      	ldr	r3, [pc, #40]	; (8012804 <ip_reass_dequeue_datagram+0x50>)
 80127da:	f240 1245 	movw	r2, #325	; 0x145
 80127de:	490a      	ldr	r1, [pc, #40]	; (8012808 <ip_reass_dequeue_datagram+0x54>)
 80127e0:	480a      	ldr	r0, [pc, #40]	; (801280c <ip_reass_dequeue_datagram+0x58>)
 80127e2:	f001 f83b 	bl	801385c <iprintf>
    prev->next = ipr->next;
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	681a      	ldr	r2, [r3, #0]
 80127ea:	683b      	ldr	r3, [r7, #0]
 80127ec:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80127ee:	6879      	ldr	r1, [r7, #4]
 80127f0:	2004      	movs	r0, #4
 80127f2:	f7f5 fb25 	bl	8007e40 <memp_free>
}
 80127f6:	bf00      	nop
 80127f8:	3708      	adds	r7, #8
 80127fa:	46bd      	mov	sp, r7
 80127fc:	bd80      	pop	{r7, pc}
 80127fe:	bf00      	nop
 8012800:	20008648 	.word	0x20008648
 8012804:	08017310 	.word	0x08017310
 8012808:	080173d8 	.word	0x080173d8
 801280c:	08017358 	.word	0x08017358

08012810 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8012810:	b580      	push	{r7, lr}
 8012812:	b08c      	sub	sp, #48	; 0x30
 8012814:	af00      	add	r7, sp, #0
 8012816:	60f8      	str	r0, [r7, #12]
 8012818:	60b9      	str	r1, [r7, #8]
 801281a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801281c:	2300      	movs	r3, #0
 801281e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8012820:	2301      	movs	r3, #1
 8012822:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8012824:	68bb      	ldr	r3, [r7, #8]
 8012826:	685b      	ldr	r3, [r3, #4]
 8012828:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801282a:	69fb      	ldr	r3, [r7, #28]
 801282c:	885b      	ldrh	r3, [r3, #2]
 801282e:	b29b      	uxth	r3, r3
 8012830:	4618      	mov	r0, r3
 8012832:	f7f4 fdfd 	bl	8007430 <lwip_htons>
 8012836:	4603      	mov	r3, r0
 8012838:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801283a:	69fb      	ldr	r3, [r7, #28]
 801283c:	781b      	ldrb	r3, [r3, #0]
 801283e:	f003 030f 	and.w	r3, r3, #15
 8012842:	b2db      	uxtb	r3, r3
 8012844:	009b      	lsls	r3, r3, #2
 8012846:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8012848:	7e7b      	ldrb	r3, [r7, #25]
 801284a:	b29b      	uxth	r3, r3
 801284c:	8b7a      	ldrh	r2, [r7, #26]
 801284e:	429a      	cmp	r2, r3
 8012850:	d202      	bcs.n	8012858 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012852:	f04f 33ff 	mov.w	r3, #4294967295
 8012856:	e135      	b.n	8012ac4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8012858:	7e7b      	ldrb	r3, [r7, #25]
 801285a:	b29b      	uxth	r3, r3
 801285c:	8b7a      	ldrh	r2, [r7, #26]
 801285e:	1ad3      	subs	r3, r2, r3
 8012860:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8012862:	69fb      	ldr	r3, [r7, #28]
 8012864:	88db      	ldrh	r3, [r3, #6]
 8012866:	b29b      	uxth	r3, r3
 8012868:	4618      	mov	r0, r3
 801286a:	f7f4 fde1 	bl	8007430 <lwip_htons>
 801286e:	4603      	mov	r3, r0
 8012870:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012874:	b29b      	uxth	r3, r3
 8012876:	00db      	lsls	r3, r3, #3
 8012878:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801287a:	68bb      	ldr	r3, [r7, #8]
 801287c:	685b      	ldr	r3, [r3, #4]
 801287e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8012880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012882:	2200      	movs	r2, #0
 8012884:	701a      	strb	r2, [r3, #0]
 8012886:	2200      	movs	r2, #0
 8012888:	705a      	strb	r2, [r3, #1]
 801288a:	2200      	movs	r2, #0
 801288c:	709a      	strb	r2, [r3, #2]
 801288e:	2200      	movs	r2, #0
 8012890:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8012892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012894:	8afa      	ldrh	r2, [r7, #22]
 8012896:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8012898:	8afa      	ldrh	r2, [r7, #22]
 801289a:	8b7b      	ldrh	r3, [r7, #26]
 801289c:	4413      	add	r3, r2
 801289e:	b29a      	uxth	r2, r3
 80128a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128a2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80128a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128a6:	88db      	ldrh	r3, [r3, #6]
 80128a8:	b29b      	uxth	r3, r3
 80128aa:	8afa      	ldrh	r2, [r7, #22]
 80128ac:	429a      	cmp	r2, r3
 80128ae:	d902      	bls.n	80128b6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80128b0:	f04f 33ff 	mov.w	r3, #4294967295
 80128b4:	e106      	b.n	8012ac4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	685b      	ldr	r3, [r3, #4]
 80128ba:	627b      	str	r3, [r7, #36]	; 0x24
 80128bc:	e068      	b.n	8012990 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80128be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128c0:	685b      	ldr	r3, [r3, #4]
 80128c2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80128c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128c6:	889b      	ldrh	r3, [r3, #4]
 80128c8:	b29a      	uxth	r2, r3
 80128ca:	693b      	ldr	r3, [r7, #16]
 80128cc:	889b      	ldrh	r3, [r3, #4]
 80128ce:	b29b      	uxth	r3, r3
 80128d0:	429a      	cmp	r2, r3
 80128d2:	d235      	bcs.n	8012940 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80128d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80128d8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80128da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d020      	beq.n	8012922 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80128e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128e2:	889b      	ldrh	r3, [r3, #4]
 80128e4:	b29a      	uxth	r2, r3
 80128e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128e8:	88db      	ldrh	r3, [r3, #6]
 80128ea:	b29b      	uxth	r3, r3
 80128ec:	429a      	cmp	r2, r3
 80128ee:	d307      	bcc.n	8012900 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80128f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128f2:	88db      	ldrh	r3, [r3, #6]
 80128f4:	b29a      	uxth	r2, r3
 80128f6:	693b      	ldr	r3, [r7, #16]
 80128f8:	889b      	ldrh	r3, [r3, #4]
 80128fa:	b29b      	uxth	r3, r3
 80128fc:	429a      	cmp	r2, r3
 80128fe:	d902      	bls.n	8012906 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012900:	f04f 33ff 	mov.w	r3, #4294967295
 8012904:	e0de      	b.n	8012ac4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8012906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012908:	68ba      	ldr	r2, [r7, #8]
 801290a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801290c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801290e:	88db      	ldrh	r3, [r3, #6]
 8012910:	b29a      	uxth	r2, r3
 8012912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012914:	889b      	ldrh	r3, [r3, #4]
 8012916:	b29b      	uxth	r3, r3
 8012918:	429a      	cmp	r2, r3
 801291a:	d03d      	beq.n	8012998 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801291c:	2300      	movs	r3, #0
 801291e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8012920:	e03a      	b.n	8012998 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8012922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012924:	88db      	ldrh	r3, [r3, #6]
 8012926:	b29a      	uxth	r2, r3
 8012928:	693b      	ldr	r3, [r7, #16]
 801292a:	889b      	ldrh	r3, [r3, #4]
 801292c:	b29b      	uxth	r3, r3
 801292e:	429a      	cmp	r2, r3
 8012930:	d902      	bls.n	8012938 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012932:	f04f 33ff 	mov.w	r3, #4294967295
 8012936:	e0c5      	b.n	8012ac4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	68ba      	ldr	r2, [r7, #8]
 801293c:	605a      	str	r2, [r3, #4]
      break;
 801293e:	e02b      	b.n	8012998 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8012940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012942:	889b      	ldrh	r3, [r3, #4]
 8012944:	b29a      	uxth	r2, r3
 8012946:	693b      	ldr	r3, [r7, #16]
 8012948:	889b      	ldrh	r3, [r3, #4]
 801294a:	b29b      	uxth	r3, r3
 801294c:	429a      	cmp	r2, r3
 801294e:	d102      	bne.n	8012956 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012950:	f04f 33ff 	mov.w	r3, #4294967295
 8012954:	e0b6      	b.n	8012ac4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8012956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012958:	889b      	ldrh	r3, [r3, #4]
 801295a:	b29a      	uxth	r2, r3
 801295c:	693b      	ldr	r3, [r7, #16]
 801295e:	88db      	ldrh	r3, [r3, #6]
 8012960:	b29b      	uxth	r3, r3
 8012962:	429a      	cmp	r2, r3
 8012964:	d202      	bcs.n	801296c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012966:	f04f 33ff 	mov.w	r3, #4294967295
 801296a:	e0ab      	b.n	8012ac4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801296c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801296e:	2b00      	cmp	r3, #0
 8012970:	d009      	beq.n	8012986 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8012972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012974:	88db      	ldrh	r3, [r3, #6]
 8012976:	b29a      	uxth	r2, r3
 8012978:	693b      	ldr	r3, [r7, #16]
 801297a:	889b      	ldrh	r3, [r3, #4]
 801297c:	b29b      	uxth	r3, r3
 801297e:	429a      	cmp	r2, r3
 8012980:	d001      	beq.n	8012986 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012982:	2300      	movs	r3, #0
 8012984:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8012986:	693b      	ldr	r3, [r7, #16]
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801298c:	693b      	ldr	r3, [r7, #16]
 801298e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8012990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012992:	2b00      	cmp	r3, #0
 8012994:	d193      	bne.n	80128be <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8012996:	e000      	b.n	801299a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8012998:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801299c:	2b00      	cmp	r3, #0
 801299e:	d12d      	bne.n	80129fc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80129a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d01c      	beq.n	80129e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80129a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129a8:	88db      	ldrh	r3, [r3, #6]
 80129aa:	b29a      	uxth	r2, r3
 80129ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129ae:	889b      	ldrh	r3, [r3, #4]
 80129b0:	b29b      	uxth	r3, r3
 80129b2:	429a      	cmp	r2, r3
 80129b4:	d906      	bls.n	80129c4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80129b6:	4b45      	ldr	r3, [pc, #276]	; (8012acc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80129b8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80129bc:	4944      	ldr	r1, [pc, #272]	; (8012ad0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80129be:	4845      	ldr	r0, [pc, #276]	; (8012ad4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80129c0:	f000 ff4c 	bl	801385c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80129c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129c6:	68ba      	ldr	r2, [r7, #8]
 80129c8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80129ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129cc:	88db      	ldrh	r3, [r3, #6]
 80129ce:	b29a      	uxth	r2, r3
 80129d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129d2:	889b      	ldrh	r3, [r3, #4]
 80129d4:	b29b      	uxth	r3, r3
 80129d6:	429a      	cmp	r2, r3
 80129d8:	d010      	beq.n	80129fc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80129da:	2300      	movs	r3, #0
 80129dc:	623b      	str	r3, [r7, #32]
 80129de:	e00d      	b.n	80129fc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	685b      	ldr	r3, [r3, #4]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d006      	beq.n	80129f6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80129e8:	4b38      	ldr	r3, [pc, #224]	; (8012acc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80129ea:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80129ee:	493a      	ldr	r1, [pc, #232]	; (8012ad8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80129f0:	4838      	ldr	r0, [pc, #224]	; (8012ad4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80129f2:	f000 ff33 	bl	801385c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80129f6:	68fb      	ldr	r3, [r7, #12]
 80129f8:	68ba      	ldr	r2, [r7, #8]
 80129fa:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d105      	bne.n	8012a0e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8012a02:	68fb      	ldr	r3, [r7, #12]
 8012a04:	7f9b      	ldrb	r3, [r3, #30]
 8012a06:	f003 0301 	and.w	r3, r3, #1
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d059      	beq.n	8012ac2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8012a0e:	6a3b      	ldr	r3, [r7, #32]
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d04f      	beq.n	8012ab4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	685b      	ldr	r3, [r3, #4]
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d006      	beq.n	8012a2a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8012a1c:	68fb      	ldr	r3, [r7, #12]
 8012a1e:	685b      	ldr	r3, [r3, #4]
 8012a20:	685b      	ldr	r3, [r3, #4]
 8012a22:	889b      	ldrh	r3, [r3, #4]
 8012a24:	b29b      	uxth	r3, r3
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d002      	beq.n	8012a30 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8012a2a:	2300      	movs	r3, #0
 8012a2c:	623b      	str	r3, [r7, #32]
 8012a2e:	e041      	b.n	8012ab4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8012a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a32:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8012a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012a3a:	e012      	b.n	8012a62 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8012a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a3e:	685b      	ldr	r3, [r3, #4]
 8012a40:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8012a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a44:	88db      	ldrh	r3, [r3, #6]
 8012a46:	b29a      	uxth	r2, r3
 8012a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a4a:	889b      	ldrh	r3, [r3, #4]
 8012a4c:	b29b      	uxth	r3, r3
 8012a4e:	429a      	cmp	r2, r3
 8012a50:	d002      	beq.n	8012a58 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8012a52:	2300      	movs	r3, #0
 8012a54:	623b      	str	r3, [r7, #32]
            break;
 8012a56:	e007      	b.n	8012a68 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8012a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a5a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8012a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d1e9      	bne.n	8012a3c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8012a68:	6a3b      	ldr	r3, [r7, #32]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d022      	beq.n	8012ab4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	685b      	ldr	r3, [r3, #4]
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d106      	bne.n	8012a84 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8012a76:	4b15      	ldr	r3, [pc, #84]	; (8012acc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012a78:	f240 12df 	movw	r2, #479	; 0x1df
 8012a7c:	4917      	ldr	r1, [pc, #92]	; (8012adc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012a7e:	4815      	ldr	r0, [pc, #84]	; (8012ad4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012a80:	f000 feec 	bl	801385c <iprintf>
          LWIP_ASSERT("sanity check",
 8012a84:	68fb      	ldr	r3, [r7, #12]
 8012a86:	685b      	ldr	r3, [r3, #4]
 8012a88:	685b      	ldr	r3, [r3, #4]
 8012a8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012a8c:	429a      	cmp	r2, r3
 8012a8e:	d106      	bne.n	8012a9e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8012a90:	4b0e      	ldr	r3, [pc, #56]	; (8012acc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012a92:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8012a96:	4911      	ldr	r1, [pc, #68]	; (8012adc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012a98:	480e      	ldr	r0, [pc, #56]	; (8012ad4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012a9a:	f000 fedf 	bl	801385c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8012a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d006      	beq.n	8012ab4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8012aa6:	4b09      	ldr	r3, [pc, #36]	; (8012acc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012aa8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8012aac:	490c      	ldr	r1, [pc, #48]	; (8012ae0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8012aae:	4809      	ldr	r0, [pc, #36]	; (8012ad4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012ab0:	f000 fed4 	bl	801385c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8012ab4:	6a3b      	ldr	r3, [r7, #32]
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	bf14      	ite	ne
 8012aba:	2301      	movne	r3, #1
 8012abc:	2300      	moveq	r3, #0
 8012abe:	b2db      	uxtb	r3, r3
 8012ac0:	e000      	b.n	8012ac4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8012ac2:	2300      	movs	r3, #0
}
 8012ac4:	4618      	mov	r0, r3
 8012ac6:	3730      	adds	r7, #48	; 0x30
 8012ac8:	46bd      	mov	sp, r7
 8012aca:	bd80      	pop	{r7, pc}
 8012acc:	08017310 	.word	0x08017310
 8012ad0:	080173f4 	.word	0x080173f4
 8012ad4:	08017358 	.word	0x08017358
 8012ad8:	08017414 	.word	0x08017414
 8012adc:	0801744c 	.word	0x0801744c
 8012ae0:	0801745c 	.word	0x0801745c

08012ae4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8012ae4:	b580      	push	{r7, lr}
 8012ae6:	b08e      	sub	sp, #56	; 0x38
 8012ae8:	af00      	add	r7, sp, #0
 8012aea:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	685b      	ldr	r3, [r3, #4]
 8012af0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8012af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012af4:	781b      	ldrb	r3, [r3, #0]
 8012af6:	f003 030f 	and.w	r3, r3, #15
 8012afa:	b2db      	uxtb	r3, r3
 8012afc:	009b      	lsls	r3, r3, #2
 8012afe:	b2db      	uxtb	r3, r3
 8012b00:	2b14      	cmp	r3, #20
 8012b02:	f040 8167 	bne.w	8012dd4 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8012b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b08:	88db      	ldrh	r3, [r3, #6]
 8012b0a:	b29b      	uxth	r3, r3
 8012b0c:	4618      	mov	r0, r3
 8012b0e:	f7f4 fc8f 	bl	8007430 <lwip_htons>
 8012b12:	4603      	mov	r3, r0
 8012b14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012b18:	b29b      	uxth	r3, r3
 8012b1a:	00db      	lsls	r3, r3, #3
 8012b1c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8012b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b20:	885b      	ldrh	r3, [r3, #2]
 8012b22:	b29b      	uxth	r3, r3
 8012b24:	4618      	mov	r0, r3
 8012b26:	f7f4 fc83 	bl	8007430 <lwip_htons>
 8012b2a:	4603      	mov	r3, r0
 8012b2c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8012b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b30:	781b      	ldrb	r3, [r3, #0]
 8012b32:	f003 030f 	and.w	r3, r3, #15
 8012b36:	b2db      	uxtb	r3, r3
 8012b38:	009b      	lsls	r3, r3, #2
 8012b3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8012b3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012b42:	b29b      	uxth	r3, r3
 8012b44:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012b46:	429a      	cmp	r2, r3
 8012b48:	f0c0 8146 	bcc.w	8012dd8 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8012b4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012b50:	b29b      	uxth	r3, r3
 8012b52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012b54:	1ad3      	subs	r3, r2, r3
 8012b56:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8012b58:	6878      	ldr	r0, [r7, #4]
 8012b5a:	f7f6 f8af 	bl	8008cbc <pbuf_clen>
 8012b5e:	4603      	mov	r3, r0
 8012b60:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8012b62:	4b9f      	ldr	r3, [pc, #636]	; (8012de0 <ip4_reass+0x2fc>)
 8012b64:	881b      	ldrh	r3, [r3, #0]
 8012b66:	461a      	mov	r2, r3
 8012b68:	8c3b      	ldrh	r3, [r7, #32]
 8012b6a:	4413      	add	r3, r2
 8012b6c:	2b0a      	cmp	r3, #10
 8012b6e:	dd10      	ble.n	8012b92 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012b70:	8c3b      	ldrh	r3, [r7, #32]
 8012b72:	4619      	mov	r1, r3
 8012b74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012b76:	f7ff fd81 	bl	801267c <ip_reass_remove_oldest_datagram>
 8012b7a:	4603      	mov	r3, r0
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	f000 812d 	beq.w	8012ddc <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8012b82:	4b97      	ldr	r3, [pc, #604]	; (8012de0 <ip4_reass+0x2fc>)
 8012b84:	881b      	ldrh	r3, [r3, #0]
 8012b86:	461a      	mov	r2, r3
 8012b88:	8c3b      	ldrh	r3, [r7, #32]
 8012b8a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012b8c:	2b0a      	cmp	r3, #10
 8012b8e:	f300 8125 	bgt.w	8012ddc <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012b92:	4b94      	ldr	r3, [pc, #592]	; (8012de4 <ip4_reass+0x300>)
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	633b      	str	r3, [r7, #48]	; 0x30
 8012b98:	e015      	b.n	8012bc6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8012b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b9c:	695a      	ldr	r2, [r3, #20]
 8012b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ba0:	68db      	ldr	r3, [r3, #12]
 8012ba2:	429a      	cmp	r2, r3
 8012ba4:	d10c      	bne.n	8012bc0 <ip4_reass+0xdc>
 8012ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ba8:	699a      	ldr	r2, [r3, #24]
 8012baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bac:	691b      	ldr	r3, [r3, #16]
 8012bae:	429a      	cmp	r2, r3
 8012bb0:	d106      	bne.n	8012bc0 <ip4_reass+0xdc>
 8012bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bb4:	899a      	ldrh	r2, [r3, #12]
 8012bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bb8:	889b      	ldrh	r3, [r3, #4]
 8012bba:	b29b      	uxth	r3, r3
 8012bbc:	429a      	cmp	r2, r3
 8012bbe:	d006      	beq.n	8012bce <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bc2:	681b      	ldr	r3, [r3, #0]
 8012bc4:	633b      	str	r3, [r7, #48]	; 0x30
 8012bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d1e6      	bne.n	8012b9a <ip4_reass+0xb6>
 8012bcc:	e000      	b.n	8012bd0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8012bce:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8012bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d109      	bne.n	8012bea <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8012bd6:	8c3b      	ldrh	r3, [r7, #32]
 8012bd8:	4619      	mov	r1, r3
 8012bda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012bdc:	f7ff fdb0 	bl	8012740 <ip_reass_enqueue_new_datagram>
 8012be0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8012be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d11c      	bne.n	8012c22 <ip4_reass+0x13e>
      goto nullreturn;
 8012be8:	e109      	b.n	8012dfe <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bec:	88db      	ldrh	r3, [r3, #6]
 8012bee:	b29b      	uxth	r3, r3
 8012bf0:	4618      	mov	r0, r3
 8012bf2:	f7f4 fc1d 	bl	8007430 <lwip_htons>
 8012bf6:	4603      	mov	r3, r0
 8012bf8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d110      	bne.n	8012c22 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8012c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c02:	89db      	ldrh	r3, [r3, #14]
 8012c04:	4618      	mov	r0, r3
 8012c06:	f7f4 fc13 	bl	8007430 <lwip_htons>
 8012c0a:	4603      	mov	r3, r0
 8012c0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d006      	beq.n	8012c22 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8012c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c16:	3308      	adds	r3, #8
 8012c18:	2214      	movs	r2, #20
 8012c1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012c1c:	4618      	mov	r0, r3
 8012c1e:	f000 fdac 	bl	801377a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8012c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c24:	88db      	ldrh	r3, [r3, #6]
 8012c26:	b29b      	uxth	r3, r3
 8012c28:	f003 0320 	and.w	r3, r3, #32
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	bf0c      	ite	eq
 8012c30:	2301      	moveq	r3, #1
 8012c32:	2300      	movne	r3, #0
 8012c34:	b2db      	uxtb	r3, r3
 8012c36:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8012c38:	69fb      	ldr	r3, [r7, #28]
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d00e      	beq.n	8012c5c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8012c3e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012c40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012c42:	4413      	add	r3, r2
 8012c44:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8012c46:	8b7a      	ldrh	r2, [r7, #26]
 8012c48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012c4a:	429a      	cmp	r2, r3
 8012c4c:	f0c0 80a0 	bcc.w	8012d90 <ip4_reass+0x2ac>
 8012c50:	8b7b      	ldrh	r3, [r7, #26]
 8012c52:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8012c56:	4293      	cmp	r3, r2
 8012c58:	f200 809a 	bhi.w	8012d90 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8012c5c:	69fa      	ldr	r2, [r7, #28]
 8012c5e:	6879      	ldr	r1, [r7, #4]
 8012c60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012c62:	f7ff fdd5 	bl	8012810 <ip_reass_chain_frag_into_datagram_and_validate>
 8012c66:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8012c68:	697b      	ldr	r3, [r7, #20]
 8012c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c6e:	f000 8091 	beq.w	8012d94 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012c72:	4b5b      	ldr	r3, [pc, #364]	; (8012de0 <ip4_reass+0x2fc>)
 8012c74:	881a      	ldrh	r2, [r3, #0]
 8012c76:	8c3b      	ldrh	r3, [r7, #32]
 8012c78:	4413      	add	r3, r2
 8012c7a:	b29a      	uxth	r2, r3
 8012c7c:	4b58      	ldr	r3, [pc, #352]	; (8012de0 <ip4_reass+0x2fc>)
 8012c7e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8012c80:	69fb      	ldr	r3, [r7, #28]
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d00d      	beq.n	8012ca2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8012c86:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012c88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012c8a:	4413      	add	r3, r2
 8012c8c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8012c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c90:	8a7a      	ldrh	r2, [r7, #18]
 8012c92:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c96:	7f9b      	ldrb	r3, [r3, #30]
 8012c98:	f043 0301 	orr.w	r3, r3, #1
 8012c9c:	b2da      	uxtb	r2, r3
 8012c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ca0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8012ca2:	697b      	ldr	r3, [r7, #20]
 8012ca4:	2b01      	cmp	r3, #1
 8012ca6:	d171      	bne.n	8012d8c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8012ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012caa:	8b9b      	ldrh	r3, [r3, #28]
 8012cac:	3314      	adds	r3, #20
 8012cae:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8012cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cb2:	685b      	ldr	r3, [r3, #4]
 8012cb4:	685b      	ldr	r3, [r3, #4]
 8012cb6:	681b      	ldr	r3, [r3, #0]
 8012cb8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8012cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cbc:	685b      	ldr	r3, [r3, #4]
 8012cbe:	685b      	ldr	r3, [r3, #4]
 8012cc0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8012cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cc4:	3308      	adds	r3, #8
 8012cc6:	2214      	movs	r2, #20
 8012cc8:	4619      	mov	r1, r3
 8012cca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012ccc:	f000 fd55 	bl	801377a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8012cd0:	8a3b      	ldrh	r3, [r7, #16]
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	f7f4 fbac 	bl	8007430 <lwip_htons>
 8012cd8:	4603      	mov	r3, r0
 8012cda:	461a      	mov	r2, r3
 8012cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cde:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8012ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ce2:	2200      	movs	r2, #0
 8012ce4:	719a      	strb	r2, [r3, #6]
 8012ce6:	2200      	movs	r2, #0
 8012ce8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8012cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cec:	2200      	movs	r2, #0
 8012cee:	729a      	strb	r2, [r3, #10]
 8012cf0:	2200      	movs	r2, #0
 8012cf2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8012cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cf6:	685b      	ldr	r3, [r3, #4]
 8012cf8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8012cfa:	e00d      	b.n	8012d18 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8012cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cfe:	685b      	ldr	r3, [r3, #4]
 8012d00:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8012d02:	2114      	movs	r1, #20
 8012d04:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012d06:	f7f5 fec5 	bl	8008a94 <pbuf_remove_header>
      pbuf_cat(p, r);
 8012d0a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012d0c:	6878      	ldr	r0, [r7, #4]
 8012d0e:	f7f6 f815 	bl	8008d3c <pbuf_cat>
      r = iprh->next_pbuf;
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8012d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d1ee      	bne.n	8012cfc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8012d1e:	4b31      	ldr	r3, [pc, #196]	; (8012de4 <ip4_reass+0x300>)
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d24:	429a      	cmp	r2, r3
 8012d26:	d102      	bne.n	8012d2e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8012d28:	2300      	movs	r3, #0
 8012d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012d2c:	e010      	b.n	8012d50 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012d2e:	4b2d      	ldr	r3, [pc, #180]	; (8012de4 <ip4_reass+0x300>)
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012d34:	e007      	b.n	8012d46 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8012d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d3c:	429a      	cmp	r2, r3
 8012d3e:	d006      	beq.n	8012d4e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d1f4      	bne.n	8012d36 <ip4_reass+0x252>
 8012d4c:	e000      	b.n	8012d50 <ip4_reass+0x26c>
          break;
 8012d4e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8012d50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012d52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d54:	f7ff fd2e 	bl	80127b4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8012d58:	6878      	ldr	r0, [r7, #4]
 8012d5a:	f7f5 ffaf 	bl	8008cbc <pbuf_clen>
 8012d5e:	4603      	mov	r3, r0
 8012d60:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8012d62:	4b1f      	ldr	r3, [pc, #124]	; (8012de0 <ip4_reass+0x2fc>)
 8012d64:	881b      	ldrh	r3, [r3, #0]
 8012d66:	8c3a      	ldrh	r2, [r7, #32]
 8012d68:	429a      	cmp	r2, r3
 8012d6a:	d906      	bls.n	8012d7a <ip4_reass+0x296>
 8012d6c:	4b1e      	ldr	r3, [pc, #120]	; (8012de8 <ip4_reass+0x304>)
 8012d6e:	f240 229b 	movw	r2, #667	; 0x29b
 8012d72:	491e      	ldr	r1, [pc, #120]	; (8012dec <ip4_reass+0x308>)
 8012d74:	481e      	ldr	r0, [pc, #120]	; (8012df0 <ip4_reass+0x30c>)
 8012d76:	f000 fd71 	bl	801385c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8012d7a:	4b19      	ldr	r3, [pc, #100]	; (8012de0 <ip4_reass+0x2fc>)
 8012d7c:	881a      	ldrh	r2, [r3, #0]
 8012d7e:	8c3b      	ldrh	r3, [r7, #32]
 8012d80:	1ad3      	subs	r3, r2, r3
 8012d82:	b29a      	uxth	r2, r3
 8012d84:	4b16      	ldr	r3, [pc, #88]	; (8012de0 <ip4_reass+0x2fc>)
 8012d86:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	e03c      	b.n	8012e06 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8012d8c:	2300      	movs	r3, #0
 8012d8e:	e03a      	b.n	8012e06 <ip4_reass+0x322>
      goto nullreturn_ipr;
 8012d90:	bf00      	nop
 8012d92:	e000      	b.n	8012d96 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8012d94:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8012d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d106      	bne.n	8012daa <ip4_reass+0x2c6>
 8012d9c:	4b12      	ldr	r3, [pc, #72]	; (8012de8 <ip4_reass+0x304>)
 8012d9e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8012da2:	4914      	ldr	r1, [pc, #80]	; (8012df4 <ip4_reass+0x310>)
 8012da4:	4812      	ldr	r0, [pc, #72]	; (8012df0 <ip4_reass+0x30c>)
 8012da6:	f000 fd59 	bl	801385c <iprintf>
  if (ipr->p == NULL) {
 8012daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dac:	685b      	ldr	r3, [r3, #4]
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d124      	bne.n	8012dfc <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8012db2:	4b0c      	ldr	r3, [pc, #48]	; (8012de4 <ip4_reass+0x300>)
 8012db4:	681b      	ldr	r3, [r3, #0]
 8012db6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012db8:	429a      	cmp	r2, r3
 8012dba:	d006      	beq.n	8012dca <ip4_reass+0x2e6>
 8012dbc:	4b0a      	ldr	r3, [pc, #40]	; (8012de8 <ip4_reass+0x304>)
 8012dbe:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012dc2:	490d      	ldr	r1, [pc, #52]	; (8012df8 <ip4_reass+0x314>)
 8012dc4:	480a      	ldr	r0, [pc, #40]	; (8012df0 <ip4_reass+0x30c>)
 8012dc6:	f000 fd49 	bl	801385c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8012dca:	2100      	movs	r1, #0
 8012dcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012dce:	f7ff fcf1 	bl	80127b4 <ip_reass_dequeue_datagram>
 8012dd2:	e014      	b.n	8012dfe <ip4_reass+0x31a>
    goto nullreturn;
 8012dd4:	bf00      	nop
 8012dd6:	e012      	b.n	8012dfe <ip4_reass+0x31a>
    goto nullreturn;
 8012dd8:	bf00      	nop
 8012dda:	e010      	b.n	8012dfe <ip4_reass+0x31a>
      goto nullreturn;
 8012ddc:	bf00      	nop
 8012dde:	e00e      	b.n	8012dfe <ip4_reass+0x31a>
 8012de0:	2000864c 	.word	0x2000864c
 8012de4:	20008648 	.word	0x20008648
 8012de8:	08017310 	.word	0x08017310
 8012dec:	08017480 	.word	0x08017480
 8012df0:	08017358 	.word	0x08017358
 8012df4:	0801749c 	.word	0x0801749c
 8012df8:	080174a8 	.word	0x080174a8
  }

nullreturn:
 8012dfc:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8012dfe:	6878      	ldr	r0, [r7, #4]
 8012e00:	f7f5 fece 	bl	8008ba0 <pbuf_free>
  return NULL;
 8012e04:	2300      	movs	r3, #0
}
 8012e06:	4618      	mov	r0, r3
 8012e08:	3738      	adds	r7, #56	; 0x38
 8012e0a:	46bd      	mov	sp, r7
 8012e0c:	bd80      	pop	{r7, pc}
 8012e0e:	bf00      	nop

08012e10 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8012e10:	b580      	push	{r7, lr}
 8012e12:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8012e14:	2005      	movs	r0, #5
 8012e16:	f7f4 ffc1 	bl	8007d9c <memp_malloc>
 8012e1a:	4603      	mov	r3, r0
}
 8012e1c:	4618      	mov	r0, r3
 8012e1e:	bd80      	pop	{r7, pc}

08012e20 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8012e20:	b580      	push	{r7, lr}
 8012e22:	b082      	sub	sp, #8
 8012e24:	af00      	add	r7, sp, #0
 8012e26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d106      	bne.n	8012e3c <ip_frag_free_pbuf_custom_ref+0x1c>
 8012e2e:	4b07      	ldr	r3, [pc, #28]	; (8012e4c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8012e30:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8012e34:	4906      	ldr	r1, [pc, #24]	; (8012e50 <ip_frag_free_pbuf_custom_ref+0x30>)
 8012e36:	4807      	ldr	r0, [pc, #28]	; (8012e54 <ip_frag_free_pbuf_custom_ref+0x34>)
 8012e38:	f000 fd10 	bl	801385c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8012e3c:	6879      	ldr	r1, [r7, #4]
 8012e3e:	2005      	movs	r0, #5
 8012e40:	f7f4 fffe 	bl	8007e40 <memp_free>
}
 8012e44:	bf00      	nop
 8012e46:	3708      	adds	r7, #8
 8012e48:	46bd      	mov	sp, r7
 8012e4a:	bd80      	pop	{r7, pc}
 8012e4c:	08017310 	.word	0x08017310
 8012e50:	080174c8 	.word	0x080174c8
 8012e54:	08017358 	.word	0x08017358

08012e58 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012e58:	b580      	push	{r7, lr}
 8012e5a:	b084      	sub	sp, #16
 8012e5c:	af00      	add	r7, sp, #0
 8012e5e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d106      	bne.n	8012e78 <ipfrag_free_pbuf_custom+0x20>
 8012e6a:	4b11      	ldr	r3, [pc, #68]	; (8012eb0 <ipfrag_free_pbuf_custom+0x58>)
 8012e6c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8012e70:	4910      	ldr	r1, [pc, #64]	; (8012eb4 <ipfrag_free_pbuf_custom+0x5c>)
 8012e72:	4811      	ldr	r0, [pc, #68]	; (8012eb8 <ipfrag_free_pbuf_custom+0x60>)
 8012e74:	f000 fcf2 	bl	801385c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8012e78:	68fa      	ldr	r2, [r7, #12]
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	429a      	cmp	r2, r3
 8012e7e:	d006      	beq.n	8012e8e <ipfrag_free_pbuf_custom+0x36>
 8012e80:	4b0b      	ldr	r3, [pc, #44]	; (8012eb0 <ipfrag_free_pbuf_custom+0x58>)
 8012e82:	f240 22cf 	movw	r2, #719	; 0x2cf
 8012e86:	490d      	ldr	r1, [pc, #52]	; (8012ebc <ipfrag_free_pbuf_custom+0x64>)
 8012e88:	480b      	ldr	r0, [pc, #44]	; (8012eb8 <ipfrag_free_pbuf_custom+0x60>)
 8012e8a:	f000 fce7 	bl	801385c <iprintf>
  if (pcr->original != NULL) {
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	695b      	ldr	r3, [r3, #20]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d004      	beq.n	8012ea0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	695b      	ldr	r3, [r3, #20]
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	f7f5 fe80 	bl	8008ba0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8012ea0:	68f8      	ldr	r0, [r7, #12]
 8012ea2:	f7ff ffbd 	bl	8012e20 <ip_frag_free_pbuf_custom_ref>
}
 8012ea6:	bf00      	nop
 8012ea8:	3710      	adds	r7, #16
 8012eaa:	46bd      	mov	sp, r7
 8012eac:	bd80      	pop	{r7, pc}
 8012eae:	bf00      	nop
 8012eb0:	08017310 	.word	0x08017310
 8012eb4:	080174d4 	.word	0x080174d4
 8012eb8:	08017358 	.word	0x08017358
 8012ebc:	080174e0 	.word	0x080174e0

08012ec0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8012ec0:	b580      	push	{r7, lr}
 8012ec2:	b094      	sub	sp, #80	; 0x50
 8012ec4:	af02      	add	r7, sp, #8
 8012ec6:	60f8      	str	r0, [r7, #12]
 8012ec8:	60b9      	str	r1, [r7, #8]
 8012eca:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8012ecc:	2300      	movs	r3, #0
 8012ece:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8012ed2:	68bb      	ldr	r3, [r7, #8]
 8012ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012ed6:	3b14      	subs	r3, #20
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	da00      	bge.n	8012ede <ip4_frag+0x1e>
 8012edc:	3307      	adds	r3, #7
 8012ede:	10db      	asrs	r3, r3, #3
 8012ee0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8012ee2:	2314      	movs	r3, #20
 8012ee4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	685b      	ldr	r3, [r3, #4]
 8012eea:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8012eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012eee:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8012ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ef2:	781b      	ldrb	r3, [r3, #0]
 8012ef4:	f003 030f 	and.w	r3, r3, #15
 8012ef8:	b2db      	uxtb	r3, r3
 8012efa:	009b      	lsls	r3, r3, #2
 8012efc:	b2db      	uxtb	r3, r3
 8012efe:	2b14      	cmp	r3, #20
 8012f00:	d002      	beq.n	8012f08 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8012f02:	f06f 0305 	mvn.w	r3, #5
 8012f06:	e110      	b.n	801312a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	895b      	ldrh	r3, [r3, #10]
 8012f0c:	2b13      	cmp	r3, #19
 8012f0e:	d809      	bhi.n	8012f24 <ip4_frag+0x64>
 8012f10:	4b88      	ldr	r3, [pc, #544]	; (8013134 <ip4_frag+0x274>)
 8012f12:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8012f16:	4988      	ldr	r1, [pc, #544]	; (8013138 <ip4_frag+0x278>)
 8012f18:	4888      	ldr	r0, [pc, #544]	; (801313c <ip4_frag+0x27c>)
 8012f1a:	f000 fc9f 	bl	801385c <iprintf>
 8012f1e:	f06f 0305 	mvn.w	r3, #5
 8012f22:	e102      	b.n	801312a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8012f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f26:	88db      	ldrh	r3, [r3, #6]
 8012f28:	b29b      	uxth	r3, r3
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	f7f4 fa80 	bl	8007430 <lwip_htons>
 8012f30:	4603      	mov	r3, r0
 8012f32:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8012f34:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012f36:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012f3a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8012f3e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012f40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012f44:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	891b      	ldrh	r3, [r3, #8]
 8012f4a:	3b14      	subs	r3, #20
 8012f4c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8012f50:	e0e1      	b.n	8013116 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8012f52:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012f54:	00db      	lsls	r3, r3, #3
 8012f56:	b29b      	uxth	r3, r3
 8012f58:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012f5c:	4293      	cmp	r3, r2
 8012f5e:	bf28      	it	cs
 8012f60:	4613      	movcs	r3, r2
 8012f62:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8012f64:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012f68:	2114      	movs	r1, #20
 8012f6a:	200e      	movs	r0, #14
 8012f6c:	f7f5 fb34 	bl	80085d8 <pbuf_alloc>
 8012f70:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8012f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	f000 80d5 	beq.w	8013124 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f7c:	895b      	ldrh	r3, [r3, #10]
 8012f7e:	2b13      	cmp	r3, #19
 8012f80:	d806      	bhi.n	8012f90 <ip4_frag+0xd0>
 8012f82:	4b6c      	ldr	r3, [pc, #432]	; (8013134 <ip4_frag+0x274>)
 8012f84:	f44f 7249 	mov.w	r2, #804	; 0x324
 8012f88:	496d      	ldr	r1, [pc, #436]	; (8013140 <ip4_frag+0x280>)
 8012f8a:	486c      	ldr	r0, [pc, #432]	; (801313c <ip4_frag+0x27c>)
 8012f8c:	f000 fc66 	bl	801385c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f92:	685b      	ldr	r3, [r3, #4]
 8012f94:	2214      	movs	r2, #20
 8012f96:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012f98:	4618      	mov	r0, r3
 8012f9a:	f000 fbee 	bl	801377a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8012f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fa0:	685b      	ldr	r3, [r3, #4]
 8012fa2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8012fa4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012fa6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8012faa:	e064      	b.n	8013076 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	895a      	ldrh	r2, [r3, #10]
 8012fb0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012fb2:	1ad3      	subs	r3, r2, r3
 8012fb4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8012fb6:	68fb      	ldr	r3, [r7, #12]
 8012fb8:	895b      	ldrh	r3, [r3, #10]
 8012fba:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012fbc:	429a      	cmp	r2, r3
 8012fbe:	d906      	bls.n	8012fce <ip4_frag+0x10e>
 8012fc0:	4b5c      	ldr	r3, [pc, #368]	; (8013134 <ip4_frag+0x274>)
 8012fc2:	f240 322d 	movw	r2, #813	; 0x32d
 8012fc6:	495f      	ldr	r1, [pc, #380]	; (8013144 <ip4_frag+0x284>)
 8012fc8:	485c      	ldr	r0, [pc, #368]	; (801313c <ip4_frag+0x27c>)
 8012fca:	f000 fc47 	bl	801385c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8012fce:	8bfa      	ldrh	r2, [r7, #30]
 8012fd0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012fd4:	4293      	cmp	r3, r2
 8012fd6:	bf28      	it	cs
 8012fd8:	4613      	movcs	r3, r2
 8012fda:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8012fde:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d105      	bne.n	8012ff2 <ip4_frag+0x132>
        poff = 0;
 8012fe6:	2300      	movs	r3, #0
 8012fe8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	681b      	ldr	r3, [r3, #0]
 8012fee:	60fb      	str	r3, [r7, #12]
        continue;
 8012ff0:	e041      	b.n	8013076 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8012ff2:	f7ff ff0d 	bl	8012e10 <ip_frag_alloc_pbuf_custom_ref>
 8012ff6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8012ff8:	69bb      	ldr	r3, [r7, #24]
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d103      	bne.n	8013006 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8012ffe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013000:	f7f5 fdce 	bl	8008ba0 <pbuf_free>
        goto memerr;
 8013004:	e08f      	b.n	8013126 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013006:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8013008:	68fb      	ldr	r3, [r7, #12]
 801300a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801300c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801300e:	4413      	add	r3, r2
 8013010:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8013014:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8013018:	9201      	str	r2, [sp, #4]
 801301a:	9300      	str	r3, [sp, #0]
 801301c:	4603      	mov	r3, r0
 801301e:	2241      	movs	r2, #65	; 0x41
 8013020:	2000      	movs	r0, #0
 8013022:	f7f5 fc03 	bl	800882c <pbuf_alloced_custom>
 8013026:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8013028:	697b      	ldr	r3, [r7, #20]
 801302a:	2b00      	cmp	r3, #0
 801302c:	d106      	bne.n	801303c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801302e:	69b8      	ldr	r0, [r7, #24]
 8013030:	f7ff fef6 	bl	8012e20 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8013034:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013036:	f7f5 fdb3 	bl	8008ba0 <pbuf_free>
        goto memerr;
 801303a:	e074      	b.n	8013126 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801303c:	68f8      	ldr	r0, [r7, #12]
 801303e:	f7f5 fe55 	bl	8008cec <pbuf_ref>
      pcr->original = p;
 8013042:	69bb      	ldr	r3, [r7, #24]
 8013044:	68fa      	ldr	r2, [r7, #12]
 8013046:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8013048:	69bb      	ldr	r3, [r7, #24]
 801304a:	4a3f      	ldr	r2, [pc, #252]	; (8013148 <ip4_frag+0x288>)
 801304c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801304e:	6979      	ldr	r1, [r7, #20]
 8013050:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013052:	f7f5 fe73 	bl	8008d3c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8013056:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801305a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801305e:	1ad3      	subs	r3, r2, r3
 8013060:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8013064:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013068:	2b00      	cmp	r3, #0
 801306a:	d004      	beq.n	8013076 <ip4_frag+0x1b6>
        poff = 0;
 801306c:	2300      	movs	r3, #0
 801306e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	681b      	ldr	r3, [r3, #0]
 8013074:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8013076:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801307a:	2b00      	cmp	r3, #0
 801307c:	d196      	bne.n	8012fac <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801307e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013080:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013084:	4413      	add	r3, r2
 8013086:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8013088:	68bb      	ldr	r3, [r7, #8]
 801308a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801308c:	f1a3 0213 	sub.w	r2, r3, #19
 8013090:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013094:	429a      	cmp	r2, r3
 8013096:	bfcc      	ite	gt
 8013098:	2301      	movgt	r3, #1
 801309a:	2300      	movle	r3, #0
 801309c:	b2db      	uxtb	r3, r3
 801309e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80130a0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80130a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80130a8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80130aa:	6a3b      	ldr	r3, [r7, #32]
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d002      	beq.n	80130b6 <ip4_frag+0x1f6>
 80130b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d003      	beq.n	80130be <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80130b6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80130b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80130bc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80130be:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80130c0:	4618      	mov	r0, r3
 80130c2:	f7f4 f9b5 	bl	8007430 <lwip_htons>
 80130c6:	4603      	mov	r3, r0
 80130c8:	461a      	mov	r2, r3
 80130ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130cc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80130ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80130d0:	3314      	adds	r3, #20
 80130d2:	b29b      	uxth	r3, r3
 80130d4:	4618      	mov	r0, r3
 80130d6:	f7f4 f9ab 	bl	8007430 <lwip_htons>
 80130da:	4603      	mov	r3, r0
 80130dc:	461a      	mov	r2, r3
 80130de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130e0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80130e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130e4:	2200      	movs	r2, #0
 80130e6:	729a      	strb	r2, [r3, #10]
 80130e8:	2200      	movs	r2, #0
 80130ea:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80130ec:	68bb      	ldr	r3, [r7, #8]
 80130ee:	695b      	ldr	r3, [r3, #20]
 80130f0:	687a      	ldr	r2, [r7, #4]
 80130f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80130f4:	68b8      	ldr	r0, [r7, #8]
 80130f6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80130f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80130fa:	f7f5 fd51 	bl	8008ba0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80130fe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013102:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013104:	1ad3      	subs	r3, r2, r3
 8013106:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801310a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801310e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013110:	4413      	add	r3, r2
 8013112:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8013116:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801311a:	2b00      	cmp	r3, #0
 801311c:	f47f af19 	bne.w	8012f52 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8013120:	2300      	movs	r3, #0
 8013122:	e002      	b.n	801312a <ip4_frag+0x26a>
      goto memerr;
 8013124:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8013126:	f04f 33ff 	mov.w	r3, #4294967295
}
 801312a:	4618      	mov	r0, r3
 801312c:	3748      	adds	r7, #72	; 0x48
 801312e:	46bd      	mov	sp, r7
 8013130:	bd80      	pop	{r7, pc}
 8013132:	bf00      	nop
 8013134:	08017310 	.word	0x08017310
 8013138:	080174ec 	.word	0x080174ec
 801313c:	08017358 	.word	0x08017358
 8013140:	08017508 	.word	0x08017508
 8013144:	08017528 	.word	0x08017528
 8013148:	08012e59 	.word	0x08012e59

0801314c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801314c:	b580      	push	{r7, lr}
 801314e:	b086      	sub	sp, #24
 8013150:	af00      	add	r7, sp, #0
 8013152:	6078      	str	r0, [r7, #4]
 8013154:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8013156:	230e      	movs	r3, #14
 8013158:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	895b      	ldrh	r3, [r3, #10]
 801315e:	2b0e      	cmp	r3, #14
 8013160:	d96e      	bls.n	8013240 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	7bdb      	ldrb	r3, [r3, #15]
 8013166:	2b00      	cmp	r3, #0
 8013168:	d106      	bne.n	8013178 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801316a:	683b      	ldr	r3, [r7, #0]
 801316c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013170:	3301      	adds	r3, #1
 8013172:	b2da      	uxtb	r2, r3
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	685b      	ldr	r3, [r3, #4]
 801317c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801317e:	693b      	ldr	r3, [r7, #16]
 8013180:	7b1a      	ldrb	r2, [r3, #12]
 8013182:	7b5b      	ldrb	r3, [r3, #13]
 8013184:	021b      	lsls	r3, r3, #8
 8013186:	4313      	orrs	r3, r2
 8013188:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801318a:	693b      	ldr	r3, [r7, #16]
 801318c:	781b      	ldrb	r3, [r3, #0]
 801318e:	f003 0301 	and.w	r3, r3, #1
 8013192:	2b00      	cmp	r3, #0
 8013194:	d023      	beq.n	80131de <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8013196:	693b      	ldr	r3, [r7, #16]
 8013198:	781b      	ldrb	r3, [r3, #0]
 801319a:	2b01      	cmp	r3, #1
 801319c:	d10f      	bne.n	80131be <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801319e:	693b      	ldr	r3, [r7, #16]
 80131a0:	785b      	ldrb	r3, [r3, #1]
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d11b      	bne.n	80131de <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80131a6:	693b      	ldr	r3, [r7, #16]
 80131a8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80131aa:	2b5e      	cmp	r3, #94	; 0x5e
 80131ac:	d117      	bne.n	80131de <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	7b5b      	ldrb	r3, [r3, #13]
 80131b2:	f043 0310 	orr.w	r3, r3, #16
 80131b6:	b2da      	uxtb	r2, r3
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	735a      	strb	r2, [r3, #13]
 80131bc:	e00f      	b.n	80131de <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80131be:	693b      	ldr	r3, [r7, #16]
 80131c0:	2206      	movs	r2, #6
 80131c2:	4928      	ldr	r1, [pc, #160]	; (8013264 <ethernet_input+0x118>)
 80131c4:	4618      	mov	r0, r3
 80131c6:	f000 faca 	bl	801375e <memcmp>
 80131ca:	4603      	mov	r3, r0
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d106      	bne.n	80131de <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	7b5b      	ldrb	r3, [r3, #13]
 80131d4:	f043 0308 	orr.w	r3, r3, #8
 80131d8:	b2da      	uxtb	r2, r3
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80131de:	89fb      	ldrh	r3, [r7, #14]
 80131e0:	2b08      	cmp	r3, #8
 80131e2:	d003      	beq.n	80131ec <ethernet_input+0xa0>
 80131e4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80131e8:	d014      	beq.n	8013214 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80131ea:	e032      	b.n	8013252 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80131ec:	683b      	ldr	r3, [r7, #0]
 80131ee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80131f2:	f003 0308 	and.w	r3, r3, #8
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d024      	beq.n	8013244 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80131fa:	8afb      	ldrh	r3, [r7, #22]
 80131fc:	4619      	mov	r1, r3
 80131fe:	6878      	ldr	r0, [r7, #4]
 8013200:	f7f5 fc48 	bl	8008a94 <pbuf_remove_header>
 8013204:	4603      	mov	r3, r0
 8013206:	2b00      	cmp	r3, #0
 8013208:	d11e      	bne.n	8013248 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801320a:	6839      	ldr	r1, [r7, #0]
 801320c:	6878      	ldr	r0, [r7, #4]
 801320e:	f7fe ff09 	bl	8012024 <ip4_input>
      break;
 8013212:	e013      	b.n	801323c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013214:	683b      	ldr	r3, [r7, #0]
 8013216:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801321a:	f003 0308 	and.w	r3, r3, #8
 801321e:	2b00      	cmp	r3, #0
 8013220:	d014      	beq.n	801324c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013222:	8afb      	ldrh	r3, [r7, #22]
 8013224:	4619      	mov	r1, r3
 8013226:	6878      	ldr	r0, [r7, #4]
 8013228:	f7f5 fc34 	bl	8008a94 <pbuf_remove_header>
 801322c:	4603      	mov	r3, r0
 801322e:	2b00      	cmp	r3, #0
 8013230:	d10e      	bne.n	8013250 <ethernet_input+0x104>
        etharp_input(p, netif);
 8013232:	6839      	ldr	r1, [r7, #0]
 8013234:	6878      	ldr	r0, [r7, #4]
 8013236:	f7fe f8a5 	bl	8011384 <etharp_input>
      break;
 801323a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801323c:	2300      	movs	r3, #0
 801323e:	e00c      	b.n	801325a <ethernet_input+0x10e>
    goto free_and_return;
 8013240:	bf00      	nop
 8013242:	e006      	b.n	8013252 <ethernet_input+0x106>
        goto free_and_return;
 8013244:	bf00      	nop
 8013246:	e004      	b.n	8013252 <ethernet_input+0x106>
        goto free_and_return;
 8013248:	bf00      	nop
 801324a:	e002      	b.n	8013252 <ethernet_input+0x106>
        goto free_and_return;
 801324c:	bf00      	nop
 801324e:	e000      	b.n	8013252 <ethernet_input+0x106>
        goto free_and_return;
 8013250:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8013252:	6878      	ldr	r0, [r7, #4]
 8013254:	f7f5 fca4 	bl	8008ba0 <pbuf_free>
  return ERR_OK;
 8013258:	2300      	movs	r3, #0
}
 801325a:	4618      	mov	r0, r3
 801325c:	3718      	adds	r7, #24
 801325e:	46bd      	mov	sp, r7
 8013260:	bd80      	pop	{r7, pc}
 8013262:	bf00      	nop
 8013264:	0801770c 	.word	0x0801770c

08013268 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8013268:	b580      	push	{r7, lr}
 801326a:	b086      	sub	sp, #24
 801326c:	af00      	add	r7, sp, #0
 801326e:	60f8      	str	r0, [r7, #12]
 8013270:	60b9      	str	r1, [r7, #8]
 8013272:	607a      	str	r2, [r7, #4]
 8013274:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013276:	8c3b      	ldrh	r3, [r7, #32]
 8013278:	4618      	mov	r0, r3
 801327a:	f7f4 f8d9 	bl	8007430 <lwip_htons>
 801327e:	4603      	mov	r3, r0
 8013280:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8013282:	210e      	movs	r1, #14
 8013284:	68b8      	ldr	r0, [r7, #8]
 8013286:	f7f5 fbf5 	bl	8008a74 <pbuf_add_header>
 801328a:	4603      	mov	r3, r0
 801328c:	2b00      	cmp	r3, #0
 801328e:	d125      	bne.n	80132dc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8013290:	68bb      	ldr	r3, [r7, #8]
 8013292:	685b      	ldr	r3, [r3, #4]
 8013294:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8013296:	693b      	ldr	r3, [r7, #16]
 8013298:	8afa      	ldrh	r2, [r7, #22]
 801329a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801329c:	693b      	ldr	r3, [r7, #16]
 801329e:	2206      	movs	r2, #6
 80132a0:	6839      	ldr	r1, [r7, #0]
 80132a2:	4618      	mov	r0, r3
 80132a4:	f000 fa69 	bl	801377a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80132a8:	693b      	ldr	r3, [r7, #16]
 80132aa:	3306      	adds	r3, #6
 80132ac:	2206      	movs	r2, #6
 80132ae:	6879      	ldr	r1, [r7, #4]
 80132b0:	4618      	mov	r0, r3
 80132b2:	f000 fa62 	bl	801377a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80132bc:	2b06      	cmp	r3, #6
 80132be:	d006      	beq.n	80132ce <ethernet_output+0x66>
 80132c0:	4b0a      	ldr	r3, [pc, #40]	; (80132ec <ethernet_output+0x84>)
 80132c2:	f44f 7299 	mov.w	r2, #306	; 0x132
 80132c6:	490a      	ldr	r1, [pc, #40]	; (80132f0 <ethernet_output+0x88>)
 80132c8:	480a      	ldr	r0, [pc, #40]	; (80132f4 <ethernet_output+0x8c>)
 80132ca:	f000 fac7 	bl	801385c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	699b      	ldr	r3, [r3, #24]
 80132d2:	68b9      	ldr	r1, [r7, #8]
 80132d4:	68f8      	ldr	r0, [r7, #12]
 80132d6:	4798      	blx	r3
 80132d8:	4603      	mov	r3, r0
 80132da:	e002      	b.n	80132e2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80132dc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80132de:	f06f 0301 	mvn.w	r3, #1
}
 80132e2:	4618      	mov	r0, r3
 80132e4:	3718      	adds	r7, #24
 80132e6:	46bd      	mov	sp, r7
 80132e8:	bd80      	pop	{r7, pc}
 80132ea:	bf00      	nop
 80132ec:	08017538 	.word	0x08017538
 80132f0:	08017570 	.word	0x08017570
 80132f4:	080175a4 	.word	0x080175a4

080132f8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80132f8:	b580      	push	{r7, lr}
 80132fa:	b086      	sub	sp, #24
 80132fc:	af00      	add	r7, sp, #0
 80132fe:	6078      	str	r0, [r7, #4]
 8013300:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8013302:	683b      	ldr	r3, [r7, #0]
 8013304:	60bb      	str	r3, [r7, #8]
 8013306:	2304      	movs	r3, #4
 8013308:	60fb      	str	r3, [r7, #12]
 801330a:	2300      	movs	r3, #0
 801330c:	613b      	str	r3, [r7, #16]
 801330e:	2300      	movs	r3, #0
 8013310:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8013312:	f107 0308 	add.w	r3, r7, #8
 8013316:	2100      	movs	r1, #0
 8013318:	4618      	mov	r0, r3
 801331a:	f7f1 f9a7 	bl	800466c <osMessageCreate>
 801331e:	4602      	mov	r2, r0
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	2b00      	cmp	r3, #0
 801332a:	d102      	bne.n	8013332 <sys_mbox_new+0x3a>
    return ERR_MEM;
 801332c:	f04f 33ff 	mov.w	r3, #4294967295
 8013330:	e000      	b.n	8013334 <sys_mbox_new+0x3c>

  return ERR_OK;
 8013332:	2300      	movs	r3, #0
}
 8013334:	4618      	mov	r0, r3
 8013336:	3718      	adds	r7, #24
 8013338:	46bd      	mov	sp, r7
 801333a:	bd80      	pop	{r7, pc}

0801333c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801333c:	b580      	push	{r7, lr}
 801333e:	b084      	sub	sp, #16
 8013340:	af00      	add	r7, sp, #0
 8013342:	6078      	str	r0, [r7, #4]
 8013344:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	6839      	ldr	r1, [r7, #0]
 801334c:	2200      	movs	r2, #0
 801334e:	4618      	mov	r0, r3
 8013350:	f7f1 f9b4 	bl	80046bc <osMessagePut>
 8013354:	4603      	mov	r3, r0
 8013356:	2b00      	cmp	r3, #0
 8013358:	d102      	bne.n	8013360 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801335a:	2300      	movs	r3, #0
 801335c:	73fb      	strb	r3, [r7, #15]
 801335e:	e001      	b.n	8013364 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8013360:	23ff      	movs	r3, #255	; 0xff
 8013362:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8013364:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013368:	4618      	mov	r0, r3
 801336a:	3710      	adds	r7, #16
 801336c:	46bd      	mov	sp, r7
 801336e:	bd80      	pop	{r7, pc}

08013370 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8013370:	b580      	push	{r7, lr}
 8013372:	b08c      	sub	sp, #48	; 0x30
 8013374:	af00      	add	r7, sp, #0
 8013376:	61f8      	str	r0, [r7, #28]
 8013378:	61b9      	str	r1, [r7, #24]
 801337a:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801337c:	f7f0 ffb3 	bl	80042e6 <osKernelSysTick>
 8013380:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8013382:	697b      	ldr	r3, [r7, #20]
 8013384:	2b00      	cmp	r3, #0
 8013386:	d017      	beq.n	80133b8 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8013388:	69fb      	ldr	r3, [r7, #28]
 801338a:	6819      	ldr	r1, [r3, #0]
 801338c:	f107 0320 	add.w	r3, r7, #32
 8013390:	697a      	ldr	r2, [r7, #20]
 8013392:	4618      	mov	r0, r3
 8013394:	f7f1 f9d2 	bl	800473c <osMessageGet>

    if(event.status == osEventMessage)
 8013398:	6a3b      	ldr	r3, [r7, #32]
 801339a:	2b10      	cmp	r3, #16
 801339c:	d109      	bne.n	80133b2 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133a0:	461a      	mov	r2, r3
 80133a2:	69bb      	ldr	r3, [r7, #24]
 80133a4:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80133a6:	f7f0 ff9e 	bl	80042e6 <osKernelSysTick>
 80133aa:	4602      	mov	r2, r0
 80133ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133ae:	1ad3      	subs	r3, r2, r3
 80133b0:	e019      	b.n	80133e6 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80133b2:	f04f 33ff 	mov.w	r3, #4294967295
 80133b6:	e016      	b.n	80133e6 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 80133b8:	69fb      	ldr	r3, [r7, #28]
 80133ba:	6819      	ldr	r1, [r3, #0]
 80133bc:	463b      	mov	r3, r7
 80133be:	f04f 32ff 	mov.w	r2, #4294967295
 80133c2:	4618      	mov	r0, r3
 80133c4:	f7f1 f9ba 	bl	800473c <osMessageGet>
 80133c8:	f107 0320 	add.w	r3, r7, #32
 80133cc:	463a      	mov	r2, r7
 80133ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80133d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80133d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133d6:	461a      	mov	r2, r3
 80133d8:	69bb      	ldr	r3, [r7, #24]
 80133da:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80133dc:	f7f0 ff83 	bl	80042e6 <osKernelSysTick>
 80133e0:	4602      	mov	r2, r0
 80133e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133e4:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80133e6:	4618      	mov	r0, r3
 80133e8:	3730      	adds	r7, #48	; 0x30
 80133ea:	46bd      	mov	sp, r7
 80133ec:	bd80      	pop	{r7, pc}

080133ee <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80133ee:	b480      	push	{r7}
 80133f0:	b083      	sub	sp, #12
 80133f2:	af00      	add	r7, sp, #0
 80133f4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d101      	bne.n	8013402 <sys_mbox_valid+0x14>
    return 0;
 80133fe:	2300      	movs	r3, #0
 8013400:	e000      	b.n	8013404 <sys_mbox_valid+0x16>
  else
    return 1;
 8013402:	2301      	movs	r3, #1
}
 8013404:	4618      	mov	r0, r3
 8013406:	370c      	adds	r7, #12
 8013408:	46bd      	mov	sp, r7
 801340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801340e:	4770      	bx	lr

08013410 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8013410:	b580      	push	{r7, lr}
 8013412:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8013414:	4803      	ldr	r0, [pc, #12]	; (8013424 <sys_init+0x14>)
 8013416:	f7f0 ffd6 	bl	80043c6 <osMutexCreate>
 801341a:	4603      	mov	r3, r0
 801341c:	4a02      	ldr	r2, [pc, #8]	; (8013428 <sys_init+0x18>)
 801341e:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8013420:	bf00      	nop
 8013422:	bd80      	pop	{r7, pc}
 8013424:	0801771c 	.word	0x0801771c
 8013428:	2000efa0 	.word	0x2000efa0

0801342c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801342c:	b580      	push	{r7, lr}
 801342e:	b084      	sub	sp, #16
 8013430:	af00      	add	r7, sp, #0
 8013432:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8013434:	2300      	movs	r3, #0
 8013436:	60bb      	str	r3, [r7, #8]
 8013438:	2300      	movs	r3, #0
 801343a:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801343c:	f107 0308 	add.w	r3, r7, #8
 8013440:	4618      	mov	r0, r3
 8013442:	f7f0 ffc0 	bl	80043c6 <osMutexCreate>
 8013446:	4602      	mov	r2, r0
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	2b00      	cmp	r3, #0
 8013452:	d102      	bne.n	801345a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8013454:	f04f 33ff 	mov.w	r3, #4294967295
 8013458:	e000      	b.n	801345c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801345a:	2300      	movs	r3, #0
}
 801345c:	4618      	mov	r0, r3
 801345e:	3710      	adds	r7, #16
 8013460:	46bd      	mov	sp, r7
 8013462:	bd80      	pop	{r7, pc}

08013464 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8013464:	b580      	push	{r7, lr}
 8013466:	b082      	sub	sp, #8
 8013468:	af00      	add	r7, sp, #0
 801346a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	f04f 31ff 	mov.w	r1, #4294967295
 8013474:	4618      	mov	r0, r3
 8013476:	f7f0 ffbf 	bl	80043f8 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801347a:	bf00      	nop
 801347c:	3708      	adds	r7, #8
 801347e:	46bd      	mov	sp, r7
 8013480:	bd80      	pop	{r7, pc}

08013482 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8013482:	b580      	push	{r7, lr}
 8013484:	b082      	sub	sp, #8
 8013486:	af00      	add	r7, sp, #0
 8013488:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	4618      	mov	r0, r3
 8013490:	f7f1 f800 	bl	8004494 <osMutexRelease>
}
 8013494:	bf00      	nop
 8013496:	3708      	adds	r7, #8
 8013498:	46bd      	mov	sp, r7
 801349a:	bd80      	pop	{r7, pc}

0801349c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801349c:	b580      	push	{r7, lr}
 801349e:	b08c      	sub	sp, #48	; 0x30
 80134a0:	af00      	add	r7, sp, #0
 80134a2:	60f8      	str	r0, [r7, #12]
 80134a4:	60b9      	str	r1, [r7, #8]
 80134a6:	607a      	str	r2, [r7, #4]
 80134a8:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80134aa:	f107 0314 	add.w	r3, r7, #20
 80134ae:	2200      	movs	r2, #0
 80134b0:	601a      	str	r2, [r3, #0]
 80134b2:	605a      	str	r2, [r3, #4]
 80134b4:	609a      	str	r2, [r3, #8]
 80134b6:	60da      	str	r2, [r3, #12]
 80134b8:	611a      	str	r2, [r3, #16]
 80134ba:	615a      	str	r2, [r3, #20]
 80134bc:	619a      	str	r2, [r3, #24]
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	617b      	str	r3, [r7, #20]
 80134c2:	68bb      	ldr	r3, [r7, #8]
 80134c4:	61bb      	str	r3, [r7, #24]
 80134c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134c8:	b21b      	sxth	r3, r3
 80134ca:	83bb      	strh	r3, [r7, #28]
 80134cc:	683b      	ldr	r3, [r7, #0]
 80134ce:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 80134d0:	f107 0314 	add.w	r3, r7, #20
 80134d4:	6879      	ldr	r1, [r7, #4]
 80134d6:	4618      	mov	r0, r3
 80134d8:	f7f0 ff15 	bl	8004306 <osThreadCreate>
 80134dc:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80134de:	4618      	mov	r0, r3
 80134e0:	3730      	adds	r7, #48	; 0x30
 80134e2:	46bd      	mov	sp, r7
 80134e4:	bd80      	pop	{r7, pc}
	...

080134e8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80134e8:	b580      	push	{r7, lr}
 80134ea:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80134ec:	4b04      	ldr	r3, [pc, #16]	; (8013500 <sys_arch_protect+0x18>)
 80134ee:	681b      	ldr	r3, [r3, #0]
 80134f0:	f04f 31ff 	mov.w	r1, #4294967295
 80134f4:	4618      	mov	r0, r3
 80134f6:	f7f0 ff7f 	bl	80043f8 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80134fa:	2301      	movs	r3, #1
}
 80134fc:	4618      	mov	r0, r3
 80134fe:	bd80      	pop	{r7, pc}
 8013500:	2000efa0 	.word	0x2000efa0

08013504 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8013504:	b580      	push	{r7, lr}
 8013506:	b082      	sub	sp, #8
 8013508:	af00      	add	r7, sp, #0
 801350a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801350c:	4b04      	ldr	r3, [pc, #16]	; (8013520 <sys_arch_unprotect+0x1c>)
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	4618      	mov	r0, r3
 8013512:	f7f0 ffbf 	bl	8004494 <osMutexRelease>
}
 8013516:	bf00      	nop
 8013518:	3708      	adds	r7, #8
 801351a:	46bd      	mov	sp, r7
 801351c:	bd80      	pop	{r7, pc}
 801351e:	bf00      	nop
 8013520:	2000efa0 	.word	0x2000efa0

08013524 <std>:
 8013524:	2300      	movs	r3, #0
 8013526:	b510      	push	{r4, lr}
 8013528:	4604      	mov	r4, r0
 801352a:	e9c0 3300 	strd	r3, r3, [r0]
 801352e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013532:	6083      	str	r3, [r0, #8]
 8013534:	8181      	strh	r1, [r0, #12]
 8013536:	6643      	str	r3, [r0, #100]	; 0x64
 8013538:	81c2      	strh	r2, [r0, #14]
 801353a:	6183      	str	r3, [r0, #24]
 801353c:	4619      	mov	r1, r3
 801353e:	2208      	movs	r2, #8
 8013540:	305c      	adds	r0, #92	; 0x5c
 8013542:	f000 f928 	bl	8013796 <memset>
 8013546:	4b05      	ldr	r3, [pc, #20]	; (801355c <std+0x38>)
 8013548:	6263      	str	r3, [r4, #36]	; 0x24
 801354a:	4b05      	ldr	r3, [pc, #20]	; (8013560 <std+0x3c>)
 801354c:	62a3      	str	r3, [r4, #40]	; 0x28
 801354e:	4b05      	ldr	r3, [pc, #20]	; (8013564 <std+0x40>)
 8013550:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013552:	4b05      	ldr	r3, [pc, #20]	; (8013568 <std+0x44>)
 8013554:	6224      	str	r4, [r4, #32]
 8013556:	6323      	str	r3, [r4, #48]	; 0x30
 8013558:	bd10      	pop	{r4, pc}
 801355a:	bf00      	nop
 801355c:	08013a01 	.word	0x08013a01
 8013560:	08013a23 	.word	0x08013a23
 8013564:	08013a5b 	.word	0x08013a5b
 8013568:	08013a7f 	.word	0x08013a7f

0801356c <_cleanup_r>:
 801356c:	4901      	ldr	r1, [pc, #4]	; (8013574 <_cleanup_r+0x8>)
 801356e:	f000 b8af 	b.w	80136d0 <_fwalk_reent>
 8013572:	bf00      	nop
 8013574:	08013c15 	.word	0x08013c15

08013578 <__sfmoreglue>:
 8013578:	b570      	push	{r4, r5, r6, lr}
 801357a:	1e4a      	subs	r2, r1, #1
 801357c:	2568      	movs	r5, #104	; 0x68
 801357e:	4355      	muls	r5, r2
 8013580:	460e      	mov	r6, r1
 8013582:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013586:	f000 f90f 	bl	80137a8 <_malloc_r>
 801358a:	4604      	mov	r4, r0
 801358c:	b140      	cbz	r0, 80135a0 <__sfmoreglue+0x28>
 801358e:	2100      	movs	r1, #0
 8013590:	e9c0 1600 	strd	r1, r6, [r0]
 8013594:	300c      	adds	r0, #12
 8013596:	60a0      	str	r0, [r4, #8]
 8013598:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801359c:	f000 f8fb 	bl	8013796 <memset>
 80135a0:	4620      	mov	r0, r4
 80135a2:	bd70      	pop	{r4, r5, r6, pc}

080135a4 <__sfp_lock_acquire>:
 80135a4:	4801      	ldr	r0, [pc, #4]	; (80135ac <__sfp_lock_acquire+0x8>)
 80135a6:	f000 b8d8 	b.w	801375a <__retarget_lock_acquire_recursive>
 80135aa:	bf00      	nop
 80135ac:	2000efac 	.word	0x2000efac

080135b0 <__sfp_lock_release>:
 80135b0:	4801      	ldr	r0, [pc, #4]	; (80135b8 <__sfp_lock_release+0x8>)
 80135b2:	f000 b8d3 	b.w	801375c <__retarget_lock_release_recursive>
 80135b6:	bf00      	nop
 80135b8:	2000efac 	.word	0x2000efac

080135bc <__sinit_lock_acquire>:
 80135bc:	4801      	ldr	r0, [pc, #4]	; (80135c4 <__sinit_lock_acquire+0x8>)
 80135be:	f000 b8cc 	b.w	801375a <__retarget_lock_acquire_recursive>
 80135c2:	bf00      	nop
 80135c4:	2000efa7 	.word	0x2000efa7

080135c8 <__sinit_lock_release>:
 80135c8:	4801      	ldr	r0, [pc, #4]	; (80135d0 <__sinit_lock_release+0x8>)
 80135ca:	f000 b8c7 	b.w	801375c <__retarget_lock_release_recursive>
 80135ce:	bf00      	nop
 80135d0:	2000efa7 	.word	0x2000efa7

080135d4 <__sinit>:
 80135d4:	b510      	push	{r4, lr}
 80135d6:	4604      	mov	r4, r0
 80135d8:	f7ff fff0 	bl	80135bc <__sinit_lock_acquire>
 80135dc:	69a3      	ldr	r3, [r4, #24]
 80135de:	b11b      	cbz	r3, 80135e8 <__sinit+0x14>
 80135e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80135e4:	f7ff bff0 	b.w	80135c8 <__sinit_lock_release>
 80135e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80135ec:	6523      	str	r3, [r4, #80]	; 0x50
 80135ee:	4b13      	ldr	r3, [pc, #76]	; (801363c <__sinit+0x68>)
 80135f0:	4a13      	ldr	r2, [pc, #76]	; (8013640 <__sinit+0x6c>)
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80135f6:	42a3      	cmp	r3, r4
 80135f8:	bf04      	itt	eq
 80135fa:	2301      	moveq	r3, #1
 80135fc:	61a3      	streq	r3, [r4, #24]
 80135fe:	4620      	mov	r0, r4
 8013600:	f000 f820 	bl	8013644 <__sfp>
 8013604:	6060      	str	r0, [r4, #4]
 8013606:	4620      	mov	r0, r4
 8013608:	f000 f81c 	bl	8013644 <__sfp>
 801360c:	60a0      	str	r0, [r4, #8]
 801360e:	4620      	mov	r0, r4
 8013610:	f000 f818 	bl	8013644 <__sfp>
 8013614:	2200      	movs	r2, #0
 8013616:	60e0      	str	r0, [r4, #12]
 8013618:	2104      	movs	r1, #4
 801361a:	6860      	ldr	r0, [r4, #4]
 801361c:	f7ff ff82 	bl	8013524 <std>
 8013620:	68a0      	ldr	r0, [r4, #8]
 8013622:	2201      	movs	r2, #1
 8013624:	2109      	movs	r1, #9
 8013626:	f7ff ff7d 	bl	8013524 <std>
 801362a:	68e0      	ldr	r0, [r4, #12]
 801362c:	2202      	movs	r2, #2
 801362e:	2112      	movs	r1, #18
 8013630:	f7ff ff78 	bl	8013524 <std>
 8013634:	2301      	movs	r3, #1
 8013636:	61a3      	str	r3, [r4, #24]
 8013638:	e7d2      	b.n	80135e0 <__sinit+0xc>
 801363a:	bf00      	nop
 801363c:	08017784 	.word	0x08017784
 8013640:	0801356d 	.word	0x0801356d

08013644 <__sfp>:
 8013644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013646:	4607      	mov	r7, r0
 8013648:	f7ff ffac 	bl	80135a4 <__sfp_lock_acquire>
 801364c:	4b1e      	ldr	r3, [pc, #120]	; (80136c8 <__sfp+0x84>)
 801364e:	681e      	ldr	r6, [r3, #0]
 8013650:	69b3      	ldr	r3, [r6, #24]
 8013652:	b913      	cbnz	r3, 801365a <__sfp+0x16>
 8013654:	4630      	mov	r0, r6
 8013656:	f7ff ffbd 	bl	80135d4 <__sinit>
 801365a:	3648      	adds	r6, #72	; 0x48
 801365c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013660:	3b01      	subs	r3, #1
 8013662:	d503      	bpl.n	801366c <__sfp+0x28>
 8013664:	6833      	ldr	r3, [r6, #0]
 8013666:	b30b      	cbz	r3, 80136ac <__sfp+0x68>
 8013668:	6836      	ldr	r6, [r6, #0]
 801366a:	e7f7      	b.n	801365c <__sfp+0x18>
 801366c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013670:	b9d5      	cbnz	r5, 80136a8 <__sfp+0x64>
 8013672:	4b16      	ldr	r3, [pc, #88]	; (80136cc <__sfp+0x88>)
 8013674:	60e3      	str	r3, [r4, #12]
 8013676:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801367a:	6665      	str	r5, [r4, #100]	; 0x64
 801367c:	f000 f86c 	bl	8013758 <__retarget_lock_init_recursive>
 8013680:	f7ff ff96 	bl	80135b0 <__sfp_lock_release>
 8013684:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013688:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801368c:	6025      	str	r5, [r4, #0]
 801368e:	61a5      	str	r5, [r4, #24]
 8013690:	2208      	movs	r2, #8
 8013692:	4629      	mov	r1, r5
 8013694:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013698:	f000 f87d 	bl	8013796 <memset>
 801369c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80136a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80136a4:	4620      	mov	r0, r4
 80136a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80136a8:	3468      	adds	r4, #104	; 0x68
 80136aa:	e7d9      	b.n	8013660 <__sfp+0x1c>
 80136ac:	2104      	movs	r1, #4
 80136ae:	4638      	mov	r0, r7
 80136b0:	f7ff ff62 	bl	8013578 <__sfmoreglue>
 80136b4:	4604      	mov	r4, r0
 80136b6:	6030      	str	r0, [r6, #0]
 80136b8:	2800      	cmp	r0, #0
 80136ba:	d1d5      	bne.n	8013668 <__sfp+0x24>
 80136bc:	f7ff ff78 	bl	80135b0 <__sfp_lock_release>
 80136c0:	230c      	movs	r3, #12
 80136c2:	603b      	str	r3, [r7, #0]
 80136c4:	e7ee      	b.n	80136a4 <__sfp+0x60>
 80136c6:	bf00      	nop
 80136c8:	08017784 	.word	0x08017784
 80136cc:	ffff0001 	.word	0xffff0001

080136d0 <_fwalk_reent>:
 80136d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80136d4:	4606      	mov	r6, r0
 80136d6:	4688      	mov	r8, r1
 80136d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80136dc:	2700      	movs	r7, #0
 80136de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80136e2:	f1b9 0901 	subs.w	r9, r9, #1
 80136e6:	d505      	bpl.n	80136f4 <_fwalk_reent+0x24>
 80136e8:	6824      	ldr	r4, [r4, #0]
 80136ea:	2c00      	cmp	r4, #0
 80136ec:	d1f7      	bne.n	80136de <_fwalk_reent+0xe>
 80136ee:	4638      	mov	r0, r7
 80136f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80136f4:	89ab      	ldrh	r3, [r5, #12]
 80136f6:	2b01      	cmp	r3, #1
 80136f8:	d907      	bls.n	801370a <_fwalk_reent+0x3a>
 80136fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80136fe:	3301      	adds	r3, #1
 8013700:	d003      	beq.n	801370a <_fwalk_reent+0x3a>
 8013702:	4629      	mov	r1, r5
 8013704:	4630      	mov	r0, r6
 8013706:	47c0      	blx	r8
 8013708:	4307      	orrs	r7, r0
 801370a:	3568      	adds	r5, #104	; 0x68
 801370c:	e7e9      	b.n	80136e2 <_fwalk_reent+0x12>
	...

08013710 <__libc_init_array>:
 8013710:	b570      	push	{r4, r5, r6, lr}
 8013712:	4d0d      	ldr	r5, [pc, #52]	; (8013748 <__libc_init_array+0x38>)
 8013714:	4c0d      	ldr	r4, [pc, #52]	; (801374c <__libc_init_array+0x3c>)
 8013716:	1b64      	subs	r4, r4, r5
 8013718:	10a4      	asrs	r4, r4, #2
 801371a:	2600      	movs	r6, #0
 801371c:	42a6      	cmp	r6, r4
 801371e:	d109      	bne.n	8013734 <__libc_init_array+0x24>
 8013720:	4d0b      	ldr	r5, [pc, #44]	; (8013750 <__libc_init_array+0x40>)
 8013722:	4c0c      	ldr	r4, [pc, #48]	; (8013754 <__libc_init_array+0x44>)
 8013724:	f000 ffcc 	bl	80146c0 <_init>
 8013728:	1b64      	subs	r4, r4, r5
 801372a:	10a4      	asrs	r4, r4, #2
 801372c:	2600      	movs	r6, #0
 801372e:	42a6      	cmp	r6, r4
 8013730:	d105      	bne.n	801373e <__libc_init_array+0x2e>
 8013732:	bd70      	pop	{r4, r5, r6, pc}
 8013734:	f855 3b04 	ldr.w	r3, [r5], #4
 8013738:	4798      	blx	r3
 801373a:	3601      	adds	r6, #1
 801373c:	e7ee      	b.n	801371c <__libc_init_array+0xc>
 801373e:	f855 3b04 	ldr.w	r3, [r5], #4
 8013742:	4798      	blx	r3
 8013744:	3601      	adds	r6, #1
 8013746:	e7f2      	b.n	801372e <__libc_init_array+0x1e>
 8013748:	08017878 	.word	0x08017878
 801374c:	08017878 	.word	0x08017878
 8013750:	08017878 	.word	0x08017878
 8013754:	0801787c 	.word	0x0801787c

08013758 <__retarget_lock_init_recursive>:
 8013758:	4770      	bx	lr

0801375a <__retarget_lock_acquire_recursive>:
 801375a:	4770      	bx	lr

0801375c <__retarget_lock_release_recursive>:
 801375c:	4770      	bx	lr

0801375e <memcmp>:
 801375e:	b530      	push	{r4, r5, lr}
 8013760:	3901      	subs	r1, #1
 8013762:	2400      	movs	r4, #0
 8013764:	42a2      	cmp	r2, r4
 8013766:	d101      	bne.n	801376c <memcmp+0xe>
 8013768:	2000      	movs	r0, #0
 801376a:	e005      	b.n	8013778 <memcmp+0x1a>
 801376c:	5d03      	ldrb	r3, [r0, r4]
 801376e:	3401      	adds	r4, #1
 8013770:	5d0d      	ldrb	r5, [r1, r4]
 8013772:	42ab      	cmp	r3, r5
 8013774:	d0f6      	beq.n	8013764 <memcmp+0x6>
 8013776:	1b58      	subs	r0, r3, r5
 8013778:	bd30      	pop	{r4, r5, pc}

0801377a <memcpy>:
 801377a:	440a      	add	r2, r1
 801377c:	4291      	cmp	r1, r2
 801377e:	f100 33ff 	add.w	r3, r0, #4294967295
 8013782:	d100      	bne.n	8013786 <memcpy+0xc>
 8013784:	4770      	bx	lr
 8013786:	b510      	push	{r4, lr}
 8013788:	f811 4b01 	ldrb.w	r4, [r1], #1
 801378c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013790:	4291      	cmp	r1, r2
 8013792:	d1f9      	bne.n	8013788 <memcpy+0xe>
 8013794:	bd10      	pop	{r4, pc}

08013796 <memset>:
 8013796:	4402      	add	r2, r0
 8013798:	4603      	mov	r3, r0
 801379a:	4293      	cmp	r3, r2
 801379c:	d100      	bne.n	80137a0 <memset+0xa>
 801379e:	4770      	bx	lr
 80137a0:	f803 1b01 	strb.w	r1, [r3], #1
 80137a4:	e7f9      	b.n	801379a <memset+0x4>
	...

080137a8 <_malloc_r>:
 80137a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137aa:	1ccd      	adds	r5, r1, #3
 80137ac:	f025 0503 	bic.w	r5, r5, #3
 80137b0:	3508      	adds	r5, #8
 80137b2:	2d0c      	cmp	r5, #12
 80137b4:	bf38      	it	cc
 80137b6:	250c      	movcc	r5, #12
 80137b8:	2d00      	cmp	r5, #0
 80137ba:	4606      	mov	r6, r0
 80137bc:	db01      	blt.n	80137c2 <_malloc_r+0x1a>
 80137be:	42a9      	cmp	r1, r5
 80137c0:	d903      	bls.n	80137ca <_malloc_r+0x22>
 80137c2:	230c      	movs	r3, #12
 80137c4:	6033      	str	r3, [r6, #0]
 80137c6:	2000      	movs	r0, #0
 80137c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80137ca:	f000 fa8b 	bl	8013ce4 <__malloc_lock>
 80137ce:	4921      	ldr	r1, [pc, #132]	; (8013854 <_malloc_r+0xac>)
 80137d0:	680a      	ldr	r2, [r1, #0]
 80137d2:	4614      	mov	r4, r2
 80137d4:	b99c      	cbnz	r4, 80137fe <_malloc_r+0x56>
 80137d6:	4f20      	ldr	r7, [pc, #128]	; (8013858 <_malloc_r+0xb0>)
 80137d8:	683b      	ldr	r3, [r7, #0]
 80137da:	b923      	cbnz	r3, 80137e6 <_malloc_r+0x3e>
 80137dc:	4621      	mov	r1, r4
 80137de:	4630      	mov	r0, r6
 80137e0:	f000 f8fe 	bl	80139e0 <_sbrk_r>
 80137e4:	6038      	str	r0, [r7, #0]
 80137e6:	4629      	mov	r1, r5
 80137e8:	4630      	mov	r0, r6
 80137ea:	f000 f8f9 	bl	80139e0 <_sbrk_r>
 80137ee:	1c43      	adds	r3, r0, #1
 80137f0:	d123      	bne.n	801383a <_malloc_r+0x92>
 80137f2:	230c      	movs	r3, #12
 80137f4:	6033      	str	r3, [r6, #0]
 80137f6:	4630      	mov	r0, r6
 80137f8:	f000 fa7a 	bl	8013cf0 <__malloc_unlock>
 80137fc:	e7e3      	b.n	80137c6 <_malloc_r+0x1e>
 80137fe:	6823      	ldr	r3, [r4, #0]
 8013800:	1b5b      	subs	r3, r3, r5
 8013802:	d417      	bmi.n	8013834 <_malloc_r+0x8c>
 8013804:	2b0b      	cmp	r3, #11
 8013806:	d903      	bls.n	8013810 <_malloc_r+0x68>
 8013808:	6023      	str	r3, [r4, #0]
 801380a:	441c      	add	r4, r3
 801380c:	6025      	str	r5, [r4, #0]
 801380e:	e004      	b.n	801381a <_malloc_r+0x72>
 8013810:	6863      	ldr	r3, [r4, #4]
 8013812:	42a2      	cmp	r2, r4
 8013814:	bf0c      	ite	eq
 8013816:	600b      	streq	r3, [r1, #0]
 8013818:	6053      	strne	r3, [r2, #4]
 801381a:	4630      	mov	r0, r6
 801381c:	f000 fa68 	bl	8013cf0 <__malloc_unlock>
 8013820:	f104 000b 	add.w	r0, r4, #11
 8013824:	1d23      	adds	r3, r4, #4
 8013826:	f020 0007 	bic.w	r0, r0, #7
 801382a:	1ac2      	subs	r2, r0, r3
 801382c:	d0cc      	beq.n	80137c8 <_malloc_r+0x20>
 801382e:	1a1b      	subs	r3, r3, r0
 8013830:	50a3      	str	r3, [r4, r2]
 8013832:	e7c9      	b.n	80137c8 <_malloc_r+0x20>
 8013834:	4622      	mov	r2, r4
 8013836:	6864      	ldr	r4, [r4, #4]
 8013838:	e7cc      	b.n	80137d4 <_malloc_r+0x2c>
 801383a:	1cc4      	adds	r4, r0, #3
 801383c:	f024 0403 	bic.w	r4, r4, #3
 8013840:	42a0      	cmp	r0, r4
 8013842:	d0e3      	beq.n	801380c <_malloc_r+0x64>
 8013844:	1a21      	subs	r1, r4, r0
 8013846:	4630      	mov	r0, r6
 8013848:	f000 f8ca 	bl	80139e0 <_sbrk_r>
 801384c:	3001      	adds	r0, #1
 801384e:	d1dd      	bne.n	801380c <_malloc_r+0x64>
 8013850:	e7cf      	b.n	80137f2 <_malloc_r+0x4a>
 8013852:	bf00      	nop
 8013854:	20008650 	.word	0x20008650
 8013858:	20008654 	.word	0x20008654

0801385c <iprintf>:
 801385c:	b40f      	push	{r0, r1, r2, r3}
 801385e:	4b0a      	ldr	r3, [pc, #40]	; (8013888 <iprintf+0x2c>)
 8013860:	b513      	push	{r0, r1, r4, lr}
 8013862:	681c      	ldr	r4, [r3, #0]
 8013864:	b124      	cbz	r4, 8013870 <iprintf+0x14>
 8013866:	69a3      	ldr	r3, [r4, #24]
 8013868:	b913      	cbnz	r3, 8013870 <iprintf+0x14>
 801386a:	4620      	mov	r0, r4
 801386c:	f7ff feb2 	bl	80135d4 <__sinit>
 8013870:	ab05      	add	r3, sp, #20
 8013872:	9a04      	ldr	r2, [sp, #16]
 8013874:	68a1      	ldr	r1, [r4, #8]
 8013876:	9301      	str	r3, [sp, #4]
 8013878:	4620      	mov	r0, r4
 801387a:	f000 fab9 	bl	8013df0 <_vfiprintf_r>
 801387e:	b002      	add	sp, #8
 8013880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013884:	b004      	add	sp, #16
 8013886:	4770      	bx	lr
 8013888:	20000020 	.word	0x20000020

0801388c <rand>:
 801388c:	4b17      	ldr	r3, [pc, #92]	; (80138ec <rand+0x60>)
 801388e:	b510      	push	{r4, lr}
 8013890:	681c      	ldr	r4, [r3, #0]
 8013892:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013894:	b9b3      	cbnz	r3, 80138c4 <rand+0x38>
 8013896:	2018      	movs	r0, #24
 8013898:	f000 fa1c 	bl	8013cd4 <malloc>
 801389c:	63a0      	str	r0, [r4, #56]	; 0x38
 801389e:	b928      	cbnz	r0, 80138ac <rand+0x20>
 80138a0:	4602      	mov	r2, r0
 80138a2:	4b13      	ldr	r3, [pc, #76]	; (80138f0 <rand+0x64>)
 80138a4:	4813      	ldr	r0, [pc, #76]	; (80138f4 <rand+0x68>)
 80138a6:	214e      	movs	r1, #78	; 0x4e
 80138a8:	f000 f900 	bl	8013aac <__assert_func>
 80138ac:	4a12      	ldr	r2, [pc, #72]	; (80138f8 <rand+0x6c>)
 80138ae:	4b13      	ldr	r3, [pc, #76]	; (80138fc <rand+0x70>)
 80138b0:	e9c0 2300 	strd	r2, r3, [r0]
 80138b4:	4b12      	ldr	r3, [pc, #72]	; (8013900 <rand+0x74>)
 80138b6:	6083      	str	r3, [r0, #8]
 80138b8:	230b      	movs	r3, #11
 80138ba:	8183      	strh	r3, [r0, #12]
 80138bc:	2201      	movs	r2, #1
 80138be:	2300      	movs	r3, #0
 80138c0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80138c4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80138c6:	480f      	ldr	r0, [pc, #60]	; (8013904 <rand+0x78>)
 80138c8:	690a      	ldr	r2, [r1, #16]
 80138ca:	694b      	ldr	r3, [r1, #20]
 80138cc:	4c0e      	ldr	r4, [pc, #56]	; (8013908 <rand+0x7c>)
 80138ce:	4350      	muls	r0, r2
 80138d0:	fb04 0003 	mla	r0, r4, r3, r0
 80138d4:	fba2 3404 	umull	r3, r4, r2, r4
 80138d8:	1c5a      	adds	r2, r3, #1
 80138da:	4404      	add	r4, r0
 80138dc:	f144 0000 	adc.w	r0, r4, #0
 80138e0:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80138e4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80138e8:	bd10      	pop	{r4, pc}
 80138ea:	bf00      	nop
 80138ec:	20000020 	.word	0x20000020
 80138f0:	08017788 	.word	0x08017788
 80138f4:	0801779f 	.word	0x0801779f
 80138f8:	abcd330e 	.word	0xabcd330e
 80138fc:	e66d1234 	.word	0xe66d1234
 8013900:	0005deec 	.word	0x0005deec
 8013904:	5851f42d 	.word	0x5851f42d
 8013908:	4c957f2d 	.word	0x4c957f2d

0801390c <cleanup_glue>:
 801390c:	b538      	push	{r3, r4, r5, lr}
 801390e:	460c      	mov	r4, r1
 8013910:	6809      	ldr	r1, [r1, #0]
 8013912:	4605      	mov	r5, r0
 8013914:	b109      	cbz	r1, 801391a <cleanup_glue+0xe>
 8013916:	f7ff fff9 	bl	801390c <cleanup_glue>
 801391a:	4621      	mov	r1, r4
 801391c:	4628      	mov	r0, r5
 801391e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013922:	f000 b9eb 	b.w	8013cfc <_free_r>
	...

08013928 <_reclaim_reent>:
 8013928:	4b2c      	ldr	r3, [pc, #176]	; (80139dc <_reclaim_reent+0xb4>)
 801392a:	681b      	ldr	r3, [r3, #0]
 801392c:	4283      	cmp	r3, r0
 801392e:	b570      	push	{r4, r5, r6, lr}
 8013930:	4604      	mov	r4, r0
 8013932:	d051      	beq.n	80139d8 <_reclaim_reent+0xb0>
 8013934:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013936:	b143      	cbz	r3, 801394a <_reclaim_reent+0x22>
 8013938:	68db      	ldr	r3, [r3, #12]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d14a      	bne.n	80139d4 <_reclaim_reent+0xac>
 801393e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013940:	6819      	ldr	r1, [r3, #0]
 8013942:	b111      	cbz	r1, 801394a <_reclaim_reent+0x22>
 8013944:	4620      	mov	r0, r4
 8013946:	f000 f9d9 	bl	8013cfc <_free_r>
 801394a:	6961      	ldr	r1, [r4, #20]
 801394c:	b111      	cbz	r1, 8013954 <_reclaim_reent+0x2c>
 801394e:	4620      	mov	r0, r4
 8013950:	f000 f9d4 	bl	8013cfc <_free_r>
 8013954:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013956:	b111      	cbz	r1, 801395e <_reclaim_reent+0x36>
 8013958:	4620      	mov	r0, r4
 801395a:	f000 f9cf 	bl	8013cfc <_free_r>
 801395e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8013960:	b111      	cbz	r1, 8013968 <_reclaim_reent+0x40>
 8013962:	4620      	mov	r0, r4
 8013964:	f000 f9ca 	bl	8013cfc <_free_r>
 8013968:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801396a:	b111      	cbz	r1, 8013972 <_reclaim_reent+0x4a>
 801396c:	4620      	mov	r0, r4
 801396e:	f000 f9c5 	bl	8013cfc <_free_r>
 8013972:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8013974:	b111      	cbz	r1, 801397c <_reclaim_reent+0x54>
 8013976:	4620      	mov	r0, r4
 8013978:	f000 f9c0 	bl	8013cfc <_free_r>
 801397c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801397e:	b111      	cbz	r1, 8013986 <_reclaim_reent+0x5e>
 8013980:	4620      	mov	r0, r4
 8013982:	f000 f9bb 	bl	8013cfc <_free_r>
 8013986:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8013988:	b111      	cbz	r1, 8013990 <_reclaim_reent+0x68>
 801398a:	4620      	mov	r0, r4
 801398c:	f000 f9b6 	bl	8013cfc <_free_r>
 8013990:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013992:	b111      	cbz	r1, 801399a <_reclaim_reent+0x72>
 8013994:	4620      	mov	r0, r4
 8013996:	f000 f9b1 	bl	8013cfc <_free_r>
 801399a:	69a3      	ldr	r3, [r4, #24]
 801399c:	b1e3      	cbz	r3, 80139d8 <_reclaim_reent+0xb0>
 801399e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80139a0:	4620      	mov	r0, r4
 80139a2:	4798      	blx	r3
 80139a4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80139a6:	b1b9      	cbz	r1, 80139d8 <_reclaim_reent+0xb0>
 80139a8:	4620      	mov	r0, r4
 80139aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80139ae:	f7ff bfad 	b.w	801390c <cleanup_glue>
 80139b2:	5949      	ldr	r1, [r1, r5]
 80139b4:	b941      	cbnz	r1, 80139c8 <_reclaim_reent+0xa0>
 80139b6:	3504      	adds	r5, #4
 80139b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80139ba:	2d80      	cmp	r5, #128	; 0x80
 80139bc:	68d9      	ldr	r1, [r3, #12]
 80139be:	d1f8      	bne.n	80139b2 <_reclaim_reent+0x8a>
 80139c0:	4620      	mov	r0, r4
 80139c2:	f000 f99b 	bl	8013cfc <_free_r>
 80139c6:	e7ba      	b.n	801393e <_reclaim_reent+0x16>
 80139c8:	680e      	ldr	r6, [r1, #0]
 80139ca:	4620      	mov	r0, r4
 80139cc:	f000 f996 	bl	8013cfc <_free_r>
 80139d0:	4631      	mov	r1, r6
 80139d2:	e7ef      	b.n	80139b4 <_reclaim_reent+0x8c>
 80139d4:	2500      	movs	r5, #0
 80139d6:	e7ef      	b.n	80139b8 <_reclaim_reent+0x90>
 80139d8:	bd70      	pop	{r4, r5, r6, pc}
 80139da:	bf00      	nop
 80139dc:	20000020 	.word	0x20000020

080139e0 <_sbrk_r>:
 80139e0:	b538      	push	{r3, r4, r5, lr}
 80139e2:	4d06      	ldr	r5, [pc, #24]	; (80139fc <_sbrk_r+0x1c>)
 80139e4:	2300      	movs	r3, #0
 80139e6:	4604      	mov	r4, r0
 80139e8:	4608      	mov	r0, r1
 80139ea:	602b      	str	r3, [r5, #0]
 80139ec:	f7ed f918 	bl	8000c20 <_sbrk>
 80139f0:	1c43      	adds	r3, r0, #1
 80139f2:	d102      	bne.n	80139fa <_sbrk_r+0x1a>
 80139f4:	682b      	ldr	r3, [r5, #0]
 80139f6:	b103      	cbz	r3, 80139fa <_sbrk_r+0x1a>
 80139f8:	6023      	str	r3, [r4, #0]
 80139fa:	bd38      	pop	{r3, r4, r5, pc}
 80139fc:	2000ef9c 	.word	0x2000ef9c

08013a00 <__sread>:
 8013a00:	b510      	push	{r4, lr}
 8013a02:	460c      	mov	r4, r1
 8013a04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a08:	f000 fcb6 	bl	8014378 <_read_r>
 8013a0c:	2800      	cmp	r0, #0
 8013a0e:	bfab      	itete	ge
 8013a10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013a12:	89a3      	ldrhlt	r3, [r4, #12]
 8013a14:	181b      	addge	r3, r3, r0
 8013a16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013a1a:	bfac      	ite	ge
 8013a1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8013a1e:	81a3      	strhlt	r3, [r4, #12]
 8013a20:	bd10      	pop	{r4, pc}

08013a22 <__swrite>:
 8013a22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a26:	461f      	mov	r7, r3
 8013a28:	898b      	ldrh	r3, [r1, #12]
 8013a2a:	05db      	lsls	r3, r3, #23
 8013a2c:	4605      	mov	r5, r0
 8013a2e:	460c      	mov	r4, r1
 8013a30:	4616      	mov	r6, r2
 8013a32:	d505      	bpl.n	8013a40 <__swrite+0x1e>
 8013a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a38:	2302      	movs	r3, #2
 8013a3a:	2200      	movs	r2, #0
 8013a3c:	f000 f938 	bl	8013cb0 <_lseek_r>
 8013a40:	89a3      	ldrh	r3, [r4, #12]
 8013a42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013a46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013a4a:	81a3      	strh	r3, [r4, #12]
 8013a4c:	4632      	mov	r2, r6
 8013a4e:	463b      	mov	r3, r7
 8013a50:	4628      	mov	r0, r5
 8013a52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013a56:	f000 b817 	b.w	8013a88 <_write_r>

08013a5a <__sseek>:
 8013a5a:	b510      	push	{r4, lr}
 8013a5c:	460c      	mov	r4, r1
 8013a5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a62:	f000 f925 	bl	8013cb0 <_lseek_r>
 8013a66:	1c43      	adds	r3, r0, #1
 8013a68:	89a3      	ldrh	r3, [r4, #12]
 8013a6a:	bf15      	itete	ne
 8013a6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8013a6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013a72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013a76:	81a3      	strheq	r3, [r4, #12]
 8013a78:	bf18      	it	ne
 8013a7a:	81a3      	strhne	r3, [r4, #12]
 8013a7c:	bd10      	pop	{r4, pc}

08013a7e <__sclose>:
 8013a7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a82:	f000 b831 	b.w	8013ae8 <_close_r>
	...

08013a88 <_write_r>:
 8013a88:	b538      	push	{r3, r4, r5, lr}
 8013a8a:	4d07      	ldr	r5, [pc, #28]	; (8013aa8 <_write_r+0x20>)
 8013a8c:	4604      	mov	r4, r0
 8013a8e:	4608      	mov	r0, r1
 8013a90:	4611      	mov	r1, r2
 8013a92:	2200      	movs	r2, #0
 8013a94:	602a      	str	r2, [r5, #0]
 8013a96:	461a      	mov	r2, r3
 8013a98:	f7ed f871 	bl	8000b7e <_write>
 8013a9c:	1c43      	adds	r3, r0, #1
 8013a9e:	d102      	bne.n	8013aa6 <_write_r+0x1e>
 8013aa0:	682b      	ldr	r3, [r5, #0]
 8013aa2:	b103      	cbz	r3, 8013aa6 <_write_r+0x1e>
 8013aa4:	6023      	str	r3, [r4, #0]
 8013aa6:	bd38      	pop	{r3, r4, r5, pc}
 8013aa8:	2000ef9c 	.word	0x2000ef9c

08013aac <__assert_func>:
 8013aac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013aae:	4614      	mov	r4, r2
 8013ab0:	461a      	mov	r2, r3
 8013ab2:	4b09      	ldr	r3, [pc, #36]	; (8013ad8 <__assert_func+0x2c>)
 8013ab4:	681b      	ldr	r3, [r3, #0]
 8013ab6:	4605      	mov	r5, r0
 8013ab8:	68d8      	ldr	r0, [r3, #12]
 8013aba:	b14c      	cbz	r4, 8013ad0 <__assert_func+0x24>
 8013abc:	4b07      	ldr	r3, [pc, #28]	; (8013adc <__assert_func+0x30>)
 8013abe:	9100      	str	r1, [sp, #0]
 8013ac0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013ac4:	4906      	ldr	r1, [pc, #24]	; (8013ae0 <__assert_func+0x34>)
 8013ac6:	462b      	mov	r3, r5
 8013ac8:	f000 f8e0 	bl	8013c8c <fiprintf>
 8013acc:	f000 fd26 	bl	801451c <abort>
 8013ad0:	4b04      	ldr	r3, [pc, #16]	; (8013ae4 <__assert_func+0x38>)
 8013ad2:	461c      	mov	r4, r3
 8013ad4:	e7f3      	b.n	8013abe <__assert_func+0x12>
 8013ad6:	bf00      	nop
 8013ad8:	20000020 	.word	0x20000020
 8013adc:	080177fe 	.word	0x080177fe
 8013ae0:	0801780b 	.word	0x0801780b
 8013ae4:	08017839 	.word	0x08017839

08013ae8 <_close_r>:
 8013ae8:	b538      	push	{r3, r4, r5, lr}
 8013aea:	4d06      	ldr	r5, [pc, #24]	; (8013b04 <_close_r+0x1c>)
 8013aec:	2300      	movs	r3, #0
 8013aee:	4604      	mov	r4, r0
 8013af0:	4608      	mov	r0, r1
 8013af2:	602b      	str	r3, [r5, #0]
 8013af4:	f7ed f85f 	bl	8000bb6 <_close>
 8013af8:	1c43      	adds	r3, r0, #1
 8013afa:	d102      	bne.n	8013b02 <_close_r+0x1a>
 8013afc:	682b      	ldr	r3, [r5, #0]
 8013afe:	b103      	cbz	r3, 8013b02 <_close_r+0x1a>
 8013b00:	6023      	str	r3, [r4, #0]
 8013b02:	bd38      	pop	{r3, r4, r5, pc}
 8013b04:	2000ef9c 	.word	0x2000ef9c

08013b08 <__sflush_r>:
 8013b08:	898a      	ldrh	r2, [r1, #12]
 8013b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b0e:	4605      	mov	r5, r0
 8013b10:	0710      	lsls	r0, r2, #28
 8013b12:	460c      	mov	r4, r1
 8013b14:	d458      	bmi.n	8013bc8 <__sflush_r+0xc0>
 8013b16:	684b      	ldr	r3, [r1, #4]
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	dc05      	bgt.n	8013b28 <__sflush_r+0x20>
 8013b1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	dc02      	bgt.n	8013b28 <__sflush_r+0x20>
 8013b22:	2000      	movs	r0, #0
 8013b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013b2a:	2e00      	cmp	r6, #0
 8013b2c:	d0f9      	beq.n	8013b22 <__sflush_r+0x1a>
 8013b2e:	2300      	movs	r3, #0
 8013b30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013b34:	682f      	ldr	r7, [r5, #0]
 8013b36:	602b      	str	r3, [r5, #0]
 8013b38:	d032      	beq.n	8013ba0 <__sflush_r+0x98>
 8013b3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013b3c:	89a3      	ldrh	r3, [r4, #12]
 8013b3e:	075a      	lsls	r2, r3, #29
 8013b40:	d505      	bpl.n	8013b4e <__sflush_r+0x46>
 8013b42:	6863      	ldr	r3, [r4, #4]
 8013b44:	1ac0      	subs	r0, r0, r3
 8013b46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013b48:	b10b      	cbz	r3, 8013b4e <__sflush_r+0x46>
 8013b4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013b4c:	1ac0      	subs	r0, r0, r3
 8013b4e:	2300      	movs	r3, #0
 8013b50:	4602      	mov	r2, r0
 8013b52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013b54:	6a21      	ldr	r1, [r4, #32]
 8013b56:	4628      	mov	r0, r5
 8013b58:	47b0      	blx	r6
 8013b5a:	1c43      	adds	r3, r0, #1
 8013b5c:	89a3      	ldrh	r3, [r4, #12]
 8013b5e:	d106      	bne.n	8013b6e <__sflush_r+0x66>
 8013b60:	6829      	ldr	r1, [r5, #0]
 8013b62:	291d      	cmp	r1, #29
 8013b64:	d82c      	bhi.n	8013bc0 <__sflush_r+0xb8>
 8013b66:	4a2a      	ldr	r2, [pc, #168]	; (8013c10 <__sflush_r+0x108>)
 8013b68:	40ca      	lsrs	r2, r1
 8013b6a:	07d6      	lsls	r6, r2, #31
 8013b6c:	d528      	bpl.n	8013bc0 <__sflush_r+0xb8>
 8013b6e:	2200      	movs	r2, #0
 8013b70:	6062      	str	r2, [r4, #4]
 8013b72:	04d9      	lsls	r1, r3, #19
 8013b74:	6922      	ldr	r2, [r4, #16]
 8013b76:	6022      	str	r2, [r4, #0]
 8013b78:	d504      	bpl.n	8013b84 <__sflush_r+0x7c>
 8013b7a:	1c42      	adds	r2, r0, #1
 8013b7c:	d101      	bne.n	8013b82 <__sflush_r+0x7a>
 8013b7e:	682b      	ldr	r3, [r5, #0]
 8013b80:	b903      	cbnz	r3, 8013b84 <__sflush_r+0x7c>
 8013b82:	6560      	str	r0, [r4, #84]	; 0x54
 8013b84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013b86:	602f      	str	r7, [r5, #0]
 8013b88:	2900      	cmp	r1, #0
 8013b8a:	d0ca      	beq.n	8013b22 <__sflush_r+0x1a>
 8013b8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013b90:	4299      	cmp	r1, r3
 8013b92:	d002      	beq.n	8013b9a <__sflush_r+0x92>
 8013b94:	4628      	mov	r0, r5
 8013b96:	f000 f8b1 	bl	8013cfc <_free_r>
 8013b9a:	2000      	movs	r0, #0
 8013b9c:	6360      	str	r0, [r4, #52]	; 0x34
 8013b9e:	e7c1      	b.n	8013b24 <__sflush_r+0x1c>
 8013ba0:	6a21      	ldr	r1, [r4, #32]
 8013ba2:	2301      	movs	r3, #1
 8013ba4:	4628      	mov	r0, r5
 8013ba6:	47b0      	blx	r6
 8013ba8:	1c41      	adds	r1, r0, #1
 8013baa:	d1c7      	bne.n	8013b3c <__sflush_r+0x34>
 8013bac:	682b      	ldr	r3, [r5, #0]
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d0c4      	beq.n	8013b3c <__sflush_r+0x34>
 8013bb2:	2b1d      	cmp	r3, #29
 8013bb4:	d001      	beq.n	8013bba <__sflush_r+0xb2>
 8013bb6:	2b16      	cmp	r3, #22
 8013bb8:	d101      	bne.n	8013bbe <__sflush_r+0xb6>
 8013bba:	602f      	str	r7, [r5, #0]
 8013bbc:	e7b1      	b.n	8013b22 <__sflush_r+0x1a>
 8013bbe:	89a3      	ldrh	r3, [r4, #12]
 8013bc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013bc4:	81a3      	strh	r3, [r4, #12]
 8013bc6:	e7ad      	b.n	8013b24 <__sflush_r+0x1c>
 8013bc8:	690f      	ldr	r7, [r1, #16]
 8013bca:	2f00      	cmp	r7, #0
 8013bcc:	d0a9      	beq.n	8013b22 <__sflush_r+0x1a>
 8013bce:	0793      	lsls	r3, r2, #30
 8013bd0:	680e      	ldr	r6, [r1, #0]
 8013bd2:	bf08      	it	eq
 8013bd4:	694b      	ldreq	r3, [r1, #20]
 8013bd6:	600f      	str	r7, [r1, #0]
 8013bd8:	bf18      	it	ne
 8013bda:	2300      	movne	r3, #0
 8013bdc:	eba6 0807 	sub.w	r8, r6, r7
 8013be0:	608b      	str	r3, [r1, #8]
 8013be2:	f1b8 0f00 	cmp.w	r8, #0
 8013be6:	dd9c      	ble.n	8013b22 <__sflush_r+0x1a>
 8013be8:	6a21      	ldr	r1, [r4, #32]
 8013bea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013bec:	4643      	mov	r3, r8
 8013bee:	463a      	mov	r2, r7
 8013bf0:	4628      	mov	r0, r5
 8013bf2:	47b0      	blx	r6
 8013bf4:	2800      	cmp	r0, #0
 8013bf6:	dc06      	bgt.n	8013c06 <__sflush_r+0xfe>
 8013bf8:	89a3      	ldrh	r3, [r4, #12]
 8013bfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013bfe:	81a3      	strh	r3, [r4, #12]
 8013c00:	f04f 30ff 	mov.w	r0, #4294967295
 8013c04:	e78e      	b.n	8013b24 <__sflush_r+0x1c>
 8013c06:	4407      	add	r7, r0
 8013c08:	eba8 0800 	sub.w	r8, r8, r0
 8013c0c:	e7e9      	b.n	8013be2 <__sflush_r+0xda>
 8013c0e:	bf00      	nop
 8013c10:	20400001 	.word	0x20400001

08013c14 <_fflush_r>:
 8013c14:	b538      	push	{r3, r4, r5, lr}
 8013c16:	690b      	ldr	r3, [r1, #16]
 8013c18:	4605      	mov	r5, r0
 8013c1a:	460c      	mov	r4, r1
 8013c1c:	b913      	cbnz	r3, 8013c24 <_fflush_r+0x10>
 8013c1e:	2500      	movs	r5, #0
 8013c20:	4628      	mov	r0, r5
 8013c22:	bd38      	pop	{r3, r4, r5, pc}
 8013c24:	b118      	cbz	r0, 8013c2e <_fflush_r+0x1a>
 8013c26:	6983      	ldr	r3, [r0, #24]
 8013c28:	b90b      	cbnz	r3, 8013c2e <_fflush_r+0x1a>
 8013c2a:	f7ff fcd3 	bl	80135d4 <__sinit>
 8013c2e:	4b14      	ldr	r3, [pc, #80]	; (8013c80 <_fflush_r+0x6c>)
 8013c30:	429c      	cmp	r4, r3
 8013c32:	d11b      	bne.n	8013c6c <_fflush_r+0x58>
 8013c34:	686c      	ldr	r4, [r5, #4]
 8013c36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d0ef      	beq.n	8013c1e <_fflush_r+0xa>
 8013c3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013c40:	07d0      	lsls	r0, r2, #31
 8013c42:	d404      	bmi.n	8013c4e <_fflush_r+0x3a>
 8013c44:	0599      	lsls	r1, r3, #22
 8013c46:	d402      	bmi.n	8013c4e <_fflush_r+0x3a>
 8013c48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013c4a:	f7ff fd86 	bl	801375a <__retarget_lock_acquire_recursive>
 8013c4e:	4628      	mov	r0, r5
 8013c50:	4621      	mov	r1, r4
 8013c52:	f7ff ff59 	bl	8013b08 <__sflush_r>
 8013c56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013c58:	07da      	lsls	r2, r3, #31
 8013c5a:	4605      	mov	r5, r0
 8013c5c:	d4e0      	bmi.n	8013c20 <_fflush_r+0xc>
 8013c5e:	89a3      	ldrh	r3, [r4, #12]
 8013c60:	059b      	lsls	r3, r3, #22
 8013c62:	d4dd      	bmi.n	8013c20 <_fflush_r+0xc>
 8013c64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013c66:	f7ff fd79 	bl	801375c <__retarget_lock_release_recursive>
 8013c6a:	e7d9      	b.n	8013c20 <_fflush_r+0xc>
 8013c6c:	4b05      	ldr	r3, [pc, #20]	; (8013c84 <_fflush_r+0x70>)
 8013c6e:	429c      	cmp	r4, r3
 8013c70:	d101      	bne.n	8013c76 <_fflush_r+0x62>
 8013c72:	68ac      	ldr	r4, [r5, #8]
 8013c74:	e7df      	b.n	8013c36 <_fflush_r+0x22>
 8013c76:	4b04      	ldr	r3, [pc, #16]	; (8013c88 <_fflush_r+0x74>)
 8013c78:	429c      	cmp	r4, r3
 8013c7a:	bf08      	it	eq
 8013c7c:	68ec      	ldreq	r4, [r5, #12]
 8013c7e:	e7da      	b.n	8013c36 <_fflush_r+0x22>
 8013c80:	08017744 	.word	0x08017744
 8013c84:	08017764 	.word	0x08017764
 8013c88:	08017724 	.word	0x08017724

08013c8c <fiprintf>:
 8013c8c:	b40e      	push	{r1, r2, r3}
 8013c8e:	b503      	push	{r0, r1, lr}
 8013c90:	4601      	mov	r1, r0
 8013c92:	ab03      	add	r3, sp, #12
 8013c94:	4805      	ldr	r0, [pc, #20]	; (8013cac <fiprintf+0x20>)
 8013c96:	f853 2b04 	ldr.w	r2, [r3], #4
 8013c9a:	6800      	ldr	r0, [r0, #0]
 8013c9c:	9301      	str	r3, [sp, #4]
 8013c9e:	f000 f8a7 	bl	8013df0 <_vfiprintf_r>
 8013ca2:	b002      	add	sp, #8
 8013ca4:	f85d eb04 	ldr.w	lr, [sp], #4
 8013ca8:	b003      	add	sp, #12
 8013caa:	4770      	bx	lr
 8013cac:	20000020 	.word	0x20000020

08013cb0 <_lseek_r>:
 8013cb0:	b538      	push	{r3, r4, r5, lr}
 8013cb2:	4d07      	ldr	r5, [pc, #28]	; (8013cd0 <_lseek_r+0x20>)
 8013cb4:	4604      	mov	r4, r0
 8013cb6:	4608      	mov	r0, r1
 8013cb8:	4611      	mov	r1, r2
 8013cba:	2200      	movs	r2, #0
 8013cbc:	602a      	str	r2, [r5, #0]
 8013cbe:	461a      	mov	r2, r3
 8013cc0:	f7ec ffa0 	bl	8000c04 <_lseek>
 8013cc4:	1c43      	adds	r3, r0, #1
 8013cc6:	d102      	bne.n	8013cce <_lseek_r+0x1e>
 8013cc8:	682b      	ldr	r3, [r5, #0]
 8013cca:	b103      	cbz	r3, 8013cce <_lseek_r+0x1e>
 8013ccc:	6023      	str	r3, [r4, #0]
 8013cce:	bd38      	pop	{r3, r4, r5, pc}
 8013cd0:	2000ef9c 	.word	0x2000ef9c

08013cd4 <malloc>:
 8013cd4:	4b02      	ldr	r3, [pc, #8]	; (8013ce0 <malloc+0xc>)
 8013cd6:	4601      	mov	r1, r0
 8013cd8:	6818      	ldr	r0, [r3, #0]
 8013cda:	f7ff bd65 	b.w	80137a8 <_malloc_r>
 8013cde:	bf00      	nop
 8013ce0:	20000020 	.word	0x20000020

08013ce4 <__malloc_lock>:
 8013ce4:	4801      	ldr	r0, [pc, #4]	; (8013cec <__malloc_lock+0x8>)
 8013ce6:	f7ff bd38 	b.w	801375a <__retarget_lock_acquire_recursive>
 8013cea:	bf00      	nop
 8013cec:	2000efa8 	.word	0x2000efa8

08013cf0 <__malloc_unlock>:
 8013cf0:	4801      	ldr	r0, [pc, #4]	; (8013cf8 <__malloc_unlock+0x8>)
 8013cf2:	f7ff bd33 	b.w	801375c <__retarget_lock_release_recursive>
 8013cf6:	bf00      	nop
 8013cf8:	2000efa8 	.word	0x2000efa8

08013cfc <_free_r>:
 8013cfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013cfe:	2900      	cmp	r1, #0
 8013d00:	d048      	beq.n	8013d94 <_free_r+0x98>
 8013d02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013d06:	9001      	str	r0, [sp, #4]
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	f1a1 0404 	sub.w	r4, r1, #4
 8013d0e:	bfb8      	it	lt
 8013d10:	18e4      	addlt	r4, r4, r3
 8013d12:	f7ff ffe7 	bl	8013ce4 <__malloc_lock>
 8013d16:	4a20      	ldr	r2, [pc, #128]	; (8013d98 <_free_r+0x9c>)
 8013d18:	9801      	ldr	r0, [sp, #4]
 8013d1a:	6813      	ldr	r3, [r2, #0]
 8013d1c:	4615      	mov	r5, r2
 8013d1e:	b933      	cbnz	r3, 8013d2e <_free_r+0x32>
 8013d20:	6063      	str	r3, [r4, #4]
 8013d22:	6014      	str	r4, [r2, #0]
 8013d24:	b003      	add	sp, #12
 8013d26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013d2a:	f7ff bfe1 	b.w	8013cf0 <__malloc_unlock>
 8013d2e:	42a3      	cmp	r3, r4
 8013d30:	d90b      	bls.n	8013d4a <_free_r+0x4e>
 8013d32:	6821      	ldr	r1, [r4, #0]
 8013d34:	1862      	adds	r2, r4, r1
 8013d36:	4293      	cmp	r3, r2
 8013d38:	bf04      	itt	eq
 8013d3a:	681a      	ldreq	r2, [r3, #0]
 8013d3c:	685b      	ldreq	r3, [r3, #4]
 8013d3e:	6063      	str	r3, [r4, #4]
 8013d40:	bf04      	itt	eq
 8013d42:	1852      	addeq	r2, r2, r1
 8013d44:	6022      	streq	r2, [r4, #0]
 8013d46:	602c      	str	r4, [r5, #0]
 8013d48:	e7ec      	b.n	8013d24 <_free_r+0x28>
 8013d4a:	461a      	mov	r2, r3
 8013d4c:	685b      	ldr	r3, [r3, #4]
 8013d4e:	b10b      	cbz	r3, 8013d54 <_free_r+0x58>
 8013d50:	42a3      	cmp	r3, r4
 8013d52:	d9fa      	bls.n	8013d4a <_free_r+0x4e>
 8013d54:	6811      	ldr	r1, [r2, #0]
 8013d56:	1855      	adds	r5, r2, r1
 8013d58:	42a5      	cmp	r5, r4
 8013d5a:	d10b      	bne.n	8013d74 <_free_r+0x78>
 8013d5c:	6824      	ldr	r4, [r4, #0]
 8013d5e:	4421      	add	r1, r4
 8013d60:	1854      	adds	r4, r2, r1
 8013d62:	42a3      	cmp	r3, r4
 8013d64:	6011      	str	r1, [r2, #0]
 8013d66:	d1dd      	bne.n	8013d24 <_free_r+0x28>
 8013d68:	681c      	ldr	r4, [r3, #0]
 8013d6a:	685b      	ldr	r3, [r3, #4]
 8013d6c:	6053      	str	r3, [r2, #4]
 8013d6e:	4421      	add	r1, r4
 8013d70:	6011      	str	r1, [r2, #0]
 8013d72:	e7d7      	b.n	8013d24 <_free_r+0x28>
 8013d74:	d902      	bls.n	8013d7c <_free_r+0x80>
 8013d76:	230c      	movs	r3, #12
 8013d78:	6003      	str	r3, [r0, #0]
 8013d7a:	e7d3      	b.n	8013d24 <_free_r+0x28>
 8013d7c:	6825      	ldr	r5, [r4, #0]
 8013d7e:	1961      	adds	r1, r4, r5
 8013d80:	428b      	cmp	r3, r1
 8013d82:	bf04      	itt	eq
 8013d84:	6819      	ldreq	r1, [r3, #0]
 8013d86:	685b      	ldreq	r3, [r3, #4]
 8013d88:	6063      	str	r3, [r4, #4]
 8013d8a:	bf04      	itt	eq
 8013d8c:	1949      	addeq	r1, r1, r5
 8013d8e:	6021      	streq	r1, [r4, #0]
 8013d90:	6054      	str	r4, [r2, #4]
 8013d92:	e7c7      	b.n	8013d24 <_free_r+0x28>
 8013d94:	b003      	add	sp, #12
 8013d96:	bd30      	pop	{r4, r5, pc}
 8013d98:	20008650 	.word	0x20008650

08013d9c <__sfputc_r>:
 8013d9c:	6893      	ldr	r3, [r2, #8]
 8013d9e:	3b01      	subs	r3, #1
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	b410      	push	{r4}
 8013da4:	6093      	str	r3, [r2, #8]
 8013da6:	da08      	bge.n	8013dba <__sfputc_r+0x1e>
 8013da8:	6994      	ldr	r4, [r2, #24]
 8013daa:	42a3      	cmp	r3, r4
 8013dac:	db01      	blt.n	8013db2 <__sfputc_r+0x16>
 8013dae:	290a      	cmp	r1, #10
 8013db0:	d103      	bne.n	8013dba <__sfputc_r+0x1e>
 8013db2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013db6:	f000 baf1 	b.w	801439c <__swbuf_r>
 8013dba:	6813      	ldr	r3, [r2, #0]
 8013dbc:	1c58      	adds	r0, r3, #1
 8013dbe:	6010      	str	r0, [r2, #0]
 8013dc0:	7019      	strb	r1, [r3, #0]
 8013dc2:	4608      	mov	r0, r1
 8013dc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013dc8:	4770      	bx	lr

08013dca <__sfputs_r>:
 8013dca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013dcc:	4606      	mov	r6, r0
 8013dce:	460f      	mov	r7, r1
 8013dd0:	4614      	mov	r4, r2
 8013dd2:	18d5      	adds	r5, r2, r3
 8013dd4:	42ac      	cmp	r4, r5
 8013dd6:	d101      	bne.n	8013ddc <__sfputs_r+0x12>
 8013dd8:	2000      	movs	r0, #0
 8013dda:	e007      	b.n	8013dec <__sfputs_r+0x22>
 8013ddc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013de0:	463a      	mov	r2, r7
 8013de2:	4630      	mov	r0, r6
 8013de4:	f7ff ffda 	bl	8013d9c <__sfputc_r>
 8013de8:	1c43      	adds	r3, r0, #1
 8013dea:	d1f3      	bne.n	8013dd4 <__sfputs_r+0xa>
 8013dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013df0 <_vfiprintf_r>:
 8013df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013df4:	460d      	mov	r5, r1
 8013df6:	b09d      	sub	sp, #116	; 0x74
 8013df8:	4614      	mov	r4, r2
 8013dfa:	4698      	mov	r8, r3
 8013dfc:	4606      	mov	r6, r0
 8013dfe:	b118      	cbz	r0, 8013e08 <_vfiprintf_r+0x18>
 8013e00:	6983      	ldr	r3, [r0, #24]
 8013e02:	b90b      	cbnz	r3, 8013e08 <_vfiprintf_r+0x18>
 8013e04:	f7ff fbe6 	bl	80135d4 <__sinit>
 8013e08:	4b89      	ldr	r3, [pc, #548]	; (8014030 <_vfiprintf_r+0x240>)
 8013e0a:	429d      	cmp	r5, r3
 8013e0c:	d11b      	bne.n	8013e46 <_vfiprintf_r+0x56>
 8013e0e:	6875      	ldr	r5, [r6, #4]
 8013e10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013e12:	07d9      	lsls	r1, r3, #31
 8013e14:	d405      	bmi.n	8013e22 <_vfiprintf_r+0x32>
 8013e16:	89ab      	ldrh	r3, [r5, #12]
 8013e18:	059a      	lsls	r2, r3, #22
 8013e1a:	d402      	bmi.n	8013e22 <_vfiprintf_r+0x32>
 8013e1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013e1e:	f7ff fc9c 	bl	801375a <__retarget_lock_acquire_recursive>
 8013e22:	89ab      	ldrh	r3, [r5, #12]
 8013e24:	071b      	lsls	r3, r3, #28
 8013e26:	d501      	bpl.n	8013e2c <_vfiprintf_r+0x3c>
 8013e28:	692b      	ldr	r3, [r5, #16]
 8013e2a:	b9eb      	cbnz	r3, 8013e68 <_vfiprintf_r+0x78>
 8013e2c:	4629      	mov	r1, r5
 8013e2e:	4630      	mov	r0, r6
 8013e30:	f000 fb06 	bl	8014440 <__swsetup_r>
 8013e34:	b1c0      	cbz	r0, 8013e68 <_vfiprintf_r+0x78>
 8013e36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013e38:	07dc      	lsls	r4, r3, #31
 8013e3a:	d50e      	bpl.n	8013e5a <_vfiprintf_r+0x6a>
 8013e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8013e40:	b01d      	add	sp, #116	; 0x74
 8013e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e46:	4b7b      	ldr	r3, [pc, #492]	; (8014034 <_vfiprintf_r+0x244>)
 8013e48:	429d      	cmp	r5, r3
 8013e4a:	d101      	bne.n	8013e50 <_vfiprintf_r+0x60>
 8013e4c:	68b5      	ldr	r5, [r6, #8]
 8013e4e:	e7df      	b.n	8013e10 <_vfiprintf_r+0x20>
 8013e50:	4b79      	ldr	r3, [pc, #484]	; (8014038 <_vfiprintf_r+0x248>)
 8013e52:	429d      	cmp	r5, r3
 8013e54:	bf08      	it	eq
 8013e56:	68f5      	ldreq	r5, [r6, #12]
 8013e58:	e7da      	b.n	8013e10 <_vfiprintf_r+0x20>
 8013e5a:	89ab      	ldrh	r3, [r5, #12]
 8013e5c:	0598      	lsls	r0, r3, #22
 8013e5e:	d4ed      	bmi.n	8013e3c <_vfiprintf_r+0x4c>
 8013e60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013e62:	f7ff fc7b 	bl	801375c <__retarget_lock_release_recursive>
 8013e66:	e7e9      	b.n	8013e3c <_vfiprintf_r+0x4c>
 8013e68:	2300      	movs	r3, #0
 8013e6a:	9309      	str	r3, [sp, #36]	; 0x24
 8013e6c:	2320      	movs	r3, #32
 8013e6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013e72:	f8cd 800c 	str.w	r8, [sp, #12]
 8013e76:	2330      	movs	r3, #48	; 0x30
 8013e78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801403c <_vfiprintf_r+0x24c>
 8013e7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013e80:	f04f 0901 	mov.w	r9, #1
 8013e84:	4623      	mov	r3, r4
 8013e86:	469a      	mov	sl, r3
 8013e88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013e8c:	b10a      	cbz	r2, 8013e92 <_vfiprintf_r+0xa2>
 8013e8e:	2a25      	cmp	r2, #37	; 0x25
 8013e90:	d1f9      	bne.n	8013e86 <_vfiprintf_r+0x96>
 8013e92:	ebba 0b04 	subs.w	fp, sl, r4
 8013e96:	d00b      	beq.n	8013eb0 <_vfiprintf_r+0xc0>
 8013e98:	465b      	mov	r3, fp
 8013e9a:	4622      	mov	r2, r4
 8013e9c:	4629      	mov	r1, r5
 8013e9e:	4630      	mov	r0, r6
 8013ea0:	f7ff ff93 	bl	8013dca <__sfputs_r>
 8013ea4:	3001      	adds	r0, #1
 8013ea6:	f000 80aa 	beq.w	8013ffe <_vfiprintf_r+0x20e>
 8013eaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013eac:	445a      	add	r2, fp
 8013eae:	9209      	str	r2, [sp, #36]	; 0x24
 8013eb0:	f89a 3000 	ldrb.w	r3, [sl]
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	f000 80a2 	beq.w	8013ffe <_vfiprintf_r+0x20e>
 8013eba:	2300      	movs	r3, #0
 8013ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8013ec0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013ec4:	f10a 0a01 	add.w	sl, sl, #1
 8013ec8:	9304      	str	r3, [sp, #16]
 8013eca:	9307      	str	r3, [sp, #28]
 8013ecc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013ed0:	931a      	str	r3, [sp, #104]	; 0x68
 8013ed2:	4654      	mov	r4, sl
 8013ed4:	2205      	movs	r2, #5
 8013ed6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013eda:	4858      	ldr	r0, [pc, #352]	; (801403c <_vfiprintf_r+0x24c>)
 8013edc:	f7ec f988 	bl	80001f0 <memchr>
 8013ee0:	9a04      	ldr	r2, [sp, #16]
 8013ee2:	b9d8      	cbnz	r0, 8013f1c <_vfiprintf_r+0x12c>
 8013ee4:	06d1      	lsls	r1, r2, #27
 8013ee6:	bf44      	itt	mi
 8013ee8:	2320      	movmi	r3, #32
 8013eea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013eee:	0713      	lsls	r3, r2, #28
 8013ef0:	bf44      	itt	mi
 8013ef2:	232b      	movmi	r3, #43	; 0x2b
 8013ef4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013ef8:	f89a 3000 	ldrb.w	r3, [sl]
 8013efc:	2b2a      	cmp	r3, #42	; 0x2a
 8013efe:	d015      	beq.n	8013f2c <_vfiprintf_r+0x13c>
 8013f00:	9a07      	ldr	r2, [sp, #28]
 8013f02:	4654      	mov	r4, sl
 8013f04:	2000      	movs	r0, #0
 8013f06:	f04f 0c0a 	mov.w	ip, #10
 8013f0a:	4621      	mov	r1, r4
 8013f0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013f10:	3b30      	subs	r3, #48	; 0x30
 8013f12:	2b09      	cmp	r3, #9
 8013f14:	d94e      	bls.n	8013fb4 <_vfiprintf_r+0x1c4>
 8013f16:	b1b0      	cbz	r0, 8013f46 <_vfiprintf_r+0x156>
 8013f18:	9207      	str	r2, [sp, #28]
 8013f1a:	e014      	b.n	8013f46 <_vfiprintf_r+0x156>
 8013f1c:	eba0 0308 	sub.w	r3, r0, r8
 8013f20:	fa09 f303 	lsl.w	r3, r9, r3
 8013f24:	4313      	orrs	r3, r2
 8013f26:	9304      	str	r3, [sp, #16]
 8013f28:	46a2      	mov	sl, r4
 8013f2a:	e7d2      	b.n	8013ed2 <_vfiprintf_r+0xe2>
 8013f2c:	9b03      	ldr	r3, [sp, #12]
 8013f2e:	1d19      	adds	r1, r3, #4
 8013f30:	681b      	ldr	r3, [r3, #0]
 8013f32:	9103      	str	r1, [sp, #12]
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	bfbb      	ittet	lt
 8013f38:	425b      	neglt	r3, r3
 8013f3a:	f042 0202 	orrlt.w	r2, r2, #2
 8013f3e:	9307      	strge	r3, [sp, #28]
 8013f40:	9307      	strlt	r3, [sp, #28]
 8013f42:	bfb8      	it	lt
 8013f44:	9204      	strlt	r2, [sp, #16]
 8013f46:	7823      	ldrb	r3, [r4, #0]
 8013f48:	2b2e      	cmp	r3, #46	; 0x2e
 8013f4a:	d10c      	bne.n	8013f66 <_vfiprintf_r+0x176>
 8013f4c:	7863      	ldrb	r3, [r4, #1]
 8013f4e:	2b2a      	cmp	r3, #42	; 0x2a
 8013f50:	d135      	bne.n	8013fbe <_vfiprintf_r+0x1ce>
 8013f52:	9b03      	ldr	r3, [sp, #12]
 8013f54:	1d1a      	adds	r2, r3, #4
 8013f56:	681b      	ldr	r3, [r3, #0]
 8013f58:	9203      	str	r2, [sp, #12]
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	bfb8      	it	lt
 8013f5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8013f62:	3402      	adds	r4, #2
 8013f64:	9305      	str	r3, [sp, #20]
 8013f66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801404c <_vfiprintf_r+0x25c>
 8013f6a:	7821      	ldrb	r1, [r4, #0]
 8013f6c:	2203      	movs	r2, #3
 8013f6e:	4650      	mov	r0, sl
 8013f70:	f7ec f93e 	bl	80001f0 <memchr>
 8013f74:	b140      	cbz	r0, 8013f88 <_vfiprintf_r+0x198>
 8013f76:	2340      	movs	r3, #64	; 0x40
 8013f78:	eba0 000a 	sub.w	r0, r0, sl
 8013f7c:	fa03 f000 	lsl.w	r0, r3, r0
 8013f80:	9b04      	ldr	r3, [sp, #16]
 8013f82:	4303      	orrs	r3, r0
 8013f84:	3401      	adds	r4, #1
 8013f86:	9304      	str	r3, [sp, #16]
 8013f88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f8c:	482c      	ldr	r0, [pc, #176]	; (8014040 <_vfiprintf_r+0x250>)
 8013f8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013f92:	2206      	movs	r2, #6
 8013f94:	f7ec f92c 	bl	80001f0 <memchr>
 8013f98:	2800      	cmp	r0, #0
 8013f9a:	d03f      	beq.n	801401c <_vfiprintf_r+0x22c>
 8013f9c:	4b29      	ldr	r3, [pc, #164]	; (8014044 <_vfiprintf_r+0x254>)
 8013f9e:	bb1b      	cbnz	r3, 8013fe8 <_vfiprintf_r+0x1f8>
 8013fa0:	9b03      	ldr	r3, [sp, #12]
 8013fa2:	3307      	adds	r3, #7
 8013fa4:	f023 0307 	bic.w	r3, r3, #7
 8013fa8:	3308      	adds	r3, #8
 8013faa:	9303      	str	r3, [sp, #12]
 8013fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013fae:	443b      	add	r3, r7
 8013fb0:	9309      	str	r3, [sp, #36]	; 0x24
 8013fb2:	e767      	b.n	8013e84 <_vfiprintf_r+0x94>
 8013fb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8013fb8:	460c      	mov	r4, r1
 8013fba:	2001      	movs	r0, #1
 8013fbc:	e7a5      	b.n	8013f0a <_vfiprintf_r+0x11a>
 8013fbe:	2300      	movs	r3, #0
 8013fc0:	3401      	adds	r4, #1
 8013fc2:	9305      	str	r3, [sp, #20]
 8013fc4:	4619      	mov	r1, r3
 8013fc6:	f04f 0c0a 	mov.w	ip, #10
 8013fca:	4620      	mov	r0, r4
 8013fcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013fd0:	3a30      	subs	r2, #48	; 0x30
 8013fd2:	2a09      	cmp	r2, #9
 8013fd4:	d903      	bls.n	8013fde <_vfiprintf_r+0x1ee>
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d0c5      	beq.n	8013f66 <_vfiprintf_r+0x176>
 8013fda:	9105      	str	r1, [sp, #20]
 8013fdc:	e7c3      	b.n	8013f66 <_vfiprintf_r+0x176>
 8013fde:	fb0c 2101 	mla	r1, ip, r1, r2
 8013fe2:	4604      	mov	r4, r0
 8013fe4:	2301      	movs	r3, #1
 8013fe6:	e7f0      	b.n	8013fca <_vfiprintf_r+0x1da>
 8013fe8:	ab03      	add	r3, sp, #12
 8013fea:	9300      	str	r3, [sp, #0]
 8013fec:	462a      	mov	r2, r5
 8013fee:	4b16      	ldr	r3, [pc, #88]	; (8014048 <_vfiprintf_r+0x258>)
 8013ff0:	a904      	add	r1, sp, #16
 8013ff2:	4630      	mov	r0, r6
 8013ff4:	f3af 8000 	nop.w
 8013ff8:	4607      	mov	r7, r0
 8013ffa:	1c78      	adds	r0, r7, #1
 8013ffc:	d1d6      	bne.n	8013fac <_vfiprintf_r+0x1bc>
 8013ffe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014000:	07d9      	lsls	r1, r3, #31
 8014002:	d405      	bmi.n	8014010 <_vfiprintf_r+0x220>
 8014004:	89ab      	ldrh	r3, [r5, #12]
 8014006:	059a      	lsls	r2, r3, #22
 8014008:	d402      	bmi.n	8014010 <_vfiprintf_r+0x220>
 801400a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801400c:	f7ff fba6 	bl	801375c <__retarget_lock_release_recursive>
 8014010:	89ab      	ldrh	r3, [r5, #12]
 8014012:	065b      	lsls	r3, r3, #25
 8014014:	f53f af12 	bmi.w	8013e3c <_vfiprintf_r+0x4c>
 8014018:	9809      	ldr	r0, [sp, #36]	; 0x24
 801401a:	e711      	b.n	8013e40 <_vfiprintf_r+0x50>
 801401c:	ab03      	add	r3, sp, #12
 801401e:	9300      	str	r3, [sp, #0]
 8014020:	462a      	mov	r2, r5
 8014022:	4b09      	ldr	r3, [pc, #36]	; (8014048 <_vfiprintf_r+0x258>)
 8014024:	a904      	add	r1, sp, #16
 8014026:	4630      	mov	r0, r6
 8014028:	f000 f880 	bl	801412c <_printf_i>
 801402c:	e7e4      	b.n	8013ff8 <_vfiprintf_r+0x208>
 801402e:	bf00      	nop
 8014030:	08017744 	.word	0x08017744
 8014034:	08017764 	.word	0x08017764
 8014038:	08017724 	.word	0x08017724
 801403c:	0801783a 	.word	0x0801783a
 8014040:	08017844 	.word	0x08017844
 8014044:	00000000 	.word	0x00000000
 8014048:	08013dcb 	.word	0x08013dcb
 801404c:	08017840 	.word	0x08017840

08014050 <_printf_common>:
 8014050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014054:	4616      	mov	r6, r2
 8014056:	4699      	mov	r9, r3
 8014058:	688a      	ldr	r2, [r1, #8]
 801405a:	690b      	ldr	r3, [r1, #16]
 801405c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014060:	4293      	cmp	r3, r2
 8014062:	bfb8      	it	lt
 8014064:	4613      	movlt	r3, r2
 8014066:	6033      	str	r3, [r6, #0]
 8014068:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801406c:	4607      	mov	r7, r0
 801406e:	460c      	mov	r4, r1
 8014070:	b10a      	cbz	r2, 8014076 <_printf_common+0x26>
 8014072:	3301      	adds	r3, #1
 8014074:	6033      	str	r3, [r6, #0]
 8014076:	6823      	ldr	r3, [r4, #0]
 8014078:	0699      	lsls	r1, r3, #26
 801407a:	bf42      	ittt	mi
 801407c:	6833      	ldrmi	r3, [r6, #0]
 801407e:	3302      	addmi	r3, #2
 8014080:	6033      	strmi	r3, [r6, #0]
 8014082:	6825      	ldr	r5, [r4, #0]
 8014084:	f015 0506 	ands.w	r5, r5, #6
 8014088:	d106      	bne.n	8014098 <_printf_common+0x48>
 801408a:	f104 0a19 	add.w	sl, r4, #25
 801408e:	68e3      	ldr	r3, [r4, #12]
 8014090:	6832      	ldr	r2, [r6, #0]
 8014092:	1a9b      	subs	r3, r3, r2
 8014094:	42ab      	cmp	r3, r5
 8014096:	dc26      	bgt.n	80140e6 <_printf_common+0x96>
 8014098:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801409c:	1e13      	subs	r3, r2, #0
 801409e:	6822      	ldr	r2, [r4, #0]
 80140a0:	bf18      	it	ne
 80140a2:	2301      	movne	r3, #1
 80140a4:	0692      	lsls	r2, r2, #26
 80140a6:	d42b      	bmi.n	8014100 <_printf_common+0xb0>
 80140a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80140ac:	4649      	mov	r1, r9
 80140ae:	4638      	mov	r0, r7
 80140b0:	47c0      	blx	r8
 80140b2:	3001      	adds	r0, #1
 80140b4:	d01e      	beq.n	80140f4 <_printf_common+0xa4>
 80140b6:	6823      	ldr	r3, [r4, #0]
 80140b8:	68e5      	ldr	r5, [r4, #12]
 80140ba:	6832      	ldr	r2, [r6, #0]
 80140bc:	f003 0306 	and.w	r3, r3, #6
 80140c0:	2b04      	cmp	r3, #4
 80140c2:	bf08      	it	eq
 80140c4:	1aad      	subeq	r5, r5, r2
 80140c6:	68a3      	ldr	r3, [r4, #8]
 80140c8:	6922      	ldr	r2, [r4, #16]
 80140ca:	bf0c      	ite	eq
 80140cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80140d0:	2500      	movne	r5, #0
 80140d2:	4293      	cmp	r3, r2
 80140d4:	bfc4      	itt	gt
 80140d6:	1a9b      	subgt	r3, r3, r2
 80140d8:	18ed      	addgt	r5, r5, r3
 80140da:	2600      	movs	r6, #0
 80140dc:	341a      	adds	r4, #26
 80140de:	42b5      	cmp	r5, r6
 80140e0:	d11a      	bne.n	8014118 <_printf_common+0xc8>
 80140e2:	2000      	movs	r0, #0
 80140e4:	e008      	b.n	80140f8 <_printf_common+0xa8>
 80140e6:	2301      	movs	r3, #1
 80140e8:	4652      	mov	r2, sl
 80140ea:	4649      	mov	r1, r9
 80140ec:	4638      	mov	r0, r7
 80140ee:	47c0      	blx	r8
 80140f0:	3001      	adds	r0, #1
 80140f2:	d103      	bne.n	80140fc <_printf_common+0xac>
 80140f4:	f04f 30ff 	mov.w	r0, #4294967295
 80140f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140fc:	3501      	adds	r5, #1
 80140fe:	e7c6      	b.n	801408e <_printf_common+0x3e>
 8014100:	18e1      	adds	r1, r4, r3
 8014102:	1c5a      	adds	r2, r3, #1
 8014104:	2030      	movs	r0, #48	; 0x30
 8014106:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801410a:	4422      	add	r2, r4
 801410c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014110:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014114:	3302      	adds	r3, #2
 8014116:	e7c7      	b.n	80140a8 <_printf_common+0x58>
 8014118:	2301      	movs	r3, #1
 801411a:	4622      	mov	r2, r4
 801411c:	4649      	mov	r1, r9
 801411e:	4638      	mov	r0, r7
 8014120:	47c0      	blx	r8
 8014122:	3001      	adds	r0, #1
 8014124:	d0e6      	beq.n	80140f4 <_printf_common+0xa4>
 8014126:	3601      	adds	r6, #1
 8014128:	e7d9      	b.n	80140de <_printf_common+0x8e>
	...

0801412c <_printf_i>:
 801412c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014130:	460c      	mov	r4, r1
 8014132:	4691      	mov	r9, r2
 8014134:	7e27      	ldrb	r7, [r4, #24]
 8014136:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014138:	2f78      	cmp	r7, #120	; 0x78
 801413a:	4680      	mov	r8, r0
 801413c:	469a      	mov	sl, r3
 801413e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014142:	d807      	bhi.n	8014154 <_printf_i+0x28>
 8014144:	2f62      	cmp	r7, #98	; 0x62
 8014146:	d80a      	bhi.n	801415e <_printf_i+0x32>
 8014148:	2f00      	cmp	r7, #0
 801414a:	f000 80d8 	beq.w	80142fe <_printf_i+0x1d2>
 801414e:	2f58      	cmp	r7, #88	; 0x58
 8014150:	f000 80a3 	beq.w	801429a <_printf_i+0x16e>
 8014154:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014158:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801415c:	e03a      	b.n	80141d4 <_printf_i+0xa8>
 801415e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014162:	2b15      	cmp	r3, #21
 8014164:	d8f6      	bhi.n	8014154 <_printf_i+0x28>
 8014166:	a001      	add	r0, pc, #4	; (adr r0, 801416c <_printf_i+0x40>)
 8014168:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801416c:	080141c5 	.word	0x080141c5
 8014170:	080141d9 	.word	0x080141d9
 8014174:	08014155 	.word	0x08014155
 8014178:	08014155 	.word	0x08014155
 801417c:	08014155 	.word	0x08014155
 8014180:	08014155 	.word	0x08014155
 8014184:	080141d9 	.word	0x080141d9
 8014188:	08014155 	.word	0x08014155
 801418c:	08014155 	.word	0x08014155
 8014190:	08014155 	.word	0x08014155
 8014194:	08014155 	.word	0x08014155
 8014198:	080142e5 	.word	0x080142e5
 801419c:	08014209 	.word	0x08014209
 80141a0:	080142c7 	.word	0x080142c7
 80141a4:	08014155 	.word	0x08014155
 80141a8:	08014155 	.word	0x08014155
 80141ac:	08014307 	.word	0x08014307
 80141b0:	08014155 	.word	0x08014155
 80141b4:	08014209 	.word	0x08014209
 80141b8:	08014155 	.word	0x08014155
 80141bc:	08014155 	.word	0x08014155
 80141c0:	080142cf 	.word	0x080142cf
 80141c4:	680b      	ldr	r3, [r1, #0]
 80141c6:	1d1a      	adds	r2, r3, #4
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	600a      	str	r2, [r1, #0]
 80141cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80141d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80141d4:	2301      	movs	r3, #1
 80141d6:	e0a3      	b.n	8014320 <_printf_i+0x1f4>
 80141d8:	6825      	ldr	r5, [r4, #0]
 80141da:	6808      	ldr	r0, [r1, #0]
 80141dc:	062e      	lsls	r6, r5, #24
 80141de:	f100 0304 	add.w	r3, r0, #4
 80141e2:	d50a      	bpl.n	80141fa <_printf_i+0xce>
 80141e4:	6805      	ldr	r5, [r0, #0]
 80141e6:	600b      	str	r3, [r1, #0]
 80141e8:	2d00      	cmp	r5, #0
 80141ea:	da03      	bge.n	80141f4 <_printf_i+0xc8>
 80141ec:	232d      	movs	r3, #45	; 0x2d
 80141ee:	426d      	negs	r5, r5
 80141f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80141f4:	485e      	ldr	r0, [pc, #376]	; (8014370 <_printf_i+0x244>)
 80141f6:	230a      	movs	r3, #10
 80141f8:	e019      	b.n	801422e <_printf_i+0x102>
 80141fa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80141fe:	6805      	ldr	r5, [r0, #0]
 8014200:	600b      	str	r3, [r1, #0]
 8014202:	bf18      	it	ne
 8014204:	b22d      	sxthne	r5, r5
 8014206:	e7ef      	b.n	80141e8 <_printf_i+0xbc>
 8014208:	680b      	ldr	r3, [r1, #0]
 801420a:	6825      	ldr	r5, [r4, #0]
 801420c:	1d18      	adds	r0, r3, #4
 801420e:	6008      	str	r0, [r1, #0]
 8014210:	0628      	lsls	r0, r5, #24
 8014212:	d501      	bpl.n	8014218 <_printf_i+0xec>
 8014214:	681d      	ldr	r5, [r3, #0]
 8014216:	e002      	b.n	801421e <_printf_i+0xf2>
 8014218:	0669      	lsls	r1, r5, #25
 801421a:	d5fb      	bpl.n	8014214 <_printf_i+0xe8>
 801421c:	881d      	ldrh	r5, [r3, #0]
 801421e:	4854      	ldr	r0, [pc, #336]	; (8014370 <_printf_i+0x244>)
 8014220:	2f6f      	cmp	r7, #111	; 0x6f
 8014222:	bf0c      	ite	eq
 8014224:	2308      	moveq	r3, #8
 8014226:	230a      	movne	r3, #10
 8014228:	2100      	movs	r1, #0
 801422a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801422e:	6866      	ldr	r6, [r4, #4]
 8014230:	60a6      	str	r6, [r4, #8]
 8014232:	2e00      	cmp	r6, #0
 8014234:	bfa2      	ittt	ge
 8014236:	6821      	ldrge	r1, [r4, #0]
 8014238:	f021 0104 	bicge.w	r1, r1, #4
 801423c:	6021      	strge	r1, [r4, #0]
 801423e:	b90d      	cbnz	r5, 8014244 <_printf_i+0x118>
 8014240:	2e00      	cmp	r6, #0
 8014242:	d04d      	beq.n	80142e0 <_printf_i+0x1b4>
 8014244:	4616      	mov	r6, r2
 8014246:	fbb5 f1f3 	udiv	r1, r5, r3
 801424a:	fb03 5711 	mls	r7, r3, r1, r5
 801424e:	5dc7      	ldrb	r7, [r0, r7]
 8014250:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014254:	462f      	mov	r7, r5
 8014256:	42bb      	cmp	r3, r7
 8014258:	460d      	mov	r5, r1
 801425a:	d9f4      	bls.n	8014246 <_printf_i+0x11a>
 801425c:	2b08      	cmp	r3, #8
 801425e:	d10b      	bne.n	8014278 <_printf_i+0x14c>
 8014260:	6823      	ldr	r3, [r4, #0]
 8014262:	07df      	lsls	r7, r3, #31
 8014264:	d508      	bpl.n	8014278 <_printf_i+0x14c>
 8014266:	6923      	ldr	r3, [r4, #16]
 8014268:	6861      	ldr	r1, [r4, #4]
 801426a:	4299      	cmp	r1, r3
 801426c:	bfde      	ittt	le
 801426e:	2330      	movle	r3, #48	; 0x30
 8014270:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014274:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014278:	1b92      	subs	r2, r2, r6
 801427a:	6122      	str	r2, [r4, #16]
 801427c:	f8cd a000 	str.w	sl, [sp]
 8014280:	464b      	mov	r3, r9
 8014282:	aa03      	add	r2, sp, #12
 8014284:	4621      	mov	r1, r4
 8014286:	4640      	mov	r0, r8
 8014288:	f7ff fee2 	bl	8014050 <_printf_common>
 801428c:	3001      	adds	r0, #1
 801428e:	d14c      	bne.n	801432a <_printf_i+0x1fe>
 8014290:	f04f 30ff 	mov.w	r0, #4294967295
 8014294:	b004      	add	sp, #16
 8014296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801429a:	4835      	ldr	r0, [pc, #212]	; (8014370 <_printf_i+0x244>)
 801429c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80142a0:	6823      	ldr	r3, [r4, #0]
 80142a2:	680e      	ldr	r6, [r1, #0]
 80142a4:	061f      	lsls	r7, r3, #24
 80142a6:	f856 5b04 	ldr.w	r5, [r6], #4
 80142aa:	600e      	str	r6, [r1, #0]
 80142ac:	d514      	bpl.n	80142d8 <_printf_i+0x1ac>
 80142ae:	07d9      	lsls	r1, r3, #31
 80142b0:	bf44      	itt	mi
 80142b2:	f043 0320 	orrmi.w	r3, r3, #32
 80142b6:	6023      	strmi	r3, [r4, #0]
 80142b8:	b91d      	cbnz	r5, 80142c2 <_printf_i+0x196>
 80142ba:	6823      	ldr	r3, [r4, #0]
 80142bc:	f023 0320 	bic.w	r3, r3, #32
 80142c0:	6023      	str	r3, [r4, #0]
 80142c2:	2310      	movs	r3, #16
 80142c4:	e7b0      	b.n	8014228 <_printf_i+0xfc>
 80142c6:	6823      	ldr	r3, [r4, #0]
 80142c8:	f043 0320 	orr.w	r3, r3, #32
 80142cc:	6023      	str	r3, [r4, #0]
 80142ce:	2378      	movs	r3, #120	; 0x78
 80142d0:	4828      	ldr	r0, [pc, #160]	; (8014374 <_printf_i+0x248>)
 80142d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80142d6:	e7e3      	b.n	80142a0 <_printf_i+0x174>
 80142d8:	065e      	lsls	r6, r3, #25
 80142da:	bf48      	it	mi
 80142dc:	b2ad      	uxthmi	r5, r5
 80142de:	e7e6      	b.n	80142ae <_printf_i+0x182>
 80142e0:	4616      	mov	r6, r2
 80142e2:	e7bb      	b.n	801425c <_printf_i+0x130>
 80142e4:	680b      	ldr	r3, [r1, #0]
 80142e6:	6826      	ldr	r6, [r4, #0]
 80142e8:	6960      	ldr	r0, [r4, #20]
 80142ea:	1d1d      	adds	r5, r3, #4
 80142ec:	600d      	str	r5, [r1, #0]
 80142ee:	0635      	lsls	r5, r6, #24
 80142f0:	681b      	ldr	r3, [r3, #0]
 80142f2:	d501      	bpl.n	80142f8 <_printf_i+0x1cc>
 80142f4:	6018      	str	r0, [r3, #0]
 80142f6:	e002      	b.n	80142fe <_printf_i+0x1d2>
 80142f8:	0671      	lsls	r1, r6, #25
 80142fa:	d5fb      	bpl.n	80142f4 <_printf_i+0x1c8>
 80142fc:	8018      	strh	r0, [r3, #0]
 80142fe:	2300      	movs	r3, #0
 8014300:	6123      	str	r3, [r4, #16]
 8014302:	4616      	mov	r6, r2
 8014304:	e7ba      	b.n	801427c <_printf_i+0x150>
 8014306:	680b      	ldr	r3, [r1, #0]
 8014308:	1d1a      	adds	r2, r3, #4
 801430a:	600a      	str	r2, [r1, #0]
 801430c:	681e      	ldr	r6, [r3, #0]
 801430e:	6862      	ldr	r2, [r4, #4]
 8014310:	2100      	movs	r1, #0
 8014312:	4630      	mov	r0, r6
 8014314:	f7eb ff6c 	bl	80001f0 <memchr>
 8014318:	b108      	cbz	r0, 801431e <_printf_i+0x1f2>
 801431a:	1b80      	subs	r0, r0, r6
 801431c:	6060      	str	r0, [r4, #4]
 801431e:	6863      	ldr	r3, [r4, #4]
 8014320:	6123      	str	r3, [r4, #16]
 8014322:	2300      	movs	r3, #0
 8014324:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014328:	e7a8      	b.n	801427c <_printf_i+0x150>
 801432a:	6923      	ldr	r3, [r4, #16]
 801432c:	4632      	mov	r2, r6
 801432e:	4649      	mov	r1, r9
 8014330:	4640      	mov	r0, r8
 8014332:	47d0      	blx	sl
 8014334:	3001      	adds	r0, #1
 8014336:	d0ab      	beq.n	8014290 <_printf_i+0x164>
 8014338:	6823      	ldr	r3, [r4, #0]
 801433a:	079b      	lsls	r3, r3, #30
 801433c:	d413      	bmi.n	8014366 <_printf_i+0x23a>
 801433e:	68e0      	ldr	r0, [r4, #12]
 8014340:	9b03      	ldr	r3, [sp, #12]
 8014342:	4298      	cmp	r0, r3
 8014344:	bfb8      	it	lt
 8014346:	4618      	movlt	r0, r3
 8014348:	e7a4      	b.n	8014294 <_printf_i+0x168>
 801434a:	2301      	movs	r3, #1
 801434c:	4632      	mov	r2, r6
 801434e:	4649      	mov	r1, r9
 8014350:	4640      	mov	r0, r8
 8014352:	47d0      	blx	sl
 8014354:	3001      	adds	r0, #1
 8014356:	d09b      	beq.n	8014290 <_printf_i+0x164>
 8014358:	3501      	adds	r5, #1
 801435a:	68e3      	ldr	r3, [r4, #12]
 801435c:	9903      	ldr	r1, [sp, #12]
 801435e:	1a5b      	subs	r3, r3, r1
 8014360:	42ab      	cmp	r3, r5
 8014362:	dcf2      	bgt.n	801434a <_printf_i+0x21e>
 8014364:	e7eb      	b.n	801433e <_printf_i+0x212>
 8014366:	2500      	movs	r5, #0
 8014368:	f104 0619 	add.w	r6, r4, #25
 801436c:	e7f5      	b.n	801435a <_printf_i+0x22e>
 801436e:	bf00      	nop
 8014370:	0801784b 	.word	0x0801784b
 8014374:	0801785c 	.word	0x0801785c

08014378 <_read_r>:
 8014378:	b538      	push	{r3, r4, r5, lr}
 801437a:	4d07      	ldr	r5, [pc, #28]	; (8014398 <_read_r+0x20>)
 801437c:	4604      	mov	r4, r0
 801437e:	4608      	mov	r0, r1
 8014380:	4611      	mov	r1, r2
 8014382:	2200      	movs	r2, #0
 8014384:	602a      	str	r2, [r5, #0]
 8014386:	461a      	mov	r2, r3
 8014388:	f7ec fbdc 	bl	8000b44 <_read>
 801438c:	1c43      	adds	r3, r0, #1
 801438e:	d102      	bne.n	8014396 <_read_r+0x1e>
 8014390:	682b      	ldr	r3, [r5, #0]
 8014392:	b103      	cbz	r3, 8014396 <_read_r+0x1e>
 8014394:	6023      	str	r3, [r4, #0]
 8014396:	bd38      	pop	{r3, r4, r5, pc}
 8014398:	2000ef9c 	.word	0x2000ef9c

0801439c <__swbuf_r>:
 801439c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801439e:	460e      	mov	r6, r1
 80143a0:	4614      	mov	r4, r2
 80143a2:	4605      	mov	r5, r0
 80143a4:	b118      	cbz	r0, 80143ae <__swbuf_r+0x12>
 80143a6:	6983      	ldr	r3, [r0, #24]
 80143a8:	b90b      	cbnz	r3, 80143ae <__swbuf_r+0x12>
 80143aa:	f7ff f913 	bl	80135d4 <__sinit>
 80143ae:	4b21      	ldr	r3, [pc, #132]	; (8014434 <__swbuf_r+0x98>)
 80143b0:	429c      	cmp	r4, r3
 80143b2:	d12b      	bne.n	801440c <__swbuf_r+0x70>
 80143b4:	686c      	ldr	r4, [r5, #4]
 80143b6:	69a3      	ldr	r3, [r4, #24]
 80143b8:	60a3      	str	r3, [r4, #8]
 80143ba:	89a3      	ldrh	r3, [r4, #12]
 80143bc:	071a      	lsls	r2, r3, #28
 80143be:	d52f      	bpl.n	8014420 <__swbuf_r+0x84>
 80143c0:	6923      	ldr	r3, [r4, #16]
 80143c2:	b36b      	cbz	r3, 8014420 <__swbuf_r+0x84>
 80143c4:	6923      	ldr	r3, [r4, #16]
 80143c6:	6820      	ldr	r0, [r4, #0]
 80143c8:	1ac0      	subs	r0, r0, r3
 80143ca:	6963      	ldr	r3, [r4, #20]
 80143cc:	b2f6      	uxtb	r6, r6
 80143ce:	4283      	cmp	r3, r0
 80143d0:	4637      	mov	r7, r6
 80143d2:	dc04      	bgt.n	80143de <__swbuf_r+0x42>
 80143d4:	4621      	mov	r1, r4
 80143d6:	4628      	mov	r0, r5
 80143d8:	f7ff fc1c 	bl	8013c14 <_fflush_r>
 80143dc:	bb30      	cbnz	r0, 801442c <__swbuf_r+0x90>
 80143de:	68a3      	ldr	r3, [r4, #8]
 80143e0:	3b01      	subs	r3, #1
 80143e2:	60a3      	str	r3, [r4, #8]
 80143e4:	6823      	ldr	r3, [r4, #0]
 80143e6:	1c5a      	adds	r2, r3, #1
 80143e8:	6022      	str	r2, [r4, #0]
 80143ea:	701e      	strb	r6, [r3, #0]
 80143ec:	6963      	ldr	r3, [r4, #20]
 80143ee:	3001      	adds	r0, #1
 80143f0:	4283      	cmp	r3, r0
 80143f2:	d004      	beq.n	80143fe <__swbuf_r+0x62>
 80143f4:	89a3      	ldrh	r3, [r4, #12]
 80143f6:	07db      	lsls	r3, r3, #31
 80143f8:	d506      	bpl.n	8014408 <__swbuf_r+0x6c>
 80143fa:	2e0a      	cmp	r6, #10
 80143fc:	d104      	bne.n	8014408 <__swbuf_r+0x6c>
 80143fe:	4621      	mov	r1, r4
 8014400:	4628      	mov	r0, r5
 8014402:	f7ff fc07 	bl	8013c14 <_fflush_r>
 8014406:	b988      	cbnz	r0, 801442c <__swbuf_r+0x90>
 8014408:	4638      	mov	r0, r7
 801440a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801440c:	4b0a      	ldr	r3, [pc, #40]	; (8014438 <__swbuf_r+0x9c>)
 801440e:	429c      	cmp	r4, r3
 8014410:	d101      	bne.n	8014416 <__swbuf_r+0x7a>
 8014412:	68ac      	ldr	r4, [r5, #8]
 8014414:	e7cf      	b.n	80143b6 <__swbuf_r+0x1a>
 8014416:	4b09      	ldr	r3, [pc, #36]	; (801443c <__swbuf_r+0xa0>)
 8014418:	429c      	cmp	r4, r3
 801441a:	bf08      	it	eq
 801441c:	68ec      	ldreq	r4, [r5, #12]
 801441e:	e7ca      	b.n	80143b6 <__swbuf_r+0x1a>
 8014420:	4621      	mov	r1, r4
 8014422:	4628      	mov	r0, r5
 8014424:	f000 f80c 	bl	8014440 <__swsetup_r>
 8014428:	2800      	cmp	r0, #0
 801442a:	d0cb      	beq.n	80143c4 <__swbuf_r+0x28>
 801442c:	f04f 37ff 	mov.w	r7, #4294967295
 8014430:	e7ea      	b.n	8014408 <__swbuf_r+0x6c>
 8014432:	bf00      	nop
 8014434:	08017744 	.word	0x08017744
 8014438:	08017764 	.word	0x08017764
 801443c:	08017724 	.word	0x08017724

08014440 <__swsetup_r>:
 8014440:	4b32      	ldr	r3, [pc, #200]	; (801450c <__swsetup_r+0xcc>)
 8014442:	b570      	push	{r4, r5, r6, lr}
 8014444:	681d      	ldr	r5, [r3, #0]
 8014446:	4606      	mov	r6, r0
 8014448:	460c      	mov	r4, r1
 801444a:	b125      	cbz	r5, 8014456 <__swsetup_r+0x16>
 801444c:	69ab      	ldr	r3, [r5, #24]
 801444e:	b913      	cbnz	r3, 8014456 <__swsetup_r+0x16>
 8014450:	4628      	mov	r0, r5
 8014452:	f7ff f8bf 	bl	80135d4 <__sinit>
 8014456:	4b2e      	ldr	r3, [pc, #184]	; (8014510 <__swsetup_r+0xd0>)
 8014458:	429c      	cmp	r4, r3
 801445a:	d10f      	bne.n	801447c <__swsetup_r+0x3c>
 801445c:	686c      	ldr	r4, [r5, #4]
 801445e:	89a3      	ldrh	r3, [r4, #12]
 8014460:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014464:	0719      	lsls	r1, r3, #28
 8014466:	d42c      	bmi.n	80144c2 <__swsetup_r+0x82>
 8014468:	06dd      	lsls	r5, r3, #27
 801446a:	d411      	bmi.n	8014490 <__swsetup_r+0x50>
 801446c:	2309      	movs	r3, #9
 801446e:	6033      	str	r3, [r6, #0]
 8014470:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014474:	81a3      	strh	r3, [r4, #12]
 8014476:	f04f 30ff 	mov.w	r0, #4294967295
 801447a:	e03e      	b.n	80144fa <__swsetup_r+0xba>
 801447c:	4b25      	ldr	r3, [pc, #148]	; (8014514 <__swsetup_r+0xd4>)
 801447e:	429c      	cmp	r4, r3
 8014480:	d101      	bne.n	8014486 <__swsetup_r+0x46>
 8014482:	68ac      	ldr	r4, [r5, #8]
 8014484:	e7eb      	b.n	801445e <__swsetup_r+0x1e>
 8014486:	4b24      	ldr	r3, [pc, #144]	; (8014518 <__swsetup_r+0xd8>)
 8014488:	429c      	cmp	r4, r3
 801448a:	bf08      	it	eq
 801448c:	68ec      	ldreq	r4, [r5, #12]
 801448e:	e7e6      	b.n	801445e <__swsetup_r+0x1e>
 8014490:	0758      	lsls	r0, r3, #29
 8014492:	d512      	bpl.n	80144ba <__swsetup_r+0x7a>
 8014494:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014496:	b141      	cbz	r1, 80144aa <__swsetup_r+0x6a>
 8014498:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801449c:	4299      	cmp	r1, r3
 801449e:	d002      	beq.n	80144a6 <__swsetup_r+0x66>
 80144a0:	4630      	mov	r0, r6
 80144a2:	f7ff fc2b 	bl	8013cfc <_free_r>
 80144a6:	2300      	movs	r3, #0
 80144a8:	6363      	str	r3, [r4, #52]	; 0x34
 80144aa:	89a3      	ldrh	r3, [r4, #12]
 80144ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80144b0:	81a3      	strh	r3, [r4, #12]
 80144b2:	2300      	movs	r3, #0
 80144b4:	6063      	str	r3, [r4, #4]
 80144b6:	6923      	ldr	r3, [r4, #16]
 80144b8:	6023      	str	r3, [r4, #0]
 80144ba:	89a3      	ldrh	r3, [r4, #12]
 80144bc:	f043 0308 	orr.w	r3, r3, #8
 80144c0:	81a3      	strh	r3, [r4, #12]
 80144c2:	6923      	ldr	r3, [r4, #16]
 80144c4:	b94b      	cbnz	r3, 80144da <__swsetup_r+0x9a>
 80144c6:	89a3      	ldrh	r3, [r4, #12]
 80144c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80144cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80144d0:	d003      	beq.n	80144da <__swsetup_r+0x9a>
 80144d2:	4621      	mov	r1, r4
 80144d4:	4630      	mov	r0, r6
 80144d6:	f000 f84d 	bl	8014574 <__smakebuf_r>
 80144da:	89a0      	ldrh	r0, [r4, #12]
 80144dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80144e0:	f010 0301 	ands.w	r3, r0, #1
 80144e4:	d00a      	beq.n	80144fc <__swsetup_r+0xbc>
 80144e6:	2300      	movs	r3, #0
 80144e8:	60a3      	str	r3, [r4, #8]
 80144ea:	6963      	ldr	r3, [r4, #20]
 80144ec:	425b      	negs	r3, r3
 80144ee:	61a3      	str	r3, [r4, #24]
 80144f0:	6923      	ldr	r3, [r4, #16]
 80144f2:	b943      	cbnz	r3, 8014506 <__swsetup_r+0xc6>
 80144f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80144f8:	d1ba      	bne.n	8014470 <__swsetup_r+0x30>
 80144fa:	bd70      	pop	{r4, r5, r6, pc}
 80144fc:	0781      	lsls	r1, r0, #30
 80144fe:	bf58      	it	pl
 8014500:	6963      	ldrpl	r3, [r4, #20]
 8014502:	60a3      	str	r3, [r4, #8]
 8014504:	e7f4      	b.n	80144f0 <__swsetup_r+0xb0>
 8014506:	2000      	movs	r0, #0
 8014508:	e7f7      	b.n	80144fa <__swsetup_r+0xba>
 801450a:	bf00      	nop
 801450c:	20000020 	.word	0x20000020
 8014510:	08017744 	.word	0x08017744
 8014514:	08017764 	.word	0x08017764
 8014518:	08017724 	.word	0x08017724

0801451c <abort>:
 801451c:	b508      	push	{r3, lr}
 801451e:	2006      	movs	r0, #6
 8014520:	f000 f890 	bl	8014644 <raise>
 8014524:	2001      	movs	r0, #1
 8014526:	f7ec fb03 	bl	8000b30 <_exit>

0801452a <__swhatbuf_r>:
 801452a:	b570      	push	{r4, r5, r6, lr}
 801452c:	460e      	mov	r6, r1
 801452e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014532:	2900      	cmp	r1, #0
 8014534:	b096      	sub	sp, #88	; 0x58
 8014536:	4614      	mov	r4, r2
 8014538:	461d      	mov	r5, r3
 801453a:	da07      	bge.n	801454c <__swhatbuf_r+0x22>
 801453c:	2300      	movs	r3, #0
 801453e:	602b      	str	r3, [r5, #0]
 8014540:	89b3      	ldrh	r3, [r6, #12]
 8014542:	061a      	lsls	r2, r3, #24
 8014544:	d410      	bmi.n	8014568 <__swhatbuf_r+0x3e>
 8014546:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801454a:	e00e      	b.n	801456a <__swhatbuf_r+0x40>
 801454c:	466a      	mov	r2, sp
 801454e:	f000 f895 	bl	801467c <_fstat_r>
 8014552:	2800      	cmp	r0, #0
 8014554:	dbf2      	blt.n	801453c <__swhatbuf_r+0x12>
 8014556:	9a01      	ldr	r2, [sp, #4]
 8014558:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801455c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014560:	425a      	negs	r2, r3
 8014562:	415a      	adcs	r2, r3
 8014564:	602a      	str	r2, [r5, #0]
 8014566:	e7ee      	b.n	8014546 <__swhatbuf_r+0x1c>
 8014568:	2340      	movs	r3, #64	; 0x40
 801456a:	2000      	movs	r0, #0
 801456c:	6023      	str	r3, [r4, #0]
 801456e:	b016      	add	sp, #88	; 0x58
 8014570:	bd70      	pop	{r4, r5, r6, pc}
	...

08014574 <__smakebuf_r>:
 8014574:	898b      	ldrh	r3, [r1, #12]
 8014576:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014578:	079d      	lsls	r5, r3, #30
 801457a:	4606      	mov	r6, r0
 801457c:	460c      	mov	r4, r1
 801457e:	d507      	bpl.n	8014590 <__smakebuf_r+0x1c>
 8014580:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014584:	6023      	str	r3, [r4, #0]
 8014586:	6123      	str	r3, [r4, #16]
 8014588:	2301      	movs	r3, #1
 801458a:	6163      	str	r3, [r4, #20]
 801458c:	b002      	add	sp, #8
 801458e:	bd70      	pop	{r4, r5, r6, pc}
 8014590:	ab01      	add	r3, sp, #4
 8014592:	466a      	mov	r2, sp
 8014594:	f7ff ffc9 	bl	801452a <__swhatbuf_r>
 8014598:	9900      	ldr	r1, [sp, #0]
 801459a:	4605      	mov	r5, r0
 801459c:	4630      	mov	r0, r6
 801459e:	f7ff f903 	bl	80137a8 <_malloc_r>
 80145a2:	b948      	cbnz	r0, 80145b8 <__smakebuf_r+0x44>
 80145a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80145a8:	059a      	lsls	r2, r3, #22
 80145aa:	d4ef      	bmi.n	801458c <__smakebuf_r+0x18>
 80145ac:	f023 0303 	bic.w	r3, r3, #3
 80145b0:	f043 0302 	orr.w	r3, r3, #2
 80145b4:	81a3      	strh	r3, [r4, #12]
 80145b6:	e7e3      	b.n	8014580 <__smakebuf_r+0xc>
 80145b8:	4b0d      	ldr	r3, [pc, #52]	; (80145f0 <__smakebuf_r+0x7c>)
 80145ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80145bc:	89a3      	ldrh	r3, [r4, #12]
 80145be:	6020      	str	r0, [r4, #0]
 80145c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80145c4:	81a3      	strh	r3, [r4, #12]
 80145c6:	9b00      	ldr	r3, [sp, #0]
 80145c8:	6163      	str	r3, [r4, #20]
 80145ca:	9b01      	ldr	r3, [sp, #4]
 80145cc:	6120      	str	r0, [r4, #16]
 80145ce:	b15b      	cbz	r3, 80145e8 <__smakebuf_r+0x74>
 80145d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80145d4:	4630      	mov	r0, r6
 80145d6:	f000 f863 	bl	80146a0 <_isatty_r>
 80145da:	b128      	cbz	r0, 80145e8 <__smakebuf_r+0x74>
 80145dc:	89a3      	ldrh	r3, [r4, #12]
 80145de:	f023 0303 	bic.w	r3, r3, #3
 80145e2:	f043 0301 	orr.w	r3, r3, #1
 80145e6:	81a3      	strh	r3, [r4, #12]
 80145e8:	89a0      	ldrh	r0, [r4, #12]
 80145ea:	4305      	orrs	r5, r0
 80145ec:	81a5      	strh	r5, [r4, #12]
 80145ee:	e7cd      	b.n	801458c <__smakebuf_r+0x18>
 80145f0:	0801356d 	.word	0x0801356d

080145f4 <_raise_r>:
 80145f4:	291f      	cmp	r1, #31
 80145f6:	b538      	push	{r3, r4, r5, lr}
 80145f8:	4604      	mov	r4, r0
 80145fa:	460d      	mov	r5, r1
 80145fc:	d904      	bls.n	8014608 <_raise_r+0x14>
 80145fe:	2316      	movs	r3, #22
 8014600:	6003      	str	r3, [r0, #0]
 8014602:	f04f 30ff 	mov.w	r0, #4294967295
 8014606:	bd38      	pop	{r3, r4, r5, pc}
 8014608:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801460a:	b112      	cbz	r2, 8014612 <_raise_r+0x1e>
 801460c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014610:	b94b      	cbnz	r3, 8014626 <_raise_r+0x32>
 8014612:	4620      	mov	r0, r4
 8014614:	f000 f830 	bl	8014678 <_getpid_r>
 8014618:	462a      	mov	r2, r5
 801461a:	4601      	mov	r1, r0
 801461c:	4620      	mov	r0, r4
 801461e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014622:	f000 b817 	b.w	8014654 <_kill_r>
 8014626:	2b01      	cmp	r3, #1
 8014628:	d00a      	beq.n	8014640 <_raise_r+0x4c>
 801462a:	1c59      	adds	r1, r3, #1
 801462c:	d103      	bne.n	8014636 <_raise_r+0x42>
 801462e:	2316      	movs	r3, #22
 8014630:	6003      	str	r3, [r0, #0]
 8014632:	2001      	movs	r0, #1
 8014634:	e7e7      	b.n	8014606 <_raise_r+0x12>
 8014636:	2400      	movs	r4, #0
 8014638:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801463c:	4628      	mov	r0, r5
 801463e:	4798      	blx	r3
 8014640:	2000      	movs	r0, #0
 8014642:	e7e0      	b.n	8014606 <_raise_r+0x12>

08014644 <raise>:
 8014644:	4b02      	ldr	r3, [pc, #8]	; (8014650 <raise+0xc>)
 8014646:	4601      	mov	r1, r0
 8014648:	6818      	ldr	r0, [r3, #0]
 801464a:	f7ff bfd3 	b.w	80145f4 <_raise_r>
 801464e:	bf00      	nop
 8014650:	20000020 	.word	0x20000020

08014654 <_kill_r>:
 8014654:	b538      	push	{r3, r4, r5, lr}
 8014656:	4d07      	ldr	r5, [pc, #28]	; (8014674 <_kill_r+0x20>)
 8014658:	2300      	movs	r3, #0
 801465a:	4604      	mov	r4, r0
 801465c:	4608      	mov	r0, r1
 801465e:	4611      	mov	r1, r2
 8014660:	602b      	str	r3, [r5, #0]
 8014662:	f7ec fa53 	bl	8000b0c <_kill>
 8014666:	1c43      	adds	r3, r0, #1
 8014668:	d102      	bne.n	8014670 <_kill_r+0x1c>
 801466a:	682b      	ldr	r3, [r5, #0]
 801466c:	b103      	cbz	r3, 8014670 <_kill_r+0x1c>
 801466e:	6023      	str	r3, [r4, #0]
 8014670:	bd38      	pop	{r3, r4, r5, pc}
 8014672:	bf00      	nop
 8014674:	2000ef9c 	.word	0x2000ef9c

08014678 <_getpid_r>:
 8014678:	f7ec ba40 	b.w	8000afc <_getpid>

0801467c <_fstat_r>:
 801467c:	b538      	push	{r3, r4, r5, lr}
 801467e:	4d07      	ldr	r5, [pc, #28]	; (801469c <_fstat_r+0x20>)
 8014680:	2300      	movs	r3, #0
 8014682:	4604      	mov	r4, r0
 8014684:	4608      	mov	r0, r1
 8014686:	4611      	mov	r1, r2
 8014688:	602b      	str	r3, [r5, #0]
 801468a:	f7ec faa0 	bl	8000bce <_fstat>
 801468e:	1c43      	adds	r3, r0, #1
 8014690:	d102      	bne.n	8014698 <_fstat_r+0x1c>
 8014692:	682b      	ldr	r3, [r5, #0]
 8014694:	b103      	cbz	r3, 8014698 <_fstat_r+0x1c>
 8014696:	6023      	str	r3, [r4, #0]
 8014698:	bd38      	pop	{r3, r4, r5, pc}
 801469a:	bf00      	nop
 801469c:	2000ef9c 	.word	0x2000ef9c

080146a0 <_isatty_r>:
 80146a0:	b538      	push	{r3, r4, r5, lr}
 80146a2:	4d06      	ldr	r5, [pc, #24]	; (80146bc <_isatty_r+0x1c>)
 80146a4:	2300      	movs	r3, #0
 80146a6:	4604      	mov	r4, r0
 80146a8:	4608      	mov	r0, r1
 80146aa:	602b      	str	r3, [r5, #0]
 80146ac:	f7ec fa9f 	bl	8000bee <_isatty>
 80146b0:	1c43      	adds	r3, r0, #1
 80146b2:	d102      	bne.n	80146ba <_isatty_r+0x1a>
 80146b4:	682b      	ldr	r3, [r5, #0]
 80146b6:	b103      	cbz	r3, 80146ba <_isatty_r+0x1a>
 80146b8:	6023      	str	r3, [r4, #0]
 80146ba:	bd38      	pop	{r3, r4, r5, pc}
 80146bc:	2000ef9c 	.word	0x2000ef9c

080146c0 <_init>:
 80146c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146c2:	bf00      	nop
 80146c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80146c6:	bc08      	pop	{r3}
 80146c8:	469e      	mov	lr, r3
 80146ca:	4770      	bx	lr

080146cc <_fini>:
 80146cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146ce:	bf00      	nop
 80146d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80146d2:	bc08      	pop	{r3}
 80146d4:	469e      	mov	lr, r3
 80146d6:	4770      	bx	lr
