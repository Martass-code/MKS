
cviceni9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006640  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080067ec  080067ec  000167ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800684c  0800684c  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  0800684c  0800684c  0001684c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006854  08006854  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006854  08006854  00016854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006858  08006858  00016858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800685c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020180  2**0
                  CONTENTS
 10 .bss          00000954  20000180  20000180  00020180  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000ad4  20000ad4  00020180  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014dfb  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002dd2  00000000  00000000  00034fab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cc0  00000000  00000000  00037d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bb8  00000000  00000000  00038a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002587e  00000000  00000000  000395f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000108d1  00000000  00000000  0005ee76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5f91  00000000  00000000  0006f747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001456d8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000033b4  00000000  00000000  0014572c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000180 	.word	0x20000180
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080067d4 	.word	0x080067d4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000184 	.word	0x20000184
 80001e8:	080067d4 	.word	0x080067d4

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <napis>:
		}


}*/

void napis(uint8_t klavesa, uint8_t prava) {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b086      	sub	sp, #24
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	460a      	mov	r2, r1
 80004ee:	71fb      	strb	r3, [r7, #7]
 80004f0:	4613      	mov	r3, r2
 80004f2:	71bb      	strb	r3, [r7, #6]
	uint8_t buff[9]; //
	buff[0] = 0x01; //klavesnice
 80004f4:	2301      	movs	r3, #1
 80004f6:	733b      	strb	r3, [r7, #12]
	buff[1] = klavesa;
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	737b      	strb	r3, [r7, #13]
	buff[2] = 0x00;
 80004fc:	2300      	movs	r3, #0
 80004fe:	73bb      	strb	r3, [r7, #14]
	buff[3] = prava;
 8000500:	79bb      	ldrb	r3, [r7, #6]
 8000502:	73fb      	strb	r3, [r7, #15]
	buff[4] = 0x00;
 8000504:	2300      	movs	r3, #0
 8000506:	743b      	strb	r3, [r7, #16]
	buff[5] = 0x00;
 8000508:	2300      	movs	r3, #0
 800050a:	747b      	strb	r3, [r7, #17]
	buff[6] = 0x00;
 800050c:	2300      	movs	r3, #0
 800050e:	74bb      	strb	r3, [r7, #18]
	buff[7] = 0x00;
 8000510:	2300      	movs	r3, #0
 8000512:	74fb      	strb	r3, [r7, #19]
	buff[8] = 0x00;
 8000514:	2300      	movs	r3, #0
 8000516:	753b      	strb	r3, [r7, #20]

	USBD_HID_SendReport(&hUsbDeviceFS, buff, sizeof(buff)); //odeslani reportu
 8000518:	f107 030c 	add.w	r3, r7, #12
 800051c:	2209      	movs	r2, #9
 800051e:	4619      	mov	r1, r3
 8000520:	4813      	ldr	r0, [pc, #76]	; (8000570 <napis+0x8c>)
 8000522:	f004 fb0b 	bl	8004b3c <USBD_HID_SendReport>
	HAL_Delay(USBD_HID_GetPollingInterval(&hUsbDeviceFS) * 10); //delay aby stihl pocitac report odebrat (pc se dotazuje v intervalu
 8000526:	4812      	ldr	r0, [pc, #72]	; (8000570 <napis+0x8c>)
 8000528:	f004 fb30 	bl	8004b8c <USBD_HID_GetPollingInterval>
 800052c:	4602      	mov	r2, r0
 800052e:	4613      	mov	r3, r2
 8000530:	009b      	lsls	r3, r3, #2
 8000532:	4413      	add	r3, r2
 8000534:	005b      	lsls	r3, r3, #1
 8000536:	4618      	mov	r0, r3
 8000538:	f000 fb22 	bl	8000b80 <HAL_Delay>

	//pusteni klavesy
	buff[1] = 0x00;
 800053c:	2300      	movs	r3, #0
 800053e:	737b      	strb	r3, [r7, #13]
	buff[3] = 0x00;
 8000540:	2300      	movs	r3, #0
 8000542:	73fb      	strb	r3, [r7, #15]

	USBD_HID_SendReport(&hUsbDeviceFS, buff, sizeof(buff)); //odeslani reportu
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	2209      	movs	r2, #9
 800054a:	4619      	mov	r1, r3
 800054c:	4808      	ldr	r0, [pc, #32]	; (8000570 <napis+0x8c>)
 800054e:	f004 faf5 	bl	8004b3c <USBD_HID_SendReport>
	HAL_Delay(USBD_HID_GetPollingInterval(&hUsbDeviceFS) * 20); //delay aby stihl pocitac report odebrat (pc se dotazuje v intervalu
 8000552:	4807      	ldr	r0, [pc, #28]	; (8000570 <napis+0x8c>)
 8000554:	f004 fb1a 	bl	8004b8c <USBD_HID_GetPollingInterval>
 8000558:	4602      	mov	r2, r0
 800055a:	4613      	mov	r3, r2
 800055c:	009b      	lsls	r3, r3, #2
 800055e:	4413      	add	r3, r2
 8000560:	009b      	lsls	r3, r3, #2
 8000562:	4618      	mov	r0, r3
 8000564:	f000 fb0c 	bl	8000b80 <HAL_Delay>

}
 8000568:	bf00      	nop
 800056a:	3718      	adds	r7, #24
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	200001fc 	.word	0x200001fc

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f000 fa90 	bl	8000a9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f822 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f000 f8b4 	bl	80006ec <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000584:	f000 f888 	bl	8000698 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000588:	f005 fcb2 	bl	8005ef0 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {   //kresleni probehne pouze kdyz je zmacknute tlacitko

	  if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)){//kdyz se zmackne tlacitko, zacne se vykreslovat smajlik
 800058c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000590:	480b      	ldr	r0, [pc, #44]	; (80005c0 <main+0x4c>)
 8000592:	f000 fdd7 	bl	8001144 <HAL_GPIO_ReadPin>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d0f7      	beq.n	800058c <main+0x18>
			   0x0c;//I
			   0x011;//N
			 0x017;//T
			 0x28;//ENTER
			 */
			napis(0x08, 0x15); //WIN + R
 800059c:	2115      	movs	r1, #21
 800059e:	2008      	movs	r0, #8
 80005a0:	f7ff ffa0 	bl	80004e4 <napis>
			napis(0x10, 0x0); //M
 80005a4:	2100      	movs	r1, #0
 80005a6:	2010      	movs	r0, #16
 80005a8:	f7ff ff9c 	bl	80004e4 <napis>
			napis(0x16, 0x0); //S
 80005ac:	2100      	movs	r1, #0
 80005ae:	2016      	movs	r0, #22
 80005b0:	f7ff ff98 	bl	80004e4 <napis>

			HAL_Delay(10000);
 80005b4:	f242 7010 	movw	r0, #10000	; 0x2710
 80005b8:	f000 fae2 	bl	8000b80 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)){//kdyz se zmackne tlacitko, zacne se vykreslovat smajlik
 80005bc:	e7e6      	b.n	800058c <main+0x18>
 80005be:	bf00      	nop
 80005c0:	40020800 	.word	0x40020800

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b094      	sub	sp, #80	; 0x50
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 0320 	add.w	r3, r7, #32
 80005ce:	2230      	movs	r2, #48	; 0x30
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f006 f8f6 	bl	80067c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	4b28      	ldr	r3, [pc, #160]	; (8000690 <SystemClock_Config+0xcc>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	4a27      	ldr	r2, [pc, #156]	; (8000690 <SystemClock_Config+0xcc>)
 80005f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f6:	6413      	str	r3, [r2, #64]	; 0x40
 80005f8:	4b25      	ldr	r3, [pc, #148]	; (8000690 <SystemClock_Config+0xcc>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	4b22      	ldr	r3, [pc, #136]	; (8000694 <SystemClock_Config+0xd0>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a21      	ldr	r2, [pc, #132]	; (8000694 <SystemClock_Config+0xd0>)
 800060e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <SystemClock_Config+0xd0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000620:	2301      	movs	r3, #1
 8000622:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000624:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000628:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062a:	2302      	movs	r3, #2
 800062c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000632:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000634:	2304      	movs	r3, #4
 8000636:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000638:	23a8      	movs	r3, #168	; 0xa8
 800063a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063c:	2302      	movs	r3, #2
 800063e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000640:	2307      	movs	r3, #7
 8000642:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	f107 0320 	add.w	r3, r7, #32
 8000648:	4618      	mov	r0, r3
 800064a:	f001 ff17 	bl	800247c <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000654:	f000 f93c 	bl	80008d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000658:	230f      	movs	r3, #15
 800065a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065c:	2302      	movs	r3, #2
 800065e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000664:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000668:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800066a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800066e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2105      	movs	r1, #5
 8000676:	4618      	mov	r0, r3
 8000678:	f002 f978 	bl	800296c <HAL_RCC_ClockConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000682:	f000 f925 	bl	80008d0 <Error_Handler>
  }
}
 8000686:	bf00      	nop
 8000688:	3750      	adds	r7, #80	; 0x50
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40023800 	.word	0x40023800
 8000694:	40007000 	.word	0x40007000

08000698 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <MX_USART3_UART_Init+0x4c>)
 800069e:	4a12      	ldr	r2, [pc, #72]	; (80006e8 <MX_USART3_UART_Init+0x50>)
 80006a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <MX_USART3_UART_Init+0x4c>)
 80006a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_USART3_UART_Init+0x4c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006b0:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <MX_USART3_UART_Init+0x4c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006b6:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <MX_USART3_UART_Init+0x4c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006bc:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <MX_USART3_UART_Init+0x4c>)
 80006be:	220c      	movs	r2, #12
 80006c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c2:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <MX_USART3_UART_Init+0x4c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_USART3_UART_Init+0x4c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006ce:	4805      	ldr	r0, [pc, #20]	; (80006e4 <MX_USART3_UART_Init+0x4c>)
 80006d0:	f002 fb48 	bl	8002d64 <HAL_UART_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006da:	f000 f8f9 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	200001b4 	.word	0x200001b4
 80006e8:	40004800 	.word	0x40004800

080006ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08c      	sub	sp, #48	; 0x30
 80006f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f2:	f107 031c 	add.w	r3, r7, #28
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	61bb      	str	r3, [r7, #24]
 8000706:	4b6d      	ldr	r3, [pc, #436]	; (80008bc <MX_GPIO_Init+0x1d0>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a6c      	ldr	r2, [pc, #432]	; (80008bc <MX_GPIO_Init+0x1d0>)
 800070c:	f043 0304 	orr.w	r3, r3, #4
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b6a      	ldr	r3, [pc, #424]	; (80008bc <MX_GPIO_Init+0x1d0>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0304 	and.w	r3, r3, #4
 800071a:	61bb      	str	r3, [r7, #24]
 800071c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	617b      	str	r3, [r7, #20]
 8000722:	4b66      	ldr	r3, [pc, #408]	; (80008bc <MX_GPIO_Init+0x1d0>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a65      	ldr	r2, [pc, #404]	; (80008bc <MX_GPIO_Init+0x1d0>)
 8000728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b63      	ldr	r3, [pc, #396]	; (80008bc <MX_GPIO_Init+0x1d0>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000736:	617b      	str	r3, [r7, #20]
 8000738:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
 800073e:	4b5f      	ldr	r3, [pc, #380]	; (80008bc <MX_GPIO_Init+0x1d0>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a5e      	ldr	r2, [pc, #376]	; (80008bc <MX_GPIO_Init+0x1d0>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b5c      	ldr	r3, [pc, #368]	; (80008bc <MX_GPIO_Init+0x1d0>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	4b58      	ldr	r3, [pc, #352]	; (80008bc <MX_GPIO_Init+0x1d0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a57      	ldr	r2, [pc, #348]	; (80008bc <MX_GPIO_Init+0x1d0>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b55      	ldr	r3, [pc, #340]	; (80008bc <MX_GPIO_Init+0x1d0>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	4b51      	ldr	r3, [pc, #324]	; (80008bc <MX_GPIO_Init+0x1d0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a50      	ldr	r2, [pc, #320]	; (80008bc <MX_GPIO_Init+0x1d0>)
 800077c:	f043 0308 	orr.w	r3, r3, #8
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b4e      	ldr	r3, [pc, #312]	; (80008bc <MX_GPIO_Init+0x1d0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0308 	and.w	r3, r3, #8
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	4b4a      	ldr	r3, [pc, #296]	; (80008bc <MX_GPIO_Init+0x1d0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a49      	ldr	r2, [pc, #292]	; (80008bc <MX_GPIO_Init+0x1d0>)
 8000798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b47      	ldr	r3, [pc, #284]	; (80008bc <MX_GPIO_Init+0x1d0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	f244 0181 	movw	r1, #16513	; 0x4081
 80007b0:	4843      	ldr	r0, [pc, #268]	; (80008c0 <MX_GPIO_Init+0x1d4>)
 80007b2:	f000 fcdf 	bl	8001174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2140      	movs	r1, #64	; 0x40
 80007ba:	4842      	ldr	r0, [pc, #264]	; (80008c4 <MX_GPIO_Init+0x1d8>)
 80007bc:	f000 fcda 	bl	8001174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007c6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007d0:	f107 031c 	add.w	r3, r7, #28
 80007d4:	4619      	mov	r1, r3
 80007d6:	483c      	ldr	r0, [pc, #240]	; (80008c8 <MX_GPIO_Init+0x1dc>)
 80007d8:	f000 fb08 	bl	8000dec <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80007dc:	2332      	movs	r3, #50	; 0x32
 80007de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e0:	2302      	movs	r3, #2
 80007e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e8:	2303      	movs	r3, #3
 80007ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007ec:	230b      	movs	r3, #11
 80007ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f0:	f107 031c 	add.w	r3, r7, #28
 80007f4:	4619      	mov	r1, r3
 80007f6:	4834      	ldr	r0, [pc, #208]	; (80008c8 <MX_GPIO_Init+0x1dc>)
 80007f8:	f000 faf8 	bl	8000dec <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80007fc:	2386      	movs	r3, #134	; 0x86
 80007fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000800:	2302      	movs	r3, #2
 8000802:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000808:	2303      	movs	r3, #3
 800080a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800080c:	230b      	movs	r3, #11
 800080e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000810:	f107 031c 	add.w	r3, r7, #28
 8000814:	4619      	mov	r1, r3
 8000816:	482d      	ldr	r0, [pc, #180]	; (80008cc <MX_GPIO_Init+0x1e0>)
 8000818:	f000 fae8 	bl	8000dec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800081c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	4822      	ldr	r0, [pc, #136]	; (80008c0 <MX_GPIO_Init+0x1d4>)
 8000836:	f000 fad9 	bl	8000dec <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800083a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800083e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000840:	2302      	movs	r3, #2
 8000842:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000848:	2303      	movs	r3, #3
 800084a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800084c:	230b      	movs	r3, #11
 800084e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000850:	f107 031c 	add.w	r3, r7, #28
 8000854:	4619      	mov	r1, r3
 8000856:	481a      	ldr	r0, [pc, #104]	; (80008c0 <MX_GPIO_Init+0x1d4>)
 8000858:	f000 fac8 	bl	8000dec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800085c:	2340      	movs	r3, #64	; 0x40
 800085e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000860:	2301      	movs	r3, #1
 8000862:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	4619      	mov	r1, r3
 8000872:	4814      	ldr	r0, [pc, #80]	; (80008c4 <MX_GPIO_Init+0x1d8>)
 8000874:	f000 faba 	bl	8000dec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000878:	2380      	movs	r3, #128	; 0x80
 800087a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087c:	2300      	movs	r3, #0
 800087e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000884:	f107 031c 	add.w	r3, r7, #28
 8000888:	4619      	mov	r1, r3
 800088a:	480e      	ldr	r0, [pc, #56]	; (80008c4 <MX_GPIO_Init+0x1d8>)
 800088c:	f000 faae 	bl	8000dec <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000890:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000896:	2302      	movs	r3, #2
 8000898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089e:	2303      	movs	r3, #3
 80008a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008a2:	230b      	movs	r3, #11
 80008a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_GPIO_Init+0x1d8>)
 80008ae:	f000 fa9d 	bl	8000dec <HAL_GPIO_Init>

}
 80008b2:	bf00      	nop
 80008b4:	3730      	adds	r7, #48	; 0x30
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40020400 	.word	0x40020400
 80008c4:	40021800 	.word	0x40021800
 80008c8:	40020800 	.word	0x40020800
 80008cc:	40020000 	.word	0x40020000

080008d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d4:	b672      	cpsid	i
}
 80008d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <Error_Handler+0x8>
	...

080008dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	4b10      	ldr	r3, [pc, #64]	; (8000928 <HAL_MspInit+0x4c>)
 80008e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ea:	4a0f      	ldr	r2, [pc, #60]	; (8000928 <HAL_MspInit+0x4c>)
 80008ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f0:	6453      	str	r3, [r2, #68]	; 0x44
 80008f2:	4b0d      	ldr	r3, [pc, #52]	; (8000928 <HAL_MspInit+0x4c>)
 80008f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	603b      	str	r3, [r7, #0]
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <HAL_MspInit+0x4c>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000906:	4a08      	ldr	r2, [pc, #32]	; (8000928 <HAL_MspInit+0x4c>)
 8000908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800090c:	6413      	str	r3, [r2, #64]	; 0x40
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_MspInit+0x4c>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091a:	bf00      	nop
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	40023800 	.word	0x40023800

0800092c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08a      	sub	sp, #40	; 0x28
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a19      	ldr	r2, [pc, #100]	; (80009b0 <HAL_UART_MspInit+0x84>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d12c      	bne.n	80009a8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	613b      	str	r3, [r7, #16]
 8000952:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <HAL_UART_MspInit+0x88>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	4a17      	ldr	r2, [pc, #92]	; (80009b4 <HAL_UART_MspInit+0x88>)
 8000958:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800095c:	6413      	str	r3, [r2, #64]	; 0x40
 800095e:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <HAL_UART_MspInit+0x88>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000962:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000966:	613b      	str	r3, [r7, #16]
 8000968:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <HAL_UART_MspInit+0x88>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a10      	ldr	r2, [pc, #64]	; (80009b4 <HAL_UART_MspInit+0x88>)
 8000974:	f043 0308 	orr.w	r3, r3, #8
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <HAL_UART_MspInit+0x88>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0308 	and.w	r3, r3, #8
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000986:	f44f 7340 	mov.w	r3, #768	; 0x300
 800098a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098c:	2302      	movs	r3, #2
 800098e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000994:	2303      	movs	r3, #3
 8000996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000998:	2307      	movs	r3, #7
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	4619      	mov	r1, r3
 80009a2:	4805      	ldr	r0, [pc, #20]	; (80009b8 <HAL_UART_MspInit+0x8c>)
 80009a4:	f000 fa22 	bl	8000dec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009a8:	bf00      	nop
 80009aa:	3728      	adds	r7, #40	; 0x28
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40004800 	.word	0x40004800
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40020c00 	.word	0x40020c00

080009bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <NMI_Handler+0x4>

080009c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <HardFault_Handler+0x4>

080009c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <MemManage_Handler+0x4>

080009ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <BusFault_Handler+0x4>

080009d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <UsageFault_Handler+0x4>

080009da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a08:	f000 f89a 	bl	8000b40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a14:	4802      	ldr	r0, [pc, #8]	; (8000a20 <OTG_FS_IRQHandler+0x10>)
 8000a16:	f000 fd16 	bl	8001446 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	200006cc 	.word	0x200006cc

08000a24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <SystemInit+0x20>)
 8000a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a2e:	4a05      	ldr	r2, [pc, #20]	; (8000a44 <SystemInit+0x20>)
 8000a30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000a48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a80 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a4c:	480d      	ldr	r0, [pc, #52]	; (8000a84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a4e:	490e      	ldr	r1, [pc, #56]	; (8000a88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a50:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a54:	e002      	b.n	8000a5c <LoopCopyDataInit>

08000a56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a5a:	3304      	adds	r3, #4

08000a5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a60:	d3f9      	bcc.n	8000a56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a62:	4a0b      	ldr	r2, [pc, #44]	; (8000a90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a64:	4c0b      	ldr	r4, [pc, #44]	; (8000a94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a68:	e001      	b.n	8000a6e <LoopFillZerobss>

08000a6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a6c:	3204      	adds	r2, #4

08000a6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a70:	d3fb      	bcc.n	8000a6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a72:	f7ff ffd7 	bl	8000a24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a76:	f005 fe81 	bl	800677c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a7a:	f7ff fd7b 	bl	8000574 <main>
  bx  lr    
 8000a7e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000a80:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000a84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a88:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000a8c:	0800685c 	.word	0x0800685c
  ldr r2, =_sbss
 8000a90:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000a94:	20000ad4 	.word	0x20000ad4

08000a98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a98:	e7fe      	b.n	8000a98 <ADC_IRQHandler>
	...

08000a9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aa0:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <HAL_Init+0x40>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a0d      	ldr	r2, [pc, #52]	; (8000adc <HAL_Init+0x40>)
 8000aa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aaa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000aac:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <HAL_Init+0x40>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a0a      	ldr	r2, [pc, #40]	; (8000adc <HAL_Init+0x40>)
 8000ab2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ab6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <HAL_Init+0x40>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a07      	ldr	r2, [pc, #28]	; (8000adc <HAL_Init+0x40>)
 8000abe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ac2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac4:	2003      	movs	r0, #3
 8000ac6:	f000 f94f 	bl	8000d68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aca:	2000      	movs	r0, #0
 8000acc:	f000 f808 	bl	8000ae0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad0:	f7ff ff04 	bl	80008dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40023c00 	.word	0x40023c00

08000ae0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <HAL_InitTick+0x54>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <HAL_InitTick+0x58>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	4619      	mov	r1, r3
 8000af2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 f967 	bl	8000dd2 <HAL_SYSTICK_Config>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e00e      	b.n	8000b2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2b0f      	cmp	r3, #15
 8000b12:	d80a      	bhi.n	8000b2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b14:	2200      	movs	r2, #0
 8000b16:	6879      	ldr	r1, [r7, #4]
 8000b18:	f04f 30ff 	mov.w	r0, #4294967295
 8000b1c:	f000 f92f 	bl	8000d7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b20:	4a06      	ldr	r2, [pc, #24]	; (8000b3c <HAL_InitTick+0x5c>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b26:	2300      	movs	r3, #0
 8000b28:	e000      	b.n	8000b2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000000 	.word	0x20000000
 8000b38:	20000008 	.word	0x20000008
 8000b3c:	20000004 	.word	0x20000004

08000b40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <HAL_IncTick+0x20>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_IncTick+0x24>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4413      	add	r3, r2
 8000b50:	4a04      	ldr	r2, [pc, #16]	; (8000b64 <HAL_IncTick+0x24>)
 8000b52:	6013      	str	r3, [r2, #0]
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	20000008 	.word	0x20000008
 8000b64:	200001f8 	.word	0x200001f8

08000b68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b6c:	4b03      	ldr	r3, [pc, #12]	; (8000b7c <HAL_GetTick+0x14>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	200001f8 	.word	0x200001f8

08000b80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b88:	f7ff ffee 	bl	8000b68 <HAL_GetTick>
 8000b8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b98:	d005      	beq.n	8000ba6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <HAL_Delay+0x44>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ba6:	bf00      	nop
 8000ba8:	f7ff ffde 	bl	8000b68 <HAL_GetTick>
 8000bac:	4602      	mov	r2, r0
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	68fa      	ldr	r2, [r7, #12]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d8f7      	bhi.n	8000ba8 <HAL_Delay+0x28>
  {
  }
}
 8000bb8:	bf00      	nop
 8000bba:	bf00      	nop
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000008 	.word	0x20000008

08000bc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <__NVIC_SetPriorityGrouping+0x44>)
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bde:	68ba      	ldr	r2, [r7, #8]
 8000be0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000be4:	4013      	ands	r3, r2
 8000be6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bfa:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <__NVIC_SetPriorityGrouping+0x44>)
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	60d3      	str	r3, [r2, #12]
}
 8000c00:	bf00      	nop
 8000c02:	3714      	adds	r7, #20
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c14:	4b04      	ldr	r3, [pc, #16]	; (8000c28 <__NVIC_GetPriorityGrouping+0x18>)
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	0a1b      	lsrs	r3, r3, #8
 8000c1a:	f003 0307 	and.w	r3, r3, #7
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	db0b      	blt.n	8000c56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	f003 021f 	and.w	r2, r3, #31
 8000c44:	4907      	ldr	r1, [pc, #28]	; (8000c64 <__NVIC_EnableIRQ+0x38>)
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	095b      	lsrs	r3, r3, #5
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000e100 	.word	0xe000e100

08000c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	6039      	str	r1, [r7, #0]
 8000c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	db0a      	blt.n	8000c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	b2da      	uxtb	r2, r3
 8000c80:	490c      	ldr	r1, [pc, #48]	; (8000cb4 <__NVIC_SetPriority+0x4c>)
 8000c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c86:	0112      	lsls	r2, r2, #4
 8000c88:	b2d2      	uxtb	r2, r2
 8000c8a:	440b      	add	r3, r1
 8000c8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c90:	e00a      	b.n	8000ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	4908      	ldr	r1, [pc, #32]	; (8000cb8 <__NVIC_SetPriority+0x50>)
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	f003 030f 	and.w	r3, r3, #15
 8000c9e:	3b04      	subs	r3, #4
 8000ca0:	0112      	lsls	r2, r2, #4
 8000ca2:	b2d2      	uxtb	r2, r2
 8000ca4:	440b      	add	r3, r1
 8000ca6:	761a      	strb	r2, [r3, #24]
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000e100 	.word	0xe000e100
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b089      	sub	sp, #36	; 0x24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	f1c3 0307 	rsb	r3, r3, #7
 8000cd6:	2b04      	cmp	r3, #4
 8000cd8:	bf28      	it	cs
 8000cda:	2304      	movcs	r3, #4
 8000cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	3304      	adds	r3, #4
 8000ce2:	2b06      	cmp	r3, #6
 8000ce4:	d902      	bls.n	8000cec <NVIC_EncodePriority+0x30>
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	3b03      	subs	r3, #3
 8000cea:	e000      	b.n	8000cee <NVIC_EncodePriority+0x32>
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	43da      	mvns	r2, r3
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	401a      	ands	r2, r3
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d04:	f04f 31ff 	mov.w	r1, #4294967295
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0e:	43d9      	mvns	r1, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d14:	4313      	orrs	r3, r2
         );
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3724      	adds	r7, #36	; 0x24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
	...

08000d24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d34:	d301      	bcc.n	8000d3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d36:	2301      	movs	r3, #1
 8000d38:	e00f      	b.n	8000d5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d3a:	4a0a      	ldr	r2, [pc, #40]	; (8000d64 <SysTick_Config+0x40>)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d42:	210f      	movs	r1, #15
 8000d44:	f04f 30ff 	mov.w	r0, #4294967295
 8000d48:	f7ff ff8e 	bl	8000c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d4c:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <SysTick_Config+0x40>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d52:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <SysTick_Config+0x40>)
 8000d54:	2207      	movs	r2, #7
 8000d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	e000e010 	.word	0xe000e010

08000d68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f7ff ff29 	bl	8000bc8 <__NVIC_SetPriorityGrouping>
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b086      	sub	sp, #24
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	4603      	mov	r3, r0
 8000d86:	60b9      	str	r1, [r7, #8]
 8000d88:	607a      	str	r2, [r7, #4]
 8000d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d90:	f7ff ff3e 	bl	8000c10 <__NVIC_GetPriorityGrouping>
 8000d94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	68b9      	ldr	r1, [r7, #8]
 8000d9a:	6978      	ldr	r0, [r7, #20]
 8000d9c:	f7ff ff8e 	bl	8000cbc <NVIC_EncodePriority>
 8000da0:	4602      	mov	r2, r0
 8000da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da6:	4611      	mov	r1, r2
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff ff5d 	bl	8000c68 <__NVIC_SetPriority>
}
 8000dae:	bf00      	nop
 8000db0:	3718      	adds	r7, #24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff31 	bl	8000c2c <__NVIC_EnableIRQ>
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f7ff ffa2 	bl	8000d24 <SysTick_Config>
 8000de0:	4603      	mov	r3, r0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b089      	sub	sp, #36	; 0x24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
 8000e06:	e177      	b.n	80010f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e08:	2201      	movs	r2, #1
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	697a      	ldr	r2, [r7, #20]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	f040 8166 	bne.w	80010f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f003 0303 	and.w	r3, r3, #3
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d005      	beq.n	8000e3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d130      	bne.n	8000ea0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	2203      	movs	r2, #3
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4013      	ands	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	68da      	ldr	r2, [r3, #12]
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e74:	2201      	movs	r2, #1
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4013      	ands	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	091b      	lsrs	r3, r3, #4
 8000e8a:	f003 0201 	and.w	r2, r3, #1
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 0303 	and.w	r3, r3, #3
 8000ea8:	2b03      	cmp	r3, #3
 8000eaa:	d017      	beq.n	8000edc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	2203      	movs	r2, #3
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	689a      	ldr	r2, [r3, #8]
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f003 0303 	and.w	r3, r3, #3
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d123      	bne.n	8000f30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	08da      	lsrs	r2, r3, #3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3208      	adds	r2, #8
 8000ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	f003 0307 	and.w	r3, r3, #7
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	220f      	movs	r2, #15
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	691a      	ldr	r2, [r3, #16]
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	08da      	lsrs	r2, r3, #3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	3208      	adds	r2, #8
 8000f2a:	69b9      	ldr	r1, [r7, #24]
 8000f2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	43db      	mvns	r3, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 0203 	and.w	r2, r3, #3
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	f000 80c0 	beq.w	80010f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	4b66      	ldr	r3, [pc, #408]	; (8001110 <HAL_GPIO_Init+0x324>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7a:	4a65      	ldr	r2, [pc, #404]	; (8001110 <HAL_GPIO_Init+0x324>)
 8000f7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f80:	6453      	str	r3, [r2, #68]	; 0x44
 8000f82:	4b63      	ldr	r3, [pc, #396]	; (8001110 <HAL_GPIO_Init+0x324>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f8e:	4a61      	ldr	r2, [pc, #388]	; (8001114 <HAL_GPIO_Init+0x328>)
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	089b      	lsrs	r3, r3, #2
 8000f94:	3302      	adds	r3, #2
 8000f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	220f      	movs	r2, #15
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43db      	mvns	r3, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a58      	ldr	r2, [pc, #352]	; (8001118 <HAL_GPIO_Init+0x32c>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d037      	beq.n	800102a <HAL_GPIO_Init+0x23e>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a57      	ldr	r2, [pc, #348]	; (800111c <HAL_GPIO_Init+0x330>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d031      	beq.n	8001026 <HAL_GPIO_Init+0x23a>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a56      	ldr	r2, [pc, #344]	; (8001120 <HAL_GPIO_Init+0x334>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d02b      	beq.n	8001022 <HAL_GPIO_Init+0x236>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a55      	ldr	r2, [pc, #340]	; (8001124 <HAL_GPIO_Init+0x338>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d025      	beq.n	800101e <HAL_GPIO_Init+0x232>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a54      	ldr	r2, [pc, #336]	; (8001128 <HAL_GPIO_Init+0x33c>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d01f      	beq.n	800101a <HAL_GPIO_Init+0x22e>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a53      	ldr	r2, [pc, #332]	; (800112c <HAL_GPIO_Init+0x340>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d019      	beq.n	8001016 <HAL_GPIO_Init+0x22a>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a52      	ldr	r2, [pc, #328]	; (8001130 <HAL_GPIO_Init+0x344>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d013      	beq.n	8001012 <HAL_GPIO_Init+0x226>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a51      	ldr	r2, [pc, #324]	; (8001134 <HAL_GPIO_Init+0x348>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d00d      	beq.n	800100e <HAL_GPIO_Init+0x222>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a50      	ldr	r2, [pc, #320]	; (8001138 <HAL_GPIO_Init+0x34c>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d007      	beq.n	800100a <HAL_GPIO_Init+0x21e>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a4f      	ldr	r2, [pc, #316]	; (800113c <HAL_GPIO_Init+0x350>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d101      	bne.n	8001006 <HAL_GPIO_Init+0x21a>
 8001002:	2309      	movs	r3, #9
 8001004:	e012      	b.n	800102c <HAL_GPIO_Init+0x240>
 8001006:	230a      	movs	r3, #10
 8001008:	e010      	b.n	800102c <HAL_GPIO_Init+0x240>
 800100a:	2308      	movs	r3, #8
 800100c:	e00e      	b.n	800102c <HAL_GPIO_Init+0x240>
 800100e:	2307      	movs	r3, #7
 8001010:	e00c      	b.n	800102c <HAL_GPIO_Init+0x240>
 8001012:	2306      	movs	r3, #6
 8001014:	e00a      	b.n	800102c <HAL_GPIO_Init+0x240>
 8001016:	2305      	movs	r3, #5
 8001018:	e008      	b.n	800102c <HAL_GPIO_Init+0x240>
 800101a:	2304      	movs	r3, #4
 800101c:	e006      	b.n	800102c <HAL_GPIO_Init+0x240>
 800101e:	2303      	movs	r3, #3
 8001020:	e004      	b.n	800102c <HAL_GPIO_Init+0x240>
 8001022:	2302      	movs	r3, #2
 8001024:	e002      	b.n	800102c <HAL_GPIO_Init+0x240>
 8001026:	2301      	movs	r3, #1
 8001028:	e000      	b.n	800102c <HAL_GPIO_Init+0x240>
 800102a:	2300      	movs	r3, #0
 800102c:	69fa      	ldr	r2, [r7, #28]
 800102e:	f002 0203 	and.w	r2, r2, #3
 8001032:	0092      	lsls	r2, r2, #2
 8001034:	4093      	lsls	r3, r2
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4313      	orrs	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800103c:	4935      	ldr	r1, [pc, #212]	; (8001114 <HAL_GPIO_Init+0x328>)
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	089b      	lsrs	r3, r3, #2
 8001042:	3302      	adds	r3, #2
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800104a:	4b3d      	ldr	r3, [pc, #244]	; (8001140 <HAL_GPIO_Init+0x354>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	43db      	mvns	r3, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4013      	ands	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d003      	beq.n	800106e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	4313      	orrs	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800106e:	4a34      	ldr	r2, [pc, #208]	; (8001140 <HAL_GPIO_Init+0x354>)
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001074:	4b32      	ldr	r3, [pc, #200]	; (8001140 <HAL_GPIO_Init+0x354>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d003      	beq.n	8001098 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001098:	4a29      	ldr	r2, [pc, #164]	; (8001140 <HAL_GPIO_Init+0x354>)
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800109e:	4b28      	ldr	r3, [pc, #160]	; (8001140 <HAL_GPIO_Init+0x354>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	43db      	mvns	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4013      	ands	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010c2:	4a1f      	ldr	r2, [pc, #124]	; (8001140 <HAL_GPIO_Init+0x354>)
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010c8:	4b1d      	ldr	r3, [pc, #116]	; (8001140 <HAL_GPIO_Init+0x354>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	43db      	mvns	r3, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4013      	ands	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d003      	beq.n	80010ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010ec:	4a14      	ldr	r2, [pc, #80]	; (8001140 <HAL_GPIO_Init+0x354>)
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3301      	adds	r3, #1
 80010f6:	61fb      	str	r3, [r7, #28]
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	2b0f      	cmp	r3, #15
 80010fc:	f67f ae84 	bls.w	8000e08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001100:	bf00      	nop
 8001102:	bf00      	nop
 8001104:	3724      	adds	r7, #36	; 0x24
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	40023800 	.word	0x40023800
 8001114:	40013800 	.word	0x40013800
 8001118:	40020000 	.word	0x40020000
 800111c:	40020400 	.word	0x40020400
 8001120:	40020800 	.word	0x40020800
 8001124:	40020c00 	.word	0x40020c00
 8001128:	40021000 	.word	0x40021000
 800112c:	40021400 	.word	0x40021400
 8001130:	40021800 	.word	0x40021800
 8001134:	40021c00 	.word	0x40021c00
 8001138:	40022000 	.word	0x40022000
 800113c:	40022400 	.word	0x40022400
 8001140:	40013c00 	.word	0x40013c00

08001144 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	460b      	mov	r3, r1
 800114e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	691a      	ldr	r2, [r3, #16]
 8001154:	887b      	ldrh	r3, [r7, #2]
 8001156:	4013      	ands	r3, r2
 8001158:	2b00      	cmp	r3, #0
 800115a:	d002      	beq.n	8001162 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800115c:	2301      	movs	r3, #1
 800115e:	73fb      	strb	r3, [r7, #15]
 8001160:	e001      	b.n	8001166 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001162:	2300      	movs	r3, #0
 8001164:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001166:	7bfb      	ldrb	r3, [r7, #15]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	460b      	mov	r3, r1
 800117e:	807b      	strh	r3, [r7, #2]
 8001180:	4613      	mov	r3, r2
 8001182:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001184:	787b      	ldrb	r3, [r7, #1]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800118a:	887a      	ldrh	r2, [r7, #2]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001190:	e003      	b.n	800119a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001192:	887b      	ldrh	r3, [r7, #2]
 8001194:	041a      	lsls	r2, r3, #16
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	619a      	str	r2, [r3, #24]
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011a8:	b08f      	sub	sp, #60	; 0x3c
 80011aa:	af0a      	add	r7, sp, #40	; 0x28
 80011ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d101      	bne.n	80011b8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e10f      	b.n	80013d8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d106      	bne.n	80011d8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f004 ffc2 	bl	800615c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2203      	movs	r2, #3
 80011dc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d102      	bne.n	80011f2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f002 f8df 	bl	80033ba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	603b      	str	r3, [r7, #0]
 8001202:	687e      	ldr	r6, [r7, #4]
 8001204:	466d      	mov	r5, sp
 8001206:	f106 0410 	add.w	r4, r6, #16
 800120a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800120c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800120e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001210:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001212:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001216:	e885 0003 	stmia.w	r5, {r0, r1}
 800121a:	1d33      	adds	r3, r6, #4
 800121c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800121e:	6838      	ldr	r0, [r7, #0]
 8001220:	f001 ffb6 	bl	8003190 <USB_CoreInit>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d005      	beq.n	8001236 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2202      	movs	r2, #2
 800122e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e0d0      	b.n	80013d8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2100      	movs	r1, #0
 800123c:	4618      	mov	r0, r3
 800123e:	f002 f8cd 	bl	80033dc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001242:	2300      	movs	r3, #0
 8001244:	73fb      	strb	r3, [r7, #15]
 8001246:	e04a      	b.n	80012de <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001248:	7bfa      	ldrb	r2, [r7, #15]
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	4613      	mov	r3, r2
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	1a9b      	subs	r3, r3, r2
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	440b      	add	r3, r1
 8001256:	333d      	adds	r3, #61	; 0x3d
 8001258:	2201      	movs	r2, #1
 800125a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800125c:	7bfa      	ldrb	r2, [r7, #15]
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	4613      	mov	r3, r2
 8001262:	00db      	lsls	r3, r3, #3
 8001264:	1a9b      	subs	r3, r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	440b      	add	r3, r1
 800126a:	333c      	adds	r3, #60	; 0x3c
 800126c:	7bfa      	ldrb	r2, [r7, #15]
 800126e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001270:	7bfa      	ldrb	r2, [r7, #15]
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	b298      	uxth	r0, r3
 8001276:	6879      	ldr	r1, [r7, #4]
 8001278:	4613      	mov	r3, r2
 800127a:	00db      	lsls	r3, r3, #3
 800127c:	1a9b      	subs	r3, r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	440b      	add	r3, r1
 8001282:	3342      	adds	r3, #66	; 0x42
 8001284:	4602      	mov	r2, r0
 8001286:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001288:	7bfa      	ldrb	r2, [r7, #15]
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	4613      	mov	r3, r2
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	1a9b      	subs	r3, r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	440b      	add	r3, r1
 8001296:	333f      	adds	r3, #63	; 0x3f
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800129c:	7bfa      	ldrb	r2, [r7, #15]
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	4613      	mov	r3, r2
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	1a9b      	subs	r3, r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	440b      	add	r3, r1
 80012aa:	3344      	adds	r3, #68	; 0x44
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012b0:	7bfa      	ldrb	r2, [r7, #15]
 80012b2:	6879      	ldr	r1, [r7, #4]
 80012b4:	4613      	mov	r3, r2
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	1a9b      	subs	r3, r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	440b      	add	r3, r1
 80012be:	3348      	adds	r3, #72	; 0x48
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80012c4:	7bfa      	ldrb	r2, [r7, #15]
 80012c6:	6879      	ldr	r1, [r7, #4]
 80012c8:	4613      	mov	r3, r2
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	1a9b      	subs	r3, r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	440b      	add	r3, r1
 80012d2:	3350      	adds	r3, #80	; 0x50
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	3301      	adds	r3, #1
 80012dc:	73fb      	strb	r3, [r7, #15]
 80012de:	7bfa      	ldrb	r2, [r7, #15]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d3af      	bcc.n	8001248 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012e8:	2300      	movs	r3, #0
 80012ea:	73fb      	strb	r3, [r7, #15]
 80012ec:	e044      	b.n	8001378 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012ee:	7bfa      	ldrb	r2, [r7, #15]
 80012f0:	6879      	ldr	r1, [r7, #4]
 80012f2:	4613      	mov	r3, r2
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	1a9b      	subs	r3, r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	440b      	add	r3, r1
 80012fc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001300:	2200      	movs	r2, #0
 8001302:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001304:	7bfa      	ldrb	r2, [r7, #15]
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	4613      	mov	r3, r2
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	1a9b      	subs	r3, r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	440b      	add	r3, r1
 8001312:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001316:	7bfa      	ldrb	r2, [r7, #15]
 8001318:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800131a:	7bfa      	ldrb	r2, [r7, #15]
 800131c:	6879      	ldr	r1, [r7, #4]
 800131e:	4613      	mov	r3, r2
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	1a9b      	subs	r3, r3, r2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	440b      	add	r3, r1
 8001328:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800132c:	2200      	movs	r2, #0
 800132e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001330:	7bfa      	ldrb	r2, [r7, #15]
 8001332:	6879      	ldr	r1, [r7, #4]
 8001334:	4613      	mov	r3, r2
 8001336:	00db      	lsls	r3, r3, #3
 8001338:	1a9b      	subs	r3, r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	440b      	add	r3, r1
 800133e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001346:	7bfa      	ldrb	r2, [r7, #15]
 8001348:	6879      	ldr	r1, [r7, #4]
 800134a:	4613      	mov	r3, r2
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	1a9b      	subs	r3, r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	440b      	add	r3, r1
 8001354:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800135c:	7bfa      	ldrb	r2, [r7, #15]
 800135e:	6879      	ldr	r1, [r7, #4]
 8001360:	4613      	mov	r3, r2
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	1a9b      	subs	r3, r3, r2
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	440b      	add	r3, r1
 800136a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001372:	7bfb      	ldrb	r3, [r7, #15]
 8001374:	3301      	adds	r3, #1
 8001376:	73fb      	strb	r3, [r7, #15]
 8001378:	7bfa      	ldrb	r2, [r7, #15]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	429a      	cmp	r2, r3
 8001380:	d3b5      	bcc.n	80012ee <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	603b      	str	r3, [r7, #0]
 8001388:	687e      	ldr	r6, [r7, #4]
 800138a:	466d      	mov	r5, sp
 800138c:	f106 0410 	add.w	r4, r6, #16
 8001390:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001392:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001394:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001396:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001398:	e894 0003 	ldmia.w	r4, {r0, r1}
 800139c:	e885 0003 	stmia.w	r5, {r0, r1}
 80013a0:	1d33      	adds	r3, r6, #4
 80013a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013a4:	6838      	ldr	r0, [r7, #0]
 80013a6:	f002 f865 	bl	8003474 <USB_DevInit>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d005      	beq.n	80013bc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2202      	movs	r2, #2
 80013b4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e00d      	b.n	80013d8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2201      	movs	r2, #1
 80013c8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f003 f8e1 	bl	8004598 <USB_DevDisconnect>

  return HAL_OK;
 80013d6:	2300      	movs	r3, #0
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3714      	adds	r7, #20
 80013dc:	46bd      	mov	sp, r7
 80013de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013e0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d101      	bne.n	80013fc <HAL_PCD_Start+0x1c>
 80013f8:	2302      	movs	r3, #2
 80013fa:	e020      	b.n	800143e <HAL_PCD_Start+0x5e>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001408:	2b01      	cmp	r3, #1
 800140a:	d109      	bne.n	8001420 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001410:	2b01      	cmp	r3, #1
 8001412:	d005      	beq.n	8001420 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001418:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f001 ffb7 	bl	8003398 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f003 f891 	bl	8004556 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001446:	b590      	push	{r4, r7, lr}
 8001448:	b08d      	sub	sp, #52	; 0x34
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001454:	6a3b      	ldr	r3, [r7, #32]
 8001456:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4618      	mov	r0, r3
 800145e:	f003 f94f 	bl	8004700 <USB_GetMode>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	f040 839d 	bne.w	8001ba4 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f003 f8b3 	bl	80045da <USB_ReadInterrupts>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	f000 8393 	beq.w	8001ba2 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f003 f8aa 	bl	80045da <USB_ReadInterrupts>
 8001486:	4603      	mov	r3, r0
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b02      	cmp	r3, #2
 800148e:	d107      	bne.n	80014a0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	695a      	ldr	r2, [r3, #20]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f002 0202 	and.w	r2, r2, #2
 800149e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f003 f898 	bl	80045da <USB_ReadInterrupts>
 80014aa:	4603      	mov	r3, r0
 80014ac:	f003 0310 	and.w	r3, r3, #16
 80014b0:	2b10      	cmp	r3, #16
 80014b2:	d161      	bne.n	8001578 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	699a      	ldr	r2, [r3, #24]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f022 0210 	bic.w	r2, r2, #16
 80014c2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80014c4:	6a3b      	ldr	r3, [r7, #32]
 80014c6:	6a1b      	ldr	r3, [r3, #32]
 80014c8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	f003 020f 	and.w	r2, r3, #15
 80014d0:	4613      	mov	r3, r2
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	1a9b      	subs	r3, r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	4413      	add	r3, r2
 80014e0:	3304      	adds	r3, #4
 80014e2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	0c5b      	lsrs	r3, r3, #17
 80014e8:	f003 030f 	and.w	r3, r3, #15
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d124      	bne.n	800153a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80014f6:	4013      	ands	r3, r2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d035      	beq.n	8001568 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	091b      	lsrs	r3, r3, #4
 8001504:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001506:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800150a:	b29b      	uxth	r3, r3
 800150c:	461a      	mov	r2, r3
 800150e:	6a38      	ldr	r0, [r7, #32]
 8001510:	f002 fecf 	bl	80042b2 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	68da      	ldr	r2, [r3, #12]
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	091b      	lsrs	r3, r3, #4
 800151c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001520:	441a      	add	r2, r3
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	699a      	ldr	r2, [r3, #24]
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	091b      	lsrs	r3, r3, #4
 800152e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001532:	441a      	add	r2, r3
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	619a      	str	r2, [r3, #24]
 8001538:	e016      	b.n	8001568 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	0c5b      	lsrs	r3, r3, #17
 800153e:	f003 030f 	and.w	r3, r3, #15
 8001542:	2b06      	cmp	r3, #6
 8001544:	d110      	bne.n	8001568 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800154c:	2208      	movs	r2, #8
 800154e:	4619      	mov	r1, r3
 8001550:	6a38      	ldr	r0, [r7, #32]
 8001552:	f002 feae 	bl	80042b2 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	699a      	ldr	r2, [r3, #24]
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	091b      	lsrs	r3, r3, #4
 800155e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001562:	441a      	add	r2, r3
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	699a      	ldr	r2, [r3, #24]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f042 0210 	orr.w	r2, r2, #16
 8001576:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f003 f82c 	bl	80045da <USB_ReadInterrupts>
 8001582:	4603      	mov	r3, r0
 8001584:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001588:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800158c:	d16e      	bne.n	800166c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800158e:	2300      	movs	r3, #0
 8001590:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f003 f832 	bl	8004600 <USB_ReadDevAllOutEpInterrupt>
 800159c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800159e:	e062      	b.n	8001666 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80015a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d057      	beq.n	800165a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015b0:	b2d2      	uxtb	r2, r2
 80015b2:	4611      	mov	r1, r2
 80015b4:	4618      	mov	r0, r3
 80015b6:	f003 f857 	bl	8004668 <USB_ReadDevOutEPInterrupt>
 80015ba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d00c      	beq.n	80015e0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	015a      	lsls	r2, r3, #5
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	4413      	add	r3, r2
 80015ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015d2:	461a      	mov	r2, r3
 80015d4:	2301      	movs	r3, #1
 80015d6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80015d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f000 fd98 	bl	8002110 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	f003 0308 	and.w	r3, r3, #8
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d00c      	beq.n	8001604 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80015ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ec:	015a      	lsls	r2, r3, #5
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	4413      	add	r3, r2
 80015f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015f6:	461a      	mov	r2, r3
 80015f8:	2308      	movs	r3, #8
 80015fa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80015fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f000 fe92 	bl	8002328 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	f003 0310 	and.w	r3, r3, #16
 800160a:	2b00      	cmp	r3, #0
 800160c:	d008      	beq.n	8001620 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	015a      	lsls	r2, r3, #5
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	4413      	add	r3, r2
 8001616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800161a:	461a      	mov	r2, r3
 800161c:	2310      	movs	r3, #16
 800161e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	f003 0320 	and.w	r3, r3, #32
 8001626:	2b00      	cmp	r3, #0
 8001628:	d008      	beq.n	800163c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	015a      	lsls	r2, r3, #5
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	4413      	add	r3, r2
 8001632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001636:	461a      	mov	r2, r3
 8001638:	2320      	movs	r3, #32
 800163a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d009      	beq.n	800165a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001648:	015a      	lsls	r2, r3, #5
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	4413      	add	r3, r2
 800164e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001652:	461a      	mov	r2, r3
 8001654:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001658:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800165a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165c:	3301      	adds	r3, #1
 800165e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001662:	085b      	lsrs	r3, r3, #1
 8001664:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001668:	2b00      	cmp	r3, #0
 800166a:	d199      	bne.n	80015a0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f002 ffb2 	bl	80045da <USB_ReadInterrupts>
 8001676:	4603      	mov	r3, r0
 8001678:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800167c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001680:	f040 80c0 	bne.w	8001804 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4618      	mov	r0, r3
 800168a:	f002 ffd3 	bl	8004634 <USB_ReadDevAllInEpInterrupt>
 800168e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001690:	2300      	movs	r3, #0
 8001692:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001694:	e0b2      	b.n	80017fc <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	2b00      	cmp	r3, #0
 800169e:	f000 80a7 	beq.w	80017f0 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016a8:	b2d2      	uxtb	r2, r2
 80016aa:	4611      	mov	r1, r2
 80016ac:	4618      	mov	r0, r3
 80016ae:	f002 fff9 	bl	80046a4 <USB_ReadDevInEPInterrupt>
 80016b2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d057      	beq.n	800176e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80016be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c0:	f003 030f 	and.w	r3, r3, #15
 80016c4:	2201      	movs	r2, #1
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	43db      	mvns	r3, r3
 80016d8:	69f9      	ldr	r1, [r7, #28]
 80016da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80016de:	4013      	ands	r3, r2
 80016e0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	015a      	lsls	r2, r3, #5
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	4413      	add	r3, r2
 80016ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016ee:	461a      	mov	r2, r3
 80016f0:	2301      	movs	r3, #1
 80016f2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	691b      	ldr	r3, [r3, #16]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d132      	bne.n	8001762 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80016fc:	6879      	ldr	r1, [r7, #4]
 80016fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001700:	4613      	mov	r3, r2
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	1a9b      	subs	r3, r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	440b      	add	r3, r1
 800170a:	3348      	adds	r3, #72	; 0x48
 800170c:	6819      	ldr	r1, [r3, #0]
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001712:	4613      	mov	r3, r2
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	1a9b      	subs	r3, r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	4403      	add	r3, r0
 800171c:	3344      	adds	r3, #68	; 0x44
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4419      	add	r1, r3
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001726:	4613      	mov	r3, r2
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	1a9b      	subs	r3, r3, r2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	4403      	add	r3, r0
 8001730:	3348      	adds	r3, #72	; 0x48
 8001732:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001736:	2b00      	cmp	r3, #0
 8001738:	d113      	bne.n	8001762 <HAL_PCD_IRQHandler+0x31c>
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800173e:	4613      	mov	r3, r2
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	1a9b      	subs	r3, r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	440b      	add	r3, r1
 8001748:	3350      	adds	r3, #80	; 0x50
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d108      	bne.n	8001762 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6818      	ldr	r0, [r3, #0]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800175a:	461a      	mov	r2, r3
 800175c:	2101      	movs	r1, #1
 800175e:	f003 f801 	bl	8004764 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001764:	b2db      	uxtb	r3, r3
 8001766:	4619      	mov	r1, r3
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f004 fd86 	bl	800627a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	f003 0308 	and.w	r3, r3, #8
 8001774:	2b00      	cmp	r3, #0
 8001776:	d008      	beq.n	800178a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177a:	015a      	lsls	r2, r3, #5
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	4413      	add	r3, r2
 8001780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001784:	461a      	mov	r2, r3
 8001786:	2308      	movs	r3, #8
 8001788:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	f003 0310 	and.w	r3, r3, #16
 8001790:	2b00      	cmp	r3, #0
 8001792:	d008      	beq.n	80017a6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001796:	015a      	lsls	r2, r3, #5
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	4413      	add	r3, r2
 800179c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017a0:	461a      	mov	r2, r3
 80017a2:	2310      	movs	r3, #16
 80017a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d008      	beq.n	80017c2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80017b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b2:	015a      	lsls	r2, r3, #5
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	4413      	add	r3, r2
 80017b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017bc:	461a      	mov	r2, r3
 80017be:	2340      	movs	r3, #64	; 0x40
 80017c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	f003 0302 	and.w	r3, r3, #2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d008      	beq.n	80017de <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80017cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ce:	015a      	lsls	r2, r3, #5
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	4413      	add	r3, r2
 80017d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017d8:	461a      	mov	r2, r3
 80017da:	2302      	movs	r3, #2
 80017dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80017e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 fc03 	bl	8001ff6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	3301      	adds	r3, #1
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80017f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017f8:	085b      	lsrs	r3, r3, #1
 80017fa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80017fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f47f af49 	bne.w	8001696 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f002 fee6 	bl	80045da <USB_ReadInterrupts>
 800180e:	4603      	mov	r3, r0
 8001810:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001814:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001818:	d122      	bne.n	8001860 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	69fa      	ldr	r2, [r7, #28]
 8001824:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001828:	f023 0301 	bic.w	r3, r3, #1
 800182c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001834:	2b01      	cmp	r3, #1
 8001836:	d108      	bne.n	800184a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001840:	2100      	movs	r1, #0
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 fe0e 	bl	8002464 <HAL_PCDEx_LPM_Callback>
 8001848:	e002      	b.n	8001850 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f004 fd8c 	bl	8006368 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	695a      	ldr	r2, [r3, #20]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800185e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f002 feb8 	bl	80045da <USB_ReadInterrupts>
 800186a:	4603      	mov	r3, r0
 800186c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001870:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001874:	d112      	bne.n	800189c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	2b01      	cmp	r3, #1
 8001884:	d102      	bne.n	800188c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f004 fd48 	bl	800631c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	695a      	ldr	r2, [r3, #20]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800189a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f002 fe9a 	bl	80045da <USB_ReadInterrupts>
 80018a6:	4603      	mov	r3, r0
 80018a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018b0:	f040 80c7 	bne.w	8001a42 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	69fa      	ldr	r2, [r7, #28]
 80018be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018c2:	f023 0301 	bic.w	r3, r3, #1
 80018c6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2110      	movs	r1, #16
 80018ce:	4618      	mov	r0, r3
 80018d0:	f001 ff34 	bl	800373c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018d4:	2300      	movs	r3, #0
 80018d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018d8:	e056      	b.n	8001988 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80018da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018dc:	015a      	lsls	r2, r3, #5
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	4413      	add	r3, r2
 80018e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018e6:	461a      	mov	r2, r3
 80018e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80018ec:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80018ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f0:	015a      	lsls	r2, r3, #5
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	4413      	add	r3, r2
 80018f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018fe:	0151      	lsls	r1, r2, #5
 8001900:	69fa      	ldr	r2, [r7, #28]
 8001902:	440a      	add	r2, r1
 8001904:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001908:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800190c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800190e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001910:	015a      	lsls	r2, r3, #5
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	4413      	add	r3, r2
 8001916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800191e:	0151      	lsls	r1, r2, #5
 8001920:	69fa      	ldr	r2, [r7, #28]
 8001922:	440a      	add	r2, r1
 8001924:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001928:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800192c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800192e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001930:	015a      	lsls	r2, r3, #5
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	4413      	add	r3, r2
 8001936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800193a:	461a      	mov	r2, r3
 800193c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001940:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001944:	015a      	lsls	r2, r3, #5
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	4413      	add	r3, r2
 800194a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001952:	0151      	lsls	r1, r2, #5
 8001954:	69fa      	ldr	r2, [r7, #28]
 8001956:	440a      	add	r2, r1
 8001958:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800195c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001960:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001964:	015a      	lsls	r2, r3, #5
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	4413      	add	r3, r2
 800196a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001972:	0151      	lsls	r1, r2, #5
 8001974:	69fa      	ldr	r2, [r7, #28]
 8001976:	440a      	add	r2, r1
 8001978:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800197c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001980:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001984:	3301      	adds	r3, #1
 8001986:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800198e:	429a      	cmp	r2, r3
 8001990:	d3a3      	bcc.n	80018da <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	69fa      	ldr	r2, [r7, #28]
 800199c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019a0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80019a4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d016      	beq.n	80019dc <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019b8:	69fa      	ldr	r2, [r7, #28]
 80019ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019be:	f043 030b 	orr.w	r3, r3, #11
 80019c2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ce:	69fa      	ldr	r2, [r7, #28]
 80019d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019d4:	f043 030b 	orr.w	r3, r3, #11
 80019d8:	6453      	str	r3, [r2, #68]	; 0x44
 80019da:	e015      	b.n	8001a08 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019e2:	695b      	ldr	r3, [r3, #20]
 80019e4:	69fa      	ldr	r2, [r7, #28]
 80019e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019ee:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80019f2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	69fa      	ldr	r2, [r7, #28]
 80019fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a02:	f043 030b 	orr.w	r3, r3, #11
 8001a06:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	69fa      	ldr	r2, [r7, #28]
 8001a12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a16:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001a1a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6818      	ldr	r0, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	691b      	ldr	r3, [r3, #16]
 8001a24:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	f002 fe99 	bl	8004764 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	695a      	ldr	r2, [r3, #20]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001a40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f002 fdc7 	bl	80045da <USB_ReadInterrupts>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a56:	d124      	bne.n	8001aa2 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f002 fe5d 	bl	800471c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f001 fec5 	bl	80037f6 <USB_GetDevSpeed>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	461a      	mov	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681c      	ldr	r4, [r3, #0]
 8001a78:	f001 f940 	bl	8002cfc <HAL_RCC_GetHCLKFreq>
 8001a7c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	461a      	mov	r2, r3
 8001a86:	4620      	mov	r0, r4
 8001a88:	f001 fbe4 	bl	8003254 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f004 fc1c 	bl	80062ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	695a      	ldr	r2, [r3, #20]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001aa0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f002 fd97 	bl	80045da <USB_ReadInterrupts>
 8001aac:	4603      	mov	r3, r0
 8001aae:	f003 0308 	and.w	r3, r3, #8
 8001ab2:	2b08      	cmp	r3, #8
 8001ab4:	d10a      	bne.n	8001acc <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f004 fbf9 	bl	80062ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	695a      	ldr	r2, [r3, #20]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f002 0208 	and.w	r2, r2, #8
 8001aca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f002 fd82 	bl	80045da <USB_ReadInterrupts>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001adc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ae0:	d10f      	bne.n	8001b02 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	4619      	mov	r1, r3
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f004 fc5b 	bl	80063a8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	695a      	ldr	r2, [r3, #20]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001b00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f002 fd67 	bl	80045da <USB_ReadInterrupts>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b16:	d10f      	bne.n	8001b38 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	4619      	mov	r1, r3
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f004 fc2e 	bl	8006384 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	695a      	ldr	r2, [r3, #20]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001b36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f002 fd4c 	bl	80045da <USB_ReadInterrupts>
 8001b42:	4603      	mov	r3, r0
 8001b44:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b4c:	d10a      	bne.n	8001b64 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f004 fc3c 	bl	80063cc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	695a      	ldr	r2, [r3, #20]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001b62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f002 fd36 	bl	80045da <USB_ReadInterrupts>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	f003 0304 	and.w	r3, r3, #4
 8001b74:	2b04      	cmp	r3, #4
 8001b76:	d115      	bne.n	8001ba4 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	f003 0304 	and.w	r3, r3, #4
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d002      	beq.n	8001b90 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f004 fc2c 	bl	80063e8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6859      	ldr	r1, [r3, #4]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	605a      	str	r2, [r3, #4]
 8001ba0:	e000      	b.n	8001ba4 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001ba2:	bf00      	nop
    }
  }
}
 8001ba4:	3734      	adds	r7, #52	; 0x34
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd90      	pop	{r4, r7, pc}

08001baa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d101      	bne.n	8001bc4 <HAL_PCD_SetAddress+0x1a>
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	e013      	b.n	8001bec <HAL_PCD_SetAddress+0x42>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	78fa      	ldrb	r2, [r7, #3]
 8001bd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	78fa      	ldrb	r2, [r7, #3]
 8001bda:	4611      	mov	r1, r2
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f002 fc94 	bl	800450a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	4608      	mov	r0, r1
 8001bfe:	4611      	mov	r1, r2
 8001c00:	461a      	mov	r2, r3
 8001c02:	4603      	mov	r3, r0
 8001c04:	70fb      	strb	r3, [r7, #3]
 8001c06:	460b      	mov	r3, r1
 8001c08:	803b      	strh	r3, [r7, #0]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	da0f      	bge.n	8001c3a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c1a:	78fb      	ldrb	r3, [r7, #3]
 8001c1c:	f003 020f 	and.w	r2, r3, #15
 8001c20:	4613      	mov	r3, r2
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	1a9b      	subs	r3, r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	3338      	adds	r3, #56	; 0x38
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	3304      	adds	r3, #4
 8001c30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2201      	movs	r2, #1
 8001c36:	705a      	strb	r2, [r3, #1]
 8001c38:	e00f      	b.n	8001c5a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c3a:	78fb      	ldrb	r3, [r7, #3]
 8001c3c:	f003 020f 	and.w	r2, r3, #15
 8001c40:	4613      	mov	r3, r2
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	1a9b      	subs	r3, r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	4413      	add	r3, r2
 8001c50:	3304      	adds	r3, #4
 8001c52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2200      	movs	r2, #0
 8001c58:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c5a:	78fb      	ldrb	r3, [r7, #3]
 8001c5c:	f003 030f 	and.w	r3, r3, #15
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c66:	883a      	ldrh	r2, [r7, #0]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	78ba      	ldrb	r2, [r7, #2]
 8001c70:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	785b      	ldrb	r3, [r3, #1]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d004      	beq.n	8001c84 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c84:	78bb      	ldrb	r3, [r7, #2]
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d102      	bne.n	8001c90 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d101      	bne.n	8001c9e <HAL_PCD_EP_Open+0xaa>
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	e00e      	b.n	8001cbc <HAL_PCD_EP_Open+0xc8>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68f9      	ldr	r1, [r7, #12]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f001 fdc7 	bl	8003840 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001cba:	7afb      	ldrb	r3, [r7, #11]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3710      	adds	r7, #16
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	da0f      	bge.n	8001cf8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cd8:	78fb      	ldrb	r3, [r7, #3]
 8001cda:	f003 020f 	and.w	r2, r3, #15
 8001cde:	4613      	mov	r3, r2
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	1a9b      	subs	r3, r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	3338      	adds	r3, #56	; 0x38
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	4413      	add	r3, r2
 8001cec:	3304      	adds	r3, #4
 8001cee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	705a      	strb	r2, [r3, #1]
 8001cf6:	e00f      	b.n	8001d18 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cf8:	78fb      	ldrb	r3, [r7, #3]
 8001cfa:	f003 020f 	and.w	r2, r3, #15
 8001cfe:	4613      	mov	r3, r2
 8001d00:	00db      	lsls	r3, r3, #3
 8001d02:	1a9b      	subs	r3, r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	3304      	adds	r3, #4
 8001d10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2200      	movs	r2, #0
 8001d16:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001d18:	78fb      	ldrb	r3, [r7, #3]
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d101      	bne.n	8001d32 <HAL_PCD_EP_Close+0x6e>
 8001d2e:	2302      	movs	r3, #2
 8001d30:	e00e      	b.n	8001d50 <HAL_PCD_EP_Close+0x8c>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68f9      	ldr	r1, [r7, #12]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f001 fe05 	bl	8003950 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	607a      	str	r2, [r7, #4]
 8001d62:	603b      	str	r3, [r7, #0]
 8001d64:	460b      	mov	r3, r1
 8001d66:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d68:	7afb      	ldrb	r3, [r7, #11]
 8001d6a:	f003 020f 	and.w	r2, r3, #15
 8001d6e:	4613      	mov	r3, r2
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	1a9b      	subs	r3, r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	3304      	adds	r3, #4
 8001d80:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	2200      	movs	r2, #0
 8001d92:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	2200      	movs	r2, #0
 8001d98:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d9a:	7afb      	ldrb	r3, [r7, #11]
 8001d9c:	f003 030f 	and.w	r3, r3, #15
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d102      	bne.n	8001db4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001db4:	7afb      	ldrb	r3, [r7, #11]
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d109      	bne.n	8001dd2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6818      	ldr	r0, [r3, #0]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	461a      	mov	r2, r3
 8001dca:	6979      	ldr	r1, [r7, #20]
 8001dcc:	f002 f8e0 	bl	8003f90 <USB_EP0StartXfer>
 8001dd0:	e008      	b.n	8001de4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6818      	ldr	r0, [r3, #0]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	461a      	mov	r2, r3
 8001dde:	6979      	ldr	r1, [r7, #20]
 8001de0:	f001 fe92 	bl	8003b08 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3718      	adds	r7, #24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b086      	sub	sp, #24
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	60f8      	str	r0, [r7, #12]
 8001df6:	607a      	str	r2, [r7, #4]
 8001df8:	603b      	str	r3, [r7, #0]
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dfe:	7afb      	ldrb	r3, [r7, #11]
 8001e00:	f003 020f 	and.w	r2, r3, #15
 8001e04:	4613      	mov	r3, r2
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	1a9b      	subs	r3, r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	3338      	adds	r3, #56	; 0x38
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	4413      	add	r3, r2
 8001e12:	3304      	adds	r3, #4
 8001e14:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	2200      	movs	r2, #0
 8001e26:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e2e:	7afb      	ldrb	r3, [r7, #11]
 8001e30:	f003 030f 	and.w	r3, r3, #15
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d102      	bne.n	8001e48 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e48:	7afb      	ldrb	r3, [r7, #11]
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d109      	bne.n	8001e66 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6818      	ldr	r0, [r3, #0]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	6979      	ldr	r1, [r7, #20]
 8001e60:	f002 f896 	bl	8003f90 <USB_EP0StartXfer>
 8001e64:	e008      	b.n	8001e78 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6818      	ldr	r0, [r3, #0]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	461a      	mov	r2, r3
 8001e72:	6979      	ldr	r1, [r7, #20]
 8001e74:	f001 fe48 	bl	8003b08 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b084      	sub	sp, #16
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e8e:	78fb      	ldrb	r3, [r7, #3]
 8001e90:	f003 020f 	and.w	r2, r3, #15
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d901      	bls.n	8001ea0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e050      	b.n	8001f42 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ea0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	da0f      	bge.n	8001ec8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ea8:	78fb      	ldrb	r3, [r7, #3]
 8001eaa:	f003 020f 	and.w	r2, r3, #15
 8001eae:	4613      	mov	r3, r2
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	1a9b      	subs	r3, r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	3338      	adds	r3, #56	; 0x38
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	4413      	add	r3, r2
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	705a      	strb	r2, [r3, #1]
 8001ec6:	e00d      	b.n	8001ee4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ec8:	78fa      	ldrb	r2, [r7, #3]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	1a9b      	subs	r3, r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	4413      	add	r3, r2
 8001eda:	3304      	adds	r3, #4
 8001edc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001eea:	78fb      	ldrb	r3, [r7, #3]
 8001eec:	f003 030f 	and.w	r3, r3, #15
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d101      	bne.n	8001f04 <HAL_PCD_EP_SetStall+0x82>
 8001f00:	2302      	movs	r3, #2
 8001f02:	e01e      	b.n	8001f42 <HAL_PCD_EP_SetStall+0xc0>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68f9      	ldr	r1, [r7, #12]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f002 fa25 	bl	8004362 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f18:	78fb      	ldrb	r3, [r7, #3]
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10a      	bne.n	8001f38 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6818      	ldr	r0, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	b2d9      	uxtb	r1, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f32:	461a      	mov	r2, r3
 8001f34:	f002 fc16 	bl	8004764 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b084      	sub	sp, #16
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
 8001f52:	460b      	mov	r3, r1
 8001f54:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f56:	78fb      	ldrb	r3, [r7, #3]
 8001f58:	f003 020f 	and.w	r2, r3, #15
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d901      	bls.n	8001f68 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e042      	b.n	8001fee <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	da0f      	bge.n	8001f90 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f70:	78fb      	ldrb	r3, [r7, #3]
 8001f72:	f003 020f 	and.w	r2, r3, #15
 8001f76:	4613      	mov	r3, r2
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	1a9b      	subs	r3, r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	3338      	adds	r3, #56	; 0x38
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	4413      	add	r3, r2
 8001f84:	3304      	adds	r3, #4
 8001f86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	705a      	strb	r2, [r3, #1]
 8001f8e:	e00f      	b.n	8001fb0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f90:	78fb      	ldrb	r3, [r7, #3]
 8001f92:	f003 020f 	and.w	r2, r3, #15
 8001f96:	4613      	mov	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	1a9b      	subs	r3, r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	3304      	adds	r3, #4
 8001fa8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fb6:	78fb      	ldrb	r3, [r7, #3]
 8001fb8:	f003 030f 	and.w	r3, r3, #15
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d101      	bne.n	8001fd0 <HAL_PCD_EP_ClrStall+0x86>
 8001fcc:	2302      	movs	r3, #2
 8001fce:	e00e      	b.n	8001fee <HAL_PCD_EP_ClrStall+0xa4>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68f9      	ldr	r1, [r7, #12]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f002 fa2d 	bl	800443e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b08a      	sub	sp, #40	; 0x28
 8001ffa:	af02      	add	r7, sp, #8
 8001ffc:	6078      	str	r0, [r7, #4]
 8001ffe:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	4613      	mov	r3, r2
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	1a9b      	subs	r3, r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	3338      	adds	r3, #56	; 0x38
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	4413      	add	r3, r2
 800201a:	3304      	adds	r3, #4
 800201c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	699a      	ldr	r2, [r3, #24]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	429a      	cmp	r2, r3
 8002028:	d901      	bls.n	800202e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e06c      	b.n	8002108 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	695a      	ldr	r2, [r3, #20]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	69fa      	ldr	r2, [r7, #28]
 8002040:	429a      	cmp	r2, r3
 8002042:	d902      	bls.n	800204a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	3303      	adds	r3, #3
 800204e:	089b      	lsrs	r3, r3, #2
 8002050:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002052:	e02b      	b.n	80020ac <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	695a      	ldr	r2, [r3, #20]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	69fa      	ldr	r2, [r7, #28]
 8002066:	429a      	cmp	r2, r3
 8002068:	d902      	bls.n	8002070 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	3303      	adds	r3, #3
 8002074:	089b      	lsrs	r3, r3, #2
 8002076:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	68d9      	ldr	r1, [r3, #12]
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	b2da      	uxtb	r2, r3
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002088:	b2db      	uxtb	r3, r3
 800208a:	9300      	str	r3, [sp, #0]
 800208c:	4603      	mov	r3, r0
 800208e:	6978      	ldr	r0, [r7, #20]
 8002090:	f002 f8d1 	bl	8004236 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	68da      	ldr	r2, [r3, #12]
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	441a      	add	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	699a      	ldr	r2, [r3, #24]
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	441a      	add	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	015a      	lsls	r2, r3, #5
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	4413      	add	r3, r2
 80020b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d809      	bhi.n	80020d6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	699a      	ldr	r2, [r3, #24]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d203      	bcs.n	80020d6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1be      	bne.n	8002054 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	695a      	ldr	r2, [r3, #20]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d811      	bhi.n	8002106 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	f003 030f 	and.w	r3, r3, #15
 80020e8:	2201      	movs	r2, #1
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	43db      	mvns	r3, r3
 80020fc:	6939      	ldr	r1, [r7, #16]
 80020fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002102:	4013      	ands	r3, r2
 8002104:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3720      	adds	r7, #32
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	333c      	adds	r3, #60	; 0x3c
 8002128:	3304      	adds	r3, #4
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	015a      	lsls	r2, r3, #5
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	4413      	add	r3, r2
 8002136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	2b01      	cmp	r3, #1
 8002144:	f040 80a0 	bne.w	8002288 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	2b00      	cmp	r3, #0
 8002150:	d015      	beq.n	800217e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	4a72      	ldr	r2, [pc, #456]	; (8002320 <PCD_EP_OutXfrComplete_int+0x210>)
 8002156:	4293      	cmp	r3, r2
 8002158:	f240 80dd 	bls.w	8002316 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002162:	2b00      	cmp	r3, #0
 8002164:	f000 80d7 	beq.w	8002316 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	015a      	lsls	r2, r3, #5
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	4413      	add	r3, r2
 8002170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002174:	461a      	mov	r2, r3
 8002176:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800217a:	6093      	str	r3, [r2, #8]
 800217c:	e0cb      	b.n	8002316 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	f003 0320 	and.w	r3, r3, #32
 8002184:	2b00      	cmp	r3, #0
 8002186:	d009      	beq.n	800219c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	015a      	lsls	r2, r3, #5
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	4413      	add	r3, r2
 8002190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002194:	461a      	mov	r2, r3
 8002196:	2320      	movs	r3, #32
 8002198:	6093      	str	r3, [r2, #8]
 800219a:	e0bc      	b.n	8002316 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f040 80b7 	bne.w	8002316 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	4a5d      	ldr	r2, [pc, #372]	; (8002320 <PCD_EP_OutXfrComplete_int+0x210>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d90f      	bls.n	80021d0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00a      	beq.n	80021d0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	015a      	lsls	r2, r3, #5
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	4413      	add	r3, r2
 80021c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021c6:	461a      	mov	r2, r3
 80021c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021cc:	6093      	str	r3, [r2, #8]
 80021ce:	e0a2      	b.n	8002316 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	4613      	mov	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	1a9b      	subs	r3, r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	440b      	add	r3, r1
 80021de:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80021e2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	0159      	lsls	r1, r3, #5
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	440b      	add	r3, r1
 80021ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80021f6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	4613      	mov	r3, r2
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	1a9b      	subs	r3, r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4403      	add	r3, r0
 8002206:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800220a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	4613      	mov	r3, r2
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	1a9b      	subs	r3, r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	440b      	add	r3, r1
 800221a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800221e:	6819      	ldr	r1, [r3, #0]
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	4613      	mov	r3, r2
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	1a9b      	subs	r3, r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4403      	add	r3, r0
 800222e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4419      	add	r1, r3
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	4613      	mov	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	1a9b      	subs	r3, r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4403      	add	r3, r0
 8002244:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002248:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d114      	bne.n	800227a <PCD_EP_OutXfrComplete_int+0x16a>
 8002250:	6879      	ldr	r1, [r7, #4]
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	4613      	mov	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	1a9b      	subs	r3, r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	440b      	add	r3, r1
 800225e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d108      	bne.n	800227a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6818      	ldr	r0, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002272:	461a      	mov	r2, r3
 8002274:	2101      	movs	r1, #1
 8002276:	f002 fa75 	bl	8004764 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	b2db      	uxtb	r3, r3
 800227e:	4619      	mov	r1, r3
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f003 ffdf 	bl	8006244 <HAL_PCD_DataOutStageCallback>
 8002286:	e046      	b.n	8002316 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	4a26      	ldr	r2, [pc, #152]	; (8002324 <PCD_EP_OutXfrComplete_int+0x214>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d124      	bne.n	80022da <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00a      	beq.n	80022b0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	015a      	lsls	r2, r3, #5
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	4413      	add	r3, r2
 80022a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022a6:	461a      	mov	r2, r3
 80022a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022ac:	6093      	str	r3, [r2, #8]
 80022ae:	e032      	b.n	8002316 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	f003 0320 	and.w	r3, r3, #32
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d008      	beq.n	80022cc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	015a      	lsls	r2, r3, #5
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	4413      	add	r3, r2
 80022c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022c6:	461a      	mov	r2, r3
 80022c8:	2320      	movs	r3, #32
 80022ca:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	4619      	mov	r1, r3
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f003 ffb6 	bl	8006244 <HAL_PCD_DataOutStageCallback>
 80022d8:	e01d      	b.n	8002316 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d114      	bne.n	800230a <PCD_EP_OutXfrComplete_int+0x1fa>
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	4613      	mov	r3, r2
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	1a9b      	subs	r3, r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	440b      	add	r3, r1
 80022ee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d108      	bne.n	800230a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6818      	ldr	r0, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002302:	461a      	mov	r2, r3
 8002304:	2100      	movs	r1, #0
 8002306:	f002 fa2d 	bl	8004764 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	b2db      	uxtb	r3, r3
 800230e:	4619      	mov	r1, r3
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f003 ff97 	bl	8006244 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3718      	adds	r7, #24
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	4f54300a 	.word	0x4f54300a
 8002324:	4f54310a 	.word	0x4f54310a

08002328 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	333c      	adds	r3, #60	; 0x3c
 8002340:	3304      	adds	r3, #4
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	015a      	lsls	r2, r3, #5
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	4413      	add	r3, r2
 800234e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	4a15      	ldr	r2, [pc, #84]	; (80023b0 <PCD_EP_OutSetupPacket_int+0x88>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d90e      	bls.n	800237c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002364:	2b00      	cmp	r3, #0
 8002366:	d009      	beq.n	800237c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	015a      	lsls	r2, r3, #5
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	4413      	add	r3, r2
 8002370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002374:	461a      	mov	r2, r3
 8002376:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800237a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f003 ff4f 	bl	8006220 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	4a0a      	ldr	r2, [pc, #40]	; (80023b0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d90c      	bls.n	80023a4 <PCD_EP_OutSetupPacket_int+0x7c>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d108      	bne.n	80023a4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6818      	ldr	r0, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800239c:	461a      	mov	r2, r3
 800239e:	2101      	movs	r1, #1
 80023a0:	f002 f9e0 	bl	8004764 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	4f54300a 	.word	0x4f54300a

080023b4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	460b      	mov	r3, r1
 80023be:	70fb      	strb	r3, [r7, #3]
 80023c0:	4613      	mov	r3, r2
 80023c2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80023cc:	78fb      	ldrb	r3, [r7, #3]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d107      	bne.n	80023e2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80023d2:	883b      	ldrh	r3, [r7, #0]
 80023d4:	0419      	lsls	r1, r3, #16
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	430a      	orrs	r2, r1
 80023de:	629a      	str	r2, [r3, #40]	; 0x28
 80023e0:	e028      	b.n	8002434 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e8:	0c1b      	lsrs	r3, r3, #16
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	4413      	add	r3, r2
 80023ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023f0:	2300      	movs	r3, #0
 80023f2:	73fb      	strb	r3, [r7, #15]
 80023f4:	e00d      	b.n	8002412 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	7bfb      	ldrb	r3, [r7, #15]
 80023fc:	3340      	adds	r3, #64	; 0x40
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	0c1b      	lsrs	r3, r3, #16
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	4413      	add	r3, r2
 800240a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800240c:	7bfb      	ldrb	r3, [r7, #15]
 800240e:	3301      	adds	r3, #1
 8002410:	73fb      	strb	r3, [r7, #15]
 8002412:	7bfa      	ldrb	r2, [r7, #15]
 8002414:	78fb      	ldrb	r3, [r7, #3]
 8002416:	3b01      	subs	r3, #1
 8002418:	429a      	cmp	r2, r3
 800241a:	d3ec      	bcc.n	80023f6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800241c:	883b      	ldrh	r3, [r7, #0]
 800241e:	0418      	lsls	r0, r3, #16
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6819      	ldr	r1, [r3, #0]
 8002424:	78fb      	ldrb	r3, [r7, #3]
 8002426:	3b01      	subs	r3, #1
 8002428:	68ba      	ldr	r2, [r7, #8]
 800242a:	4302      	orrs	r2, r0
 800242c:	3340      	adds	r3, #64	; 0x40
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002442:	b480      	push	{r7}
 8002444:	b083      	sub	sp, #12
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
 800244a:	460b      	mov	r3, r1
 800244c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	887a      	ldrh	r2, [r7, #2]
 8002454:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	460b      	mov	r3, r1
 800246e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e264      	b.n	8002958 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d075      	beq.n	8002586 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800249a:	4ba3      	ldr	r3, [pc, #652]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 030c 	and.w	r3, r3, #12
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	d00c      	beq.n	80024c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024a6:	4ba0      	ldr	r3, [pc, #640]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024ae:	2b08      	cmp	r3, #8
 80024b0:	d112      	bne.n	80024d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024b2:	4b9d      	ldr	r3, [pc, #628]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024be:	d10b      	bne.n	80024d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c0:	4b99      	ldr	r3, [pc, #612]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d05b      	beq.n	8002584 <HAL_RCC_OscConfig+0x108>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d157      	bne.n	8002584 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e23f      	b.n	8002958 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e0:	d106      	bne.n	80024f0 <HAL_RCC_OscConfig+0x74>
 80024e2:	4b91      	ldr	r3, [pc, #580]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a90      	ldr	r2, [pc, #576]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 80024e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ec:	6013      	str	r3, [r2, #0]
 80024ee:	e01d      	b.n	800252c <HAL_RCC_OscConfig+0xb0>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024f8:	d10c      	bne.n	8002514 <HAL_RCC_OscConfig+0x98>
 80024fa:	4b8b      	ldr	r3, [pc, #556]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a8a      	ldr	r2, [pc, #552]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 8002500:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	4b88      	ldr	r3, [pc, #544]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a87      	ldr	r2, [pc, #540]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 800250c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002510:	6013      	str	r3, [r2, #0]
 8002512:	e00b      	b.n	800252c <HAL_RCC_OscConfig+0xb0>
 8002514:	4b84      	ldr	r3, [pc, #528]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a83      	ldr	r2, [pc, #524]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 800251a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800251e:	6013      	str	r3, [r2, #0]
 8002520:	4b81      	ldr	r3, [pc, #516]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a80      	ldr	r2, [pc, #512]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 8002526:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800252a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d013      	beq.n	800255c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002534:	f7fe fb18 	bl	8000b68 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800253c:	f7fe fb14 	bl	8000b68 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b64      	cmp	r3, #100	; 0x64
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e204      	b.n	8002958 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800254e:	4b76      	ldr	r3, [pc, #472]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d0f0      	beq.n	800253c <HAL_RCC_OscConfig+0xc0>
 800255a:	e014      	b.n	8002586 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255c:	f7fe fb04 	bl	8000b68 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002564:	f7fe fb00 	bl	8000b68 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b64      	cmp	r3, #100	; 0x64
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e1f0      	b.n	8002958 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002576:	4b6c      	ldr	r3, [pc, #432]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f0      	bne.n	8002564 <HAL_RCC_OscConfig+0xe8>
 8002582:	e000      	b.n	8002586 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002584:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d063      	beq.n	800265a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002592:	4b65      	ldr	r3, [pc, #404]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 030c 	and.w	r3, r3, #12
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00b      	beq.n	80025b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800259e:	4b62      	ldr	r3, [pc, #392]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025a6:	2b08      	cmp	r3, #8
 80025a8:	d11c      	bne.n	80025e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025aa:	4b5f      	ldr	r3, [pc, #380]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d116      	bne.n	80025e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025b6:	4b5c      	ldr	r3, [pc, #368]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d005      	beq.n	80025ce <HAL_RCC_OscConfig+0x152>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d001      	beq.n	80025ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e1c4      	b.n	8002958 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ce:	4b56      	ldr	r3, [pc, #344]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	4952      	ldr	r1, [pc, #328]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025e2:	e03a      	b.n	800265a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d020      	beq.n	800262e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025ec:	4b4f      	ldr	r3, [pc, #316]	; (800272c <HAL_RCC_OscConfig+0x2b0>)
 80025ee:	2201      	movs	r2, #1
 80025f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f2:	f7fe fab9 	bl	8000b68 <HAL_GetTick>
 80025f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f8:	e008      	b.n	800260c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025fa:	f7fe fab5 	bl	8000b68 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e1a5      	b.n	8002958 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800260c:	4b46      	ldr	r3, [pc, #280]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0f0      	beq.n	80025fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002618:	4b43      	ldr	r3, [pc, #268]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	4940      	ldr	r1, [pc, #256]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 8002628:	4313      	orrs	r3, r2
 800262a:	600b      	str	r3, [r1, #0]
 800262c:	e015      	b.n	800265a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800262e:	4b3f      	ldr	r3, [pc, #252]	; (800272c <HAL_RCC_OscConfig+0x2b0>)
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002634:	f7fe fa98 	bl	8000b68 <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800263c:	f7fe fa94 	bl	8000b68 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e184      	b.n	8002958 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800264e:	4b36      	ldr	r3, [pc, #216]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1f0      	bne.n	800263c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0308 	and.w	r3, r3, #8
 8002662:	2b00      	cmp	r3, #0
 8002664:	d030      	beq.n	80026c8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d016      	beq.n	800269c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800266e:	4b30      	ldr	r3, [pc, #192]	; (8002730 <HAL_RCC_OscConfig+0x2b4>)
 8002670:	2201      	movs	r2, #1
 8002672:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002674:	f7fe fa78 	bl	8000b68 <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800267c:	f7fe fa74 	bl	8000b68 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e164      	b.n	8002958 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800268e:	4b26      	ldr	r3, [pc, #152]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 8002690:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d0f0      	beq.n	800267c <HAL_RCC_OscConfig+0x200>
 800269a:	e015      	b.n	80026c8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800269c:	4b24      	ldr	r3, [pc, #144]	; (8002730 <HAL_RCC_OscConfig+0x2b4>)
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a2:	f7fe fa61 	bl	8000b68 <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026a8:	e008      	b.n	80026bc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026aa:	f7fe fa5d 	bl	8000b68 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e14d      	b.n	8002958 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026bc:	4b1a      	ldr	r3, [pc, #104]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 80026be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1f0      	bne.n	80026aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 80a0 	beq.w	8002816 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026d6:	2300      	movs	r3, #0
 80026d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026da:	4b13      	ldr	r3, [pc, #76]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10f      	bne.n	8002706 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	60bb      	str	r3, [r7, #8]
 80026ea:	4b0f      	ldr	r3, [pc, #60]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	4a0e      	ldr	r2, [pc, #56]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 80026f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026f4:	6413      	str	r3, [r2, #64]	; 0x40
 80026f6:	4b0c      	ldr	r3, [pc, #48]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fe:	60bb      	str	r3, [r7, #8]
 8002700:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002702:	2301      	movs	r3, #1
 8002704:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002706:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <HAL_RCC_OscConfig+0x2b8>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270e:	2b00      	cmp	r3, #0
 8002710:	d121      	bne.n	8002756 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002712:	4b08      	ldr	r3, [pc, #32]	; (8002734 <HAL_RCC_OscConfig+0x2b8>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a07      	ldr	r2, [pc, #28]	; (8002734 <HAL_RCC_OscConfig+0x2b8>)
 8002718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800271c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800271e:	f7fe fa23 	bl	8000b68 <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002724:	e011      	b.n	800274a <HAL_RCC_OscConfig+0x2ce>
 8002726:	bf00      	nop
 8002728:	40023800 	.word	0x40023800
 800272c:	42470000 	.word	0x42470000
 8002730:	42470e80 	.word	0x42470e80
 8002734:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002738:	f7fe fa16 	bl	8000b68 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e106      	b.n	8002958 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800274a:	4b85      	ldr	r3, [pc, #532]	; (8002960 <HAL_RCC_OscConfig+0x4e4>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0f0      	beq.n	8002738 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d106      	bne.n	800276c <HAL_RCC_OscConfig+0x2f0>
 800275e:	4b81      	ldr	r3, [pc, #516]	; (8002964 <HAL_RCC_OscConfig+0x4e8>)
 8002760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002762:	4a80      	ldr	r2, [pc, #512]	; (8002964 <HAL_RCC_OscConfig+0x4e8>)
 8002764:	f043 0301 	orr.w	r3, r3, #1
 8002768:	6713      	str	r3, [r2, #112]	; 0x70
 800276a:	e01c      	b.n	80027a6 <HAL_RCC_OscConfig+0x32a>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	2b05      	cmp	r3, #5
 8002772:	d10c      	bne.n	800278e <HAL_RCC_OscConfig+0x312>
 8002774:	4b7b      	ldr	r3, [pc, #492]	; (8002964 <HAL_RCC_OscConfig+0x4e8>)
 8002776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002778:	4a7a      	ldr	r2, [pc, #488]	; (8002964 <HAL_RCC_OscConfig+0x4e8>)
 800277a:	f043 0304 	orr.w	r3, r3, #4
 800277e:	6713      	str	r3, [r2, #112]	; 0x70
 8002780:	4b78      	ldr	r3, [pc, #480]	; (8002964 <HAL_RCC_OscConfig+0x4e8>)
 8002782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002784:	4a77      	ldr	r2, [pc, #476]	; (8002964 <HAL_RCC_OscConfig+0x4e8>)
 8002786:	f043 0301 	orr.w	r3, r3, #1
 800278a:	6713      	str	r3, [r2, #112]	; 0x70
 800278c:	e00b      	b.n	80027a6 <HAL_RCC_OscConfig+0x32a>
 800278e:	4b75      	ldr	r3, [pc, #468]	; (8002964 <HAL_RCC_OscConfig+0x4e8>)
 8002790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002792:	4a74      	ldr	r2, [pc, #464]	; (8002964 <HAL_RCC_OscConfig+0x4e8>)
 8002794:	f023 0301 	bic.w	r3, r3, #1
 8002798:	6713      	str	r3, [r2, #112]	; 0x70
 800279a:	4b72      	ldr	r3, [pc, #456]	; (8002964 <HAL_RCC_OscConfig+0x4e8>)
 800279c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279e:	4a71      	ldr	r2, [pc, #452]	; (8002964 <HAL_RCC_OscConfig+0x4e8>)
 80027a0:	f023 0304 	bic.w	r3, r3, #4
 80027a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d015      	beq.n	80027da <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ae:	f7fe f9db 	bl	8000b68 <HAL_GetTick>
 80027b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b4:	e00a      	b.n	80027cc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027b6:	f7fe f9d7 	bl	8000b68 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e0c5      	b.n	8002958 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027cc:	4b65      	ldr	r3, [pc, #404]	; (8002964 <HAL_RCC_OscConfig+0x4e8>)
 80027ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d0ee      	beq.n	80027b6 <HAL_RCC_OscConfig+0x33a>
 80027d8:	e014      	b.n	8002804 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027da:	f7fe f9c5 	bl	8000b68 <HAL_GetTick>
 80027de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e0:	e00a      	b.n	80027f8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027e2:	f7fe f9c1 	bl	8000b68 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e0af      	b.n	8002958 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027f8:	4b5a      	ldr	r3, [pc, #360]	; (8002964 <HAL_RCC_OscConfig+0x4e8>)
 80027fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1ee      	bne.n	80027e2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002804:	7dfb      	ldrb	r3, [r7, #23]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d105      	bne.n	8002816 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800280a:	4b56      	ldr	r3, [pc, #344]	; (8002964 <HAL_RCC_OscConfig+0x4e8>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	4a55      	ldr	r2, [pc, #340]	; (8002964 <HAL_RCC_OscConfig+0x4e8>)
 8002810:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002814:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	2b00      	cmp	r3, #0
 800281c:	f000 809b 	beq.w	8002956 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002820:	4b50      	ldr	r3, [pc, #320]	; (8002964 <HAL_RCC_OscConfig+0x4e8>)
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f003 030c 	and.w	r3, r3, #12
 8002828:	2b08      	cmp	r3, #8
 800282a:	d05c      	beq.n	80028e6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	2b02      	cmp	r3, #2
 8002832:	d141      	bne.n	80028b8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002834:	4b4c      	ldr	r3, [pc, #304]	; (8002968 <HAL_RCC_OscConfig+0x4ec>)
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283a:	f7fe f995 	bl	8000b68 <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002842:	f7fe f991 	bl	8000b68 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e081      	b.n	8002958 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002854:	4b43      	ldr	r3, [pc, #268]	; (8002964 <HAL_RCC_OscConfig+0x4e8>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1f0      	bne.n	8002842 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	69da      	ldr	r2, [r3, #28]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	431a      	orrs	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	019b      	lsls	r3, r3, #6
 8002870:	431a      	orrs	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002876:	085b      	lsrs	r3, r3, #1
 8002878:	3b01      	subs	r3, #1
 800287a:	041b      	lsls	r3, r3, #16
 800287c:	431a      	orrs	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002882:	061b      	lsls	r3, r3, #24
 8002884:	4937      	ldr	r1, [pc, #220]	; (8002964 <HAL_RCC_OscConfig+0x4e8>)
 8002886:	4313      	orrs	r3, r2
 8002888:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800288a:	4b37      	ldr	r3, [pc, #220]	; (8002968 <HAL_RCC_OscConfig+0x4ec>)
 800288c:	2201      	movs	r2, #1
 800288e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002890:	f7fe f96a 	bl	8000b68 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002898:	f7fe f966 	bl	8000b68 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e056      	b.n	8002958 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028aa:	4b2e      	ldr	r3, [pc, #184]	; (8002964 <HAL_RCC_OscConfig+0x4e8>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0f0      	beq.n	8002898 <HAL_RCC_OscConfig+0x41c>
 80028b6:	e04e      	b.n	8002956 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028b8:	4b2b      	ldr	r3, [pc, #172]	; (8002968 <HAL_RCC_OscConfig+0x4ec>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028be:	f7fe f953 	bl	8000b68 <HAL_GetTick>
 80028c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028c4:	e008      	b.n	80028d8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c6:	f7fe f94f 	bl	8000b68 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e03f      	b.n	8002958 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028d8:	4b22      	ldr	r3, [pc, #136]	; (8002964 <HAL_RCC_OscConfig+0x4e8>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1f0      	bne.n	80028c6 <HAL_RCC_OscConfig+0x44a>
 80028e4:	e037      	b.n	8002956 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d101      	bne.n	80028f2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e032      	b.n	8002958 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028f2:	4b1c      	ldr	r3, [pc, #112]	; (8002964 <HAL_RCC_OscConfig+0x4e8>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d028      	beq.n	8002952 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800290a:	429a      	cmp	r2, r3
 800290c:	d121      	bne.n	8002952 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002918:	429a      	cmp	r2, r3
 800291a:	d11a      	bne.n	8002952 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002922:	4013      	ands	r3, r2
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002928:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800292a:	4293      	cmp	r3, r2
 800292c:	d111      	bne.n	8002952 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002938:	085b      	lsrs	r3, r3, #1
 800293a:	3b01      	subs	r3, #1
 800293c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800293e:	429a      	cmp	r2, r3
 8002940:	d107      	bne.n	8002952 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800294e:	429a      	cmp	r2, r3
 8002950:	d001      	beq.n	8002956 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e000      	b.n	8002958 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3718      	adds	r7, #24
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40007000 	.word	0x40007000
 8002964:	40023800 	.word	0x40023800
 8002968:	42470060 	.word	0x42470060

0800296c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d101      	bne.n	8002980 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e0cc      	b.n	8002b1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002980:	4b68      	ldr	r3, [pc, #416]	; (8002b24 <HAL_RCC_ClockConfig+0x1b8>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 030f 	and.w	r3, r3, #15
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	429a      	cmp	r2, r3
 800298c:	d90c      	bls.n	80029a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800298e:	4b65      	ldr	r3, [pc, #404]	; (8002b24 <HAL_RCC_ClockConfig+0x1b8>)
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002996:	4b63      	ldr	r3, [pc, #396]	; (8002b24 <HAL_RCC_ClockConfig+0x1b8>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d001      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e0b8      	b.n	8002b1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d020      	beq.n	80029f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d005      	beq.n	80029cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029c0:	4b59      	ldr	r3, [pc, #356]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	4a58      	ldr	r2, [pc, #352]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 80029c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0308 	and.w	r3, r3, #8
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d005      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029d8:	4b53      	ldr	r3, [pc, #332]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	4a52      	ldr	r2, [pc, #328]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029e4:	4b50      	ldr	r3, [pc, #320]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	494d      	ldr	r1, [pc, #308]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d044      	beq.n	8002a8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d107      	bne.n	8002a1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a0a:	4b47      	ldr	r3, [pc, #284]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d119      	bne.n	8002a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e07f      	b.n	8002b1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d003      	beq.n	8002a2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a26:	2b03      	cmp	r3, #3
 8002a28:	d107      	bne.n	8002a3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a2a:	4b3f      	ldr	r3, [pc, #252]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d109      	bne.n	8002a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e06f      	b.n	8002b1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a3a:	4b3b      	ldr	r3, [pc, #236]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e067      	b.n	8002b1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a4a:	4b37      	ldr	r3, [pc, #220]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f023 0203 	bic.w	r2, r3, #3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	4934      	ldr	r1, [pc, #208]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a5c:	f7fe f884 	bl	8000b68 <HAL_GetTick>
 8002a60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a62:	e00a      	b.n	8002a7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a64:	f7fe f880 	bl	8000b68 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e04f      	b.n	8002b1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a7a:	4b2b      	ldr	r3, [pc, #172]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 020c 	and.w	r2, r3, #12
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d1eb      	bne.n	8002a64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a8c:	4b25      	ldr	r3, [pc, #148]	; (8002b24 <HAL_RCC_ClockConfig+0x1b8>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 030f 	and.w	r3, r3, #15
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d20c      	bcs.n	8002ab4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a9a:	4b22      	ldr	r3, [pc, #136]	; (8002b24 <HAL_RCC_ClockConfig+0x1b8>)
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aa2:	4b20      	ldr	r3, [pc, #128]	; (8002b24 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 030f 	and.w	r3, r3, #15
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d001      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e032      	b.n	8002b1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d008      	beq.n	8002ad2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ac0:	4b19      	ldr	r3, [pc, #100]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	4916      	ldr	r1, [pc, #88]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0308 	and.w	r3, r3, #8
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d009      	beq.n	8002af2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ade:	4b12      	ldr	r3, [pc, #72]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	490e      	ldr	r1, [pc, #56]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002af2:	f000 f821 	bl	8002b38 <HAL_RCC_GetSysClockFreq>
 8002af6:	4602      	mov	r2, r0
 8002af8:	4b0b      	ldr	r3, [pc, #44]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	091b      	lsrs	r3, r3, #4
 8002afe:	f003 030f 	and.w	r3, r3, #15
 8002b02:	490a      	ldr	r1, [pc, #40]	; (8002b2c <HAL_RCC_ClockConfig+0x1c0>)
 8002b04:	5ccb      	ldrb	r3, [r1, r3]
 8002b06:	fa22 f303 	lsr.w	r3, r2, r3
 8002b0a:	4a09      	ldr	r2, [pc, #36]	; (8002b30 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b0e:	4b09      	ldr	r3, [pc, #36]	; (8002b34 <HAL_RCC_ClockConfig+0x1c8>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7fd ffe4 	bl	8000ae0 <HAL_InitTick>

  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	40023c00 	.word	0x40023c00
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	08006834 	.word	0x08006834
 8002b30:	20000000 	.word	0x20000000
 8002b34:	20000004 	.word	0x20000004

08002b38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002b3c:	b084      	sub	sp, #16
 8002b3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b40:	2300      	movs	r3, #0
 8002b42:	607b      	str	r3, [r7, #4]
 8002b44:	2300      	movs	r3, #0
 8002b46:	60fb      	str	r3, [r7, #12]
 8002b48:	2300      	movs	r3, #0
 8002b4a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b50:	4b67      	ldr	r3, [pc, #412]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f003 030c 	and.w	r3, r3, #12
 8002b58:	2b08      	cmp	r3, #8
 8002b5a:	d00d      	beq.n	8002b78 <HAL_RCC_GetSysClockFreq+0x40>
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	f200 80bd 	bhi.w	8002cdc <HAL_RCC_GetSysClockFreq+0x1a4>
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d002      	beq.n	8002b6c <HAL_RCC_GetSysClockFreq+0x34>
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	d003      	beq.n	8002b72 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b6a:	e0b7      	b.n	8002cdc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b6c:	4b61      	ldr	r3, [pc, #388]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002b6e:	60bb      	str	r3, [r7, #8]
       break;
 8002b70:	e0b7      	b.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b72:	4b61      	ldr	r3, [pc, #388]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002b74:	60bb      	str	r3, [r7, #8]
      break;
 8002b76:	e0b4      	b.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b78:	4b5d      	ldr	r3, [pc, #372]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b80:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b82:	4b5b      	ldr	r3, [pc, #364]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d04d      	beq.n	8002c2a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b8e:	4b58      	ldr	r3, [pc, #352]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	099b      	lsrs	r3, r3, #6
 8002b94:	461a      	mov	r2, r3
 8002b96:	f04f 0300 	mov.w	r3, #0
 8002b9a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b9e:	f04f 0100 	mov.w	r1, #0
 8002ba2:	ea02 0800 	and.w	r8, r2, r0
 8002ba6:	ea03 0901 	and.w	r9, r3, r1
 8002baa:	4640      	mov	r0, r8
 8002bac:	4649      	mov	r1, r9
 8002bae:	f04f 0200 	mov.w	r2, #0
 8002bb2:	f04f 0300 	mov.w	r3, #0
 8002bb6:	014b      	lsls	r3, r1, #5
 8002bb8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002bbc:	0142      	lsls	r2, r0, #5
 8002bbe:	4610      	mov	r0, r2
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	ebb0 0008 	subs.w	r0, r0, r8
 8002bc6:	eb61 0109 	sbc.w	r1, r1, r9
 8002bca:	f04f 0200 	mov.w	r2, #0
 8002bce:	f04f 0300 	mov.w	r3, #0
 8002bd2:	018b      	lsls	r3, r1, #6
 8002bd4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002bd8:	0182      	lsls	r2, r0, #6
 8002bda:	1a12      	subs	r2, r2, r0
 8002bdc:	eb63 0301 	sbc.w	r3, r3, r1
 8002be0:	f04f 0000 	mov.w	r0, #0
 8002be4:	f04f 0100 	mov.w	r1, #0
 8002be8:	00d9      	lsls	r1, r3, #3
 8002bea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002bee:	00d0      	lsls	r0, r2, #3
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	eb12 0208 	adds.w	r2, r2, r8
 8002bf8:	eb43 0309 	adc.w	r3, r3, r9
 8002bfc:	f04f 0000 	mov.w	r0, #0
 8002c00:	f04f 0100 	mov.w	r1, #0
 8002c04:	0259      	lsls	r1, r3, #9
 8002c06:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002c0a:	0250      	lsls	r0, r2, #9
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	460b      	mov	r3, r1
 8002c10:	4610      	mov	r0, r2
 8002c12:	4619      	mov	r1, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	461a      	mov	r2, r3
 8002c18:	f04f 0300 	mov.w	r3, #0
 8002c1c:	f7fd fae6 	bl	80001ec <__aeabi_uldivmod>
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	4613      	mov	r3, r2
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	e04a      	b.n	8002cc0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c2a:	4b31      	ldr	r3, [pc, #196]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	099b      	lsrs	r3, r3, #6
 8002c30:	461a      	mov	r2, r3
 8002c32:	f04f 0300 	mov.w	r3, #0
 8002c36:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c3a:	f04f 0100 	mov.w	r1, #0
 8002c3e:	ea02 0400 	and.w	r4, r2, r0
 8002c42:	ea03 0501 	and.w	r5, r3, r1
 8002c46:	4620      	mov	r0, r4
 8002c48:	4629      	mov	r1, r5
 8002c4a:	f04f 0200 	mov.w	r2, #0
 8002c4e:	f04f 0300 	mov.w	r3, #0
 8002c52:	014b      	lsls	r3, r1, #5
 8002c54:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c58:	0142      	lsls	r2, r0, #5
 8002c5a:	4610      	mov	r0, r2
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	1b00      	subs	r0, r0, r4
 8002c60:	eb61 0105 	sbc.w	r1, r1, r5
 8002c64:	f04f 0200 	mov.w	r2, #0
 8002c68:	f04f 0300 	mov.w	r3, #0
 8002c6c:	018b      	lsls	r3, r1, #6
 8002c6e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c72:	0182      	lsls	r2, r0, #6
 8002c74:	1a12      	subs	r2, r2, r0
 8002c76:	eb63 0301 	sbc.w	r3, r3, r1
 8002c7a:	f04f 0000 	mov.w	r0, #0
 8002c7e:	f04f 0100 	mov.w	r1, #0
 8002c82:	00d9      	lsls	r1, r3, #3
 8002c84:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c88:	00d0      	lsls	r0, r2, #3
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	1912      	adds	r2, r2, r4
 8002c90:	eb45 0303 	adc.w	r3, r5, r3
 8002c94:	f04f 0000 	mov.w	r0, #0
 8002c98:	f04f 0100 	mov.w	r1, #0
 8002c9c:	0299      	lsls	r1, r3, #10
 8002c9e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002ca2:	0290      	lsls	r0, r2, #10
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	4610      	mov	r0, r2
 8002caa:	4619      	mov	r1, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	f04f 0300 	mov.w	r3, #0
 8002cb4:	f7fd fa9a 	bl	80001ec <__aeabi_uldivmod>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	460b      	mov	r3, r1
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cc0:	4b0b      	ldr	r3, [pc, #44]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	0c1b      	lsrs	r3, r3, #16
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	3301      	adds	r3, #1
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd8:	60bb      	str	r3, [r7, #8]
      break;
 8002cda:	e002      	b.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cdc:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002cde:	60bb      	str	r3, [r7, #8]
      break;
 8002ce0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ce2:	68bb      	ldr	r3, [r7, #8]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002cee:	bf00      	nop
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	00f42400 	.word	0x00f42400
 8002cf8:	007a1200 	.word	0x007a1200

08002cfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d00:	4b03      	ldr	r3, [pc, #12]	; (8002d10 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d02:	681b      	ldr	r3, [r3, #0]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	20000000 	.word	0x20000000

08002d14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d18:	f7ff fff0 	bl	8002cfc <HAL_RCC_GetHCLKFreq>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	4b05      	ldr	r3, [pc, #20]	; (8002d34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	0a9b      	lsrs	r3, r3, #10
 8002d24:	f003 0307 	and.w	r3, r3, #7
 8002d28:	4903      	ldr	r1, [pc, #12]	; (8002d38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d2a:	5ccb      	ldrb	r3, [r1, r3]
 8002d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40023800 	.word	0x40023800
 8002d38:	08006844 	.word	0x08006844

08002d3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d40:	f7ff ffdc 	bl	8002cfc <HAL_RCC_GetHCLKFreq>
 8002d44:	4602      	mov	r2, r0
 8002d46:	4b05      	ldr	r3, [pc, #20]	; (8002d5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	0b5b      	lsrs	r3, r3, #13
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	4903      	ldr	r1, [pc, #12]	; (8002d60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d52:	5ccb      	ldrb	r3, [r1, r3]
 8002d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	08006844 	.word	0x08006844

08002d64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e03f      	b.n	8002df6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d106      	bne.n	8002d90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7fd fdce 	bl	800092c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2224      	movs	r2, #36	; 0x24
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002da6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 f829 	bl	8002e00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	691a      	ldr	r2, [r3, #16]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	695a      	ldr	r2, [r3, #20]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68da      	ldr	r2, [r3, #12]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ddc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2220      	movs	r2, #32
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2220      	movs	r2, #32
 8002df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
	...

08002e00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e04:	b09f      	sub	sp, #124	; 0x7c
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e16:	68d9      	ldr	r1, [r3, #12]
 8002e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	ea40 0301 	orr.w	r3, r0, r1
 8002e20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e24:	689a      	ldr	r2, [r3, #8]
 8002e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	431a      	orrs	r2, r3
 8002e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002e44:	f021 010c 	bic.w	r1, r1, #12
 8002e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e4e:	430b      	orrs	r3, r1
 8002e50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e5e:	6999      	ldr	r1, [r3, #24]
 8002e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	ea40 0301 	orr.w	r3, r0, r1
 8002e68:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	4bc5      	ldr	r3, [pc, #788]	; (8003184 <UART_SetConfig+0x384>)
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d004      	beq.n	8002e7e <UART_SetConfig+0x7e>
 8002e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	4bc3      	ldr	r3, [pc, #780]	; (8003188 <UART_SetConfig+0x388>)
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d103      	bne.n	8002e86 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e7e:	f7ff ff5d 	bl	8002d3c <HAL_RCC_GetPCLK2Freq>
 8002e82:	6778      	str	r0, [r7, #116]	; 0x74
 8002e84:	e002      	b.n	8002e8c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e86:	f7ff ff45 	bl	8002d14 <HAL_RCC_GetPCLK1Freq>
 8002e8a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e8e:	69db      	ldr	r3, [r3, #28]
 8002e90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e94:	f040 80b6 	bne.w	8003004 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e9a:	461c      	mov	r4, r3
 8002e9c:	f04f 0500 	mov.w	r5, #0
 8002ea0:	4622      	mov	r2, r4
 8002ea2:	462b      	mov	r3, r5
 8002ea4:	1891      	adds	r1, r2, r2
 8002ea6:	6439      	str	r1, [r7, #64]	; 0x40
 8002ea8:	415b      	adcs	r3, r3
 8002eaa:	647b      	str	r3, [r7, #68]	; 0x44
 8002eac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002eb0:	1912      	adds	r2, r2, r4
 8002eb2:	eb45 0303 	adc.w	r3, r5, r3
 8002eb6:	f04f 0000 	mov.w	r0, #0
 8002eba:	f04f 0100 	mov.w	r1, #0
 8002ebe:	00d9      	lsls	r1, r3, #3
 8002ec0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ec4:	00d0      	lsls	r0, r2, #3
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	460b      	mov	r3, r1
 8002eca:	1911      	adds	r1, r2, r4
 8002ecc:	6639      	str	r1, [r7, #96]	; 0x60
 8002ece:	416b      	adcs	r3, r5
 8002ed0:	667b      	str	r3, [r7, #100]	; 0x64
 8002ed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	f04f 0300 	mov.w	r3, #0
 8002edc:	1891      	adds	r1, r2, r2
 8002ede:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ee0:	415b      	adcs	r3, r3
 8002ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ee4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002ee8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002eec:	f7fd f97e 	bl	80001ec <__aeabi_uldivmod>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	4ba5      	ldr	r3, [pc, #660]	; (800318c <UART_SetConfig+0x38c>)
 8002ef6:	fba3 2302 	umull	r2, r3, r3, r2
 8002efa:	095b      	lsrs	r3, r3, #5
 8002efc:	011e      	lsls	r6, r3, #4
 8002efe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f00:	461c      	mov	r4, r3
 8002f02:	f04f 0500 	mov.w	r5, #0
 8002f06:	4622      	mov	r2, r4
 8002f08:	462b      	mov	r3, r5
 8002f0a:	1891      	adds	r1, r2, r2
 8002f0c:	6339      	str	r1, [r7, #48]	; 0x30
 8002f0e:	415b      	adcs	r3, r3
 8002f10:	637b      	str	r3, [r7, #52]	; 0x34
 8002f12:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002f16:	1912      	adds	r2, r2, r4
 8002f18:	eb45 0303 	adc.w	r3, r5, r3
 8002f1c:	f04f 0000 	mov.w	r0, #0
 8002f20:	f04f 0100 	mov.w	r1, #0
 8002f24:	00d9      	lsls	r1, r3, #3
 8002f26:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f2a:	00d0      	lsls	r0, r2, #3
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	460b      	mov	r3, r1
 8002f30:	1911      	adds	r1, r2, r4
 8002f32:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f34:	416b      	adcs	r3, r5
 8002f36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	f04f 0300 	mov.w	r3, #0
 8002f42:	1891      	adds	r1, r2, r2
 8002f44:	62b9      	str	r1, [r7, #40]	; 0x28
 8002f46:	415b      	adcs	r3, r3
 8002f48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f4e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002f52:	f7fd f94b 	bl	80001ec <__aeabi_uldivmod>
 8002f56:	4602      	mov	r2, r0
 8002f58:	460b      	mov	r3, r1
 8002f5a:	4b8c      	ldr	r3, [pc, #560]	; (800318c <UART_SetConfig+0x38c>)
 8002f5c:	fba3 1302 	umull	r1, r3, r3, r2
 8002f60:	095b      	lsrs	r3, r3, #5
 8002f62:	2164      	movs	r1, #100	; 0x64
 8002f64:	fb01 f303 	mul.w	r3, r1, r3
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	3332      	adds	r3, #50	; 0x32
 8002f6e:	4a87      	ldr	r2, [pc, #540]	; (800318c <UART_SetConfig+0x38c>)
 8002f70:	fba2 2303 	umull	r2, r3, r2, r3
 8002f74:	095b      	lsrs	r3, r3, #5
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f7c:	441e      	add	r6, r3
 8002f7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f80:	4618      	mov	r0, r3
 8002f82:	f04f 0100 	mov.w	r1, #0
 8002f86:	4602      	mov	r2, r0
 8002f88:	460b      	mov	r3, r1
 8002f8a:	1894      	adds	r4, r2, r2
 8002f8c:	623c      	str	r4, [r7, #32]
 8002f8e:	415b      	adcs	r3, r3
 8002f90:	627b      	str	r3, [r7, #36]	; 0x24
 8002f92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f96:	1812      	adds	r2, r2, r0
 8002f98:	eb41 0303 	adc.w	r3, r1, r3
 8002f9c:	f04f 0400 	mov.w	r4, #0
 8002fa0:	f04f 0500 	mov.w	r5, #0
 8002fa4:	00dd      	lsls	r5, r3, #3
 8002fa6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002faa:	00d4      	lsls	r4, r2, #3
 8002fac:	4622      	mov	r2, r4
 8002fae:	462b      	mov	r3, r5
 8002fb0:	1814      	adds	r4, r2, r0
 8002fb2:	653c      	str	r4, [r7, #80]	; 0x50
 8002fb4:	414b      	adcs	r3, r1
 8002fb6:	657b      	str	r3, [r7, #84]	; 0x54
 8002fb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	f04f 0300 	mov.w	r3, #0
 8002fc2:	1891      	adds	r1, r2, r2
 8002fc4:	61b9      	str	r1, [r7, #24]
 8002fc6:	415b      	adcs	r3, r3
 8002fc8:	61fb      	str	r3, [r7, #28]
 8002fca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fce:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002fd2:	f7fd f90b 	bl	80001ec <__aeabi_uldivmod>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	4b6c      	ldr	r3, [pc, #432]	; (800318c <UART_SetConfig+0x38c>)
 8002fdc:	fba3 1302 	umull	r1, r3, r3, r2
 8002fe0:	095b      	lsrs	r3, r3, #5
 8002fe2:	2164      	movs	r1, #100	; 0x64
 8002fe4:	fb01 f303 	mul.w	r3, r1, r3
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	3332      	adds	r3, #50	; 0x32
 8002fee:	4a67      	ldr	r2, [pc, #412]	; (800318c <UART_SetConfig+0x38c>)
 8002ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff4:	095b      	lsrs	r3, r3, #5
 8002ff6:	f003 0207 	and.w	r2, r3, #7
 8002ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4432      	add	r2, r6
 8003000:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003002:	e0b9      	b.n	8003178 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003004:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003006:	461c      	mov	r4, r3
 8003008:	f04f 0500 	mov.w	r5, #0
 800300c:	4622      	mov	r2, r4
 800300e:	462b      	mov	r3, r5
 8003010:	1891      	adds	r1, r2, r2
 8003012:	6139      	str	r1, [r7, #16]
 8003014:	415b      	adcs	r3, r3
 8003016:	617b      	str	r3, [r7, #20]
 8003018:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800301c:	1912      	adds	r2, r2, r4
 800301e:	eb45 0303 	adc.w	r3, r5, r3
 8003022:	f04f 0000 	mov.w	r0, #0
 8003026:	f04f 0100 	mov.w	r1, #0
 800302a:	00d9      	lsls	r1, r3, #3
 800302c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003030:	00d0      	lsls	r0, r2, #3
 8003032:	4602      	mov	r2, r0
 8003034:	460b      	mov	r3, r1
 8003036:	eb12 0804 	adds.w	r8, r2, r4
 800303a:	eb43 0905 	adc.w	r9, r3, r5
 800303e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	4618      	mov	r0, r3
 8003044:	f04f 0100 	mov.w	r1, #0
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	f04f 0300 	mov.w	r3, #0
 8003050:	008b      	lsls	r3, r1, #2
 8003052:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003056:	0082      	lsls	r2, r0, #2
 8003058:	4640      	mov	r0, r8
 800305a:	4649      	mov	r1, r9
 800305c:	f7fd f8c6 	bl	80001ec <__aeabi_uldivmod>
 8003060:	4602      	mov	r2, r0
 8003062:	460b      	mov	r3, r1
 8003064:	4b49      	ldr	r3, [pc, #292]	; (800318c <UART_SetConfig+0x38c>)
 8003066:	fba3 2302 	umull	r2, r3, r3, r2
 800306a:	095b      	lsrs	r3, r3, #5
 800306c:	011e      	lsls	r6, r3, #4
 800306e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003070:	4618      	mov	r0, r3
 8003072:	f04f 0100 	mov.w	r1, #0
 8003076:	4602      	mov	r2, r0
 8003078:	460b      	mov	r3, r1
 800307a:	1894      	adds	r4, r2, r2
 800307c:	60bc      	str	r4, [r7, #8]
 800307e:	415b      	adcs	r3, r3
 8003080:	60fb      	str	r3, [r7, #12]
 8003082:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003086:	1812      	adds	r2, r2, r0
 8003088:	eb41 0303 	adc.w	r3, r1, r3
 800308c:	f04f 0400 	mov.w	r4, #0
 8003090:	f04f 0500 	mov.w	r5, #0
 8003094:	00dd      	lsls	r5, r3, #3
 8003096:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800309a:	00d4      	lsls	r4, r2, #3
 800309c:	4622      	mov	r2, r4
 800309e:	462b      	mov	r3, r5
 80030a0:	1814      	adds	r4, r2, r0
 80030a2:	64bc      	str	r4, [r7, #72]	; 0x48
 80030a4:	414b      	adcs	r3, r1
 80030a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f04f 0100 	mov.w	r1, #0
 80030b2:	f04f 0200 	mov.w	r2, #0
 80030b6:	f04f 0300 	mov.w	r3, #0
 80030ba:	008b      	lsls	r3, r1, #2
 80030bc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80030c0:	0082      	lsls	r2, r0, #2
 80030c2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80030c6:	f7fd f891 	bl	80001ec <__aeabi_uldivmod>
 80030ca:	4602      	mov	r2, r0
 80030cc:	460b      	mov	r3, r1
 80030ce:	4b2f      	ldr	r3, [pc, #188]	; (800318c <UART_SetConfig+0x38c>)
 80030d0:	fba3 1302 	umull	r1, r3, r3, r2
 80030d4:	095b      	lsrs	r3, r3, #5
 80030d6:	2164      	movs	r1, #100	; 0x64
 80030d8:	fb01 f303 	mul.w	r3, r1, r3
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	011b      	lsls	r3, r3, #4
 80030e0:	3332      	adds	r3, #50	; 0x32
 80030e2:	4a2a      	ldr	r2, [pc, #168]	; (800318c <UART_SetConfig+0x38c>)
 80030e4:	fba2 2303 	umull	r2, r3, r2, r3
 80030e8:	095b      	lsrs	r3, r3, #5
 80030ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030ee:	441e      	add	r6, r3
 80030f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030f2:	4618      	mov	r0, r3
 80030f4:	f04f 0100 	mov.w	r1, #0
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	1894      	adds	r4, r2, r2
 80030fe:	603c      	str	r4, [r7, #0]
 8003100:	415b      	adcs	r3, r3
 8003102:	607b      	str	r3, [r7, #4]
 8003104:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003108:	1812      	adds	r2, r2, r0
 800310a:	eb41 0303 	adc.w	r3, r1, r3
 800310e:	f04f 0400 	mov.w	r4, #0
 8003112:	f04f 0500 	mov.w	r5, #0
 8003116:	00dd      	lsls	r5, r3, #3
 8003118:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800311c:	00d4      	lsls	r4, r2, #3
 800311e:	4622      	mov	r2, r4
 8003120:	462b      	mov	r3, r5
 8003122:	eb12 0a00 	adds.w	sl, r2, r0
 8003126:	eb43 0b01 	adc.w	fp, r3, r1
 800312a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	4618      	mov	r0, r3
 8003130:	f04f 0100 	mov.w	r1, #0
 8003134:	f04f 0200 	mov.w	r2, #0
 8003138:	f04f 0300 	mov.w	r3, #0
 800313c:	008b      	lsls	r3, r1, #2
 800313e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003142:	0082      	lsls	r2, r0, #2
 8003144:	4650      	mov	r0, sl
 8003146:	4659      	mov	r1, fp
 8003148:	f7fd f850 	bl	80001ec <__aeabi_uldivmod>
 800314c:	4602      	mov	r2, r0
 800314e:	460b      	mov	r3, r1
 8003150:	4b0e      	ldr	r3, [pc, #56]	; (800318c <UART_SetConfig+0x38c>)
 8003152:	fba3 1302 	umull	r1, r3, r3, r2
 8003156:	095b      	lsrs	r3, r3, #5
 8003158:	2164      	movs	r1, #100	; 0x64
 800315a:	fb01 f303 	mul.w	r3, r1, r3
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	011b      	lsls	r3, r3, #4
 8003162:	3332      	adds	r3, #50	; 0x32
 8003164:	4a09      	ldr	r2, [pc, #36]	; (800318c <UART_SetConfig+0x38c>)
 8003166:	fba2 2303 	umull	r2, r3, r2, r3
 800316a:	095b      	lsrs	r3, r3, #5
 800316c:	f003 020f 	and.w	r2, r3, #15
 8003170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4432      	add	r2, r6
 8003176:	609a      	str	r2, [r3, #8]
}
 8003178:	bf00      	nop
 800317a:	377c      	adds	r7, #124	; 0x7c
 800317c:	46bd      	mov	sp, r7
 800317e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003182:	bf00      	nop
 8003184:	40011000 	.word	0x40011000
 8003188:	40011400 	.word	0x40011400
 800318c:	51eb851f 	.word	0x51eb851f

08003190 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003190:	b084      	sub	sp, #16
 8003192:	b580      	push	{r7, lr}
 8003194:	b084      	sub	sp, #16
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
 800319a:	f107 001c 	add.w	r0, r7, #28
 800319e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80031a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d122      	bne.n	80031ee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80031bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80031d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d105      	bne.n	80031e2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f001 fb1c 	bl	8004820 <USB_CoreReset>
 80031e8:	4603      	mov	r3, r0
 80031ea:	73fb      	strb	r3, [r7, #15]
 80031ec:	e01a      	b.n	8003224 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f001 fb10 	bl	8004820 <USB_CoreReset>
 8003200:	4603      	mov	r3, r0
 8003202:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003206:	2b00      	cmp	r3, #0
 8003208:	d106      	bne.n	8003218 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	639a      	str	r2, [r3, #56]	; 0x38
 8003216:	e005      	b.n	8003224 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003226:	2b01      	cmp	r3, #1
 8003228:	d10b      	bne.n	8003242 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f043 0206 	orr.w	r2, r3, #6
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f043 0220 	orr.w	r2, r3, #32
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003242:	7bfb      	ldrb	r3, [r7, #15]
}
 8003244:	4618      	mov	r0, r3
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800324e:	b004      	add	sp, #16
 8003250:	4770      	bx	lr
	...

08003254 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003254:	b480      	push	{r7}
 8003256:	b087      	sub	sp, #28
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	4613      	mov	r3, r2
 8003260:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003262:	79fb      	ldrb	r3, [r7, #7]
 8003264:	2b02      	cmp	r3, #2
 8003266:	d165      	bne.n	8003334 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	4a41      	ldr	r2, [pc, #260]	; (8003370 <USB_SetTurnaroundTime+0x11c>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d906      	bls.n	800327e <USB_SetTurnaroundTime+0x2a>
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	4a40      	ldr	r2, [pc, #256]	; (8003374 <USB_SetTurnaroundTime+0x120>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d202      	bcs.n	800327e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003278:	230f      	movs	r3, #15
 800327a:	617b      	str	r3, [r7, #20]
 800327c:	e062      	b.n	8003344 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	4a3c      	ldr	r2, [pc, #240]	; (8003374 <USB_SetTurnaroundTime+0x120>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d306      	bcc.n	8003294 <USB_SetTurnaroundTime+0x40>
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	4a3b      	ldr	r2, [pc, #236]	; (8003378 <USB_SetTurnaroundTime+0x124>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d202      	bcs.n	8003294 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800328e:	230e      	movs	r3, #14
 8003290:	617b      	str	r3, [r7, #20]
 8003292:	e057      	b.n	8003344 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	4a38      	ldr	r2, [pc, #224]	; (8003378 <USB_SetTurnaroundTime+0x124>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d306      	bcc.n	80032aa <USB_SetTurnaroundTime+0x56>
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	4a37      	ldr	r2, [pc, #220]	; (800337c <USB_SetTurnaroundTime+0x128>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d202      	bcs.n	80032aa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80032a4:	230d      	movs	r3, #13
 80032a6:	617b      	str	r3, [r7, #20]
 80032a8:	e04c      	b.n	8003344 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	4a33      	ldr	r2, [pc, #204]	; (800337c <USB_SetTurnaroundTime+0x128>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d306      	bcc.n	80032c0 <USB_SetTurnaroundTime+0x6c>
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	4a32      	ldr	r2, [pc, #200]	; (8003380 <USB_SetTurnaroundTime+0x12c>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d802      	bhi.n	80032c0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80032ba:	230c      	movs	r3, #12
 80032bc:	617b      	str	r3, [r7, #20]
 80032be:	e041      	b.n	8003344 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	4a2f      	ldr	r2, [pc, #188]	; (8003380 <USB_SetTurnaroundTime+0x12c>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d906      	bls.n	80032d6 <USB_SetTurnaroundTime+0x82>
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	4a2e      	ldr	r2, [pc, #184]	; (8003384 <USB_SetTurnaroundTime+0x130>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d802      	bhi.n	80032d6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80032d0:	230b      	movs	r3, #11
 80032d2:	617b      	str	r3, [r7, #20]
 80032d4:	e036      	b.n	8003344 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	4a2a      	ldr	r2, [pc, #168]	; (8003384 <USB_SetTurnaroundTime+0x130>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d906      	bls.n	80032ec <USB_SetTurnaroundTime+0x98>
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	4a29      	ldr	r2, [pc, #164]	; (8003388 <USB_SetTurnaroundTime+0x134>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d802      	bhi.n	80032ec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80032e6:	230a      	movs	r3, #10
 80032e8:	617b      	str	r3, [r7, #20]
 80032ea:	e02b      	b.n	8003344 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	4a26      	ldr	r2, [pc, #152]	; (8003388 <USB_SetTurnaroundTime+0x134>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d906      	bls.n	8003302 <USB_SetTurnaroundTime+0xae>
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	4a25      	ldr	r2, [pc, #148]	; (800338c <USB_SetTurnaroundTime+0x138>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d202      	bcs.n	8003302 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80032fc:	2309      	movs	r3, #9
 80032fe:	617b      	str	r3, [r7, #20]
 8003300:	e020      	b.n	8003344 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	4a21      	ldr	r2, [pc, #132]	; (800338c <USB_SetTurnaroundTime+0x138>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d306      	bcc.n	8003318 <USB_SetTurnaroundTime+0xc4>
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	4a20      	ldr	r2, [pc, #128]	; (8003390 <USB_SetTurnaroundTime+0x13c>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d802      	bhi.n	8003318 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003312:	2308      	movs	r3, #8
 8003314:	617b      	str	r3, [r7, #20]
 8003316:	e015      	b.n	8003344 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	4a1d      	ldr	r2, [pc, #116]	; (8003390 <USB_SetTurnaroundTime+0x13c>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d906      	bls.n	800332e <USB_SetTurnaroundTime+0xda>
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	4a1c      	ldr	r2, [pc, #112]	; (8003394 <USB_SetTurnaroundTime+0x140>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d202      	bcs.n	800332e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003328:	2307      	movs	r3, #7
 800332a:	617b      	str	r3, [r7, #20]
 800332c:	e00a      	b.n	8003344 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800332e:	2306      	movs	r3, #6
 8003330:	617b      	str	r3, [r7, #20]
 8003332:	e007      	b.n	8003344 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003334:	79fb      	ldrb	r3, [r7, #7]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d102      	bne.n	8003340 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800333a:	2309      	movs	r3, #9
 800333c:	617b      	str	r3, [r7, #20]
 800333e:	e001      	b.n	8003344 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003340:	2309      	movs	r3, #9
 8003342:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	68da      	ldr	r2, [r3, #12]
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	029b      	lsls	r3, r3, #10
 8003358:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800335c:	431a      	orrs	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	371c      	adds	r7, #28
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	00d8acbf 	.word	0x00d8acbf
 8003374:	00e4e1c0 	.word	0x00e4e1c0
 8003378:	00f42400 	.word	0x00f42400
 800337c:	01067380 	.word	0x01067380
 8003380:	011a499f 	.word	0x011a499f
 8003384:	01312cff 	.word	0x01312cff
 8003388:	014ca43f 	.word	0x014ca43f
 800338c:	016e3600 	.word	0x016e3600
 8003390:	01a6ab1f 	.word	0x01a6ab1f
 8003394:	01e84800 	.word	0x01e84800

08003398 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f043 0201 	orr.w	r2, r3, #1
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80033ba:	b480      	push	{r7}
 80033bc:	b083      	sub	sp, #12
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f023 0201 	bic.w	r2, r3, #1
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	460b      	mov	r3, r1
 80033e6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80033f8:	78fb      	ldrb	r3, [r7, #3]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d115      	bne.n	800342a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800340a:	2001      	movs	r0, #1
 800340c:	f7fd fbb8 	bl	8000b80 <HAL_Delay>
      ms++;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	3301      	adds	r3, #1
 8003414:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f001 f972 	bl	8004700 <USB_GetMode>
 800341c:	4603      	mov	r3, r0
 800341e:	2b01      	cmp	r3, #1
 8003420:	d01e      	beq.n	8003460 <USB_SetCurrentMode+0x84>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2b31      	cmp	r3, #49	; 0x31
 8003426:	d9f0      	bls.n	800340a <USB_SetCurrentMode+0x2e>
 8003428:	e01a      	b.n	8003460 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800342a:	78fb      	ldrb	r3, [r7, #3]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d115      	bne.n	800345c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800343c:	2001      	movs	r0, #1
 800343e:	f7fd fb9f 	bl	8000b80 <HAL_Delay>
      ms++;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	3301      	adds	r3, #1
 8003446:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f001 f959 	bl	8004700 <USB_GetMode>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d005      	beq.n	8003460 <USB_SetCurrentMode+0x84>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2b31      	cmp	r3, #49	; 0x31
 8003458:	d9f0      	bls.n	800343c <USB_SetCurrentMode+0x60>
 800345a:	e001      	b.n	8003460 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e005      	b.n	800346c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2b32      	cmp	r3, #50	; 0x32
 8003464:	d101      	bne.n	800346a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e000      	b.n	800346c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800346a:	2300      	movs	r3, #0
}
 800346c:	4618      	mov	r0, r3
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003474:	b084      	sub	sp, #16
 8003476:	b580      	push	{r7, lr}
 8003478:	b086      	sub	sp, #24
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
 800347e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003482:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003486:	2300      	movs	r3, #0
 8003488:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800348e:	2300      	movs	r3, #0
 8003490:	613b      	str	r3, [r7, #16]
 8003492:	e009      	b.n	80034a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	3340      	adds	r3, #64	; 0x40
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	2200      	movs	r2, #0
 80034a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	3301      	adds	r3, #1
 80034a6:	613b      	str	r3, [r7, #16]
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	2b0e      	cmp	r3, #14
 80034ac:	d9f2      	bls.n	8003494 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80034ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d11c      	bne.n	80034ee <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034c2:	f043 0302 	orr.w	r3, r3, #2
 80034c6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	639a      	str	r2, [r3, #56]	; 0x38
 80034ec:	e00b      	b.n	8003506 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800350c:	461a      	mov	r2, r3
 800350e:	2300      	movs	r3, #0
 8003510:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003518:	4619      	mov	r1, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003520:	461a      	mov	r2, r3
 8003522:	680b      	ldr	r3, [r1, #0]
 8003524:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003528:	2b01      	cmp	r3, #1
 800352a:	d10c      	bne.n	8003546 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800352c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352e:	2b00      	cmp	r3, #0
 8003530:	d104      	bne.n	800353c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003532:	2100      	movs	r1, #0
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 f945 	bl	80037c4 <USB_SetDevSpeed>
 800353a:	e008      	b.n	800354e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800353c:	2101      	movs	r1, #1
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f940 	bl	80037c4 <USB_SetDevSpeed>
 8003544:	e003      	b.n	800354e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003546:	2103      	movs	r1, #3
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 f93b 	bl	80037c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800354e:	2110      	movs	r1, #16
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 f8f3 	bl	800373c <USB_FlushTxFifo>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 f90f 	bl	8003784 <USB_FlushRxFifo>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003576:	461a      	mov	r2, r3
 8003578:	2300      	movs	r3, #0
 800357a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003582:	461a      	mov	r2, r3
 8003584:	2300      	movs	r3, #0
 8003586:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800358e:	461a      	mov	r2, r3
 8003590:	2300      	movs	r3, #0
 8003592:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003594:	2300      	movs	r3, #0
 8003596:	613b      	str	r3, [r7, #16]
 8003598:	e043      	b.n	8003622 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	015a      	lsls	r2, r3, #5
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	4413      	add	r3, r2
 80035a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035b0:	d118      	bne.n	80035e4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10a      	bne.n	80035ce <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	015a      	lsls	r2, r3, #5
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	4413      	add	r3, r2
 80035c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035c4:	461a      	mov	r2, r3
 80035c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80035ca:	6013      	str	r3, [r2, #0]
 80035cc:	e013      	b.n	80035f6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	015a      	lsls	r2, r3, #5
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	4413      	add	r3, r2
 80035d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035da:	461a      	mov	r2, r3
 80035dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80035e0:	6013      	str	r3, [r2, #0]
 80035e2:	e008      	b.n	80035f6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	015a      	lsls	r2, r3, #5
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035f0:	461a      	mov	r2, r3
 80035f2:	2300      	movs	r3, #0
 80035f4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	015a      	lsls	r2, r3, #5
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	4413      	add	r3, r2
 80035fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003602:	461a      	mov	r2, r3
 8003604:	2300      	movs	r3, #0
 8003606:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	015a      	lsls	r2, r3, #5
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	4413      	add	r3, r2
 8003610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003614:	461a      	mov	r2, r3
 8003616:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800361a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	3301      	adds	r3, #1
 8003620:	613b      	str	r3, [r7, #16]
 8003622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	429a      	cmp	r2, r3
 8003628:	d3b7      	bcc.n	800359a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800362a:	2300      	movs	r3, #0
 800362c:	613b      	str	r3, [r7, #16]
 800362e:	e043      	b.n	80036b8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	015a      	lsls	r2, r3, #5
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	4413      	add	r3, r2
 8003638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003642:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003646:	d118      	bne.n	800367a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10a      	bne.n	8003664 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	015a      	lsls	r2, r3, #5
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	4413      	add	r3, r2
 8003656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800365a:	461a      	mov	r2, r3
 800365c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003660:	6013      	str	r3, [r2, #0]
 8003662:	e013      	b.n	800368c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	015a      	lsls	r2, r3, #5
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	4413      	add	r3, r2
 800366c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003670:	461a      	mov	r2, r3
 8003672:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003676:	6013      	str	r3, [r2, #0]
 8003678:	e008      	b.n	800368c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	015a      	lsls	r2, r3, #5
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	4413      	add	r3, r2
 8003682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003686:	461a      	mov	r2, r3
 8003688:	2300      	movs	r3, #0
 800368a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	015a      	lsls	r2, r3, #5
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	4413      	add	r3, r2
 8003694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003698:	461a      	mov	r2, r3
 800369a:	2300      	movs	r3, #0
 800369c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	015a      	lsls	r2, r3, #5
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	4413      	add	r3, r2
 80036a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036aa:	461a      	mov	r2, r3
 80036ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80036b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	3301      	adds	r3, #1
 80036b6:	613b      	str	r3, [r7, #16]
 80036b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d3b7      	bcc.n	8003630 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036d2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80036e0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80036e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d105      	bne.n	80036f4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	f043 0210 	orr.w	r2, r3, #16
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	699a      	ldr	r2, [r3, #24]
 80036f8:	4b0f      	ldr	r3, [pc, #60]	; (8003738 <USB_DevInit+0x2c4>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003702:	2b00      	cmp	r3, #0
 8003704:	d005      	beq.n	8003712 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	f043 0208 	orr.w	r2, r3, #8
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003714:	2b01      	cmp	r3, #1
 8003716:	d107      	bne.n	8003728 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003720:	f043 0304 	orr.w	r3, r3, #4
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003728:	7dfb      	ldrb	r3, [r7, #23]
}
 800372a:	4618      	mov	r0, r3
 800372c:	3718      	adds	r7, #24
 800372e:	46bd      	mov	sp, r7
 8003730:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003734:	b004      	add	sp, #16
 8003736:	4770      	bx	lr
 8003738:	803c3800 	.word	0x803c3800

0800373c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003746:	2300      	movs	r3, #0
 8003748:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	019b      	lsls	r3, r3, #6
 800374e:	f043 0220 	orr.w	r2, r3, #32
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	3301      	adds	r3, #1
 800375a:	60fb      	str	r3, [r7, #12]
 800375c:	4a08      	ldr	r2, [pc, #32]	; (8003780 <USB_FlushTxFifo+0x44>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d901      	bls.n	8003766 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e006      	b.n	8003774 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	f003 0320 	and.w	r3, r3, #32
 800376e:	2b20      	cmp	r3, #32
 8003770:	d0f1      	beq.n	8003756 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3714      	adds	r7, #20
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	00030d40 	.word	0x00030d40

08003784 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800378c:	2300      	movs	r3, #0
 800378e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2210      	movs	r2, #16
 8003794:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	3301      	adds	r3, #1
 800379a:	60fb      	str	r3, [r7, #12]
 800379c:	4a08      	ldr	r2, [pc, #32]	; (80037c0 <USB_FlushRxFifo+0x3c>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d901      	bls.n	80037a6 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e006      	b.n	80037b4 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	f003 0310 	and.w	r3, r3, #16
 80037ae:	2b10      	cmp	r3, #16
 80037b0:	d0f1      	beq.n	8003796 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3714      	adds	r7, #20
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr
 80037c0:	00030d40 	.word	0x00030d40

080037c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	460b      	mov	r3, r1
 80037ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	78fb      	ldrb	r3, [r7, #3]
 80037de:	68f9      	ldr	r1, [r7, #12]
 80037e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037e4:	4313      	orrs	r3, r2
 80037e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3714      	adds	r7, #20
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80037f6:	b480      	push	{r7}
 80037f8:	b087      	sub	sp, #28
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f003 0306 	and.w	r3, r3, #6
 800380e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d102      	bne.n	800381c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003816:	2300      	movs	r3, #0
 8003818:	75fb      	strb	r3, [r7, #23]
 800381a:	e00a      	b.n	8003832 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2b02      	cmp	r3, #2
 8003820:	d002      	beq.n	8003828 <USB_GetDevSpeed+0x32>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2b06      	cmp	r3, #6
 8003826:	d102      	bne.n	800382e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003828:	2302      	movs	r3, #2
 800382a:	75fb      	strb	r3, [r7, #23]
 800382c:	e001      	b.n	8003832 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800382e:	230f      	movs	r3, #15
 8003830:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003832:	7dfb      	ldrb	r3, [r7, #23]
}
 8003834:	4618      	mov	r0, r3
 8003836:	371c      	adds	r7, #28
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	785b      	ldrb	r3, [r3, #1]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d13a      	bne.n	80038d2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003862:	69da      	ldr	r2, [r3, #28]
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	f003 030f 	and.w	r3, r3, #15
 800386c:	2101      	movs	r1, #1
 800386e:	fa01 f303 	lsl.w	r3, r1, r3
 8003872:	b29b      	uxth	r3, r3
 8003874:	68f9      	ldr	r1, [r7, #12]
 8003876:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800387a:	4313      	orrs	r3, r2
 800387c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	015a      	lsls	r2, r3, #5
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	4413      	add	r3, r2
 8003886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d155      	bne.n	8003940 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	015a      	lsls	r2, r3, #5
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4413      	add	r3, r2
 800389c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	78db      	ldrb	r3, [r3, #3]
 80038ae:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80038b0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	059b      	lsls	r3, r3, #22
 80038b6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80038b8:	4313      	orrs	r3, r2
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	0151      	lsls	r1, r2, #5
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	440a      	add	r2, r1
 80038c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038ce:	6013      	str	r3, [r2, #0]
 80038d0:	e036      	b.n	8003940 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038d8:	69da      	ldr	r2, [r3, #28]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	f003 030f 	and.w	r3, r3, #15
 80038e2:	2101      	movs	r1, #1
 80038e4:	fa01 f303 	lsl.w	r3, r1, r3
 80038e8:	041b      	lsls	r3, r3, #16
 80038ea:	68f9      	ldr	r1, [r7, #12]
 80038ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038f0:	4313      	orrs	r3, r2
 80038f2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	015a      	lsls	r2, r3, #5
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4413      	add	r3, r2
 80038fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d11a      	bne.n	8003940 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	015a      	lsls	r2, r3, #5
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	4413      	add	r3, r2
 8003912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	78db      	ldrb	r3, [r3, #3]
 8003924:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003926:	430b      	orrs	r3, r1
 8003928:	4313      	orrs	r3, r2
 800392a:	68ba      	ldr	r2, [r7, #8]
 800392c:	0151      	lsls	r1, r2, #5
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	440a      	add	r2, r1
 8003932:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800393a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800393e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
	...

08003950 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	785b      	ldrb	r3, [r3, #1]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d161      	bne.n	8003a30 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	015a      	lsls	r2, r3, #5
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	4413      	add	r3, r2
 8003974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800397e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003982:	d11f      	bne.n	80039c4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	015a      	lsls	r2, r3, #5
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	4413      	add	r3, r2
 800398c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	0151      	lsls	r1, r2, #5
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	440a      	add	r2, r1
 800399a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800399e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80039a2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	015a      	lsls	r2, r3, #5
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	4413      	add	r3, r2
 80039ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	0151      	lsls	r1, r2, #5
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	440a      	add	r2, r1
 80039ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80039c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	f003 030f 	and.w	r3, r3, #15
 80039d4:	2101      	movs	r1, #1
 80039d6:	fa01 f303 	lsl.w	r3, r1, r3
 80039da:	b29b      	uxth	r3, r3
 80039dc:	43db      	mvns	r3, r3
 80039de:	68f9      	ldr	r1, [r7, #12]
 80039e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039e4:	4013      	ands	r3, r2
 80039e6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ee:	69da      	ldr	r2, [r3, #28]
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	f003 030f 	and.w	r3, r3, #15
 80039f8:	2101      	movs	r1, #1
 80039fa:	fa01 f303 	lsl.w	r3, r1, r3
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	43db      	mvns	r3, r3
 8003a02:	68f9      	ldr	r1, [r7, #12]
 8003a04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a08:	4013      	ands	r3, r2
 8003a0a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	015a      	lsls	r2, r3, #5
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	4413      	add	r3, r2
 8003a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	0159      	lsls	r1, r3, #5
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	440b      	add	r3, r1
 8003a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a26:	4619      	mov	r1, r3
 8003a28:	4b35      	ldr	r3, [pc, #212]	; (8003b00 <USB_DeactivateEndpoint+0x1b0>)
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	600b      	str	r3, [r1, #0]
 8003a2e:	e060      	b.n	8003af2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	015a      	lsls	r2, r3, #5
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	4413      	add	r3, r2
 8003a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a46:	d11f      	bne.n	8003a88 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	015a      	lsls	r2, r3, #5
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4413      	add	r3, r2
 8003a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	0151      	lsls	r1, r2, #5
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	440a      	add	r2, r1
 8003a5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a62:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a66:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	015a      	lsls	r2, r3, #5
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	4413      	add	r3, r2
 8003a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68ba      	ldr	r2, [r7, #8]
 8003a78:	0151      	lsls	r1, r2, #5
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	440a      	add	r2, r1
 8003a7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a86:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	f003 030f 	and.w	r3, r3, #15
 8003a98:	2101      	movs	r1, #1
 8003a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a9e:	041b      	lsls	r3, r3, #16
 8003aa0:	43db      	mvns	r3, r3
 8003aa2:	68f9      	ldr	r1, [r7, #12]
 8003aa4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ab2:	69da      	ldr	r2, [r3, #28]
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	f003 030f 	and.w	r3, r3, #15
 8003abc:	2101      	movs	r1, #1
 8003abe:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac2:	041b      	lsls	r3, r3, #16
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	68f9      	ldr	r1, [r7, #12]
 8003ac8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003acc:	4013      	ands	r3, r2
 8003ace:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	015a      	lsls	r2, r3, #5
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	0159      	lsls	r1, r3, #5
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	440b      	add	r3, r1
 8003ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aea:	4619      	mov	r1, r3
 8003aec:	4b05      	ldr	r3, [pc, #20]	; (8003b04 <USB_DeactivateEndpoint+0x1b4>)
 8003aee:	4013      	ands	r3, r2
 8003af0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3714      	adds	r7, #20
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr
 8003b00:	ec337800 	.word	0xec337800
 8003b04:	eff37800 	.word	0xeff37800

08003b08 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b08a      	sub	sp, #40	; 0x28
 8003b0c:	af02      	add	r7, sp, #8
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	4613      	mov	r3, r2
 8003b14:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	785b      	ldrb	r3, [r3, #1]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	f040 815c 	bne.w	8003de2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d132      	bne.n	8003b98 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	015a      	lsls	r2, r3, #5
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	4413      	add	r3, r2
 8003b3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	0151      	lsls	r1, r2, #5
 8003b44:	69fa      	ldr	r2, [r7, #28]
 8003b46:	440a      	add	r2, r1
 8003b48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b4c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b50:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	015a      	lsls	r2, r3, #5
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	0151      	lsls	r1, r2, #5
 8003b68:	69fa      	ldr	r2, [r7, #28]
 8003b6a:	440a      	add	r2, r1
 8003b6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	015a      	lsls	r2, r3, #5
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	0151      	lsls	r1, r2, #5
 8003b88:	69fa      	ldr	r2, [r7, #28]
 8003b8a:	440a      	add	r2, r1
 8003b8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b90:	0cdb      	lsrs	r3, r3, #19
 8003b92:	04db      	lsls	r3, r3, #19
 8003b94:	6113      	str	r3, [r2, #16]
 8003b96:	e074      	b.n	8003c82 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	015a      	lsls	r2, r3, #5
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	0151      	lsls	r1, r2, #5
 8003baa:	69fa      	ldr	r2, [r7, #28]
 8003bac:	440a      	add	r2, r1
 8003bae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bb2:	0cdb      	lsrs	r3, r3, #19
 8003bb4:	04db      	lsls	r3, r3, #19
 8003bb6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	015a      	lsls	r2, r3, #5
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	0151      	lsls	r1, r2, #5
 8003bca:	69fa      	ldr	r2, [r7, #28]
 8003bcc:	440a      	add	r2, r1
 8003bce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bd2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003bd6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003bda:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	015a      	lsls	r2, r3, #5
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	4413      	add	r3, r2
 8003be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003be8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	6959      	ldr	r1, [r3, #20]
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	440b      	add	r3, r1
 8003bf4:	1e59      	subs	r1, r3, #1
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bfe:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003c00:	4b9d      	ldr	r3, [pc, #628]	; (8003e78 <USB_EPStartXfer+0x370>)
 8003c02:	400b      	ands	r3, r1
 8003c04:	69b9      	ldr	r1, [r7, #24]
 8003c06:	0148      	lsls	r0, r1, #5
 8003c08:	69f9      	ldr	r1, [r7, #28]
 8003c0a:	4401      	add	r1, r0
 8003c0c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003c10:	4313      	orrs	r3, r2
 8003c12:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	015a      	lsls	r2, r3, #5
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c20:	691a      	ldr	r2, [r3, #16]
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c2a:	69b9      	ldr	r1, [r7, #24]
 8003c2c:	0148      	lsls	r0, r1, #5
 8003c2e:	69f9      	ldr	r1, [r7, #28]
 8003c30:	4401      	add	r1, r0
 8003c32:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003c36:	4313      	orrs	r3, r2
 8003c38:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	78db      	ldrb	r3, [r3, #3]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d11f      	bne.n	8003c82 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	015a      	lsls	r2, r3, #5
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	4413      	add	r3, r2
 8003c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	0151      	lsls	r1, r2, #5
 8003c54:	69fa      	ldr	r2, [r7, #28]
 8003c56:	440a      	add	r2, r1
 8003c58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c5c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003c60:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	015a      	lsls	r2, r3, #5
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	4413      	add	r3, r2
 8003c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	0151      	lsls	r1, r2, #5
 8003c74:	69fa      	ldr	r2, [r7, #28]
 8003c76:	440a      	add	r2, r1
 8003c78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c80:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003c82:	79fb      	ldrb	r3, [r7, #7]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d14b      	bne.n	8003d20 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d009      	beq.n	8003ca4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	015a      	lsls	r2, r3, #5
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	4413      	add	r3, r2
 8003c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	78db      	ldrb	r3, [r3, #3]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d128      	bne.n	8003cfe <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d110      	bne.n	8003cde <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	015a      	lsls	r2, r3, #5
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	0151      	lsls	r1, r2, #5
 8003cce:	69fa      	ldr	r2, [r7, #28]
 8003cd0:	440a      	add	r2, r1
 8003cd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cd6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003cda:	6013      	str	r3, [r2, #0]
 8003cdc:	e00f      	b.n	8003cfe <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	015a      	lsls	r2, r3, #5
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	0151      	lsls	r1, r2, #5
 8003cf0:	69fa      	ldr	r2, [r7, #28]
 8003cf2:	440a      	add	r2, r1
 8003cf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cfc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	015a      	lsls	r2, r3, #5
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	4413      	add	r3, r2
 8003d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	0151      	lsls	r1, r2, #5
 8003d10:	69fa      	ldr	r2, [r7, #28]
 8003d12:	440a      	add	r2, r1
 8003d14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d18:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003d1c:	6013      	str	r3, [r2, #0]
 8003d1e:	e12f      	b.n	8003f80 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	015a      	lsls	r2, r3, #5
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	4413      	add	r3, r2
 8003d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	0151      	lsls	r1, r2, #5
 8003d32:	69fa      	ldr	r2, [r7, #28]
 8003d34:	440a      	add	r2, r1
 8003d36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d3a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003d3e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	78db      	ldrb	r3, [r3, #3]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d015      	beq.n	8003d74 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 8117 	beq.w	8003f80 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	f003 030f 	and.w	r3, r3, #15
 8003d62:	2101      	movs	r1, #1
 8003d64:	fa01 f303 	lsl.w	r3, r1, r3
 8003d68:	69f9      	ldr	r1, [r7, #28]
 8003d6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	634b      	str	r3, [r1, #52]	; 0x34
 8003d72:	e105      	b.n	8003f80 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d110      	bne.n	8003da6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	015a      	lsls	r2, r3, #5
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	0151      	lsls	r1, r2, #5
 8003d96:	69fa      	ldr	r2, [r7, #28]
 8003d98:	440a      	add	r2, r1
 8003d9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d9e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003da2:	6013      	str	r3, [r2, #0]
 8003da4:	e00f      	b.n	8003dc6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	015a      	lsls	r2, r3, #5
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	4413      	add	r3, r2
 8003dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	0151      	lsls	r1, r2, #5
 8003db8:	69fa      	ldr	r2, [r7, #28]
 8003dba:	440a      	add	r2, r1
 8003dbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dc4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	68d9      	ldr	r1, [r3, #12]
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	781a      	ldrb	r2, [r3, #0]
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	b298      	uxth	r0, r3
 8003dd4:	79fb      	ldrb	r3, [r7, #7]
 8003dd6:	9300      	str	r3, [sp, #0]
 8003dd8:	4603      	mov	r3, r0
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f000 fa2b 	bl	8004236 <USB_WritePacket>
 8003de0:	e0ce      	b.n	8003f80 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	015a      	lsls	r2, r3, #5
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	4413      	add	r3, r2
 8003dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	0151      	lsls	r1, r2, #5
 8003df4:	69fa      	ldr	r2, [r7, #28]
 8003df6:	440a      	add	r2, r1
 8003df8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dfc:	0cdb      	lsrs	r3, r3, #19
 8003dfe:	04db      	lsls	r3, r3, #19
 8003e00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	015a      	lsls	r2, r3, #5
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	0151      	lsls	r1, r2, #5
 8003e14:	69fa      	ldr	r2, [r7, #28]
 8003e16:	440a      	add	r2, r1
 8003e18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e1c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e20:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e24:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d126      	bne.n	8003e7c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	015a      	lsls	r2, r3, #5
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	4413      	add	r3, r2
 8003e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e3a:	691a      	ldr	r2, [r3, #16]
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e44:	69b9      	ldr	r1, [r7, #24]
 8003e46:	0148      	lsls	r0, r1, #5
 8003e48:	69f9      	ldr	r1, [r7, #28]
 8003e4a:	4401      	add	r1, r0
 8003e4c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003e50:	4313      	orrs	r3, r2
 8003e52:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	015a      	lsls	r2, r3, #5
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	69ba      	ldr	r2, [r7, #24]
 8003e64:	0151      	lsls	r1, r2, #5
 8003e66:	69fa      	ldr	r2, [r7, #28]
 8003e68:	440a      	add	r2, r1
 8003e6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e72:	6113      	str	r3, [r2, #16]
 8003e74:	e036      	b.n	8003ee4 <USB_EPStartXfer+0x3dc>
 8003e76:	bf00      	nop
 8003e78:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	695a      	ldr	r2, [r3, #20]
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	4413      	add	r3, r2
 8003e86:	1e5a      	subs	r2, r3, #1
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e90:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	015a      	lsls	r2, r3, #5
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	4413      	add	r3, r2
 8003e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e9e:	691a      	ldr	r2, [r3, #16]
 8003ea0:	8afb      	ldrh	r3, [r7, #22]
 8003ea2:	04d9      	lsls	r1, r3, #19
 8003ea4:	4b39      	ldr	r3, [pc, #228]	; (8003f8c <USB_EPStartXfer+0x484>)
 8003ea6:	400b      	ands	r3, r1
 8003ea8:	69b9      	ldr	r1, [r7, #24]
 8003eaa:	0148      	lsls	r0, r1, #5
 8003eac:	69f9      	ldr	r1, [r7, #28]
 8003eae:	4401      	add	r1, r0
 8003eb0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	015a      	lsls	r2, r3, #5
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec4:	691a      	ldr	r2, [r3, #16]
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	8af9      	ldrh	r1, [r7, #22]
 8003ecc:	fb01 f303 	mul.w	r3, r1, r3
 8003ed0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ed4:	69b9      	ldr	r1, [r7, #24]
 8003ed6:	0148      	lsls	r0, r1, #5
 8003ed8:	69f9      	ldr	r1, [r7, #28]
 8003eda:	4401      	add	r1, r0
 8003edc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003ee4:	79fb      	ldrb	r3, [r7, #7]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d10d      	bne.n	8003f06 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d009      	beq.n	8003f06 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	68d9      	ldr	r1, [r3, #12]
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	015a      	lsls	r2, r3, #5
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	4413      	add	r3, r2
 8003efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f02:	460a      	mov	r2, r1
 8003f04:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	78db      	ldrb	r3, [r3, #3]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d128      	bne.n	8003f60 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d110      	bne.n	8003f40 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	015a      	lsls	r2, r3, #5
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	4413      	add	r3, r2
 8003f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	0151      	lsls	r1, r2, #5
 8003f30:	69fa      	ldr	r2, [r7, #28]
 8003f32:	440a      	add	r2, r1
 8003f34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f3c:	6013      	str	r3, [r2, #0]
 8003f3e:	e00f      	b.n	8003f60 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	015a      	lsls	r2, r3, #5
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	4413      	add	r3, r2
 8003f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	69ba      	ldr	r2, [r7, #24]
 8003f50:	0151      	lsls	r1, r2, #5
 8003f52:	69fa      	ldr	r2, [r7, #28]
 8003f54:	440a      	add	r2, r1
 8003f56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f5e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	015a      	lsls	r2, r3, #5
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	4413      	add	r3, r2
 8003f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	0151      	lsls	r1, r2, #5
 8003f72:	69fa      	ldr	r2, [r7, #28]
 8003f74:	440a      	add	r2, r1
 8003f76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3720      	adds	r7, #32
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	1ff80000 	.word	0x1ff80000

08003f90 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b087      	sub	sp, #28
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	785b      	ldrb	r3, [r3, #1]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	f040 80cd 	bne.w	800414c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d132      	bne.n	8004020 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	015a      	lsls	r2, r3, #5
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	0151      	lsls	r1, r2, #5
 8003fcc:	697a      	ldr	r2, [r7, #20]
 8003fce:	440a      	add	r2, r1
 8003fd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fd4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003fd8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003fdc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	015a      	lsls	r2, r3, #5
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	0151      	lsls	r1, r2, #5
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	440a      	add	r2, r1
 8003ff4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ff8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ffc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	015a      	lsls	r2, r3, #5
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	4413      	add	r3, r2
 8004006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	0151      	lsls	r1, r2, #5
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	440a      	add	r2, r1
 8004014:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004018:	0cdb      	lsrs	r3, r3, #19
 800401a:	04db      	lsls	r3, r3, #19
 800401c:	6113      	str	r3, [r2, #16]
 800401e:	e04e      	b.n	80040be <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	015a      	lsls	r2, r3, #5
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	4413      	add	r3, r2
 8004028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	0151      	lsls	r1, r2, #5
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	440a      	add	r2, r1
 8004036:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800403a:	0cdb      	lsrs	r3, r3, #19
 800403c:	04db      	lsls	r3, r3, #19
 800403e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	015a      	lsls	r2, r3, #5
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	4413      	add	r3, r2
 8004048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	0151      	lsls	r1, r2, #5
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	440a      	add	r2, r1
 8004056:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800405a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800405e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004062:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	695a      	ldr	r2, [r3, #20]
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	429a      	cmp	r2, r3
 800406e:	d903      	bls.n	8004078 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	689a      	ldr	r2, [r3, #8]
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	015a      	lsls	r2, r3, #5
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	4413      	add	r3, r2
 8004080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	0151      	lsls	r1, r2, #5
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	440a      	add	r2, r1
 800408e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004092:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004096:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	015a      	lsls	r2, r3, #5
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	4413      	add	r3, r2
 80040a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040a4:	691a      	ldr	r2, [r3, #16]
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040ae:	6939      	ldr	r1, [r7, #16]
 80040b0:	0148      	lsls	r0, r1, #5
 80040b2:	6979      	ldr	r1, [r7, #20]
 80040b4:	4401      	add	r1, r0
 80040b6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80040ba:	4313      	orrs	r3, r2
 80040bc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80040be:	79fb      	ldrb	r3, [r7, #7]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d11e      	bne.n	8004102 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d009      	beq.n	80040e0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	015a      	lsls	r2, r3, #5
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	4413      	add	r3, r2
 80040d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d8:	461a      	mov	r2, r3
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	0151      	lsls	r1, r2, #5
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	440a      	add	r2, r1
 80040f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80040fe:	6013      	str	r3, [r2, #0]
 8004100:	e092      	b.n	8004228 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	015a      	lsls	r2, r3, #5
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	4413      	add	r3, r2
 800410a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	0151      	lsls	r1, r2, #5
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	440a      	add	r2, r1
 8004118:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800411c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004120:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d07e      	beq.n	8004228 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004130:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	f003 030f 	and.w	r3, r3, #15
 800413a:	2101      	movs	r1, #1
 800413c:	fa01 f303 	lsl.w	r3, r1, r3
 8004140:	6979      	ldr	r1, [r7, #20]
 8004142:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004146:	4313      	orrs	r3, r2
 8004148:	634b      	str	r3, [r1, #52]	; 0x34
 800414a:	e06d      	b.n	8004228 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	015a      	lsls	r2, r3, #5
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	4413      	add	r3, r2
 8004154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	0151      	lsls	r1, r2, #5
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	440a      	add	r2, r1
 8004162:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004166:	0cdb      	lsrs	r3, r3, #19
 8004168:	04db      	lsls	r3, r3, #19
 800416a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	015a      	lsls	r2, r3, #5
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	4413      	add	r3, r2
 8004174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	0151      	lsls	r1, r2, #5
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	440a      	add	r2, r1
 8004182:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004186:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800418a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800418e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d003      	beq.n	80041a0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	689a      	ldr	r2, [r3, #8]
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	015a      	lsls	r2, r3, #5
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	4413      	add	r3, r2
 80041a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	0151      	lsls	r1, r2, #5
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	440a      	add	r2, r1
 80041b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	015a      	lsls	r2, r3, #5
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	4413      	add	r3, r2
 80041c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041cc:	691a      	ldr	r2, [r3, #16]
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041d6:	6939      	ldr	r1, [r7, #16]
 80041d8:	0148      	lsls	r0, r1, #5
 80041da:	6979      	ldr	r1, [r7, #20]
 80041dc:	4401      	add	r1, r0
 80041de:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80041e2:	4313      	orrs	r3, r2
 80041e4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80041e6:	79fb      	ldrb	r3, [r7, #7]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d10d      	bne.n	8004208 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d009      	beq.n	8004208 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	68d9      	ldr	r1, [r3, #12]
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	015a      	lsls	r2, r3, #5
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	4413      	add	r3, r2
 8004200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004204:	460a      	mov	r2, r1
 8004206:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	015a      	lsls	r2, r3, #5
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	4413      	add	r3, r2
 8004210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	0151      	lsls	r1, r2, #5
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	440a      	add	r2, r1
 800421e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004222:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004226:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	371c      	adds	r7, #28
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004236:	b480      	push	{r7}
 8004238:	b089      	sub	sp, #36	; 0x24
 800423a:	af00      	add	r7, sp, #0
 800423c:	60f8      	str	r0, [r7, #12]
 800423e:	60b9      	str	r1, [r7, #8]
 8004240:	4611      	mov	r1, r2
 8004242:	461a      	mov	r2, r3
 8004244:	460b      	mov	r3, r1
 8004246:	71fb      	strb	r3, [r7, #7]
 8004248:	4613      	mov	r3, r2
 800424a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004254:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004258:	2b00      	cmp	r3, #0
 800425a:	d123      	bne.n	80042a4 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800425c:	88bb      	ldrh	r3, [r7, #4]
 800425e:	3303      	adds	r3, #3
 8004260:	089b      	lsrs	r3, r3, #2
 8004262:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004264:	2300      	movs	r3, #0
 8004266:	61bb      	str	r3, [r7, #24]
 8004268:	e018      	b.n	800429c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800426a:	79fb      	ldrb	r3, [r7, #7]
 800426c:	031a      	lsls	r2, r3, #12
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	4413      	add	r3, r2
 8004272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004276:	461a      	mov	r2, r3
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	3301      	adds	r3, #1
 8004282:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	3301      	adds	r3, #1
 8004288:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	3301      	adds	r3, #1
 800428e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	3301      	adds	r3, #1
 8004294:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	3301      	adds	r3, #1
 800429a:	61bb      	str	r3, [r7, #24]
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d3e2      	bcc.n	800426a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3724      	adds	r7, #36	; 0x24
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr

080042b2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80042b2:	b480      	push	{r7}
 80042b4:	b08b      	sub	sp, #44	; 0x2c
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	60f8      	str	r0, [r7, #12]
 80042ba:	60b9      	str	r1, [r7, #8]
 80042bc:	4613      	mov	r3, r2
 80042be:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80042c8:	88fb      	ldrh	r3, [r7, #6]
 80042ca:	089b      	lsrs	r3, r3, #2
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80042d0:	88fb      	ldrh	r3, [r7, #6]
 80042d2:	f003 0303 	and.w	r3, r3, #3
 80042d6:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80042d8:	2300      	movs	r3, #0
 80042da:	623b      	str	r3, [r7, #32]
 80042dc:	e014      	b.n	8004308 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e8:	601a      	str	r2, [r3, #0]
    pDest++;
 80042ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ec:	3301      	adds	r3, #1
 80042ee:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80042f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f2:	3301      	adds	r3, #1
 80042f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80042f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f8:	3301      	adds	r3, #1
 80042fa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80042fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fe:	3301      	adds	r3, #1
 8004300:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004302:	6a3b      	ldr	r3, [r7, #32]
 8004304:	3301      	adds	r3, #1
 8004306:	623b      	str	r3, [r7, #32]
 8004308:	6a3a      	ldr	r2, [r7, #32]
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	429a      	cmp	r2, r3
 800430e:	d3e6      	bcc.n	80042de <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004310:	8bfb      	ldrh	r3, [r7, #30]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d01e      	beq.n	8004354 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004316:	2300      	movs	r3, #0
 8004318:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004320:	461a      	mov	r2, r3
 8004322:	f107 0310 	add.w	r3, r7, #16
 8004326:	6812      	ldr	r2, [r2, #0]
 8004328:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	6a3b      	ldr	r3, [r7, #32]
 800432e:	b2db      	uxtb	r3, r3
 8004330:	00db      	lsls	r3, r3, #3
 8004332:	fa22 f303 	lsr.w	r3, r2, r3
 8004336:	b2da      	uxtb	r2, r3
 8004338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433a:	701a      	strb	r2, [r3, #0]
      i++;
 800433c:	6a3b      	ldr	r3, [r7, #32]
 800433e:	3301      	adds	r3, #1
 8004340:	623b      	str	r3, [r7, #32]
      pDest++;
 8004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004344:	3301      	adds	r3, #1
 8004346:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004348:	8bfb      	ldrh	r3, [r7, #30]
 800434a:	3b01      	subs	r3, #1
 800434c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800434e:	8bfb      	ldrh	r3, [r7, #30]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1ea      	bne.n	800432a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004356:	4618      	mov	r0, r3
 8004358:	372c      	adds	r7, #44	; 0x2c
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr

08004362 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004362:	b480      	push	{r7}
 8004364:	b085      	sub	sp, #20
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
 800436a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	785b      	ldrb	r3, [r3, #1]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d12c      	bne.n	80043d8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	015a      	lsls	r2, r3, #5
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	4413      	add	r3, r2
 8004386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	db12      	blt.n	80043b6 <USB_EPSetStall+0x54>
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00f      	beq.n	80043b6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	015a      	lsls	r2, r3, #5
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	4413      	add	r3, r2
 800439e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	0151      	lsls	r1, r2, #5
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	440a      	add	r2, r1
 80043ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80043b4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	015a      	lsls	r2, r3, #5
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	4413      	add	r3, r2
 80043be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68ba      	ldr	r2, [r7, #8]
 80043c6:	0151      	lsls	r1, r2, #5
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	440a      	add	r2, r1
 80043cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80043d4:	6013      	str	r3, [r2, #0]
 80043d6:	e02b      	b.n	8004430 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	015a      	lsls	r2, r3, #5
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	4413      	add	r3, r2
 80043e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	db12      	blt.n	8004410 <USB_EPSetStall+0xae>
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00f      	beq.n	8004410 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	015a      	lsls	r2, r3, #5
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	4413      	add	r3, r2
 80043f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	0151      	lsls	r1, r2, #5
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	440a      	add	r2, r1
 8004406:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800440a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800440e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	015a      	lsls	r2, r3, #5
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	4413      	add	r3, r2
 8004418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68ba      	ldr	r2, [r7, #8]
 8004420:	0151      	lsls	r1, r2, #5
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	440a      	add	r2, r1
 8004426:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800442a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800442e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3714      	adds	r7, #20
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr

0800443e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800443e:	b480      	push	{r7}
 8004440:	b085      	sub	sp, #20
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
 8004446:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	785b      	ldrb	r3, [r3, #1]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d128      	bne.n	80044ac <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	015a      	lsls	r2, r3, #5
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	4413      	add	r3, r2
 8004462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68ba      	ldr	r2, [r7, #8]
 800446a:	0151      	lsls	r1, r2, #5
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	440a      	add	r2, r1
 8004470:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004474:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004478:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	78db      	ldrb	r3, [r3, #3]
 800447e:	2b03      	cmp	r3, #3
 8004480:	d003      	beq.n	800448a <USB_EPClearStall+0x4c>
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	78db      	ldrb	r3, [r3, #3]
 8004486:	2b02      	cmp	r3, #2
 8004488:	d138      	bne.n	80044fc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	015a      	lsls	r2, r3, #5
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	4413      	add	r3, r2
 8004492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68ba      	ldr	r2, [r7, #8]
 800449a:	0151      	lsls	r1, r2, #5
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	440a      	add	r2, r1
 80044a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a8:	6013      	str	r3, [r2, #0]
 80044aa:	e027      	b.n	80044fc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	015a      	lsls	r2, r3, #5
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	4413      	add	r3, r2
 80044b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	0151      	lsls	r1, r2, #5
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	440a      	add	r2, r1
 80044c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80044ca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	78db      	ldrb	r3, [r3, #3]
 80044d0:	2b03      	cmp	r3, #3
 80044d2:	d003      	beq.n	80044dc <USB_EPClearStall+0x9e>
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	78db      	ldrb	r3, [r3, #3]
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d10f      	bne.n	80044fc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	015a      	lsls	r2, r3, #5
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	4413      	add	r3, r2
 80044e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68ba      	ldr	r2, [r7, #8]
 80044ec:	0151      	lsls	r1, r2, #5
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	440a      	add	r2, r1
 80044f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044fa:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3714      	adds	r7, #20
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr

0800450a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800450a:	b480      	push	{r7}
 800450c:	b085      	sub	sp, #20
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
 8004512:	460b      	mov	r3, r1
 8004514:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004528:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800452c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	78fb      	ldrb	r3, [r7, #3]
 8004538:	011b      	lsls	r3, r3, #4
 800453a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800453e:	68f9      	ldr	r1, [r7, #12]
 8004540:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004544:	4313      	orrs	r3, r2
 8004546:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr

08004556 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004556:	b480      	push	{r7}
 8004558:	b085      	sub	sp, #20
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004570:	f023 0303 	bic.w	r3, r3, #3
 8004574:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004584:	f023 0302 	bic.w	r3, r3, #2
 8004588:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3714      	adds	r7, #20
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80045b2:	f023 0303 	bic.w	r3, r3, #3
 80045b6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045c6:	f043 0302 	orr.w	r3, r3, #2
 80045ca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3714      	adds	r7, #20
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80045da:	b480      	push	{r7}
 80045dc:	b085      	sub	sp, #20
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	4013      	ands	r3, r2
 80045f0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80045f2:	68fb      	ldr	r3, [r7, #12]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3714      	adds	r7, #20
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004612:	699b      	ldr	r3, [r3, #24]
 8004614:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	68ba      	ldr	r2, [r7, #8]
 8004620:	4013      	ands	r3, r2
 8004622:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	0c1b      	lsrs	r3, r3, #16
}
 8004628:	4618      	mov	r0, r3
 800462a:	3714      	adds	r7, #20
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	68ba      	ldr	r2, [r7, #8]
 8004654:	4013      	ands	r3, r2
 8004656:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	b29b      	uxth	r3, r3
}
 800465c:	4618      	mov	r0, r3
 800465e:	3714      	adds	r7, #20
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	460b      	mov	r3, r1
 8004672:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004678:	78fb      	ldrb	r3, [r7, #3]
 800467a:	015a      	lsls	r2, r3, #5
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4413      	add	r3, r2
 8004680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800468e:	695b      	ldr	r3, [r3, #20]
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	4013      	ands	r3, r2
 8004694:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004696:	68bb      	ldr	r3, [r7, #8]
}
 8004698:	4618      	mov	r0, r3
 800469a:	3714      	adds	r7, #20
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b087      	sub	sp, #28
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	460b      	mov	r3, r1
 80046ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80046c8:	78fb      	ldrb	r3, [r7, #3]
 80046ca:	f003 030f 	and.w	r3, r3, #15
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	fa22 f303 	lsr.w	r3, r2, r3
 80046d4:	01db      	lsls	r3, r3, #7
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	4313      	orrs	r3, r2
 80046dc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80046de:	78fb      	ldrb	r3, [r7, #3]
 80046e0:	015a      	lsls	r2, r3, #5
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	4413      	add	r3, r2
 80046e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	4013      	ands	r3, r2
 80046f0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80046f2:	68bb      	ldr	r3, [r7, #8]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	371c      	adds	r7, #28
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	695b      	ldr	r3, [r3, #20]
 800470c:	f003 0301 	and.w	r3, r3, #1
}
 8004710:	4618      	mov	r0, r3
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004736:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800473a:	f023 0307 	bic.w	r3, r3, #7
 800473e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800474e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004752:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3714      	adds	r7, #20
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
	...

08004764 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004764:	b480      	push	{r7}
 8004766:	b087      	sub	sp, #28
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	460b      	mov	r3, r1
 800476e:	607a      	str	r2, [r7, #4]
 8004770:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	333c      	adds	r3, #60	; 0x3c
 800477a:	3304      	adds	r3, #4
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	4a26      	ldr	r2, [pc, #152]	; (800481c <USB_EP0_OutStart+0xb8>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d90a      	bls.n	800479e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004794:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004798:	d101      	bne.n	800479e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800479a:	2300      	movs	r3, #0
 800479c:	e037      	b.n	800480e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a4:	461a      	mov	r2, r3
 80047a6:	2300      	movs	r3, #0
 80047a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	697a      	ldr	r2, [r7, #20]
 80047b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047cc:	f043 0318 	orr.w	r3, r3, #24
 80047d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047e0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80047e4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80047e6:	7afb      	ldrb	r3, [r7, #11]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d10f      	bne.n	800480c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f2:	461a      	mov	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	697a      	ldr	r2, [r7, #20]
 8004802:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004806:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800480a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	371c      	adds	r7, #28
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	4f54300a 	.word	0x4f54300a

08004820 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004828:	2300      	movs	r3, #0
 800482a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	3301      	adds	r3, #1
 8004830:	60fb      	str	r3, [r7, #12]
 8004832:	4a13      	ldr	r2, [pc, #76]	; (8004880 <USB_CoreReset+0x60>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d901      	bls.n	800483c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e01a      	b.n	8004872 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	2b00      	cmp	r3, #0
 8004842:	daf3      	bge.n	800482c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	f043 0201 	orr.w	r2, r3, #1
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	3301      	adds	r3, #1
 8004858:	60fb      	str	r3, [r7, #12]
 800485a:	4a09      	ldr	r2, [pc, #36]	; (8004880 <USB_CoreReset+0x60>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d901      	bls.n	8004864 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e006      	b.n	8004872 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	2b01      	cmp	r3, #1
 800486e:	d0f1      	beq.n	8004854 <USB_CoreReset+0x34>

  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3714      	adds	r7, #20
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	00030d40 	.word	0x00030d40

08004884 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	460b      	mov	r3, r1
 800488e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8004890:	2010      	movs	r0, #16
 8004892:	f001 ff2f 	bl	80066f4 <USBD_static_malloc>
 8004896:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d105      	bne.n	80048aa <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80048a6:	2302      	movs	r3, #2
 80048a8:	e01b      	b.n	80048e2 <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	7c1b      	ldrb	r3, [r3, #16]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d103      	bne.n	80048c2 <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2207      	movs	r2, #7
 80048be:	875a      	strh	r2, [r3, #58]	; 0x3a
 80048c0:	e002      	b.n	80048c8 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	220a      	movs	r2, #10
 80048c6:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80048c8:	2304      	movs	r3, #4
 80048ca:	2203      	movs	r2, #3
 80048cc:	2181      	movs	r1, #129	; 0x81
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f001 fdff 	bl	80064d2 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3710      	adds	r7, #16
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}

080048ea <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b082      	sub	sp, #8
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
 80048f2:	460b      	mov	r3, r1
 80048f4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80048f6:	2181      	movs	r1, #129	; 0x81
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f001 fe10 	bl	800651e <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004910:	2b00      	cmp	r3, #0
 8004912:	d009      	beq.n	8004928 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800491a:	4618      	mov	r0, r3
 800491c:	f001 fef8 	bl	8006710 <USBD_static_free>
    pdev->pClassData = NULL;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3708      	adds	r7, #8
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
	...

08004934 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004944:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8004946:	2300      	movs	r3, #0
 8004948:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800494a:	2300      	movs	r3, #0
 800494c:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d101      	bne.n	8004958 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004954:	2303      	movs	r3, #3
 8004956:	e0e8      	b.n	8004b2a <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004960:	2b00      	cmp	r3, #0
 8004962:	d046      	beq.n	80049f2 <USBD_HID_Setup+0xbe>
 8004964:	2b20      	cmp	r3, #32
 8004966:	f040 80d8 	bne.w	8004b1a <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	785b      	ldrb	r3, [r3, #1]
 800496e:	3b02      	subs	r3, #2
 8004970:	2b09      	cmp	r3, #9
 8004972:	d836      	bhi.n	80049e2 <USBD_HID_Setup+0xae>
 8004974:	a201      	add	r2, pc, #4	; (adr r2, 800497c <USBD_HID_Setup+0x48>)
 8004976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497a:	bf00      	nop
 800497c:	080049d3 	.word	0x080049d3
 8004980:	080049b3 	.word	0x080049b3
 8004984:	080049e3 	.word	0x080049e3
 8004988:	080049e3 	.word	0x080049e3
 800498c:	080049e3 	.word	0x080049e3
 8004990:	080049e3 	.word	0x080049e3
 8004994:	080049e3 	.word	0x080049e3
 8004998:	080049e3 	.word	0x080049e3
 800499c:	080049c1 	.word	0x080049c1
 80049a0:	080049a5 	.word	0x080049a5
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	885b      	ldrh	r3, [r3, #2]
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	461a      	mov	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	601a      	str	r2, [r3, #0]
          break;
 80049b0:	e01e      	b.n	80049f0 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2201      	movs	r2, #1
 80049b6:	4619      	mov	r1, r3
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f001 fa36 	bl	8005e2a <USBD_CtlSendData>
          break;
 80049be:	e017      	b.n	80049f0 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	885b      	ldrh	r3, [r3, #2]
 80049c4:	0a1b      	lsrs	r3, r3, #8
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	461a      	mov	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	605a      	str	r2, [r3, #4]
          break;
 80049d0:	e00e      	b.n	80049f0 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	3304      	adds	r3, #4
 80049d6:	2201      	movs	r2, #1
 80049d8:	4619      	mov	r1, r3
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f001 fa25 	bl	8005e2a <USBD_CtlSendData>
          break;
 80049e0:	e006      	b.n	80049f0 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80049e2:	6839      	ldr	r1, [r7, #0]
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f001 f9af 	bl	8005d48 <USBD_CtlError>
          ret = USBD_FAIL;
 80049ea:	2303      	movs	r3, #3
 80049ec:	75fb      	strb	r3, [r7, #23]
          break;
 80049ee:	bf00      	nop
      }
      break;
 80049f0:	e09a      	b.n	8004b28 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	785b      	ldrb	r3, [r3, #1]
 80049f6:	2b0b      	cmp	r3, #11
 80049f8:	f200 8086 	bhi.w	8004b08 <USBD_HID_Setup+0x1d4>
 80049fc:	a201      	add	r2, pc, #4	; (adr r2, 8004a04 <USBD_HID_Setup+0xd0>)
 80049fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a02:	bf00      	nop
 8004a04:	08004a35 	.word	0x08004a35
 8004a08:	08004b17 	.word	0x08004b17
 8004a0c:	08004b09 	.word	0x08004b09
 8004a10:	08004b09 	.word	0x08004b09
 8004a14:	08004b09 	.word	0x08004b09
 8004a18:	08004b09 	.word	0x08004b09
 8004a1c:	08004a5f 	.word	0x08004a5f
 8004a20:	08004b09 	.word	0x08004b09
 8004a24:	08004b09 	.word	0x08004b09
 8004a28:	08004b09 	.word	0x08004b09
 8004a2c:	08004ab7 	.word	0x08004ab7
 8004a30:	08004ae1 	.word	0x08004ae1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b03      	cmp	r3, #3
 8004a3e:	d107      	bne.n	8004a50 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004a40:	f107 030a 	add.w	r3, r7, #10
 8004a44:	2202      	movs	r2, #2
 8004a46:	4619      	mov	r1, r3
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f001 f9ee 	bl	8005e2a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004a4e:	e063      	b.n	8004b18 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8004a50:	6839      	ldr	r1, [r7, #0]
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f001 f978 	bl	8005d48 <USBD_CtlError>
            ret = USBD_FAIL;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	75fb      	strb	r3, [r7, #23]
          break;
 8004a5c:	e05c      	b.n	8004b18 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	885b      	ldrh	r3, [r3, #2]
 8004a62:	0a1b      	lsrs	r3, r3, #8
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	2b22      	cmp	r3, #34	; 0x22
 8004a68:	d108      	bne.n	8004a7c <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	88db      	ldrh	r3, [r3, #6]
 8004a6e:	2b65      	cmp	r3, #101	; 0x65
 8004a70:	bf28      	it	cs
 8004a72:	2365      	movcs	r3, #101	; 0x65
 8004a74:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8004a76:	4b2f      	ldr	r3, [pc, #188]	; (8004b34 <USBD_HID_Setup+0x200>)
 8004a78:	613b      	str	r3, [r7, #16]
 8004a7a:	e015      	b.n	8004aa8 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	885b      	ldrh	r3, [r3, #2]
 8004a80:	0a1b      	lsrs	r3, r3, #8
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	2b21      	cmp	r3, #33	; 0x21
 8004a86:	d108      	bne.n	8004a9a <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 8004a88:	4b2b      	ldr	r3, [pc, #172]	; (8004b38 <USBD_HID_Setup+0x204>)
 8004a8a:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	88db      	ldrh	r3, [r3, #6]
 8004a90:	2b09      	cmp	r3, #9
 8004a92:	bf28      	it	cs
 8004a94:	2309      	movcs	r3, #9
 8004a96:	82bb      	strh	r3, [r7, #20]
 8004a98:	e006      	b.n	8004aa8 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8004a9a:	6839      	ldr	r1, [r7, #0]
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f001 f953 	bl	8005d48 <USBD_CtlError>
            ret = USBD_FAIL;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	75fb      	strb	r3, [r7, #23]
            break;
 8004aa6:	e037      	b.n	8004b18 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8004aa8:	8abb      	ldrh	r3, [r7, #20]
 8004aaa:	461a      	mov	r2, r3
 8004aac:	6939      	ldr	r1, [r7, #16]
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f001 f9bb 	bl	8005e2a <USBD_CtlSendData>
          break;
 8004ab4:	e030      	b.n	8004b18 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b03      	cmp	r3, #3
 8004ac0:	d107      	bne.n	8004ad2 <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	3308      	adds	r3, #8
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	4619      	mov	r1, r3
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f001 f9ad 	bl	8005e2a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004ad0:	e022      	b.n	8004b18 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8004ad2:	6839      	ldr	r1, [r7, #0]
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f001 f937 	bl	8005d48 <USBD_CtlError>
            ret = USBD_FAIL;
 8004ada:	2303      	movs	r3, #3
 8004adc:	75fb      	strb	r3, [r7, #23]
          break;
 8004ade:	e01b      	b.n	8004b18 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b03      	cmp	r3, #3
 8004aea:	d106      	bne.n	8004afa <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	885b      	ldrh	r3, [r3, #2]
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	461a      	mov	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004af8:	e00e      	b.n	8004b18 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8004afa:	6839      	ldr	r1, [r7, #0]
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f001 f923 	bl	8005d48 <USBD_CtlError>
            ret = USBD_FAIL;
 8004b02:	2303      	movs	r3, #3
 8004b04:	75fb      	strb	r3, [r7, #23]
          break;
 8004b06:	e007      	b.n	8004b18 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004b08:	6839      	ldr	r1, [r7, #0]
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f001 f91c 	bl	8005d48 <USBD_CtlError>
          ret = USBD_FAIL;
 8004b10:	2303      	movs	r3, #3
 8004b12:	75fb      	strb	r3, [r7, #23]
          break;
 8004b14:	e000      	b.n	8004b18 <USBD_HID_Setup+0x1e4>
          break;
 8004b16:	bf00      	nop
      }
      break;
 8004b18:	e006      	b.n	8004b28 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 8004b1a:	6839      	ldr	r1, [r7, #0]
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f001 f913 	bl	8005d48 <USBD_CtlError>
      ret = USBD_FAIL;
 8004b22:	2303      	movs	r3, #3
 8004b24:	75fb      	strb	r3, [r7, #23]
      break;
 8004b26:	bf00      	nop
  }

  return (uint8_t)ret;
 8004b28:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3718      	adds	r7, #24
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	200000c8 	.word	0x200000c8
 8004b38:	200000b0 	.word	0x200000b0

08004b3c <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b086      	sub	sp, #24
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	4613      	mov	r3, r2
 8004b48:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b50:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d101      	bne.n	8004b5c <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e013      	b.n	8004b84 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	2b03      	cmp	r3, #3
 8004b66:	d10c      	bne.n	8004b82 <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	7b1b      	ldrb	r3, [r3, #12]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d108      	bne.n	8004b82 <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	2201      	movs	r2, #1
 8004b74:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8004b76:	88fb      	ldrh	r3, [r7, #6]
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	2181      	movs	r1, #129	; 0x81
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	f001 fd76 	bl	800666e <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3718      	adds	r7, #24
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <USBD_HID_GetPollingInterval>:
  *         return polling interval from endpoint descriptor
  * @param  pdev: device instance
  * @retval polling interval
  */
uint32_t USBD_HID_GetPollingInterval(USBD_HandleTypeDef *pdev)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  uint32_t polling_interval;

  /* HIGH-speed endpoints */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	7c1b      	ldrb	r3, [r3, #16]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d102      	bne.n	8004ba2 <USBD_HID_GetPollingInterval+0x16>
  {
    /* Sets the data transfer polling interval for high speed transfers.
     Values between 1..16 are allowed. Values correspond to interval
     of 2 ^ (bInterval-1). This option (8 ms, corresponds to HID_HS_BINTERVAL */
    polling_interval = (((1U << (HID_HS_BINTERVAL - 1U))) / 8U);
 8004b9c:	2308      	movs	r3, #8
 8004b9e:	60fb      	str	r3, [r7, #12]
 8004ba0:	e001      	b.n	8004ba6 <USBD_HID_GetPollingInterval+0x1a>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    /* Sets the data transfer polling interval for low and full
    speed transfers */
    polling_interval =  HID_FS_BINTERVAL;
 8004ba2:	230a      	movs	r3, #10
 8004ba4:	60fb      	str	r3, [r7, #12]
  }

  return ((uint32_t)(polling_interval));
 8004ba6:	68fb      	ldr	r3, [r7, #12]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3714      	adds	r7, #20
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2222      	movs	r2, #34	; 0x22
 8004bc0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8004bc2:	4b03      	ldr	r3, [pc, #12]	; (8004bd0 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr
 8004bd0:	20000044 	.word	0x20000044

08004bd4 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2222      	movs	r2, #34	; 0x22
 8004be0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8004be2:	4b03      	ldr	r3, [pc, #12]	; (8004bf0 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr
 8004bf0:	20000068 	.word	0x20000068

08004bf4 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2222      	movs	r2, #34	; 0x22
 8004c00:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8004c02:	4b03      	ldr	r3, [pc, #12]	; (8004c10 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	2000008c 	.word	0x2000008c

08004c14 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c26:	2200      	movs	r2, #0
 8004c28:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	220a      	movs	r2, #10
 8004c44:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8004c46:	4b03      	ldr	r3, [pc, #12]	; (8004c54 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr
 8004c54:	200000bc 	.word	0x200000bc

08004c58 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b086      	sub	sp, #24
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	4613      	mov	r3, r2
 8004c64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d101      	bne.n	8004c70 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e01f      	b.n	8004cb0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d003      	beq.n	8004c96 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	79fa      	ldrb	r2, [r7, #7]
 8004ca2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f001 fbad 	bl	8006404 <USBD_LL_Init>
 8004caa:	4603      	mov	r3, r0
 8004cac:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3718      	adds	r7, #24
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d101      	bne.n	8004cd0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e016      	b.n	8004cfe <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	683a      	ldr	r2, [r7, #0]
 8004cd4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00b      	beq.n	8004cfc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cec:	f107 020e 	add.w	r2, r7, #14
 8004cf0:	4610      	mov	r0, r2
 8004cf2:	4798      	blx	r3
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b082      	sub	sp, #8
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f001 fbc4 	bl	800649c <USBD_LL_Start>
 8004d14:	4603      	mov	r3, r0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3708      	adds	r7, #8
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b083      	sub	sp, #12
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004d40:	2303      	movs	r3, #3
 8004d42:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d009      	beq.n	8004d62 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	78fa      	ldrb	r2, [r7, #3]
 8004d58:	4611      	mov	r1, r2
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	4798      	blx	r3
 8004d5e:	4603      	mov	r3, r0
 8004d60:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	460b      	mov	r3, r1
 8004d76:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d007      	beq.n	8004d92 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	78fa      	ldrb	r2, [r7, #3]
 8004d8c:	4611      	mov	r1, r2
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	4798      	blx	r3
  }

  return USBD_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3708      	adds	r7, #8
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004dac:	6839      	ldr	r1, [r7, #0]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f000 ff90 	bl	8005cd4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004dd0:	f003 031f 	and.w	r3, r3, #31
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d01a      	beq.n	8004e0e <USBD_LL_SetupStage+0x72>
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d822      	bhi.n	8004e22 <USBD_LL_SetupStage+0x86>
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d002      	beq.n	8004de6 <USBD_LL_SetupStage+0x4a>
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d00a      	beq.n	8004dfa <USBD_LL_SetupStage+0x5e>
 8004de4:	e01d      	b.n	8004e22 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004dec:	4619      	mov	r1, r3
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 fa62 	bl	80052b8 <USBD_StdDevReq>
 8004df4:	4603      	mov	r3, r0
 8004df6:	73fb      	strb	r3, [r7, #15]
      break;
 8004df8:	e020      	b.n	8004e3c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004e00:	4619      	mov	r1, r3
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 fac6 	bl	8005394 <USBD_StdItfReq>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e0c:	e016      	b.n	8004e3c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004e14:	4619      	mov	r1, r3
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 fb05 	bl	8005426 <USBD_StdEPReq>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e20:	e00c      	b.n	8004e3c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004e28:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	4619      	mov	r1, r3
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f001 fb93 	bl	800655c <USBD_LL_StallEP>
 8004e36:	4603      	mov	r3, r0
 8004e38:	73fb      	strb	r3, [r7, #15]
      break;
 8004e3a:	bf00      	nop
  }

  return ret;
 8004e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}

08004e46 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b086      	sub	sp, #24
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	60f8      	str	r0, [r7, #12]
 8004e4e:	460b      	mov	r3, r1
 8004e50:	607a      	str	r2, [r7, #4]
 8004e52:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004e54:	7afb      	ldrb	r3, [r7, #11]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d138      	bne.n	8004ecc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004e60:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004e68:	2b03      	cmp	r3, #3
 8004e6a:	d14a      	bne.n	8004f02 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	689a      	ldr	r2, [r3, #8]
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d913      	bls.n	8004ea0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	689a      	ldr	r2, [r3, #8]
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	1ad2      	subs	r2, r2, r3
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	68da      	ldr	r2, [r3, #12]
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	bf28      	it	cs
 8004e92:	4613      	movcs	r3, r2
 8004e94:	461a      	mov	r2, r3
 8004e96:	6879      	ldr	r1, [r7, #4]
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f000 fff2 	bl	8005e82 <USBD_CtlContinueRx>
 8004e9e:	e030      	b.n	8004f02 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	2b03      	cmp	r3, #3
 8004eaa:	d10b      	bne.n	8004ec4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d005      	beq.n	8004ec4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004ec4:	68f8      	ldr	r0, [r7, #12]
 8004ec6:	f000 ffed 	bl	8005ea4 <USBD_CtlSendStatus>
 8004eca:	e01a      	b.n	8004f02 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	2b03      	cmp	r3, #3
 8004ed6:	d114      	bne.n	8004f02 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00e      	beq.n	8004f02 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	7afa      	ldrb	r2, [r7, #11]
 8004eee:	4611      	mov	r1, r2
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	4798      	blx	r3
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004ef8:	7dfb      	ldrb	r3, [r7, #23]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d001      	beq.n	8004f02 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8004efe:	7dfb      	ldrb	r3, [r7, #23]
 8004f00:	e000      	b.n	8004f04 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3718      	adds	r7, #24
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	460b      	mov	r3, r1
 8004f16:	607a      	str	r2, [r7, #4]
 8004f18:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004f1a:	7afb      	ldrb	r3, [r7, #11]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d16b      	bne.n	8004ff8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	3314      	adds	r3, #20
 8004f24:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d156      	bne.n	8004fde <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	689a      	ldr	r2, [r3, #8]
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d914      	bls.n	8004f66 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	689a      	ldr	r2, [r3, #8]
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	1ad2      	subs	r2, r2, r3
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	461a      	mov	r2, r3
 8004f50:	6879      	ldr	r1, [r7, #4]
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f000 ff84 	bl	8005e60 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004f58:	2300      	movs	r3, #0
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f001 fba6 	bl	80066b0 <USBD_LL_PrepareReceive>
 8004f64:	e03b      	b.n	8004fde <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	68da      	ldr	r2, [r3, #12]
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d11c      	bne.n	8004fac <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d316      	bcc.n	8004fac <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d20f      	bcs.n	8004fac <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	2100      	movs	r1, #0
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f000 ff65 	bl	8005e60 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	2100      	movs	r1, #0
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f001 fb83 	bl	80066b0 <USBD_LL_PrepareReceive>
 8004faa:	e018      	b.n	8004fde <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	2b03      	cmp	r3, #3
 8004fb6:	d10b      	bne.n	8004fd0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d005      	beq.n	8004fd0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004fd0:	2180      	movs	r1, #128	; 0x80
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f001 fac2 	bl	800655c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f000 ff76 	bl	8005eca <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d122      	bne.n	800502e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	f7ff fe98 	bl	8004d1e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004ff6:	e01a      	b.n	800502e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	2b03      	cmp	r3, #3
 8005002:	d114      	bne.n	800502e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800500a:	695b      	ldr	r3, [r3, #20]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00e      	beq.n	800502e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005016:	695b      	ldr	r3, [r3, #20]
 8005018:	7afa      	ldrb	r2, [r7, #11]
 800501a:	4611      	mov	r1, r2
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	4798      	blx	r3
 8005020:	4603      	mov	r3, r0
 8005022:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005024:	7dfb      	ldrb	r3, [r7, #23]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d001      	beq.n	800502e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800502a:	7dfb      	ldrb	r3, [r7, #23]
 800502c:	e000      	b.n	8005030 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3718      	adds	r7, #24
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005064:	2b00      	cmp	r3, #0
 8005066:	d101      	bne.n	800506c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005068:	2303      	movs	r3, #3
 800506a:	e02f      	b.n	80050cc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00f      	beq.n	8005096 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d009      	beq.n	8005096 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	6852      	ldr	r2, [r2, #4]
 800508e:	b2d2      	uxtb	r2, r2
 8005090:	4611      	mov	r1, r2
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005096:	2340      	movs	r3, #64	; 0x40
 8005098:	2200      	movs	r2, #0
 800509a:	2100      	movs	r1, #0
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f001 fa18 	bl	80064d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2240      	movs	r2, #64	; 0x40
 80050ae:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80050b2:	2340      	movs	r3, #64	; 0x40
 80050b4:	2200      	movs	r2, #0
 80050b6:	2180      	movs	r1, #128	; 0x80
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f001 fa0a 	bl	80064d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2201      	movs	r2, #1
 80050c2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2240      	movs	r2, #64	; 0x40
 80050c8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3708      	adds	r7, #8
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	460b      	mov	r3, r1
 80050de:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	78fa      	ldrb	r2, [r7, #3]
 80050e4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005102:	b2da      	uxtb	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2204      	movs	r2, #4
 800510e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800512e:	b2db      	uxtb	r3, r3
 8005130:	2b04      	cmp	r3, #4
 8005132:	d106      	bne.n	8005142 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800513a:	b2da      	uxtb	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800515e:	2b00      	cmp	r3, #0
 8005160:	d101      	bne.n	8005166 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8005162:	2303      	movs	r3, #3
 8005164:	e012      	b.n	800518c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b03      	cmp	r3, #3
 8005170:	d10b      	bne.n	800518a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005178:	69db      	ldr	r3, [r3, #28]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d005      	beq.n	800518a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005184:	69db      	ldr	r3, [r3, #28]
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	3708      	adds	r7, #8
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	460b      	mov	r3, r1
 800519e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d101      	bne.n	80051ae <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e014      	b.n	80051d8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b03      	cmp	r3, #3
 80051b8:	d10d      	bne.n	80051d6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d007      	beq.n	80051d6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	78fa      	ldrb	r2, [r7, #3]
 80051d0:	4611      	mov	r1, r2
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3708      	adds	r7, #8
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	460b      	mov	r3, r1
 80051ea:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d101      	bne.n	80051fa <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e014      	b.n	8005224 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b03      	cmp	r3, #3
 8005204:	d10d      	bne.n	8005222 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800520c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520e:	2b00      	cmp	r3, #0
 8005210:	d007      	beq.n	8005222 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521a:	78fa      	ldrb	r2, [r7, #3]
 800521c:	4611      	mov	r1, r2
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3708      	adds	r7, #8
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b082      	sub	sp, #8
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005258:	2b00      	cmp	r3, #0
 800525a:	d009      	beq.n	8005270 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	6852      	ldr	r2, [r2, #4]
 8005268:	b2d2      	uxtb	r2, r2
 800526a:	4611      	mov	r1, r2
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	4798      	blx	r3
  }

  return USBD_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800527a:	b480      	push	{r7}
 800527c:	b087      	sub	sp, #28
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	3301      	adds	r3, #1
 8005290:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005298:	8a3b      	ldrh	r3, [r7, #16]
 800529a:	021b      	lsls	r3, r3, #8
 800529c:	b21a      	sxth	r2, r3
 800529e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	b21b      	sxth	r3, r3
 80052a6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80052a8:	89fb      	ldrh	r3, [r7, #14]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	371c      	adds	r7, #28
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
	...

080052b8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80052c2:	2300      	movs	r3, #0
 80052c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80052ce:	2b40      	cmp	r3, #64	; 0x40
 80052d0:	d005      	beq.n	80052de <USBD_StdDevReq+0x26>
 80052d2:	2b40      	cmp	r3, #64	; 0x40
 80052d4:	d853      	bhi.n	800537e <USBD_StdDevReq+0xc6>
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00b      	beq.n	80052f2 <USBD_StdDevReq+0x3a>
 80052da:	2b20      	cmp	r3, #32
 80052dc:	d14f      	bne.n	800537e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	6839      	ldr	r1, [r7, #0]
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	4798      	blx	r3
 80052ec:	4603      	mov	r3, r0
 80052ee:	73fb      	strb	r3, [r7, #15]
      break;
 80052f0:	e04a      	b.n	8005388 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	785b      	ldrb	r3, [r3, #1]
 80052f6:	2b09      	cmp	r3, #9
 80052f8:	d83b      	bhi.n	8005372 <USBD_StdDevReq+0xba>
 80052fa:	a201      	add	r2, pc, #4	; (adr r2, 8005300 <USBD_StdDevReq+0x48>)
 80052fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005300:	08005355 	.word	0x08005355
 8005304:	08005369 	.word	0x08005369
 8005308:	08005373 	.word	0x08005373
 800530c:	0800535f 	.word	0x0800535f
 8005310:	08005373 	.word	0x08005373
 8005314:	08005333 	.word	0x08005333
 8005318:	08005329 	.word	0x08005329
 800531c:	08005373 	.word	0x08005373
 8005320:	0800534b 	.word	0x0800534b
 8005324:	0800533d 	.word	0x0800533d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005328:	6839      	ldr	r1, [r7, #0]
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f9de 	bl	80056ec <USBD_GetDescriptor>
          break;
 8005330:	e024      	b.n	800537c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005332:	6839      	ldr	r1, [r7, #0]
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 fb43 	bl	80059c0 <USBD_SetAddress>
          break;
 800533a:	e01f      	b.n	800537c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800533c:	6839      	ldr	r1, [r7, #0]
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 fb82 	bl	8005a48 <USBD_SetConfig>
 8005344:	4603      	mov	r3, r0
 8005346:	73fb      	strb	r3, [r7, #15]
          break;
 8005348:	e018      	b.n	800537c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800534a:	6839      	ldr	r1, [r7, #0]
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 fc21 	bl	8005b94 <USBD_GetConfig>
          break;
 8005352:	e013      	b.n	800537c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005354:	6839      	ldr	r1, [r7, #0]
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 fc52 	bl	8005c00 <USBD_GetStatus>
          break;
 800535c:	e00e      	b.n	800537c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800535e:	6839      	ldr	r1, [r7, #0]
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 fc81 	bl	8005c68 <USBD_SetFeature>
          break;
 8005366:	e009      	b.n	800537c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005368:	6839      	ldr	r1, [r7, #0]
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 fc90 	bl	8005c90 <USBD_ClrFeature>
          break;
 8005370:	e004      	b.n	800537c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005372:	6839      	ldr	r1, [r7, #0]
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 fce7 	bl	8005d48 <USBD_CtlError>
          break;
 800537a:	bf00      	nop
      }
      break;
 800537c:	e004      	b.n	8005388 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800537e:	6839      	ldr	r1, [r7, #0]
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 fce1 	bl	8005d48 <USBD_CtlError>
      break;
 8005386:	bf00      	nop
  }

  return ret;
 8005388:	7bfb      	ldrb	r3, [r7, #15]
}
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop

08005394 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800539e:	2300      	movs	r3, #0
 80053a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80053aa:	2b40      	cmp	r3, #64	; 0x40
 80053ac:	d005      	beq.n	80053ba <USBD_StdItfReq+0x26>
 80053ae:	2b40      	cmp	r3, #64	; 0x40
 80053b0:	d82f      	bhi.n	8005412 <USBD_StdItfReq+0x7e>
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <USBD_StdItfReq+0x26>
 80053b6:	2b20      	cmp	r3, #32
 80053b8:	d12b      	bne.n	8005412 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	3b01      	subs	r3, #1
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d81d      	bhi.n	8005404 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	889b      	ldrh	r3, [r3, #4]
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d813      	bhi.n	80053fa <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	6839      	ldr	r1, [r7, #0]
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	4798      	blx	r3
 80053e0:	4603      	mov	r3, r0
 80053e2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	88db      	ldrh	r3, [r3, #6]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d110      	bne.n	800540e <USBD_StdItfReq+0x7a>
 80053ec:	7bfb      	ldrb	r3, [r7, #15]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10d      	bne.n	800540e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 fd56 	bl	8005ea4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80053f8:	e009      	b.n	800540e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80053fa:	6839      	ldr	r1, [r7, #0]
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 fca3 	bl	8005d48 <USBD_CtlError>
          break;
 8005402:	e004      	b.n	800540e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8005404:	6839      	ldr	r1, [r7, #0]
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 fc9e 	bl	8005d48 <USBD_CtlError>
          break;
 800540c:	e000      	b.n	8005410 <USBD_StdItfReq+0x7c>
          break;
 800540e:	bf00      	nop
      }
      break;
 8005410:	e004      	b.n	800541c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8005412:	6839      	ldr	r1, [r7, #0]
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 fc97 	bl	8005d48 <USBD_CtlError>
      break;
 800541a:	bf00      	nop
  }

  return ret;
 800541c:	7bfb      	ldrb	r3, [r7, #15]
}
 800541e:	4618      	mov	r0, r3
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b084      	sub	sp, #16
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
 800542e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005430:	2300      	movs	r3, #0
 8005432:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	889b      	ldrh	r3, [r3, #4]
 8005438:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005442:	2b40      	cmp	r3, #64	; 0x40
 8005444:	d007      	beq.n	8005456 <USBD_StdEPReq+0x30>
 8005446:	2b40      	cmp	r3, #64	; 0x40
 8005448:	f200 8145 	bhi.w	80056d6 <USBD_StdEPReq+0x2b0>
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00c      	beq.n	800546a <USBD_StdEPReq+0x44>
 8005450:	2b20      	cmp	r3, #32
 8005452:	f040 8140 	bne.w	80056d6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	6839      	ldr	r1, [r7, #0]
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	4798      	blx	r3
 8005464:	4603      	mov	r3, r0
 8005466:	73fb      	strb	r3, [r7, #15]
      break;
 8005468:	e13a      	b.n	80056e0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	785b      	ldrb	r3, [r3, #1]
 800546e:	2b03      	cmp	r3, #3
 8005470:	d007      	beq.n	8005482 <USBD_StdEPReq+0x5c>
 8005472:	2b03      	cmp	r3, #3
 8005474:	f300 8129 	bgt.w	80056ca <USBD_StdEPReq+0x2a4>
 8005478:	2b00      	cmp	r3, #0
 800547a:	d07f      	beq.n	800557c <USBD_StdEPReq+0x156>
 800547c:	2b01      	cmp	r3, #1
 800547e:	d03c      	beq.n	80054fa <USBD_StdEPReq+0xd4>
 8005480:	e123      	b.n	80056ca <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b02      	cmp	r3, #2
 800548c:	d002      	beq.n	8005494 <USBD_StdEPReq+0x6e>
 800548e:	2b03      	cmp	r3, #3
 8005490:	d016      	beq.n	80054c0 <USBD_StdEPReq+0x9a>
 8005492:	e02c      	b.n	80054ee <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005494:	7bbb      	ldrb	r3, [r7, #14]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00d      	beq.n	80054b6 <USBD_StdEPReq+0x90>
 800549a:	7bbb      	ldrb	r3, [r7, #14]
 800549c:	2b80      	cmp	r3, #128	; 0x80
 800549e:	d00a      	beq.n	80054b6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80054a0:	7bbb      	ldrb	r3, [r7, #14]
 80054a2:	4619      	mov	r1, r3
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f001 f859 	bl	800655c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80054aa:	2180      	movs	r1, #128	; 0x80
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f001 f855 	bl	800655c <USBD_LL_StallEP>
 80054b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80054b4:	e020      	b.n	80054f8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80054b6:	6839      	ldr	r1, [r7, #0]
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 fc45 	bl	8005d48 <USBD_CtlError>
              break;
 80054be:	e01b      	b.n	80054f8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	885b      	ldrh	r3, [r3, #2]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d10e      	bne.n	80054e6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80054c8:	7bbb      	ldrb	r3, [r7, #14]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00b      	beq.n	80054e6 <USBD_StdEPReq+0xc0>
 80054ce:	7bbb      	ldrb	r3, [r7, #14]
 80054d0:	2b80      	cmp	r3, #128	; 0x80
 80054d2:	d008      	beq.n	80054e6 <USBD_StdEPReq+0xc0>
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	88db      	ldrh	r3, [r3, #6]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d104      	bne.n	80054e6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80054dc:	7bbb      	ldrb	r3, [r7, #14]
 80054de:	4619      	mov	r1, r3
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f001 f83b 	bl	800655c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 fcdc 	bl	8005ea4 <USBD_CtlSendStatus>

              break;
 80054ec:	e004      	b.n	80054f8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80054ee:	6839      	ldr	r1, [r7, #0]
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 fc29 	bl	8005d48 <USBD_CtlError>
              break;
 80054f6:	bf00      	nop
          }
          break;
 80054f8:	e0ec      	b.n	80056d4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b02      	cmp	r3, #2
 8005504:	d002      	beq.n	800550c <USBD_StdEPReq+0xe6>
 8005506:	2b03      	cmp	r3, #3
 8005508:	d016      	beq.n	8005538 <USBD_StdEPReq+0x112>
 800550a:	e030      	b.n	800556e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800550c:	7bbb      	ldrb	r3, [r7, #14]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00d      	beq.n	800552e <USBD_StdEPReq+0x108>
 8005512:	7bbb      	ldrb	r3, [r7, #14]
 8005514:	2b80      	cmp	r3, #128	; 0x80
 8005516:	d00a      	beq.n	800552e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005518:	7bbb      	ldrb	r3, [r7, #14]
 800551a:	4619      	mov	r1, r3
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f001 f81d 	bl	800655c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005522:	2180      	movs	r1, #128	; 0x80
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f001 f819 	bl	800655c <USBD_LL_StallEP>
 800552a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800552c:	e025      	b.n	800557a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800552e:	6839      	ldr	r1, [r7, #0]
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 fc09 	bl	8005d48 <USBD_CtlError>
              break;
 8005536:	e020      	b.n	800557a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	885b      	ldrh	r3, [r3, #2]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d11b      	bne.n	8005578 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005540:	7bbb      	ldrb	r3, [r7, #14]
 8005542:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005546:	2b00      	cmp	r3, #0
 8005548:	d004      	beq.n	8005554 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800554a:	7bbb      	ldrb	r3, [r7, #14]
 800554c:	4619      	mov	r1, r3
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f001 f823 	bl	800659a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 fca5 	bl	8005ea4 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	6839      	ldr	r1, [r7, #0]
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	4798      	blx	r3
 8005568:	4603      	mov	r3, r0
 800556a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800556c:	e004      	b.n	8005578 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800556e:	6839      	ldr	r1, [r7, #0]
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 fbe9 	bl	8005d48 <USBD_CtlError>
              break;
 8005576:	e000      	b.n	800557a <USBD_StdEPReq+0x154>
              break;
 8005578:	bf00      	nop
          }
          break;
 800557a:	e0ab      	b.n	80056d4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005582:	b2db      	uxtb	r3, r3
 8005584:	2b02      	cmp	r3, #2
 8005586:	d002      	beq.n	800558e <USBD_StdEPReq+0x168>
 8005588:	2b03      	cmp	r3, #3
 800558a:	d032      	beq.n	80055f2 <USBD_StdEPReq+0x1cc>
 800558c:	e097      	b.n	80056be <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800558e:	7bbb      	ldrb	r3, [r7, #14]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d007      	beq.n	80055a4 <USBD_StdEPReq+0x17e>
 8005594:	7bbb      	ldrb	r3, [r7, #14]
 8005596:	2b80      	cmp	r3, #128	; 0x80
 8005598:	d004      	beq.n	80055a4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800559a:	6839      	ldr	r1, [r7, #0]
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 fbd3 	bl	8005d48 <USBD_CtlError>
                break;
 80055a2:	e091      	b.n	80056c8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80055a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	da0b      	bge.n	80055c4 <USBD_StdEPReq+0x19e>
 80055ac:	7bbb      	ldrb	r3, [r7, #14]
 80055ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80055b2:	4613      	mov	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	4413      	add	r3, r2
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	3310      	adds	r3, #16
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	4413      	add	r3, r2
 80055c0:	3304      	adds	r3, #4
 80055c2:	e00b      	b.n	80055dc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80055c4:	7bbb      	ldrb	r3, [r7, #14]
 80055c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80055ca:	4613      	mov	r3, r2
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	4413      	add	r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	4413      	add	r3, r2
 80055da:	3304      	adds	r3, #4
 80055dc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	2200      	movs	r2, #0
 80055e2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	2202      	movs	r2, #2
 80055e8:	4619      	mov	r1, r3
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 fc1d 	bl	8005e2a <USBD_CtlSendData>
              break;
 80055f0:	e06a      	b.n	80056c8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80055f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	da11      	bge.n	800561e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80055fa:	7bbb      	ldrb	r3, [r7, #14]
 80055fc:	f003 020f 	and.w	r2, r3, #15
 8005600:	6879      	ldr	r1, [r7, #4]
 8005602:	4613      	mov	r3, r2
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	4413      	add	r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	440b      	add	r3, r1
 800560c:	3324      	adds	r3, #36	; 0x24
 800560e:	881b      	ldrh	r3, [r3, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d117      	bne.n	8005644 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005614:	6839      	ldr	r1, [r7, #0]
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 fb96 	bl	8005d48 <USBD_CtlError>
                  break;
 800561c:	e054      	b.n	80056c8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800561e:	7bbb      	ldrb	r3, [r7, #14]
 8005620:	f003 020f 	and.w	r2, r3, #15
 8005624:	6879      	ldr	r1, [r7, #4]
 8005626:	4613      	mov	r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	4413      	add	r3, r2
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	440b      	add	r3, r1
 8005630:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005634:	881b      	ldrh	r3, [r3, #0]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d104      	bne.n	8005644 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800563a:	6839      	ldr	r1, [r7, #0]
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 fb83 	bl	8005d48 <USBD_CtlError>
                  break;
 8005642:	e041      	b.n	80056c8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005644:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005648:	2b00      	cmp	r3, #0
 800564a:	da0b      	bge.n	8005664 <USBD_StdEPReq+0x23e>
 800564c:	7bbb      	ldrb	r3, [r7, #14]
 800564e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005652:	4613      	mov	r3, r2
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	4413      	add	r3, r2
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	3310      	adds	r3, #16
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	4413      	add	r3, r2
 8005660:	3304      	adds	r3, #4
 8005662:	e00b      	b.n	800567c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005664:	7bbb      	ldrb	r3, [r7, #14]
 8005666:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800566a:	4613      	mov	r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4413      	add	r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	4413      	add	r3, r2
 800567a:	3304      	adds	r3, #4
 800567c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800567e:	7bbb      	ldrb	r3, [r7, #14]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d002      	beq.n	800568a <USBD_StdEPReq+0x264>
 8005684:	7bbb      	ldrb	r3, [r7, #14]
 8005686:	2b80      	cmp	r3, #128	; 0x80
 8005688:	d103      	bne.n	8005692 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	2200      	movs	r2, #0
 800568e:	601a      	str	r2, [r3, #0]
 8005690:	e00e      	b.n	80056b0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005692:	7bbb      	ldrb	r3, [r7, #14]
 8005694:	4619      	mov	r1, r3
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 ff9e 	bl	80065d8 <USBD_LL_IsStallEP>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d003      	beq.n	80056aa <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	2201      	movs	r2, #1
 80056a6:	601a      	str	r2, [r3, #0]
 80056a8:	e002      	b.n	80056b0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	2200      	movs	r2, #0
 80056ae:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	2202      	movs	r2, #2
 80056b4:	4619      	mov	r1, r3
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 fbb7 	bl	8005e2a <USBD_CtlSendData>
              break;
 80056bc:	e004      	b.n	80056c8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80056be:	6839      	ldr	r1, [r7, #0]
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 fb41 	bl	8005d48 <USBD_CtlError>
              break;
 80056c6:	bf00      	nop
          }
          break;
 80056c8:	e004      	b.n	80056d4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80056ca:	6839      	ldr	r1, [r7, #0]
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 fb3b 	bl	8005d48 <USBD_CtlError>
          break;
 80056d2:	bf00      	nop
      }
      break;
 80056d4:	e004      	b.n	80056e0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80056d6:	6839      	ldr	r1, [r7, #0]
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 fb35 	bl	8005d48 <USBD_CtlError>
      break;
 80056de:	bf00      	nop
  }

  return ret;
 80056e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3710      	adds	r7, #16
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
	...

080056ec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80056f6:	2300      	movs	r3, #0
 80056f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80056fa:	2300      	movs	r3, #0
 80056fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80056fe:	2300      	movs	r3, #0
 8005700:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	885b      	ldrh	r3, [r3, #2]
 8005706:	0a1b      	lsrs	r3, r3, #8
 8005708:	b29b      	uxth	r3, r3
 800570a:	3b01      	subs	r3, #1
 800570c:	2b06      	cmp	r3, #6
 800570e:	f200 8128 	bhi.w	8005962 <USBD_GetDescriptor+0x276>
 8005712:	a201      	add	r2, pc, #4	; (adr r2, 8005718 <USBD_GetDescriptor+0x2c>)
 8005714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005718:	08005735 	.word	0x08005735
 800571c:	0800574d 	.word	0x0800574d
 8005720:	0800578d 	.word	0x0800578d
 8005724:	08005963 	.word	0x08005963
 8005728:	08005963 	.word	0x08005963
 800572c:	08005903 	.word	0x08005903
 8005730:	0800592f 	.word	0x0800592f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	7c12      	ldrb	r2, [r2, #16]
 8005740:	f107 0108 	add.w	r1, r7, #8
 8005744:	4610      	mov	r0, r2
 8005746:	4798      	blx	r3
 8005748:	60f8      	str	r0, [r7, #12]
      break;
 800574a:	e112      	b.n	8005972 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	7c1b      	ldrb	r3, [r3, #16]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d10d      	bne.n	8005770 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800575a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575c:	f107 0208 	add.w	r2, r7, #8
 8005760:	4610      	mov	r0, r2
 8005762:	4798      	blx	r3
 8005764:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	3301      	adds	r3, #1
 800576a:	2202      	movs	r2, #2
 800576c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800576e:	e100      	b.n	8005972 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005778:	f107 0208 	add.w	r2, r7, #8
 800577c:	4610      	mov	r0, r2
 800577e:	4798      	blx	r3
 8005780:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	3301      	adds	r3, #1
 8005786:	2202      	movs	r2, #2
 8005788:	701a      	strb	r2, [r3, #0]
      break;
 800578a:	e0f2      	b.n	8005972 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	885b      	ldrh	r3, [r3, #2]
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b05      	cmp	r3, #5
 8005794:	f200 80ac 	bhi.w	80058f0 <USBD_GetDescriptor+0x204>
 8005798:	a201      	add	r2, pc, #4	; (adr r2, 80057a0 <USBD_GetDescriptor+0xb4>)
 800579a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579e:	bf00      	nop
 80057a0:	080057b9 	.word	0x080057b9
 80057a4:	080057ed 	.word	0x080057ed
 80057a8:	08005821 	.word	0x08005821
 80057ac:	08005855 	.word	0x08005855
 80057b0:	08005889 	.word	0x08005889
 80057b4:	080058bd 	.word	0x080058bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00b      	beq.n	80057dc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	7c12      	ldrb	r2, [r2, #16]
 80057d0:	f107 0108 	add.w	r1, r7, #8
 80057d4:	4610      	mov	r0, r2
 80057d6:	4798      	blx	r3
 80057d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80057da:	e091      	b.n	8005900 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80057dc:	6839      	ldr	r1, [r7, #0]
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 fab2 	bl	8005d48 <USBD_CtlError>
            err++;
 80057e4:	7afb      	ldrb	r3, [r7, #11]
 80057e6:	3301      	adds	r3, #1
 80057e8:	72fb      	strb	r3, [r7, #11]
          break;
 80057ea:	e089      	b.n	8005900 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00b      	beq.n	8005810 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	7c12      	ldrb	r2, [r2, #16]
 8005804:	f107 0108 	add.w	r1, r7, #8
 8005808:	4610      	mov	r0, r2
 800580a:	4798      	blx	r3
 800580c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800580e:	e077      	b.n	8005900 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005810:	6839      	ldr	r1, [r7, #0]
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 fa98 	bl	8005d48 <USBD_CtlError>
            err++;
 8005818:	7afb      	ldrb	r3, [r7, #11]
 800581a:	3301      	adds	r3, #1
 800581c:	72fb      	strb	r3, [r7, #11]
          break;
 800581e:	e06f      	b.n	8005900 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00b      	beq.n	8005844 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	7c12      	ldrb	r2, [r2, #16]
 8005838:	f107 0108 	add.w	r1, r7, #8
 800583c:	4610      	mov	r0, r2
 800583e:	4798      	blx	r3
 8005840:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005842:	e05d      	b.n	8005900 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005844:	6839      	ldr	r1, [r7, #0]
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 fa7e 	bl	8005d48 <USBD_CtlError>
            err++;
 800584c:	7afb      	ldrb	r3, [r7, #11]
 800584e:	3301      	adds	r3, #1
 8005850:	72fb      	strb	r3, [r7, #11]
          break;
 8005852:	e055      	b.n	8005900 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00b      	beq.n	8005878 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	7c12      	ldrb	r2, [r2, #16]
 800586c:	f107 0108 	add.w	r1, r7, #8
 8005870:	4610      	mov	r0, r2
 8005872:	4798      	blx	r3
 8005874:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005876:	e043      	b.n	8005900 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005878:	6839      	ldr	r1, [r7, #0]
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 fa64 	bl	8005d48 <USBD_CtlError>
            err++;
 8005880:	7afb      	ldrb	r3, [r7, #11]
 8005882:	3301      	adds	r3, #1
 8005884:	72fb      	strb	r3, [r7, #11]
          break;
 8005886:	e03b      	b.n	8005900 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800588e:	695b      	ldr	r3, [r3, #20]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00b      	beq.n	80058ac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800589a:	695b      	ldr	r3, [r3, #20]
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	7c12      	ldrb	r2, [r2, #16]
 80058a0:	f107 0108 	add.w	r1, r7, #8
 80058a4:	4610      	mov	r0, r2
 80058a6:	4798      	blx	r3
 80058a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80058aa:	e029      	b.n	8005900 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80058ac:	6839      	ldr	r1, [r7, #0]
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 fa4a 	bl	8005d48 <USBD_CtlError>
            err++;
 80058b4:	7afb      	ldrb	r3, [r7, #11]
 80058b6:	3301      	adds	r3, #1
 80058b8:	72fb      	strb	r3, [r7, #11]
          break;
 80058ba:	e021      	b.n	8005900 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058c2:	699b      	ldr	r3, [r3, #24]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00b      	beq.n	80058e0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058ce:	699b      	ldr	r3, [r3, #24]
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	7c12      	ldrb	r2, [r2, #16]
 80058d4:	f107 0108 	add.w	r1, r7, #8
 80058d8:	4610      	mov	r0, r2
 80058da:	4798      	blx	r3
 80058dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80058de:	e00f      	b.n	8005900 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80058e0:	6839      	ldr	r1, [r7, #0]
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 fa30 	bl	8005d48 <USBD_CtlError>
            err++;
 80058e8:	7afb      	ldrb	r3, [r7, #11]
 80058ea:	3301      	adds	r3, #1
 80058ec:	72fb      	strb	r3, [r7, #11]
          break;
 80058ee:	e007      	b.n	8005900 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80058f0:	6839      	ldr	r1, [r7, #0]
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 fa28 	bl	8005d48 <USBD_CtlError>
          err++;
 80058f8:	7afb      	ldrb	r3, [r7, #11]
 80058fa:	3301      	adds	r3, #1
 80058fc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80058fe:	bf00      	nop
      }
      break;
 8005900:	e037      	b.n	8005972 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	7c1b      	ldrb	r3, [r3, #16]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d109      	bne.n	800591e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005912:	f107 0208 	add.w	r2, r7, #8
 8005916:	4610      	mov	r0, r2
 8005918:	4798      	blx	r3
 800591a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800591c:	e029      	b.n	8005972 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800591e:	6839      	ldr	r1, [r7, #0]
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f000 fa11 	bl	8005d48 <USBD_CtlError>
        err++;
 8005926:	7afb      	ldrb	r3, [r7, #11]
 8005928:	3301      	adds	r3, #1
 800592a:	72fb      	strb	r3, [r7, #11]
      break;
 800592c:	e021      	b.n	8005972 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	7c1b      	ldrb	r3, [r3, #16]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d10d      	bne.n	8005952 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800593c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593e:	f107 0208 	add.w	r2, r7, #8
 8005942:	4610      	mov	r0, r2
 8005944:	4798      	blx	r3
 8005946:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	3301      	adds	r3, #1
 800594c:	2207      	movs	r2, #7
 800594e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005950:	e00f      	b.n	8005972 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005952:	6839      	ldr	r1, [r7, #0]
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 f9f7 	bl	8005d48 <USBD_CtlError>
        err++;
 800595a:	7afb      	ldrb	r3, [r7, #11]
 800595c:	3301      	adds	r3, #1
 800595e:	72fb      	strb	r3, [r7, #11]
      break;
 8005960:	e007      	b.n	8005972 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005962:	6839      	ldr	r1, [r7, #0]
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 f9ef 	bl	8005d48 <USBD_CtlError>
      err++;
 800596a:	7afb      	ldrb	r3, [r7, #11]
 800596c:	3301      	adds	r3, #1
 800596e:	72fb      	strb	r3, [r7, #11]
      break;
 8005970:	bf00      	nop
  }

  if (err != 0U)
 8005972:	7afb      	ldrb	r3, [r7, #11]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d11e      	bne.n	80059b6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	88db      	ldrh	r3, [r3, #6]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d016      	beq.n	80059ae <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005980:	893b      	ldrh	r3, [r7, #8]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00e      	beq.n	80059a4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	88da      	ldrh	r2, [r3, #6]
 800598a:	893b      	ldrh	r3, [r7, #8]
 800598c:	4293      	cmp	r3, r2
 800598e:	bf28      	it	cs
 8005990:	4613      	movcs	r3, r2
 8005992:	b29b      	uxth	r3, r3
 8005994:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005996:	893b      	ldrh	r3, [r7, #8]
 8005998:	461a      	mov	r2, r3
 800599a:	68f9      	ldr	r1, [r7, #12]
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 fa44 	bl	8005e2a <USBD_CtlSendData>
 80059a2:	e009      	b.n	80059b8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80059a4:	6839      	ldr	r1, [r7, #0]
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 f9ce 	bl	8005d48 <USBD_CtlError>
 80059ac:	e004      	b.n	80059b8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 fa78 	bl	8005ea4 <USBD_CtlSendStatus>
 80059b4:	e000      	b.n	80059b8 <USBD_GetDescriptor+0x2cc>
    return;
 80059b6:	bf00      	nop
  }
}
 80059b8:	3710      	adds	r7, #16
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop

080059c0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	889b      	ldrh	r3, [r3, #4]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d131      	bne.n	8005a36 <USBD_SetAddress+0x76>
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	88db      	ldrh	r3, [r3, #6]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d12d      	bne.n	8005a36 <USBD_SetAddress+0x76>
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	885b      	ldrh	r3, [r3, #2]
 80059de:	2b7f      	cmp	r3, #127	; 0x7f
 80059e0:	d829      	bhi.n	8005a36 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	885b      	ldrh	r3, [r3, #2]
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b03      	cmp	r3, #3
 80059f8:	d104      	bne.n	8005a04 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80059fa:	6839      	ldr	r1, [r7, #0]
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 f9a3 	bl	8005d48 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a02:	e01d      	b.n	8005a40 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	7bfa      	ldrb	r2, [r7, #15]
 8005a08:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005a0c:	7bfb      	ldrb	r3, [r7, #15]
 8005a0e:	4619      	mov	r1, r3
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 fe0d 	bl	8006630 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 fa44 	bl	8005ea4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005a1c:	7bfb      	ldrb	r3, [r7, #15]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d004      	beq.n	8005a2c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2202      	movs	r2, #2
 8005a26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a2a:	e009      	b.n	8005a40 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a34:	e004      	b.n	8005a40 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005a36:	6839      	ldr	r1, [r7, #0]
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 f985 	bl	8005d48 <USBD_CtlError>
  }
}
 8005a3e:	bf00      	nop
 8005a40:	bf00      	nop
 8005a42:	3710      	adds	r7, #16
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a52:	2300      	movs	r3, #0
 8005a54:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	885b      	ldrh	r3, [r3, #2]
 8005a5a:	b2da      	uxtb	r2, r3
 8005a5c:	4b4c      	ldr	r3, [pc, #304]	; (8005b90 <USBD_SetConfig+0x148>)
 8005a5e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005a60:	4b4b      	ldr	r3, [pc, #300]	; (8005b90 <USBD_SetConfig+0x148>)
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d905      	bls.n	8005a74 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005a68:	6839      	ldr	r1, [r7, #0]
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 f96c 	bl	8005d48 <USBD_CtlError>
    return USBD_FAIL;
 8005a70:	2303      	movs	r3, #3
 8005a72:	e088      	b.n	8005b86 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d002      	beq.n	8005a86 <USBD_SetConfig+0x3e>
 8005a80:	2b03      	cmp	r3, #3
 8005a82:	d025      	beq.n	8005ad0 <USBD_SetConfig+0x88>
 8005a84:	e071      	b.n	8005b6a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005a86:	4b42      	ldr	r3, [pc, #264]	; (8005b90 <USBD_SetConfig+0x148>)
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d01c      	beq.n	8005ac8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8005a8e:	4b40      	ldr	r3, [pc, #256]	; (8005b90 <USBD_SetConfig+0x148>)
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	461a      	mov	r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005a98:	4b3d      	ldr	r3, [pc, #244]	; (8005b90 <USBD_SetConfig+0x148>)
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7ff f948 	bl	8004d34 <USBD_SetClassConfig>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005aa8:	7bfb      	ldrb	r3, [r7, #15]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d004      	beq.n	8005ab8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8005aae:	6839      	ldr	r1, [r7, #0]
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 f949 	bl	8005d48 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005ab6:	e065      	b.n	8005b84 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 f9f3 	bl	8005ea4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2203      	movs	r2, #3
 8005ac2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005ac6:	e05d      	b.n	8005b84 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 f9eb 	bl	8005ea4 <USBD_CtlSendStatus>
      break;
 8005ace:	e059      	b.n	8005b84 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005ad0:	4b2f      	ldr	r3, [pc, #188]	; (8005b90 <USBD_SetConfig+0x148>)
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d112      	bne.n	8005afe <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2202      	movs	r2, #2
 8005adc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005ae0:	4b2b      	ldr	r3, [pc, #172]	; (8005b90 <USBD_SetConfig+0x148>)
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005aea:	4b29      	ldr	r3, [pc, #164]	; (8005b90 <USBD_SetConfig+0x148>)
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	4619      	mov	r1, r3
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f7ff f93b 	bl	8004d6c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 f9d4 	bl	8005ea4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005afc:	e042      	b.n	8005b84 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8005afe:	4b24      	ldr	r3, [pc, #144]	; (8005b90 <USBD_SetConfig+0x148>)
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	461a      	mov	r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d02a      	beq.n	8005b62 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	4619      	mov	r1, r3
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f7ff f929 	bl	8004d6c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005b1a:	4b1d      	ldr	r3, [pc, #116]	; (8005b90 <USBD_SetConfig+0x148>)
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	461a      	mov	r2, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005b24:	4b1a      	ldr	r3, [pc, #104]	; (8005b90 <USBD_SetConfig+0x148>)
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	4619      	mov	r1, r3
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f7ff f902 	bl	8004d34 <USBD_SetClassConfig>
 8005b30:	4603      	mov	r3, r0
 8005b32:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005b34:	7bfb      	ldrb	r3, [r7, #15]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00f      	beq.n	8005b5a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8005b3a:	6839      	ldr	r1, [r7, #0]
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 f903 	bl	8005d48 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	4619      	mov	r1, r3
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f7ff f90e 	bl	8004d6c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2202      	movs	r2, #2
 8005b54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005b58:	e014      	b.n	8005b84 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 f9a2 	bl	8005ea4 <USBD_CtlSendStatus>
      break;
 8005b60:	e010      	b.n	8005b84 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 f99e 	bl	8005ea4 <USBD_CtlSendStatus>
      break;
 8005b68:	e00c      	b.n	8005b84 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005b6a:	6839      	ldr	r1, [r7, #0]
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 f8eb 	bl	8005d48 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005b72:	4b07      	ldr	r3, [pc, #28]	; (8005b90 <USBD_SetConfig+0x148>)
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	4619      	mov	r1, r3
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f7ff f8f7 	bl	8004d6c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	73fb      	strb	r3, [r7, #15]
      break;
 8005b82:	bf00      	nop
  }

  return ret;
 8005b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3710      	adds	r7, #16
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	2000019c 	.word	0x2000019c

08005b94 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	88db      	ldrh	r3, [r3, #6]
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d004      	beq.n	8005bb0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005ba6:	6839      	ldr	r1, [r7, #0]
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 f8cd 	bl	8005d48 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005bae:	e023      	b.n	8005bf8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	dc02      	bgt.n	8005bc2 <USBD_GetConfig+0x2e>
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	dc03      	bgt.n	8005bc8 <USBD_GetConfig+0x34>
 8005bc0:	e015      	b.n	8005bee <USBD_GetConfig+0x5a>
 8005bc2:	2b03      	cmp	r3, #3
 8005bc4:	d00b      	beq.n	8005bde <USBD_GetConfig+0x4a>
 8005bc6:	e012      	b.n	8005bee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	3308      	adds	r3, #8
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 f927 	bl	8005e2a <USBD_CtlSendData>
        break;
 8005bdc:	e00c      	b.n	8005bf8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	3304      	adds	r3, #4
 8005be2:	2201      	movs	r2, #1
 8005be4:	4619      	mov	r1, r3
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 f91f 	bl	8005e2a <USBD_CtlSendData>
        break;
 8005bec:	e004      	b.n	8005bf8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005bee:	6839      	ldr	r1, [r7, #0]
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 f8a9 	bl	8005d48 <USBD_CtlError>
        break;
 8005bf6:	bf00      	nop
}
 8005bf8:	bf00      	nop
 8005bfa:	3708      	adds	r7, #8
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	3b01      	subs	r3, #1
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	d81e      	bhi.n	8005c56 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	88db      	ldrh	r3, [r3, #6]
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d004      	beq.n	8005c2a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005c20:	6839      	ldr	r1, [r7, #0]
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f890 	bl	8005d48 <USBD_CtlError>
        break;
 8005c28:	e01a      	b.n	8005c60 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d005      	beq.n	8005c46 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	f043 0202 	orr.w	r2, r3, #2
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	330c      	adds	r3, #12
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 f8eb 	bl	8005e2a <USBD_CtlSendData>
      break;
 8005c54:	e004      	b.n	8005c60 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005c56:	6839      	ldr	r1, [r7, #0]
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 f875 	bl	8005d48 <USBD_CtlError>
      break;
 8005c5e:	bf00      	nop
  }
}
 8005c60:	bf00      	nop
 8005c62:	3708      	adds	r7, #8
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	885b      	ldrh	r3, [r3, #2]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d106      	bne.n	8005c88 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f90e 	bl	8005ea4 <USBD_CtlSendStatus>
  }
}
 8005c88:	bf00      	nop
 8005c8a:	3708      	adds	r7, #8
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d80b      	bhi.n	8005cc0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	885b      	ldrh	r3, [r3, #2]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d10c      	bne.n	8005cca <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 f8f3 	bl	8005ea4 <USBD_CtlSendStatus>
      }
      break;
 8005cbe:	e004      	b.n	8005cca <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005cc0:	6839      	ldr	r1, [r7, #0]
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 f840 	bl	8005d48 <USBD_CtlError>
      break;
 8005cc8:	e000      	b.n	8005ccc <USBD_ClrFeature+0x3c>
      break;
 8005cca:	bf00      	nop
  }
}
 8005ccc:	bf00      	nop
 8005cce:	3708      	adds	r7, #8
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	781a      	ldrb	r2, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	3301      	adds	r3, #1
 8005cee:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	781a      	ldrb	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005cfe:	68f8      	ldr	r0, [r7, #12]
 8005d00:	f7ff fabb 	bl	800527a <SWAPBYTE>
 8005d04:	4603      	mov	r3, r0
 8005d06:	461a      	mov	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	3301      	adds	r3, #1
 8005d10:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	3301      	adds	r3, #1
 8005d16:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f7ff faae 	bl	800527a <SWAPBYTE>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	461a      	mov	r2, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	3301      	adds	r3, #1
 8005d2a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	3301      	adds	r3, #1
 8005d30:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005d32:	68f8      	ldr	r0, [r7, #12]
 8005d34:	f7ff faa1 	bl	800527a <SWAPBYTE>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	80da      	strh	r2, [r3, #6]
}
 8005d40:	bf00      	nop
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005d52:	2180      	movs	r1, #128	; 0x80
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 fc01 	bl	800655c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 fbfd 	bl	800655c <USBD_LL_StallEP>
}
 8005d62:	bf00      	nop
 8005d64:	3708      	adds	r7, #8
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}

08005d6a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005d6a:	b580      	push	{r7, lr}
 8005d6c:	b086      	sub	sp, #24
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	60f8      	str	r0, [r7, #12]
 8005d72:	60b9      	str	r1, [r7, #8]
 8005d74:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005d76:	2300      	movs	r3, #0
 8005d78:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d036      	beq.n	8005dee <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005d84:	6938      	ldr	r0, [r7, #16]
 8005d86:	f000 f836 	bl	8005df6 <USBD_GetLen>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	005b      	lsls	r3, r3, #1
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005d98:	7dfb      	ldrb	r3, [r7, #23]
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	7812      	ldrb	r2, [r2, #0]
 8005da2:	701a      	strb	r2, [r3, #0]
  idx++;
 8005da4:	7dfb      	ldrb	r3, [r7, #23]
 8005da6:	3301      	adds	r3, #1
 8005da8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005daa:	7dfb      	ldrb	r3, [r7, #23]
 8005dac:	68ba      	ldr	r2, [r7, #8]
 8005dae:	4413      	add	r3, r2
 8005db0:	2203      	movs	r2, #3
 8005db2:	701a      	strb	r2, [r3, #0]
  idx++;
 8005db4:	7dfb      	ldrb	r3, [r7, #23]
 8005db6:	3301      	adds	r3, #1
 8005db8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005dba:	e013      	b.n	8005de4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005dbc:	7dfb      	ldrb	r3, [r7, #23]
 8005dbe:	68ba      	ldr	r2, [r7, #8]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	693a      	ldr	r2, [r7, #16]
 8005dc4:	7812      	ldrb	r2, [r2, #0]
 8005dc6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	613b      	str	r3, [r7, #16]
    idx++;
 8005dce:	7dfb      	ldrb	r3, [r7, #23]
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005dd4:	7dfb      	ldrb	r3, [r7, #23]
 8005dd6:	68ba      	ldr	r2, [r7, #8]
 8005dd8:	4413      	add	r3, r2
 8005dda:	2200      	movs	r2, #0
 8005ddc:	701a      	strb	r2, [r3, #0]
    idx++;
 8005dde:	7dfb      	ldrb	r3, [r7, #23]
 8005de0:	3301      	adds	r3, #1
 8005de2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d1e7      	bne.n	8005dbc <USBD_GetString+0x52>
 8005dec:	e000      	b.n	8005df0 <USBD_GetString+0x86>
    return;
 8005dee:	bf00      	nop
  }
}
 8005df0:	3718      	adds	r7, #24
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}

08005df6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005df6:	b480      	push	{r7}
 8005df8:	b085      	sub	sp, #20
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005e06:	e005      	b.n	8005e14 <USBD_GetLen+0x1e>
  {
    len++;
 8005e08:	7bfb      	ldrb	r3, [r7, #15]
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	3301      	adds	r3, #1
 8005e12:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1f5      	bne.n	8005e08 <USBD_GetLen+0x12>
  }

  return len;
 8005e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3714      	adds	r7, #20
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b084      	sub	sp, #16
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	60f8      	str	r0, [r7, #12]
 8005e32:	60b9      	str	r1, [r7, #8]
 8005e34:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2202      	movs	r2, #2
 8005e3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	68ba      	ldr	r2, [r7, #8]
 8005e4e:	2100      	movs	r1, #0
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	f000 fc0c 	bl	800666e <USBD_LL_Transmit>

  return USBD_OK;
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3710      	adds	r7, #16
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	2100      	movs	r1, #0
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	f000 fbfb 	bl	800666e <USBD_LL_Transmit>

  return USBD_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3710      	adds	r7, #16
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}

08005e82 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b084      	sub	sp, #16
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	60f8      	str	r0, [r7, #12]
 8005e8a:	60b9      	str	r1, [r7, #8]
 8005e8c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	68ba      	ldr	r2, [r7, #8]
 8005e92:	2100      	movs	r1, #0
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	f000 fc0b 	bl	80066b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3710      	adds	r7, #16
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2204      	movs	r2, #4
 8005eb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	2100      	movs	r1, #0
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 fbd7 	bl	800666e <USBD_LL_Transmit>

  return USBD_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3708      	adds	r7, #8
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b082      	sub	sp, #8
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2205      	movs	r2, #5
 8005ed6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005eda:	2300      	movs	r3, #0
 8005edc:	2200      	movs	r2, #0
 8005ede:	2100      	movs	r1, #0
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 fbe5 	bl	80066b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3708      	adds	r7, #8
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	490e      	ldr	r1, [pc, #56]	; (8005f30 <MX_USB_DEVICE_Init+0x40>)
 8005ef8:	480e      	ldr	r0, [pc, #56]	; (8005f34 <MX_USB_DEVICE_Init+0x44>)
 8005efa:	f7fe fead 	bl	8004c58 <USBD_Init>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d001      	beq.n	8005f08 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005f04:	f7fa fce4 	bl	80008d0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8005f08:	490b      	ldr	r1, [pc, #44]	; (8005f38 <MX_USB_DEVICE_Init+0x48>)
 8005f0a:	480a      	ldr	r0, [pc, #40]	; (8005f34 <MX_USB_DEVICE_Init+0x44>)
 8005f0c:	f7fe fed4 	bl	8004cb8 <USBD_RegisterClass>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d001      	beq.n	8005f1a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005f16:	f7fa fcdb 	bl	80008d0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005f1a:	4806      	ldr	r0, [pc, #24]	; (8005f34 <MX_USB_DEVICE_Init+0x44>)
 8005f1c:	f7fe fef3 	bl	8004d06 <USBD_Start>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d001      	beq.n	8005f2a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8005f26:	f7fa fcd3 	bl	80008d0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005f2a:	bf00      	nop
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	20000130 	.word	0x20000130
 8005f34:	200001fc 	.word	0x200001fc
 8005f38:	2000000c 	.word	0x2000000c

08005f3c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	4603      	mov	r3, r0
 8005f44:	6039      	str	r1, [r7, #0]
 8005f46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	2212      	movs	r2, #18
 8005f4c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005f4e:	4b03      	ldr	r3, [pc, #12]	; (8005f5c <USBD_FS_DeviceDescriptor+0x20>)
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr
 8005f5c:	2000014c 	.word	0x2000014c

08005f60 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	4603      	mov	r3, r0
 8005f68:	6039      	str	r1, [r7, #0]
 8005f6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	2204      	movs	r2, #4
 8005f70:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005f72:	4b03      	ldr	r3, [pc, #12]	; (8005f80 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr
 8005f80:	20000160 	.word	0x20000160

08005f84 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	6039      	str	r1, [r7, #0]
 8005f8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005f90:	79fb      	ldrb	r3, [r7, #7]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d105      	bne.n	8005fa2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005f96:	683a      	ldr	r2, [r7, #0]
 8005f98:	4907      	ldr	r1, [pc, #28]	; (8005fb8 <USBD_FS_ProductStrDescriptor+0x34>)
 8005f9a:	4808      	ldr	r0, [pc, #32]	; (8005fbc <USBD_FS_ProductStrDescriptor+0x38>)
 8005f9c:	f7ff fee5 	bl	8005d6a <USBD_GetString>
 8005fa0:	e004      	b.n	8005fac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005fa2:	683a      	ldr	r2, [r7, #0]
 8005fa4:	4904      	ldr	r1, [pc, #16]	; (8005fb8 <USBD_FS_ProductStrDescriptor+0x34>)
 8005fa6:	4805      	ldr	r0, [pc, #20]	; (8005fbc <USBD_FS_ProductStrDescriptor+0x38>)
 8005fa8:	f7ff fedf 	bl	8005d6a <USBD_GetString>
  }
  return USBD_StrDesc;
 8005fac:	4b02      	ldr	r3, [pc, #8]	; (8005fb8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3708      	adds	r7, #8
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	200004cc 	.word	0x200004cc
 8005fbc:	080067ec 	.word	0x080067ec

08005fc0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	6039      	str	r1, [r7, #0]
 8005fca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005fcc:	683a      	ldr	r2, [r7, #0]
 8005fce:	4904      	ldr	r1, [pc, #16]	; (8005fe0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005fd0:	4804      	ldr	r0, [pc, #16]	; (8005fe4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005fd2:	f7ff feca 	bl	8005d6a <USBD_GetString>
  return USBD_StrDesc;
 8005fd6:	4b02      	ldr	r3, [pc, #8]	; (8005fe0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3708      	adds	r7, #8
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	200004cc 	.word	0x200004cc
 8005fe4:	08006804 	.word	0x08006804

08005fe8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	4603      	mov	r3, r0
 8005ff0:	6039      	str	r1, [r7, #0]
 8005ff2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	221a      	movs	r2, #26
 8005ff8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005ffa:	f000 f843 	bl	8006084 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005ffe:	4b02      	ldr	r3, [pc, #8]	; (8006008 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006000:	4618      	mov	r0, r3
 8006002:	3708      	adds	r7, #8
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}
 8006008:	20000164 	.word	0x20000164

0800600c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
 8006012:	4603      	mov	r3, r0
 8006014:	6039      	str	r1, [r7, #0]
 8006016:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006018:	79fb      	ldrb	r3, [r7, #7]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d105      	bne.n	800602a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800601e:	683a      	ldr	r2, [r7, #0]
 8006020:	4907      	ldr	r1, [pc, #28]	; (8006040 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006022:	4808      	ldr	r0, [pc, #32]	; (8006044 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006024:	f7ff fea1 	bl	8005d6a <USBD_GetString>
 8006028:	e004      	b.n	8006034 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800602a:	683a      	ldr	r2, [r7, #0]
 800602c:	4904      	ldr	r1, [pc, #16]	; (8006040 <USBD_FS_ConfigStrDescriptor+0x34>)
 800602e:	4805      	ldr	r0, [pc, #20]	; (8006044 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006030:	f7ff fe9b 	bl	8005d6a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006034:	4b02      	ldr	r3, [pc, #8]	; (8006040 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006036:	4618      	mov	r0, r3
 8006038:	3708      	adds	r7, #8
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	200004cc 	.word	0x200004cc
 8006044:	08006818 	.word	0x08006818

08006048 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
 800604e:	4603      	mov	r3, r0
 8006050:	6039      	str	r1, [r7, #0]
 8006052:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006054:	79fb      	ldrb	r3, [r7, #7]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d105      	bne.n	8006066 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800605a:	683a      	ldr	r2, [r7, #0]
 800605c:	4907      	ldr	r1, [pc, #28]	; (800607c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800605e:	4808      	ldr	r0, [pc, #32]	; (8006080 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006060:	f7ff fe83 	bl	8005d6a <USBD_GetString>
 8006064:	e004      	b.n	8006070 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006066:	683a      	ldr	r2, [r7, #0]
 8006068:	4904      	ldr	r1, [pc, #16]	; (800607c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800606a:	4805      	ldr	r0, [pc, #20]	; (8006080 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800606c:	f7ff fe7d 	bl	8005d6a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006070:	4b02      	ldr	r3, [pc, #8]	; (800607c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006072:	4618      	mov	r0, r3
 8006074:	3708      	adds	r7, #8
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	200004cc 	.word	0x200004cc
 8006080:	08006824 	.word	0x08006824

08006084 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800608a:	4b0f      	ldr	r3, [pc, #60]	; (80060c8 <Get_SerialNum+0x44>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006090:	4b0e      	ldr	r3, [pc, #56]	; (80060cc <Get_SerialNum+0x48>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006096:	4b0e      	ldr	r3, [pc, #56]	; (80060d0 <Get_SerialNum+0x4c>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4413      	add	r3, r2
 80060a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d009      	beq.n	80060be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80060aa:	2208      	movs	r2, #8
 80060ac:	4909      	ldr	r1, [pc, #36]	; (80060d4 <Get_SerialNum+0x50>)
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	f000 f814 	bl	80060dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80060b4:	2204      	movs	r2, #4
 80060b6:	4908      	ldr	r1, [pc, #32]	; (80060d8 <Get_SerialNum+0x54>)
 80060b8:	68b8      	ldr	r0, [r7, #8]
 80060ba:	f000 f80f 	bl	80060dc <IntToUnicode>
  }
}
 80060be:	bf00      	nop
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	1fff7a10 	.word	0x1fff7a10
 80060cc:	1fff7a14 	.word	0x1fff7a14
 80060d0:	1fff7a18 	.word	0x1fff7a18
 80060d4:	20000166 	.word	0x20000166
 80060d8:	20000176 	.word	0x20000176

080060dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80060dc:	b480      	push	{r7}
 80060de:	b087      	sub	sp, #28
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	4613      	mov	r3, r2
 80060e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80060ea:	2300      	movs	r3, #0
 80060ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80060ee:	2300      	movs	r3, #0
 80060f0:	75fb      	strb	r3, [r7, #23]
 80060f2:	e027      	b.n	8006144 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	0f1b      	lsrs	r3, r3, #28
 80060f8:	2b09      	cmp	r3, #9
 80060fa:	d80b      	bhi.n	8006114 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	0f1b      	lsrs	r3, r3, #28
 8006100:	b2da      	uxtb	r2, r3
 8006102:	7dfb      	ldrb	r3, [r7, #23]
 8006104:	005b      	lsls	r3, r3, #1
 8006106:	4619      	mov	r1, r3
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	440b      	add	r3, r1
 800610c:	3230      	adds	r2, #48	; 0x30
 800610e:	b2d2      	uxtb	r2, r2
 8006110:	701a      	strb	r2, [r3, #0]
 8006112:	e00a      	b.n	800612a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	0f1b      	lsrs	r3, r3, #28
 8006118:	b2da      	uxtb	r2, r3
 800611a:	7dfb      	ldrb	r3, [r7, #23]
 800611c:	005b      	lsls	r3, r3, #1
 800611e:	4619      	mov	r1, r3
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	440b      	add	r3, r1
 8006124:	3237      	adds	r2, #55	; 0x37
 8006126:	b2d2      	uxtb	r2, r2
 8006128:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	011b      	lsls	r3, r3, #4
 800612e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006130:	7dfb      	ldrb	r3, [r7, #23]
 8006132:	005b      	lsls	r3, r3, #1
 8006134:	3301      	adds	r3, #1
 8006136:	68ba      	ldr	r2, [r7, #8]
 8006138:	4413      	add	r3, r2
 800613a:	2200      	movs	r2, #0
 800613c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800613e:	7dfb      	ldrb	r3, [r7, #23]
 8006140:	3301      	adds	r3, #1
 8006142:	75fb      	strb	r3, [r7, #23]
 8006144:	7dfa      	ldrb	r2, [r7, #23]
 8006146:	79fb      	ldrb	r3, [r7, #7]
 8006148:	429a      	cmp	r2, r3
 800614a:	d3d3      	bcc.n	80060f4 <IntToUnicode+0x18>
  }
}
 800614c:	bf00      	nop
 800614e:	bf00      	nop
 8006150:	371c      	adds	r7, #28
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
	...

0800615c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b08a      	sub	sp, #40	; 0x28
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006164:	f107 0314 	add.w	r3, r7, #20
 8006168:	2200      	movs	r2, #0
 800616a:	601a      	str	r2, [r3, #0]
 800616c:	605a      	str	r2, [r3, #4]
 800616e:	609a      	str	r2, [r3, #8]
 8006170:	60da      	str	r2, [r3, #12]
 8006172:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800617c:	d147      	bne.n	800620e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800617e:	2300      	movs	r3, #0
 8006180:	613b      	str	r3, [r7, #16]
 8006182:	4b25      	ldr	r3, [pc, #148]	; (8006218 <HAL_PCD_MspInit+0xbc>)
 8006184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006186:	4a24      	ldr	r2, [pc, #144]	; (8006218 <HAL_PCD_MspInit+0xbc>)
 8006188:	f043 0301 	orr.w	r3, r3, #1
 800618c:	6313      	str	r3, [r2, #48]	; 0x30
 800618e:	4b22      	ldr	r3, [pc, #136]	; (8006218 <HAL_PCD_MspInit+0xbc>)
 8006190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006192:	f003 0301 	and.w	r3, r3, #1
 8006196:	613b      	str	r3, [r7, #16]
 8006198:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800619a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800619e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061a0:	2302      	movs	r3, #2
 80061a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061a4:	2300      	movs	r3, #0
 80061a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061a8:	2303      	movs	r3, #3
 80061aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80061ac:	230a      	movs	r3, #10
 80061ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061b0:	f107 0314 	add.w	r3, r7, #20
 80061b4:	4619      	mov	r1, r3
 80061b6:	4819      	ldr	r0, [pc, #100]	; (800621c <HAL_PCD_MspInit+0xc0>)
 80061b8:	f7fa fe18 	bl	8000dec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80061bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80061c2:	2300      	movs	r3, #0
 80061c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061c6:	2300      	movs	r3, #0
 80061c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80061ca:	f107 0314 	add.w	r3, r7, #20
 80061ce:	4619      	mov	r1, r3
 80061d0:	4812      	ldr	r0, [pc, #72]	; (800621c <HAL_PCD_MspInit+0xc0>)
 80061d2:	f7fa fe0b 	bl	8000dec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80061d6:	4b10      	ldr	r3, [pc, #64]	; (8006218 <HAL_PCD_MspInit+0xbc>)
 80061d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061da:	4a0f      	ldr	r2, [pc, #60]	; (8006218 <HAL_PCD_MspInit+0xbc>)
 80061dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061e0:	6353      	str	r3, [r2, #52]	; 0x34
 80061e2:	2300      	movs	r3, #0
 80061e4:	60fb      	str	r3, [r7, #12]
 80061e6:	4b0c      	ldr	r3, [pc, #48]	; (8006218 <HAL_PCD_MspInit+0xbc>)
 80061e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ea:	4a0b      	ldr	r2, [pc, #44]	; (8006218 <HAL_PCD_MspInit+0xbc>)
 80061ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80061f0:	6453      	str	r3, [r2, #68]	; 0x44
 80061f2:	4b09      	ldr	r3, [pc, #36]	; (8006218 <HAL_PCD_MspInit+0xbc>)
 80061f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061fa:	60fb      	str	r3, [r7, #12]
 80061fc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80061fe:	2200      	movs	r2, #0
 8006200:	2100      	movs	r1, #0
 8006202:	2043      	movs	r0, #67	; 0x43
 8006204:	f7fa fdbb 	bl	8000d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006208:	2043      	movs	r0, #67	; 0x43
 800620a:	f7fa fdd4 	bl	8000db6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800620e:	bf00      	nop
 8006210:	3728      	adds	r7, #40	; 0x28
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	40023800 	.word	0x40023800
 800621c:	40020000 	.word	0x40020000

08006220 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b082      	sub	sp, #8
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006234:	4619      	mov	r1, r3
 8006236:	4610      	mov	r0, r2
 8006238:	f7fe fdb0 	bl	8004d9c <USBD_LL_SetupStage>
}
 800623c:	bf00      	nop
 800623e:	3708      	adds	r7, #8
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	460b      	mov	r3, r1
 800624e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006256:	78fa      	ldrb	r2, [r7, #3]
 8006258:	6879      	ldr	r1, [r7, #4]
 800625a:	4613      	mov	r3, r2
 800625c:	00db      	lsls	r3, r3, #3
 800625e:	1a9b      	subs	r3, r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	440b      	add	r3, r1
 8006264:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	78fb      	ldrb	r3, [r7, #3]
 800626c:	4619      	mov	r1, r3
 800626e:	f7fe fdea 	bl	8004e46 <USBD_LL_DataOutStage>
}
 8006272:	bf00      	nop
 8006274:	3708      	adds	r7, #8
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b082      	sub	sp, #8
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
 8006282:	460b      	mov	r3, r1
 8006284:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800628c:	78fa      	ldrb	r2, [r7, #3]
 800628e:	6879      	ldr	r1, [r7, #4]
 8006290:	4613      	mov	r3, r2
 8006292:	00db      	lsls	r3, r3, #3
 8006294:	1a9b      	subs	r3, r3, r2
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	440b      	add	r3, r1
 800629a:	3348      	adds	r3, #72	; 0x48
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	78fb      	ldrb	r3, [r7, #3]
 80062a0:	4619      	mov	r1, r3
 80062a2:	f7fe fe33 	bl	8004f0c <USBD_LL_DataInStage>
}
 80062a6:	bf00      	nop
 80062a8:	3708      	adds	r7, #8
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b082      	sub	sp, #8
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80062bc:	4618      	mov	r0, r3
 80062be:	f7fe ff47 	bl	8005150 <USBD_LL_SOF>
}
 80062c2:	bf00      	nop
 80062c4:	3708      	adds	r7, #8
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}

080062ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b084      	sub	sp, #16
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80062d2:	2301      	movs	r3, #1
 80062d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d102      	bne.n	80062e4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80062de:	2300      	movs	r3, #0
 80062e0:	73fb      	strb	r3, [r7, #15]
 80062e2:	e008      	b.n	80062f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d102      	bne.n	80062f2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80062ec:	2301      	movs	r3, #1
 80062ee:	73fb      	strb	r3, [r7, #15]
 80062f0:	e001      	b.n	80062f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80062f2:	f7fa faed 	bl	80008d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80062fc:	7bfa      	ldrb	r2, [r7, #15]
 80062fe:	4611      	mov	r1, r2
 8006300:	4618      	mov	r0, r3
 8006302:	f7fe fee7 	bl	80050d4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800630c:	4618      	mov	r0, r3
 800630e:	f7fe fe93 	bl	8005038 <USBD_LL_Reset>
}
 8006312:	bf00      	nop
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
	...

0800631c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800632a:	4618      	mov	r0, r3
 800632c:	f7fe fee2 	bl	80050f4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	6812      	ldr	r2, [r2, #0]
 800633e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006342:	f043 0301 	orr.w	r3, r3, #1
 8006346:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a1b      	ldr	r3, [r3, #32]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d005      	beq.n	800635c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006350:	4b04      	ldr	r3, [pc, #16]	; (8006364 <HAL_PCD_SuspendCallback+0x48>)
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	4a03      	ldr	r2, [pc, #12]	; (8006364 <HAL_PCD_SuspendCallback+0x48>)
 8006356:	f043 0306 	orr.w	r3, r3, #6
 800635a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800635c:	bf00      	nop
 800635e:	3708      	adds	r7, #8
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	e000ed00 	.word	0xe000ed00

08006368 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006376:	4618      	mov	r0, r3
 8006378:	f7fe fed2 	bl	8005120 <USBD_LL_Resume>
}
 800637c:	bf00      	nop
 800637e:	3708      	adds	r7, #8
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	460b      	mov	r3, r1
 800638e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006396:	78fa      	ldrb	r2, [r7, #3]
 8006398:	4611      	mov	r1, r2
 800639a:	4618      	mov	r0, r3
 800639c:	f7fe ff20 	bl	80051e0 <USBD_LL_IsoOUTIncomplete>
}
 80063a0:	bf00      	nop
 80063a2:	3708      	adds	r7, #8
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	460b      	mov	r3, r1
 80063b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80063ba:	78fa      	ldrb	r2, [r7, #3]
 80063bc:	4611      	mov	r1, r2
 80063be:	4618      	mov	r0, r3
 80063c0:	f7fe fee8 	bl	8005194 <USBD_LL_IsoINIncomplete>
}
 80063c4:	bf00      	nop
 80063c6:	3708      	adds	r7, #8
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80063da:	4618      	mov	r0, r3
 80063dc:	f7fe ff26 	bl	800522c <USBD_LL_DevConnected>
}
 80063e0:	bf00      	nop
 80063e2:	3708      	adds	r7, #8
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7fe ff23 	bl	8005242 <USBD_LL_DevDisconnected>
}
 80063fc:	bf00      	nop
 80063fe:	3708      	adds	r7, #8
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d13c      	bne.n	800648e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006414:	4a20      	ldr	r2, [pc, #128]	; (8006498 <USBD_LL_Init+0x94>)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a1e      	ldr	r2, [pc, #120]	; (8006498 <USBD_LL_Init+0x94>)
 8006420:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006424:	4b1c      	ldr	r3, [pc, #112]	; (8006498 <USBD_LL_Init+0x94>)
 8006426:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800642a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800642c:	4b1a      	ldr	r3, [pc, #104]	; (8006498 <USBD_LL_Init+0x94>)
 800642e:	2204      	movs	r2, #4
 8006430:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006432:	4b19      	ldr	r3, [pc, #100]	; (8006498 <USBD_LL_Init+0x94>)
 8006434:	2202      	movs	r2, #2
 8006436:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006438:	4b17      	ldr	r3, [pc, #92]	; (8006498 <USBD_LL_Init+0x94>)
 800643a:	2200      	movs	r2, #0
 800643c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800643e:	4b16      	ldr	r3, [pc, #88]	; (8006498 <USBD_LL_Init+0x94>)
 8006440:	2202      	movs	r2, #2
 8006442:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8006444:	4b14      	ldr	r3, [pc, #80]	; (8006498 <USBD_LL_Init+0x94>)
 8006446:	2201      	movs	r2, #1
 8006448:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800644a:	4b13      	ldr	r3, [pc, #76]	; (8006498 <USBD_LL_Init+0x94>)
 800644c:	2200      	movs	r2, #0
 800644e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006450:	4b11      	ldr	r3, [pc, #68]	; (8006498 <USBD_LL_Init+0x94>)
 8006452:	2200      	movs	r2, #0
 8006454:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8006456:	4b10      	ldr	r3, [pc, #64]	; (8006498 <USBD_LL_Init+0x94>)
 8006458:	2201      	movs	r2, #1
 800645a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800645c:	4b0e      	ldr	r3, [pc, #56]	; (8006498 <USBD_LL_Init+0x94>)
 800645e:	2200      	movs	r2, #0
 8006460:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006462:	480d      	ldr	r0, [pc, #52]	; (8006498 <USBD_LL_Init+0x94>)
 8006464:	f7fa fe9f 	bl	80011a6 <HAL_PCD_Init>
 8006468:	4603      	mov	r3, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d001      	beq.n	8006472 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800646e:	f7fa fa2f 	bl	80008d0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006472:	2180      	movs	r1, #128	; 0x80
 8006474:	4808      	ldr	r0, [pc, #32]	; (8006498 <USBD_LL_Init+0x94>)
 8006476:	f7fb ffe4 	bl	8002442 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800647a:	2240      	movs	r2, #64	; 0x40
 800647c:	2100      	movs	r1, #0
 800647e:	4806      	ldr	r0, [pc, #24]	; (8006498 <USBD_LL_Init+0x94>)
 8006480:	f7fb ff98 	bl	80023b4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006484:	2280      	movs	r2, #128	; 0x80
 8006486:	2101      	movs	r1, #1
 8006488:	4803      	ldr	r0, [pc, #12]	; (8006498 <USBD_LL_Init+0x94>)
 800648a:	f7fb ff93 	bl	80023b4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	3708      	adds	r7, #8
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}
 8006498:	200006cc 	.word	0x200006cc

0800649c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80064a4:	2300      	movs	r3, #0
 80064a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80064a8:	2300      	movs	r3, #0
 80064aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7fa ff94 	bl	80013e0 <HAL_PCD_Start>
 80064b8:	4603      	mov	r3, r0
 80064ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80064bc:	7bfb      	ldrb	r3, [r7, #15]
 80064be:	4618      	mov	r0, r3
 80064c0:	f000 f930 	bl	8006724 <USBD_Get_USB_Status>
 80064c4:	4603      	mov	r3, r0
 80064c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80064c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b084      	sub	sp, #16
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
 80064da:	4608      	mov	r0, r1
 80064dc:	4611      	mov	r1, r2
 80064de:	461a      	mov	r2, r3
 80064e0:	4603      	mov	r3, r0
 80064e2:	70fb      	strb	r3, [r7, #3]
 80064e4:	460b      	mov	r3, r1
 80064e6:	70bb      	strb	r3, [r7, #2]
 80064e8:	4613      	mov	r3, r2
 80064ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80064ec:	2300      	movs	r3, #0
 80064ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80064f0:	2300      	movs	r3, #0
 80064f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80064fa:	78bb      	ldrb	r3, [r7, #2]
 80064fc:	883a      	ldrh	r2, [r7, #0]
 80064fe:	78f9      	ldrb	r1, [r7, #3]
 8006500:	f7fb fb78 	bl	8001bf4 <HAL_PCD_EP_Open>
 8006504:	4603      	mov	r3, r0
 8006506:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006508:	7bfb      	ldrb	r3, [r7, #15]
 800650a:	4618      	mov	r0, r3
 800650c:	f000 f90a 	bl	8006724 <USBD_Get_USB_Status>
 8006510:	4603      	mov	r3, r0
 8006512:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006514:	7bbb      	ldrb	r3, [r7, #14]
}
 8006516:	4618      	mov	r0, r3
 8006518:	3710      	adds	r7, #16
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b084      	sub	sp, #16
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
 8006526:	460b      	mov	r3, r1
 8006528:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800652a:	2300      	movs	r3, #0
 800652c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800652e:	2300      	movs	r3, #0
 8006530:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006538:	78fa      	ldrb	r2, [r7, #3]
 800653a:	4611      	mov	r1, r2
 800653c:	4618      	mov	r0, r3
 800653e:	f7fb fbc1 	bl	8001cc4 <HAL_PCD_EP_Close>
 8006542:	4603      	mov	r3, r0
 8006544:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006546:	7bfb      	ldrb	r3, [r7, #15]
 8006548:	4618      	mov	r0, r3
 800654a:	f000 f8eb 	bl	8006724 <USBD_Get_USB_Status>
 800654e:	4603      	mov	r3, r0
 8006550:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006552:	7bbb      	ldrb	r3, [r7, #14]
}
 8006554:	4618      	mov	r0, r3
 8006556:	3710      	adds	r7, #16
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	460b      	mov	r3, r1
 8006566:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006568:	2300      	movs	r3, #0
 800656a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800656c:	2300      	movs	r3, #0
 800656e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006576:	78fa      	ldrb	r2, [r7, #3]
 8006578:	4611      	mov	r1, r2
 800657a:	4618      	mov	r0, r3
 800657c:	f7fb fc81 	bl	8001e82 <HAL_PCD_EP_SetStall>
 8006580:	4603      	mov	r3, r0
 8006582:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006584:	7bfb      	ldrb	r3, [r7, #15]
 8006586:	4618      	mov	r0, r3
 8006588:	f000 f8cc 	bl	8006724 <USBD_Get_USB_Status>
 800658c:	4603      	mov	r3, r0
 800658e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006590:	7bbb      	ldrb	r3, [r7, #14]
}
 8006592:	4618      	mov	r0, r3
 8006594:	3710      	adds	r7, #16
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}

0800659a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800659a:	b580      	push	{r7, lr}
 800659c:	b084      	sub	sp, #16
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
 80065a2:	460b      	mov	r3, r1
 80065a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065a6:	2300      	movs	r3, #0
 80065a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065aa:	2300      	movs	r3, #0
 80065ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80065b4:	78fa      	ldrb	r2, [r7, #3]
 80065b6:	4611      	mov	r1, r2
 80065b8:	4618      	mov	r0, r3
 80065ba:	f7fb fcc6 	bl	8001f4a <HAL_PCD_EP_ClrStall>
 80065be:	4603      	mov	r3, r0
 80065c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80065c2:	7bfb      	ldrb	r3, [r7, #15]
 80065c4:	4618      	mov	r0, r3
 80065c6:	f000 f8ad 	bl	8006724 <USBD_Get_USB_Status>
 80065ca:	4603      	mov	r3, r0
 80065cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80065ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3710      	adds	r7, #16
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80065d8:	b480      	push	{r7}
 80065da:	b085      	sub	sp, #20
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	460b      	mov	r3, r1
 80065e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80065ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80065ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	da0b      	bge.n	800660c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80065f4:	78fb      	ldrb	r3, [r7, #3]
 80065f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065fa:	68f9      	ldr	r1, [r7, #12]
 80065fc:	4613      	mov	r3, r2
 80065fe:	00db      	lsls	r3, r3, #3
 8006600:	1a9b      	subs	r3, r3, r2
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	440b      	add	r3, r1
 8006606:	333e      	adds	r3, #62	; 0x3e
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	e00b      	b.n	8006624 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800660c:	78fb      	ldrb	r3, [r7, #3]
 800660e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006612:	68f9      	ldr	r1, [r7, #12]
 8006614:	4613      	mov	r3, r2
 8006616:	00db      	lsls	r3, r3, #3
 8006618:	1a9b      	subs	r3, r3, r2
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	440b      	add	r3, r1
 800661e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006622:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006624:	4618      	mov	r0, r3
 8006626:	3714      	adds	r7, #20
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	460b      	mov	r3, r1
 800663a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800663c:	2300      	movs	r3, #0
 800663e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006640:	2300      	movs	r3, #0
 8006642:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800664a:	78fa      	ldrb	r2, [r7, #3]
 800664c:	4611      	mov	r1, r2
 800664e:	4618      	mov	r0, r3
 8006650:	f7fb faab 	bl	8001baa <HAL_PCD_SetAddress>
 8006654:	4603      	mov	r3, r0
 8006656:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006658:	7bfb      	ldrb	r3, [r7, #15]
 800665a:	4618      	mov	r0, r3
 800665c:	f000 f862 	bl	8006724 <USBD_Get_USB_Status>
 8006660:	4603      	mov	r3, r0
 8006662:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006664:	7bbb      	ldrb	r3, [r7, #14]
}
 8006666:	4618      	mov	r0, r3
 8006668:	3710      	adds	r7, #16
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}

0800666e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800666e:	b580      	push	{r7, lr}
 8006670:	b086      	sub	sp, #24
 8006672:	af00      	add	r7, sp, #0
 8006674:	60f8      	str	r0, [r7, #12]
 8006676:	607a      	str	r2, [r7, #4]
 8006678:	603b      	str	r3, [r7, #0]
 800667a:	460b      	mov	r3, r1
 800667c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800667e:	2300      	movs	r3, #0
 8006680:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006682:	2300      	movs	r3, #0
 8006684:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800668c:	7af9      	ldrb	r1, [r7, #11]
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	f7fb fbac 	bl	8001dee <HAL_PCD_EP_Transmit>
 8006696:	4603      	mov	r3, r0
 8006698:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800669a:	7dfb      	ldrb	r3, [r7, #23]
 800669c:	4618      	mov	r0, r3
 800669e:	f000 f841 	bl	8006724 <USBD_Get_USB_Status>
 80066a2:	4603      	mov	r3, r0
 80066a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80066a6:	7dbb      	ldrb	r3, [r7, #22]
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3718      	adds	r7, #24
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b086      	sub	sp, #24
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	607a      	str	r2, [r7, #4]
 80066ba:	603b      	str	r3, [r7, #0]
 80066bc:	460b      	mov	r3, r1
 80066be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066c0:	2300      	movs	r3, #0
 80066c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066c4:	2300      	movs	r3, #0
 80066c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80066ce:	7af9      	ldrb	r1, [r7, #11]
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	f7fb fb40 	bl	8001d58 <HAL_PCD_EP_Receive>
 80066d8:	4603      	mov	r3, r0
 80066da:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80066dc:	7dfb      	ldrb	r3, [r7, #23]
 80066de:	4618      	mov	r0, r3
 80066e0:	f000 f820 	bl	8006724 <USBD_Get_USB_Status>
 80066e4:	4603      	mov	r3, r0
 80066e6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80066e8:	7dbb      	ldrb	r3, [r7, #22]
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3718      	adds	r7, #24
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
	...

080066f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80066fc:	4b03      	ldr	r3, [pc, #12]	; (800670c <USBD_static_malloc+0x18>)
}
 80066fe:	4618      	mov	r0, r3
 8006700:	370c      	adds	r7, #12
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	200001a0 	.word	0x200001a0

08006710 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]

}
 8006718:	bf00      	nop
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	4603      	mov	r3, r0
 800672c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800672e:	2300      	movs	r3, #0
 8006730:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006732:	79fb      	ldrb	r3, [r7, #7]
 8006734:	2b03      	cmp	r3, #3
 8006736:	d817      	bhi.n	8006768 <USBD_Get_USB_Status+0x44>
 8006738:	a201      	add	r2, pc, #4	; (adr r2, 8006740 <USBD_Get_USB_Status+0x1c>)
 800673a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800673e:	bf00      	nop
 8006740:	08006751 	.word	0x08006751
 8006744:	08006757 	.word	0x08006757
 8006748:	0800675d 	.word	0x0800675d
 800674c:	08006763 	.word	0x08006763
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006750:	2300      	movs	r3, #0
 8006752:	73fb      	strb	r3, [r7, #15]
    break;
 8006754:	e00b      	b.n	800676e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006756:	2303      	movs	r3, #3
 8006758:	73fb      	strb	r3, [r7, #15]
    break;
 800675a:	e008      	b.n	800676e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800675c:	2301      	movs	r3, #1
 800675e:	73fb      	strb	r3, [r7, #15]
    break;
 8006760:	e005      	b.n	800676e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006762:	2303      	movs	r3, #3
 8006764:	73fb      	strb	r3, [r7, #15]
    break;
 8006766:	e002      	b.n	800676e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006768:	2303      	movs	r3, #3
 800676a:	73fb      	strb	r3, [r7, #15]
    break;
 800676c:	bf00      	nop
  }
  return usb_status;
 800676e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006770:	4618      	mov	r0, r3
 8006772:	3714      	adds	r7, #20
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <__libc_init_array>:
 800677c:	b570      	push	{r4, r5, r6, lr}
 800677e:	4d0d      	ldr	r5, [pc, #52]	; (80067b4 <__libc_init_array+0x38>)
 8006780:	4c0d      	ldr	r4, [pc, #52]	; (80067b8 <__libc_init_array+0x3c>)
 8006782:	1b64      	subs	r4, r4, r5
 8006784:	10a4      	asrs	r4, r4, #2
 8006786:	2600      	movs	r6, #0
 8006788:	42a6      	cmp	r6, r4
 800678a:	d109      	bne.n	80067a0 <__libc_init_array+0x24>
 800678c:	4d0b      	ldr	r5, [pc, #44]	; (80067bc <__libc_init_array+0x40>)
 800678e:	4c0c      	ldr	r4, [pc, #48]	; (80067c0 <__libc_init_array+0x44>)
 8006790:	f000 f820 	bl	80067d4 <_init>
 8006794:	1b64      	subs	r4, r4, r5
 8006796:	10a4      	asrs	r4, r4, #2
 8006798:	2600      	movs	r6, #0
 800679a:	42a6      	cmp	r6, r4
 800679c:	d105      	bne.n	80067aa <__libc_init_array+0x2e>
 800679e:	bd70      	pop	{r4, r5, r6, pc}
 80067a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80067a4:	4798      	blx	r3
 80067a6:	3601      	adds	r6, #1
 80067a8:	e7ee      	b.n	8006788 <__libc_init_array+0xc>
 80067aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80067ae:	4798      	blx	r3
 80067b0:	3601      	adds	r6, #1
 80067b2:	e7f2      	b.n	800679a <__libc_init_array+0x1e>
 80067b4:	08006854 	.word	0x08006854
 80067b8:	08006854 	.word	0x08006854
 80067bc:	08006854 	.word	0x08006854
 80067c0:	08006858 	.word	0x08006858

080067c4 <memset>:
 80067c4:	4402      	add	r2, r0
 80067c6:	4603      	mov	r3, r0
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d100      	bne.n	80067ce <memset+0xa>
 80067cc:	4770      	bx	lr
 80067ce:	f803 1b01 	strb.w	r1, [r3], #1
 80067d2:	e7f9      	b.n	80067c8 <memset+0x4>

080067d4 <_init>:
 80067d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067d6:	bf00      	nop
 80067d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067da:	bc08      	pop	{r3}
 80067dc:	469e      	mov	lr, r3
 80067de:	4770      	bx	lr

080067e0 <_fini>:
 80067e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067e2:	bf00      	nop
 80067e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067e6:	bc08      	pop	{r3}
 80067e8:	469e      	mov	lr, r3
 80067ea:	4770      	bx	lr
