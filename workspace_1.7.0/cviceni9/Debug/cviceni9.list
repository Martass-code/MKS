
cviceni9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f2c  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000430  080080dc  080080dc  000180dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800850c  0800850c  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  0800850c  0800850c  0001850c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008514  08008514  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008514  08008514  00018514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008518  08008518  00018518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  0800851c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020164  2**0
                  CONTENTS
 10 .bss          00000954  20000164  20000164  00020164  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ab8  20000ab8  00020164  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014faa  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002dd8  00000000  00000000  0003513e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cd0  00000000  00000000  00037f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bc8  00000000  00000000  00038be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002587e  00000000  00000000  000397b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010a7a  00000000  00000000  0005f02e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5fd8  00000000  00000000  0006faa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00145a80  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003798  00000000  00000000  00145ad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000164 	.word	0x20000164
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080080c4 	.word	0x080080c4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000168 	.word	0x20000168
 80001ec:	080080c4 	.word	0x080080c4

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_uldivmod>:
 8000b3c:	b953      	cbnz	r3, 8000b54 <__aeabi_uldivmod+0x18>
 8000b3e:	b94a      	cbnz	r2, 8000b54 <__aeabi_uldivmod+0x18>
 8000b40:	2900      	cmp	r1, #0
 8000b42:	bf08      	it	eq
 8000b44:	2800      	cmpeq	r0, #0
 8000b46:	bf1c      	itt	ne
 8000b48:	f04f 31ff 	movne.w	r1, #4294967295
 8000b4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b50:	f000 b96e 	b.w	8000e30 <__aeabi_idiv0>
 8000b54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b5c:	f000 f806 	bl	8000b6c <__udivmoddi4>
 8000b60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b68:	b004      	add	sp, #16
 8000b6a:	4770      	bx	lr

08000b6c <__udivmoddi4>:
 8000b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b70:	9d08      	ldr	r5, [sp, #32]
 8000b72:	4604      	mov	r4, r0
 8000b74:	468c      	mov	ip, r1
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f040 8083 	bne.w	8000c82 <__udivmoddi4+0x116>
 8000b7c:	428a      	cmp	r2, r1
 8000b7e:	4617      	mov	r7, r2
 8000b80:	d947      	bls.n	8000c12 <__udivmoddi4+0xa6>
 8000b82:	fab2 f282 	clz	r2, r2
 8000b86:	b142      	cbz	r2, 8000b9a <__udivmoddi4+0x2e>
 8000b88:	f1c2 0020 	rsb	r0, r2, #32
 8000b8c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b90:	4091      	lsls	r1, r2
 8000b92:	4097      	lsls	r7, r2
 8000b94:	ea40 0c01 	orr.w	ip, r0, r1
 8000b98:	4094      	lsls	r4, r2
 8000b9a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b9e:	0c23      	lsrs	r3, r4, #16
 8000ba0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ba4:	fa1f fe87 	uxth.w	lr, r7
 8000ba8:	fb08 c116 	mls	r1, r8, r6, ip
 8000bac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb0:	fb06 f10e 	mul.w	r1, r6, lr
 8000bb4:	4299      	cmp	r1, r3
 8000bb6:	d909      	bls.n	8000bcc <__udivmoddi4+0x60>
 8000bb8:	18fb      	adds	r3, r7, r3
 8000bba:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bbe:	f080 8119 	bcs.w	8000df4 <__udivmoddi4+0x288>
 8000bc2:	4299      	cmp	r1, r3
 8000bc4:	f240 8116 	bls.w	8000df4 <__udivmoddi4+0x288>
 8000bc8:	3e02      	subs	r6, #2
 8000bca:	443b      	add	r3, r7
 8000bcc:	1a5b      	subs	r3, r3, r1
 8000bce:	b2a4      	uxth	r4, r4
 8000bd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bd4:	fb08 3310 	mls	r3, r8, r0, r3
 8000bd8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bdc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000be0:	45a6      	cmp	lr, r4
 8000be2:	d909      	bls.n	8000bf8 <__udivmoddi4+0x8c>
 8000be4:	193c      	adds	r4, r7, r4
 8000be6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bea:	f080 8105 	bcs.w	8000df8 <__udivmoddi4+0x28c>
 8000bee:	45a6      	cmp	lr, r4
 8000bf0:	f240 8102 	bls.w	8000df8 <__udivmoddi4+0x28c>
 8000bf4:	3802      	subs	r0, #2
 8000bf6:	443c      	add	r4, r7
 8000bf8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bfc:	eba4 040e 	sub.w	r4, r4, lr
 8000c00:	2600      	movs	r6, #0
 8000c02:	b11d      	cbz	r5, 8000c0c <__udivmoddi4+0xa0>
 8000c04:	40d4      	lsrs	r4, r2
 8000c06:	2300      	movs	r3, #0
 8000c08:	e9c5 4300 	strd	r4, r3, [r5]
 8000c0c:	4631      	mov	r1, r6
 8000c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c12:	b902      	cbnz	r2, 8000c16 <__udivmoddi4+0xaa>
 8000c14:	deff      	udf	#255	; 0xff
 8000c16:	fab2 f282 	clz	r2, r2
 8000c1a:	2a00      	cmp	r2, #0
 8000c1c:	d150      	bne.n	8000cc0 <__udivmoddi4+0x154>
 8000c1e:	1bcb      	subs	r3, r1, r7
 8000c20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c24:	fa1f f887 	uxth.w	r8, r7
 8000c28:	2601      	movs	r6, #1
 8000c2a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c2e:	0c21      	lsrs	r1, r4, #16
 8000c30:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c38:	fb08 f30c 	mul.w	r3, r8, ip
 8000c3c:	428b      	cmp	r3, r1
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0xe4>
 8000c40:	1879      	adds	r1, r7, r1
 8000c42:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c46:	d202      	bcs.n	8000c4e <__udivmoddi4+0xe2>
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	f200 80e9 	bhi.w	8000e20 <__udivmoddi4+0x2b4>
 8000c4e:	4684      	mov	ip, r0
 8000c50:	1ac9      	subs	r1, r1, r3
 8000c52:	b2a3      	uxth	r3, r4
 8000c54:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c58:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c5c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c60:	fb08 f800 	mul.w	r8, r8, r0
 8000c64:	45a0      	cmp	r8, r4
 8000c66:	d907      	bls.n	8000c78 <__udivmoddi4+0x10c>
 8000c68:	193c      	adds	r4, r7, r4
 8000c6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0x10a>
 8000c70:	45a0      	cmp	r8, r4
 8000c72:	f200 80d9 	bhi.w	8000e28 <__udivmoddi4+0x2bc>
 8000c76:	4618      	mov	r0, r3
 8000c78:	eba4 0408 	sub.w	r4, r4, r8
 8000c7c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c80:	e7bf      	b.n	8000c02 <__udivmoddi4+0x96>
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0x12e>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80b1 	beq.w	8000dee <__udivmoddi4+0x282>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x1cc>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0x140>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80b8 	bhi.w	8000e1c <__udivmoddi4+0x2b0>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0103 	sbc.w	r1, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	468c      	mov	ip, r1
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0a8      	beq.n	8000c0c <__udivmoddi4+0xa0>
 8000cba:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cbe:	e7a5      	b.n	8000c0c <__udivmoddi4+0xa0>
 8000cc0:	f1c2 0320 	rsb	r3, r2, #32
 8000cc4:	fa20 f603 	lsr.w	r6, r0, r3
 8000cc8:	4097      	lsls	r7, r2
 8000cca:	fa01 f002 	lsl.w	r0, r1, r2
 8000cce:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd2:	40d9      	lsrs	r1, r3
 8000cd4:	4330      	orrs	r0, r6
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000cdc:	fa1f f887 	uxth.w	r8, r7
 8000ce0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ce4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce8:	fb06 f108 	mul.w	r1, r6, r8
 8000cec:	4299      	cmp	r1, r3
 8000cee:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x19c>
 8000cf4:	18fb      	adds	r3, r7, r3
 8000cf6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cfa:	f080 808d 	bcs.w	8000e18 <__udivmoddi4+0x2ac>
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	f240 808a 	bls.w	8000e18 <__udivmoddi4+0x2ac>
 8000d04:	3e02      	subs	r6, #2
 8000d06:	443b      	add	r3, r7
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b281      	uxth	r1, r0
 8000d0c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d10:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d18:	fb00 f308 	mul.w	r3, r0, r8
 8000d1c:	428b      	cmp	r3, r1
 8000d1e:	d907      	bls.n	8000d30 <__udivmoddi4+0x1c4>
 8000d20:	1879      	adds	r1, r7, r1
 8000d22:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d26:	d273      	bcs.n	8000e10 <__udivmoddi4+0x2a4>
 8000d28:	428b      	cmp	r3, r1
 8000d2a:	d971      	bls.n	8000e10 <__udivmoddi4+0x2a4>
 8000d2c:	3802      	subs	r0, #2
 8000d2e:	4439      	add	r1, r7
 8000d30:	1acb      	subs	r3, r1, r3
 8000d32:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d36:	e778      	b.n	8000c2a <__udivmoddi4+0xbe>
 8000d38:	f1c6 0c20 	rsb	ip, r6, #32
 8000d3c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d40:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d44:	431c      	orrs	r4, r3
 8000d46:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d52:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d56:	431f      	orrs	r7, r3
 8000d58:	0c3b      	lsrs	r3, r7, #16
 8000d5a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d5e:	fa1f f884 	uxth.w	r8, r4
 8000d62:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d66:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d6a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d6e:	458a      	cmp	sl, r1
 8000d70:	fa02 f206 	lsl.w	r2, r2, r6
 8000d74:	fa00 f306 	lsl.w	r3, r0, r6
 8000d78:	d908      	bls.n	8000d8c <__udivmoddi4+0x220>
 8000d7a:	1861      	adds	r1, r4, r1
 8000d7c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d80:	d248      	bcs.n	8000e14 <__udivmoddi4+0x2a8>
 8000d82:	458a      	cmp	sl, r1
 8000d84:	d946      	bls.n	8000e14 <__udivmoddi4+0x2a8>
 8000d86:	f1a9 0902 	sub.w	r9, r9, #2
 8000d8a:	4421      	add	r1, r4
 8000d8c:	eba1 010a 	sub.w	r1, r1, sl
 8000d90:	b2bf      	uxth	r7, r7
 8000d92:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d96:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d9a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d9e:	fb00 f808 	mul.w	r8, r0, r8
 8000da2:	45b8      	cmp	r8, r7
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x24a>
 8000da6:	19e7      	adds	r7, r4, r7
 8000da8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dac:	d22e      	bcs.n	8000e0c <__udivmoddi4+0x2a0>
 8000dae:	45b8      	cmp	r8, r7
 8000db0:	d92c      	bls.n	8000e0c <__udivmoddi4+0x2a0>
 8000db2:	3802      	subs	r0, #2
 8000db4:	4427      	add	r7, r4
 8000db6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dba:	eba7 0708 	sub.w	r7, r7, r8
 8000dbe:	fba0 8902 	umull	r8, r9, r0, r2
 8000dc2:	454f      	cmp	r7, r9
 8000dc4:	46c6      	mov	lr, r8
 8000dc6:	4649      	mov	r1, r9
 8000dc8:	d31a      	bcc.n	8000e00 <__udivmoddi4+0x294>
 8000dca:	d017      	beq.n	8000dfc <__udivmoddi4+0x290>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x27a>
 8000dce:	ebb3 020e 	subs.w	r2, r3, lr
 8000dd2:	eb67 0701 	sbc.w	r7, r7, r1
 8000dd6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000dda:	40f2      	lsrs	r2, r6
 8000ddc:	ea4c 0202 	orr.w	r2, ip, r2
 8000de0:	40f7      	lsrs	r7, r6
 8000de2:	e9c5 2700 	strd	r2, r7, [r5]
 8000de6:	2600      	movs	r6, #0
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	462e      	mov	r6, r5
 8000df0:	4628      	mov	r0, r5
 8000df2:	e70b      	b.n	8000c0c <__udivmoddi4+0xa0>
 8000df4:	4606      	mov	r6, r0
 8000df6:	e6e9      	b.n	8000bcc <__udivmoddi4+0x60>
 8000df8:	4618      	mov	r0, r3
 8000dfa:	e6fd      	b.n	8000bf8 <__udivmoddi4+0x8c>
 8000dfc:	4543      	cmp	r3, r8
 8000dfe:	d2e5      	bcs.n	8000dcc <__udivmoddi4+0x260>
 8000e00:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e04:	eb69 0104 	sbc.w	r1, r9, r4
 8000e08:	3801      	subs	r0, #1
 8000e0a:	e7df      	b.n	8000dcc <__udivmoddi4+0x260>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	e7d2      	b.n	8000db6 <__udivmoddi4+0x24a>
 8000e10:	4660      	mov	r0, ip
 8000e12:	e78d      	b.n	8000d30 <__udivmoddi4+0x1c4>
 8000e14:	4681      	mov	r9, r0
 8000e16:	e7b9      	b.n	8000d8c <__udivmoddi4+0x220>
 8000e18:	4666      	mov	r6, ip
 8000e1a:	e775      	b.n	8000d08 <__udivmoddi4+0x19c>
 8000e1c:	4630      	mov	r0, r6
 8000e1e:	e74a      	b.n	8000cb6 <__udivmoddi4+0x14a>
 8000e20:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e24:	4439      	add	r1, r7
 8000e26:	e713      	b.n	8000c50 <__udivmoddi4+0xe4>
 8000e28:	3802      	subs	r0, #2
 8000e2a:	443c      	add	r4, r7
 8000e2c:	e724      	b.n	8000c78 <__udivmoddi4+0x10c>
 8000e2e:	bf00      	nop

08000e30 <__aeabi_idiv0>:
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop

08000e34 <step>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */
void step(int8_t x_dif, int8_t y_dif, bool stisk, bool btn){ //pohne kurzorem o zadany rozdil
 8000e34:	b590      	push	{r4, r7, lr}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4604      	mov	r4, r0
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	4611      	mov	r1, r2
 8000e40:	461a      	mov	r2, r3
 8000e42:	4623      	mov	r3, r4
 8000e44:	71fb      	strb	r3, [r7, #7]
 8000e46:	4603      	mov	r3, r0
 8000e48:	71bb      	strb	r3, [r7, #6]
 8000e4a:	460b      	mov	r3, r1
 8000e4c:	717b      	strb	r3, [r7, #5]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	713b      	strb	r3, [r7, #4]
	if(btn){
 8000e52:	793b      	ldrb	r3, [r7, #4]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d015      	beq.n	8000e84 <step+0x50>
	  //odeslani jednoho reportu(kroku) mysi provede kod:
	  uint8_t buff[4]; //
	  buff[0] = stisk;//0x01; // stiskni leve tlacitko //3bity pro tlacitka
 8000e58:	797b      	ldrb	r3, [r7, #5]
 8000e5a:	733b      	strb	r3, [r7, #12]
	  buff[1] = (int8_t)(x_dif); //posun ve smeru x - znamen cislo
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	737b      	strb	r3, [r7, #13]
	  buff[2] = (int8_t)(y_dif); //posun ve smeru y -znamen cislo
 8000e60:	79bb      	ldrb	r3, [r7, #6]
 8000e62:	73bb      	strb	r3, [r7, #14]
	  buff[3] = 0; // bez scrollu
 8000e64:	2300      	movs	r3, #0
 8000e66:	73fb      	strb	r3, [r7, #15]
	  USBD_HID_SendReport(&hUsbDeviceFS, buff, sizeof(buff)); //odeslani reportu
 8000e68:	f107 030c 	add.w	r3, r7, #12
 8000e6c:	2204      	movs	r2, #4
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4806      	ldr	r0, [pc, #24]	; (8000e8c <step+0x58>)
 8000e72:	f004 fd2f 	bl	80058d4 <USBD_HID_SendReport>
	  HAL_Delay(USBD_HID_GetPollingInterval(&hUsbDeviceFS)); //delay aby stihl pocitac report odebrat (pc se dotazuje v intervalu
 8000e76:	4805      	ldr	r0, [pc, #20]	; (8000e8c <step+0x58>)
 8000e78:	f004 fd54 	bl	8005924 <USBD_HID_GetPollingInterval>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 fd4a 	bl	8001918 <HAL_Delay>
	  //HAL_Delay(50);//vetsi zpomaleni
	}

}
 8000e84:	bf00      	nop
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd90      	pop	{r4, r7, pc}
 8000e8c:	200001e0 	.word	0x200001e0

08000e90 <kruznice>:

void kruznice(uint8_t polomer, uint8_t rozliseni, bool stisk,  bool btn){
 8000e90:	b5b0      	push	{r4, r5, r7, lr}
 8000e92:	ed2d 8b02 	vpush	{d8}
 8000e96:	b088      	sub	sp, #32
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4604      	mov	r4, r0
 8000e9c:	4608      	mov	r0, r1
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4623      	mov	r3, r4
 8000ea4:	71fb      	strb	r3, [r7, #7]
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71bb      	strb	r3, [r7, #6]
 8000eaa:	460b      	mov	r3, r1
 8000eac:	717b      	strb	r3, [r7, #5]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	713b      	strb	r3, [r7, #4]
	//if (btn) {
		float_t x = 0; //aktulane vypoctena pozice
 8000eb2:	f04f 0300 	mov.w	r3, #0
 8000eb6:	613b      	str	r3, [r7, #16]
		float_t y = 0;
 8000eb8:	f04f 0300 	mov.w	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]

		float_t sx = 0; //minula pozice
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	61fb      	str	r3, [r7, #28]
		float_t sy = 0;
 8000ec4:	f04f 0300 	mov.w	r3, #0
 8000ec8:	61bb      	str	r3, [r7, #24]
                                               //pro dokresleni kruhu
		for (float_t uhel = 0; uhel < (2*M_PI + 2*M_PI/rozliseni); uhel = uhel + 2*M_PI/rozliseni) { //
 8000eca:	f04f 0300 	mov.w	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	e067      	b.n	8000fa2 <kruznice+0x112>

			x = polomer*cosf(uhel);
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	ee07 3a90 	vmov	s15, r3
 8000ed8:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000edc:	ed97 0a05 	vldr	s0, [r7, #20]
 8000ee0:	f006 fb44 	bl	800756c <cosf>
 8000ee4:	eef0 7a40 	vmov.f32	s15, s0
 8000ee8:	ee68 7a27 	vmul.f32	s15, s16, s15
 8000eec:	edc7 7a04 	vstr	s15, [r7, #16]
			y = polomer*sinf(uhel);
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	ee07 3a90 	vmov	s15, r3
 8000ef6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000efa:	ed97 0a05 	vldr	s0, [r7, #20]
 8000efe:	f006 fb75 	bl	80075ec <sinf>
 8000f02:	eef0 7a40 	vmov.f32	s15, s0
 8000f06:	ee68 7a27 	vmul.f32	s15, s16, s15
 8000f0a:	edc7 7a03 	vstr	s15, [r7, #12]

			step((x-sx), (y-sy), stisk, HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)); //provedeni posunu //lepsi predavat port a pin btn
 8000f0e:	ed97 7a04 	vldr	s14, [r7, #16]
 8000f12:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f1e:	edc7 7a00 	vstr	s15, [r7]
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	b25c      	sxtb	r4, r3
 8000f26:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f2a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f36:	edc7 7a00 	vstr	s15, [r7]
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	b25d      	sxtb	r5, r3
 8000f3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f42:	482f      	ldr	r0, [pc, #188]	; (8001000 <kruznice+0x170>)
 8000f44:	f000 ffca 	bl	8001edc <HAL_GPIO_ReadPin>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	bf14      	ite	ne
 8000f4e:	2301      	movne	r3, #1
 8000f50:	2300      	moveq	r3, #0
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	797a      	ldrb	r2, [r7, #5]
 8000f56:	4629      	mov	r1, r5
 8000f58:	4620      	mov	r0, r4
 8000f5a:	f7ff ff6b 	bl	8000e34 <step>
			sx = x; //aktualizovani minule pozice
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	61fb      	str	r3, [r7, #28]
			sy = y;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	61bb      	str	r3, [r7, #24]
		for (float_t uhel = 0; uhel < (2*M_PI + 2*M_PI/rozliseni); uhel = uhel + 2*M_PI/rozliseni) { //
 8000f66:	6978      	ldr	r0, [r7, #20]
 8000f68:	f7ff faa6 	bl	80004b8 <__aeabi_f2d>
 8000f6c:	4604      	mov	r4, r0
 8000f6e:	460d      	mov	r5, r1
 8000f70:	79bb      	ldrb	r3, [r7, #6]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff fa8e 	bl	8000494 <__aeabi_i2d>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	a11e      	add	r1, pc, #120	; (adr r1, 8000ff8 <kruznice+0x168>)
 8000f7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f82:	f7ff fc1b 	bl	80007bc <__aeabi_ddiv>
 8000f86:	4602      	mov	r2, r0
 8000f88:	460b      	mov	r3, r1
 8000f8a:	4620      	mov	r0, r4
 8000f8c:	4629      	mov	r1, r5
 8000f8e:	f7ff f935 	bl	80001fc <__adddf3>
 8000f92:	4602      	mov	r2, r0
 8000f94:	460b      	mov	r3, r1
 8000f96:	4610      	mov	r0, r2
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f7ff fd7f 	bl	8000a9c <__aeabi_d2f>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	617b      	str	r3, [r7, #20]
 8000fa2:	6978      	ldr	r0, [r7, #20]
 8000fa4:	f7ff fa88 	bl	80004b8 <__aeabi_f2d>
 8000fa8:	4604      	mov	r4, r0
 8000faa:	460d      	mov	r5, r1
 8000fac:	79bb      	ldrb	r3, [r7, #6]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff fa70 	bl	8000494 <__aeabi_i2d>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	a10f      	add	r1, pc, #60	; (adr r1, 8000ff8 <kruznice+0x168>)
 8000fba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000fbe:	f7ff fbfd 	bl	80007bc <__aeabi_ddiv>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	4610      	mov	r0, r2
 8000fc8:	4619      	mov	r1, r3
 8000fca:	a30b      	add	r3, pc, #44	; (adr r3, 8000ff8 <kruznice+0x168>)
 8000fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd0:	f7ff f914 	bl	80001fc <__adddf3>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	4620      	mov	r0, r4
 8000fda:	4629      	mov	r1, r5
 8000fdc:	f7ff fd36 	bl	8000a4c <__aeabi_dcmplt>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	f47f af75 	bne.w	8000ed2 <kruznice+0x42>


		}
}
 8000fe8:	bf00      	nop
 8000fea:	bf00      	nop
 8000fec:	3720      	adds	r7, #32
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	ecbd 8b02 	vpop	{d8}
 8000ff4:	bdb0      	pop	{r4, r5, r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	54442d18 	.word	0x54442d18
 8000ffc:	401921fb 	.word	0x401921fb
 8001000:	40020800 	.word	0x40020800
 8001004:	00000000 	.word	0x00000000

08001008 <cast_kruznice>:

	void cast_kruznice(uint8_t polomer, uint8_t rozliseni, float_t pocatek, float_t konec, bool stisk, bool btn) {
 8001008:	b5b0      	push	{r4, r5, r7, lr}
 800100a:	ed2d 8b02 	vpush	{d8}
 800100e:	b08a      	sub	sp, #40	; 0x28
 8001010:	af00      	add	r7, sp, #0
 8001012:	4604      	mov	r4, r0
 8001014:	4608      	mov	r0, r1
 8001016:	ed87 0a02 	vstr	s0, [r7, #8]
 800101a:	edc7 0a01 	vstr	s1, [r7, #4]
 800101e:	4611      	mov	r1, r2
 8001020:	461a      	mov	r2, r3
 8001022:	4623      	mov	r3, r4
 8001024:	73fb      	strb	r3, [r7, #15]
 8001026:	4603      	mov	r3, r0
 8001028:	73bb      	strb	r3, [r7, #14]
 800102a:	460b      	mov	r3, r1
 800102c:	737b      	strb	r3, [r7, #13]
 800102e:	4613      	mov	r3, r2
 8001030:	733b      	strb	r3, [r7, #12]

		float_t x = 0; //aktulane vypoctena pozice
 8001032:	f04f 0300 	mov.w	r3, #0
 8001036:	61bb      	str	r3, [r7, #24]
		float_t y = 0;
 8001038:	f04f 0300 	mov.w	r3, #0
 800103c:	617b      	str	r3, [r7, #20]

		float_t sx = 0; //minula pozice
 800103e:	f04f 0300 	mov.w	r3, #0
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
		float_t sy = 0;
 8001044:	f04f 0300 	mov.w	r3, #0
 8001048:	623b      	str	r3, [r7, #32]

		for (float_t uhel = pocatek; uhel < konec; uhel = uhel + 2 * M_PI / rozliseni) { //
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	61fb      	str	r3, [r7, #28]
 800104e:	e067      	b.n	8001120 <cast_kruznice+0x118>

			x = polomer * cosf(uhel);
 8001050:	7bfb      	ldrb	r3, [r7, #15]
 8001052:	ee07 3a90 	vmov	s15, r3
 8001056:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800105a:	ed97 0a07 	vldr	s0, [r7, #28]
 800105e:	f006 fa85 	bl	800756c <cosf>
 8001062:	eef0 7a40 	vmov.f32	s15, s0
 8001066:	ee68 7a27 	vmul.f32	s15, s16, s15
 800106a:	edc7 7a06 	vstr	s15, [r7, #24]
			y = polomer * sinf(uhel);
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	ee07 3a90 	vmov	s15, r3
 8001074:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001078:	ed97 0a07 	vldr	s0, [r7, #28]
 800107c:	f006 fab6 	bl	80075ec <sinf>
 8001080:	eef0 7a40 	vmov.f32	s15, s0
 8001084:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001088:	edc7 7a05 	vstr	s15, [r7, #20]

			step((x - sx), (y - sy), stisk, HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)); //provedeni posunu //lepsi predavat port a pin btn
 800108c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001090:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001094:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001098:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800109c:	edc7 7a00 	vstr	s15, [r7]
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	b25c      	sxtb	r4, r3
 80010a4:	ed97 7a05 	vldr	s14, [r7, #20]
 80010a8:	edd7 7a08 	vldr	s15, [r7, #32]
 80010ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010b4:	edc7 7a00 	vstr	s15, [r7]
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	b25d      	sxtb	r5, r3
 80010bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010c0:	4821      	ldr	r0, [pc, #132]	; (8001148 <cast_kruznice+0x140>)
 80010c2:	f000 ff0b 	bl	8001edc <HAL_GPIO_ReadPin>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	bf14      	ite	ne
 80010cc:	2301      	movne	r3, #1
 80010ce:	2300      	moveq	r3, #0
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	7b7a      	ldrb	r2, [r7, #13]
 80010d4:	4629      	mov	r1, r5
 80010d6:	4620      	mov	r0, r4
 80010d8:	f7ff feac 	bl	8000e34 <step>
			sx = x; //aktualizovani minule pozice
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	627b      	str	r3, [r7, #36]	; 0x24
			sy = y;
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	623b      	str	r3, [r7, #32]
		for (float_t uhel = pocatek; uhel < konec; uhel = uhel + 2 * M_PI / rozliseni) { //
 80010e4:	69f8      	ldr	r0, [r7, #28]
 80010e6:	f7ff f9e7 	bl	80004b8 <__aeabi_f2d>
 80010ea:	4604      	mov	r4, r0
 80010ec:	460d      	mov	r5, r1
 80010ee:	7bbb      	ldrb	r3, [r7, #14]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff f9cf 	bl	8000494 <__aeabi_i2d>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	a111      	add	r1, pc, #68	; (adr r1, 8001140 <cast_kruznice+0x138>)
 80010fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001100:	f7ff fb5c 	bl	80007bc <__aeabi_ddiv>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	4620      	mov	r0, r4
 800110a:	4629      	mov	r1, r5
 800110c:	f7ff f876 	bl	80001fc <__adddf3>
 8001110:	4602      	mov	r2, r0
 8001112:	460b      	mov	r3, r1
 8001114:	4610      	mov	r0, r2
 8001116:	4619      	mov	r1, r3
 8001118:	f7ff fcc0 	bl	8000a9c <__aeabi_d2f>
 800111c:	4603      	mov	r3, r0
 800111e:	61fb      	str	r3, [r7, #28]
 8001120:	ed97 7a07 	vldr	s14, [r7, #28]
 8001124:	edd7 7a01 	vldr	s15, [r7, #4]
 8001128:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800112c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001130:	d48e      	bmi.n	8001050 <cast_kruznice+0x48>

		}


}
 8001132:	bf00      	nop
 8001134:	bf00      	nop
 8001136:	3728      	adds	r7, #40	; 0x28
 8001138:	46bd      	mov	sp, r7
 800113a:	ecbd 8b02 	vpop	{d8}
 800113e:	bdb0      	pop	{r4, r5, r7, pc}
 8001140:	54442d18 	.word	0x54442d18
 8001144:	401921fb 	.word	0x401921fb
 8001148:	40020800 	.word	0x40020800

0800114c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001150:	f000 fb70 	bl	8001834 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001154:	f000 f902 	bl	800135c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001158:	f000 f994 	bl	8001484 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800115c:	f000 f968 	bl	8001430 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8001160:	f005 fd92 	bl	8006c88 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {   //kresleni probehne pouze kdyz je zmacknute tlacitko

	  if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)){//kdyz se zmackne tlacitko, zacne se vykreslovat smajlik
 8001164:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001168:	4879      	ldr	r0, [pc, #484]	; (8001350 <main+0x204>)
 800116a:	f000 feb7 	bl	8001edc <HAL_GPIO_ReadPin>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d0f7      	beq.n	8001164 <main+0x18>
      //kdykoliv je tlacitko pusteno je kresleni peruseno
	  kruznice(100, 50, 1, HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)); //oblicej
 8001174:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001178:	4875      	ldr	r0, [pc, #468]	; (8001350 <main+0x204>)
 800117a:	f000 feaf 	bl	8001edc <HAL_GPIO_ReadPin>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	bf14      	ite	ne
 8001184:	2301      	movne	r3, #1
 8001186:	2300      	moveq	r3, #0
 8001188:	b2db      	uxtb	r3, r3
 800118a:	2201      	movs	r2, #1
 800118c:	2132      	movs	r1, #50	; 0x32
 800118e:	2064      	movs	r0, #100	; 0x64
 8001190:	f7ff fe7e 	bl	8000e90 <kruznice>
	  step(0, 0, 0, HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)); // pusteni praveho tlacitka
 8001194:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001198:	486d      	ldr	r0, [pc, #436]	; (8001350 <main+0x204>)
 800119a:	f000 fe9f 	bl	8001edc <HAL_GPIO_ReadPin>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	bf14      	ite	ne
 80011a4:	2301      	movne	r3, #1
 80011a6:	2300      	moveq	r3, #0
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2200      	movs	r2, #0
 80011ac:	2100      	movs	r1, #0
 80011ae:	2000      	movs	r0, #0
 80011b0:	f7ff fe40 	bl	8000e34 <step>

	  step(-30, -30, 0, HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)); //posun na prave oko
 80011b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011b8:	4865      	ldr	r0, [pc, #404]	; (8001350 <main+0x204>)
 80011ba:	f000 fe8f 	bl	8001edc <HAL_GPIO_ReadPin>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	bf14      	ite	ne
 80011c4:	2301      	movne	r3, #1
 80011c6:	2300      	moveq	r3, #0
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	2200      	movs	r2, #0
 80011cc:	f06f 011d 	mvn.w	r1, #29
 80011d0:	f06f 001d 	mvn.w	r0, #29
 80011d4:	f7ff fe2e 	bl	8000e34 <step>
	  kruznice(15, 20, 1, HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)); //oko
 80011d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011dc:	485c      	ldr	r0, [pc, #368]	; (8001350 <main+0x204>)
 80011de:	f000 fe7d 	bl	8001edc <HAL_GPIO_ReadPin>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	bf14      	ite	ne
 80011e8:	2301      	movne	r3, #1
 80011ea:	2300      	moveq	r3, #0
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	2201      	movs	r2, #1
 80011f0:	2114      	movs	r1, #20
 80011f2:	200f      	movs	r0, #15
 80011f4:	f7ff fe4c 	bl	8000e90 <kruznice>
	  step(0, 0, 0, HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)); // pusteni praveho tlacitka
 80011f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011fc:	4854      	ldr	r0, [pc, #336]	; (8001350 <main+0x204>)
 80011fe:	f000 fe6d 	bl	8001edc <HAL_GPIO_ReadPin>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	bf14      	ite	ne
 8001208:	2301      	movne	r3, #1
 800120a:	2300      	moveq	r3, #0
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2200      	movs	r2, #0
 8001210:	2100      	movs	r1, #0
 8001212:	2000      	movs	r0, #0
 8001214:	f7ff fe0e 	bl	8000e34 <step>
//-40-15
	  step(-90, 0, 0, HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)); //posun na leve oko
 8001218:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800121c:	484c      	ldr	r0, [pc, #304]	; (8001350 <main+0x204>)
 800121e:	f000 fe5d 	bl	8001edc <HAL_GPIO_ReadPin>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	bf14      	ite	ne
 8001228:	2301      	movne	r3, #1
 800122a:	2300      	moveq	r3, #0
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2200      	movs	r2, #0
 8001230:	2100      	movs	r1, #0
 8001232:	f06f 0059 	mvn.w	r0, #89	; 0x59
 8001236:	f7ff fdfd 	bl	8000e34 <step>
	  kruznice(15, 20, 1, HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)); //oko
 800123a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800123e:	4844      	ldr	r0, [pc, #272]	; (8001350 <main+0x204>)
 8001240:	f000 fe4c 	bl	8001edc <HAL_GPIO_ReadPin>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	bf14      	ite	ne
 800124a:	2301      	movne	r3, #1
 800124c:	2300      	moveq	r3, #0
 800124e:	b2db      	uxtb	r3, r3
 8001250:	2201      	movs	r2, #1
 8001252:	2114      	movs	r1, #20
 8001254:	200f      	movs	r0, #15
 8001256:	f7ff fe1b 	bl	8000e90 <kruznice>
	  step(0, 0, 0, HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)); // pusteni praveho tlacitka
 800125a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800125e:	483c      	ldr	r0, [pc, #240]	; (8001350 <main+0x204>)
 8001260:	f000 fe3c 	bl	8001edc <HAL_GPIO_ReadPin>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	bf14      	ite	ne
 800126a:	2301      	movne	r3, #1
 800126c:	2300      	moveq	r3, #0
 800126e:	b2db      	uxtb	r3, r3
 8001270:	2200      	movs	r2, #0
 8001272:	2100      	movs	r1, #0
 8001274:	2000      	movs	r0, #0
 8001276:	f7ff fddd 	bl	8000e34 <step>

	  step(35, 30, 1, HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)); //posun na nos
 800127a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800127e:	4834      	ldr	r0, [pc, #208]	; (8001350 <main+0x204>)
 8001280:	f000 fe2c 	bl	8001edc <HAL_GPIO_ReadPin>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	bf14      	ite	ne
 800128a:	2301      	movne	r3, #1
 800128c:	2300      	moveq	r3, #0
 800128e:	b2db      	uxtb	r3, r3
 8001290:	2201      	movs	r2, #1
 8001292:	211e      	movs	r1, #30
 8001294:	2023      	movs	r0, #35	; 0x23
 8001296:	f7ff fdcd 	bl	8000e34 <step>
	  step(0, 20, 1, HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)); //nakresleni nosu
 800129a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800129e:	482c      	ldr	r0, [pc, #176]	; (8001350 <main+0x204>)
 80012a0:	f000 fe1c 	bl	8001edc <HAL_GPIO_ReadPin>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	bf14      	ite	ne
 80012aa:	2301      	movne	r3, #1
 80012ac:	2300      	moveq	r3, #0
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	2201      	movs	r2, #1
 80012b2:	2114      	movs	r1, #20
 80012b4:	2000      	movs	r0, #0
 80012b6:	f7ff fdbd 	bl	8000e34 <step>
	  step(0, 0, 0, HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)); // pusteni praveho tlacitka
 80012ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012be:	4824      	ldr	r0, [pc, #144]	; (8001350 <main+0x204>)
 80012c0:	f000 fe0c 	bl	8001edc <HAL_GPIO_ReadPin>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	bf14      	ite	ne
 80012ca:	2301      	movne	r3, #1
 80012cc:	2300      	moveq	r3, #0
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	2200      	movs	r2, #0
 80012d2:	2100      	movs	r1, #0
 80012d4:	2000      	movs	r0, #0
 80012d6:	f7ff fdad 	bl	8000e34 <step>


	  step(-35, -60, 0, HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)); //posun na pusu
 80012da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012de:	481c      	ldr	r0, [pc, #112]	; (8001350 <main+0x204>)
 80012e0:	f000 fdfc 	bl	8001edc <HAL_GPIO_ReadPin>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	bf14      	ite	ne
 80012ea:	2301      	movne	r3, #1
 80012ec:	2300      	moveq	r3, #0
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	2200      	movs	r2, #0
 80012f2:	f06f 013b 	mvn.w	r1, #59	; 0x3b
 80012f6:	f06f 0022 	mvn.w	r0, #34	; 0x22
 80012fa:	f7ff fd9b 	bl	8000e34 <step>
	  cast_kruznice(90, 50, M_PI/4, M_PI*3/4, 1,HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)); //pusa
 80012fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001302:	4813      	ldr	r0, [pc, #76]	; (8001350 <main+0x204>)
 8001304:	f000 fdea 	bl	8001edc <HAL_GPIO_ReadPin>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	bf14      	ite	ne
 800130e:	2301      	movne	r3, #1
 8001310:	2300      	moveq	r3, #0
 8001312:	b2db      	uxtb	r3, r3
 8001314:	2201      	movs	r2, #1
 8001316:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8001354 <main+0x208>
 800131a:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8001358 <main+0x20c>
 800131e:	2132      	movs	r1, #50	; 0x32
 8001320:	205a      	movs	r0, #90	; 0x5a
 8001322:	f7ff fe71 	bl	8001008 <cast_kruznice>
	  step(0, 0, 0, HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)); // pusteni praveho tlacitka
 8001326:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800132a:	4809      	ldr	r0, [pc, #36]	; (8001350 <main+0x204>)
 800132c:	f000 fdd6 	bl	8001edc <HAL_GPIO_ReadPin>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	bf14      	ite	ne
 8001336:	2301      	movne	r3, #1
 8001338:	2300      	moveq	r3, #0
 800133a:	b2db      	uxtb	r3, r3
 800133c:	2200      	movs	r2, #0
 800133e:	2100      	movs	r1, #0
 8001340:	2000      	movs	r0, #0
 8001342:	f7ff fd77 	bl	8000e34 <step>

	  HAL_Delay(1000);
 8001346:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800134a:	f000 fae5 	bl	8001918 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)){//kdyz se zmackne tlacitko, zacne se vykreslovat smajlik
 800134e:	e709      	b.n	8001164 <main+0x18>
 8001350:	40020800 	.word	0x40020800
 8001354:	4016cbe4 	.word	0x4016cbe4
 8001358:	3f490fdb 	.word	0x3f490fdb

0800135c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b094      	sub	sp, #80	; 0x50
 8001360:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001362:	f107 0320 	add.w	r3, r7, #32
 8001366:	2230      	movs	r2, #48	; 0x30
 8001368:	2100      	movs	r1, #0
 800136a:	4618      	mov	r0, r3
 800136c:	f006 f8f6 	bl	800755c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001370:	f107 030c 	add.w	r3, r7, #12
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001380:	2300      	movs	r3, #0
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	4b28      	ldr	r3, [pc, #160]	; (8001428 <SystemClock_Config+0xcc>)
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	4a27      	ldr	r2, [pc, #156]	; (8001428 <SystemClock_Config+0xcc>)
 800138a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800138e:	6413      	str	r3, [r2, #64]	; 0x40
 8001390:	4b25      	ldr	r3, [pc, #148]	; (8001428 <SystemClock_Config+0xcc>)
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001398:	60bb      	str	r3, [r7, #8]
 800139a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800139c:	2300      	movs	r3, #0
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	4b22      	ldr	r3, [pc, #136]	; (800142c <SystemClock_Config+0xd0>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a21      	ldr	r2, [pc, #132]	; (800142c <SystemClock_Config+0xd0>)
 80013a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013aa:	6013      	str	r3, [r2, #0]
 80013ac:	4b1f      	ldr	r3, [pc, #124]	; (800142c <SystemClock_Config+0xd0>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013b4:	607b      	str	r3, [r7, #4]
 80013b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013b8:	2301      	movs	r3, #1
 80013ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80013bc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013c2:	2302      	movs	r3, #2
 80013c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013cc:	2304      	movs	r3, #4
 80013ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80013d0:	23a8      	movs	r3, #168	; 0xa8
 80013d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013d4:	2302      	movs	r3, #2
 80013d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80013d8:	2307      	movs	r3, #7
 80013da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013dc:	f107 0320 	add.w	r3, r7, #32
 80013e0:	4618      	mov	r0, r3
 80013e2:	f001 ff17 	bl	8003214 <HAL_RCC_OscConfig>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013ec:	f000 f93c 	bl	8001668 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013f0:	230f      	movs	r3, #15
 80013f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f4:	2302      	movs	r3, #2
 80013f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001400:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001402:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001406:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001408:	f107 030c 	add.w	r3, r7, #12
 800140c:	2105      	movs	r1, #5
 800140e:	4618      	mov	r0, r3
 8001410:	f002 f978 	bl	8003704 <HAL_RCC_ClockConfig>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800141a:	f000 f925 	bl	8001668 <Error_Handler>
  }
}
 800141e:	bf00      	nop
 8001420:	3750      	adds	r7, #80	; 0x50
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40023800 	.word	0x40023800
 800142c:	40007000 	.word	0x40007000

08001430 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001434:	4b11      	ldr	r3, [pc, #68]	; (800147c <MX_USART3_UART_Init+0x4c>)
 8001436:	4a12      	ldr	r2, [pc, #72]	; (8001480 <MX_USART3_UART_Init+0x50>)
 8001438:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800143a:	4b10      	ldr	r3, [pc, #64]	; (800147c <MX_USART3_UART_Init+0x4c>)
 800143c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001440:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <MX_USART3_UART_Init+0x4c>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <MX_USART3_UART_Init+0x4c>)
 800144a:	2200      	movs	r2, #0
 800144c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <MX_USART3_UART_Init+0x4c>)
 8001450:	2200      	movs	r2, #0
 8001452:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001454:	4b09      	ldr	r3, [pc, #36]	; (800147c <MX_USART3_UART_Init+0x4c>)
 8001456:	220c      	movs	r2, #12
 8001458:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <MX_USART3_UART_Init+0x4c>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <MX_USART3_UART_Init+0x4c>)
 8001462:	2200      	movs	r2, #0
 8001464:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001466:	4805      	ldr	r0, [pc, #20]	; (800147c <MX_USART3_UART_Init+0x4c>)
 8001468:	f002 fb48 	bl	8003afc <HAL_UART_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001472:	f000 f8f9 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000198 	.word	0x20000198
 8001480:	40004800 	.word	0x40004800

08001484 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08c      	sub	sp, #48	; 0x30
 8001488:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148a:	f107 031c 	add.w	r3, r7, #28
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
 8001498:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	61bb      	str	r3, [r7, #24]
 800149e:	4b6d      	ldr	r3, [pc, #436]	; (8001654 <MX_GPIO_Init+0x1d0>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a6c      	ldr	r2, [pc, #432]	; (8001654 <MX_GPIO_Init+0x1d0>)
 80014a4:	f043 0304 	orr.w	r3, r3, #4
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b6a      	ldr	r3, [pc, #424]	; (8001654 <MX_GPIO_Init+0x1d0>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0304 	and.w	r3, r3, #4
 80014b2:	61bb      	str	r3, [r7, #24]
 80014b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
 80014ba:	4b66      	ldr	r3, [pc, #408]	; (8001654 <MX_GPIO_Init+0x1d0>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a65      	ldr	r2, [pc, #404]	; (8001654 <MX_GPIO_Init+0x1d0>)
 80014c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b63      	ldr	r3, [pc, #396]	; (8001654 <MX_GPIO_Init+0x1d0>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	4b5f      	ldr	r3, [pc, #380]	; (8001654 <MX_GPIO_Init+0x1d0>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a5e      	ldr	r2, [pc, #376]	; (8001654 <MX_GPIO_Init+0x1d0>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b5c      	ldr	r3, [pc, #368]	; (8001654 <MX_GPIO_Init+0x1d0>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	613b      	str	r3, [r7, #16]
 80014ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	4b58      	ldr	r3, [pc, #352]	; (8001654 <MX_GPIO_Init+0x1d0>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a57      	ldr	r2, [pc, #348]	; (8001654 <MX_GPIO_Init+0x1d0>)
 80014f8:	f043 0302 	orr.w	r3, r3, #2
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b55      	ldr	r3, [pc, #340]	; (8001654 <MX_GPIO_Init+0x1d0>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	4b51      	ldr	r3, [pc, #324]	; (8001654 <MX_GPIO_Init+0x1d0>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4a50      	ldr	r2, [pc, #320]	; (8001654 <MX_GPIO_Init+0x1d0>)
 8001514:	f043 0308 	orr.w	r3, r3, #8
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4b4e      	ldr	r3, [pc, #312]	; (8001654 <MX_GPIO_Init+0x1d0>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f003 0308 	and.w	r3, r3, #8
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	607b      	str	r3, [r7, #4]
 800152a:	4b4a      	ldr	r3, [pc, #296]	; (8001654 <MX_GPIO_Init+0x1d0>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	4a49      	ldr	r2, [pc, #292]	; (8001654 <MX_GPIO_Init+0x1d0>)
 8001530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001534:	6313      	str	r3, [r2, #48]	; 0x30
 8001536:	4b47      	ldr	r3, [pc, #284]	; (8001654 <MX_GPIO_Init+0x1d0>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001542:	2200      	movs	r2, #0
 8001544:	f244 0181 	movw	r1, #16513	; 0x4081
 8001548:	4843      	ldr	r0, [pc, #268]	; (8001658 <MX_GPIO_Init+0x1d4>)
 800154a:	f000 fcdf 	bl	8001f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800154e:	2200      	movs	r2, #0
 8001550:	2140      	movs	r1, #64	; 0x40
 8001552:	4842      	ldr	r0, [pc, #264]	; (800165c <MX_GPIO_Init+0x1d8>)
 8001554:	f000 fcda 	bl	8001f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001558:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800155c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800155e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001562:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001568:	f107 031c 	add.w	r3, r7, #28
 800156c:	4619      	mov	r1, r3
 800156e:	483c      	ldr	r0, [pc, #240]	; (8001660 <MX_GPIO_Init+0x1dc>)
 8001570:	f000 fb08 	bl	8001b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001574:	2332      	movs	r3, #50	; 0x32
 8001576:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001578:	2302      	movs	r3, #2
 800157a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001580:	2303      	movs	r3, #3
 8001582:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001584:	230b      	movs	r3, #11
 8001586:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001588:	f107 031c 	add.w	r3, r7, #28
 800158c:	4619      	mov	r1, r3
 800158e:	4834      	ldr	r0, [pc, #208]	; (8001660 <MX_GPIO_Init+0x1dc>)
 8001590:	f000 faf8 	bl	8001b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001594:	2386      	movs	r3, #134	; 0x86
 8001596:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001598:	2302      	movs	r3, #2
 800159a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a0:	2303      	movs	r3, #3
 80015a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015a4:	230b      	movs	r3, #11
 80015a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a8:	f107 031c 	add.w	r3, r7, #28
 80015ac:	4619      	mov	r1, r3
 80015ae:	482d      	ldr	r0, [pc, #180]	; (8001664 <MX_GPIO_Init+0x1e0>)
 80015b0:	f000 fae8 	bl	8001b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80015b4:	f244 0381 	movw	r3, #16513	; 0x4081
 80015b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ba:	2301      	movs	r3, #1
 80015bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c2:	2300      	movs	r3, #0
 80015c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c6:	f107 031c 	add.w	r3, r7, #28
 80015ca:	4619      	mov	r1, r3
 80015cc:	4822      	ldr	r0, [pc, #136]	; (8001658 <MX_GPIO_Init+0x1d4>)
 80015ce:	f000 fad9 	bl	8001b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80015d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d8:	2302      	movs	r3, #2
 80015da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e0:	2303      	movs	r3, #3
 80015e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015e4:	230b      	movs	r3, #11
 80015e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80015e8:	f107 031c 	add.w	r3, r7, #28
 80015ec:	4619      	mov	r1, r3
 80015ee:	481a      	ldr	r0, [pc, #104]	; (8001658 <MX_GPIO_Init+0x1d4>)
 80015f0:	f000 fac8 	bl	8001b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80015f4:	2340      	movs	r3, #64	; 0x40
 80015f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f8:	2301      	movs	r3, #1
 80015fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001600:	2300      	movs	r3, #0
 8001602:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001604:	f107 031c 	add.w	r3, r7, #28
 8001608:	4619      	mov	r1, r3
 800160a:	4814      	ldr	r0, [pc, #80]	; (800165c <MX_GPIO_Init+0x1d8>)
 800160c:	f000 faba 	bl	8001b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001610:	2380      	movs	r3, #128	; 0x80
 8001612:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001614:	2300      	movs	r3, #0
 8001616:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800161c:	f107 031c 	add.w	r3, r7, #28
 8001620:	4619      	mov	r1, r3
 8001622:	480e      	ldr	r0, [pc, #56]	; (800165c <MX_GPIO_Init+0x1d8>)
 8001624:	f000 faae 	bl	8001b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001628:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800162c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162e:	2302      	movs	r3, #2
 8001630:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001636:	2303      	movs	r3, #3
 8001638:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800163a:	230b      	movs	r3, #11
 800163c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800163e:	f107 031c 	add.w	r3, r7, #28
 8001642:	4619      	mov	r1, r3
 8001644:	4805      	ldr	r0, [pc, #20]	; (800165c <MX_GPIO_Init+0x1d8>)
 8001646:	f000 fa9d 	bl	8001b84 <HAL_GPIO_Init>

}
 800164a:	bf00      	nop
 800164c:	3730      	adds	r7, #48	; 0x30
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40023800 	.word	0x40023800
 8001658:	40020400 	.word	0x40020400
 800165c:	40021800 	.word	0x40021800
 8001660:	40020800 	.word	0x40020800
 8001664:	40020000 	.word	0x40020000

08001668 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800166c:	b672      	cpsid	i
}
 800166e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001670:	e7fe      	b.n	8001670 <Error_Handler+0x8>
	...

08001674 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	607b      	str	r3, [r7, #4]
 800167e:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <HAL_MspInit+0x4c>)
 8001680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001682:	4a0f      	ldr	r2, [pc, #60]	; (80016c0 <HAL_MspInit+0x4c>)
 8001684:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001688:	6453      	str	r3, [r2, #68]	; 0x44
 800168a:	4b0d      	ldr	r3, [pc, #52]	; (80016c0 <HAL_MspInit+0x4c>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	603b      	str	r3, [r7, #0]
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <HAL_MspInit+0x4c>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	4a08      	ldr	r2, [pc, #32]	; (80016c0 <HAL_MspInit+0x4c>)
 80016a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a4:	6413      	str	r3, [r2, #64]	; 0x40
 80016a6:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <HAL_MspInit+0x4c>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ae:	603b      	str	r3, [r7, #0]
 80016b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	40023800 	.word	0x40023800

080016c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08a      	sub	sp, #40	; 0x28
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a19      	ldr	r2, [pc, #100]	; (8001748 <HAL_UART_MspInit+0x84>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d12c      	bne.n	8001740 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	4b18      	ldr	r3, [pc, #96]	; (800174c <HAL_UART_MspInit+0x88>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	4a17      	ldr	r2, [pc, #92]	; (800174c <HAL_UART_MspInit+0x88>)
 80016f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016f4:	6413      	str	r3, [r2, #64]	; 0x40
 80016f6:	4b15      	ldr	r3, [pc, #84]	; (800174c <HAL_UART_MspInit+0x88>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016fe:	613b      	str	r3, [r7, #16]
 8001700:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	4b11      	ldr	r3, [pc, #68]	; (800174c <HAL_UART_MspInit+0x88>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4a10      	ldr	r2, [pc, #64]	; (800174c <HAL_UART_MspInit+0x88>)
 800170c:	f043 0308 	orr.w	r3, r3, #8
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4b0e      	ldr	r3, [pc, #56]	; (800174c <HAL_UART_MspInit+0x88>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f003 0308 	and.w	r3, r3, #8
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800171e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001722:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001724:	2302      	movs	r3, #2
 8001726:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172c:	2303      	movs	r3, #3
 800172e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001730:	2307      	movs	r3, #7
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001734:	f107 0314 	add.w	r3, r7, #20
 8001738:	4619      	mov	r1, r3
 800173a:	4805      	ldr	r0, [pc, #20]	; (8001750 <HAL_UART_MspInit+0x8c>)
 800173c:	f000 fa22 	bl	8001b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001740:	bf00      	nop
 8001742:	3728      	adds	r7, #40	; 0x28
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40004800 	.word	0x40004800
 800174c:	40023800 	.word	0x40023800
 8001750:	40020c00 	.word	0x40020c00

08001754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001758:	e7fe      	b.n	8001758 <NMI_Handler+0x4>

0800175a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800175e:	e7fe      	b.n	800175e <HardFault_Handler+0x4>

08001760 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001764:	e7fe      	b.n	8001764 <MemManage_Handler+0x4>

08001766 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800176a:	e7fe      	b.n	800176a <BusFault_Handler+0x4>

0800176c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001770:	e7fe      	b.n	8001770 <UsageFault_Handler+0x4>

08001772 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017a0:	f000 f89a 	bl	80018d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80017ac:	4802      	ldr	r0, [pc, #8]	; (80017b8 <OTG_FS_IRQHandler+0x10>)
 80017ae:	f000 fd16 	bl	80021de <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	200006b0 	.word	0x200006b0

080017bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <SystemInit+0x20>)
 80017c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017c6:	4a05      	ldr	r2, [pc, #20]	; (80017dc <SystemInit+0x20>)
 80017c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80017e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001818 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017e4:	480d      	ldr	r0, [pc, #52]	; (800181c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017e6:	490e      	ldr	r1, [pc, #56]	; (8001820 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017e8:	4a0e      	ldr	r2, [pc, #56]	; (8001824 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017ec:	e002      	b.n	80017f4 <LoopCopyDataInit>

080017ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017f2:	3304      	adds	r3, #4

080017f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017f8:	d3f9      	bcc.n	80017ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017fa:	4a0b      	ldr	r2, [pc, #44]	; (8001828 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017fc:	4c0b      	ldr	r4, [pc, #44]	; (800182c <LoopFillZerobss+0x26>)
  movs r3, #0
 80017fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001800:	e001      	b.n	8001806 <LoopFillZerobss>

08001802 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001802:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001804:	3204      	adds	r2, #4

08001806 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001806:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001808:	d3fb      	bcc.n	8001802 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800180a:	f7ff ffd7 	bl	80017bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800180e:	f005 fe81 	bl	8007514 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001812:	f7ff fc9b 	bl	800114c <main>
  bx  lr    
 8001816:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001818:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800181c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001820:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8001824:	0800851c 	.word	0x0800851c
  ldr r2, =_sbss
 8001828:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 800182c:	20000ab8 	.word	0x20000ab8

08001830 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001830:	e7fe      	b.n	8001830 <ADC_IRQHandler>
	...

08001834 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001838:	4b0e      	ldr	r3, [pc, #56]	; (8001874 <HAL_Init+0x40>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a0d      	ldr	r2, [pc, #52]	; (8001874 <HAL_Init+0x40>)
 800183e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001842:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001844:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <HAL_Init+0x40>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a0a      	ldr	r2, [pc, #40]	; (8001874 <HAL_Init+0x40>)
 800184a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800184e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001850:	4b08      	ldr	r3, [pc, #32]	; (8001874 <HAL_Init+0x40>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a07      	ldr	r2, [pc, #28]	; (8001874 <HAL_Init+0x40>)
 8001856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800185a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800185c:	2003      	movs	r0, #3
 800185e:	f000 f94f 	bl	8001b00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001862:	2000      	movs	r0, #0
 8001864:	f000 f808 	bl	8001878 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001868:	f7ff ff04 	bl	8001674 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40023c00 	.word	0x40023c00

08001878 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001880:	4b12      	ldr	r3, [pc, #72]	; (80018cc <HAL_InitTick+0x54>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <HAL_InitTick+0x58>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	4619      	mov	r1, r3
 800188a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800188e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001892:	fbb2 f3f3 	udiv	r3, r2, r3
 8001896:	4618      	mov	r0, r3
 8001898:	f000 f967 	bl	8001b6a <HAL_SYSTICK_Config>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e00e      	b.n	80018c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b0f      	cmp	r3, #15
 80018aa:	d80a      	bhi.n	80018c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018ac:	2200      	movs	r2, #0
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	f04f 30ff 	mov.w	r0, #4294967295
 80018b4:	f000 f92f 	bl	8001b16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018b8:	4a06      	ldr	r2, [pc, #24]	; (80018d4 <HAL_InitTick+0x5c>)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018be:	2300      	movs	r3, #0
 80018c0:	e000      	b.n	80018c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000000 	.word	0x20000000
 80018d0:	20000008 	.word	0x20000008
 80018d4:	20000004 	.word	0x20000004

080018d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <HAL_IncTick+0x20>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	461a      	mov	r2, r3
 80018e2:	4b06      	ldr	r3, [pc, #24]	; (80018fc <HAL_IncTick+0x24>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4413      	add	r3, r2
 80018e8:	4a04      	ldr	r2, [pc, #16]	; (80018fc <HAL_IncTick+0x24>)
 80018ea:	6013      	str	r3, [r2, #0]
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	20000008 	.word	0x20000008
 80018fc:	200001dc 	.word	0x200001dc

08001900 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return uwTick;
 8001904:	4b03      	ldr	r3, [pc, #12]	; (8001914 <HAL_GetTick+0x14>)
 8001906:	681b      	ldr	r3, [r3, #0]
}
 8001908:	4618      	mov	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	200001dc 	.word	0x200001dc

08001918 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001920:	f7ff ffee 	bl	8001900 <HAL_GetTick>
 8001924:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001930:	d005      	beq.n	800193e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001932:	4b0a      	ldr	r3, [pc, #40]	; (800195c <HAL_Delay+0x44>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	461a      	mov	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	4413      	add	r3, r2
 800193c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800193e:	bf00      	nop
 8001940:	f7ff ffde 	bl	8001900 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	429a      	cmp	r2, r3
 800194e:	d8f7      	bhi.n	8001940 <HAL_Delay+0x28>
  {
  }
}
 8001950:	bf00      	nop
 8001952:	bf00      	nop
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20000008 	.word	0x20000008

08001960 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800197c:	4013      	ands	r3, r2
 800197e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001988:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800198c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001990:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001992:	4a04      	ldr	r2, [pc, #16]	; (80019a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	60d3      	str	r3, [r2, #12]
}
 8001998:	bf00      	nop
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019ac:	4b04      	ldr	r3, [pc, #16]	; (80019c0 <__NVIC_GetPriorityGrouping+0x18>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	0a1b      	lsrs	r3, r3, #8
 80019b2:	f003 0307 	and.w	r3, r3, #7
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	db0b      	blt.n	80019ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	f003 021f 	and.w	r2, r3, #31
 80019dc:	4907      	ldr	r1, [pc, #28]	; (80019fc <__NVIC_EnableIRQ+0x38>)
 80019de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e2:	095b      	lsrs	r3, r3, #5
 80019e4:	2001      	movs	r0, #1
 80019e6:	fa00 f202 	lsl.w	r2, r0, r2
 80019ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000e100 	.word	0xe000e100

08001a00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	6039      	str	r1, [r7, #0]
 8001a0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	db0a      	blt.n	8001a2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	490c      	ldr	r1, [pc, #48]	; (8001a4c <__NVIC_SetPriority+0x4c>)
 8001a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1e:	0112      	lsls	r2, r2, #4
 8001a20:	b2d2      	uxtb	r2, r2
 8001a22:	440b      	add	r3, r1
 8001a24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a28:	e00a      	b.n	8001a40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	4908      	ldr	r1, [pc, #32]	; (8001a50 <__NVIC_SetPriority+0x50>)
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	f003 030f 	and.w	r3, r3, #15
 8001a36:	3b04      	subs	r3, #4
 8001a38:	0112      	lsls	r2, r2, #4
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	761a      	strb	r2, [r3, #24]
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	e000e100 	.word	0xe000e100
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b089      	sub	sp, #36	; 0x24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	f1c3 0307 	rsb	r3, r3, #7
 8001a6e:	2b04      	cmp	r3, #4
 8001a70:	bf28      	it	cs
 8001a72:	2304      	movcs	r3, #4
 8001a74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	3304      	adds	r3, #4
 8001a7a:	2b06      	cmp	r3, #6
 8001a7c:	d902      	bls.n	8001a84 <NVIC_EncodePriority+0x30>
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	3b03      	subs	r3, #3
 8001a82:	e000      	b.n	8001a86 <NVIC_EncodePriority+0x32>
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a88:	f04f 32ff 	mov.w	r2, #4294967295
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	43da      	mvns	r2, r3
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	401a      	ands	r2, r3
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa6:	43d9      	mvns	r1, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aac:	4313      	orrs	r3, r2
         );
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3724      	adds	r7, #36	; 0x24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
	...

08001abc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001acc:	d301      	bcc.n	8001ad2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e00f      	b.n	8001af2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ad2:	4a0a      	ldr	r2, [pc, #40]	; (8001afc <SysTick_Config+0x40>)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ada:	210f      	movs	r1, #15
 8001adc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae0:	f7ff ff8e 	bl	8001a00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ae4:	4b05      	ldr	r3, [pc, #20]	; (8001afc <SysTick_Config+0x40>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aea:	4b04      	ldr	r3, [pc, #16]	; (8001afc <SysTick_Config+0x40>)
 8001aec:	2207      	movs	r2, #7
 8001aee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	e000e010 	.word	0xe000e010

08001b00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7ff ff29 	bl	8001960 <__NVIC_SetPriorityGrouping>
}
 8001b0e:	bf00      	nop
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b086      	sub	sp, #24
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	607a      	str	r2, [r7, #4]
 8001b22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b28:	f7ff ff3e 	bl	80019a8 <__NVIC_GetPriorityGrouping>
 8001b2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	68b9      	ldr	r1, [r7, #8]
 8001b32:	6978      	ldr	r0, [r7, #20]
 8001b34:	f7ff ff8e 	bl	8001a54 <NVIC_EncodePriority>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b3e:	4611      	mov	r1, r2
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff ff5d 	bl	8001a00 <__NVIC_SetPriority>
}
 8001b46:	bf00      	nop
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	4603      	mov	r3, r0
 8001b56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ff31 	bl	80019c4 <__NVIC_EnableIRQ>
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7ff ffa2 	bl	8001abc <SysTick_Config>
 8001b78:	4603      	mov	r3, r0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b089      	sub	sp, #36	; 0x24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b92:	2300      	movs	r3, #0
 8001b94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b96:	2300      	movs	r3, #0
 8001b98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61fb      	str	r3, [r7, #28]
 8001b9e:	e177      	b.n	8001e90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	697a      	ldr	r2, [r7, #20]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	f040 8166 	bne.w	8001e8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f003 0303 	and.w	r3, r3, #3
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d005      	beq.n	8001bd6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d130      	bne.n	8001c38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	2203      	movs	r2, #3
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43db      	mvns	r3, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4013      	ands	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	68da      	ldr	r2, [r3, #12]
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	091b      	lsrs	r3, r3, #4
 8001c22:	f003 0201 	and.w	r2, r3, #1
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f003 0303 	and.w	r3, r3, #3
 8001c40:	2b03      	cmp	r3, #3
 8001c42:	d017      	beq.n	8001c74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	2203      	movs	r2, #3
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	43db      	mvns	r3, r3
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 0303 	and.w	r3, r3, #3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d123      	bne.n	8001cc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	08da      	lsrs	r2, r3, #3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3208      	adds	r2, #8
 8001c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	220f      	movs	r2, #15
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	691a      	ldr	r2, [r3, #16]
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	08da      	lsrs	r2, r3, #3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	3208      	adds	r2, #8
 8001cc2:	69b9      	ldr	r1, [r7, #24]
 8001cc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	2203      	movs	r2, #3
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 0203 	and.w	r2, r3, #3
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f000 80c0 	beq.w	8001e8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	4b66      	ldr	r3, [pc, #408]	; (8001ea8 <HAL_GPIO_Init+0x324>)
 8001d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d12:	4a65      	ldr	r2, [pc, #404]	; (8001ea8 <HAL_GPIO_Init+0x324>)
 8001d14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d18:	6453      	str	r3, [r2, #68]	; 0x44
 8001d1a:	4b63      	ldr	r3, [pc, #396]	; (8001ea8 <HAL_GPIO_Init+0x324>)
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d26:	4a61      	ldr	r2, [pc, #388]	; (8001eac <HAL_GPIO_Init+0x328>)
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	089b      	lsrs	r3, r3, #2
 8001d2c:	3302      	adds	r3, #2
 8001d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	f003 0303 	and.w	r3, r3, #3
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	220f      	movs	r2, #15
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43db      	mvns	r3, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4013      	ands	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a58      	ldr	r2, [pc, #352]	; (8001eb0 <HAL_GPIO_Init+0x32c>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d037      	beq.n	8001dc2 <HAL_GPIO_Init+0x23e>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a57      	ldr	r2, [pc, #348]	; (8001eb4 <HAL_GPIO_Init+0x330>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d031      	beq.n	8001dbe <HAL_GPIO_Init+0x23a>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a56      	ldr	r2, [pc, #344]	; (8001eb8 <HAL_GPIO_Init+0x334>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d02b      	beq.n	8001dba <HAL_GPIO_Init+0x236>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a55      	ldr	r2, [pc, #340]	; (8001ebc <HAL_GPIO_Init+0x338>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d025      	beq.n	8001db6 <HAL_GPIO_Init+0x232>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a54      	ldr	r2, [pc, #336]	; (8001ec0 <HAL_GPIO_Init+0x33c>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d01f      	beq.n	8001db2 <HAL_GPIO_Init+0x22e>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a53      	ldr	r2, [pc, #332]	; (8001ec4 <HAL_GPIO_Init+0x340>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d019      	beq.n	8001dae <HAL_GPIO_Init+0x22a>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a52      	ldr	r2, [pc, #328]	; (8001ec8 <HAL_GPIO_Init+0x344>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d013      	beq.n	8001daa <HAL_GPIO_Init+0x226>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a51      	ldr	r2, [pc, #324]	; (8001ecc <HAL_GPIO_Init+0x348>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d00d      	beq.n	8001da6 <HAL_GPIO_Init+0x222>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a50      	ldr	r2, [pc, #320]	; (8001ed0 <HAL_GPIO_Init+0x34c>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d007      	beq.n	8001da2 <HAL_GPIO_Init+0x21e>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a4f      	ldr	r2, [pc, #316]	; (8001ed4 <HAL_GPIO_Init+0x350>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d101      	bne.n	8001d9e <HAL_GPIO_Init+0x21a>
 8001d9a:	2309      	movs	r3, #9
 8001d9c:	e012      	b.n	8001dc4 <HAL_GPIO_Init+0x240>
 8001d9e:	230a      	movs	r3, #10
 8001da0:	e010      	b.n	8001dc4 <HAL_GPIO_Init+0x240>
 8001da2:	2308      	movs	r3, #8
 8001da4:	e00e      	b.n	8001dc4 <HAL_GPIO_Init+0x240>
 8001da6:	2307      	movs	r3, #7
 8001da8:	e00c      	b.n	8001dc4 <HAL_GPIO_Init+0x240>
 8001daa:	2306      	movs	r3, #6
 8001dac:	e00a      	b.n	8001dc4 <HAL_GPIO_Init+0x240>
 8001dae:	2305      	movs	r3, #5
 8001db0:	e008      	b.n	8001dc4 <HAL_GPIO_Init+0x240>
 8001db2:	2304      	movs	r3, #4
 8001db4:	e006      	b.n	8001dc4 <HAL_GPIO_Init+0x240>
 8001db6:	2303      	movs	r3, #3
 8001db8:	e004      	b.n	8001dc4 <HAL_GPIO_Init+0x240>
 8001dba:	2302      	movs	r3, #2
 8001dbc:	e002      	b.n	8001dc4 <HAL_GPIO_Init+0x240>
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e000      	b.n	8001dc4 <HAL_GPIO_Init+0x240>
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	69fa      	ldr	r2, [r7, #28]
 8001dc6:	f002 0203 	and.w	r2, r2, #3
 8001dca:	0092      	lsls	r2, r2, #2
 8001dcc:	4093      	lsls	r3, r2
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dd4:	4935      	ldr	r1, [pc, #212]	; (8001eac <HAL_GPIO_Init+0x328>)
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	089b      	lsrs	r3, r3, #2
 8001dda:	3302      	adds	r3, #2
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001de2:	4b3d      	ldr	r3, [pc, #244]	; (8001ed8 <HAL_GPIO_Init+0x354>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	43db      	mvns	r3, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4013      	ands	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e06:	4a34      	ldr	r2, [pc, #208]	; (8001ed8 <HAL_GPIO_Init+0x354>)
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e0c:	4b32      	ldr	r3, [pc, #200]	; (8001ed8 <HAL_GPIO_Init+0x354>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e30:	4a29      	ldr	r2, [pc, #164]	; (8001ed8 <HAL_GPIO_Init+0x354>)
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e36:	4b28      	ldr	r3, [pc, #160]	; (8001ed8 <HAL_GPIO_Init+0x354>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4013      	ands	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e5a:	4a1f      	ldr	r2, [pc, #124]	; (8001ed8 <HAL_GPIO_Init+0x354>)
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e60:	4b1d      	ldr	r3, [pc, #116]	; (8001ed8 <HAL_GPIO_Init+0x354>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e84:	4a14      	ldr	r2, [pc, #80]	; (8001ed8 <HAL_GPIO_Init+0x354>)
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	61fb      	str	r3, [r7, #28]
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	2b0f      	cmp	r3, #15
 8001e94:	f67f ae84 	bls.w	8001ba0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e98:	bf00      	nop
 8001e9a:	bf00      	nop
 8001e9c:	3724      	adds	r7, #36	; 0x24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40013800 	.word	0x40013800
 8001eb0:	40020000 	.word	0x40020000
 8001eb4:	40020400 	.word	0x40020400
 8001eb8:	40020800 	.word	0x40020800
 8001ebc:	40020c00 	.word	0x40020c00
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	40021400 	.word	0x40021400
 8001ec8:	40021800 	.word	0x40021800
 8001ecc:	40021c00 	.word	0x40021c00
 8001ed0:	40022000 	.word	0x40022000
 8001ed4:	40022400 	.word	0x40022400
 8001ed8:	40013c00 	.word	0x40013c00

08001edc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	691a      	ldr	r2, [r3, #16]
 8001eec:	887b      	ldrh	r3, [r7, #2]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d002      	beq.n	8001efa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	73fb      	strb	r3, [r7, #15]
 8001ef8:	e001      	b.n	8001efe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001efa:	2300      	movs	r3, #0
 8001efc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	460b      	mov	r3, r1
 8001f16:	807b      	strh	r3, [r7, #2]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f1c:	787b      	ldrb	r3, [r7, #1]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f22:	887a      	ldrh	r2, [r7, #2]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f28:	e003      	b.n	8001f32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f2a:	887b      	ldrh	r3, [r7, #2]
 8001f2c:	041a      	lsls	r2, r3, #16
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	619a      	str	r2, [r3, #24]
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f40:	b08f      	sub	sp, #60	; 0x3c
 8001f42:	af0a      	add	r7, sp, #40	; 0x28
 8001f44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d101      	bne.n	8001f50 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e10f      	b.n	8002170 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d106      	bne.n	8001f70 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f004 ffc2 	bl	8006ef4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2203      	movs	r2, #3
 8001f74:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d102      	bne.n	8001f8a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f002 f8df 	bl	8004152 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	603b      	str	r3, [r7, #0]
 8001f9a:	687e      	ldr	r6, [r7, #4]
 8001f9c:	466d      	mov	r5, sp
 8001f9e:	f106 0410 	add.w	r4, r6, #16
 8001fa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fa4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001faa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fae:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fb2:	1d33      	adds	r3, r6, #4
 8001fb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fb6:	6838      	ldr	r0, [r7, #0]
 8001fb8:	f001 ffb6 	bl	8003f28 <USB_CoreInit>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d005      	beq.n	8001fce <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2202      	movs	r2, #2
 8001fc6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e0d0      	b.n	8002170 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f002 f8cd 	bl	8004174 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fda:	2300      	movs	r3, #0
 8001fdc:	73fb      	strb	r3, [r7, #15]
 8001fde:	e04a      	b.n	8002076 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001fe0:	7bfa      	ldrb	r2, [r7, #15]
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	1a9b      	subs	r3, r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	440b      	add	r3, r1
 8001fee:	333d      	adds	r3, #61	; 0x3d
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ff4:	7bfa      	ldrb	r2, [r7, #15]
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	1a9b      	subs	r3, r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	440b      	add	r3, r1
 8002002:	333c      	adds	r3, #60	; 0x3c
 8002004:	7bfa      	ldrb	r2, [r7, #15]
 8002006:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002008:	7bfa      	ldrb	r2, [r7, #15]
 800200a:	7bfb      	ldrb	r3, [r7, #15]
 800200c:	b298      	uxth	r0, r3
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	4613      	mov	r3, r2
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	1a9b      	subs	r3, r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	440b      	add	r3, r1
 800201a:	3342      	adds	r3, #66	; 0x42
 800201c:	4602      	mov	r2, r0
 800201e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002020:	7bfa      	ldrb	r2, [r7, #15]
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	4613      	mov	r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	1a9b      	subs	r3, r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	440b      	add	r3, r1
 800202e:	333f      	adds	r3, #63	; 0x3f
 8002030:	2200      	movs	r2, #0
 8002032:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002034:	7bfa      	ldrb	r2, [r7, #15]
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	4613      	mov	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	1a9b      	subs	r3, r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	440b      	add	r3, r1
 8002042:	3344      	adds	r3, #68	; 0x44
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002048:	7bfa      	ldrb	r2, [r7, #15]
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	4613      	mov	r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	1a9b      	subs	r3, r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	440b      	add	r3, r1
 8002056:	3348      	adds	r3, #72	; 0x48
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800205c:	7bfa      	ldrb	r2, [r7, #15]
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	4613      	mov	r3, r2
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	1a9b      	subs	r3, r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	440b      	add	r3, r1
 800206a:	3350      	adds	r3, #80	; 0x50
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002070:	7bfb      	ldrb	r3, [r7, #15]
 8002072:	3301      	adds	r3, #1
 8002074:	73fb      	strb	r3, [r7, #15]
 8002076:	7bfa      	ldrb	r2, [r7, #15]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	429a      	cmp	r2, r3
 800207e:	d3af      	bcc.n	8001fe0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002080:	2300      	movs	r3, #0
 8002082:	73fb      	strb	r3, [r7, #15]
 8002084:	e044      	b.n	8002110 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002086:	7bfa      	ldrb	r2, [r7, #15]
 8002088:	6879      	ldr	r1, [r7, #4]
 800208a:	4613      	mov	r3, r2
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	1a9b      	subs	r3, r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	440b      	add	r3, r1
 8002094:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002098:	2200      	movs	r2, #0
 800209a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800209c:	7bfa      	ldrb	r2, [r7, #15]
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	4613      	mov	r3, r2
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	1a9b      	subs	r3, r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80020ae:	7bfa      	ldrb	r2, [r7, #15]
 80020b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020b2:	7bfa      	ldrb	r2, [r7, #15]
 80020b4:	6879      	ldr	r1, [r7, #4]
 80020b6:	4613      	mov	r3, r2
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	1a9b      	subs	r3, r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	440b      	add	r3, r1
 80020c0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80020c4:	2200      	movs	r2, #0
 80020c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020c8:	7bfa      	ldrb	r2, [r7, #15]
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	4613      	mov	r3, r2
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	1a9b      	subs	r3, r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020de:	7bfa      	ldrb	r2, [r7, #15]
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	1a9b      	subs	r3, r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	440b      	add	r3, r1
 80020ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020f4:	7bfa      	ldrb	r2, [r7, #15]
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	4613      	mov	r3, r2
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	1a9b      	subs	r3, r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	440b      	add	r3, r1
 8002102:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800210a:	7bfb      	ldrb	r3, [r7, #15]
 800210c:	3301      	adds	r3, #1
 800210e:	73fb      	strb	r3, [r7, #15]
 8002110:	7bfa      	ldrb	r2, [r7, #15]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	429a      	cmp	r2, r3
 8002118:	d3b5      	bcc.n	8002086 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	603b      	str	r3, [r7, #0]
 8002120:	687e      	ldr	r6, [r7, #4]
 8002122:	466d      	mov	r5, sp
 8002124:	f106 0410 	add.w	r4, r6, #16
 8002128:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800212a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800212c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800212e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002130:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002134:	e885 0003 	stmia.w	r5, {r0, r1}
 8002138:	1d33      	adds	r3, r6, #4
 800213a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800213c:	6838      	ldr	r0, [r7, #0]
 800213e:	f002 f865 	bl	800420c <USB_DevInit>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d005      	beq.n	8002154 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2202      	movs	r2, #2
 800214c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e00d      	b.n	8002170 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f003 f8e1 	bl	8005330 <USB_DevDisconnect>

  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3714      	adds	r7, #20
 8002174:	46bd      	mov	sp, r7
 8002176:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002178 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800218c:	2b01      	cmp	r3, #1
 800218e:	d101      	bne.n	8002194 <HAL_PCD_Start+0x1c>
 8002190:	2302      	movs	r3, #2
 8002192:	e020      	b.n	80021d6 <HAL_PCD_Start+0x5e>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d109      	bne.n	80021b8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d005      	beq.n	80021b8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	f001 ffb7 	bl	8004130 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f003 f891 	bl	80052ee <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80021de:	b590      	push	{r4, r7, lr}
 80021e0:	b08d      	sub	sp, #52	; 0x34
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021ec:	6a3b      	ldr	r3, [r7, #32]
 80021ee:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f003 f94f 	bl	8005498 <USB_GetMode>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f040 839d 	bne.w	800293c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f003 f8b3 	bl	8005372 <USB_ReadInterrupts>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	f000 8393 	beq.w	800293a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f003 f8aa 	bl	8005372 <USB_ReadInterrupts>
 800221e:	4603      	mov	r3, r0
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b02      	cmp	r3, #2
 8002226:	d107      	bne.n	8002238 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	695a      	ldr	r2, [r3, #20]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f002 0202 	and.w	r2, r2, #2
 8002236:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f003 f898 	bl	8005372 <USB_ReadInterrupts>
 8002242:	4603      	mov	r3, r0
 8002244:	f003 0310 	and.w	r3, r3, #16
 8002248:	2b10      	cmp	r3, #16
 800224a:	d161      	bne.n	8002310 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	699a      	ldr	r2, [r3, #24]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 0210 	bic.w	r2, r2, #16
 800225a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800225c:	6a3b      	ldr	r3, [r7, #32]
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	f003 020f 	and.w	r2, r3, #15
 8002268:	4613      	mov	r3, r2
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	1a9b      	subs	r3, r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	4413      	add	r3, r2
 8002278:	3304      	adds	r3, #4
 800227a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	0c5b      	lsrs	r3, r3, #17
 8002280:	f003 030f 	and.w	r3, r3, #15
 8002284:	2b02      	cmp	r3, #2
 8002286:	d124      	bne.n	80022d2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800228e:	4013      	ands	r3, r2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d035      	beq.n	8002300 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	091b      	lsrs	r3, r3, #4
 800229c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800229e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	461a      	mov	r2, r3
 80022a6:	6a38      	ldr	r0, [r7, #32]
 80022a8:	f002 fecf 	bl	800504a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	68da      	ldr	r2, [r3, #12]
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	091b      	lsrs	r3, r3, #4
 80022b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022b8:	441a      	add	r2, r3
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	699a      	ldr	r2, [r3, #24]
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	091b      	lsrs	r3, r3, #4
 80022c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022ca:	441a      	add	r2, r3
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	619a      	str	r2, [r3, #24]
 80022d0:	e016      	b.n	8002300 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	0c5b      	lsrs	r3, r3, #17
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	2b06      	cmp	r3, #6
 80022dc:	d110      	bne.n	8002300 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80022e4:	2208      	movs	r2, #8
 80022e6:	4619      	mov	r1, r3
 80022e8:	6a38      	ldr	r0, [r7, #32]
 80022ea:	f002 feae 	bl	800504a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	699a      	ldr	r2, [r3, #24]
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	091b      	lsrs	r3, r3, #4
 80022f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022fa:	441a      	add	r2, r3
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	699a      	ldr	r2, [r3, #24]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f042 0210 	orr.w	r2, r2, #16
 800230e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4618      	mov	r0, r3
 8002316:	f003 f82c 	bl	8005372 <USB_ReadInterrupts>
 800231a:	4603      	mov	r3, r0
 800231c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002320:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002324:	d16e      	bne.n	8002404 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002326:	2300      	movs	r3, #0
 8002328:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f003 f832 	bl	8005398 <USB_ReadDevAllOutEpInterrupt>
 8002334:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002336:	e062      	b.n	80023fe <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b00      	cmp	r3, #0
 8002340:	d057      	beq.n	80023f2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002348:	b2d2      	uxtb	r2, r2
 800234a:	4611      	mov	r1, r2
 800234c:	4618      	mov	r0, r3
 800234e:	f003 f857 	bl	8005400 <USB_ReadDevOutEPInterrupt>
 8002352:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00c      	beq.n	8002378 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	015a      	lsls	r2, r3, #5
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	4413      	add	r3, r2
 8002366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800236a:	461a      	mov	r2, r3
 800236c:	2301      	movs	r3, #1
 800236e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002370:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 fd98 	bl	8002ea8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	f003 0308 	and.w	r3, r3, #8
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00c      	beq.n	800239c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	015a      	lsls	r2, r3, #5
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	4413      	add	r3, r2
 800238a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800238e:	461a      	mov	r2, r3
 8002390:	2308      	movs	r3, #8
 8002392:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002394:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 fe92 	bl	80030c0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	f003 0310 	and.w	r3, r3, #16
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d008      	beq.n	80023b8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	015a      	lsls	r2, r3, #5
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	4413      	add	r3, r2
 80023ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023b2:	461a      	mov	r2, r3
 80023b4:	2310      	movs	r3, #16
 80023b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	f003 0320 	and.w	r3, r3, #32
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d008      	beq.n	80023d4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c4:	015a      	lsls	r2, r3, #5
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	4413      	add	r3, r2
 80023ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ce:	461a      	mov	r2, r3
 80023d0:	2320      	movs	r3, #32
 80023d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d009      	beq.n	80023f2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80023de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e0:	015a      	lsls	r2, r3, #5
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	4413      	add	r3, r2
 80023e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ea:	461a      	mov	r2, r3
 80023ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023f0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80023f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f4:	3301      	adds	r3, #1
 80023f6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80023f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fa:	085b      	lsrs	r3, r3, #1
 80023fc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80023fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002400:	2b00      	cmp	r3, #0
 8002402:	d199      	bne.n	8002338 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f002 ffb2 	bl	8005372 <USB_ReadInterrupts>
 800240e:	4603      	mov	r3, r0
 8002410:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002414:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002418:	f040 80c0 	bne.w	800259c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f002 ffd3 	bl	80053cc <USB_ReadDevAllInEpInterrupt>
 8002426:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002428:	2300      	movs	r3, #0
 800242a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800242c:	e0b2      	b.n	8002594 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800242e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	2b00      	cmp	r3, #0
 8002436:	f000 80a7 	beq.w	8002588 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	4611      	mov	r1, r2
 8002444:	4618      	mov	r0, r3
 8002446:	f002 fff9 	bl	800543c <USB_ReadDevInEPInterrupt>
 800244a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	d057      	beq.n	8002506 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	f003 030f 	and.w	r3, r3, #15
 800245c:	2201      	movs	r2, #1
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800246a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	43db      	mvns	r3, r3
 8002470:	69f9      	ldr	r1, [r7, #28]
 8002472:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002476:	4013      	ands	r3, r2
 8002478:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	015a      	lsls	r2, r3, #5
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	4413      	add	r3, r2
 8002482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002486:	461a      	mov	r2, r3
 8002488:	2301      	movs	r3, #1
 800248a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d132      	bne.n	80024fa <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002494:	6879      	ldr	r1, [r7, #4]
 8002496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002498:	4613      	mov	r3, r2
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	1a9b      	subs	r3, r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	440b      	add	r3, r1
 80024a2:	3348      	adds	r3, #72	; 0x48
 80024a4:	6819      	ldr	r1, [r3, #0]
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024aa:	4613      	mov	r3, r2
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	1a9b      	subs	r3, r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4403      	add	r3, r0
 80024b4:	3344      	adds	r3, #68	; 0x44
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4419      	add	r1, r3
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024be:	4613      	mov	r3, r2
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	1a9b      	subs	r3, r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4403      	add	r3, r0
 80024c8:	3348      	adds	r3, #72	; 0x48
 80024ca:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d113      	bne.n	80024fa <HAL_PCD_IRQHandler+0x31c>
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024d6:	4613      	mov	r3, r2
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	1a9b      	subs	r3, r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	440b      	add	r3, r1
 80024e0:	3350      	adds	r3, #80	; 0x50
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d108      	bne.n	80024fa <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6818      	ldr	r0, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80024f2:	461a      	mov	r2, r3
 80024f4:	2101      	movs	r1, #1
 80024f6:	f003 f801 	bl	80054fc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80024fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	4619      	mov	r1, r3
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f004 fd86 	bl	8007012 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	f003 0308 	and.w	r3, r3, #8
 800250c:	2b00      	cmp	r3, #0
 800250e:	d008      	beq.n	8002522 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002512:	015a      	lsls	r2, r3, #5
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	4413      	add	r3, r2
 8002518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800251c:	461a      	mov	r2, r3
 800251e:	2308      	movs	r3, #8
 8002520:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	f003 0310 	and.w	r3, r3, #16
 8002528:	2b00      	cmp	r3, #0
 800252a:	d008      	beq.n	800253e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	015a      	lsls	r2, r3, #5
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	4413      	add	r3, r2
 8002534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002538:	461a      	mov	r2, r3
 800253a:	2310      	movs	r3, #16
 800253c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002544:	2b00      	cmp	r3, #0
 8002546:	d008      	beq.n	800255a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254a:	015a      	lsls	r2, r3, #5
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	4413      	add	r3, r2
 8002550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002554:	461a      	mov	r2, r3
 8002556:	2340      	movs	r3, #64	; 0x40
 8002558:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d008      	beq.n	8002576 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	015a      	lsls	r2, r3, #5
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	4413      	add	r3, r2
 800256c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002570:	461a      	mov	r2, r3
 8002572:	2302      	movs	r3, #2
 8002574:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800257c:	2b00      	cmp	r3, #0
 800257e:	d003      	beq.n	8002588 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002580:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 fc03 	bl	8002d8e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258a:	3301      	adds	r3, #1
 800258c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800258e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002590:	085b      	lsrs	r3, r3, #1
 8002592:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002596:	2b00      	cmp	r3, #0
 8002598:	f47f af49 	bne.w	800242e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f002 fee6 	bl	8005372 <USB_ReadInterrupts>
 80025a6:	4603      	mov	r3, r0
 80025a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80025ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025b0:	d122      	bne.n	80025f8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	69fa      	ldr	r2, [r7, #28]
 80025bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025c0:	f023 0301 	bic.w	r3, r3, #1
 80025c4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d108      	bne.n	80025e2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80025d8:	2100      	movs	r1, #0
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 fe0e 	bl	80031fc <HAL_PCDEx_LPM_Callback>
 80025e0:	e002      	b.n	80025e8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f004 fd8c 	bl	8007100 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	695a      	ldr	r2, [r3, #20]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80025f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f002 feb8 	bl	8005372 <USB_ReadInterrupts>
 8002602:	4603      	mov	r3, r0
 8002604:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002608:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800260c:	d112      	bne.n	8002634 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b01      	cmp	r3, #1
 800261c:	d102      	bne.n	8002624 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f004 fd48 	bl	80070b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	695a      	ldr	r2, [r3, #20]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002632:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f002 fe9a 	bl	8005372 <USB_ReadInterrupts>
 800263e:	4603      	mov	r3, r0
 8002640:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002648:	f040 80c7 	bne.w	80027da <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	69fa      	ldr	r2, [r7, #28]
 8002656:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800265a:	f023 0301 	bic.w	r3, r3, #1
 800265e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2110      	movs	r1, #16
 8002666:	4618      	mov	r0, r3
 8002668:	f001 ff34 	bl	80044d4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800266c:	2300      	movs	r3, #0
 800266e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002670:	e056      	b.n	8002720 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002674:	015a      	lsls	r2, r3, #5
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	4413      	add	r3, r2
 800267a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800267e:	461a      	mov	r2, r3
 8002680:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002684:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002688:	015a      	lsls	r2, r3, #5
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	4413      	add	r3, r2
 800268e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002696:	0151      	lsls	r1, r2, #5
 8002698:	69fa      	ldr	r2, [r7, #28]
 800269a:	440a      	add	r2, r1
 800269c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80026a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80026a4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80026a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a8:	015a      	lsls	r2, r3, #5
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	4413      	add	r3, r2
 80026ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026b6:	0151      	lsls	r1, r2, #5
 80026b8:	69fa      	ldr	r2, [r7, #28]
 80026ba:	440a      	add	r2, r1
 80026bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80026c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80026c4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80026c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c8:	015a      	lsls	r2, r3, #5
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	4413      	add	r3, r2
 80026ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026d2:	461a      	mov	r2, r3
 80026d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80026d8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80026da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026dc:	015a      	lsls	r2, r3, #5
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	4413      	add	r3, r2
 80026e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026ea:	0151      	lsls	r1, r2, #5
 80026ec:	69fa      	ldr	r2, [r7, #28]
 80026ee:	440a      	add	r2, r1
 80026f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80026f4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80026f8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80026fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026fc:	015a      	lsls	r2, r3, #5
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	4413      	add	r3, r2
 8002702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800270a:	0151      	lsls	r1, r2, #5
 800270c:	69fa      	ldr	r2, [r7, #28]
 800270e:	440a      	add	r2, r1
 8002710:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002714:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002718:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800271a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800271c:	3301      	adds	r3, #1
 800271e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002726:	429a      	cmp	r2, r3
 8002728:	d3a3      	bcc.n	8002672 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	69fa      	ldr	r2, [r7, #28]
 8002734:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002738:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800273c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	2b00      	cmp	r3, #0
 8002744:	d016      	beq.n	8002774 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800274c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002750:	69fa      	ldr	r2, [r7, #28]
 8002752:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002756:	f043 030b 	orr.w	r3, r3, #11
 800275a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002766:	69fa      	ldr	r2, [r7, #28]
 8002768:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800276c:	f043 030b 	orr.w	r3, r3, #11
 8002770:	6453      	str	r3, [r2, #68]	; 0x44
 8002772:	e015      	b.n	80027a0 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	69fa      	ldr	r2, [r7, #28]
 800277e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002782:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002786:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800278a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	69fa      	ldr	r2, [r7, #28]
 8002796:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800279a:	f043 030b 	orr.w	r3, r3, #11
 800279e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	69fa      	ldr	r2, [r7, #28]
 80027aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027ae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80027b2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6818      	ldr	r0, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80027c4:	461a      	mov	r2, r3
 80027c6:	f002 fe99 	bl	80054fc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	695a      	ldr	r2, [r3, #20]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80027d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f002 fdc7 	bl	8005372 <USB_ReadInterrupts>
 80027e4:	4603      	mov	r3, r0
 80027e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027ee:	d124      	bne.n	800283a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f002 fe5d 	bl	80054b4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f001 fec5 	bl	800458e <USB_GetDevSpeed>
 8002804:	4603      	mov	r3, r0
 8002806:	461a      	mov	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681c      	ldr	r4, [r3, #0]
 8002810:	f001 f940 	bl	8003a94 <HAL_RCC_GetHCLKFreq>
 8002814:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800281a:	b2db      	uxtb	r3, r3
 800281c:	461a      	mov	r2, r3
 800281e:	4620      	mov	r0, r4
 8002820:	f001 fbe4 	bl	8003fec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f004 fc1c 	bl	8007062 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	695a      	ldr	r2, [r3, #20]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002838:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f002 fd97 	bl	8005372 <USB_ReadInterrupts>
 8002844:	4603      	mov	r3, r0
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	2b08      	cmp	r3, #8
 800284c:	d10a      	bne.n	8002864 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f004 fbf9 	bl	8007046 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	695a      	ldr	r2, [r3, #20]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f002 0208 	and.w	r2, r2, #8
 8002862:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f002 fd82 	bl	8005372 <USB_ReadInterrupts>
 800286e:	4603      	mov	r3, r0
 8002870:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002874:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002878:	d10f      	bne.n	800289a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800287a:	2300      	movs	r3, #0
 800287c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	b2db      	uxtb	r3, r3
 8002882:	4619      	mov	r1, r3
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f004 fc5b 	bl	8007140 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	695a      	ldr	r2, [r3, #20]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002898:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f002 fd67 	bl	8005372 <USB_ReadInterrupts>
 80028a4:	4603      	mov	r3, r0
 80028a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028ae:	d10f      	bne.n	80028d0 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80028b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	4619      	mov	r1, r3
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f004 fc2e 	bl	800711c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	695a      	ldr	r2, [r3, #20]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80028ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f002 fd4c 	bl	8005372 <USB_ReadInterrupts>
 80028da:	4603      	mov	r3, r0
 80028dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80028e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028e4:	d10a      	bne.n	80028fc <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f004 fc3c 	bl	8007164 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	695a      	ldr	r2, [r3, #20]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80028fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f002 fd36 	bl	8005372 <USB_ReadInterrupts>
 8002906:	4603      	mov	r3, r0
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b04      	cmp	r3, #4
 800290e:	d115      	bne.n	800293c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	f003 0304 	and.w	r3, r3, #4
 800291e:	2b00      	cmp	r3, #0
 8002920:	d002      	beq.n	8002928 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f004 fc2c 	bl	8007180 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6859      	ldr	r1, [r3, #4]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	430a      	orrs	r2, r1
 8002936:	605a      	str	r2, [r3, #4]
 8002938:	e000      	b.n	800293c <HAL_PCD_IRQHandler+0x75e>
      return;
 800293a:	bf00      	nop
    }
  }
}
 800293c:	3734      	adds	r7, #52	; 0x34
 800293e:	46bd      	mov	sp, r7
 8002940:	bd90      	pop	{r4, r7, pc}

08002942 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b082      	sub	sp, #8
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
 800294a:	460b      	mov	r3, r1
 800294c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002954:	2b01      	cmp	r3, #1
 8002956:	d101      	bne.n	800295c <HAL_PCD_SetAddress+0x1a>
 8002958:	2302      	movs	r3, #2
 800295a:	e013      	b.n	8002984 <HAL_PCD_SetAddress+0x42>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	78fa      	ldrb	r2, [r7, #3]
 8002968:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	78fa      	ldrb	r2, [r7, #3]
 8002972:	4611      	mov	r1, r2
 8002974:	4618      	mov	r0, r3
 8002976:	f002 fc94 	bl	80052a2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	4608      	mov	r0, r1
 8002996:	4611      	mov	r1, r2
 8002998:	461a      	mov	r2, r3
 800299a:	4603      	mov	r3, r0
 800299c:	70fb      	strb	r3, [r7, #3]
 800299e:	460b      	mov	r3, r1
 80029a0:	803b      	strh	r3, [r7, #0]
 80029a2:	4613      	mov	r3, r2
 80029a4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80029a6:	2300      	movs	r3, #0
 80029a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	da0f      	bge.n	80029d2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029b2:	78fb      	ldrb	r3, [r7, #3]
 80029b4:	f003 020f 	and.w	r2, r3, #15
 80029b8:	4613      	mov	r3, r2
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	1a9b      	subs	r3, r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	3338      	adds	r3, #56	; 0x38
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	4413      	add	r3, r2
 80029c6:	3304      	adds	r3, #4
 80029c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2201      	movs	r2, #1
 80029ce:	705a      	strb	r2, [r3, #1]
 80029d0:	e00f      	b.n	80029f2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029d2:	78fb      	ldrb	r3, [r7, #3]
 80029d4:	f003 020f 	and.w	r2, r3, #15
 80029d8:	4613      	mov	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	1a9b      	subs	r3, r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	4413      	add	r3, r2
 80029e8:	3304      	adds	r3, #4
 80029ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80029f2:	78fb      	ldrb	r3, [r7, #3]
 80029f4:	f003 030f 	and.w	r3, r3, #15
 80029f8:	b2da      	uxtb	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80029fe:	883a      	ldrh	r2, [r7, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	78ba      	ldrb	r2, [r7, #2]
 8002a08:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	785b      	ldrb	r3, [r3, #1]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d004      	beq.n	8002a1c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002a1c:	78bb      	ldrb	r3, [r7, #2]
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d102      	bne.n	8002a28 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d101      	bne.n	8002a36 <HAL_PCD_EP_Open+0xaa>
 8002a32:	2302      	movs	r3, #2
 8002a34:	e00e      	b.n	8002a54 <HAL_PCD_EP_Open+0xc8>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68f9      	ldr	r1, [r7, #12]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f001 fdc7 	bl	80045d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002a52:	7afb      	ldrb	r3, [r7, #11]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	460b      	mov	r3, r1
 8002a66:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	da0f      	bge.n	8002a90 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a70:	78fb      	ldrb	r3, [r7, #3]
 8002a72:	f003 020f 	and.w	r2, r3, #15
 8002a76:	4613      	mov	r3, r2
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	1a9b      	subs	r3, r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	3338      	adds	r3, #56	; 0x38
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	4413      	add	r3, r2
 8002a84:	3304      	adds	r3, #4
 8002a86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	705a      	strb	r2, [r3, #1]
 8002a8e:	e00f      	b.n	8002ab0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a90:	78fb      	ldrb	r3, [r7, #3]
 8002a92:	f003 020f 	and.w	r2, r3, #15
 8002a96:	4613      	mov	r3, r2
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	1a9b      	subs	r3, r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	3304      	adds	r3, #4
 8002aa8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002ab0:	78fb      	ldrb	r3, [r7, #3]
 8002ab2:	f003 030f 	and.w	r3, r3, #15
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d101      	bne.n	8002aca <HAL_PCD_EP_Close+0x6e>
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	e00e      	b.n	8002ae8 <HAL_PCD_EP_Close+0x8c>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68f9      	ldr	r1, [r7, #12]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f001 fe05 	bl	80046e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	607a      	str	r2, [r7, #4]
 8002afa:	603b      	str	r3, [r7, #0]
 8002afc:	460b      	mov	r3, r1
 8002afe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b00:	7afb      	ldrb	r3, [r7, #11]
 8002b02:	f003 020f 	and.w	r2, r3, #15
 8002b06:	4613      	mov	r3, r2
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	1a9b      	subs	r3, r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	4413      	add	r3, r2
 8002b16:	3304      	adds	r3, #4
 8002b18:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b32:	7afb      	ldrb	r3, [r7, #11]
 8002b34:	f003 030f 	and.w	r3, r3, #15
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d102      	bne.n	8002b4c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b4c:	7afb      	ldrb	r3, [r7, #11]
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d109      	bne.n	8002b6a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6818      	ldr	r0, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	461a      	mov	r2, r3
 8002b62:	6979      	ldr	r1, [r7, #20]
 8002b64:	f002 f8e0 	bl	8004d28 <USB_EP0StartXfer>
 8002b68:	e008      	b.n	8002b7c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6818      	ldr	r0, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	461a      	mov	r2, r3
 8002b76:	6979      	ldr	r1, [r7, #20]
 8002b78:	f001 fe92 	bl	80048a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3718      	adds	r7, #24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b086      	sub	sp, #24
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	60f8      	str	r0, [r7, #12]
 8002b8e:	607a      	str	r2, [r7, #4]
 8002b90:	603b      	str	r3, [r7, #0]
 8002b92:	460b      	mov	r3, r1
 8002b94:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b96:	7afb      	ldrb	r3, [r7, #11]
 8002b98:	f003 020f 	and.w	r2, r3, #15
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	1a9b      	subs	r3, r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	3338      	adds	r3, #56	; 0x38
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	4413      	add	r3, r2
 8002baa:	3304      	adds	r3, #4
 8002bac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bc6:	7afb      	ldrb	r3, [r7, #11]
 8002bc8:	f003 030f 	and.w	r3, r3, #15
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d102      	bne.n	8002be0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002be0:	7afb      	ldrb	r3, [r7, #11]
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d109      	bne.n	8002bfe <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6818      	ldr	r0, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	6979      	ldr	r1, [r7, #20]
 8002bf8:	f002 f896 	bl	8004d28 <USB_EP0StartXfer>
 8002bfc:	e008      	b.n	8002c10 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6818      	ldr	r0, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	461a      	mov	r2, r3
 8002c0a:	6979      	ldr	r1, [r7, #20]
 8002c0c:	f001 fe48 	bl	80048a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b084      	sub	sp, #16
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
 8002c22:	460b      	mov	r3, r1
 8002c24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002c26:	78fb      	ldrb	r3, [r7, #3]
 8002c28:	f003 020f 	and.w	r2, r3, #15
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d901      	bls.n	8002c38 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e050      	b.n	8002cda <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	da0f      	bge.n	8002c60 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c40:	78fb      	ldrb	r3, [r7, #3]
 8002c42:	f003 020f 	and.w	r2, r3, #15
 8002c46:	4613      	mov	r3, r2
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	1a9b      	subs	r3, r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	3338      	adds	r3, #56	; 0x38
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	4413      	add	r3, r2
 8002c54:	3304      	adds	r3, #4
 8002c56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	705a      	strb	r2, [r3, #1]
 8002c5e:	e00d      	b.n	8002c7c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c60:	78fa      	ldrb	r2, [r7, #3]
 8002c62:	4613      	mov	r3, r2
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	1a9b      	subs	r3, r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	4413      	add	r3, r2
 8002c72:	3304      	adds	r3, #4
 8002c74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c82:	78fb      	ldrb	r3, [r7, #3]
 8002c84:	f003 030f 	and.w	r3, r3, #15
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d101      	bne.n	8002c9c <HAL_PCD_EP_SetStall+0x82>
 8002c98:	2302      	movs	r3, #2
 8002c9a:	e01e      	b.n	8002cda <HAL_PCD_EP_SetStall+0xc0>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68f9      	ldr	r1, [r7, #12]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f002 fa25 	bl	80050fa <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cb0:	78fb      	ldrb	r3, [r7, #3]
 8002cb2:	f003 030f 	and.w	r3, r3, #15
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10a      	bne.n	8002cd0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6818      	ldr	r0, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	b2d9      	uxtb	r1, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002cca:	461a      	mov	r2, r3
 8002ccc:	f002 fc16 	bl	80054fc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b084      	sub	sp, #16
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
 8002cea:	460b      	mov	r3, r1
 8002cec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002cee:	78fb      	ldrb	r3, [r7, #3]
 8002cf0:	f003 020f 	and.w	r2, r3, #15
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d901      	bls.n	8002d00 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e042      	b.n	8002d86 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	da0f      	bge.n	8002d28 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d08:	78fb      	ldrb	r3, [r7, #3]
 8002d0a:	f003 020f 	and.w	r2, r3, #15
 8002d0e:	4613      	mov	r3, r2
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	1a9b      	subs	r3, r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	3338      	adds	r3, #56	; 0x38
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2201      	movs	r2, #1
 8002d24:	705a      	strb	r2, [r3, #1]
 8002d26:	e00f      	b.n	8002d48 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d28:	78fb      	ldrb	r3, [r7, #3]
 8002d2a:	f003 020f 	and.w	r2, r3, #15
 8002d2e:	4613      	mov	r3, r2
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	1a9b      	subs	r3, r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	3304      	adds	r3, #4
 8002d40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d4e:	78fb      	ldrb	r3, [r7, #3]
 8002d50:	f003 030f 	and.w	r3, r3, #15
 8002d54:	b2da      	uxtb	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d101      	bne.n	8002d68 <HAL_PCD_EP_ClrStall+0x86>
 8002d64:	2302      	movs	r3, #2
 8002d66:	e00e      	b.n	8002d86 <HAL_PCD_EP_ClrStall+0xa4>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68f9      	ldr	r1, [r7, #12]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f002 fa2d 	bl	80051d6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b08a      	sub	sp, #40	; 0x28
 8002d92:	af02      	add	r7, sp, #8
 8002d94:	6078      	str	r0, [r7, #4]
 8002d96:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	4613      	mov	r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	1a9b      	subs	r3, r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	3338      	adds	r3, #56	; 0x38
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	4413      	add	r3, r2
 8002db2:	3304      	adds	r3, #4
 8002db4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	699a      	ldr	r2, [r3, #24]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d901      	bls.n	8002dc6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e06c      	b.n	8002ea0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	695a      	ldr	r2, [r3, #20]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	69fa      	ldr	r2, [r7, #28]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d902      	bls.n	8002de2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	3303      	adds	r3, #3
 8002de6:	089b      	lsrs	r3, r3, #2
 8002de8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002dea:	e02b      	b.n	8002e44 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	695a      	ldr	r2, [r3, #20]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	69fa      	ldr	r2, [r7, #28]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d902      	bls.n	8002e08 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	3303      	adds	r3, #3
 8002e0c:	089b      	lsrs	r3, r3, #2
 8002e0e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	68d9      	ldr	r1, [r3, #12]
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	b2da      	uxtb	r2, r3
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	9300      	str	r3, [sp, #0]
 8002e24:	4603      	mov	r3, r0
 8002e26:	6978      	ldr	r0, [r7, #20]
 8002e28:	f002 f8d1 	bl	8004fce <USB_WritePacket>

    ep->xfer_buff  += len;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	68da      	ldr	r2, [r3, #12]
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	441a      	add	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	699a      	ldr	r2, [r3, #24]
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	441a      	add	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	015a      	lsls	r2, r3, #5
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d809      	bhi.n	8002e6e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	699a      	ldr	r2, [r3, #24]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d203      	bcs.n	8002e6e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1be      	bne.n	8002dec <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	695a      	ldr	r2, [r3, #20]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d811      	bhi.n	8002e9e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	f003 030f 	and.w	r3, r3, #15
 8002e80:	2201      	movs	r2, #1
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	43db      	mvns	r3, r3
 8002e94:	6939      	ldr	r1, [r7, #16]
 8002e96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3720      	adds	r7, #32
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	333c      	adds	r3, #60	; 0x3c
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	015a      	lsls	r2, r3, #5
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	4413      	add	r3, r2
 8002ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	f040 80a0 	bne.w	8003020 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	f003 0308 	and.w	r3, r3, #8
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d015      	beq.n	8002f16 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	4a72      	ldr	r2, [pc, #456]	; (80030b8 <PCD_EP_OutXfrComplete_int+0x210>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	f240 80dd 	bls.w	80030ae <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 80d7 	beq.w	80030ae <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	015a      	lsls	r2, r3, #5
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	4413      	add	r3, r2
 8002f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f12:	6093      	str	r3, [r2, #8]
 8002f14:	e0cb      	b.n	80030ae <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	f003 0320 	and.w	r3, r3, #32
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d009      	beq.n	8002f34 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	015a      	lsls	r2, r3, #5
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	4413      	add	r3, r2
 8002f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	2320      	movs	r3, #32
 8002f30:	6093      	str	r3, [r2, #8]
 8002f32:	e0bc      	b.n	80030ae <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f040 80b7 	bne.w	80030ae <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	4a5d      	ldr	r2, [pc, #372]	; (80030b8 <PCD_EP_OutXfrComplete_int+0x210>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d90f      	bls.n	8002f68 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00a      	beq.n	8002f68 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	015a      	lsls	r2, r3, #5
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	4413      	add	r3, r2
 8002f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f5e:	461a      	mov	r2, r3
 8002f60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f64:	6093      	str	r3, [r2, #8]
 8002f66:	e0a2      	b.n	80030ae <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	1a9b      	subs	r3, r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002f7a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	0159      	lsls	r1, r3, #5
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	440b      	add	r3, r1
 8002f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002f8e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	4613      	mov	r3, r2
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	1a9b      	subs	r3, r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4403      	add	r3, r0
 8002f9e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002fa2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002fa4:	6879      	ldr	r1, [r7, #4]
 8002fa6:	683a      	ldr	r2, [r7, #0]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	1a9b      	subs	r3, r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	440b      	add	r3, r1
 8002fb2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002fb6:	6819      	ldr	r1, [r3, #0]
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	1a9b      	subs	r3, r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4403      	add	r3, r0
 8002fc6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4419      	add	r1, r3
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	1a9b      	subs	r3, r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4403      	add	r3, r0
 8002fdc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002fe0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d114      	bne.n	8003012 <PCD_EP_OutXfrComplete_int+0x16a>
 8002fe8:	6879      	ldr	r1, [r7, #4]
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	4613      	mov	r3, r2
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	1a9b      	subs	r3, r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d108      	bne.n	8003012 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6818      	ldr	r0, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800300a:	461a      	mov	r2, r3
 800300c:	2101      	movs	r1, #1
 800300e:	f002 fa75 	bl	80054fc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	b2db      	uxtb	r3, r3
 8003016:	4619      	mov	r1, r3
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f003 ffdf 	bl	8006fdc <HAL_PCD_DataOutStageCallback>
 800301e:	e046      	b.n	80030ae <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4a26      	ldr	r2, [pc, #152]	; (80030bc <PCD_EP_OutXfrComplete_int+0x214>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d124      	bne.n	8003072 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00a      	beq.n	8003048 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	015a      	lsls	r2, r3, #5
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	4413      	add	r3, r2
 800303a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800303e:	461a      	mov	r2, r3
 8003040:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003044:	6093      	str	r3, [r2, #8]
 8003046:	e032      	b.n	80030ae <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	f003 0320 	and.w	r3, r3, #32
 800304e:	2b00      	cmp	r3, #0
 8003050:	d008      	beq.n	8003064 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	015a      	lsls	r2, r3, #5
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	4413      	add	r3, r2
 800305a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800305e:	461a      	mov	r2, r3
 8003060:	2320      	movs	r3, #32
 8003062:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	b2db      	uxtb	r3, r3
 8003068:	4619      	mov	r1, r3
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f003 ffb6 	bl	8006fdc <HAL_PCD_DataOutStageCallback>
 8003070:	e01d      	b.n	80030ae <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d114      	bne.n	80030a2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003078:	6879      	ldr	r1, [r7, #4]
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	4613      	mov	r3, r2
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	1a9b      	subs	r3, r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d108      	bne.n	80030a2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6818      	ldr	r0, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800309a:	461a      	mov	r2, r3
 800309c:	2100      	movs	r1, #0
 800309e:	f002 fa2d 	bl	80054fc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	4619      	mov	r1, r3
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f003 ff97 	bl	8006fdc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3718      	adds	r7, #24
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	4f54300a 	.word	0x4f54300a
 80030bc:	4f54310a 	.word	0x4f54310a

080030c0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	333c      	adds	r3, #60	; 0x3c
 80030d8:	3304      	adds	r3, #4
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	015a      	lsls	r2, r3, #5
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	4413      	add	r3, r2
 80030e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	4a15      	ldr	r2, [pc, #84]	; (8003148 <PCD_EP_OutSetupPacket_int+0x88>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d90e      	bls.n	8003114 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d009      	beq.n	8003114 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	015a      	lsls	r2, r3, #5
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	4413      	add	r3, r2
 8003108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800310c:	461a      	mov	r2, r3
 800310e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003112:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f003 ff4f 	bl	8006fb8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	4a0a      	ldr	r2, [pc, #40]	; (8003148 <PCD_EP_OutSetupPacket_int+0x88>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d90c      	bls.n	800313c <PCD_EP_OutSetupPacket_int+0x7c>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d108      	bne.n	800313c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6818      	ldr	r0, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003134:	461a      	mov	r2, r3
 8003136:	2101      	movs	r1, #1
 8003138:	f002 f9e0 	bl	80054fc <USB_EP0_OutStart>
  }

  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	4f54300a 	.word	0x4f54300a

0800314c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	460b      	mov	r3, r1
 8003156:	70fb      	strb	r3, [r7, #3]
 8003158:	4613      	mov	r3, r2
 800315a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003164:	78fb      	ldrb	r3, [r7, #3]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d107      	bne.n	800317a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800316a:	883b      	ldrh	r3, [r7, #0]
 800316c:	0419      	lsls	r1, r3, #16
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68ba      	ldr	r2, [r7, #8]
 8003174:	430a      	orrs	r2, r1
 8003176:	629a      	str	r2, [r3, #40]	; 0x28
 8003178:	e028      	b.n	80031cc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003180:	0c1b      	lsrs	r3, r3, #16
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	4413      	add	r3, r2
 8003186:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003188:	2300      	movs	r3, #0
 800318a:	73fb      	strb	r3, [r7, #15]
 800318c:	e00d      	b.n	80031aa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	7bfb      	ldrb	r3, [r7, #15]
 8003194:	3340      	adds	r3, #64	; 0x40
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	0c1b      	lsrs	r3, r3, #16
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	4413      	add	r3, r2
 80031a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80031a4:	7bfb      	ldrb	r3, [r7, #15]
 80031a6:	3301      	adds	r3, #1
 80031a8:	73fb      	strb	r3, [r7, #15]
 80031aa:	7bfa      	ldrb	r2, [r7, #15]
 80031ac:	78fb      	ldrb	r3, [r7, #3]
 80031ae:	3b01      	subs	r3, #1
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d3ec      	bcc.n	800318e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80031b4:	883b      	ldrh	r3, [r7, #0]
 80031b6:	0418      	lsls	r0, r3, #16
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6819      	ldr	r1, [r3, #0]
 80031bc:	78fb      	ldrb	r3, [r7, #3]
 80031be:	3b01      	subs	r3, #1
 80031c0:	68ba      	ldr	r2, [r7, #8]
 80031c2:	4302      	orrs	r2, r0
 80031c4:	3340      	adds	r3, #64	; 0x40
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	440b      	add	r3, r1
 80031ca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3714      	adds	r7, #20
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr

080031da <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80031da:	b480      	push	{r7}
 80031dc:	b083      	sub	sp, #12
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
 80031e2:	460b      	mov	r3, r1
 80031e4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	887a      	ldrh	r2, [r7, #2]
 80031ec:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	460b      	mov	r3, r1
 8003206:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e264      	b.n	80036f0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d075      	beq.n	800331e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003232:	4ba3      	ldr	r3, [pc, #652]	; (80034c0 <HAL_RCC_OscConfig+0x2ac>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 030c 	and.w	r3, r3, #12
 800323a:	2b04      	cmp	r3, #4
 800323c:	d00c      	beq.n	8003258 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800323e:	4ba0      	ldr	r3, [pc, #640]	; (80034c0 <HAL_RCC_OscConfig+0x2ac>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003246:	2b08      	cmp	r3, #8
 8003248:	d112      	bne.n	8003270 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800324a:	4b9d      	ldr	r3, [pc, #628]	; (80034c0 <HAL_RCC_OscConfig+0x2ac>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003252:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003256:	d10b      	bne.n	8003270 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003258:	4b99      	ldr	r3, [pc, #612]	; (80034c0 <HAL_RCC_OscConfig+0x2ac>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d05b      	beq.n	800331c <HAL_RCC_OscConfig+0x108>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d157      	bne.n	800331c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e23f      	b.n	80036f0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003278:	d106      	bne.n	8003288 <HAL_RCC_OscConfig+0x74>
 800327a:	4b91      	ldr	r3, [pc, #580]	; (80034c0 <HAL_RCC_OscConfig+0x2ac>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a90      	ldr	r2, [pc, #576]	; (80034c0 <HAL_RCC_OscConfig+0x2ac>)
 8003280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003284:	6013      	str	r3, [r2, #0]
 8003286:	e01d      	b.n	80032c4 <HAL_RCC_OscConfig+0xb0>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003290:	d10c      	bne.n	80032ac <HAL_RCC_OscConfig+0x98>
 8003292:	4b8b      	ldr	r3, [pc, #556]	; (80034c0 <HAL_RCC_OscConfig+0x2ac>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a8a      	ldr	r2, [pc, #552]	; (80034c0 <HAL_RCC_OscConfig+0x2ac>)
 8003298:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800329c:	6013      	str	r3, [r2, #0]
 800329e:	4b88      	ldr	r3, [pc, #544]	; (80034c0 <HAL_RCC_OscConfig+0x2ac>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a87      	ldr	r2, [pc, #540]	; (80034c0 <HAL_RCC_OscConfig+0x2ac>)
 80032a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a8:	6013      	str	r3, [r2, #0]
 80032aa:	e00b      	b.n	80032c4 <HAL_RCC_OscConfig+0xb0>
 80032ac:	4b84      	ldr	r3, [pc, #528]	; (80034c0 <HAL_RCC_OscConfig+0x2ac>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a83      	ldr	r2, [pc, #524]	; (80034c0 <HAL_RCC_OscConfig+0x2ac>)
 80032b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032b6:	6013      	str	r3, [r2, #0]
 80032b8:	4b81      	ldr	r3, [pc, #516]	; (80034c0 <HAL_RCC_OscConfig+0x2ac>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a80      	ldr	r2, [pc, #512]	; (80034c0 <HAL_RCC_OscConfig+0x2ac>)
 80032be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d013      	beq.n	80032f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032cc:	f7fe fb18 	bl	8001900 <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032d4:	f7fe fb14 	bl	8001900 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b64      	cmp	r3, #100	; 0x64
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e204      	b.n	80036f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032e6:	4b76      	ldr	r3, [pc, #472]	; (80034c0 <HAL_RCC_OscConfig+0x2ac>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d0f0      	beq.n	80032d4 <HAL_RCC_OscConfig+0xc0>
 80032f2:	e014      	b.n	800331e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f4:	f7fe fb04 	bl	8001900 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032fc:	f7fe fb00 	bl	8001900 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b64      	cmp	r3, #100	; 0x64
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e1f0      	b.n	80036f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800330e:	4b6c      	ldr	r3, [pc, #432]	; (80034c0 <HAL_RCC_OscConfig+0x2ac>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1f0      	bne.n	80032fc <HAL_RCC_OscConfig+0xe8>
 800331a:	e000      	b.n	800331e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800331c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d063      	beq.n	80033f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800332a:	4b65      	ldr	r3, [pc, #404]	; (80034c0 <HAL_RCC_OscConfig+0x2ac>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f003 030c 	and.w	r3, r3, #12
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00b      	beq.n	800334e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003336:	4b62      	ldr	r3, [pc, #392]	; (80034c0 <HAL_RCC_OscConfig+0x2ac>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800333e:	2b08      	cmp	r3, #8
 8003340:	d11c      	bne.n	800337c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003342:	4b5f      	ldr	r3, [pc, #380]	; (80034c0 <HAL_RCC_OscConfig+0x2ac>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d116      	bne.n	800337c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800334e:	4b5c      	ldr	r3, [pc, #368]	; (80034c0 <HAL_RCC_OscConfig+0x2ac>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d005      	beq.n	8003366 <HAL_RCC_OscConfig+0x152>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d001      	beq.n	8003366 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e1c4      	b.n	80036f0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003366:	4b56      	ldr	r3, [pc, #344]	; (80034c0 <HAL_RCC_OscConfig+0x2ac>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	4952      	ldr	r1, [pc, #328]	; (80034c0 <HAL_RCC_OscConfig+0x2ac>)
 8003376:	4313      	orrs	r3, r2
 8003378:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800337a:	e03a      	b.n	80033f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d020      	beq.n	80033c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003384:	4b4f      	ldr	r3, [pc, #316]	; (80034c4 <HAL_RCC_OscConfig+0x2b0>)
 8003386:	2201      	movs	r2, #1
 8003388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800338a:	f7fe fab9 	bl	8001900 <HAL_GetTick>
 800338e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003390:	e008      	b.n	80033a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003392:	f7fe fab5 	bl	8001900 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d901      	bls.n	80033a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e1a5      	b.n	80036f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a4:	4b46      	ldr	r3, [pc, #280]	; (80034c0 <HAL_RCC_OscConfig+0x2ac>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d0f0      	beq.n	8003392 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033b0:	4b43      	ldr	r3, [pc, #268]	; (80034c0 <HAL_RCC_OscConfig+0x2ac>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	4940      	ldr	r1, [pc, #256]	; (80034c0 <HAL_RCC_OscConfig+0x2ac>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	600b      	str	r3, [r1, #0]
 80033c4:	e015      	b.n	80033f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033c6:	4b3f      	ldr	r3, [pc, #252]	; (80034c4 <HAL_RCC_OscConfig+0x2b0>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033cc:	f7fe fa98 	bl	8001900 <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033d4:	f7fe fa94 	bl	8001900 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e184      	b.n	80036f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033e6:	4b36      	ldr	r3, [pc, #216]	; (80034c0 <HAL_RCC_OscConfig+0x2ac>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1f0      	bne.n	80033d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0308 	and.w	r3, r3, #8
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d030      	beq.n	8003460 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d016      	beq.n	8003434 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003406:	4b30      	ldr	r3, [pc, #192]	; (80034c8 <HAL_RCC_OscConfig+0x2b4>)
 8003408:	2201      	movs	r2, #1
 800340a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800340c:	f7fe fa78 	bl	8001900 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003414:	f7fe fa74 	bl	8001900 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e164      	b.n	80036f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003426:	4b26      	ldr	r3, [pc, #152]	; (80034c0 <HAL_RCC_OscConfig+0x2ac>)
 8003428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0f0      	beq.n	8003414 <HAL_RCC_OscConfig+0x200>
 8003432:	e015      	b.n	8003460 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003434:	4b24      	ldr	r3, [pc, #144]	; (80034c8 <HAL_RCC_OscConfig+0x2b4>)
 8003436:	2200      	movs	r2, #0
 8003438:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800343a:	f7fe fa61 	bl	8001900 <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003442:	f7fe fa5d 	bl	8001900 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e14d      	b.n	80036f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003454:	4b1a      	ldr	r3, [pc, #104]	; (80034c0 <HAL_RCC_OscConfig+0x2ac>)
 8003456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1f0      	bne.n	8003442 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0304 	and.w	r3, r3, #4
 8003468:	2b00      	cmp	r3, #0
 800346a:	f000 80a0 	beq.w	80035ae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800346e:	2300      	movs	r3, #0
 8003470:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003472:	4b13      	ldr	r3, [pc, #76]	; (80034c0 <HAL_RCC_OscConfig+0x2ac>)
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10f      	bne.n	800349e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800347e:	2300      	movs	r3, #0
 8003480:	60bb      	str	r3, [r7, #8]
 8003482:	4b0f      	ldr	r3, [pc, #60]	; (80034c0 <HAL_RCC_OscConfig+0x2ac>)
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	4a0e      	ldr	r2, [pc, #56]	; (80034c0 <HAL_RCC_OscConfig+0x2ac>)
 8003488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800348c:	6413      	str	r3, [r2, #64]	; 0x40
 800348e:	4b0c      	ldr	r3, [pc, #48]	; (80034c0 <HAL_RCC_OscConfig+0x2ac>)
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003496:	60bb      	str	r3, [r7, #8]
 8003498:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800349a:	2301      	movs	r3, #1
 800349c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800349e:	4b0b      	ldr	r3, [pc, #44]	; (80034cc <HAL_RCC_OscConfig+0x2b8>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d121      	bne.n	80034ee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034aa:	4b08      	ldr	r3, [pc, #32]	; (80034cc <HAL_RCC_OscConfig+0x2b8>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a07      	ldr	r2, [pc, #28]	; (80034cc <HAL_RCC_OscConfig+0x2b8>)
 80034b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034b6:	f7fe fa23 	bl	8001900 <HAL_GetTick>
 80034ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034bc:	e011      	b.n	80034e2 <HAL_RCC_OscConfig+0x2ce>
 80034be:	bf00      	nop
 80034c0:	40023800 	.word	0x40023800
 80034c4:	42470000 	.word	0x42470000
 80034c8:	42470e80 	.word	0x42470e80
 80034cc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034d0:	f7fe fa16 	bl	8001900 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e106      	b.n	80036f0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e2:	4b85      	ldr	r3, [pc, #532]	; (80036f8 <HAL_RCC_OscConfig+0x4e4>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d0f0      	beq.n	80034d0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d106      	bne.n	8003504 <HAL_RCC_OscConfig+0x2f0>
 80034f6:	4b81      	ldr	r3, [pc, #516]	; (80036fc <HAL_RCC_OscConfig+0x4e8>)
 80034f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fa:	4a80      	ldr	r2, [pc, #512]	; (80036fc <HAL_RCC_OscConfig+0x4e8>)
 80034fc:	f043 0301 	orr.w	r3, r3, #1
 8003500:	6713      	str	r3, [r2, #112]	; 0x70
 8003502:	e01c      	b.n	800353e <HAL_RCC_OscConfig+0x32a>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	2b05      	cmp	r3, #5
 800350a:	d10c      	bne.n	8003526 <HAL_RCC_OscConfig+0x312>
 800350c:	4b7b      	ldr	r3, [pc, #492]	; (80036fc <HAL_RCC_OscConfig+0x4e8>)
 800350e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003510:	4a7a      	ldr	r2, [pc, #488]	; (80036fc <HAL_RCC_OscConfig+0x4e8>)
 8003512:	f043 0304 	orr.w	r3, r3, #4
 8003516:	6713      	str	r3, [r2, #112]	; 0x70
 8003518:	4b78      	ldr	r3, [pc, #480]	; (80036fc <HAL_RCC_OscConfig+0x4e8>)
 800351a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351c:	4a77      	ldr	r2, [pc, #476]	; (80036fc <HAL_RCC_OscConfig+0x4e8>)
 800351e:	f043 0301 	orr.w	r3, r3, #1
 8003522:	6713      	str	r3, [r2, #112]	; 0x70
 8003524:	e00b      	b.n	800353e <HAL_RCC_OscConfig+0x32a>
 8003526:	4b75      	ldr	r3, [pc, #468]	; (80036fc <HAL_RCC_OscConfig+0x4e8>)
 8003528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352a:	4a74      	ldr	r2, [pc, #464]	; (80036fc <HAL_RCC_OscConfig+0x4e8>)
 800352c:	f023 0301 	bic.w	r3, r3, #1
 8003530:	6713      	str	r3, [r2, #112]	; 0x70
 8003532:	4b72      	ldr	r3, [pc, #456]	; (80036fc <HAL_RCC_OscConfig+0x4e8>)
 8003534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003536:	4a71      	ldr	r2, [pc, #452]	; (80036fc <HAL_RCC_OscConfig+0x4e8>)
 8003538:	f023 0304 	bic.w	r3, r3, #4
 800353c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d015      	beq.n	8003572 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003546:	f7fe f9db 	bl	8001900 <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800354c:	e00a      	b.n	8003564 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800354e:	f7fe f9d7 	bl	8001900 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	f241 3288 	movw	r2, #5000	; 0x1388
 800355c:	4293      	cmp	r3, r2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e0c5      	b.n	80036f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003564:	4b65      	ldr	r3, [pc, #404]	; (80036fc <HAL_RCC_OscConfig+0x4e8>)
 8003566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d0ee      	beq.n	800354e <HAL_RCC_OscConfig+0x33a>
 8003570:	e014      	b.n	800359c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003572:	f7fe f9c5 	bl	8001900 <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003578:	e00a      	b.n	8003590 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800357a:	f7fe f9c1 	bl	8001900 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	f241 3288 	movw	r2, #5000	; 0x1388
 8003588:	4293      	cmp	r3, r2
 800358a:	d901      	bls.n	8003590 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e0af      	b.n	80036f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003590:	4b5a      	ldr	r3, [pc, #360]	; (80036fc <HAL_RCC_OscConfig+0x4e8>)
 8003592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1ee      	bne.n	800357a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800359c:	7dfb      	ldrb	r3, [r7, #23]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d105      	bne.n	80035ae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035a2:	4b56      	ldr	r3, [pc, #344]	; (80036fc <HAL_RCC_OscConfig+0x4e8>)
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	4a55      	ldr	r2, [pc, #340]	; (80036fc <HAL_RCC_OscConfig+0x4e8>)
 80035a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f000 809b 	beq.w	80036ee <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035b8:	4b50      	ldr	r3, [pc, #320]	; (80036fc <HAL_RCC_OscConfig+0x4e8>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f003 030c 	and.w	r3, r3, #12
 80035c0:	2b08      	cmp	r3, #8
 80035c2:	d05c      	beq.n	800367e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d141      	bne.n	8003650 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035cc:	4b4c      	ldr	r3, [pc, #304]	; (8003700 <HAL_RCC_OscConfig+0x4ec>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d2:	f7fe f995 	bl	8001900 <HAL_GetTick>
 80035d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035d8:	e008      	b.n	80035ec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035da:	f7fe f991 	bl	8001900 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d901      	bls.n	80035ec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e081      	b.n	80036f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ec:	4b43      	ldr	r3, [pc, #268]	; (80036fc <HAL_RCC_OscConfig+0x4e8>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1f0      	bne.n	80035da <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	69da      	ldr	r2, [r3, #28]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	431a      	orrs	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003606:	019b      	lsls	r3, r3, #6
 8003608:	431a      	orrs	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360e:	085b      	lsrs	r3, r3, #1
 8003610:	3b01      	subs	r3, #1
 8003612:	041b      	lsls	r3, r3, #16
 8003614:	431a      	orrs	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361a:	061b      	lsls	r3, r3, #24
 800361c:	4937      	ldr	r1, [pc, #220]	; (80036fc <HAL_RCC_OscConfig+0x4e8>)
 800361e:	4313      	orrs	r3, r2
 8003620:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003622:	4b37      	ldr	r3, [pc, #220]	; (8003700 <HAL_RCC_OscConfig+0x4ec>)
 8003624:	2201      	movs	r2, #1
 8003626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003628:	f7fe f96a 	bl	8001900 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003630:	f7fe f966 	bl	8001900 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e056      	b.n	80036f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003642:	4b2e      	ldr	r3, [pc, #184]	; (80036fc <HAL_RCC_OscConfig+0x4e8>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0f0      	beq.n	8003630 <HAL_RCC_OscConfig+0x41c>
 800364e:	e04e      	b.n	80036ee <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003650:	4b2b      	ldr	r3, [pc, #172]	; (8003700 <HAL_RCC_OscConfig+0x4ec>)
 8003652:	2200      	movs	r2, #0
 8003654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003656:	f7fe f953 	bl	8001900 <HAL_GetTick>
 800365a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800365c:	e008      	b.n	8003670 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800365e:	f7fe f94f 	bl	8001900 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e03f      	b.n	80036f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003670:	4b22      	ldr	r3, [pc, #136]	; (80036fc <HAL_RCC_OscConfig+0x4e8>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1f0      	bne.n	800365e <HAL_RCC_OscConfig+0x44a>
 800367c:	e037      	b.n	80036ee <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d101      	bne.n	800368a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e032      	b.n	80036f0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800368a:	4b1c      	ldr	r3, [pc, #112]	; (80036fc <HAL_RCC_OscConfig+0x4e8>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d028      	beq.n	80036ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d121      	bne.n	80036ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d11a      	bne.n	80036ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036ba:	4013      	ands	r3, r2
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036c0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d111      	bne.n	80036ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d0:	085b      	lsrs	r3, r3, #1
 80036d2:	3b01      	subs	r3, #1
 80036d4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d107      	bne.n	80036ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d001      	beq.n	80036ee <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e000      	b.n	80036f0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3718      	adds	r7, #24
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	40007000 	.word	0x40007000
 80036fc:	40023800 	.word	0x40023800
 8003700:	42470060 	.word	0x42470060

08003704 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d101      	bne.n	8003718 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e0cc      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003718:	4b68      	ldr	r3, [pc, #416]	; (80038bc <HAL_RCC_ClockConfig+0x1b8>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 030f 	and.w	r3, r3, #15
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	429a      	cmp	r2, r3
 8003724:	d90c      	bls.n	8003740 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003726:	4b65      	ldr	r3, [pc, #404]	; (80038bc <HAL_RCC_ClockConfig+0x1b8>)
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	b2d2      	uxtb	r2, r2
 800372c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800372e:	4b63      	ldr	r3, [pc, #396]	; (80038bc <HAL_RCC_ClockConfig+0x1b8>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 030f 	and.w	r3, r3, #15
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	429a      	cmp	r2, r3
 800373a:	d001      	beq.n	8003740 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e0b8      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d020      	beq.n	800378e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b00      	cmp	r3, #0
 8003756:	d005      	beq.n	8003764 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003758:	4b59      	ldr	r3, [pc, #356]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	4a58      	ldr	r2, [pc, #352]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 800375e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003762:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0308 	and.w	r3, r3, #8
 800376c:	2b00      	cmp	r3, #0
 800376e:	d005      	beq.n	800377c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003770:	4b53      	ldr	r3, [pc, #332]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	4a52      	ldr	r2, [pc, #328]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003776:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800377a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800377c:	4b50      	ldr	r3, [pc, #320]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	494d      	ldr	r1, [pc, #308]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 800378a:	4313      	orrs	r3, r2
 800378c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	d044      	beq.n	8003824 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d107      	bne.n	80037b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037a2:	4b47      	ldr	r3, [pc, #284]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d119      	bne.n	80037e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e07f      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d003      	beq.n	80037c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037be:	2b03      	cmp	r3, #3
 80037c0:	d107      	bne.n	80037d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037c2:	4b3f      	ldr	r3, [pc, #252]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d109      	bne.n	80037e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e06f      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d2:	4b3b      	ldr	r3, [pc, #236]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e067      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037e2:	4b37      	ldr	r3, [pc, #220]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f023 0203 	bic.w	r2, r3, #3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	4934      	ldr	r1, [pc, #208]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037f4:	f7fe f884 	bl	8001900 <HAL_GetTick>
 80037f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037fa:	e00a      	b.n	8003812 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037fc:	f7fe f880 	bl	8001900 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	f241 3288 	movw	r2, #5000	; 0x1388
 800380a:	4293      	cmp	r3, r2
 800380c:	d901      	bls.n	8003812 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e04f      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003812:	4b2b      	ldr	r3, [pc, #172]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f003 020c 	and.w	r2, r3, #12
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	429a      	cmp	r2, r3
 8003822:	d1eb      	bne.n	80037fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003824:	4b25      	ldr	r3, [pc, #148]	; (80038bc <HAL_RCC_ClockConfig+0x1b8>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 030f 	and.w	r3, r3, #15
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	429a      	cmp	r2, r3
 8003830:	d20c      	bcs.n	800384c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003832:	4b22      	ldr	r3, [pc, #136]	; (80038bc <HAL_RCC_ClockConfig+0x1b8>)
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	b2d2      	uxtb	r2, r2
 8003838:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800383a:	4b20      	ldr	r3, [pc, #128]	; (80038bc <HAL_RCC_ClockConfig+0x1b8>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 030f 	and.w	r3, r3, #15
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	429a      	cmp	r2, r3
 8003846:	d001      	beq.n	800384c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e032      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	2b00      	cmp	r3, #0
 8003856:	d008      	beq.n	800386a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003858:	4b19      	ldr	r3, [pc, #100]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	4916      	ldr	r1, [pc, #88]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003866:	4313      	orrs	r3, r2
 8003868:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0308 	and.w	r3, r3, #8
 8003872:	2b00      	cmp	r3, #0
 8003874:	d009      	beq.n	800388a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003876:	4b12      	ldr	r3, [pc, #72]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	490e      	ldr	r1, [pc, #56]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003886:	4313      	orrs	r3, r2
 8003888:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800388a:	f000 f821 	bl	80038d0 <HAL_RCC_GetSysClockFreq>
 800388e:	4602      	mov	r2, r0
 8003890:	4b0b      	ldr	r3, [pc, #44]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	091b      	lsrs	r3, r3, #4
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	490a      	ldr	r1, [pc, #40]	; (80038c4 <HAL_RCC_ClockConfig+0x1c0>)
 800389c:	5ccb      	ldrb	r3, [r1, r3]
 800389e:	fa22 f303 	lsr.w	r3, r2, r3
 80038a2:	4a09      	ldr	r2, [pc, #36]	; (80038c8 <HAL_RCC_ClockConfig+0x1c4>)
 80038a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038a6:	4b09      	ldr	r3, [pc, #36]	; (80038cc <HAL_RCC_ClockConfig+0x1c8>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fd ffe4 	bl	8001878 <HAL_InitTick>

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	40023c00 	.word	0x40023c00
 80038c0:	40023800 	.word	0x40023800
 80038c4:	08008124 	.word	0x08008124
 80038c8:	20000000 	.word	0x20000000
 80038cc:	20000004 	.word	0x20000004

080038d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80038d4:	b084      	sub	sp, #16
 80038d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038d8:	2300      	movs	r3, #0
 80038da:	607b      	str	r3, [r7, #4]
 80038dc:	2300      	movs	r3, #0
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	2300      	movs	r3, #0
 80038e2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80038e4:	2300      	movs	r3, #0
 80038e6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038e8:	4b67      	ldr	r3, [pc, #412]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f003 030c 	and.w	r3, r3, #12
 80038f0:	2b08      	cmp	r3, #8
 80038f2:	d00d      	beq.n	8003910 <HAL_RCC_GetSysClockFreq+0x40>
 80038f4:	2b08      	cmp	r3, #8
 80038f6:	f200 80bd 	bhi.w	8003a74 <HAL_RCC_GetSysClockFreq+0x1a4>
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d002      	beq.n	8003904 <HAL_RCC_GetSysClockFreq+0x34>
 80038fe:	2b04      	cmp	r3, #4
 8003900:	d003      	beq.n	800390a <HAL_RCC_GetSysClockFreq+0x3a>
 8003902:	e0b7      	b.n	8003a74 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003904:	4b61      	ldr	r3, [pc, #388]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003906:	60bb      	str	r3, [r7, #8]
       break;
 8003908:	e0b7      	b.n	8003a7a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800390a:	4b61      	ldr	r3, [pc, #388]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800390c:	60bb      	str	r3, [r7, #8]
      break;
 800390e:	e0b4      	b.n	8003a7a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003910:	4b5d      	ldr	r3, [pc, #372]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003918:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800391a:	4b5b      	ldr	r3, [pc, #364]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d04d      	beq.n	80039c2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003926:	4b58      	ldr	r3, [pc, #352]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	099b      	lsrs	r3, r3, #6
 800392c:	461a      	mov	r2, r3
 800392e:	f04f 0300 	mov.w	r3, #0
 8003932:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003936:	f04f 0100 	mov.w	r1, #0
 800393a:	ea02 0800 	and.w	r8, r2, r0
 800393e:	ea03 0901 	and.w	r9, r3, r1
 8003942:	4640      	mov	r0, r8
 8003944:	4649      	mov	r1, r9
 8003946:	f04f 0200 	mov.w	r2, #0
 800394a:	f04f 0300 	mov.w	r3, #0
 800394e:	014b      	lsls	r3, r1, #5
 8003950:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003954:	0142      	lsls	r2, r0, #5
 8003956:	4610      	mov	r0, r2
 8003958:	4619      	mov	r1, r3
 800395a:	ebb0 0008 	subs.w	r0, r0, r8
 800395e:	eb61 0109 	sbc.w	r1, r1, r9
 8003962:	f04f 0200 	mov.w	r2, #0
 8003966:	f04f 0300 	mov.w	r3, #0
 800396a:	018b      	lsls	r3, r1, #6
 800396c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003970:	0182      	lsls	r2, r0, #6
 8003972:	1a12      	subs	r2, r2, r0
 8003974:	eb63 0301 	sbc.w	r3, r3, r1
 8003978:	f04f 0000 	mov.w	r0, #0
 800397c:	f04f 0100 	mov.w	r1, #0
 8003980:	00d9      	lsls	r1, r3, #3
 8003982:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003986:	00d0      	lsls	r0, r2, #3
 8003988:	4602      	mov	r2, r0
 800398a:	460b      	mov	r3, r1
 800398c:	eb12 0208 	adds.w	r2, r2, r8
 8003990:	eb43 0309 	adc.w	r3, r3, r9
 8003994:	f04f 0000 	mov.w	r0, #0
 8003998:	f04f 0100 	mov.w	r1, #0
 800399c:	0259      	lsls	r1, r3, #9
 800399e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80039a2:	0250      	lsls	r0, r2, #9
 80039a4:	4602      	mov	r2, r0
 80039a6:	460b      	mov	r3, r1
 80039a8:	4610      	mov	r0, r2
 80039aa:	4619      	mov	r1, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	461a      	mov	r2, r3
 80039b0:	f04f 0300 	mov.w	r3, #0
 80039b4:	f7fd f8c2 	bl	8000b3c <__aeabi_uldivmod>
 80039b8:	4602      	mov	r2, r0
 80039ba:	460b      	mov	r3, r1
 80039bc:	4613      	mov	r3, r2
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	e04a      	b.n	8003a58 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039c2:	4b31      	ldr	r3, [pc, #196]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	099b      	lsrs	r3, r3, #6
 80039c8:	461a      	mov	r2, r3
 80039ca:	f04f 0300 	mov.w	r3, #0
 80039ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80039d2:	f04f 0100 	mov.w	r1, #0
 80039d6:	ea02 0400 	and.w	r4, r2, r0
 80039da:	ea03 0501 	and.w	r5, r3, r1
 80039de:	4620      	mov	r0, r4
 80039e0:	4629      	mov	r1, r5
 80039e2:	f04f 0200 	mov.w	r2, #0
 80039e6:	f04f 0300 	mov.w	r3, #0
 80039ea:	014b      	lsls	r3, r1, #5
 80039ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80039f0:	0142      	lsls	r2, r0, #5
 80039f2:	4610      	mov	r0, r2
 80039f4:	4619      	mov	r1, r3
 80039f6:	1b00      	subs	r0, r0, r4
 80039f8:	eb61 0105 	sbc.w	r1, r1, r5
 80039fc:	f04f 0200 	mov.w	r2, #0
 8003a00:	f04f 0300 	mov.w	r3, #0
 8003a04:	018b      	lsls	r3, r1, #6
 8003a06:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003a0a:	0182      	lsls	r2, r0, #6
 8003a0c:	1a12      	subs	r2, r2, r0
 8003a0e:	eb63 0301 	sbc.w	r3, r3, r1
 8003a12:	f04f 0000 	mov.w	r0, #0
 8003a16:	f04f 0100 	mov.w	r1, #0
 8003a1a:	00d9      	lsls	r1, r3, #3
 8003a1c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a20:	00d0      	lsls	r0, r2, #3
 8003a22:	4602      	mov	r2, r0
 8003a24:	460b      	mov	r3, r1
 8003a26:	1912      	adds	r2, r2, r4
 8003a28:	eb45 0303 	adc.w	r3, r5, r3
 8003a2c:	f04f 0000 	mov.w	r0, #0
 8003a30:	f04f 0100 	mov.w	r1, #0
 8003a34:	0299      	lsls	r1, r3, #10
 8003a36:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003a3a:	0290      	lsls	r0, r2, #10
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	460b      	mov	r3, r1
 8003a40:	4610      	mov	r0, r2
 8003a42:	4619      	mov	r1, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	461a      	mov	r2, r3
 8003a48:	f04f 0300 	mov.w	r3, #0
 8003a4c:	f7fd f876 	bl	8000b3c <__aeabi_uldivmod>
 8003a50:	4602      	mov	r2, r0
 8003a52:	460b      	mov	r3, r1
 8003a54:	4613      	mov	r3, r2
 8003a56:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a58:	4b0b      	ldr	r3, [pc, #44]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	0c1b      	lsrs	r3, r3, #16
 8003a5e:	f003 0303 	and.w	r3, r3, #3
 8003a62:	3301      	adds	r3, #1
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a70:	60bb      	str	r3, [r7, #8]
      break;
 8003a72:	e002      	b.n	8003a7a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a74:	4b05      	ldr	r3, [pc, #20]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003a76:	60bb      	str	r3, [r7, #8]
      break;
 8003a78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a7a:	68bb      	ldr	r3, [r7, #8]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003a86:	bf00      	nop
 8003a88:	40023800 	.word	0x40023800
 8003a8c:	00f42400 	.word	0x00f42400
 8003a90:	007a1200 	.word	0x007a1200

08003a94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a98:	4b03      	ldr	r3, [pc, #12]	; (8003aa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	20000000 	.word	0x20000000

08003aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ab0:	f7ff fff0 	bl	8003a94 <HAL_RCC_GetHCLKFreq>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	4b05      	ldr	r3, [pc, #20]	; (8003acc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	0a9b      	lsrs	r3, r3, #10
 8003abc:	f003 0307 	and.w	r3, r3, #7
 8003ac0:	4903      	ldr	r1, [pc, #12]	; (8003ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ac2:	5ccb      	ldrb	r3, [r1, r3]
 8003ac4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	40023800 	.word	0x40023800
 8003ad0:	08008134 	.word	0x08008134

08003ad4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ad8:	f7ff ffdc 	bl	8003a94 <HAL_RCC_GetHCLKFreq>
 8003adc:	4602      	mov	r2, r0
 8003ade:	4b05      	ldr	r3, [pc, #20]	; (8003af4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	0b5b      	lsrs	r3, r3, #13
 8003ae4:	f003 0307 	and.w	r3, r3, #7
 8003ae8:	4903      	ldr	r1, [pc, #12]	; (8003af8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003aea:	5ccb      	ldrb	r3, [r1, r3]
 8003aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	40023800 	.word	0x40023800
 8003af8:	08008134 	.word	0x08008134

08003afc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e03f      	b.n	8003b8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d106      	bne.n	8003b28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7fd fdce 	bl	80016c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2224      	movs	r2, #36	; 0x24
 8003b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68da      	ldr	r2, [r3, #12]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 f829 	bl	8003b98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	691a      	ldr	r2, [r3, #16]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	695a      	ldr	r2, [r3, #20]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68da      	ldr	r2, [r3, #12]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2220      	movs	r2, #32
 8003b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3708      	adds	r7, #8
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
	...

08003b98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b9c:	b09f      	sub	sp, #124	; 0x7c
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003bac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bae:	68d9      	ldr	r1, [r3, #12]
 8003bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	ea40 0301 	orr.w	r3, r0, r1
 8003bb8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bbc:	689a      	ldr	r2, [r3, #8]
 8003bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003bdc:	f021 010c 	bic.w	r1, r1, #12
 8003be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003be6:	430b      	orrs	r3, r1
 8003be8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003bf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bf6:	6999      	ldr	r1, [r3, #24]
 8003bf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	ea40 0301 	orr.w	r3, r0, r1
 8003c00:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	4bc5      	ldr	r3, [pc, #788]	; (8003f1c <UART_SetConfig+0x384>)
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d004      	beq.n	8003c16 <UART_SetConfig+0x7e>
 8003c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	4bc3      	ldr	r3, [pc, #780]	; (8003f20 <UART_SetConfig+0x388>)
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d103      	bne.n	8003c1e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c16:	f7ff ff5d 	bl	8003ad4 <HAL_RCC_GetPCLK2Freq>
 8003c1a:	6778      	str	r0, [r7, #116]	; 0x74
 8003c1c:	e002      	b.n	8003c24 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c1e:	f7ff ff45 	bl	8003aac <HAL_RCC_GetPCLK1Freq>
 8003c22:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c26:	69db      	ldr	r3, [r3, #28]
 8003c28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c2c:	f040 80b6 	bne.w	8003d9c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c32:	461c      	mov	r4, r3
 8003c34:	f04f 0500 	mov.w	r5, #0
 8003c38:	4622      	mov	r2, r4
 8003c3a:	462b      	mov	r3, r5
 8003c3c:	1891      	adds	r1, r2, r2
 8003c3e:	6439      	str	r1, [r7, #64]	; 0x40
 8003c40:	415b      	adcs	r3, r3
 8003c42:	647b      	str	r3, [r7, #68]	; 0x44
 8003c44:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c48:	1912      	adds	r2, r2, r4
 8003c4a:	eb45 0303 	adc.w	r3, r5, r3
 8003c4e:	f04f 0000 	mov.w	r0, #0
 8003c52:	f04f 0100 	mov.w	r1, #0
 8003c56:	00d9      	lsls	r1, r3, #3
 8003c58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c5c:	00d0      	lsls	r0, r2, #3
 8003c5e:	4602      	mov	r2, r0
 8003c60:	460b      	mov	r3, r1
 8003c62:	1911      	adds	r1, r2, r4
 8003c64:	6639      	str	r1, [r7, #96]	; 0x60
 8003c66:	416b      	adcs	r3, r5
 8003c68:	667b      	str	r3, [r7, #100]	; 0x64
 8003c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	f04f 0300 	mov.w	r3, #0
 8003c74:	1891      	adds	r1, r2, r2
 8003c76:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c78:	415b      	adcs	r3, r3
 8003c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003c80:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003c84:	f7fc ff5a 	bl	8000b3c <__aeabi_uldivmod>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	4ba5      	ldr	r3, [pc, #660]	; (8003f24 <UART_SetConfig+0x38c>)
 8003c8e:	fba3 2302 	umull	r2, r3, r3, r2
 8003c92:	095b      	lsrs	r3, r3, #5
 8003c94:	011e      	lsls	r6, r3, #4
 8003c96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c98:	461c      	mov	r4, r3
 8003c9a:	f04f 0500 	mov.w	r5, #0
 8003c9e:	4622      	mov	r2, r4
 8003ca0:	462b      	mov	r3, r5
 8003ca2:	1891      	adds	r1, r2, r2
 8003ca4:	6339      	str	r1, [r7, #48]	; 0x30
 8003ca6:	415b      	adcs	r3, r3
 8003ca8:	637b      	str	r3, [r7, #52]	; 0x34
 8003caa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003cae:	1912      	adds	r2, r2, r4
 8003cb0:	eb45 0303 	adc.w	r3, r5, r3
 8003cb4:	f04f 0000 	mov.w	r0, #0
 8003cb8:	f04f 0100 	mov.w	r1, #0
 8003cbc:	00d9      	lsls	r1, r3, #3
 8003cbe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003cc2:	00d0      	lsls	r0, r2, #3
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	1911      	adds	r1, r2, r4
 8003cca:	65b9      	str	r1, [r7, #88]	; 0x58
 8003ccc:	416b      	adcs	r3, r5
 8003cce:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	f04f 0300 	mov.w	r3, #0
 8003cda:	1891      	adds	r1, r2, r2
 8003cdc:	62b9      	str	r1, [r7, #40]	; 0x28
 8003cde:	415b      	adcs	r3, r3
 8003ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ce2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ce6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003cea:	f7fc ff27 	bl	8000b3c <__aeabi_uldivmod>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	4b8c      	ldr	r3, [pc, #560]	; (8003f24 <UART_SetConfig+0x38c>)
 8003cf4:	fba3 1302 	umull	r1, r3, r3, r2
 8003cf8:	095b      	lsrs	r3, r3, #5
 8003cfa:	2164      	movs	r1, #100	; 0x64
 8003cfc:	fb01 f303 	mul.w	r3, r1, r3
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	3332      	adds	r3, #50	; 0x32
 8003d06:	4a87      	ldr	r2, [pc, #540]	; (8003f24 <UART_SetConfig+0x38c>)
 8003d08:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0c:	095b      	lsrs	r3, r3, #5
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d14:	441e      	add	r6, r3
 8003d16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f04f 0100 	mov.w	r1, #0
 8003d1e:	4602      	mov	r2, r0
 8003d20:	460b      	mov	r3, r1
 8003d22:	1894      	adds	r4, r2, r2
 8003d24:	623c      	str	r4, [r7, #32]
 8003d26:	415b      	adcs	r3, r3
 8003d28:	627b      	str	r3, [r7, #36]	; 0x24
 8003d2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d2e:	1812      	adds	r2, r2, r0
 8003d30:	eb41 0303 	adc.w	r3, r1, r3
 8003d34:	f04f 0400 	mov.w	r4, #0
 8003d38:	f04f 0500 	mov.w	r5, #0
 8003d3c:	00dd      	lsls	r5, r3, #3
 8003d3e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003d42:	00d4      	lsls	r4, r2, #3
 8003d44:	4622      	mov	r2, r4
 8003d46:	462b      	mov	r3, r5
 8003d48:	1814      	adds	r4, r2, r0
 8003d4a:	653c      	str	r4, [r7, #80]	; 0x50
 8003d4c:	414b      	adcs	r3, r1
 8003d4e:	657b      	str	r3, [r7, #84]	; 0x54
 8003d50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	461a      	mov	r2, r3
 8003d56:	f04f 0300 	mov.w	r3, #0
 8003d5a:	1891      	adds	r1, r2, r2
 8003d5c:	61b9      	str	r1, [r7, #24]
 8003d5e:	415b      	adcs	r3, r3
 8003d60:	61fb      	str	r3, [r7, #28]
 8003d62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d66:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003d6a:	f7fc fee7 	bl	8000b3c <__aeabi_uldivmod>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	460b      	mov	r3, r1
 8003d72:	4b6c      	ldr	r3, [pc, #432]	; (8003f24 <UART_SetConfig+0x38c>)
 8003d74:	fba3 1302 	umull	r1, r3, r3, r2
 8003d78:	095b      	lsrs	r3, r3, #5
 8003d7a:	2164      	movs	r1, #100	; 0x64
 8003d7c:	fb01 f303 	mul.w	r3, r1, r3
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	00db      	lsls	r3, r3, #3
 8003d84:	3332      	adds	r3, #50	; 0x32
 8003d86:	4a67      	ldr	r2, [pc, #412]	; (8003f24 <UART_SetConfig+0x38c>)
 8003d88:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8c:	095b      	lsrs	r3, r3, #5
 8003d8e:	f003 0207 	and.w	r2, r3, #7
 8003d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4432      	add	r2, r6
 8003d98:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d9a:	e0b9      	b.n	8003f10 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d9e:	461c      	mov	r4, r3
 8003da0:	f04f 0500 	mov.w	r5, #0
 8003da4:	4622      	mov	r2, r4
 8003da6:	462b      	mov	r3, r5
 8003da8:	1891      	adds	r1, r2, r2
 8003daa:	6139      	str	r1, [r7, #16]
 8003dac:	415b      	adcs	r3, r3
 8003dae:	617b      	str	r3, [r7, #20]
 8003db0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003db4:	1912      	adds	r2, r2, r4
 8003db6:	eb45 0303 	adc.w	r3, r5, r3
 8003dba:	f04f 0000 	mov.w	r0, #0
 8003dbe:	f04f 0100 	mov.w	r1, #0
 8003dc2:	00d9      	lsls	r1, r3, #3
 8003dc4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003dc8:	00d0      	lsls	r0, r2, #3
 8003dca:	4602      	mov	r2, r0
 8003dcc:	460b      	mov	r3, r1
 8003dce:	eb12 0804 	adds.w	r8, r2, r4
 8003dd2:	eb43 0905 	adc.w	r9, r3, r5
 8003dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f04f 0100 	mov.w	r1, #0
 8003de0:	f04f 0200 	mov.w	r2, #0
 8003de4:	f04f 0300 	mov.w	r3, #0
 8003de8:	008b      	lsls	r3, r1, #2
 8003dea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003dee:	0082      	lsls	r2, r0, #2
 8003df0:	4640      	mov	r0, r8
 8003df2:	4649      	mov	r1, r9
 8003df4:	f7fc fea2 	bl	8000b3c <__aeabi_uldivmod>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	4b49      	ldr	r3, [pc, #292]	; (8003f24 <UART_SetConfig+0x38c>)
 8003dfe:	fba3 2302 	umull	r2, r3, r3, r2
 8003e02:	095b      	lsrs	r3, r3, #5
 8003e04:	011e      	lsls	r6, r3, #4
 8003e06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f04f 0100 	mov.w	r1, #0
 8003e0e:	4602      	mov	r2, r0
 8003e10:	460b      	mov	r3, r1
 8003e12:	1894      	adds	r4, r2, r2
 8003e14:	60bc      	str	r4, [r7, #8]
 8003e16:	415b      	adcs	r3, r3
 8003e18:	60fb      	str	r3, [r7, #12]
 8003e1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e1e:	1812      	adds	r2, r2, r0
 8003e20:	eb41 0303 	adc.w	r3, r1, r3
 8003e24:	f04f 0400 	mov.w	r4, #0
 8003e28:	f04f 0500 	mov.w	r5, #0
 8003e2c:	00dd      	lsls	r5, r3, #3
 8003e2e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003e32:	00d4      	lsls	r4, r2, #3
 8003e34:	4622      	mov	r2, r4
 8003e36:	462b      	mov	r3, r5
 8003e38:	1814      	adds	r4, r2, r0
 8003e3a:	64bc      	str	r4, [r7, #72]	; 0x48
 8003e3c:	414b      	adcs	r3, r1
 8003e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f04f 0100 	mov.w	r1, #0
 8003e4a:	f04f 0200 	mov.w	r2, #0
 8003e4e:	f04f 0300 	mov.w	r3, #0
 8003e52:	008b      	lsls	r3, r1, #2
 8003e54:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003e58:	0082      	lsls	r2, r0, #2
 8003e5a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003e5e:	f7fc fe6d 	bl	8000b3c <__aeabi_uldivmod>
 8003e62:	4602      	mov	r2, r0
 8003e64:	460b      	mov	r3, r1
 8003e66:	4b2f      	ldr	r3, [pc, #188]	; (8003f24 <UART_SetConfig+0x38c>)
 8003e68:	fba3 1302 	umull	r1, r3, r3, r2
 8003e6c:	095b      	lsrs	r3, r3, #5
 8003e6e:	2164      	movs	r1, #100	; 0x64
 8003e70:	fb01 f303 	mul.w	r3, r1, r3
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	011b      	lsls	r3, r3, #4
 8003e78:	3332      	adds	r3, #50	; 0x32
 8003e7a:	4a2a      	ldr	r2, [pc, #168]	; (8003f24 <UART_SetConfig+0x38c>)
 8003e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e80:	095b      	lsrs	r3, r3, #5
 8003e82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e86:	441e      	add	r6, r3
 8003e88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f04f 0100 	mov.w	r1, #0
 8003e90:	4602      	mov	r2, r0
 8003e92:	460b      	mov	r3, r1
 8003e94:	1894      	adds	r4, r2, r2
 8003e96:	603c      	str	r4, [r7, #0]
 8003e98:	415b      	adcs	r3, r3
 8003e9a:	607b      	str	r3, [r7, #4]
 8003e9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ea0:	1812      	adds	r2, r2, r0
 8003ea2:	eb41 0303 	adc.w	r3, r1, r3
 8003ea6:	f04f 0400 	mov.w	r4, #0
 8003eaa:	f04f 0500 	mov.w	r5, #0
 8003eae:	00dd      	lsls	r5, r3, #3
 8003eb0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003eb4:	00d4      	lsls	r4, r2, #3
 8003eb6:	4622      	mov	r2, r4
 8003eb8:	462b      	mov	r3, r5
 8003eba:	eb12 0a00 	adds.w	sl, r2, r0
 8003ebe:	eb43 0b01 	adc.w	fp, r3, r1
 8003ec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f04f 0100 	mov.w	r1, #0
 8003ecc:	f04f 0200 	mov.w	r2, #0
 8003ed0:	f04f 0300 	mov.w	r3, #0
 8003ed4:	008b      	lsls	r3, r1, #2
 8003ed6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003eda:	0082      	lsls	r2, r0, #2
 8003edc:	4650      	mov	r0, sl
 8003ede:	4659      	mov	r1, fp
 8003ee0:	f7fc fe2c 	bl	8000b3c <__aeabi_uldivmod>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	4b0e      	ldr	r3, [pc, #56]	; (8003f24 <UART_SetConfig+0x38c>)
 8003eea:	fba3 1302 	umull	r1, r3, r3, r2
 8003eee:	095b      	lsrs	r3, r3, #5
 8003ef0:	2164      	movs	r1, #100	; 0x64
 8003ef2:	fb01 f303 	mul.w	r3, r1, r3
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	011b      	lsls	r3, r3, #4
 8003efa:	3332      	adds	r3, #50	; 0x32
 8003efc:	4a09      	ldr	r2, [pc, #36]	; (8003f24 <UART_SetConfig+0x38c>)
 8003efe:	fba2 2303 	umull	r2, r3, r2, r3
 8003f02:	095b      	lsrs	r3, r3, #5
 8003f04:	f003 020f 	and.w	r2, r3, #15
 8003f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4432      	add	r2, r6
 8003f0e:	609a      	str	r2, [r3, #8]
}
 8003f10:	bf00      	nop
 8003f12:	377c      	adds	r7, #124	; 0x7c
 8003f14:	46bd      	mov	sp, r7
 8003f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f1a:	bf00      	nop
 8003f1c:	40011000 	.word	0x40011000
 8003f20:	40011400 	.word	0x40011400
 8003f24:	51eb851f 	.word	0x51eb851f

08003f28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f28:	b084      	sub	sp, #16
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b084      	sub	sp, #16
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
 8003f32:	f107 001c 	add.w	r0, r7, #28
 8003f36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d122      	bne.n	8003f86 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003f54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003f68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d105      	bne.n	8003f7a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f001 fb1c 	bl	80055b8 <USB_CoreReset>
 8003f80:	4603      	mov	r3, r0
 8003f82:	73fb      	strb	r3, [r7, #15]
 8003f84:	e01a      	b.n	8003fbc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f001 fb10 	bl	80055b8 <USB_CoreReset>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003f9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d106      	bne.n	8003fb0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	639a      	str	r2, [r3, #56]	; 0x38
 8003fae:	e005      	b.n	8003fbc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d10b      	bne.n	8003fda <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f043 0206 	orr.w	r2, r3, #6
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f043 0220 	orr.w	r2, r3, #32
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003fe6:	b004      	add	sp, #16
 8003fe8:	4770      	bx	lr
	...

08003fec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b087      	sub	sp, #28
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003ffa:	79fb      	ldrb	r3, [r7, #7]
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d165      	bne.n	80040cc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	4a41      	ldr	r2, [pc, #260]	; (8004108 <USB_SetTurnaroundTime+0x11c>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d906      	bls.n	8004016 <USB_SetTurnaroundTime+0x2a>
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	4a40      	ldr	r2, [pc, #256]	; (800410c <USB_SetTurnaroundTime+0x120>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d202      	bcs.n	8004016 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004010:	230f      	movs	r3, #15
 8004012:	617b      	str	r3, [r7, #20]
 8004014:	e062      	b.n	80040dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	4a3c      	ldr	r2, [pc, #240]	; (800410c <USB_SetTurnaroundTime+0x120>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d306      	bcc.n	800402c <USB_SetTurnaroundTime+0x40>
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	4a3b      	ldr	r2, [pc, #236]	; (8004110 <USB_SetTurnaroundTime+0x124>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d202      	bcs.n	800402c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004026:	230e      	movs	r3, #14
 8004028:	617b      	str	r3, [r7, #20]
 800402a:	e057      	b.n	80040dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	4a38      	ldr	r2, [pc, #224]	; (8004110 <USB_SetTurnaroundTime+0x124>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d306      	bcc.n	8004042 <USB_SetTurnaroundTime+0x56>
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	4a37      	ldr	r2, [pc, #220]	; (8004114 <USB_SetTurnaroundTime+0x128>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d202      	bcs.n	8004042 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800403c:	230d      	movs	r3, #13
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	e04c      	b.n	80040dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	4a33      	ldr	r2, [pc, #204]	; (8004114 <USB_SetTurnaroundTime+0x128>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d306      	bcc.n	8004058 <USB_SetTurnaroundTime+0x6c>
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	4a32      	ldr	r2, [pc, #200]	; (8004118 <USB_SetTurnaroundTime+0x12c>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d802      	bhi.n	8004058 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004052:	230c      	movs	r3, #12
 8004054:	617b      	str	r3, [r7, #20]
 8004056:	e041      	b.n	80040dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	4a2f      	ldr	r2, [pc, #188]	; (8004118 <USB_SetTurnaroundTime+0x12c>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d906      	bls.n	800406e <USB_SetTurnaroundTime+0x82>
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	4a2e      	ldr	r2, [pc, #184]	; (800411c <USB_SetTurnaroundTime+0x130>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d802      	bhi.n	800406e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004068:	230b      	movs	r3, #11
 800406a:	617b      	str	r3, [r7, #20]
 800406c:	e036      	b.n	80040dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	4a2a      	ldr	r2, [pc, #168]	; (800411c <USB_SetTurnaroundTime+0x130>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d906      	bls.n	8004084 <USB_SetTurnaroundTime+0x98>
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	4a29      	ldr	r2, [pc, #164]	; (8004120 <USB_SetTurnaroundTime+0x134>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d802      	bhi.n	8004084 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800407e:	230a      	movs	r3, #10
 8004080:	617b      	str	r3, [r7, #20]
 8004082:	e02b      	b.n	80040dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	4a26      	ldr	r2, [pc, #152]	; (8004120 <USB_SetTurnaroundTime+0x134>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d906      	bls.n	800409a <USB_SetTurnaroundTime+0xae>
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	4a25      	ldr	r2, [pc, #148]	; (8004124 <USB_SetTurnaroundTime+0x138>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d202      	bcs.n	800409a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004094:	2309      	movs	r3, #9
 8004096:	617b      	str	r3, [r7, #20]
 8004098:	e020      	b.n	80040dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	4a21      	ldr	r2, [pc, #132]	; (8004124 <USB_SetTurnaroundTime+0x138>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d306      	bcc.n	80040b0 <USB_SetTurnaroundTime+0xc4>
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	4a20      	ldr	r2, [pc, #128]	; (8004128 <USB_SetTurnaroundTime+0x13c>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d802      	bhi.n	80040b0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80040aa:	2308      	movs	r3, #8
 80040ac:	617b      	str	r3, [r7, #20]
 80040ae:	e015      	b.n	80040dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	4a1d      	ldr	r2, [pc, #116]	; (8004128 <USB_SetTurnaroundTime+0x13c>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d906      	bls.n	80040c6 <USB_SetTurnaroundTime+0xda>
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	4a1c      	ldr	r2, [pc, #112]	; (800412c <USB_SetTurnaroundTime+0x140>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d202      	bcs.n	80040c6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80040c0:	2307      	movs	r3, #7
 80040c2:	617b      	str	r3, [r7, #20]
 80040c4:	e00a      	b.n	80040dc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80040c6:	2306      	movs	r3, #6
 80040c8:	617b      	str	r3, [r7, #20]
 80040ca:	e007      	b.n	80040dc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80040cc:	79fb      	ldrb	r3, [r7, #7]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d102      	bne.n	80040d8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80040d2:	2309      	movs	r3, #9
 80040d4:	617b      	str	r3, [r7, #20]
 80040d6:	e001      	b.n	80040dc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80040d8:	2309      	movs	r3, #9
 80040da:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	68da      	ldr	r2, [r3, #12]
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	029b      	lsls	r3, r3, #10
 80040f0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80040f4:	431a      	orrs	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	371c      	adds	r7, #28
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr
 8004108:	00d8acbf 	.word	0x00d8acbf
 800410c:	00e4e1c0 	.word	0x00e4e1c0
 8004110:	00f42400 	.word	0x00f42400
 8004114:	01067380 	.word	0x01067380
 8004118:	011a499f 	.word	0x011a499f
 800411c:	01312cff 	.word	0x01312cff
 8004120:	014ca43f 	.word	0x014ca43f
 8004124:	016e3600 	.word	0x016e3600
 8004128:	01a6ab1f 	.word	0x01a6ab1f
 800412c:	01e84800 	.word	0x01e84800

08004130 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f043 0201 	orr.w	r2, r3, #1
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr

08004152 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004152:	b480      	push	{r7}
 8004154:	b083      	sub	sp, #12
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f023 0201 	bic.w	r2, r3, #1
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	460b      	mov	r3, r1
 800417e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004180:	2300      	movs	r3, #0
 8004182:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004190:	78fb      	ldrb	r3, [r7, #3]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d115      	bne.n	80041c2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80041a2:	2001      	movs	r0, #1
 80041a4:	f7fd fbb8 	bl	8001918 <HAL_Delay>
      ms++;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	3301      	adds	r3, #1
 80041ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f001 f972 	bl	8005498 <USB_GetMode>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d01e      	beq.n	80041f8 <USB_SetCurrentMode+0x84>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2b31      	cmp	r3, #49	; 0x31
 80041be:	d9f0      	bls.n	80041a2 <USB_SetCurrentMode+0x2e>
 80041c0:	e01a      	b.n	80041f8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80041c2:	78fb      	ldrb	r3, [r7, #3]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d115      	bne.n	80041f4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80041d4:	2001      	movs	r0, #1
 80041d6:	f7fd fb9f 	bl	8001918 <HAL_Delay>
      ms++;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	3301      	adds	r3, #1
 80041de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f001 f959 	bl	8005498 <USB_GetMode>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d005      	beq.n	80041f8 <USB_SetCurrentMode+0x84>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2b31      	cmp	r3, #49	; 0x31
 80041f0:	d9f0      	bls.n	80041d4 <USB_SetCurrentMode+0x60>
 80041f2:	e001      	b.n	80041f8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e005      	b.n	8004204 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2b32      	cmp	r3, #50	; 0x32
 80041fc:	d101      	bne.n	8004202 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e000      	b.n	8004204 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800420c:	b084      	sub	sp, #16
 800420e:	b580      	push	{r7, lr}
 8004210:	b086      	sub	sp, #24
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
 8004216:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800421a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800421e:	2300      	movs	r3, #0
 8004220:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004226:	2300      	movs	r3, #0
 8004228:	613b      	str	r3, [r7, #16]
 800422a:	e009      	b.n	8004240 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	3340      	adds	r3, #64	; 0x40
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4413      	add	r3, r2
 8004236:	2200      	movs	r2, #0
 8004238:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	3301      	adds	r3, #1
 800423e:	613b      	str	r3, [r7, #16]
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	2b0e      	cmp	r3, #14
 8004244:	d9f2      	bls.n	800422c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004248:	2b00      	cmp	r3, #0
 800424a:	d11c      	bne.n	8004286 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800425a:	f043 0302 	orr.w	r3, r3, #2
 800425e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004264:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004270:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	639a      	str	r2, [r3, #56]	; 0x38
 8004284:	e00b      	b.n	800429e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004296:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80042a4:	461a      	mov	r2, r3
 80042a6:	2300      	movs	r3, #0
 80042a8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b0:	4619      	mov	r1, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b8:	461a      	mov	r2, r3
 80042ba:	680b      	ldr	r3, [r1, #0]
 80042bc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80042be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d10c      	bne.n	80042de <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80042c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d104      	bne.n	80042d4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80042ca:	2100      	movs	r1, #0
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 f945 	bl	800455c <USB_SetDevSpeed>
 80042d2:	e008      	b.n	80042e6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80042d4:	2101      	movs	r1, #1
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f940 	bl	800455c <USB_SetDevSpeed>
 80042dc:	e003      	b.n	80042e6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80042de:	2103      	movs	r1, #3
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 f93b 	bl	800455c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80042e6:	2110      	movs	r1, #16
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 f8f3 	bl	80044d4 <USB_FlushTxFifo>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d001      	beq.n	80042f8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 f90f 	bl	800451c <USB_FlushRxFifo>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800430e:	461a      	mov	r2, r3
 8004310:	2300      	movs	r3, #0
 8004312:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800431a:	461a      	mov	r2, r3
 800431c:	2300      	movs	r3, #0
 800431e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004326:	461a      	mov	r2, r3
 8004328:	2300      	movs	r3, #0
 800432a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800432c:	2300      	movs	r3, #0
 800432e:	613b      	str	r3, [r7, #16]
 8004330:	e043      	b.n	80043ba <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	015a      	lsls	r2, r3, #5
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	4413      	add	r3, r2
 800433a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004344:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004348:	d118      	bne.n	800437c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10a      	bne.n	8004366 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	015a      	lsls	r2, r3, #5
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	4413      	add	r3, r2
 8004358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800435c:	461a      	mov	r2, r3
 800435e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004362:	6013      	str	r3, [r2, #0]
 8004364:	e013      	b.n	800438e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	015a      	lsls	r2, r3, #5
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	4413      	add	r3, r2
 800436e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004372:	461a      	mov	r2, r3
 8004374:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004378:	6013      	str	r3, [r2, #0]
 800437a:	e008      	b.n	800438e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	015a      	lsls	r2, r3, #5
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4413      	add	r3, r2
 8004384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004388:	461a      	mov	r2, r3
 800438a:	2300      	movs	r3, #0
 800438c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	015a      	lsls	r2, r3, #5
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	4413      	add	r3, r2
 8004396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800439a:	461a      	mov	r2, r3
 800439c:	2300      	movs	r3, #0
 800439e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	015a      	lsls	r2, r3, #5
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ac:	461a      	mov	r2, r3
 80043ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	3301      	adds	r3, #1
 80043b8:	613b      	str	r3, [r7, #16]
 80043ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d3b7      	bcc.n	8004332 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043c2:	2300      	movs	r3, #0
 80043c4:	613b      	str	r3, [r7, #16]
 80043c6:	e043      	b.n	8004450 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	015a      	lsls	r2, r3, #5
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	4413      	add	r3, r2
 80043d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043de:	d118      	bne.n	8004412 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10a      	bne.n	80043fc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	015a      	lsls	r2, r3, #5
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	4413      	add	r3, r2
 80043ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f2:	461a      	mov	r2, r3
 80043f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80043f8:	6013      	str	r3, [r2, #0]
 80043fa:	e013      	b.n	8004424 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	015a      	lsls	r2, r3, #5
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4413      	add	r3, r2
 8004404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004408:	461a      	mov	r2, r3
 800440a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800440e:	6013      	str	r3, [r2, #0]
 8004410:	e008      	b.n	8004424 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	015a      	lsls	r2, r3, #5
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	4413      	add	r3, r2
 800441a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800441e:	461a      	mov	r2, r3
 8004420:	2300      	movs	r3, #0
 8004422:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	015a      	lsls	r2, r3, #5
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	4413      	add	r3, r2
 800442c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004430:	461a      	mov	r2, r3
 8004432:	2300      	movs	r3, #0
 8004434:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	015a      	lsls	r2, r3, #5
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	4413      	add	r3, r2
 800443e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004442:	461a      	mov	r2, r3
 8004444:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004448:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	3301      	adds	r3, #1
 800444e:	613b      	str	r3, [r7, #16]
 8004450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	429a      	cmp	r2, r3
 8004456:	d3b7      	bcc.n	80043c8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004466:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800446a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004478:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800447a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447c:	2b00      	cmp	r3, #0
 800447e:	d105      	bne.n	800448c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	f043 0210 	orr.w	r2, r3, #16
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	699a      	ldr	r2, [r3, #24]
 8004490:	4b0f      	ldr	r3, [pc, #60]	; (80044d0 <USB_DevInit+0x2c4>)
 8004492:	4313      	orrs	r3, r2
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800449a:	2b00      	cmp	r3, #0
 800449c:	d005      	beq.n	80044aa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	f043 0208 	orr.w	r2, r3, #8
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80044aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d107      	bne.n	80044c0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044b8:	f043 0304 	orr.w	r3, r3, #4
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80044c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3718      	adds	r7, #24
 80044c6:	46bd      	mov	sp, r7
 80044c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044cc:	b004      	add	sp, #16
 80044ce:	4770      	bx	lr
 80044d0:	803c3800 	.word	0x803c3800

080044d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80044de:	2300      	movs	r3, #0
 80044e0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	019b      	lsls	r3, r3, #6
 80044e6:	f043 0220 	orr.w	r2, r3, #32
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	3301      	adds	r3, #1
 80044f2:	60fb      	str	r3, [r7, #12]
 80044f4:	4a08      	ldr	r2, [pc, #32]	; (8004518 <USB_FlushTxFifo+0x44>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d901      	bls.n	80044fe <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e006      	b.n	800450c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	f003 0320 	and.w	r3, r3, #32
 8004506:	2b20      	cmp	r3, #32
 8004508:	d0f1      	beq.n	80044ee <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3714      	adds	r7, #20
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr
 8004518:	00030d40 	.word	0x00030d40

0800451c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004524:	2300      	movs	r3, #0
 8004526:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2210      	movs	r2, #16
 800452c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	3301      	adds	r3, #1
 8004532:	60fb      	str	r3, [r7, #12]
 8004534:	4a08      	ldr	r2, [pc, #32]	; (8004558 <USB_FlushRxFifo+0x3c>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d901      	bls.n	800453e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e006      	b.n	800454c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	f003 0310 	and.w	r3, r3, #16
 8004546:	2b10      	cmp	r3, #16
 8004548:	d0f1      	beq.n	800452e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3714      	adds	r7, #20
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr
 8004558:	00030d40 	.word	0x00030d40

0800455c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	460b      	mov	r3, r1
 8004566:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	78fb      	ldrb	r3, [r7, #3]
 8004576:	68f9      	ldr	r1, [r7, #12]
 8004578:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800457c:	4313      	orrs	r3, r2
 800457e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3714      	adds	r7, #20
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr

0800458e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800458e:	b480      	push	{r7}
 8004590:	b087      	sub	sp, #28
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f003 0306 	and.w	r3, r3, #6
 80045a6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d102      	bne.n	80045b4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80045ae:	2300      	movs	r3, #0
 80045b0:	75fb      	strb	r3, [r7, #23]
 80045b2:	e00a      	b.n	80045ca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d002      	beq.n	80045c0 <USB_GetDevSpeed+0x32>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2b06      	cmp	r3, #6
 80045be:	d102      	bne.n	80045c6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80045c0:	2302      	movs	r3, #2
 80045c2:	75fb      	strb	r3, [r7, #23]
 80045c4:	e001      	b.n	80045ca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80045c6:	230f      	movs	r3, #15
 80045c8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80045ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	371c      	adds	r7, #28
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	785b      	ldrb	r3, [r3, #1]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d13a      	bne.n	800466a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045fa:	69da      	ldr	r2, [r3, #28]
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	f003 030f 	and.w	r3, r3, #15
 8004604:	2101      	movs	r1, #1
 8004606:	fa01 f303 	lsl.w	r3, r1, r3
 800460a:	b29b      	uxth	r3, r3
 800460c:	68f9      	ldr	r1, [r7, #12]
 800460e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004612:	4313      	orrs	r3, r2
 8004614:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	015a      	lsls	r2, r3, #5
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	4413      	add	r3, r2
 800461e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d155      	bne.n	80046d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	015a      	lsls	r2, r3, #5
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	4413      	add	r3, r2
 8004634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	78db      	ldrb	r3, [r3, #3]
 8004646:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004648:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	059b      	lsls	r3, r3, #22
 800464e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004650:	4313      	orrs	r3, r2
 8004652:	68ba      	ldr	r2, [r7, #8]
 8004654:	0151      	lsls	r1, r2, #5
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	440a      	add	r2, r1
 800465a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800465e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004662:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004666:	6013      	str	r3, [r2, #0]
 8004668:	e036      	b.n	80046d8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004670:	69da      	ldr	r2, [r3, #28]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	f003 030f 	and.w	r3, r3, #15
 800467a:	2101      	movs	r1, #1
 800467c:	fa01 f303 	lsl.w	r3, r1, r3
 8004680:	041b      	lsls	r3, r3, #16
 8004682:	68f9      	ldr	r1, [r7, #12]
 8004684:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004688:	4313      	orrs	r3, r2
 800468a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	015a      	lsls	r2, r3, #5
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	4413      	add	r3, r2
 8004694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d11a      	bne.n	80046d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	015a      	lsls	r2, r3, #5
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	4413      	add	r3, r2
 80046aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	78db      	ldrb	r3, [r3, #3]
 80046bc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80046be:	430b      	orrs	r3, r1
 80046c0:	4313      	orrs	r3, r2
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	0151      	lsls	r1, r2, #5
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	440a      	add	r2, r1
 80046ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046d6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3714      	adds	r7, #20
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
	...

080046e8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	785b      	ldrb	r3, [r3, #1]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d161      	bne.n	80047c8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	015a      	lsls	r2, r3, #5
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4413      	add	r3, r2
 800470c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004716:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800471a:	d11f      	bne.n	800475c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	015a      	lsls	r2, r3, #5
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4413      	add	r3, r2
 8004724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68ba      	ldr	r2, [r7, #8]
 800472c:	0151      	lsls	r1, r2, #5
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	440a      	add	r2, r1
 8004732:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004736:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800473a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	015a      	lsls	r2, r3, #5
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	4413      	add	r3, r2
 8004744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	0151      	lsls	r1, r2, #5
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	440a      	add	r2, r1
 8004752:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004756:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800475a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004762:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	f003 030f 	and.w	r3, r3, #15
 800476c:	2101      	movs	r1, #1
 800476e:	fa01 f303 	lsl.w	r3, r1, r3
 8004772:	b29b      	uxth	r3, r3
 8004774:	43db      	mvns	r3, r3
 8004776:	68f9      	ldr	r1, [r7, #12]
 8004778:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800477c:	4013      	ands	r3, r2
 800477e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004786:	69da      	ldr	r2, [r3, #28]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	f003 030f 	and.w	r3, r3, #15
 8004790:	2101      	movs	r1, #1
 8004792:	fa01 f303 	lsl.w	r3, r1, r3
 8004796:	b29b      	uxth	r3, r3
 8004798:	43db      	mvns	r3, r3
 800479a:	68f9      	ldr	r1, [r7, #12]
 800479c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047a0:	4013      	ands	r3, r2
 80047a2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	015a      	lsls	r2, r3, #5
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4413      	add	r3, r2
 80047ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	0159      	lsls	r1, r3, #5
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	440b      	add	r3, r1
 80047ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047be:	4619      	mov	r1, r3
 80047c0:	4b35      	ldr	r3, [pc, #212]	; (8004898 <USB_DeactivateEndpoint+0x1b0>)
 80047c2:	4013      	ands	r3, r2
 80047c4:	600b      	str	r3, [r1, #0]
 80047c6:	e060      	b.n	800488a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	015a      	lsls	r2, r3, #5
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	4413      	add	r3, r2
 80047d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047de:	d11f      	bne.n	8004820 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	015a      	lsls	r2, r3, #5
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	4413      	add	r3, r2
 80047e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	0151      	lsls	r1, r2, #5
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	440a      	add	r2, r1
 80047f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80047fe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	015a      	lsls	r2, r3, #5
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	4413      	add	r3, r2
 8004808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	0151      	lsls	r1, r2, #5
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	440a      	add	r2, r1
 8004816:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800481a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800481e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004826:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	f003 030f 	and.w	r3, r3, #15
 8004830:	2101      	movs	r1, #1
 8004832:	fa01 f303 	lsl.w	r3, r1, r3
 8004836:	041b      	lsls	r3, r3, #16
 8004838:	43db      	mvns	r3, r3
 800483a:	68f9      	ldr	r1, [r7, #12]
 800483c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004840:	4013      	ands	r3, r2
 8004842:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800484a:	69da      	ldr	r2, [r3, #28]
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	f003 030f 	and.w	r3, r3, #15
 8004854:	2101      	movs	r1, #1
 8004856:	fa01 f303 	lsl.w	r3, r1, r3
 800485a:	041b      	lsls	r3, r3, #16
 800485c:	43db      	mvns	r3, r3
 800485e:	68f9      	ldr	r1, [r7, #12]
 8004860:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004864:	4013      	ands	r3, r2
 8004866:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	015a      	lsls	r2, r3, #5
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	4413      	add	r3, r2
 8004870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	0159      	lsls	r1, r3, #5
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	440b      	add	r3, r1
 800487e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004882:	4619      	mov	r1, r3
 8004884:	4b05      	ldr	r3, [pc, #20]	; (800489c <USB_DeactivateEndpoint+0x1b4>)
 8004886:	4013      	ands	r3, r2
 8004888:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3714      	adds	r7, #20
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr
 8004898:	ec337800 	.word	0xec337800
 800489c:	eff37800 	.word	0xeff37800

080048a0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b08a      	sub	sp, #40	; 0x28
 80048a4:	af02      	add	r7, sp, #8
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	4613      	mov	r3, r2
 80048ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	785b      	ldrb	r3, [r3, #1]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	f040 815c 	bne.w	8004b7a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d132      	bne.n	8004930 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	015a      	lsls	r2, r3, #5
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	4413      	add	r3, r2
 80048d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	0151      	lsls	r1, r2, #5
 80048dc:	69fa      	ldr	r2, [r7, #28]
 80048de:	440a      	add	r2, r1
 80048e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80048e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80048ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	015a      	lsls	r2, r3, #5
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	4413      	add	r3, r2
 80048f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	69ba      	ldr	r2, [r7, #24]
 80048fe:	0151      	lsls	r1, r2, #5
 8004900:	69fa      	ldr	r2, [r7, #28]
 8004902:	440a      	add	r2, r1
 8004904:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004908:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800490c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	015a      	lsls	r2, r3, #5
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	4413      	add	r3, r2
 8004916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	0151      	lsls	r1, r2, #5
 8004920:	69fa      	ldr	r2, [r7, #28]
 8004922:	440a      	add	r2, r1
 8004924:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004928:	0cdb      	lsrs	r3, r3, #19
 800492a:	04db      	lsls	r3, r3, #19
 800492c:	6113      	str	r3, [r2, #16]
 800492e:	e074      	b.n	8004a1a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	015a      	lsls	r2, r3, #5
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	4413      	add	r3, r2
 8004938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	69ba      	ldr	r2, [r7, #24]
 8004940:	0151      	lsls	r1, r2, #5
 8004942:	69fa      	ldr	r2, [r7, #28]
 8004944:	440a      	add	r2, r1
 8004946:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800494a:	0cdb      	lsrs	r3, r3, #19
 800494c:	04db      	lsls	r3, r3, #19
 800494e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	015a      	lsls	r2, r3, #5
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	4413      	add	r3, r2
 8004958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	69ba      	ldr	r2, [r7, #24]
 8004960:	0151      	lsls	r1, r2, #5
 8004962:	69fa      	ldr	r2, [r7, #28]
 8004964:	440a      	add	r2, r1
 8004966:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800496a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800496e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004972:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	015a      	lsls	r2, r3, #5
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	4413      	add	r3, r2
 800497c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004980:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	6959      	ldr	r1, [r3, #20]
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	440b      	add	r3, r1
 800498c:	1e59      	subs	r1, r3, #1
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	fbb1 f3f3 	udiv	r3, r1, r3
 8004996:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004998:	4b9d      	ldr	r3, [pc, #628]	; (8004c10 <USB_EPStartXfer+0x370>)
 800499a:	400b      	ands	r3, r1
 800499c:	69b9      	ldr	r1, [r7, #24]
 800499e:	0148      	lsls	r0, r1, #5
 80049a0:	69f9      	ldr	r1, [r7, #28]
 80049a2:	4401      	add	r1, r0
 80049a4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80049a8:	4313      	orrs	r3, r2
 80049aa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	015a      	lsls	r2, r3, #5
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	4413      	add	r3, r2
 80049b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049b8:	691a      	ldr	r2, [r3, #16]
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049c2:	69b9      	ldr	r1, [r7, #24]
 80049c4:	0148      	lsls	r0, r1, #5
 80049c6:	69f9      	ldr	r1, [r7, #28]
 80049c8:	4401      	add	r1, r0
 80049ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80049ce:	4313      	orrs	r3, r2
 80049d0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	78db      	ldrb	r3, [r3, #3]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d11f      	bne.n	8004a1a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	015a      	lsls	r2, r3, #5
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	4413      	add	r3, r2
 80049e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	0151      	lsls	r1, r2, #5
 80049ec:	69fa      	ldr	r2, [r7, #28]
 80049ee:	440a      	add	r2, r1
 80049f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049f4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80049f8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	015a      	lsls	r2, r3, #5
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	4413      	add	r3, r2
 8004a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	69ba      	ldr	r2, [r7, #24]
 8004a0a:	0151      	lsls	r1, r2, #5
 8004a0c:	69fa      	ldr	r2, [r7, #28]
 8004a0e:	440a      	add	r2, r1
 8004a10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a18:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004a1a:	79fb      	ldrb	r3, [r7, #7]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d14b      	bne.n	8004ab8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d009      	beq.n	8004a3c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	015a      	lsls	r2, r3, #5
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	4413      	add	r3, r2
 8004a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a34:	461a      	mov	r2, r3
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	78db      	ldrb	r3, [r3, #3]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d128      	bne.n	8004a96 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d110      	bne.n	8004a76 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	015a      	lsls	r2, r3, #5
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	69ba      	ldr	r2, [r7, #24]
 8004a64:	0151      	lsls	r1, r2, #5
 8004a66:	69fa      	ldr	r2, [r7, #28]
 8004a68:	440a      	add	r2, r1
 8004a6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a72:	6013      	str	r3, [r2, #0]
 8004a74:	e00f      	b.n	8004a96 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	015a      	lsls	r2, r3, #5
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	69ba      	ldr	r2, [r7, #24]
 8004a86:	0151      	lsls	r1, r2, #5
 8004a88:	69fa      	ldr	r2, [r7, #28]
 8004a8a:	440a      	add	r2, r1
 8004a8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a94:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	015a      	lsls	r2, r3, #5
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	69ba      	ldr	r2, [r7, #24]
 8004aa6:	0151      	lsls	r1, r2, #5
 8004aa8:	69fa      	ldr	r2, [r7, #28]
 8004aaa:	440a      	add	r2, r1
 8004aac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ab0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ab4:	6013      	str	r3, [r2, #0]
 8004ab6:	e12f      	b.n	8004d18 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	015a      	lsls	r2, r3, #5
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	4413      	add	r3, r2
 8004ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	69ba      	ldr	r2, [r7, #24]
 8004ac8:	0151      	lsls	r1, r2, #5
 8004aca:	69fa      	ldr	r2, [r7, #28]
 8004acc:	440a      	add	r2, r1
 8004ace:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ad2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ad6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	78db      	ldrb	r3, [r3, #3]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d015      	beq.n	8004b0c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	695b      	ldr	r3, [r3, #20]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f000 8117 	beq.w	8004d18 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004af0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	f003 030f 	and.w	r3, r3, #15
 8004afa:	2101      	movs	r1, #1
 8004afc:	fa01 f303 	lsl.w	r3, r1, r3
 8004b00:	69f9      	ldr	r1, [r7, #28]
 8004b02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b06:	4313      	orrs	r3, r2
 8004b08:	634b      	str	r3, [r1, #52]	; 0x34
 8004b0a:	e105      	b.n	8004d18 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d110      	bne.n	8004b3e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	015a      	lsls	r2, r3, #5
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	4413      	add	r3, r2
 8004b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	69ba      	ldr	r2, [r7, #24]
 8004b2c:	0151      	lsls	r1, r2, #5
 8004b2e:	69fa      	ldr	r2, [r7, #28]
 8004b30:	440a      	add	r2, r1
 8004b32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b3a:	6013      	str	r3, [r2, #0]
 8004b3c:	e00f      	b.n	8004b5e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	015a      	lsls	r2, r3, #5
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	4413      	add	r3, r2
 8004b46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	69ba      	ldr	r2, [r7, #24]
 8004b4e:	0151      	lsls	r1, r2, #5
 8004b50:	69fa      	ldr	r2, [r7, #28]
 8004b52:	440a      	add	r2, r1
 8004b54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b5c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	68d9      	ldr	r1, [r3, #12]
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	781a      	ldrb	r2, [r3, #0]
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	b298      	uxth	r0, r3
 8004b6c:	79fb      	ldrb	r3, [r7, #7]
 8004b6e:	9300      	str	r3, [sp, #0]
 8004b70:	4603      	mov	r3, r0
 8004b72:	68f8      	ldr	r0, [r7, #12]
 8004b74:	f000 fa2b 	bl	8004fce <USB_WritePacket>
 8004b78:	e0ce      	b.n	8004d18 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	015a      	lsls	r2, r3, #5
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	4413      	add	r3, r2
 8004b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	0151      	lsls	r1, r2, #5
 8004b8c:	69fa      	ldr	r2, [r7, #28]
 8004b8e:	440a      	add	r2, r1
 8004b90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b94:	0cdb      	lsrs	r3, r3, #19
 8004b96:	04db      	lsls	r3, r3, #19
 8004b98:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	015a      	lsls	r2, r3, #5
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	69ba      	ldr	r2, [r7, #24]
 8004baa:	0151      	lsls	r1, r2, #5
 8004bac:	69fa      	ldr	r2, [r7, #28]
 8004bae:	440a      	add	r2, r1
 8004bb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bb4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004bb8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004bbc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d126      	bne.n	8004c14 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	015a      	lsls	r2, r3, #5
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	4413      	add	r3, r2
 8004bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd2:	691a      	ldr	r2, [r3, #16]
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bdc:	69b9      	ldr	r1, [r7, #24]
 8004bde:	0148      	lsls	r0, r1, #5
 8004be0:	69f9      	ldr	r1, [r7, #28]
 8004be2:	4401      	add	r1, r0
 8004be4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004be8:	4313      	orrs	r3, r2
 8004bea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	015a      	lsls	r2, r3, #5
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	69ba      	ldr	r2, [r7, #24]
 8004bfc:	0151      	lsls	r1, r2, #5
 8004bfe:	69fa      	ldr	r2, [r7, #28]
 8004c00:	440a      	add	r2, r1
 8004c02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c0a:	6113      	str	r3, [r2, #16]
 8004c0c:	e036      	b.n	8004c7c <USB_EPStartXfer+0x3dc>
 8004c0e:	bf00      	nop
 8004c10:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	695a      	ldr	r2, [r3, #20]
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	1e5a      	subs	r2, r3, #1
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c28:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	015a      	lsls	r2, r3, #5
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	4413      	add	r3, r2
 8004c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c36:	691a      	ldr	r2, [r3, #16]
 8004c38:	8afb      	ldrh	r3, [r7, #22]
 8004c3a:	04d9      	lsls	r1, r3, #19
 8004c3c:	4b39      	ldr	r3, [pc, #228]	; (8004d24 <USB_EPStartXfer+0x484>)
 8004c3e:	400b      	ands	r3, r1
 8004c40:	69b9      	ldr	r1, [r7, #24]
 8004c42:	0148      	lsls	r0, r1, #5
 8004c44:	69f9      	ldr	r1, [r7, #28]
 8004c46:	4401      	add	r1, r0
 8004c48:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	015a      	lsls	r2, r3, #5
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	4413      	add	r3, r2
 8004c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c5c:	691a      	ldr	r2, [r3, #16]
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	8af9      	ldrh	r1, [r7, #22]
 8004c64:	fb01 f303 	mul.w	r3, r1, r3
 8004c68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c6c:	69b9      	ldr	r1, [r7, #24]
 8004c6e:	0148      	lsls	r0, r1, #5
 8004c70:	69f9      	ldr	r1, [r7, #28]
 8004c72:	4401      	add	r1, r0
 8004c74:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004c7c:	79fb      	ldrb	r3, [r7, #7]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d10d      	bne.n	8004c9e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d009      	beq.n	8004c9e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	68d9      	ldr	r1, [r3, #12]
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	015a      	lsls	r2, r3, #5
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	4413      	add	r3, r2
 8004c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c9a:	460a      	mov	r2, r1
 8004c9c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	78db      	ldrb	r3, [r3, #3]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d128      	bne.n	8004cf8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d110      	bne.n	8004cd8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	015a      	lsls	r2, r3, #5
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	69ba      	ldr	r2, [r7, #24]
 8004cc6:	0151      	lsls	r1, r2, #5
 8004cc8:	69fa      	ldr	r2, [r7, #28]
 8004cca:	440a      	add	r2, r1
 8004ccc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cd0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004cd4:	6013      	str	r3, [r2, #0]
 8004cd6:	e00f      	b.n	8004cf8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	015a      	lsls	r2, r3, #5
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	4413      	add	r3, r2
 8004ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	69ba      	ldr	r2, [r7, #24]
 8004ce8:	0151      	lsls	r1, r2, #5
 8004cea:	69fa      	ldr	r2, [r7, #28]
 8004cec:	440a      	add	r2, r1
 8004cee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cf6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	015a      	lsls	r2, r3, #5
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	4413      	add	r3, r2
 8004d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	0151      	lsls	r1, r2, #5
 8004d0a:	69fa      	ldr	r2, [r7, #28]
 8004d0c:	440a      	add	r2, r1
 8004d0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3720      	adds	r7, #32
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	1ff80000 	.word	0x1ff80000

08004d28 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b087      	sub	sp, #28
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	4613      	mov	r3, r2
 8004d34:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	785b      	ldrb	r3, [r3, #1]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	f040 80cd 	bne.w	8004ee4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d132      	bne.n	8004db8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	015a      	lsls	r2, r3, #5
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	4413      	add	r3, r2
 8004d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	0151      	lsls	r1, r2, #5
 8004d64:	697a      	ldr	r2, [r7, #20]
 8004d66:	440a      	add	r2, r1
 8004d68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d6c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d70:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	015a      	lsls	r2, r3, #5
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	0151      	lsls	r1, r2, #5
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	440a      	add	r2, r1
 8004d8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	015a      	lsls	r2, r3, #5
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	0151      	lsls	r1, r2, #5
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	440a      	add	r2, r1
 8004dac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004db0:	0cdb      	lsrs	r3, r3, #19
 8004db2:	04db      	lsls	r3, r3, #19
 8004db4:	6113      	str	r3, [r2, #16]
 8004db6:	e04e      	b.n	8004e56 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	015a      	lsls	r2, r3, #5
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	0151      	lsls	r1, r2, #5
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	440a      	add	r2, r1
 8004dce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dd2:	0cdb      	lsrs	r3, r3, #19
 8004dd4:	04db      	lsls	r3, r3, #19
 8004dd6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	015a      	lsls	r2, r3, #5
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	4413      	add	r3, r2
 8004de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	0151      	lsls	r1, r2, #5
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	440a      	add	r2, r1
 8004dee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004df2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004df6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004dfa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	695a      	ldr	r2, [r3, #20]
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d903      	bls.n	8004e10 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	689a      	ldr	r2, [r3, #8]
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	015a      	lsls	r2, r3, #5
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	4413      	add	r3, r2
 8004e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	693a      	ldr	r2, [r7, #16]
 8004e20:	0151      	lsls	r1, r2, #5
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	440a      	add	r2, r1
 8004e26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	015a      	lsls	r2, r3, #5
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e3c:	691a      	ldr	r2, [r3, #16]
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e46:	6939      	ldr	r1, [r7, #16]
 8004e48:	0148      	lsls	r0, r1, #5
 8004e4a:	6979      	ldr	r1, [r7, #20]
 8004e4c:	4401      	add	r1, r0
 8004e4e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e52:	4313      	orrs	r3, r2
 8004e54:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004e56:	79fb      	ldrb	r3, [r7, #7]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d11e      	bne.n	8004e9a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d009      	beq.n	8004e78 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	015a      	lsls	r2, r3, #5
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e70:	461a      	mov	r2, r3
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	015a      	lsls	r2, r3, #5
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	4413      	add	r3, r2
 8004e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	0151      	lsls	r1, r2, #5
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	440a      	add	r2, r1
 8004e8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e96:	6013      	str	r3, [r2, #0]
 8004e98:	e092      	b.n	8004fc0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	015a      	lsls	r2, r3, #5
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	0151      	lsls	r1, r2, #5
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	440a      	add	r2, r1
 8004eb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eb4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004eb8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d07e      	beq.n	8004fc0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ec8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	f003 030f 	and.w	r3, r3, #15
 8004ed2:	2101      	movs	r1, #1
 8004ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ed8:	6979      	ldr	r1, [r7, #20]
 8004eda:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	634b      	str	r3, [r1, #52]	; 0x34
 8004ee2:	e06d      	b.n	8004fc0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	015a      	lsls	r2, r3, #5
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	4413      	add	r3, r2
 8004eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	0151      	lsls	r1, r2, #5
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	440a      	add	r2, r1
 8004efa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004efe:	0cdb      	lsrs	r3, r3, #19
 8004f00:	04db      	lsls	r3, r3, #19
 8004f02:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	015a      	lsls	r2, r3, #5
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	0151      	lsls	r1, r2, #5
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	440a      	add	r2, r1
 8004f1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f1e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f22:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f26:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	695b      	ldr	r3, [r3, #20]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d003      	beq.n	8004f38 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	689a      	ldr	r2, [r3, #8]
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	015a      	lsls	r2, r3, #5
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	4413      	add	r3, r2
 8004f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	693a      	ldr	r2, [r7, #16]
 8004f48:	0151      	lsls	r1, r2, #5
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	440a      	add	r2, r1
 8004f4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f56:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	015a      	lsls	r2, r3, #5
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	4413      	add	r3, r2
 8004f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f64:	691a      	ldr	r2, [r3, #16]
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f6e:	6939      	ldr	r1, [r7, #16]
 8004f70:	0148      	lsls	r0, r1, #5
 8004f72:	6979      	ldr	r1, [r7, #20]
 8004f74:	4401      	add	r1, r0
 8004f76:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004f7e:	79fb      	ldrb	r3, [r7, #7]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d10d      	bne.n	8004fa0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d009      	beq.n	8004fa0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	68d9      	ldr	r1, [r3, #12]
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	015a      	lsls	r2, r3, #5
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	4413      	add	r3, r2
 8004f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f9c:	460a      	mov	r2, r1
 8004f9e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	015a      	lsls	r2, r3, #5
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	0151      	lsls	r1, r2, #5
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	440a      	add	r2, r1
 8004fb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fbe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	371c      	adds	r7, #28
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr

08004fce <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b089      	sub	sp, #36	; 0x24
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	60f8      	str	r0, [r7, #12]
 8004fd6:	60b9      	str	r1, [r7, #8]
 8004fd8:	4611      	mov	r1, r2
 8004fda:	461a      	mov	r2, r3
 8004fdc:	460b      	mov	r3, r1
 8004fde:	71fb      	strb	r3, [r7, #7]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004fec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d123      	bne.n	800503c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004ff4:	88bb      	ldrh	r3, [r7, #4]
 8004ff6:	3303      	adds	r3, #3
 8004ff8:	089b      	lsrs	r3, r3, #2
 8004ffa:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	61bb      	str	r3, [r7, #24]
 8005000:	e018      	b.n	8005034 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005002:	79fb      	ldrb	r3, [r7, #7]
 8005004:	031a      	lsls	r2, r3, #12
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	4413      	add	r3, r2
 800500a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800500e:	461a      	mov	r2, r3
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	3301      	adds	r3, #1
 800501a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	3301      	adds	r3, #1
 8005020:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	3301      	adds	r3, #1
 8005026:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	3301      	adds	r3, #1
 800502c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	3301      	adds	r3, #1
 8005032:	61bb      	str	r3, [r7, #24]
 8005034:	69ba      	ldr	r2, [r7, #24]
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	429a      	cmp	r2, r3
 800503a:	d3e2      	bcc.n	8005002 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3724      	adds	r7, #36	; 0x24
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800504a:	b480      	push	{r7}
 800504c:	b08b      	sub	sp, #44	; 0x2c
 800504e:	af00      	add	r7, sp, #0
 8005050:	60f8      	str	r0, [r7, #12]
 8005052:	60b9      	str	r1, [r7, #8]
 8005054:	4613      	mov	r3, r2
 8005056:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005060:	88fb      	ldrh	r3, [r7, #6]
 8005062:	089b      	lsrs	r3, r3, #2
 8005064:	b29b      	uxth	r3, r3
 8005066:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005068:	88fb      	ldrh	r3, [r7, #6]
 800506a:	f003 0303 	and.w	r3, r3, #3
 800506e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005070:	2300      	movs	r3, #0
 8005072:	623b      	str	r3, [r7, #32]
 8005074:	e014      	b.n	80050a0 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005080:	601a      	str	r2, [r3, #0]
    pDest++;
 8005082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005084:	3301      	adds	r3, #1
 8005086:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508a:	3301      	adds	r3, #1
 800508c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800508e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005090:	3301      	adds	r3, #1
 8005092:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	3301      	adds	r3, #1
 8005098:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800509a:	6a3b      	ldr	r3, [r7, #32]
 800509c:	3301      	adds	r3, #1
 800509e:	623b      	str	r3, [r7, #32]
 80050a0:	6a3a      	ldr	r2, [r7, #32]
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d3e6      	bcc.n	8005076 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80050a8:	8bfb      	ldrh	r3, [r7, #30]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d01e      	beq.n	80050ec <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80050ae:	2300      	movs	r3, #0
 80050b0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050b8:	461a      	mov	r2, r3
 80050ba:	f107 0310 	add.w	r3, r7, #16
 80050be:	6812      	ldr	r2, [r2, #0]
 80050c0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	6a3b      	ldr	r3, [r7, #32]
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	00db      	lsls	r3, r3, #3
 80050ca:	fa22 f303 	lsr.w	r3, r2, r3
 80050ce:	b2da      	uxtb	r2, r3
 80050d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d2:	701a      	strb	r2, [r3, #0]
      i++;
 80050d4:	6a3b      	ldr	r3, [r7, #32]
 80050d6:	3301      	adds	r3, #1
 80050d8:	623b      	str	r3, [r7, #32]
      pDest++;
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	3301      	adds	r3, #1
 80050de:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80050e0:	8bfb      	ldrh	r3, [r7, #30]
 80050e2:	3b01      	subs	r3, #1
 80050e4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80050e6:	8bfb      	ldrh	r3, [r7, #30]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1ea      	bne.n	80050c2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80050ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	372c      	adds	r7, #44	; 0x2c
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80050fa:	b480      	push	{r7}
 80050fc:	b085      	sub	sp, #20
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
 8005102:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	785b      	ldrb	r3, [r3, #1]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d12c      	bne.n	8005170 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	015a      	lsls	r2, r3, #5
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	4413      	add	r3, r2
 800511e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	db12      	blt.n	800514e <USB_EPSetStall+0x54>
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00f      	beq.n	800514e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	015a      	lsls	r2, r3, #5
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	4413      	add	r3, r2
 8005136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68ba      	ldr	r2, [r7, #8]
 800513e:	0151      	lsls	r1, r2, #5
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	440a      	add	r2, r1
 8005144:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005148:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800514c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	015a      	lsls	r2, r3, #5
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	4413      	add	r3, r2
 8005156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	0151      	lsls	r1, r2, #5
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	440a      	add	r2, r1
 8005164:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005168:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800516c:	6013      	str	r3, [r2, #0]
 800516e:	e02b      	b.n	80051c8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	015a      	lsls	r2, r3, #5
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	4413      	add	r3, r2
 8005178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	db12      	blt.n	80051a8 <USB_EPSetStall+0xae>
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00f      	beq.n	80051a8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4413      	add	r3, r2
 8005190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68ba      	ldr	r2, [r7, #8]
 8005198:	0151      	lsls	r1, r2, #5
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	440a      	add	r2, r1
 800519e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80051a6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	015a      	lsls	r2, r3, #5
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	4413      	add	r3, r2
 80051b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68ba      	ldr	r2, [r7, #8]
 80051b8:	0151      	lsls	r1, r2, #5
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	440a      	add	r2, r1
 80051be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80051c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3714      	adds	r7, #20
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr

080051d6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80051d6:	b480      	push	{r7}
 80051d8:	b085      	sub	sp, #20
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
 80051de:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	785b      	ldrb	r3, [r3, #1]
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d128      	bne.n	8005244 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	015a      	lsls	r2, r3, #5
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	4413      	add	r3, r2
 80051fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68ba      	ldr	r2, [r7, #8]
 8005202:	0151      	lsls	r1, r2, #5
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	440a      	add	r2, r1
 8005208:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800520c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005210:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	78db      	ldrb	r3, [r3, #3]
 8005216:	2b03      	cmp	r3, #3
 8005218:	d003      	beq.n	8005222 <USB_EPClearStall+0x4c>
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	78db      	ldrb	r3, [r3, #3]
 800521e:	2b02      	cmp	r3, #2
 8005220:	d138      	bne.n	8005294 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	015a      	lsls	r2, r3, #5
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	4413      	add	r3, r2
 800522a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68ba      	ldr	r2, [r7, #8]
 8005232:	0151      	lsls	r1, r2, #5
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	440a      	add	r2, r1
 8005238:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800523c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005240:	6013      	str	r3, [r2, #0]
 8005242:	e027      	b.n	8005294 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	015a      	lsls	r2, r3, #5
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	4413      	add	r3, r2
 800524c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68ba      	ldr	r2, [r7, #8]
 8005254:	0151      	lsls	r1, r2, #5
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	440a      	add	r2, r1
 800525a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800525e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005262:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	78db      	ldrb	r3, [r3, #3]
 8005268:	2b03      	cmp	r3, #3
 800526a:	d003      	beq.n	8005274 <USB_EPClearStall+0x9e>
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	78db      	ldrb	r3, [r3, #3]
 8005270:	2b02      	cmp	r3, #2
 8005272:	d10f      	bne.n	8005294 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	015a      	lsls	r2, r3, #5
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	4413      	add	r3, r2
 800527c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68ba      	ldr	r2, [r7, #8]
 8005284:	0151      	lsls	r1, r2, #5
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	440a      	add	r2, r1
 800528a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800528e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005292:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3714      	adds	r7, #20
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr

080052a2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b085      	sub	sp, #20
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
 80052aa:	460b      	mov	r3, r1
 80052ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052c0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80052c4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	78fb      	ldrb	r3, [r7, #3]
 80052d0:	011b      	lsls	r3, r3, #4
 80052d2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80052d6:	68f9      	ldr	r1, [r7, #12]
 80052d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052dc:	4313      	orrs	r3, r2
 80052de:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3714      	adds	r7, #20
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr

080052ee <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80052ee:	b480      	push	{r7}
 80052f0:	b085      	sub	sp, #20
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005308:	f023 0303 	bic.w	r3, r3, #3
 800530c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800531c:	f023 0302 	bic.w	r3, r3, #2
 8005320:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800534a:	f023 0303 	bic.w	r3, r3, #3
 800534e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800535e:	f043 0302 	orr.w	r3, r3, #2
 8005362:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3714      	adds	r7, #20
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr

08005372 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005372:	b480      	push	{r7}
 8005374:	b085      	sub	sp, #20
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	4013      	ands	r3, r2
 8005388:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800538a:	68fb      	ldr	r3, [r7, #12]
}
 800538c:	4618      	mov	r0, r3
 800538e:	3714      	adds	r7, #20
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053aa:	699b      	ldr	r3, [r3, #24]
 80053ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053b4:	69db      	ldr	r3, [r3, #28]
 80053b6:	68ba      	ldr	r2, [r7, #8]
 80053b8:	4013      	ands	r3, r2
 80053ba:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	0c1b      	lsrs	r3, r3, #16
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3714      	adds	r7, #20
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	4013      	ands	r3, r2
 80053ee:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	b29b      	uxth	r3, r3
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3714      	adds	r7, #20
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	460b      	mov	r3, r1
 800540a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005410:	78fb      	ldrb	r3, [r7, #3]
 8005412:	015a      	lsls	r2, r3, #5
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	4413      	add	r3, r2
 8005418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005426:	695b      	ldr	r3, [r3, #20]
 8005428:	68ba      	ldr	r2, [r7, #8]
 800542a:	4013      	ands	r3, r2
 800542c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800542e:	68bb      	ldr	r3, [r7, #8]
}
 8005430:	4618      	mov	r0, r3
 8005432:	3714      	adds	r7, #20
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800543c:	b480      	push	{r7}
 800543e:	b087      	sub	sp, #28
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	460b      	mov	r3, r1
 8005446:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800545c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800545e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005460:	78fb      	ldrb	r3, [r7, #3]
 8005462:	f003 030f 	and.w	r3, r3, #15
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	fa22 f303 	lsr.w	r3, r2, r3
 800546c:	01db      	lsls	r3, r3, #7
 800546e:	b2db      	uxtb	r3, r3
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	4313      	orrs	r3, r2
 8005474:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005476:	78fb      	ldrb	r3, [r7, #3]
 8005478:	015a      	lsls	r2, r3, #5
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	4413      	add	r3, r2
 800547e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	4013      	ands	r3, r2
 8005488:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800548a:	68bb      	ldr	r3, [r7, #8]
}
 800548c:	4618      	mov	r0, r3
 800548e:	371c      	adds	r7, #28
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	695b      	ldr	r3, [r3, #20]
 80054a4:	f003 0301 	and.w	r3, r3, #1
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b085      	sub	sp, #20
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054ce:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80054d2:	f023 0307 	bic.w	r3, r3, #7
 80054d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3714      	adds	r7, #20
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr
	...

080054fc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b087      	sub	sp, #28
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	460b      	mov	r3, r1
 8005506:	607a      	str	r2, [r7, #4]
 8005508:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	333c      	adds	r3, #60	; 0x3c
 8005512:	3304      	adds	r3, #4
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	4a26      	ldr	r2, [pc, #152]	; (80055b4 <USB_EP0_OutStart+0xb8>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d90a      	bls.n	8005536 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800552c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005530:	d101      	bne.n	8005536 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005532:	2300      	movs	r3, #0
 8005534:	e037      	b.n	80055a6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800553c:	461a      	mov	r2, r3
 800553e:	2300      	movs	r3, #0
 8005540:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005550:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005554:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005564:	f043 0318 	orr.w	r3, r3, #24
 8005568:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005578:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800557c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800557e:	7afb      	ldrb	r3, [r7, #11]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d10f      	bne.n	80055a4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800558a:	461a      	mov	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800559e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80055a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	371c      	adds	r7, #28
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	4f54300a 	.word	0x4f54300a

080055b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055c0:	2300      	movs	r3, #0
 80055c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	3301      	adds	r3, #1
 80055c8:	60fb      	str	r3, [r7, #12]
 80055ca:	4a13      	ldr	r2, [pc, #76]	; (8005618 <USB_CoreReset+0x60>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d901      	bls.n	80055d4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e01a      	b.n	800560a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	daf3      	bge.n	80055c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80055dc:	2300      	movs	r3, #0
 80055de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	f043 0201 	orr.w	r2, r3, #1
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	3301      	adds	r3, #1
 80055f0:	60fb      	str	r3, [r7, #12]
 80055f2:	4a09      	ldr	r2, [pc, #36]	; (8005618 <USB_CoreReset+0x60>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d901      	bls.n	80055fc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e006      	b.n	800560a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	f003 0301 	and.w	r3, r3, #1
 8005604:	2b01      	cmp	r3, #1
 8005606:	d0f1      	beq.n	80055ec <USB_CoreReset+0x34>

  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3714      	adds	r7, #20
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	00030d40 	.word	0x00030d40

0800561c <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	460b      	mov	r3, r1
 8005626:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005628:	2010      	movs	r0, #16
 800562a:	f001 ff2f 	bl	800748c <USBD_static_malloc>
 800562e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d105      	bne.n	8005642 <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800563e:	2302      	movs	r3, #2
 8005640:	e01b      	b.n	800567a <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	7c1b      	ldrb	r3, [r3, #16]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d103      	bne.n	800565a <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2207      	movs	r2, #7
 8005656:	875a      	strh	r2, [r3, #58]	; 0x3a
 8005658:	e002      	b.n	8005660 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	220a      	movs	r2, #10
 800565e:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005660:	2304      	movs	r3, #4
 8005662:	2203      	movs	r2, #3
 8005664:	2181      	movs	r1, #129	; 0x81
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f001 fdff 	bl	800726a <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3710      	adds	r7, #16
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b082      	sub	sp, #8
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
 800568a:	460b      	mov	r3, r1
 800568c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800568e:	2181      	movs	r1, #129	; 0x81
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f001 fe10 	bl	80072b6 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d009      	beq.n	80056c0 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80056b2:	4618      	mov	r0, r3
 80056b4:	f001 fef8 	bl	80074a8 <USBD_static_free>
    pdev->pClassData = NULL;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3708      	adds	r7, #8
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
	...

080056cc <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b086      	sub	sp, #24
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80056dc:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80056de:	2300      	movs	r3, #0
 80056e0:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80056e2:	2300      	movs	r3, #0
 80056e4:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d101      	bne.n	80056f0 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e0e8      	b.n	80058c2 <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d046      	beq.n	800578a <USBD_HID_Setup+0xbe>
 80056fc:	2b20      	cmp	r3, #32
 80056fe:	f040 80d8 	bne.w	80058b2 <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	785b      	ldrb	r3, [r3, #1]
 8005706:	3b02      	subs	r3, #2
 8005708:	2b09      	cmp	r3, #9
 800570a:	d836      	bhi.n	800577a <USBD_HID_Setup+0xae>
 800570c:	a201      	add	r2, pc, #4	; (adr r2, 8005714 <USBD_HID_Setup+0x48>)
 800570e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005712:	bf00      	nop
 8005714:	0800576b 	.word	0x0800576b
 8005718:	0800574b 	.word	0x0800574b
 800571c:	0800577b 	.word	0x0800577b
 8005720:	0800577b 	.word	0x0800577b
 8005724:	0800577b 	.word	0x0800577b
 8005728:	0800577b 	.word	0x0800577b
 800572c:	0800577b 	.word	0x0800577b
 8005730:	0800577b 	.word	0x0800577b
 8005734:	08005759 	.word	0x08005759
 8005738:	0800573d 	.word	0x0800573d
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	885b      	ldrh	r3, [r3, #2]
 8005740:	b2db      	uxtb	r3, r3
 8005742:	461a      	mov	r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	601a      	str	r2, [r3, #0]
          break;
 8005748:	e01e      	b.n	8005788 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2201      	movs	r2, #1
 800574e:	4619      	mov	r1, r3
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f001 fa36 	bl	8006bc2 <USBD_CtlSendData>
          break;
 8005756:	e017      	b.n	8005788 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	885b      	ldrh	r3, [r3, #2]
 800575c:	0a1b      	lsrs	r3, r3, #8
 800575e:	b29b      	uxth	r3, r3
 8005760:	b2db      	uxtb	r3, r3
 8005762:	461a      	mov	r2, r3
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	605a      	str	r2, [r3, #4]
          break;
 8005768:	e00e      	b.n	8005788 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	3304      	adds	r3, #4
 800576e:	2201      	movs	r2, #1
 8005770:	4619      	mov	r1, r3
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f001 fa25 	bl	8006bc2 <USBD_CtlSendData>
          break;
 8005778:	e006      	b.n	8005788 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800577a:	6839      	ldr	r1, [r7, #0]
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f001 f9af 	bl	8006ae0 <USBD_CtlError>
          ret = USBD_FAIL;
 8005782:	2303      	movs	r3, #3
 8005784:	75fb      	strb	r3, [r7, #23]
          break;
 8005786:	bf00      	nop
      }
      break;
 8005788:	e09a      	b.n	80058c0 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	785b      	ldrb	r3, [r3, #1]
 800578e:	2b0b      	cmp	r3, #11
 8005790:	f200 8086 	bhi.w	80058a0 <USBD_HID_Setup+0x1d4>
 8005794:	a201      	add	r2, pc, #4	; (adr r2, 800579c <USBD_HID_Setup+0xd0>)
 8005796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579a:	bf00      	nop
 800579c:	080057cd 	.word	0x080057cd
 80057a0:	080058af 	.word	0x080058af
 80057a4:	080058a1 	.word	0x080058a1
 80057a8:	080058a1 	.word	0x080058a1
 80057ac:	080058a1 	.word	0x080058a1
 80057b0:	080058a1 	.word	0x080058a1
 80057b4:	080057f7 	.word	0x080057f7
 80057b8:	080058a1 	.word	0x080058a1
 80057bc:	080058a1 	.word	0x080058a1
 80057c0:	080058a1 	.word	0x080058a1
 80057c4:	0800584f 	.word	0x0800584f
 80057c8:	08005879 	.word	0x08005879
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	2b03      	cmp	r3, #3
 80057d6:	d107      	bne.n	80057e8 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80057d8:	f107 030a 	add.w	r3, r7, #10
 80057dc:	2202      	movs	r2, #2
 80057de:	4619      	mov	r1, r3
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f001 f9ee 	bl	8006bc2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80057e6:	e063      	b.n	80058b0 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80057e8:	6839      	ldr	r1, [r7, #0]
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f001 f978 	bl	8006ae0 <USBD_CtlError>
            ret = USBD_FAIL;
 80057f0:	2303      	movs	r3, #3
 80057f2:	75fb      	strb	r3, [r7, #23]
          break;
 80057f4:	e05c      	b.n	80058b0 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	885b      	ldrh	r3, [r3, #2]
 80057fa:	0a1b      	lsrs	r3, r3, #8
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	2b22      	cmp	r3, #34	; 0x22
 8005800:	d108      	bne.n	8005814 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	88db      	ldrh	r3, [r3, #6]
 8005806:	2b4a      	cmp	r3, #74	; 0x4a
 8005808:	bf28      	it	cs
 800580a:	234a      	movcs	r3, #74	; 0x4a
 800580c:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800580e:	4b2f      	ldr	r3, [pc, #188]	; (80058cc <USBD_HID_Setup+0x200>)
 8005810:	613b      	str	r3, [r7, #16]
 8005812:	e015      	b.n	8005840 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	885b      	ldrh	r3, [r3, #2]
 8005818:	0a1b      	lsrs	r3, r3, #8
 800581a:	b29b      	uxth	r3, r3
 800581c:	2b21      	cmp	r3, #33	; 0x21
 800581e:	d108      	bne.n	8005832 <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 8005820:	4b2b      	ldr	r3, [pc, #172]	; (80058d0 <USBD_HID_Setup+0x204>)
 8005822:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	88db      	ldrh	r3, [r3, #6]
 8005828:	2b09      	cmp	r3, #9
 800582a:	bf28      	it	cs
 800582c:	2309      	movcs	r3, #9
 800582e:	82bb      	strh	r3, [r7, #20]
 8005830:	e006      	b.n	8005840 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005832:	6839      	ldr	r1, [r7, #0]
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f001 f953 	bl	8006ae0 <USBD_CtlError>
            ret = USBD_FAIL;
 800583a:	2303      	movs	r3, #3
 800583c:	75fb      	strb	r3, [r7, #23]
            break;
 800583e:	e037      	b.n	80058b0 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8005840:	8abb      	ldrh	r3, [r7, #20]
 8005842:	461a      	mov	r2, r3
 8005844:	6939      	ldr	r1, [r7, #16]
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f001 f9bb 	bl	8006bc2 <USBD_CtlSendData>
          break;
 800584c:	e030      	b.n	80058b0 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005854:	b2db      	uxtb	r3, r3
 8005856:	2b03      	cmp	r3, #3
 8005858:	d107      	bne.n	800586a <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	3308      	adds	r3, #8
 800585e:	2201      	movs	r2, #1
 8005860:	4619      	mov	r1, r3
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f001 f9ad 	bl	8006bc2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005868:	e022      	b.n	80058b0 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800586a:	6839      	ldr	r1, [r7, #0]
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f001 f937 	bl	8006ae0 <USBD_CtlError>
            ret = USBD_FAIL;
 8005872:	2303      	movs	r3, #3
 8005874:	75fb      	strb	r3, [r7, #23]
          break;
 8005876:	e01b      	b.n	80058b0 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800587e:	b2db      	uxtb	r3, r3
 8005880:	2b03      	cmp	r3, #3
 8005882:	d106      	bne.n	8005892 <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	885b      	ldrh	r3, [r3, #2]
 8005888:	b2db      	uxtb	r3, r3
 800588a:	461a      	mov	r2, r3
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005890:	e00e      	b.n	80058b0 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8005892:	6839      	ldr	r1, [r7, #0]
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f001 f923 	bl	8006ae0 <USBD_CtlError>
            ret = USBD_FAIL;
 800589a:	2303      	movs	r3, #3
 800589c:	75fb      	strb	r3, [r7, #23]
          break;
 800589e:	e007      	b.n	80058b0 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80058a0:	6839      	ldr	r1, [r7, #0]
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f001 f91c 	bl	8006ae0 <USBD_CtlError>
          ret = USBD_FAIL;
 80058a8:	2303      	movs	r3, #3
 80058aa:	75fb      	strb	r3, [r7, #23]
          break;
 80058ac:	e000      	b.n	80058b0 <USBD_HID_Setup+0x1e4>
          break;
 80058ae:	bf00      	nop
      }
      break;
 80058b0:	e006      	b.n	80058c0 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 80058b2:	6839      	ldr	r1, [r7, #0]
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f001 f913 	bl	8006ae0 <USBD_CtlError>
      ret = USBD_FAIL;
 80058ba:	2303      	movs	r3, #3
 80058bc:	75fb      	strb	r3, [r7, #23]
      break;
 80058be:	bf00      	nop
  }

  return (uint8_t)ret;
 80058c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3718      	adds	r7, #24
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	200000c8 	.word	0x200000c8
 80058d0:	200000b0 	.word	0x200000b0

080058d4 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b086      	sub	sp, #24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	4613      	mov	r3, r2
 80058e0:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058e8:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d101      	bne.n	80058f4 <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e013      	b.n	800591c <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	2b03      	cmp	r3, #3
 80058fe:	d10c      	bne.n	800591a <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	7b1b      	ldrb	r3, [r3, #12]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d108      	bne.n	800591a <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	2201      	movs	r2, #1
 800590c:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 800590e:	88fb      	ldrh	r3, [r7, #6]
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	2181      	movs	r1, #129	; 0x81
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	f001 fd76 	bl	8007406 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3718      	adds	r7, #24
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <USBD_HID_GetPollingInterval>:
  *         return polling interval from endpoint descriptor
  * @param  pdev: device instance
  * @retval polling interval
  */
uint32_t USBD_HID_GetPollingInterval(USBD_HandleTypeDef *pdev)
{
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  uint32_t polling_interval;

  /* HIGH-speed endpoints */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	7c1b      	ldrb	r3, [r3, #16]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d102      	bne.n	800593a <USBD_HID_GetPollingInterval+0x16>
  {
    /* Sets the data transfer polling interval for high speed transfers.
     Values between 1..16 are allowed. Values correspond to interval
     of 2 ^ (bInterval-1). This option (8 ms, corresponds to HID_HS_BINTERVAL */
    polling_interval = (((1U << (HID_HS_BINTERVAL - 1U))) / 8U);
 8005934:	2308      	movs	r3, #8
 8005936:	60fb      	str	r3, [r7, #12]
 8005938:	e001      	b.n	800593e <USBD_HID_GetPollingInterval+0x1a>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    /* Sets the data transfer polling interval for low and full
    speed transfers */
    polling_interval =  HID_FS_BINTERVAL;
 800593a:	230a      	movs	r3, #10
 800593c:	60fb      	str	r3, [r7, #12]
  }

  return ((uint32_t)(polling_interval));
 800593e:	68fb      	ldr	r3, [r7, #12]
}
 8005940:	4618      	mov	r0, r3
 8005942:	3714      	adds	r7, #20
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2222      	movs	r2, #34	; 0x22
 8005958:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 800595a:	4b03      	ldr	r3, [pc, #12]	; (8005968 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 800595c:	4618      	mov	r0, r3
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr
 8005968:	20000044 	.word	0x20000044

0800596c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2222      	movs	r2, #34	; 0x22
 8005978:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 800597a:	4b03      	ldr	r3, [pc, #12]	; (8005988 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 800597c:	4618      	mov	r0, r3
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr
 8005988:	20000068 	.word	0x20000068

0800598c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2222      	movs	r2, #34	; 0x22
 8005998:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 800599a:	4b03      	ldr	r3, [pc, #12]	; (80059a8 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800599c:	4618      	mov	r0, r3
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr
 80059a8:	2000008c 	.word	0x2000008c

080059ac <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	460b      	mov	r3, r1
 80059b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059be:	2200      	movs	r2, #0
 80059c0:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	220a      	movs	r2, #10
 80059dc:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80059de:	4b03      	ldr	r3, [pc, #12]	; (80059ec <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr
 80059ec:	200000bc 	.word	0x200000bc

080059f0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b086      	sub	sp, #24
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	4613      	mov	r3, r2
 80059fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d101      	bne.n	8005a08 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e01f      	b.n	8005a48 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	68ba      	ldr	r2, [r7, #8]
 8005a2a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	79fa      	ldrb	r2, [r7, #7]
 8005a3a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005a3c:	68f8      	ldr	r0, [r7, #12]
 8005a3e:	f001 fbad 	bl	800719c <USBD_LL_Init>
 8005a42:	4603      	mov	r3, r0
 8005a44:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005a46:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3718      	adds	r7, #24
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d101      	bne.n	8005a68 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e016      	b.n	8005a96 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	683a      	ldr	r2, [r7, #0]
 8005a6c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00b      	beq.n	8005a94 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a84:	f107 020e 	add.w	r2, r7, #14
 8005a88:	4610      	mov	r0, r2
 8005a8a:	4798      	blx	r3
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3710      	adds	r7, #16
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b082      	sub	sp, #8
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f001 fbc4 	bl	8007234 <USBD_LL_Start>
 8005aac:	4603      	mov	r3, r0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3708      	adds	r7, #8
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b083      	sub	sp, #12
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d009      	beq.n	8005afa <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	78fa      	ldrb	r2, [r7, #3]
 8005af0:	4611      	mov	r1, r2
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	4798      	blx	r3
 8005af6:	4603      	mov	r3, r0
 8005af8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3710      	adds	r7, #16
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d007      	beq.n	8005b2a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	78fa      	ldrb	r2, [r7, #3]
 8005b24:	4611      	mov	r1, r2
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	4798      	blx	r3
  }

  return USBD_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3708      	adds	r7, #8
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005b44:	6839      	ldr	r1, [r7, #0]
 8005b46:	4618      	mov	r0, r3
 8005b48:	f000 ff90 	bl	8006a6c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005b68:	f003 031f 	and.w	r3, r3, #31
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d01a      	beq.n	8005ba6 <USBD_LL_SetupStage+0x72>
 8005b70:	2b02      	cmp	r3, #2
 8005b72:	d822      	bhi.n	8005bba <USBD_LL_SetupStage+0x86>
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d002      	beq.n	8005b7e <USBD_LL_SetupStage+0x4a>
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d00a      	beq.n	8005b92 <USBD_LL_SetupStage+0x5e>
 8005b7c:	e01d      	b.n	8005bba <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005b84:	4619      	mov	r1, r3
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 fa62 	bl	8006050 <USBD_StdDevReq>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b90:	e020      	b.n	8005bd4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005b98:	4619      	mov	r1, r3
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 fac6 	bl	800612c <USBD_StdItfReq>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ba4:	e016      	b.n	8005bd4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005bac:	4619      	mov	r1, r3
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 fb05 	bl	80061be <USBD_StdEPReq>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	73fb      	strb	r3, [r7, #15]
      break;
 8005bb8:	e00c      	b.n	8005bd4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005bc0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f001 fb93 	bl	80072f4 <USBD_LL_StallEP>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	73fb      	strb	r3, [r7, #15]
      break;
 8005bd2:	bf00      	nop
  }

  return ret;
 8005bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3710      	adds	r7, #16
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b086      	sub	sp, #24
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	60f8      	str	r0, [r7, #12]
 8005be6:	460b      	mov	r3, r1
 8005be8:	607a      	str	r2, [r7, #4]
 8005bea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005bec:	7afb      	ldrb	r3, [r7, #11]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d138      	bne.n	8005c64 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005bf8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005c00:	2b03      	cmp	r3, #3
 8005c02:	d14a      	bne.n	8005c9a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	689a      	ldr	r2, [r3, #8]
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d913      	bls.n	8005c38 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	689a      	ldr	r2, [r3, #8]
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	1ad2      	subs	r2, r2, r3
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	68da      	ldr	r2, [r3, #12]
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	4293      	cmp	r3, r2
 8005c28:	bf28      	it	cs
 8005c2a:	4613      	movcs	r3, r2
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	6879      	ldr	r1, [r7, #4]
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f000 fff2 	bl	8006c1a <USBD_CtlContinueRx>
 8005c36:	e030      	b.n	8005c9a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b03      	cmp	r3, #3
 8005c42:	d10b      	bne.n	8005c5c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d005      	beq.n	8005c5c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005c5c:	68f8      	ldr	r0, [r7, #12]
 8005c5e:	f000 ffed 	bl	8006c3c <USBD_CtlSendStatus>
 8005c62:	e01a      	b.n	8005c9a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	2b03      	cmp	r3, #3
 8005c6e:	d114      	bne.n	8005c9a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d00e      	beq.n	8005c9a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	7afa      	ldrb	r2, [r7, #11]
 8005c86:	4611      	mov	r1, r2
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	4798      	blx	r3
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005c90:	7dfb      	ldrb	r3, [r7, #23]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d001      	beq.n	8005c9a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005c96:	7dfb      	ldrb	r3, [r7, #23]
 8005c98:	e000      	b.n	8005c9c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3718      	adds	r7, #24
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	460b      	mov	r3, r1
 8005cae:	607a      	str	r2, [r7, #4]
 8005cb0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005cb2:	7afb      	ldrb	r3, [r7, #11]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d16b      	bne.n	8005d90 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	3314      	adds	r3, #20
 8005cbc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d156      	bne.n	8005d76 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	689a      	ldr	r2, [r3, #8]
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d914      	bls.n	8005cfe <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	689a      	ldr	r2, [r3, #8]
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	1ad2      	subs	r2, r2, r3
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	6879      	ldr	r1, [r7, #4]
 8005cea:	68f8      	ldr	r0, [r7, #12]
 8005cec:	f000 ff84 	bl	8006bf8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	68f8      	ldr	r0, [r7, #12]
 8005cf8:	f001 fba6 	bl	8007448 <USBD_LL_PrepareReceive>
 8005cfc:	e03b      	b.n	8005d76 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	68da      	ldr	r2, [r3, #12]
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d11c      	bne.n	8005d44 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	685a      	ldr	r2, [r3, #4]
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d316      	bcc.n	8005d44 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	685a      	ldr	r2, [r3, #4]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d20f      	bcs.n	8005d44 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005d24:	2200      	movs	r2, #0
 8005d26:	2100      	movs	r1, #0
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f000 ff65 	bl	8006bf8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d36:	2300      	movs	r3, #0
 8005d38:	2200      	movs	r2, #0
 8005d3a:	2100      	movs	r1, #0
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f001 fb83 	bl	8007448 <USBD_LL_PrepareReceive>
 8005d42:	e018      	b.n	8005d76 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	2b03      	cmp	r3, #3
 8005d4e:	d10b      	bne.n	8005d68 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d005      	beq.n	8005d68 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	68f8      	ldr	r0, [r7, #12]
 8005d66:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005d68:	2180      	movs	r1, #128	; 0x80
 8005d6a:	68f8      	ldr	r0, [r7, #12]
 8005d6c:	f001 fac2 	bl	80072f4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	f000 ff76 	bl	8006c62 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d122      	bne.n	8005dc6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	f7ff fe98 	bl	8005ab6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005d8e:	e01a      	b.n	8005dc6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	2b03      	cmp	r3, #3
 8005d9a:	d114      	bne.n	8005dc6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005da2:	695b      	ldr	r3, [r3, #20]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d00e      	beq.n	8005dc6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dae:	695b      	ldr	r3, [r3, #20]
 8005db0:	7afa      	ldrb	r2, [r7, #11]
 8005db2:	4611      	mov	r1, r2
 8005db4:	68f8      	ldr	r0, [r7, #12]
 8005db6:	4798      	blx	r3
 8005db8:	4603      	mov	r3, r0
 8005dba:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005dbc:	7dfb      	ldrb	r3, [r7, #23]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d001      	beq.n	8005dc6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8005dc2:	7dfb      	ldrb	r3, [r7, #23]
 8005dc4:	e000      	b.n	8005dc8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3718      	adds	r7, #24
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d101      	bne.n	8005e04 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e02f      	b.n	8005e64 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00f      	beq.n	8005e2e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d009      	beq.n	8005e2e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	6852      	ldr	r2, [r2, #4]
 8005e26:	b2d2      	uxtb	r2, r2
 8005e28:	4611      	mov	r1, r2
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e2e:	2340      	movs	r3, #64	; 0x40
 8005e30:	2200      	movs	r2, #0
 8005e32:	2100      	movs	r1, #0
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f001 fa18 	bl	800726a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2240      	movs	r2, #64	; 0x40
 8005e46:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e4a:	2340      	movs	r3, #64	; 0x40
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	2180      	movs	r1, #128	; 0x80
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f001 fa0a 	bl	800726a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2240      	movs	r2, #64	; 0x40
 8005e60:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3708      	adds	r7, #8
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	460b      	mov	r3, r1
 8005e76:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	78fa      	ldrb	r2, [r7, #3]
 8005e7c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e9a:	b2da      	uxtb	r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2204      	movs	r2, #4
 8005ea6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	2b04      	cmp	r3, #4
 8005eca:	d106      	bne.n	8005eda <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005ed2:	b2da      	uxtb	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d101      	bne.n	8005efe <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e012      	b.n	8005f24 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b03      	cmp	r3, #3
 8005f08:	d10b      	bne.n	8005f22 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f10:	69db      	ldr	r3, [r3, #28]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d005      	beq.n	8005f22 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f1c:	69db      	ldr	r3, [r3, #28]
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3708      	adds	r7, #8
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	460b      	mov	r3, r1
 8005f36:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d101      	bne.n	8005f46 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e014      	b.n	8005f70 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	2b03      	cmp	r3, #3
 8005f50:	d10d      	bne.n	8005f6e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d007      	beq.n	8005f6e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f64:	6a1b      	ldr	r3, [r3, #32]
 8005f66:	78fa      	ldrb	r2, [r7, #3]
 8005f68:	4611      	mov	r1, r2
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3708      	adds	r7, #8
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	460b      	mov	r3, r1
 8005f82:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d101      	bne.n	8005f92 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005f8e:	2303      	movs	r3, #3
 8005f90:	e014      	b.n	8005fbc <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	2b03      	cmp	r3, #3
 8005f9c:	d10d      	bne.n	8005fba <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d007      	beq.n	8005fba <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb2:	78fa      	ldrb	r2, [r7, #3]
 8005fb4:	4611      	mov	r1, r2
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3708      	adds	r7, #8
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	370c      	adds	r7, #12
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr

08005fda <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005fda:	b580      	push	{r7, lr}
 8005fdc:	b082      	sub	sp, #8
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d009      	beq.n	8006008 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	6852      	ldr	r2, [r2, #4]
 8006000:	b2d2      	uxtb	r2, r2
 8006002:	4611      	mov	r1, r2
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	4798      	blx	r3
  }

  return USBD_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3708      	adds	r7, #8
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}

08006012 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006012:	b480      	push	{r7}
 8006014:	b087      	sub	sp, #28
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	3301      	adds	r3, #1
 8006028:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006030:	8a3b      	ldrh	r3, [r7, #16]
 8006032:	021b      	lsls	r3, r3, #8
 8006034:	b21a      	sxth	r2, r3
 8006036:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800603a:	4313      	orrs	r3, r2
 800603c:	b21b      	sxth	r3, r3
 800603e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006040:	89fb      	ldrh	r3, [r7, #14]
}
 8006042:	4618      	mov	r0, r3
 8006044:	371c      	adds	r7, #28
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr
	...

08006050 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800605a:	2300      	movs	r3, #0
 800605c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006066:	2b40      	cmp	r3, #64	; 0x40
 8006068:	d005      	beq.n	8006076 <USBD_StdDevReq+0x26>
 800606a:	2b40      	cmp	r3, #64	; 0x40
 800606c:	d853      	bhi.n	8006116 <USBD_StdDevReq+0xc6>
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00b      	beq.n	800608a <USBD_StdDevReq+0x3a>
 8006072:	2b20      	cmp	r3, #32
 8006074:	d14f      	bne.n	8006116 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	6839      	ldr	r1, [r7, #0]
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	4798      	blx	r3
 8006084:	4603      	mov	r3, r0
 8006086:	73fb      	strb	r3, [r7, #15]
      break;
 8006088:	e04a      	b.n	8006120 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	785b      	ldrb	r3, [r3, #1]
 800608e:	2b09      	cmp	r3, #9
 8006090:	d83b      	bhi.n	800610a <USBD_StdDevReq+0xba>
 8006092:	a201      	add	r2, pc, #4	; (adr r2, 8006098 <USBD_StdDevReq+0x48>)
 8006094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006098:	080060ed 	.word	0x080060ed
 800609c:	08006101 	.word	0x08006101
 80060a0:	0800610b 	.word	0x0800610b
 80060a4:	080060f7 	.word	0x080060f7
 80060a8:	0800610b 	.word	0x0800610b
 80060ac:	080060cb 	.word	0x080060cb
 80060b0:	080060c1 	.word	0x080060c1
 80060b4:	0800610b 	.word	0x0800610b
 80060b8:	080060e3 	.word	0x080060e3
 80060bc:	080060d5 	.word	0x080060d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80060c0:	6839      	ldr	r1, [r7, #0]
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 f9de 	bl	8006484 <USBD_GetDescriptor>
          break;
 80060c8:	e024      	b.n	8006114 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80060ca:	6839      	ldr	r1, [r7, #0]
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 fb43 	bl	8006758 <USBD_SetAddress>
          break;
 80060d2:	e01f      	b.n	8006114 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80060d4:	6839      	ldr	r1, [r7, #0]
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 fb82 	bl	80067e0 <USBD_SetConfig>
 80060dc:	4603      	mov	r3, r0
 80060de:	73fb      	strb	r3, [r7, #15]
          break;
 80060e0:	e018      	b.n	8006114 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80060e2:	6839      	ldr	r1, [r7, #0]
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 fc21 	bl	800692c <USBD_GetConfig>
          break;
 80060ea:	e013      	b.n	8006114 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80060ec:	6839      	ldr	r1, [r7, #0]
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 fc52 	bl	8006998 <USBD_GetStatus>
          break;
 80060f4:	e00e      	b.n	8006114 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80060f6:	6839      	ldr	r1, [r7, #0]
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 fc81 	bl	8006a00 <USBD_SetFeature>
          break;
 80060fe:	e009      	b.n	8006114 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006100:	6839      	ldr	r1, [r7, #0]
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 fc90 	bl	8006a28 <USBD_ClrFeature>
          break;
 8006108:	e004      	b.n	8006114 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800610a:	6839      	ldr	r1, [r7, #0]
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 fce7 	bl	8006ae0 <USBD_CtlError>
          break;
 8006112:	bf00      	nop
      }
      break;
 8006114:	e004      	b.n	8006120 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006116:	6839      	ldr	r1, [r7, #0]
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 fce1 	bl	8006ae0 <USBD_CtlError>
      break;
 800611e:	bf00      	nop
  }

  return ret;
 8006120:	7bfb      	ldrb	r3, [r7, #15]
}
 8006122:	4618      	mov	r0, r3
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop

0800612c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006136:	2300      	movs	r3, #0
 8006138:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006142:	2b40      	cmp	r3, #64	; 0x40
 8006144:	d005      	beq.n	8006152 <USBD_StdItfReq+0x26>
 8006146:	2b40      	cmp	r3, #64	; 0x40
 8006148:	d82f      	bhi.n	80061aa <USBD_StdItfReq+0x7e>
 800614a:	2b00      	cmp	r3, #0
 800614c:	d001      	beq.n	8006152 <USBD_StdItfReq+0x26>
 800614e:	2b20      	cmp	r3, #32
 8006150:	d12b      	bne.n	80061aa <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006158:	b2db      	uxtb	r3, r3
 800615a:	3b01      	subs	r3, #1
 800615c:	2b02      	cmp	r3, #2
 800615e:	d81d      	bhi.n	800619c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	889b      	ldrh	r3, [r3, #4]
 8006164:	b2db      	uxtb	r3, r3
 8006166:	2b01      	cmp	r3, #1
 8006168:	d813      	bhi.n	8006192 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	6839      	ldr	r1, [r7, #0]
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	4798      	blx	r3
 8006178:	4603      	mov	r3, r0
 800617a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	88db      	ldrh	r3, [r3, #6]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d110      	bne.n	80061a6 <USBD_StdItfReq+0x7a>
 8006184:	7bfb      	ldrb	r3, [r7, #15]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d10d      	bne.n	80061a6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 fd56 	bl	8006c3c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006190:	e009      	b.n	80061a6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006192:	6839      	ldr	r1, [r7, #0]
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 fca3 	bl	8006ae0 <USBD_CtlError>
          break;
 800619a:	e004      	b.n	80061a6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800619c:	6839      	ldr	r1, [r7, #0]
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 fc9e 	bl	8006ae0 <USBD_CtlError>
          break;
 80061a4:	e000      	b.n	80061a8 <USBD_StdItfReq+0x7c>
          break;
 80061a6:	bf00      	nop
      }
      break;
 80061a8:	e004      	b.n	80061b4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80061aa:	6839      	ldr	r1, [r7, #0]
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 fc97 	bl	8006ae0 <USBD_CtlError>
      break;
 80061b2:	bf00      	nop
  }

  return ret;
 80061b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3710      	adds	r7, #16
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}

080061be <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061be:	b580      	push	{r7, lr}
 80061c0:	b084      	sub	sp, #16
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
 80061c6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80061c8:	2300      	movs	r3, #0
 80061ca:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	889b      	ldrh	r3, [r3, #4]
 80061d0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061da:	2b40      	cmp	r3, #64	; 0x40
 80061dc:	d007      	beq.n	80061ee <USBD_StdEPReq+0x30>
 80061de:	2b40      	cmp	r3, #64	; 0x40
 80061e0:	f200 8145 	bhi.w	800646e <USBD_StdEPReq+0x2b0>
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d00c      	beq.n	8006202 <USBD_StdEPReq+0x44>
 80061e8:	2b20      	cmp	r3, #32
 80061ea:	f040 8140 	bne.w	800646e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	6839      	ldr	r1, [r7, #0]
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	4798      	blx	r3
 80061fc:	4603      	mov	r3, r0
 80061fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006200:	e13a      	b.n	8006478 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	785b      	ldrb	r3, [r3, #1]
 8006206:	2b03      	cmp	r3, #3
 8006208:	d007      	beq.n	800621a <USBD_StdEPReq+0x5c>
 800620a:	2b03      	cmp	r3, #3
 800620c:	f300 8129 	bgt.w	8006462 <USBD_StdEPReq+0x2a4>
 8006210:	2b00      	cmp	r3, #0
 8006212:	d07f      	beq.n	8006314 <USBD_StdEPReq+0x156>
 8006214:	2b01      	cmp	r3, #1
 8006216:	d03c      	beq.n	8006292 <USBD_StdEPReq+0xd4>
 8006218:	e123      	b.n	8006462 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006220:	b2db      	uxtb	r3, r3
 8006222:	2b02      	cmp	r3, #2
 8006224:	d002      	beq.n	800622c <USBD_StdEPReq+0x6e>
 8006226:	2b03      	cmp	r3, #3
 8006228:	d016      	beq.n	8006258 <USBD_StdEPReq+0x9a>
 800622a:	e02c      	b.n	8006286 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800622c:	7bbb      	ldrb	r3, [r7, #14]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00d      	beq.n	800624e <USBD_StdEPReq+0x90>
 8006232:	7bbb      	ldrb	r3, [r7, #14]
 8006234:	2b80      	cmp	r3, #128	; 0x80
 8006236:	d00a      	beq.n	800624e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006238:	7bbb      	ldrb	r3, [r7, #14]
 800623a:	4619      	mov	r1, r3
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f001 f859 	bl	80072f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006242:	2180      	movs	r1, #128	; 0x80
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f001 f855 	bl	80072f4 <USBD_LL_StallEP>
 800624a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800624c:	e020      	b.n	8006290 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800624e:	6839      	ldr	r1, [r7, #0]
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 fc45 	bl	8006ae0 <USBD_CtlError>
              break;
 8006256:	e01b      	b.n	8006290 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	885b      	ldrh	r3, [r3, #2]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d10e      	bne.n	800627e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006260:	7bbb      	ldrb	r3, [r7, #14]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00b      	beq.n	800627e <USBD_StdEPReq+0xc0>
 8006266:	7bbb      	ldrb	r3, [r7, #14]
 8006268:	2b80      	cmp	r3, #128	; 0x80
 800626a:	d008      	beq.n	800627e <USBD_StdEPReq+0xc0>
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	88db      	ldrh	r3, [r3, #6]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d104      	bne.n	800627e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006274:	7bbb      	ldrb	r3, [r7, #14]
 8006276:	4619      	mov	r1, r3
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f001 f83b 	bl	80072f4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 fcdc 	bl	8006c3c <USBD_CtlSendStatus>

              break;
 8006284:	e004      	b.n	8006290 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006286:	6839      	ldr	r1, [r7, #0]
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 fc29 	bl	8006ae0 <USBD_CtlError>
              break;
 800628e:	bf00      	nop
          }
          break;
 8006290:	e0ec      	b.n	800646c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006298:	b2db      	uxtb	r3, r3
 800629a:	2b02      	cmp	r3, #2
 800629c:	d002      	beq.n	80062a4 <USBD_StdEPReq+0xe6>
 800629e:	2b03      	cmp	r3, #3
 80062a0:	d016      	beq.n	80062d0 <USBD_StdEPReq+0x112>
 80062a2:	e030      	b.n	8006306 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80062a4:	7bbb      	ldrb	r3, [r7, #14]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00d      	beq.n	80062c6 <USBD_StdEPReq+0x108>
 80062aa:	7bbb      	ldrb	r3, [r7, #14]
 80062ac:	2b80      	cmp	r3, #128	; 0x80
 80062ae:	d00a      	beq.n	80062c6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80062b0:	7bbb      	ldrb	r3, [r7, #14]
 80062b2:	4619      	mov	r1, r3
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f001 f81d 	bl	80072f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80062ba:	2180      	movs	r1, #128	; 0x80
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f001 f819 	bl	80072f4 <USBD_LL_StallEP>
 80062c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80062c4:	e025      	b.n	8006312 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80062c6:	6839      	ldr	r1, [r7, #0]
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 fc09 	bl	8006ae0 <USBD_CtlError>
              break;
 80062ce:	e020      	b.n	8006312 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	885b      	ldrh	r3, [r3, #2]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d11b      	bne.n	8006310 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80062d8:	7bbb      	ldrb	r3, [r7, #14]
 80062da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d004      	beq.n	80062ec <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80062e2:	7bbb      	ldrb	r3, [r7, #14]
 80062e4:	4619      	mov	r1, r3
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f001 f823 	bl	8007332 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 fca5 	bl	8006c3c <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	6839      	ldr	r1, [r7, #0]
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	4798      	blx	r3
 8006300:	4603      	mov	r3, r0
 8006302:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006304:	e004      	b.n	8006310 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006306:	6839      	ldr	r1, [r7, #0]
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 fbe9 	bl	8006ae0 <USBD_CtlError>
              break;
 800630e:	e000      	b.n	8006312 <USBD_StdEPReq+0x154>
              break;
 8006310:	bf00      	nop
          }
          break;
 8006312:	e0ab      	b.n	800646c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800631a:	b2db      	uxtb	r3, r3
 800631c:	2b02      	cmp	r3, #2
 800631e:	d002      	beq.n	8006326 <USBD_StdEPReq+0x168>
 8006320:	2b03      	cmp	r3, #3
 8006322:	d032      	beq.n	800638a <USBD_StdEPReq+0x1cc>
 8006324:	e097      	b.n	8006456 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006326:	7bbb      	ldrb	r3, [r7, #14]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d007      	beq.n	800633c <USBD_StdEPReq+0x17e>
 800632c:	7bbb      	ldrb	r3, [r7, #14]
 800632e:	2b80      	cmp	r3, #128	; 0x80
 8006330:	d004      	beq.n	800633c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006332:	6839      	ldr	r1, [r7, #0]
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 fbd3 	bl	8006ae0 <USBD_CtlError>
                break;
 800633a:	e091      	b.n	8006460 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800633c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006340:	2b00      	cmp	r3, #0
 8006342:	da0b      	bge.n	800635c <USBD_StdEPReq+0x19e>
 8006344:	7bbb      	ldrb	r3, [r7, #14]
 8006346:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800634a:	4613      	mov	r3, r2
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	4413      	add	r3, r2
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	3310      	adds	r3, #16
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	4413      	add	r3, r2
 8006358:	3304      	adds	r3, #4
 800635a:	e00b      	b.n	8006374 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800635c:	7bbb      	ldrb	r3, [r7, #14]
 800635e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006362:	4613      	mov	r3, r2
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	4413      	add	r3, r2
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	4413      	add	r3, r2
 8006372:	3304      	adds	r3, #4
 8006374:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	2200      	movs	r2, #0
 800637a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	2202      	movs	r2, #2
 8006380:	4619      	mov	r1, r3
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 fc1d 	bl	8006bc2 <USBD_CtlSendData>
              break;
 8006388:	e06a      	b.n	8006460 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800638a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800638e:	2b00      	cmp	r3, #0
 8006390:	da11      	bge.n	80063b6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006392:	7bbb      	ldrb	r3, [r7, #14]
 8006394:	f003 020f 	and.w	r2, r3, #15
 8006398:	6879      	ldr	r1, [r7, #4]
 800639a:	4613      	mov	r3, r2
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	4413      	add	r3, r2
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	440b      	add	r3, r1
 80063a4:	3324      	adds	r3, #36	; 0x24
 80063a6:	881b      	ldrh	r3, [r3, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d117      	bne.n	80063dc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80063ac:	6839      	ldr	r1, [r7, #0]
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 fb96 	bl	8006ae0 <USBD_CtlError>
                  break;
 80063b4:	e054      	b.n	8006460 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80063b6:	7bbb      	ldrb	r3, [r7, #14]
 80063b8:	f003 020f 	and.w	r2, r3, #15
 80063bc:	6879      	ldr	r1, [r7, #4]
 80063be:	4613      	mov	r3, r2
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	4413      	add	r3, r2
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	440b      	add	r3, r1
 80063c8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80063cc:	881b      	ldrh	r3, [r3, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d104      	bne.n	80063dc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80063d2:	6839      	ldr	r1, [r7, #0]
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 fb83 	bl	8006ae0 <USBD_CtlError>
                  break;
 80063da:	e041      	b.n	8006460 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80063dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	da0b      	bge.n	80063fc <USBD_StdEPReq+0x23e>
 80063e4:	7bbb      	ldrb	r3, [r7, #14]
 80063e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80063ea:	4613      	mov	r3, r2
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	4413      	add	r3, r2
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	3310      	adds	r3, #16
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	4413      	add	r3, r2
 80063f8:	3304      	adds	r3, #4
 80063fa:	e00b      	b.n	8006414 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80063fc:	7bbb      	ldrb	r3, [r7, #14]
 80063fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006402:	4613      	mov	r3, r2
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	4413      	add	r3, r2
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	4413      	add	r3, r2
 8006412:	3304      	adds	r3, #4
 8006414:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006416:	7bbb      	ldrb	r3, [r7, #14]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d002      	beq.n	8006422 <USBD_StdEPReq+0x264>
 800641c:	7bbb      	ldrb	r3, [r7, #14]
 800641e:	2b80      	cmp	r3, #128	; 0x80
 8006420:	d103      	bne.n	800642a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	2200      	movs	r2, #0
 8006426:	601a      	str	r2, [r3, #0]
 8006428:	e00e      	b.n	8006448 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800642a:	7bbb      	ldrb	r3, [r7, #14]
 800642c:	4619      	mov	r1, r3
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 ff9e 	bl	8007370 <USBD_LL_IsStallEP>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d003      	beq.n	8006442 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	2201      	movs	r2, #1
 800643e:	601a      	str	r2, [r3, #0]
 8006440:	e002      	b.n	8006448 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	2200      	movs	r2, #0
 8006446:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	2202      	movs	r2, #2
 800644c:	4619      	mov	r1, r3
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 fbb7 	bl	8006bc2 <USBD_CtlSendData>
              break;
 8006454:	e004      	b.n	8006460 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006456:	6839      	ldr	r1, [r7, #0]
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 fb41 	bl	8006ae0 <USBD_CtlError>
              break;
 800645e:	bf00      	nop
          }
          break;
 8006460:	e004      	b.n	800646c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006462:	6839      	ldr	r1, [r7, #0]
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 fb3b 	bl	8006ae0 <USBD_CtlError>
          break;
 800646a:	bf00      	nop
      }
      break;
 800646c:	e004      	b.n	8006478 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800646e:	6839      	ldr	r1, [r7, #0]
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 fb35 	bl	8006ae0 <USBD_CtlError>
      break;
 8006476:	bf00      	nop
  }

  return ret;
 8006478:	7bfb      	ldrb	r3, [r7, #15]
}
 800647a:	4618      	mov	r0, r3
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
	...

08006484 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800648e:	2300      	movs	r3, #0
 8006490:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006492:	2300      	movs	r3, #0
 8006494:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006496:	2300      	movs	r3, #0
 8006498:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	885b      	ldrh	r3, [r3, #2]
 800649e:	0a1b      	lsrs	r3, r3, #8
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	3b01      	subs	r3, #1
 80064a4:	2b06      	cmp	r3, #6
 80064a6:	f200 8128 	bhi.w	80066fa <USBD_GetDescriptor+0x276>
 80064aa:	a201      	add	r2, pc, #4	; (adr r2, 80064b0 <USBD_GetDescriptor+0x2c>)
 80064ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b0:	080064cd 	.word	0x080064cd
 80064b4:	080064e5 	.word	0x080064e5
 80064b8:	08006525 	.word	0x08006525
 80064bc:	080066fb 	.word	0x080066fb
 80064c0:	080066fb 	.word	0x080066fb
 80064c4:	0800669b 	.word	0x0800669b
 80064c8:	080066c7 	.word	0x080066c7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	7c12      	ldrb	r2, [r2, #16]
 80064d8:	f107 0108 	add.w	r1, r7, #8
 80064dc:	4610      	mov	r0, r2
 80064de:	4798      	blx	r3
 80064e0:	60f8      	str	r0, [r7, #12]
      break;
 80064e2:	e112      	b.n	800670a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	7c1b      	ldrb	r3, [r3, #16]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d10d      	bne.n	8006508 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f4:	f107 0208 	add.w	r2, r7, #8
 80064f8:	4610      	mov	r0, r2
 80064fa:	4798      	blx	r3
 80064fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	3301      	adds	r3, #1
 8006502:	2202      	movs	r2, #2
 8006504:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006506:	e100      	b.n	800670a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800650e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006510:	f107 0208 	add.w	r2, r7, #8
 8006514:	4610      	mov	r0, r2
 8006516:	4798      	blx	r3
 8006518:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	3301      	adds	r3, #1
 800651e:	2202      	movs	r2, #2
 8006520:	701a      	strb	r2, [r3, #0]
      break;
 8006522:	e0f2      	b.n	800670a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	885b      	ldrh	r3, [r3, #2]
 8006528:	b2db      	uxtb	r3, r3
 800652a:	2b05      	cmp	r3, #5
 800652c:	f200 80ac 	bhi.w	8006688 <USBD_GetDescriptor+0x204>
 8006530:	a201      	add	r2, pc, #4	; (adr r2, 8006538 <USBD_GetDescriptor+0xb4>)
 8006532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006536:	bf00      	nop
 8006538:	08006551 	.word	0x08006551
 800653c:	08006585 	.word	0x08006585
 8006540:	080065b9 	.word	0x080065b9
 8006544:	080065ed 	.word	0x080065ed
 8006548:	08006621 	.word	0x08006621
 800654c:	08006655 	.word	0x08006655
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00b      	beq.n	8006574 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	7c12      	ldrb	r2, [r2, #16]
 8006568:	f107 0108 	add.w	r1, r7, #8
 800656c:	4610      	mov	r0, r2
 800656e:	4798      	blx	r3
 8006570:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006572:	e091      	b.n	8006698 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006574:	6839      	ldr	r1, [r7, #0]
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 fab2 	bl	8006ae0 <USBD_CtlError>
            err++;
 800657c:	7afb      	ldrb	r3, [r7, #11]
 800657e:	3301      	adds	r3, #1
 8006580:	72fb      	strb	r3, [r7, #11]
          break;
 8006582:	e089      	b.n	8006698 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d00b      	beq.n	80065a8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	7c12      	ldrb	r2, [r2, #16]
 800659c:	f107 0108 	add.w	r1, r7, #8
 80065a0:	4610      	mov	r0, r2
 80065a2:	4798      	blx	r3
 80065a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065a6:	e077      	b.n	8006698 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80065a8:	6839      	ldr	r1, [r7, #0]
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 fa98 	bl	8006ae0 <USBD_CtlError>
            err++;
 80065b0:	7afb      	ldrb	r3, [r7, #11]
 80065b2:	3301      	adds	r3, #1
 80065b4:	72fb      	strb	r3, [r7, #11]
          break;
 80065b6:	e06f      	b.n	8006698 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00b      	beq.n	80065dc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	7c12      	ldrb	r2, [r2, #16]
 80065d0:	f107 0108 	add.w	r1, r7, #8
 80065d4:	4610      	mov	r0, r2
 80065d6:	4798      	blx	r3
 80065d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065da:	e05d      	b.n	8006698 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80065dc:	6839      	ldr	r1, [r7, #0]
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 fa7e 	bl	8006ae0 <USBD_CtlError>
            err++;
 80065e4:	7afb      	ldrb	r3, [r7, #11]
 80065e6:	3301      	adds	r3, #1
 80065e8:	72fb      	strb	r3, [r7, #11]
          break;
 80065ea:	e055      	b.n	8006698 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00b      	beq.n	8006610 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	7c12      	ldrb	r2, [r2, #16]
 8006604:	f107 0108 	add.w	r1, r7, #8
 8006608:	4610      	mov	r0, r2
 800660a:	4798      	blx	r3
 800660c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800660e:	e043      	b.n	8006698 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006610:	6839      	ldr	r1, [r7, #0]
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 fa64 	bl	8006ae0 <USBD_CtlError>
            err++;
 8006618:	7afb      	ldrb	r3, [r7, #11]
 800661a:	3301      	adds	r3, #1
 800661c:	72fb      	strb	r3, [r7, #11]
          break;
 800661e:	e03b      	b.n	8006698 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006626:	695b      	ldr	r3, [r3, #20]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d00b      	beq.n	8006644 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006632:	695b      	ldr	r3, [r3, #20]
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	7c12      	ldrb	r2, [r2, #16]
 8006638:	f107 0108 	add.w	r1, r7, #8
 800663c:	4610      	mov	r0, r2
 800663e:	4798      	blx	r3
 8006640:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006642:	e029      	b.n	8006698 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006644:	6839      	ldr	r1, [r7, #0]
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 fa4a 	bl	8006ae0 <USBD_CtlError>
            err++;
 800664c:	7afb      	ldrb	r3, [r7, #11]
 800664e:	3301      	adds	r3, #1
 8006650:	72fb      	strb	r3, [r7, #11]
          break;
 8006652:	e021      	b.n	8006698 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800665a:	699b      	ldr	r3, [r3, #24]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00b      	beq.n	8006678 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006666:	699b      	ldr	r3, [r3, #24]
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	7c12      	ldrb	r2, [r2, #16]
 800666c:	f107 0108 	add.w	r1, r7, #8
 8006670:	4610      	mov	r0, r2
 8006672:	4798      	blx	r3
 8006674:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006676:	e00f      	b.n	8006698 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006678:	6839      	ldr	r1, [r7, #0]
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 fa30 	bl	8006ae0 <USBD_CtlError>
            err++;
 8006680:	7afb      	ldrb	r3, [r7, #11]
 8006682:	3301      	adds	r3, #1
 8006684:	72fb      	strb	r3, [r7, #11]
          break;
 8006686:	e007      	b.n	8006698 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006688:	6839      	ldr	r1, [r7, #0]
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 fa28 	bl	8006ae0 <USBD_CtlError>
          err++;
 8006690:	7afb      	ldrb	r3, [r7, #11]
 8006692:	3301      	adds	r3, #1
 8006694:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006696:	bf00      	nop
      }
      break;
 8006698:	e037      	b.n	800670a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	7c1b      	ldrb	r3, [r3, #16]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d109      	bne.n	80066b6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066aa:	f107 0208 	add.w	r2, r7, #8
 80066ae:	4610      	mov	r0, r2
 80066b0:	4798      	blx	r3
 80066b2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80066b4:	e029      	b.n	800670a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80066b6:	6839      	ldr	r1, [r7, #0]
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 fa11 	bl	8006ae0 <USBD_CtlError>
        err++;
 80066be:	7afb      	ldrb	r3, [r7, #11]
 80066c0:	3301      	adds	r3, #1
 80066c2:	72fb      	strb	r3, [r7, #11]
      break;
 80066c4:	e021      	b.n	800670a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	7c1b      	ldrb	r3, [r3, #16]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d10d      	bne.n	80066ea <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d6:	f107 0208 	add.w	r2, r7, #8
 80066da:	4610      	mov	r0, r2
 80066dc:	4798      	blx	r3
 80066de:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	3301      	adds	r3, #1
 80066e4:	2207      	movs	r2, #7
 80066e6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80066e8:	e00f      	b.n	800670a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80066ea:	6839      	ldr	r1, [r7, #0]
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f000 f9f7 	bl	8006ae0 <USBD_CtlError>
        err++;
 80066f2:	7afb      	ldrb	r3, [r7, #11]
 80066f4:	3301      	adds	r3, #1
 80066f6:	72fb      	strb	r3, [r7, #11]
      break;
 80066f8:	e007      	b.n	800670a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80066fa:	6839      	ldr	r1, [r7, #0]
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 f9ef 	bl	8006ae0 <USBD_CtlError>
      err++;
 8006702:	7afb      	ldrb	r3, [r7, #11]
 8006704:	3301      	adds	r3, #1
 8006706:	72fb      	strb	r3, [r7, #11]
      break;
 8006708:	bf00      	nop
  }

  if (err != 0U)
 800670a:	7afb      	ldrb	r3, [r7, #11]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d11e      	bne.n	800674e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	88db      	ldrh	r3, [r3, #6]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d016      	beq.n	8006746 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006718:	893b      	ldrh	r3, [r7, #8]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00e      	beq.n	800673c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	88da      	ldrh	r2, [r3, #6]
 8006722:	893b      	ldrh	r3, [r7, #8]
 8006724:	4293      	cmp	r3, r2
 8006726:	bf28      	it	cs
 8006728:	4613      	movcs	r3, r2
 800672a:	b29b      	uxth	r3, r3
 800672c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800672e:	893b      	ldrh	r3, [r7, #8]
 8006730:	461a      	mov	r2, r3
 8006732:	68f9      	ldr	r1, [r7, #12]
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 fa44 	bl	8006bc2 <USBD_CtlSendData>
 800673a:	e009      	b.n	8006750 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800673c:	6839      	ldr	r1, [r7, #0]
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 f9ce 	bl	8006ae0 <USBD_CtlError>
 8006744:	e004      	b.n	8006750 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 fa78 	bl	8006c3c <USBD_CtlSendStatus>
 800674c:	e000      	b.n	8006750 <USBD_GetDescriptor+0x2cc>
    return;
 800674e:	bf00      	nop
  }
}
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop

08006758 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	889b      	ldrh	r3, [r3, #4]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d131      	bne.n	80067ce <USBD_SetAddress+0x76>
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	88db      	ldrh	r3, [r3, #6]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d12d      	bne.n	80067ce <USBD_SetAddress+0x76>
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	885b      	ldrh	r3, [r3, #2]
 8006776:	2b7f      	cmp	r3, #127	; 0x7f
 8006778:	d829      	bhi.n	80067ce <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	885b      	ldrh	r3, [r3, #2]
 800677e:	b2db      	uxtb	r3, r3
 8006780:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006784:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b03      	cmp	r3, #3
 8006790:	d104      	bne.n	800679c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006792:	6839      	ldr	r1, [r7, #0]
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 f9a3 	bl	8006ae0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800679a:	e01d      	b.n	80067d8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	7bfa      	ldrb	r2, [r7, #15]
 80067a0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80067a4:	7bfb      	ldrb	r3, [r7, #15]
 80067a6:	4619      	mov	r1, r3
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 fe0d 	bl	80073c8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 fa44 	bl	8006c3c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80067b4:	7bfb      	ldrb	r3, [r7, #15]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d004      	beq.n	80067c4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2202      	movs	r2, #2
 80067be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067c2:	e009      	b.n	80067d8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067cc:	e004      	b.n	80067d8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80067ce:	6839      	ldr	r1, [r7, #0]
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 f985 	bl	8006ae0 <USBD_CtlError>
  }
}
 80067d6:	bf00      	nop
 80067d8:	bf00      	nop
 80067da:	3710      	adds	r7, #16
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80067ea:	2300      	movs	r3, #0
 80067ec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	885b      	ldrh	r3, [r3, #2]
 80067f2:	b2da      	uxtb	r2, r3
 80067f4:	4b4c      	ldr	r3, [pc, #304]	; (8006928 <USBD_SetConfig+0x148>)
 80067f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80067f8:	4b4b      	ldr	r3, [pc, #300]	; (8006928 <USBD_SetConfig+0x148>)
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d905      	bls.n	800680c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006800:	6839      	ldr	r1, [r7, #0]
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 f96c 	bl	8006ae0 <USBD_CtlError>
    return USBD_FAIL;
 8006808:	2303      	movs	r3, #3
 800680a:	e088      	b.n	800691e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006812:	b2db      	uxtb	r3, r3
 8006814:	2b02      	cmp	r3, #2
 8006816:	d002      	beq.n	800681e <USBD_SetConfig+0x3e>
 8006818:	2b03      	cmp	r3, #3
 800681a:	d025      	beq.n	8006868 <USBD_SetConfig+0x88>
 800681c:	e071      	b.n	8006902 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800681e:	4b42      	ldr	r3, [pc, #264]	; (8006928 <USBD_SetConfig+0x148>)
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d01c      	beq.n	8006860 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006826:	4b40      	ldr	r3, [pc, #256]	; (8006928 <USBD_SetConfig+0x148>)
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	461a      	mov	r2, r3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006830:	4b3d      	ldr	r3, [pc, #244]	; (8006928 <USBD_SetConfig+0x148>)
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	4619      	mov	r1, r3
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f7ff f948 	bl	8005acc <USBD_SetClassConfig>
 800683c:	4603      	mov	r3, r0
 800683e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006840:	7bfb      	ldrb	r3, [r7, #15]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d004      	beq.n	8006850 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006846:	6839      	ldr	r1, [r7, #0]
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 f949 	bl	8006ae0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800684e:	e065      	b.n	800691c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 f9f3 	bl	8006c3c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2203      	movs	r2, #3
 800685a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800685e:	e05d      	b.n	800691c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 f9eb 	bl	8006c3c <USBD_CtlSendStatus>
      break;
 8006866:	e059      	b.n	800691c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006868:	4b2f      	ldr	r3, [pc, #188]	; (8006928 <USBD_SetConfig+0x148>)
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d112      	bne.n	8006896 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2202      	movs	r2, #2
 8006874:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006878:	4b2b      	ldr	r3, [pc, #172]	; (8006928 <USBD_SetConfig+0x148>)
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	461a      	mov	r2, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006882:	4b29      	ldr	r3, [pc, #164]	; (8006928 <USBD_SetConfig+0x148>)
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	4619      	mov	r1, r3
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f7ff f93b 	bl	8005b04 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 f9d4 	bl	8006c3c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006894:	e042      	b.n	800691c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006896:	4b24      	ldr	r3, [pc, #144]	; (8006928 <USBD_SetConfig+0x148>)
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	461a      	mov	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d02a      	beq.n	80068fa <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	4619      	mov	r1, r3
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f7ff f929 	bl	8005b04 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80068b2:	4b1d      	ldr	r3, [pc, #116]	; (8006928 <USBD_SetConfig+0x148>)
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	461a      	mov	r2, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80068bc:	4b1a      	ldr	r3, [pc, #104]	; (8006928 <USBD_SetConfig+0x148>)
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	4619      	mov	r1, r3
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f7ff f902 	bl	8005acc <USBD_SetClassConfig>
 80068c8:	4603      	mov	r3, r0
 80068ca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80068cc:	7bfb      	ldrb	r3, [r7, #15]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00f      	beq.n	80068f2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80068d2:	6839      	ldr	r1, [r7, #0]
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 f903 	bl	8006ae0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	4619      	mov	r1, r3
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f7ff f90e 	bl	8005b04 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2202      	movs	r2, #2
 80068ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80068f0:	e014      	b.n	800691c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 f9a2 	bl	8006c3c <USBD_CtlSendStatus>
      break;
 80068f8:	e010      	b.n	800691c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 f99e 	bl	8006c3c <USBD_CtlSendStatus>
      break;
 8006900:	e00c      	b.n	800691c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006902:	6839      	ldr	r1, [r7, #0]
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 f8eb 	bl	8006ae0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800690a:	4b07      	ldr	r3, [pc, #28]	; (8006928 <USBD_SetConfig+0x148>)
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	4619      	mov	r1, r3
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f7ff f8f7 	bl	8005b04 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006916:	2303      	movs	r3, #3
 8006918:	73fb      	strb	r3, [r7, #15]
      break;
 800691a:	bf00      	nop
  }

  return ret;
 800691c:	7bfb      	ldrb	r3, [r7, #15]
}
 800691e:	4618      	mov	r0, r3
 8006920:	3710      	adds	r7, #16
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	20000180 	.word	0x20000180

0800692c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	88db      	ldrh	r3, [r3, #6]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d004      	beq.n	8006948 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800693e:	6839      	ldr	r1, [r7, #0]
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 f8cd 	bl	8006ae0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006946:	e023      	b.n	8006990 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800694e:	b2db      	uxtb	r3, r3
 8006950:	2b02      	cmp	r3, #2
 8006952:	dc02      	bgt.n	800695a <USBD_GetConfig+0x2e>
 8006954:	2b00      	cmp	r3, #0
 8006956:	dc03      	bgt.n	8006960 <USBD_GetConfig+0x34>
 8006958:	e015      	b.n	8006986 <USBD_GetConfig+0x5a>
 800695a:	2b03      	cmp	r3, #3
 800695c:	d00b      	beq.n	8006976 <USBD_GetConfig+0x4a>
 800695e:	e012      	b.n	8006986 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	3308      	adds	r3, #8
 800696a:	2201      	movs	r2, #1
 800696c:	4619      	mov	r1, r3
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 f927 	bl	8006bc2 <USBD_CtlSendData>
        break;
 8006974:	e00c      	b.n	8006990 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	3304      	adds	r3, #4
 800697a:	2201      	movs	r2, #1
 800697c:	4619      	mov	r1, r3
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 f91f 	bl	8006bc2 <USBD_CtlSendData>
        break;
 8006984:	e004      	b.n	8006990 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006986:	6839      	ldr	r1, [r7, #0]
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 f8a9 	bl	8006ae0 <USBD_CtlError>
        break;
 800698e:	bf00      	nop
}
 8006990:	bf00      	nop
 8006992:	3708      	adds	r7, #8
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	3b01      	subs	r3, #1
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d81e      	bhi.n	80069ee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	88db      	ldrh	r3, [r3, #6]
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d004      	beq.n	80069c2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80069b8:	6839      	ldr	r1, [r7, #0]
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 f890 	bl	8006ae0 <USBD_CtlError>
        break;
 80069c0:	e01a      	b.n	80069f8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2201      	movs	r2, #1
 80069c6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d005      	beq.n	80069de <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	f043 0202 	orr.w	r2, r3, #2
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	330c      	adds	r3, #12
 80069e2:	2202      	movs	r2, #2
 80069e4:	4619      	mov	r1, r3
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 f8eb 	bl	8006bc2 <USBD_CtlSendData>
      break;
 80069ec:	e004      	b.n	80069f8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80069ee:	6839      	ldr	r1, [r7, #0]
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 f875 	bl	8006ae0 <USBD_CtlError>
      break;
 80069f6:	bf00      	nop
  }
}
 80069f8:	bf00      	nop
 80069fa:	3708      	adds	r7, #8
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b082      	sub	sp, #8
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	885b      	ldrh	r3, [r3, #2]
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d106      	bne.n	8006a20 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2201      	movs	r2, #1
 8006a16:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 f90e 	bl	8006c3c <USBD_CtlSendStatus>
  }
}
 8006a20:	bf00      	nop
 8006a22:	3708      	adds	r7, #8
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d80b      	bhi.n	8006a58 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	885b      	ldrh	r3, [r3, #2]
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d10c      	bne.n	8006a62 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 f8f3 	bl	8006c3c <USBD_CtlSendStatus>
      }
      break;
 8006a56:	e004      	b.n	8006a62 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006a58:	6839      	ldr	r1, [r7, #0]
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 f840 	bl	8006ae0 <USBD_CtlError>
      break;
 8006a60:	e000      	b.n	8006a64 <USBD_ClrFeature+0x3c>
      break;
 8006a62:	bf00      	nop
  }
}
 8006a64:	bf00      	nop
 8006a66:	3708      	adds	r7, #8
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	781a      	ldrb	r2, [r3, #0]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	3301      	adds	r3, #1
 8006a86:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	781a      	ldrb	r2, [r3, #0]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	3301      	adds	r3, #1
 8006a94:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006a96:	68f8      	ldr	r0, [r7, #12]
 8006a98:	f7ff fabb 	bl	8006012 <SWAPBYTE>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	3301      	adds	r3, #1
 8006aae:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f7ff faae 	bl	8006012 <SWAPBYTE>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	461a      	mov	r2, r3
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f7ff faa1 	bl	8006012 <SWAPBYTE>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	80da      	strh	r2, [r3, #6]
}
 8006ad8:	bf00      	nop
 8006ada:	3710      	adds	r7, #16
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b082      	sub	sp, #8
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006aea:	2180      	movs	r1, #128	; 0x80
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 fc01 	bl	80072f4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006af2:	2100      	movs	r1, #0
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 fbfd 	bl	80072f4 <USBD_LL_StallEP>
}
 8006afa:	bf00      	nop
 8006afc:	3708      	adds	r7, #8
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b086      	sub	sp, #24
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	60f8      	str	r0, [r7, #12]
 8006b0a:	60b9      	str	r1, [r7, #8]
 8006b0c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d036      	beq.n	8006b86 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006b1c:	6938      	ldr	r0, [r7, #16]
 8006b1e:	f000 f836 	bl	8006b8e <USBD_GetLen>
 8006b22:	4603      	mov	r3, r0
 8006b24:	3301      	adds	r3, #1
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	005b      	lsls	r3, r3, #1
 8006b2a:	b29a      	uxth	r2, r3
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006b30:	7dfb      	ldrb	r3, [r7, #23]
 8006b32:	68ba      	ldr	r2, [r7, #8]
 8006b34:	4413      	add	r3, r2
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	7812      	ldrb	r2, [r2, #0]
 8006b3a:	701a      	strb	r2, [r3, #0]
  idx++;
 8006b3c:	7dfb      	ldrb	r3, [r7, #23]
 8006b3e:	3301      	adds	r3, #1
 8006b40:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006b42:	7dfb      	ldrb	r3, [r7, #23]
 8006b44:	68ba      	ldr	r2, [r7, #8]
 8006b46:	4413      	add	r3, r2
 8006b48:	2203      	movs	r2, #3
 8006b4a:	701a      	strb	r2, [r3, #0]
  idx++;
 8006b4c:	7dfb      	ldrb	r3, [r7, #23]
 8006b4e:	3301      	adds	r3, #1
 8006b50:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006b52:	e013      	b.n	8006b7c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006b54:	7dfb      	ldrb	r3, [r7, #23]
 8006b56:	68ba      	ldr	r2, [r7, #8]
 8006b58:	4413      	add	r3, r2
 8006b5a:	693a      	ldr	r2, [r7, #16]
 8006b5c:	7812      	ldrb	r2, [r2, #0]
 8006b5e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	3301      	adds	r3, #1
 8006b64:	613b      	str	r3, [r7, #16]
    idx++;
 8006b66:	7dfb      	ldrb	r3, [r7, #23]
 8006b68:	3301      	adds	r3, #1
 8006b6a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006b6c:	7dfb      	ldrb	r3, [r7, #23]
 8006b6e:	68ba      	ldr	r2, [r7, #8]
 8006b70:	4413      	add	r3, r2
 8006b72:	2200      	movs	r2, #0
 8006b74:	701a      	strb	r2, [r3, #0]
    idx++;
 8006b76:	7dfb      	ldrb	r3, [r7, #23]
 8006b78:	3301      	adds	r3, #1
 8006b7a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1e7      	bne.n	8006b54 <USBD_GetString+0x52>
 8006b84:	e000      	b.n	8006b88 <USBD_GetString+0x86>
    return;
 8006b86:	bf00      	nop
  }
}
 8006b88:	3718      	adds	r7, #24
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006b8e:	b480      	push	{r7}
 8006b90:	b085      	sub	sp, #20
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006b96:	2300      	movs	r3, #0
 8006b98:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006b9e:	e005      	b.n	8006bac <USBD_GetLen+0x1e>
  {
    len++;
 8006ba0:	7bfb      	ldrb	r3, [r7, #15]
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	3301      	adds	r3, #1
 8006baa:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d1f5      	bne.n	8006ba0 <USBD_GetLen+0x12>
  }

  return len;
 8006bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3714      	adds	r7, #20
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr

08006bc2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b084      	sub	sp, #16
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	60f8      	str	r0, [r7, #12]
 8006bca:	60b9      	str	r1, [r7, #8]
 8006bcc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2202      	movs	r2, #2
 8006bd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	68ba      	ldr	r2, [r7, #8]
 8006be6:	2100      	movs	r1, #0
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f000 fc0c 	bl	8007406 <USBD_LL_Transmit>

  return USBD_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3710      	adds	r7, #16
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	68ba      	ldr	r2, [r7, #8]
 8006c08:	2100      	movs	r1, #0
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f000 fbfb 	bl	8007406 <USBD_LL_Transmit>

  return USBD_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3710      	adds	r7, #16
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}

08006c1a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006c1a:	b580      	push	{r7, lr}
 8006c1c:	b084      	sub	sp, #16
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	60f8      	str	r0, [r7, #12]
 8006c22:	60b9      	str	r1, [r7, #8]
 8006c24:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	68ba      	ldr	r2, [r7, #8]
 8006c2a:	2100      	movs	r1, #0
 8006c2c:	68f8      	ldr	r0, [r7, #12]
 8006c2e:	f000 fc0b 	bl	8007448 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3710      	adds	r7, #16
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2204      	movs	r2, #4
 8006c48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	2200      	movs	r2, #0
 8006c50:	2100      	movs	r1, #0
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 fbd7 	bl	8007406 <USBD_LL_Transmit>

  return USBD_OK;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3708      	adds	r7, #8
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b082      	sub	sp, #8
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2205      	movs	r2, #5
 8006c6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c72:	2300      	movs	r3, #0
 8006c74:	2200      	movs	r2, #0
 8006c76:	2100      	movs	r1, #0
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 fbe5 	bl	8007448 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3708      	adds	r7, #8
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	490e      	ldr	r1, [pc, #56]	; (8006cc8 <MX_USB_DEVICE_Init+0x40>)
 8006c90:	480e      	ldr	r0, [pc, #56]	; (8006ccc <MX_USB_DEVICE_Init+0x44>)
 8006c92:	f7fe fead 	bl	80059f0 <USBD_Init>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d001      	beq.n	8006ca0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006c9c:	f7fa fce4 	bl	8001668 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006ca0:	490b      	ldr	r1, [pc, #44]	; (8006cd0 <MX_USB_DEVICE_Init+0x48>)
 8006ca2:	480a      	ldr	r0, [pc, #40]	; (8006ccc <MX_USB_DEVICE_Init+0x44>)
 8006ca4:	f7fe fed4 	bl	8005a50 <USBD_RegisterClass>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d001      	beq.n	8006cb2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006cae:	f7fa fcdb 	bl	8001668 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006cb2:	4806      	ldr	r0, [pc, #24]	; (8006ccc <MX_USB_DEVICE_Init+0x44>)
 8006cb4:	f7fe fef3 	bl	8005a9e <USBD_Start>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d001      	beq.n	8006cc2 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8006cbe:	f7fa fcd3 	bl	8001668 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006cc2:	bf00      	nop
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	20000114 	.word	0x20000114
 8006ccc:	200001e0 	.word	0x200001e0
 8006cd0:	2000000c 	.word	0x2000000c

08006cd4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	4603      	mov	r3, r0
 8006cdc:	6039      	str	r1, [r7, #0]
 8006cde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	2212      	movs	r2, #18
 8006ce4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006ce6:	4b03      	ldr	r3, [pc, #12]	; (8006cf4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr
 8006cf4:	20000130 	.word	0x20000130

08006cf8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	4603      	mov	r3, r0
 8006d00:	6039      	str	r1, [r7, #0]
 8006d02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	2204      	movs	r2, #4
 8006d08:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006d0a:	4b03      	ldr	r3, [pc, #12]	; (8006d18 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr
 8006d18:	20000144 	.word	0x20000144

08006d1c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	4603      	mov	r3, r0
 8006d24:	6039      	str	r1, [r7, #0]
 8006d26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006d28:	79fb      	ldrb	r3, [r7, #7]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d105      	bne.n	8006d3a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006d2e:	683a      	ldr	r2, [r7, #0]
 8006d30:	4907      	ldr	r1, [pc, #28]	; (8006d50 <USBD_FS_ProductStrDescriptor+0x34>)
 8006d32:	4808      	ldr	r0, [pc, #32]	; (8006d54 <USBD_FS_ProductStrDescriptor+0x38>)
 8006d34:	f7ff fee5 	bl	8006b02 <USBD_GetString>
 8006d38:	e004      	b.n	8006d44 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006d3a:	683a      	ldr	r2, [r7, #0]
 8006d3c:	4904      	ldr	r1, [pc, #16]	; (8006d50 <USBD_FS_ProductStrDescriptor+0x34>)
 8006d3e:	4805      	ldr	r0, [pc, #20]	; (8006d54 <USBD_FS_ProductStrDescriptor+0x38>)
 8006d40:	f7ff fedf 	bl	8006b02 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006d44:	4b02      	ldr	r3, [pc, #8]	; (8006d50 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3708      	adds	r7, #8
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	200004b0 	.word	0x200004b0
 8006d54:	080080dc 	.word	0x080080dc

08006d58 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	4603      	mov	r3, r0
 8006d60:	6039      	str	r1, [r7, #0]
 8006d62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006d64:	683a      	ldr	r2, [r7, #0]
 8006d66:	4904      	ldr	r1, [pc, #16]	; (8006d78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006d68:	4804      	ldr	r0, [pc, #16]	; (8006d7c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006d6a:	f7ff feca 	bl	8006b02 <USBD_GetString>
  return USBD_StrDesc;
 8006d6e:	4b02      	ldr	r3, [pc, #8]	; (8006d78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3708      	adds	r7, #8
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	200004b0 	.word	0x200004b0
 8006d7c:	080080f4 	.word	0x080080f4

08006d80 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	4603      	mov	r3, r0
 8006d88:	6039      	str	r1, [r7, #0]
 8006d8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	221a      	movs	r2, #26
 8006d90:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006d92:	f000 f843 	bl	8006e1c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006d96:	4b02      	ldr	r3, [pc, #8]	; (8006da0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3708      	adds	r7, #8
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}
 8006da0:	20000148 	.word	0x20000148

08006da4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	4603      	mov	r3, r0
 8006dac:	6039      	str	r1, [r7, #0]
 8006dae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006db0:	79fb      	ldrb	r3, [r7, #7]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d105      	bne.n	8006dc2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006db6:	683a      	ldr	r2, [r7, #0]
 8006db8:	4907      	ldr	r1, [pc, #28]	; (8006dd8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006dba:	4808      	ldr	r0, [pc, #32]	; (8006ddc <USBD_FS_ConfigStrDescriptor+0x38>)
 8006dbc:	f7ff fea1 	bl	8006b02 <USBD_GetString>
 8006dc0:	e004      	b.n	8006dcc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006dc2:	683a      	ldr	r2, [r7, #0]
 8006dc4:	4904      	ldr	r1, [pc, #16]	; (8006dd8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006dc6:	4805      	ldr	r0, [pc, #20]	; (8006ddc <USBD_FS_ConfigStrDescriptor+0x38>)
 8006dc8:	f7ff fe9b 	bl	8006b02 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006dcc:	4b02      	ldr	r3, [pc, #8]	; (8006dd8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3708      	adds	r7, #8
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	200004b0 	.word	0x200004b0
 8006ddc:	08008108 	.word	0x08008108

08006de0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	4603      	mov	r3, r0
 8006de8:	6039      	str	r1, [r7, #0]
 8006dea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006dec:	79fb      	ldrb	r3, [r7, #7]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d105      	bne.n	8006dfe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006df2:	683a      	ldr	r2, [r7, #0]
 8006df4:	4907      	ldr	r1, [pc, #28]	; (8006e14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006df6:	4808      	ldr	r0, [pc, #32]	; (8006e18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006df8:	f7ff fe83 	bl	8006b02 <USBD_GetString>
 8006dfc:	e004      	b.n	8006e08 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006dfe:	683a      	ldr	r2, [r7, #0]
 8006e00:	4904      	ldr	r1, [pc, #16]	; (8006e14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006e02:	4805      	ldr	r0, [pc, #20]	; (8006e18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006e04:	f7ff fe7d 	bl	8006b02 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e08:	4b02      	ldr	r3, [pc, #8]	; (8006e14 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3708      	adds	r7, #8
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	200004b0 	.word	0x200004b0
 8006e18:	08008114 	.word	0x08008114

08006e1c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006e22:	4b0f      	ldr	r3, [pc, #60]	; (8006e60 <Get_SerialNum+0x44>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006e28:	4b0e      	ldr	r3, [pc, #56]	; (8006e64 <Get_SerialNum+0x48>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006e2e:	4b0e      	ldr	r3, [pc, #56]	; (8006e68 <Get_SerialNum+0x4c>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006e34:	68fa      	ldr	r2, [r7, #12]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4413      	add	r3, r2
 8006e3a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d009      	beq.n	8006e56 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006e42:	2208      	movs	r2, #8
 8006e44:	4909      	ldr	r1, [pc, #36]	; (8006e6c <Get_SerialNum+0x50>)
 8006e46:	68f8      	ldr	r0, [r7, #12]
 8006e48:	f000 f814 	bl	8006e74 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006e4c:	2204      	movs	r2, #4
 8006e4e:	4908      	ldr	r1, [pc, #32]	; (8006e70 <Get_SerialNum+0x54>)
 8006e50:	68b8      	ldr	r0, [r7, #8]
 8006e52:	f000 f80f 	bl	8006e74 <IntToUnicode>
  }
}
 8006e56:	bf00      	nop
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	1fff7a10 	.word	0x1fff7a10
 8006e64:	1fff7a14 	.word	0x1fff7a14
 8006e68:	1fff7a18 	.word	0x1fff7a18
 8006e6c:	2000014a 	.word	0x2000014a
 8006e70:	2000015a 	.word	0x2000015a

08006e74 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b087      	sub	sp, #28
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	4613      	mov	r3, r2
 8006e80:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006e82:	2300      	movs	r3, #0
 8006e84:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006e86:	2300      	movs	r3, #0
 8006e88:	75fb      	strb	r3, [r7, #23]
 8006e8a:	e027      	b.n	8006edc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	0f1b      	lsrs	r3, r3, #28
 8006e90:	2b09      	cmp	r3, #9
 8006e92:	d80b      	bhi.n	8006eac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	0f1b      	lsrs	r3, r3, #28
 8006e98:	b2da      	uxtb	r2, r3
 8006e9a:	7dfb      	ldrb	r3, [r7, #23]
 8006e9c:	005b      	lsls	r3, r3, #1
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	440b      	add	r3, r1
 8006ea4:	3230      	adds	r2, #48	; 0x30
 8006ea6:	b2d2      	uxtb	r2, r2
 8006ea8:	701a      	strb	r2, [r3, #0]
 8006eaa:	e00a      	b.n	8006ec2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	0f1b      	lsrs	r3, r3, #28
 8006eb0:	b2da      	uxtb	r2, r3
 8006eb2:	7dfb      	ldrb	r3, [r7, #23]
 8006eb4:	005b      	lsls	r3, r3, #1
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	440b      	add	r3, r1
 8006ebc:	3237      	adds	r2, #55	; 0x37
 8006ebe:	b2d2      	uxtb	r2, r2
 8006ec0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	011b      	lsls	r3, r3, #4
 8006ec6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006ec8:	7dfb      	ldrb	r3, [r7, #23]
 8006eca:	005b      	lsls	r3, r3, #1
 8006ecc:	3301      	adds	r3, #1
 8006ece:	68ba      	ldr	r2, [r7, #8]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006ed6:	7dfb      	ldrb	r3, [r7, #23]
 8006ed8:	3301      	adds	r3, #1
 8006eda:	75fb      	strb	r3, [r7, #23]
 8006edc:	7dfa      	ldrb	r2, [r7, #23]
 8006ede:	79fb      	ldrb	r3, [r7, #7]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d3d3      	bcc.n	8006e8c <IntToUnicode+0x18>
  }
}
 8006ee4:	bf00      	nop
 8006ee6:	bf00      	nop
 8006ee8:	371c      	adds	r7, #28
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
	...

08006ef4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b08a      	sub	sp, #40	; 0x28
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006efc:	f107 0314 	add.w	r3, r7, #20
 8006f00:	2200      	movs	r2, #0
 8006f02:	601a      	str	r2, [r3, #0]
 8006f04:	605a      	str	r2, [r3, #4]
 8006f06:	609a      	str	r2, [r3, #8]
 8006f08:	60da      	str	r2, [r3, #12]
 8006f0a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f14:	d147      	bne.n	8006fa6 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f16:	2300      	movs	r3, #0
 8006f18:	613b      	str	r3, [r7, #16]
 8006f1a:	4b25      	ldr	r3, [pc, #148]	; (8006fb0 <HAL_PCD_MspInit+0xbc>)
 8006f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f1e:	4a24      	ldr	r2, [pc, #144]	; (8006fb0 <HAL_PCD_MspInit+0xbc>)
 8006f20:	f043 0301 	orr.w	r3, r3, #1
 8006f24:	6313      	str	r3, [r2, #48]	; 0x30
 8006f26:	4b22      	ldr	r3, [pc, #136]	; (8006fb0 <HAL_PCD_MspInit+0xbc>)
 8006f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f2a:	f003 0301 	and.w	r3, r3, #1
 8006f2e:	613b      	str	r3, [r7, #16]
 8006f30:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8006f32:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8006f36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f38:	2302      	movs	r3, #2
 8006f3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f40:	2303      	movs	r3, #3
 8006f42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006f44:	230a      	movs	r3, #10
 8006f46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f48:	f107 0314 	add.w	r3, r7, #20
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	4819      	ldr	r0, [pc, #100]	; (8006fb4 <HAL_PCD_MspInit+0xc0>)
 8006f50:	f7fa fe18 	bl	8001b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8006f54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8006f62:	f107 0314 	add.w	r3, r7, #20
 8006f66:	4619      	mov	r1, r3
 8006f68:	4812      	ldr	r0, [pc, #72]	; (8006fb4 <HAL_PCD_MspInit+0xc0>)
 8006f6a:	f7fa fe0b 	bl	8001b84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006f6e:	4b10      	ldr	r3, [pc, #64]	; (8006fb0 <HAL_PCD_MspInit+0xbc>)
 8006f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f72:	4a0f      	ldr	r2, [pc, #60]	; (8006fb0 <HAL_PCD_MspInit+0xbc>)
 8006f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f78:	6353      	str	r3, [r2, #52]	; 0x34
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	60fb      	str	r3, [r7, #12]
 8006f7e:	4b0c      	ldr	r3, [pc, #48]	; (8006fb0 <HAL_PCD_MspInit+0xbc>)
 8006f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f82:	4a0b      	ldr	r2, [pc, #44]	; (8006fb0 <HAL_PCD_MspInit+0xbc>)
 8006f84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f88:	6453      	str	r3, [r2, #68]	; 0x44
 8006f8a:	4b09      	ldr	r3, [pc, #36]	; (8006fb0 <HAL_PCD_MspInit+0xbc>)
 8006f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f92:	60fb      	str	r3, [r7, #12]
 8006f94:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006f96:	2200      	movs	r2, #0
 8006f98:	2100      	movs	r1, #0
 8006f9a:	2043      	movs	r0, #67	; 0x43
 8006f9c:	f7fa fdbb 	bl	8001b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006fa0:	2043      	movs	r0, #67	; 0x43
 8006fa2:	f7fa fdd4 	bl	8001b4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006fa6:	bf00      	nop
 8006fa8:	3728      	adds	r7, #40	; 0x28
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	40023800 	.word	0x40023800
 8006fb4:	40020000 	.word	0x40020000

08006fb8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006fcc:	4619      	mov	r1, r3
 8006fce:	4610      	mov	r0, r2
 8006fd0:	f7fe fdb0 	bl	8005b34 <USBD_LL_SetupStage>
}
 8006fd4:	bf00      	nop
 8006fd6:	3708      	adds	r7, #8
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006fee:	78fa      	ldrb	r2, [r7, #3]
 8006ff0:	6879      	ldr	r1, [r7, #4]
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	00db      	lsls	r3, r3, #3
 8006ff6:	1a9b      	subs	r3, r3, r2
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	440b      	add	r3, r1
 8006ffc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	78fb      	ldrb	r3, [r7, #3]
 8007004:	4619      	mov	r1, r3
 8007006:	f7fe fdea 	bl	8005bde <USBD_LL_DataOutStage>
}
 800700a:	bf00      	nop
 800700c:	3708      	adds	r7, #8
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007012:	b580      	push	{r7, lr}
 8007014:	b082      	sub	sp, #8
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
 800701a:	460b      	mov	r3, r1
 800701c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007024:	78fa      	ldrb	r2, [r7, #3]
 8007026:	6879      	ldr	r1, [r7, #4]
 8007028:	4613      	mov	r3, r2
 800702a:	00db      	lsls	r3, r3, #3
 800702c:	1a9b      	subs	r3, r3, r2
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	440b      	add	r3, r1
 8007032:	3348      	adds	r3, #72	; 0x48
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	78fb      	ldrb	r3, [r7, #3]
 8007038:	4619      	mov	r1, r3
 800703a:	f7fe fe33 	bl	8005ca4 <USBD_LL_DataInStage>
}
 800703e:	bf00      	nop
 8007040:	3708      	adds	r7, #8
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007046:	b580      	push	{r7, lr}
 8007048:	b082      	sub	sp, #8
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007054:	4618      	mov	r0, r3
 8007056:	f7fe ff47 	bl	8005ee8 <USBD_LL_SOF>
}
 800705a:	bf00      	nop
 800705c:	3708      	adds	r7, #8
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007062:	b580      	push	{r7, lr}
 8007064:	b084      	sub	sp, #16
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800706a:	2301      	movs	r3, #1
 800706c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d102      	bne.n	800707c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007076:	2300      	movs	r3, #0
 8007078:	73fb      	strb	r3, [r7, #15]
 800707a:	e008      	b.n	800708e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	2b02      	cmp	r3, #2
 8007082:	d102      	bne.n	800708a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007084:	2301      	movs	r3, #1
 8007086:	73fb      	strb	r3, [r7, #15]
 8007088:	e001      	b.n	800708e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800708a:	f7fa faed 	bl	8001668 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007094:	7bfa      	ldrb	r2, [r7, #15]
 8007096:	4611      	mov	r1, r2
 8007098:	4618      	mov	r0, r3
 800709a:	f7fe fee7 	bl	8005e6c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80070a4:	4618      	mov	r0, r3
 80070a6:	f7fe fe93 	bl	8005dd0 <USBD_LL_Reset>
}
 80070aa:	bf00      	nop
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
	...

080070b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b082      	sub	sp, #8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7fe fee2 	bl	8005e8c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	6812      	ldr	r2, [r2, #0]
 80070d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80070da:	f043 0301 	orr.w	r3, r3, #1
 80070de:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a1b      	ldr	r3, [r3, #32]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d005      	beq.n	80070f4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80070e8:	4b04      	ldr	r3, [pc, #16]	; (80070fc <HAL_PCD_SuspendCallback+0x48>)
 80070ea:	691b      	ldr	r3, [r3, #16]
 80070ec:	4a03      	ldr	r2, [pc, #12]	; (80070fc <HAL_PCD_SuspendCallback+0x48>)
 80070ee:	f043 0306 	orr.w	r3, r3, #6
 80070f2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80070f4:	bf00      	nop
 80070f6:	3708      	adds	r7, #8
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	e000ed00 	.word	0xe000ed00

08007100 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800710e:	4618      	mov	r0, r3
 8007110:	f7fe fed2 	bl	8005eb8 <USBD_LL_Resume>
}
 8007114:	bf00      	nop
 8007116:	3708      	adds	r7, #8
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	460b      	mov	r3, r1
 8007126:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800712e:	78fa      	ldrb	r2, [r7, #3]
 8007130:	4611      	mov	r1, r2
 8007132:	4618      	mov	r0, r3
 8007134:	f7fe ff20 	bl	8005f78 <USBD_LL_IsoOUTIncomplete>
}
 8007138:	bf00      	nop
 800713a:	3708      	adds	r7, #8
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	460b      	mov	r3, r1
 800714a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007152:	78fa      	ldrb	r2, [r7, #3]
 8007154:	4611      	mov	r1, r2
 8007156:	4618      	mov	r0, r3
 8007158:	f7fe fee8 	bl	8005f2c <USBD_LL_IsoINIncomplete>
}
 800715c:	bf00      	nop
 800715e:	3708      	adds	r7, #8
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007172:	4618      	mov	r0, r3
 8007174:	f7fe ff26 	bl	8005fc4 <USBD_LL_DevConnected>
}
 8007178:	bf00      	nop
 800717a:	3708      	adds	r7, #8
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800718e:	4618      	mov	r0, r3
 8007190:	f7fe ff23 	bl	8005fda <USBD_LL_DevDisconnected>
}
 8007194:	bf00      	nop
 8007196:	3708      	adds	r7, #8
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d13c      	bne.n	8007226 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80071ac:	4a20      	ldr	r2, [pc, #128]	; (8007230 <USBD_LL_Init+0x94>)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	4a1e      	ldr	r2, [pc, #120]	; (8007230 <USBD_LL_Init+0x94>)
 80071b8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80071bc:	4b1c      	ldr	r3, [pc, #112]	; (8007230 <USBD_LL_Init+0x94>)
 80071be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80071c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80071c4:	4b1a      	ldr	r3, [pc, #104]	; (8007230 <USBD_LL_Init+0x94>)
 80071c6:	2204      	movs	r2, #4
 80071c8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80071ca:	4b19      	ldr	r3, [pc, #100]	; (8007230 <USBD_LL_Init+0x94>)
 80071cc:	2202      	movs	r2, #2
 80071ce:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80071d0:	4b17      	ldr	r3, [pc, #92]	; (8007230 <USBD_LL_Init+0x94>)
 80071d2:	2200      	movs	r2, #0
 80071d4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80071d6:	4b16      	ldr	r3, [pc, #88]	; (8007230 <USBD_LL_Init+0x94>)
 80071d8:	2202      	movs	r2, #2
 80071da:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80071dc:	4b14      	ldr	r3, [pc, #80]	; (8007230 <USBD_LL_Init+0x94>)
 80071de:	2201      	movs	r2, #1
 80071e0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80071e2:	4b13      	ldr	r3, [pc, #76]	; (8007230 <USBD_LL_Init+0x94>)
 80071e4:	2200      	movs	r2, #0
 80071e6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80071e8:	4b11      	ldr	r3, [pc, #68]	; (8007230 <USBD_LL_Init+0x94>)
 80071ea:	2200      	movs	r2, #0
 80071ec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80071ee:	4b10      	ldr	r3, [pc, #64]	; (8007230 <USBD_LL_Init+0x94>)
 80071f0:	2201      	movs	r2, #1
 80071f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80071f4:	4b0e      	ldr	r3, [pc, #56]	; (8007230 <USBD_LL_Init+0x94>)
 80071f6:	2200      	movs	r2, #0
 80071f8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80071fa:	480d      	ldr	r0, [pc, #52]	; (8007230 <USBD_LL_Init+0x94>)
 80071fc:	f7fa fe9f 	bl	8001f3e <HAL_PCD_Init>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d001      	beq.n	800720a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007206:	f7fa fa2f 	bl	8001668 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800720a:	2180      	movs	r1, #128	; 0x80
 800720c:	4808      	ldr	r0, [pc, #32]	; (8007230 <USBD_LL_Init+0x94>)
 800720e:	f7fb ffe4 	bl	80031da <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007212:	2240      	movs	r2, #64	; 0x40
 8007214:	2100      	movs	r1, #0
 8007216:	4806      	ldr	r0, [pc, #24]	; (8007230 <USBD_LL_Init+0x94>)
 8007218:	f7fb ff98 	bl	800314c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800721c:	2280      	movs	r2, #128	; 0x80
 800721e:	2101      	movs	r1, #1
 8007220:	4803      	ldr	r0, [pc, #12]	; (8007230 <USBD_LL_Init+0x94>)
 8007222:	f7fb ff93 	bl	800314c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3708      	adds	r7, #8
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}
 8007230:	200006b0 	.word	0x200006b0

08007234 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800723c:	2300      	movs	r3, #0
 800723e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007240:	2300      	movs	r3, #0
 8007242:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800724a:	4618      	mov	r0, r3
 800724c:	f7fa ff94 	bl	8002178 <HAL_PCD_Start>
 8007250:	4603      	mov	r3, r0
 8007252:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007254:	7bfb      	ldrb	r3, [r7, #15]
 8007256:	4618      	mov	r0, r3
 8007258:	f000 f930 	bl	80074bc <USBD_Get_USB_Status>
 800725c:	4603      	mov	r3, r0
 800725e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007260:	7bbb      	ldrb	r3, [r7, #14]
}
 8007262:	4618      	mov	r0, r3
 8007264:	3710      	adds	r7, #16
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800726a:	b580      	push	{r7, lr}
 800726c:	b084      	sub	sp, #16
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
 8007272:	4608      	mov	r0, r1
 8007274:	4611      	mov	r1, r2
 8007276:	461a      	mov	r2, r3
 8007278:	4603      	mov	r3, r0
 800727a:	70fb      	strb	r3, [r7, #3]
 800727c:	460b      	mov	r3, r1
 800727e:	70bb      	strb	r3, [r7, #2]
 8007280:	4613      	mov	r3, r2
 8007282:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007284:	2300      	movs	r3, #0
 8007286:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007288:	2300      	movs	r3, #0
 800728a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007292:	78bb      	ldrb	r3, [r7, #2]
 8007294:	883a      	ldrh	r2, [r7, #0]
 8007296:	78f9      	ldrb	r1, [r7, #3]
 8007298:	f7fb fb78 	bl	800298c <HAL_PCD_EP_Open>
 800729c:	4603      	mov	r3, r0
 800729e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072a0:	7bfb      	ldrb	r3, [r7, #15]
 80072a2:	4618      	mov	r0, r3
 80072a4:	f000 f90a 	bl	80074bc <USBD_Get_USB_Status>
 80072a8:	4603      	mov	r3, r0
 80072aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3710      	adds	r7, #16
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b084      	sub	sp, #16
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
 80072be:	460b      	mov	r3, r1
 80072c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072c2:	2300      	movs	r3, #0
 80072c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072c6:	2300      	movs	r3, #0
 80072c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80072d0:	78fa      	ldrb	r2, [r7, #3]
 80072d2:	4611      	mov	r1, r2
 80072d4:	4618      	mov	r0, r3
 80072d6:	f7fb fbc1 	bl	8002a5c <HAL_PCD_EP_Close>
 80072da:	4603      	mov	r3, r0
 80072dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072de:	7bfb      	ldrb	r3, [r7, #15]
 80072e0:	4618      	mov	r0, r3
 80072e2:	f000 f8eb 	bl	80074bc <USBD_Get_USB_Status>
 80072e6:	4603      	mov	r3, r0
 80072e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3710      	adds	r7, #16
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	460b      	mov	r3, r1
 80072fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007300:	2300      	movs	r3, #0
 8007302:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007304:	2300      	movs	r3, #0
 8007306:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800730e:	78fa      	ldrb	r2, [r7, #3]
 8007310:	4611      	mov	r1, r2
 8007312:	4618      	mov	r0, r3
 8007314:	f7fb fc81 	bl	8002c1a <HAL_PCD_EP_SetStall>
 8007318:	4603      	mov	r3, r0
 800731a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800731c:	7bfb      	ldrb	r3, [r7, #15]
 800731e:	4618      	mov	r0, r3
 8007320:	f000 f8cc 	bl	80074bc <USBD_Get_USB_Status>
 8007324:	4603      	mov	r3, r0
 8007326:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007328:	7bbb      	ldrb	r3, [r7, #14]
}
 800732a:	4618      	mov	r0, r3
 800732c:	3710      	adds	r7, #16
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007332:	b580      	push	{r7, lr}
 8007334:	b084      	sub	sp, #16
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
 800733a:	460b      	mov	r3, r1
 800733c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800733e:	2300      	movs	r3, #0
 8007340:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007342:	2300      	movs	r3, #0
 8007344:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800734c:	78fa      	ldrb	r2, [r7, #3]
 800734e:	4611      	mov	r1, r2
 8007350:	4618      	mov	r0, r3
 8007352:	f7fb fcc6 	bl	8002ce2 <HAL_PCD_EP_ClrStall>
 8007356:	4603      	mov	r3, r0
 8007358:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800735a:	7bfb      	ldrb	r3, [r7, #15]
 800735c:	4618      	mov	r0, r3
 800735e:	f000 f8ad 	bl	80074bc <USBD_Get_USB_Status>
 8007362:	4603      	mov	r3, r0
 8007364:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007366:	7bbb      	ldrb	r3, [r7, #14]
}
 8007368:	4618      	mov	r0, r3
 800736a:	3710      	adds	r7, #16
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	460b      	mov	r3, r1
 800737a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007382:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007384:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007388:	2b00      	cmp	r3, #0
 800738a:	da0b      	bge.n	80073a4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800738c:	78fb      	ldrb	r3, [r7, #3]
 800738e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007392:	68f9      	ldr	r1, [r7, #12]
 8007394:	4613      	mov	r3, r2
 8007396:	00db      	lsls	r3, r3, #3
 8007398:	1a9b      	subs	r3, r3, r2
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	440b      	add	r3, r1
 800739e:	333e      	adds	r3, #62	; 0x3e
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	e00b      	b.n	80073bc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80073a4:	78fb      	ldrb	r3, [r7, #3]
 80073a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80073aa:	68f9      	ldr	r1, [r7, #12]
 80073ac:	4613      	mov	r3, r2
 80073ae:	00db      	lsls	r3, r3, #3
 80073b0:	1a9b      	subs	r3, r3, r2
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	440b      	add	r3, r1
 80073b6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80073ba:	781b      	ldrb	r3, [r3, #0]
  }
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3714      	adds	r7, #20
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	460b      	mov	r3, r1
 80073d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073d4:	2300      	movs	r3, #0
 80073d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073d8:	2300      	movs	r3, #0
 80073da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80073e2:	78fa      	ldrb	r2, [r7, #3]
 80073e4:	4611      	mov	r1, r2
 80073e6:	4618      	mov	r0, r3
 80073e8:	f7fb faab 	bl	8002942 <HAL_PCD_SetAddress>
 80073ec:	4603      	mov	r3, r0
 80073ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073f0:	7bfb      	ldrb	r3, [r7, #15]
 80073f2:	4618      	mov	r0, r3
 80073f4:	f000 f862 	bl	80074bc <USBD_Get_USB_Status>
 80073f8:	4603      	mov	r3, r0
 80073fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3710      	adds	r7, #16
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007406:	b580      	push	{r7, lr}
 8007408:	b086      	sub	sp, #24
 800740a:	af00      	add	r7, sp, #0
 800740c:	60f8      	str	r0, [r7, #12]
 800740e:	607a      	str	r2, [r7, #4]
 8007410:	603b      	str	r3, [r7, #0]
 8007412:	460b      	mov	r3, r1
 8007414:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007416:	2300      	movs	r3, #0
 8007418:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800741a:	2300      	movs	r3, #0
 800741c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007424:	7af9      	ldrb	r1, [r7, #11]
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	f7fb fbac 	bl	8002b86 <HAL_PCD_EP_Transmit>
 800742e:	4603      	mov	r3, r0
 8007430:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007432:	7dfb      	ldrb	r3, [r7, #23]
 8007434:	4618      	mov	r0, r3
 8007436:	f000 f841 	bl	80074bc <USBD_Get_USB_Status>
 800743a:	4603      	mov	r3, r0
 800743c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800743e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007440:	4618      	mov	r0, r3
 8007442:	3718      	adds	r7, #24
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b086      	sub	sp, #24
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	607a      	str	r2, [r7, #4]
 8007452:	603b      	str	r3, [r7, #0]
 8007454:	460b      	mov	r3, r1
 8007456:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007458:	2300      	movs	r3, #0
 800745a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800745c:	2300      	movs	r3, #0
 800745e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007466:	7af9      	ldrb	r1, [r7, #11]
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	f7fb fb40 	bl	8002af0 <HAL_PCD_EP_Receive>
 8007470:	4603      	mov	r3, r0
 8007472:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007474:	7dfb      	ldrb	r3, [r7, #23]
 8007476:	4618      	mov	r0, r3
 8007478:	f000 f820 	bl	80074bc <USBD_Get_USB_Status>
 800747c:	4603      	mov	r3, r0
 800747e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007480:	7dbb      	ldrb	r3, [r7, #22]
}
 8007482:	4618      	mov	r0, r3
 8007484:	3718      	adds	r7, #24
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
	...

0800748c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007494:	4b03      	ldr	r3, [pc, #12]	; (80074a4 <USBD_static_malloc+0x18>)
}
 8007496:	4618      	mov	r0, r3
 8007498:	370c      	adds	r7, #12
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr
 80074a2:	bf00      	nop
 80074a4:	20000184 	.word	0x20000184

080074a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]

}
 80074b0:	bf00      	nop
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80074bc:	b480      	push	{r7}
 80074be:	b085      	sub	sp, #20
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	4603      	mov	r3, r0
 80074c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074c6:	2300      	movs	r3, #0
 80074c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80074ca:	79fb      	ldrb	r3, [r7, #7]
 80074cc:	2b03      	cmp	r3, #3
 80074ce:	d817      	bhi.n	8007500 <USBD_Get_USB_Status+0x44>
 80074d0:	a201      	add	r2, pc, #4	; (adr r2, 80074d8 <USBD_Get_USB_Status+0x1c>)
 80074d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d6:	bf00      	nop
 80074d8:	080074e9 	.word	0x080074e9
 80074dc:	080074ef 	.word	0x080074ef
 80074e0:	080074f5 	.word	0x080074f5
 80074e4:	080074fb 	.word	0x080074fb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80074e8:	2300      	movs	r3, #0
 80074ea:	73fb      	strb	r3, [r7, #15]
    break;
 80074ec:	e00b      	b.n	8007506 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80074ee:	2303      	movs	r3, #3
 80074f0:	73fb      	strb	r3, [r7, #15]
    break;
 80074f2:	e008      	b.n	8007506 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80074f4:	2301      	movs	r3, #1
 80074f6:	73fb      	strb	r3, [r7, #15]
    break;
 80074f8:	e005      	b.n	8007506 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80074fa:	2303      	movs	r3, #3
 80074fc:	73fb      	strb	r3, [r7, #15]
    break;
 80074fe:	e002      	b.n	8007506 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007500:	2303      	movs	r3, #3
 8007502:	73fb      	strb	r3, [r7, #15]
    break;
 8007504:	bf00      	nop
  }
  return usb_status;
 8007506:	7bfb      	ldrb	r3, [r7, #15]
}
 8007508:	4618      	mov	r0, r3
 800750a:	3714      	adds	r7, #20
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <__libc_init_array>:
 8007514:	b570      	push	{r4, r5, r6, lr}
 8007516:	4d0d      	ldr	r5, [pc, #52]	; (800754c <__libc_init_array+0x38>)
 8007518:	4c0d      	ldr	r4, [pc, #52]	; (8007550 <__libc_init_array+0x3c>)
 800751a:	1b64      	subs	r4, r4, r5
 800751c:	10a4      	asrs	r4, r4, #2
 800751e:	2600      	movs	r6, #0
 8007520:	42a6      	cmp	r6, r4
 8007522:	d109      	bne.n	8007538 <__libc_init_array+0x24>
 8007524:	4d0b      	ldr	r5, [pc, #44]	; (8007554 <__libc_init_array+0x40>)
 8007526:	4c0c      	ldr	r4, [pc, #48]	; (8007558 <__libc_init_array+0x44>)
 8007528:	f000 fdcc 	bl	80080c4 <_init>
 800752c:	1b64      	subs	r4, r4, r5
 800752e:	10a4      	asrs	r4, r4, #2
 8007530:	2600      	movs	r6, #0
 8007532:	42a6      	cmp	r6, r4
 8007534:	d105      	bne.n	8007542 <__libc_init_array+0x2e>
 8007536:	bd70      	pop	{r4, r5, r6, pc}
 8007538:	f855 3b04 	ldr.w	r3, [r5], #4
 800753c:	4798      	blx	r3
 800753e:	3601      	adds	r6, #1
 8007540:	e7ee      	b.n	8007520 <__libc_init_array+0xc>
 8007542:	f855 3b04 	ldr.w	r3, [r5], #4
 8007546:	4798      	blx	r3
 8007548:	3601      	adds	r6, #1
 800754a:	e7f2      	b.n	8007532 <__libc_init_array+0x1e>
 800754c:	08008514 	.word	0x08008514
 8007550:	08008514 	.word	0x08008514
 8007554:	08008514 	.word	0x08008514
 8007558:	08008518 	.word	0x08008518

0800755c <memset>:
 800755c:	4402      	add	r2, r0
 800755e:	4603      	mov	r3, r0
 8007560:	4293      	cmp	r3, r2
 8007562:	d100      	bne.n	8007566 <memset+0xa>
 8007564:	4770      	bx	lr
 8007566:	f803 1b01 	strb.w	r1, [r3], #1
 800756a:	e7f9      	b.n	8007560 <memset+0x4>

0800756c <cosf>:
 800756c:	ee10 3a10 	vmov	r3, s0
 8007570:	b507      	push	{r0, r1, r2, lr}
 8007572:	4a1c      	ldr	r2, [pc, #112]	; (80075e4 <cosf+0x78>)
 8007574:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007578:	4293      	cmp	r3, r2
 800757a:	dc04      	bgt.n	8007586 <cosf+0x1a>
 800757c:	eddf 0a1a 	vldr	s1, [pc, #104]	; 80075e8 <cosf+0x7c>
 8007580:	f000 f9b2 	bl	80078e8 <__kernel_cosf>
 8007584:	e004      	b.n	8007590 <cosf+0x24>
 8007586:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800758a:	db04      	blt.n	8007596 <cosf+0x2a>
 800758c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007590:	b003      	add	sp, #12
 8007592:	f85d fb04 	ldr.w	pc, [sp], #4
 8007596:	4668      	mov	r0, sp
 8007598:	f000 f86a 	bl	8007670 <__ieee754_rem_pio2f>
 800759c:	f000 0003 	and.w	r0, r0, #3
 80075a0:	2801      	cmp	r0, #1
 80075a2:	d007      	beq.n	80075b4 <cosf+0x48>
 80075a4:	2802      	cmp	r0, #2
 80075a6:	d00e      	beq.n	80075c6 <cosf+0x5a>
 80075a8:	b9a0      	cbnz	r0, 80075d4 <cosf+0x68>
 80075aa:	eddd 0a01 	vldr	s1, [sp, #4]
 80075ae:	ed9d 0a00 	vldr	s0, [sp]
 80075b2:	e7e5      	b.n	8007580 <cosf+0x14>
 80075b4:	eddd 0a01 	vldr	s1, [sp, #4]
 80075b8:	ed9d 0a00 	vldr	s0, [sp]
 80075bc:	f000 fc7e 	bl	8007ebc <__kernel_sinf>
 80075c0:	eeb1 0a40 	vneg.f32	s0, s0
 80075c4:	e7e4      	b.n	8007590 <cosf+0x24>
 80075c6:	eddd 0a01 	vldr	s1, [sp, #4]
 80075ca:	ed9d 0a00 	vldr	s0, [sp]
 80075ce:	f000 f98b 	bl	80078e8 <__kernel_cosf>
 80075d2:	e7f5      	b.n	80075c0 <cosf+0x54>
 80075d4:	eddd 0a01 	vldr	s1, [sp, #4]
 80075d8:	ed9d 0a00 	vldr	s0, [sp]
 80075dc:	2001      	movs	r0, #1
 80075de:	f000 fc6d 	bl	8007ebc <__kernel_sinf>
 80075e2:	e7d5      	b.n	8007590 <cosf+0x24>
 80075e4:	3f490fd8 	.word	0x3f490fd8
 80075e8:	00000000 	.word	0x00000000

080075ec <sinf>:
 80075ec:	ee10 3a10 	vmov	r3, s0
 80075f0:	b507      	push	{r0, r1, r2, lr}
 80075f2:	4a1d      	ldr	r2, [pc, #116]	; (8007668 <sinf+0x7c>)
 80075f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80075f8:	4293      	cmp	r3, r2
 80075fa:	dc05      	bgt.n	8007608 <sinf+0x1c>
 80075fc:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800766c <sinf+0x80>
 8007600:	2000      	movs	r0, #0
 8007602:	f000 fc5b 	bl	8007ebc <__kernel_sinf>
 8007606:	e004      	b.n	8007612 <sinf+0x26>
 8007608:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800760c:	db04      	blt.n	8007618 <sinf+0x2c>
 800760e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007612:	b003      	add	sp, #12
 8007614:	f85d fb04 	ldr.w	pc, [sp], #4
 8007618:	4668      	mov	r0, sp
 800761a:	f000 f829 	bl	8007670 <__ieee754_rem_pio2f>
 800761e:	f000 0003 	and.w	r0, r0, #3
 8007622:	2801      	cmp	r0, #1
 8007624:	d008      	beq.n	8007638 <sinf+0x4c>
 8007626:	2802      	cmp	r0, #2
 8007628:	d00d      	beq.n	8007646 <sinf+0x5a>
 800762a:	b9b0      	cbnz	r0, 800765a <sinf+0x6e>
 800762c:	eddd 0a01 	vldr	s1, [sp, #4]
 8007630:	ed9d 0a00 	vldr	s0, [sp]
 8007634:	2001      	movs	r0, #1
 8007636:	e7e4      	b.n	8007602 <sinf+0x16>
 8007638:	eddd 0a01 	vldr	s1, [sp, #4]
 800763c:	ed9d 0a00 	vldr	s0, [sp]
 8007640:	f000 f952 	bl	80078e8 <__kernel_cosf>
 8007644:	e7e5      	b.n	8007612 <sinf+0x26>
 8007646:	eddd 0a01 	vldr	s1, [sp, #4]
 800764a:	ed9d 0a00 	vldr	s0, [sp]
 800764e:	2001      	movs	r0, #1
 8007650:	f000 fc34 	bl	8007ebc <__kernel_sinf>
 8007654:	eeb1 0a40 	vneg.f32	s0, s0
 8007658:	e7db      	b.n	8007612 <sinf+0x26>
 800765a:	eddd 0a01 	vldr	s1, [sp, #4]
 800765e:	ed9d 0a00 	vldr	s0, [sp]
 8007662:	f000 f941 	bl	80078e8 <__kernel_cosf>
 8007666:	e7f5      	b.n	8007654 <sinf+0x68>
 8007668:	3f490fd8 	.word	0x3f490fd8
 800766c:	00000000 	.word	0x00000000

08007670 <__ieee754_rem_pio2f>:
 8007670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007672:	ee10 6a10 	vmov	r6, s0
 8007676:	4b8e      	ldr	r3, [pc, #568]	; (80078b0 <__ieee754_rem_pio2f+0x240>)
 8007678:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800767c:	429d      	cmp	r5, r3
 800767e:	b087      	sub	sp, #28
 8007680:	eef0 7a40 	vmov.f32	s15, s0
 8007684:	4604      	mov	r4, r0
 8007686:	dc05      	bgt.n	8007694 <__ieee754_rem_pio2f+0x24>
 8007688:	2300      	movs	r3, #0
 800768a:	ed80 0a00 	vstr	s0, [r0]
 800768e:	6043      	str	r3, [r0, #4]
 8007690:	2000      	movs	r0, #0
 8007692:	e01a      	b.n	80076ca <__ieee754_rem_pio2f+0x5a>
 8007694:	4b87      	ldr	r3, [pc, #540]	; (80078b4 <__ieee754_rem_pio2f+0x244>)
 8007696:	429d      	cmp	r5, r3
 8007698:	dc46      	bgt.n	8007728 <__ieee754_rem_pio2f+0xb8>
 800769a:	2e00      	cmp	r6, #0
 800769c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80078b8 <__ieee754_rem_pio2f+0x248>
 80076a0:	4b86      	ldr	r3, [pc, #536]	; (80078bc <__ieee754_rem_pio2f+0x24c>)
 80076a2:	f025 050f 	bic.w	r5, r5, #15
 80076a6:	dd1f      	ble.n	80076e8 <__ieee754_rem_pio2f+0x78>
 80076a8:	429d      	cmp	r5, r3
 80076aa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80076ae:	d00e      	beq.n	80076ce <__ieee754_rem_pio2f+0x5e>
 80076b0:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80078c0 <__ieee754_rem_pio2f+0x250>
 80076b4:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80076b8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80076bc:	ed80 0a00 	vstr	s0, [r0]
 80076c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80076c4:	2001      	movs	r0, #1
 80076c6:	edc4 7a01 	vstr	s15, [r4, #4]
 80076ca:	b007      	add	sp, #28
 80076cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076ce:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80078c4 <__ieee754_rem_pio2f+0x254>
 80076d2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80078c8 <__ieee754_rem_pio2f+0x258>
 80076d6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80076da:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80076de:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80076e2:	edc0 6a00 	vstr	s13, [r0]
 80076e6:	e7eb      	b.n	80076c0 <__ieee754_rem_pio2f+0x50>
 80076e8:	429d      	cmp	r5, r3
 80076ea:	ee77 7a80 	vadd.f32	s15, s15, s0
 80076ee:	d00e      	beq.n	800770e <__ieee754_rem_pio2f+0x9e>
 80076f0:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80078c0 <__ieee754_rem_pio2f+0x250>
 80076f4:	ee37 0a87 	vadd.f32	s0, s15, s14
 80076f8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80076fc:	ed80 0a00 	vstr	s0, [r0]
 8007700:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007704:	f04f 30ff 	mov.w	r0, #4294967295
 8007708:	edc4 7a01 	vstr	s15, [r4, #4]
 800770c:	e7dd      	b.n	80076ca <__ieee754_rem_pio2f+0x5a>
 800770e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80078c4 <__ieee754_rem_pio2f+0x254>
 8007712:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80078c8 <__ieee754_rem_pio2f+0x258>
 8007716:	ee77 7a80 	vadd.f32	s15, s15, s0
 800771a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800771e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007722:	edc0 6a00 	vstr	s13, [r0]
 8007726:	e7eb      	b.n	8007700 <__ieee754_rem_pio2f+0x90>
 8007728:	4b68      	ldr	r3, [pc, #416]	; (80078cc <__ieee754_rem_pio2f+0x25c>)
 800772a:	429d      	cmp	r5, r3
 800772c:	dc72      	bgt.n	8007814 <__ieee754_rem_pio2f+0x1a4>
 800772e:	f000 fc0d 	bl	8007f4c <fabsf>
 8007732:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80078d0 <__ieee754_rem_pio2f+0x260>
 8007736:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800773a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800773e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007742:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007746:	ee17 0a90 	vmov	r0, s15
 800774a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80078b8 <__ieee754_rem_pio2f+0x248>
 800774e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8007752:	281f      	cmp	r0, #31
 8007754:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80078c0 <__ieee754_rem_pio2f+0x250>
 8007758:	ee67 7a27 	vmul.f32	s15, s14, s15
 800775c:	eeb1 6a47 	vneg.f32	s12, s14
 8007760:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007764:	ee16 2a90 	vmov	r2, s13
 8007768:	dc1c      	bgt.n	80077a4 <__ieee754_rem_pio2f+0x134>
 800776a:	495a      	ldr	r1, [pc, #360]	; (80078d4 <__ieee754_rem_pio2f+0x264>)
 800776c:	1e47      	subs	r7, r0, #1
 800776e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8007772:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8007776:	428b      	cmp	r3, r1
 8007778:	d014      	beq.n	80077a4 <__ieee754_rem_pio2f+0x134>
 800777a:	6022      	str	r2, [r4, #0]
 800777c:	ed94 7a00 	vldr	s14, [r4]
 8007780:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007784:	2e00      	cmp	r6, #0
 8007786:	ee30 0a67 	vsub.f32	s0, s0, s15
 800778a:	ed84 0a01 	vstr	s0, [r4, #4]
 800778e:	da9c      	bge.n	80076ca <__ieee754_rem_pio2f+0x5a>
 8007790:	eeb1 7a47 	vneg.f32	s14, s14
 8007794:	eeb1 0a40 	vneg.f32	s0, s0
 8007798:	ed84 7a00 	vstr	s14, [r4]
 800779c:	ed84 0a01 	vstr	s0, [r4, #4]
 80077a0:	4240      	negs	r0, r0
 80077a2:	e792      	b.n	80076ca <__ieee754_rem_pio2f+0x5a>
 80077a4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80077a8:	15eb      	asrs	r3, r5, #23
 80077aa:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80077ae:	2d08      	cmp	r5, #8
 80077b0:	dde3      	ble.n	800777a <__ieee754_rem_pio2f+0x10a>
 80077b2:	eddf 7a44 	vldr	s15, [pc, #272]	; 80078c4 <__ieee754_rem_pio2f+0x254>
 80077b6:	eef0 6a40 	vmov.f32	s13, s0
 80077ba:	eee6 6a27 	vfma.f32	s13, s12, s15
 80077be:	ee30 0a66 	vsub.f32	s0, s0, s13
 80077c2:	eea6 0a27 	vfma.f32	s0, s12, s15
 80077c6:	eddf 7a40 	vldr	s15, [pc, #256]	; 80078c8 <__ieee754_rem_pio2f+0x258>
 80077ca:	ee97 0a27 	vfnms.f32	s0, s14, s15
 80077ce:	ee76 5ac0 	vsub.f32	s11, s13, s0
 80077d2:	eef0 7a40 	vmov.f32	s15, s0
 80077d6:	ee15 2a90 	vmov	r2, s11
 80077da:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80077de:	1a5b      	subs	r3, r3, r1
 80077e0:	2b19      	cmp	r3, #25
 80077e2:	dc04      	bgt.n	80077ee <__ieee754_rem_pio2f+0x17e>
 80077e4:	edc4 5a00 	vstr	s11, [r4]
 80077e8:	eeb0 0a66 	vmov.f32	s0, s13
 80077ec:	e7c6      	b.n	800777c <__ieee754_rem_pio2f+0x10c>
 80077ee:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80078d8 <__ieee754_rem_pio2f+0x268>
 80077f2:	eeb0 0a66 	vmov.f32	s0, s13
 80077f6:	eea6 0a25 	vfma.f32	s0, s12, s11
 80077fa:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80077fe:	eddf 6a37 	vldr	s13, [pc, #220]	; 80078dc <__ieee754_rem_pio2f+0x26c>
 8007802:	eee6 7a25 	vfma.f32	s15, s12, s11
 8007806:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800780a:	ee30 7a67 	vsub.f32	s14, s0, s15
 800780e:	ed84 7a00 	vstr	s14, [r4]
 8007812:	e7b3      	b.n	800777c <__ieee754_rem_pio2f+0x10c>
 8007814:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8007818:	db06      	blt.n	8007828 <__ieee754_rem_pio2f+0x1b8>
 800781a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800781e:	edc0 7a01 	vstr	s15, [r0, #4]
 8007822:	edc0 7a00 	vstr	s15, [r0]
 8007826:	e733      	b.n	8007690 <__ieee754_rem_pio2f+0x20>
 8007828:	15ea      	asrs	r2, r5, #23
 800782a:	3a86      	subs	r2, #134	; 0x86
 800782c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8007830:	ee07 3a90 	vmov	s15, r3
 8007834:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007838:	eddf 6a29 	vldr	s13, [pc, #164]	; 80078e0 <__ieee754_rem_pio2f+0x270>
 800783c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007840:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007844:	ed8d 7a03 	vstr	s14, [sp, #12]
 8007848:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800784c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007850:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007854:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007858:	ed8d 7a04 	vstr	s14, [sp, #16]
 800785c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007860:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007868:	edcd 7a05 	vstr	s15, [sp, #20]
 800786c:	d11e      	bne.n	80078ac <__ieee754_rem_pio2f+0x23c>
 800786e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8007872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007876:	bf14      	ite	ne
 8007878:	2302      	movne	r3, #2
 800787a:	2301      	moveq	r3, #1
 800787c:	4919      	ldr	r1, [pc, #100]	; (80078e4 <__ieee754_rem_pio2f+0x274>)
 800787e:	9101      	str	r1, [sp, #4]
 8007880:	2102      	movs	r1, #2
 8007882:	9100      	str	r1, [sp, #0]
 8007884:	a803      	add	r0, sp, #12
 8007886:	4621      	mov	r1, r4
 8007888:	f000 f88e 	bl	80079a8 <__kernel_rem_pio2f>
 800788c:	2e00      	cmp	r6, #0
 800788e:	f6bf af1c 	bge.w	80076ca <__ieee754_rem_pio2f+0x5a>
 8007892:	edd4 7a00 	vldr	s15, [r4]
 8007896:	eef1 7a67 	vneg.f32	s15, s15
 800789a:	edc4 7a00 	vstr	s15, [r4]
 800789e:	edd4 7a01 	vldr	s15, [r4, #4]
 80078a2:	eef1 7a67 	vneg.f32	s15, s15
 80078a6:	edc4 7a01 	vstr	s15, [r4, #4]
 80078aa:	e779      	b.n	80077a0 <__ieee754_rem_pio2f+0x130>
 80078ac:	2303      	movs	r3, #3
 80078ae:	e7e5      	b.n	800787c <__ieee754_rem_pio2f+0x20c>
 80078b0:	3f490fd8 	.word	0x3f490fd8
 80078b4:	4016cbe3 	.word	0x4016cbe3
 80078b8:	3fc90f80 	.word	0x3fc90f80
 80078bc:	3fc90fd0 	.word	0x3fc90fd0
 80078c0:	37354443 	.word	0x37354443
 80078c4:	37354400 	.word	0x37354400
 80078c8:	2e85a308 	.word	0x2e85a308
 80078cc:	43490f80 	.word	0x43490f80
 80078d0:	3f22f984 	.word	0x3f22f984
 80078d4:	0800813c 	.word	0x0800813c
 80078d8:	2e85a300 	.word	0x2e85a300
 80078dc:	248d3132 	.word	0x248d3132
 80078e0:	43800000 	.word	0x43800000
 80078e4:	080081bc 	.word	0x080081bc

080078e8 <__kernel_cosf>:
 80078e8:	ee10 3a10 	vmov	r3, s0
 80078ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80078f0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80078f4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80078f8:	da05      	bge.n	8007906 <__kernel_cosf+0x1e>
 80078fa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80078fe:	ee17 2a90 	vmov	r2, s15
 8007902:	2a00      	cmp	r2, #0
 8007904:	d03d      	beq.n	8007982 <__kernel_cosf+0x9a>
 8007906:	ee60 5a00 	vmul.f32	s11, s0, s0
 800790a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007988 <__kernel_cosf+0xa0>
 800790e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800798c <__kernel_cosf+0xa4>
 8007912:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8007990 <__kernel_cosf+0xa8>
 8007916:	4a1f      	ldr	r2, [pc, #124]	; (8007994 <__kernel_cosf+0xac>)
 8007918:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800791c:	4293      	cmp	r3, r2
 800791e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8007998 <__kernel_cosf+0xb0>
 8007922:	eee7 7a25 	vfma.f32	s15, s14, s11
 8007926:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800799c <__kernel_cosf+0xb4>
 800792a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800792e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80079a0 <__kernel_cosf+0xb8>
 8007932:	eee7 7a25 	vfma.f32	s15, s14, s11
 8007936:	eeb0 7a66 	vmov.f32	s14, s13
 800793a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800793e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8007942:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8007946:	ee67 6a25 	vmul.f32	s13, s14, s11
 800794a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800794e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007952:	dc04      	bgt.n	800795e <__kernel_cosf+0x76>
 8007954:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007958:	ee36 0a47 	vsub.f32	s0, s12, s14
 800795c:	4770      	bx	lr
 800795e:	4a11      	ldr	r2, [pc, #68]	; (80079a4 <__kernel_cosf+0xbc>)
 8007960:	4293      	cmp	r3, r2
 8007962:	bfda      	itte	le
 8007964:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8007968:	ee06 3a90 	vmovle	s13, r3
 800796c:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8007970:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007974:	ee36 0a66 	vsub.f32	s0, s12, s13
 8007978:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800797c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007980:	4770      	bx	lr
 8007982:	eeb0 0a46 	vmov.f32	s0, s12
 8007986:	4770      	bx	lr
 8007988:	ad47d74e 	.word	0xad47d74e
 800798c:	310f74f6 	.word	0x310f74f6
 8007990:	3d2aaaab 	.word	0x3d2aaaab
 8007994:	3e999999 	.word	0x3e999999
 8007998:	b493f27c 	.word	0xb493f27c
 800799c:	37d00d01 	.word	0x37d00d01
 80079a0:	bab60b61 	.word	0xbab60b61
 80079a4:	3f480000 	.word	0x3f480000

080079a8 <__kernel_rem_pio2f>:
 80079a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ac:	ed2d 8b04 	vpush	{d8-d9}
 80079b0:	b0d7      	sub	sp, #348	; 0x15c
 80079b2:	4616      	mov	r6, r2
 80079b4:	4698      	mov	r8, r3
 80079b6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80079b8:	4bbb      	ldr	r3, [pc, #748]	; (8007ca8 <__kernel_rem_pio2f+0x300>)
 80079ba:	9001      	str	r0, [sp, #4]
 80079bc:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 80079c0:	1d33      	adds	r3, r6, #4
 80079c2:	460d      	mov	r5, r1
 80079c4:	f108 39ff 	add.w	r9, r8, #4294967295
 80079c8:	db29      	blt.n	8007a1e <__kernel_rem_pio2f+0x76>
 80079ca:	1ef1      	subs	r1, r6, #3
 80079cc:	bf48      	it	mi
 80079ce:	1d31      	addmi	r1, r6, #4
 80079d0:	10c9      	asrs	r1, r1, #3
 80079d2:	1c4c      	adds	r4, r1, #1
 80079d4:	00e3      	lsls	r3, r4, #3
 80079d6:	9302      	str	r3, [sp, #8]
 80079d8:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80079da:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8007cb8 <__kernel_rem_pio2f+0x310>
 80079de:	eba1 0009 	sub.w	r0, r1, r9
 80079e2:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 80079e6:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 80079ea:	eb07 0c09 	add.w	ip, r7, r9
 80079ee:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 80079f2:	2300      	movs	r3, #0
 80079f4:	4563      	cmp	r3, ip
 80079f6:	dd14      	ble.n	8007a22 <__kernel_rem_pio2f+0x7a>
 80079f8:	ab1a      	add	r3, sp, #104	; 0x68
 80079fa:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 80079fe:	46cc      	mov	ip, r9
 8007a00:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 8007a04:	f1c8 0b01 	rsb	fp, r8, #1
 8007a08:	eb0b 020c 	add.w	r2, fp, ip
 8007a0c:	4297      	cmp	r7, r2
 8007a0e:	db27      	blt.n	8007a60 <__kernel_rem_pio2f+0xb8>
 8007a10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007a14:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8007cb8 <__kernel_rem_pio2f+0x310>
 8007a18:	4618      	mov	r0, r3
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	e016      	b.n	8007a4c <__kernel_rem_pio2f+0xa4>
 8007a1e:	2100      	movs	r1, #0
 8007a20:	e7d7      	b.n	80079d2 <__kernel_rem_pio2f+0x2a>
 8007a22:	42d8      	cmn	r0, r3
 8007a24:	bf5d      	ittte	pl
 8007a26:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 8007a2a:	ee07 2a90 	vmovpl	s15, r2
 8007a2e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8007a32:	eef0 7a47 	vmovmi.f32	s15, s14
 8007a36:	ecea 7a01 	vstmia	sl!, {s15}
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	e7da      	b.n	80079f4 <__kernel_rem_pio2f+0x4c>
 8007a3e:	ecfe 6a01 	vldmia	lr!, {s13}
 8007a42:	ed90 7a00 	vldr	s14, [r0]
 8007a46:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007a4a:	3201      	adds	r2, #1
 8007a4c:	454a      	cmp	r2, r9
 8007a4e:	f1a0 0004 	sub.w	r0, r0, #4
 8007a52:	ddf4      	ble.n	8007a3e <__kernel_rem_pio2f+0x96>
 8007a54:	ecea 7a01 	vstmia	sl!, {s15}
 8007a58:	3304      	adds	r3, #4
 8007a5a:	f10c 0c01 	add.w	ip, ip, #1
 8007a5e:	e7d3      	b.n	8007a08 <__kernel_rem_pio2f+0x60>
 8007a60:	ab06      	add	r3, sp, #24
 8007a62:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8007a66:	9304      	str	r3, [sp, #16]
 8007a68:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8007a6a:	eddf 8a92 	vldr	s17, [pc, #584]	; 8007cb4 <__kernel_rem_pio2f+0x30c>
 8007a6e:	ed9f 9a90 	vldr	s18, [pc, #576]	; 8007cb0 <__kernel_rem_pio2f+0x308>
 8007a72:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8007a76:	9303      	str	r3, [sp, #12]
 8007a78:	46ba      	mov	sl, r7
 8007a7a:	ab56      	add	r3, sp, #344	; 0x158
 8007a7c:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8007a80:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8007a84:	ab06      	add	r3, sp, #24
 8007a86:	4618      	mov	r0, r3
 8007a88:	4652      	mov	r2, sl
 8007a8a:	2a00      	cmp	r2, #0
 8007a8c:	dc51      	bgt.n	8007b32 <__kernel_rem_pio2f+0x18a>
 8007a8e:	4620      	mov	r0, r4
 8007a90:	9305      	str	r3, [sp, #20]
 8007a92:	f000 faa5 	bl	8007fe0 <scalbnf>
 8007a96:	eeb0 8a40 	vmov.f32	s16, s0
 8007a9a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8007a9e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8007aa2:	f000 fa5b 	bl	8007f5c <floorf>
 8007aa6:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8007aaa:	eea0 8a67 	vfms.f32	s16, s0, s15
 8007aae:	2c00      	cmp	r4, #0
 8007ab0:	9b05      	ldr	r3, [sp, #20]
 8007ab2:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8007ab6:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8007aba:	edcd 7a00 	vstr	s15, [sp]
 8007abe:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007ac2:	dd4b      	ble.n	8007b5c <__kernel_rem_pio2f+0x1b4>
 8007ac4:	f10a 3cff 	add.w	ip, sl, #4294967295
 8007ac8:	aa06      	add	r2, sp, #24
 8007aca:	f1c4 0e08 	rsb	lr, r4, #8
 8007ace:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8007ad2:	ee17 1a90 	vmov	r1, s15
 8007ad6:	fa42 f00e 	asr.w	r0, r2, lr
 8007ada:	4401      	add	r1, r0
 8007adc:	9100      	str	r1, [sp, #0]
 8007ade:	fa00 f00e 	lsl.w	r0, r0, lr
 8007ae2:	a906      	add	r1, sp, #24
 8007ae4:	1a12      	subs	r2, r2, r0
 8007ae6:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8007aea:	f1c4 0007 	rsb	r0, r4, #7
 8007aee:	fa42 fb00 	asr.w	fp, r2, r0
 8007af2:	f1bb 0f00 	cmp.w	fp, #0
 8007af6:	dd43      	ble.n	8007b80 <__kernel_rem_pio2f+0x1d8>
 8007af8:	9a00      	ldr	r2, [sp, #0]
 8007afa:	f04f 0e00 	mov.w	lr, #0
 8007afe:	3201      	adds	r2, #1
 8007b00:	9200      	str	r2, [sp, #0]
 8007b02:	4670      	mov	r0, lr
 8007b04:	45f2      	cmp	sl, lr
 8007b06:	dc6c      	bgt.n	8007be2 <__kernel_rem_pio2f+0x23a>
 8007b08:	2c00      	cmp	r4, #0
 8007b0a:	dd04      	ble.n	8007b16 <__kernel_rem_pio2f+0x16e>
 8007b0c:	2c01      	cmp	r4, #1
 8007b0e:	d079      	beq.n	8007c04 <__kernel_rem_pio2f+0x25c>
 8007b10:	2c02      	cmp	r4, #2
 8007b12:	f000 8082 	beq.w	8007c1a <__kernel_rem_pio2f+0x272>
 8007b16:	f1bb 0f02 	cmp.w	fp, #2
 8007b1a:	d131      	bne.n	8007b80 <__kernel_rem_pio2f+0x1d8>
 8007b1c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007b20:	ee30 8a48 	vsub.f32	s16, s0, s16
 8007b24:	b360      	cbz	r0, 8007b80 <__kernel_rem_pio2f+0x1d8>
 8007b26:	4620      	mov	r0, r4
 8007b28:	f000 fa5a 	bl	8007fe0 <scalbnf>
 8007b2c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007b30:	e026      	b.n	8007b80 <__kernel_rem_pio2f+0x1d8>
 8007b32:	ee60 7a28 	vmul.f32	s15, s0, s17
 8007b36:	3a01      	subs	r2, #1
 8007b38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b3c:	a942      	add	r1, sp, #264	; 0x108
 8007b3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b42:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8007b46:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8007b4a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007b4e:	eca0 0a01 	vstmia	r0!, {s0}
 8007b52:	ed9c 0a00 	vldr	s0, [ip]
 8007b56:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007b5a:	e796      	b.n	8007a8a <__kernel_rem_pio2f+0xe2>
 8007b5c:	d107      	bne.n	8007b6e <__kernel_rem_pio2f+0x1c6>
 8007b5e:	f10a 32ff 	add.w	r2, sl, #4294967295
 8007b62:	a906      	add	r1, sp, #24
 8007b64:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007b68:	ea4f 2b22 	mov.w	fp, r2, asr #8
 8007b6c:	e7c1      	b.n	8007af2 <__kernel_rem_pio2f+0x14a>
 8007b6e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007b72:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b7a:	da2f      	bge.n	8007bdc <__kernel_rem_pio2f+0x234>
 8007b7c:	f04f 0b00 	mov.w	fp, #0
 8007b80:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b88:	f040 8098 	bne.w	8007cbc <__kernel_rem_pio2f+0x314>
 8007b8c:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007b90:	469c      	mov	ip, r3
 8007b92:	2200      	movs	r2, #0
 8007b94:	45bc      	cmp	ip, r7
 8007b96:	da48      	bge.n	8007c2a <__kernel_rem_pio2f+0x282>
 8007b98:	2a00      	cmp	r2, #0
 8007b9a:	d05f      	beq.n	8007c5c <__kernel_rem_pio2f+0x2b4>
 8007b9c:	aa06      	add	r2, sp, #24
 8007b9e:	3c08      	subs	r4, #8
 8007ba0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007ba4:	2900      	cmp	r1, #0
 8007ba6:	d07d      	beq.n	8007ca4 <__kernel_rem_pio2f+0x2fc>
 8007ba8:	4620      	mov	r0, r4
 8007baa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007bae:	9301      	str	r3, [sp, #4]
 8007bb0:	f000 fa16 	bl	8007fe0 <scalbnf>
 8007bb4:	9b01      	ldr	r3, [sp, #4]
 8007bb6:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8007cb4 <__kernel_rem_pio2f+0x30c>
 8007bba:	4619      	mov	r1, r3
 8007bbc:	2900      	cmp	r1, #0
 8007bbe:	f280 80af 	bge.w	8007d20 <__kernel_rem_pio2f+0x378>
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	2400      	movs	r4, #0
 8007bc6:	2800      	cmp	r0, #0
 8007bc8:	f2c0 80d0 	blt.w	8007d6c <__kernel_rem_pio2f+0x3c4>
 8007bcc:	a942      	add	r1, sp, #264	; 0x108
 8007bce:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 8007bd2:	4a36      	ldr	r2, [pc, #216]	; (8007cac <__kernel_rem_pio2f+0x304>)
 8007bd4:	eddf 7a38 	vldr	s15, [pc, #224]	; 8007cb8 <__kernel_rem_pio2f+0x310>
 8007bd8:	2100      	movs	r1, #0
 8007bda:	e0bb      	b.n	8007d54 <__kernel_rem_pio2f+0x3ac>
 8007bdc:	f04f 0b02 	mov.w	fp, #2
 8007be0:	e78a      	b.n	8007af8 <__kernel_rem_pio2f+0x150>
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	b948      	cbnz	r0, 8007bfa <__kernel_rem_pio2f+0x252>
 8007be6:	b11a      	cbz	r2, 8007bf0 <__kernel_rem_pio2f+0x248>
 8007be8:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8007bec:	601a      	str	r2, [r3, #0]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f10e 0e01 	add.w	lr, lr, #1
 8007bf4:	3304      	adds	r3, #4
 8007bf6:	4610      	mov	r0, r2
 8007bf8:	e784      	b.n	8007b04 <__kernel_rem_pio2f+0x15c>
 8007bfa:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8007bfe:	601a      	str	r2, [r3, #0]
 8007c00:	4602      	mov	r2, r0
 8007c02:	e7f5      	b.n	8007bf0 <__kernel_rem_pio2f+0x248>
 8007c04:	f10a 3cff 	add.w	ip, sl, #4294967295
 8007c08:	ab06      	add	r3, sp, #24
 8007c0a:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8007c0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c12:	aa06      	add	r2, sp, #24
 8007c14:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 8007c18:	e77d      	b.n	8007b16 <__kernel_rem_pio2f+0x16e>
 8007c1a:	f10a 3cff 	add.w	ip, sl, #4294967295
 8007c1e:	ab06      	add	r3, sp, #24
 8007c20:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8007c24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c28:	e7f3      	b.n	8007c12 <__kernel_rem_pio2f+0x26a>
 8007c2a:	a906      	add	r1, sp, #24
 8007c2c:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 8007c30:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007c34:	4302      	orrs	r2, r0
 8007c36:	e7ad      	b.n	8007b94 <__kernel_rem_pio2f+0x1ec>
 8007c38:	3001      	adds	r0, #1
 8007c3a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007c3e:	2a00      	cmp	r2, #0
 8007c40:	d0fa      	beq.n	8007c38 <__kernel_rem_pio2f+0x290>
 8007c42:	a91a      	add	r1, sp, #104	; 0x68
 8007c44:	eb0a 0208 	add.w	r2, sl, r8
 8007c48:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8007c4c:	f10a 0301 	add.w	r3, sl, #1
 8007c50:	eb0a 0100 	add.w	r1, sl, r0
 8007c54:	4299      	cmp	r1, r3
 8007c56:	da04      	bge.n	8007c62 <__kernel_rem_pio2f+0x2ba>
 8007c58:	468a      	mov	sl, r1
 8007c5a:	e70e      	b.n	8007a7a <__kernel_rem_pio2f+0xd2>
 8007c5c:	9b04      	ldr	r3, [sp, #16]
 8007c5e:	2001      	movs	r0, #1
 8007c60:	e7eb      	b.n	8007c3a <__kernel_rem_pio2f+0x292>
 8007c62:	9803      	ldr	r0, [sp, #12]
 8007c64:	f8dd c004 	ldr.w	ip, [sp, #4]
 8007c68:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8007c6c:	9000      	str	r0, [sp, #0]
 8007c6e:	ee07 0a90 	vmov	s15, r0
 8007c72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c76:	2000      	movs	r0, #0
 8007c78:	ece2 7a01 	vstmia	r2!, {s15}
 8007c7c:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8007cb8 <__kernel_rem_pio2f+0x310>
 8007c80:	4696      	mov	lr, r2
 8007c82:	4548      	cmp	r0, r9
 8007c84:	dd06      	ble.n	8007c94 <__kernel_rem_pio2f+0x2ec>
 8007c86:	a842      	add	r0, sp, #264	; 0x108
 8007c88:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007c8c:	edc0 7a00 	vstr	s15, [r0]
 8007c90:	3301      	adds	r3, #1
 8007c92:	e7df      	b.n	8007c54 <__kernel_rem_pio2f+0x2ac>
 8007c94:	ecfc 6a01 	vldmia	ip!, {s13}
 8007c98:	ed3e 7a01 	vldmdb	lr!, {s14}
 8007c9c:	3001      	adds	r0, #1
 8007c9e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007ca2:	e7ee      	b.n	8007c82 <__kernel_rem_pio2f+0x2da>
 8007ca4:	3b01      	subs	r3, #1
 8007ca6:	e779      	b.n	8007b9c <__kernel_rem_pio2f+0x1f4>
 8007ca8:	08008500 	.word	0x08008500
 8007cac:	080084d4 	.word	0x080084d4
 8007cb0:	43800000 	.word	0x43800000
 8007cb4:	3b800000 	.word	0x3b800000
 8007cb8:	00000000 	.word	0x00000000
 8007cbc:	9b02      	ldr	r3, [sp, #8]
 8007cbe:	eeb0 0a48 	vmov.f32	s0, s16
 8007cc2:	1b98      	subs	r0, r3, r6
 8007cc4:	f000 f98c 	bl	8007fe0 <scalbnf>
 8007cc8:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8007cb0 <__kernel_rem_pio2f+0x308>
 8007ccc:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8007cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cd4:	db1b      	blt.n	8007d0e <__kernel_rem_pio2f+0x366>
 8007cd6:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8007cb4 <__kernel_rem_pio2f+0x30c>
 8007cda:	ee60 7a27 	vmul.f32	s15, s0, s15
 8007cde:	aa06      	add	r2, sp, #24
 8007ce0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ce4:	a906      	add	r1, sp, #24
 8007ce6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007cea:	3408      	adds	r4, #8
 8007cec:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8007cf0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007cf4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007cf8:	ee10 3a10 	vmov	r3, s0
 8007cfc:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8007d00:	ee17 2a90 	vmov	r2, s15
 8007d04:	f10a 0301 	add.w	r3, sl, #1
 8007d08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007d0c:	e74c      	b.n	8007ba8 <__kernel_rem_pio2f+0x200>
 8007d0e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007d12:	aa06      	add	r2, sp, #24
 8007d14:	ee10 3a10 	vmov	r3, s0
 8007d18:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8007d1c:	4653      	mov	r3, sl
 8007d1e:	e743      	b.n	8007ba8 <__kernel_rem_pio2f+0x200>
 8007d20:	aa42      	add	r2, sp, #264	; 0x108
 8007d22:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8007d26:	aa06      	add	r2, sp, #24
 8007d28:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8007d2c:	9201      	str	r2, [sp, #4]
 8007d2e:	ee07 2a90 	vmov	s15, r2
 8007d32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d36:	3901      	subs	r1, #1
 8007d38:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007d3c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8007d40:	edc0 7a00 	vstr	s15, [r0]
 8007d44:	e73a      	b.n	8007bbc <__kernel_rem_pio2f+0x214>
 8007d46:	ecf2 6a01 	vldmia	r2!, {s13}
 8007d4a:	ecb6 7a01 	vldmia	r6!, {s14}
 8007d4e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007d52:	3101      	adds	r1, #1
 8007d54:	42b9      	cmp	r1, r7
 8007d56:	dc01      	bgt.n	8007d5c <__kernel_rem_pio2f+0x3b4>
 8007d58:	428c      	cmp	r4, r1
 8007d5a:	daf4      	bge.n	8007d46 <__kernel_rem_pio2f+0x39e>
 8007d5c:	aa56      	add	r2, sp, #344	; 0x158
 8007d5e:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8007d62:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8007d66:	3801      	subs	r0, #1
 8007d68:	3401      	adds	r4, #1
 8007d6a:	e72c      	b.n	8007bc6 <__kernel_rem_pio2f+0x21e>
 8007d6c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8007d6e:	2a02      	cmp	r2, #2
 8007d70:	dc0a      	bgt.n	8007d88 <__kernel_rem_pio2f+0x3e0>
 8007d72:	2a00      	cmp	r2, #0
 8007d74:	dc61      	bgt.n	8007e3a <__kernel_rem_pio2f+0x492>
 8007d76:	d03c      	beq.n	8007df2 <__kernel_rem_pio2f+0x44a>
 8007d78:	9b00      	ldr	r3, [sp, #0]
 8007d7a:	f003 0007 	and.w	r0, r3, #7
 8007d7e:	b057      	add	sp, #348	; 0x15c
 8007d80:	ecbd 8b04 	vpop	{d8-d9}
 8007d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d88:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8007d8a:	2a03      	cmp	r2, #3
 8007d8c:	d1f4      	bne.n	8007d78 <__kernel_rem_pio2f+0x3d0>
 8007d8e:	aa2e      	add	r2, sp, #184	; 0xb8
 8007d90:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8007d94:	4608      	mov	r0, r1
 8007d96:	461c      	mov	r4, r3
 8007d98:	2c00      	cmp	r4, #0
 8007d9a:	f1a0 0004 	sub.w	r0, r0, #4
 8007d9e:	dc59      	bgt.n	8007e54 <__kernel_rem_pio2f+0x4ac>
 8007da0:	4618      	mov	r0, r3
 8007da2:	2801      	cmp	r0, #1
 8007da4:	f1a1 0104 	sub.w	r1, r1, #4
 8007da8:	dc64      	bgt.n	8007e74 <__kernel_rem_pio2f+0x4cc>
 8007daa:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 8007cb8 <__kernel_rem_pio2f+0x310>
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	dc70      	bgt.n	8007e94 <__kernel_rem_pio2f+0x4ec>
 8007db2:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8007db6:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8007dba:	f1bb 0f00 	cmp.w	fp, #0
 8007dbe:	d172      	bne.n	8007ea6 <__kernel_rem_pio2f+0x4fe>
 8007dc0:	edc5 6a00 	vstr	s13, [r5]
 8007dc4:	ed85 7a01 	vstr	s14, [r5, #4]
 8007dc8:	edc5 7a02 	vstr	s15, [r5, #8]
 8007dcc:	e7d4      	b.n	8007d78 <__kernel_rem_pio2f+0x3d0>
 8007dce:	aa2e      	add	r2, sp, #184	; 0xb8
 8007dd0:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8007dd4:	ed91 7a00 	vldr	s14, [r1]
 8007dd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007ddc:	3b01      	subs	r3, #1
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	daf5      	bge.n	8007dce <__kernel_rem_pio2f+0x426>
 8007de2:	f1bb 0f00 	cmp.w	fp, #0
 8007de6:	d001      	beq.n	8007dec <__kernel_rem_pio2f+0x444>
 8007de8:	eef1 7a67 	vneg.f32	s15, s15
 8007dec:	edc5 7a00 	vstr	s15, [r5]
 8007df0:	e7c2      	b.n	8007d78 <__kernel_rem_pio2f+0x3d0>
 8007df2:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8007cb8 <__kernel_rem_pio2f+0x310>
 8007df6:	e7f2      	b.n	8007dde <__kernel_rem_pio2f+0x436>
 8007df8:	aa2e      	add	r2, sp, #184	; 0xb8
 8007dfa:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8007dfe:	edd0 7a00 	vldr	s15, [r0]
 8007e02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007e06:	3901      	subs	r1, #1
 8007e08:	2900      	cmp	r1, #0
 8007e0a:	daf5      	bge.n	8007df8 <__kernel_rem_pio2f+0x450>
 8007e0c:	f1bb 0f00 	cmp.w	fp, #0
 8007e10:	d017      	beq.n	8007e42 <__kernel_rem_pio2f+0x49a>
 8007e12:	eef1 7a47 	vneg.f32	s15, s14
 8007e16:	edc5 7a00 	vstr	s15, [r5]
 8007e1a:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8007e1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007e22:	a82f      	add	r0, sp, #188	; 0xbc
 8007e24:	2101      	movs	r1, #1
 8007e26:	428b      	cmp	r3, r1
 8007e28:	da0e      	bge.n	8007e48 <__kernel_rem_pio2f+0x4a0>
 8007e2a:	f1bb 0f00 	cmp.w	fp, #0
 8007e2e:	d001      	beq.n	8007e34 <__kernel_rem_pio2f+0x48c>
 8007e30:	eef1 7a67 	vneg.f32	s15, s15
 8007e34:	edc5 7a01 	vstr	s15, [r5, #4]
 8007e38:	e79e      	b.n	8007d78 <__kernel_rem_pio2f+0x3d0>
 8007e3a:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 8007cb8 <__kernel_rem_pio2f+0x310>
 8007e3e:	4619      	mov	r1, r3
 8007e40:	e7e2      	b.n	8007e08 <__kernel_rem_pio2f+0x460>
 8007e42:	eef0 7a47 	vmov.f32	s15, s14
 8007e46:	e7e6      	b.n	8007e16 <__kernel_rem_pio2f+0x46e>
 8007e48:	ecb0 7a01 	vldmia	r0!, {s14}
 8007e4c:	3101      	adds	r1, #1
 8007e4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007e52:	e7e8      	b.n	8007e26 <__kernel_rem_pio2f+0x47e>
 8007e54:	edd0 7a00 	vldr	s15, [r0]
 8007e58:	edd0 6a01 	vldr	s13, [r0, #4]
 8007e5c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007e60:	3c01      	subs	r4, #1
 8007e62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007e66:	ed80 7a00 	vstr	s14, [r0]
 8007e6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e6e:	edc0 7a01 	vstr	s15, [r0, #4]
 8007e72:	e791      	b.n	8007d98 <__kernel_rem_pio2f+0x3f0>
 8007e74:	edd1 7a00 	vldr	s15, [r1]
 8007e78:	edd1 6a01 	vldr	s13, [r1, #4]
 8007e7c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007e80:	3801      	subs	r0, #1
 8007e82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007e86:	ed81 7a00 	vstr	s14, [r1]
 8007e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e8e:	edc1 7a01 	vstr	s15, [r1, #4]
 8007e92:	e786      	b.n	8007da2 <__kernel_rem_pio2f+0x3fa>
 8007e94:	aa2e      	add	r2, sp, #184	; 0xb8
 8007e96:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8007e9a:	ed91 7a00 	vldr	s14, [r1]
 8007e9e:	3b01      	subs	r3, #1
 8007ea0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007ea4:	e783      	b.n	8007dae <__kernel_rem_pio2f+0x406>
 8007ea6:	eef1 6a66 	vneg.f32	s13, s13
 8007eaa:	eeb1 7a47 	vneg.f32	s14, s14
 8007eae:	edc5 6a00 	vstr	s13, [r5]
 8007eb2:	ed85 7a01 	vstr	s14, [r5, #4]
 8007eb6:	eef1 7a67 	vneg.f32	s15, s15
 8007eba:	e785      	b.n	8007dc8 <__kernel_rem_pio2f+0x420>

08007ebc <__kernel_sinf>:
 8007ebc:	ee10 3a10 	vmov	r3, s0
 8007ec0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ec4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007ec8:	da04      	bge.n	8007ed4 <__kernel_sinf+0x18>
 8007eca:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007ece:	ee17 3a90 	vmov	r3, s15
 8007ed2:	b35b      	cbz	r3, 8007f2c <__kernel_sinf+0x70>
 8007ed4:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007ed8:	eddf 7a15 	vldr	s15, [pc, #84]	; 8007f30 <__kernel_sinf+0x74>
 8007edc:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8007f34 <__kernel_sinf+0x78>
 8007ee0:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007ee4:	eddf 7a14 	vldr	s15, [pc, #80]	; 8007f38 <__kernel_sinf+0x7c>
 8007ee8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007eec:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8007f3c <__kernel_sinf+0x80>
 8007ef0:	eea7 6a87 	vfma.f32	s12, s15, s14
 8007ef4:	eddf 7a12 	vldr	s15, [pc, #72]	; 8007f40 <__kernel_sinf+0x84>
 8007ef8:	ee60 6a07 	vmul.f32	s13, s0, s14
 8007efc:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007f00:	b930      	cbnz	r0, 8007f10 <__kernel_sinf+0x54>
 8007f02:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8007f44 <__kernel_sinf+0x88>
 8007f06:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007f0a:	eea6 0a26 	vfma.f32	s0, s12, s13
 8007f0e:	4770      	bx	lr
 8007f10:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007f14:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8007f18:	eee0 7a86 	vfma.f32	s15, s1, s12
 8007f1c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8007f20:	eddf 7a09 	vldr	s15, [pc, #36]	; 8007f48 <__kernel_sinf+0x8c>
 8007f24:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8007f28:	ee30 0a60 	vsub.f32	s0, s0, s1
 8007f2c:	4770      	bx	lr
 8007f2e:	bf00      	nop
 8007f30:	2f2ec9d3 	.word	0x2f2ec9d3
 8007f34:	b2d72f34 	.word	0xb2d72f34
 8007f38:	3638ef1b 	.word	0x3638ef1b
 8007f3c:	b9500d01 	.word	0xb9500d01
 8007f40:	3c088889 	.word	0x3c088889
 8007f44:	be2aaaab 	.word	0xbe2aaaab
 8007f48:	3e2aaaab 	.word	0x3e2aaaab

08007f4c <fabsf>:
 8007f4c:	ee10 3a10 	vmov	r3, s0
 8007f50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f54:	ee00 3a10 	vmov	s0, r3
 8007f58:	4770      	bx	lr
	...

08007f5c <floorf>:
 8007f5c:	ee10 3a10 	vmov	r3, s0
 8007f60:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007f64:	3a7f      	subs	r2, #127	; 0x7f
 8007f66:	2a16      	cmp	r2, #22
 8007f68:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007f6c:	dc2a      	bgt.n	8007fc4 <floorf+0x68>
 8007f6e:	2a00      	cmp	r2, #0
 8007f70:	da11      	bge.n	8007f96 <floorf+0x3a>
 8007f72:	eddf 7a18 	vldr	s15, [pc, #96]	; 8007fd4 <floorf+0x78>
 8007f76:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007f7a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f82:	dd05      	ble.n	8007f90 <floorf+0x34>
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	da23      	bge.n	8007fd0 <floorf+0x74>
 8007f88:	4a13      	ldr	r2, [pc, #76]	; (8007fd8 <floorf+0x7c>)
 8007f8a:	2900      	cmp	r1, #0
 8007f8c:	bf18      	it	ne
 8007f8e:	4613      	movne	r3, r2
 8007f90:	ee00 3a10 	vmov	s0, r3
 8007f94:	4770      	bx	lr
 8007f96:	4911      	ldr	r1, [pc, #68]	; (8007fdc <floorf+0x80>)
 8007f98:	4111      	asrs	r1, r2
 8007f9a:	420b      	tst	r3, r1
 8007f9c:	d0fa      	beq.n	8007f94 <floorf+0x38>
 8007f9e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8007fd4 <floorf+0x78>
 8007fa2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007fa6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fae:	ddef      	ble.n	8007f90 <floorf+0x34>
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	bfbe      	ittt	lt
 8007fb4:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8007fb8:	fa40 f202 	asrlt.w	r2, r0, r2
 8007fbc:	189b      	addlt	r3, r3, r2
 8007fbe:	ea23 0301 	bic.w	r3, r3, r1
 8007fc2:	e7e5      	b.n	8007f90 <floorf+0x34>
 8007fc4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007fc8:	d3e4      	bcc.n	8007f94 <floorf+0x38>
 8007fca:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007fce:	4770      	bx	lr
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	e7dd      	b.n	8007f90 <floorf+0x34>
 8007fd4:	7149f2ca 	.word	0x7149f2ca
 8007fd8:	bf800000 	.word	0xbf800000
 8007fdc:	007fffff 	.word	0x007fffff

08007fe0 <scalbnf>:
 8007fe0:	ee10 3a10 	vmov	r3, s0
 8007fe4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8007fe8:	d025      	beq.n	8008036 <scalbnf+0x56>
 8007fea:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8007fee:	d302      	bcc.n	8007ff6 <scalbnf+0x16>
 8007ff0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007ff4:	4770      	bx	lr
 8007ff6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8007ffa:	d122      	bne.n	8008042 <scalbnf+0x62>
 8007ffc:	4b2a      	ldr	r3, [pc, #168]	; (80080a8 <scalbnf+0xc8>)
 8007ffe:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80080ac <scalbnf+0xcc>
 8008002:	4298      	cmp	r0, r3
 8008004:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008008:	db16      	blt.n	8008038 <scalbnf+0x58>
 800800a:	ee10 3a10 	vmov	r3, s0
 800800e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008012:	3a19      	subs	r2, #25
 8008014:	4402      	add	r2, r0
 8008016:	2afe      	cmp	r2, #254	; 0xfe
 8008018:	dd15      	ble.n	8008046 <scalbnf+0x66>
 800801a:	ee10 3a10 	vmov	r3, s0
 800801e:	eddf 7a24 	vldr	s15, [pc, #144]	; 80080b0 <scalbnf+0xd0>
 8008022:	eddf 6a24 	vldr	s13, [pc, #144]	; 80080b4 <scalbnf+0xd4>
 8008026:	2b00      	cmp	r3, #0
 8008028:	eeb0 7a67 	vmov.f32	s14, s15
 800802c:	bfb8      	it	lt
 800802e:	eef0 7a66 	vmovlt.f32	s15, s13
 8008032:	ee27 0a27 	vmul.f32	s0, s14, s15
 8008036:	4770      	bx	lr
 8008038:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80080b8 <scalbnf+0xd8>
 800803c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008040:	4770      	bx	lr
 8008042:	0dd2      	lsrs	r2, r2, #23
 8008044:	e7e6      	b.n	8008014 <scalbnf+0x34>
 8008046:	2a00      	cmp	r2, #0
 8008048:	dd06      	ble.n	8008058 <scalbnf+0x78>
 800804a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800804e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008052:	ee00 3a10 	vmov	s0, r3
 8008056:	4770      	bx	lr
 8008058:	f112 0f16 	cmn.w	r2, #22
 800805c:	da1a      	bge.n	8008094 <scalbnf+0xb4>
 800805e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008062:	4298      	cmp	r0, r3
 8008064:	ee10 3a10 	vmov	r3, s0
 8008068:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800806c:	dd0a      	ble.n	8008084 <scalbnf+0xa4>
 800806e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80080b0 <scalbnf+0xd0>
 8008072:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80080b4 <scalbnf+0xd4>
 8008076:	eef0 7a40 	vmov.f32	s15, s0
 800807a:	2b00      	cmp	r3, #0
 800807c:	bf18      	it	ne
 800807e:	eeb0 0a47 	vmovne.f32	s0, s14
 8008082:	e7db      	b.n	800803c <scalbnf+0x5c>
 8008084:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80080b8 <scalbnf+0xd8>
 8008088:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80080bc <scalbnf+0xdc>
 800808c:	eef0 7a40 	vmov.f32	s15, s0
 8008090:	2b00      	cmp	r3, #0
 8008092:	e7f3      	b.n	800807c <scalbnf+0x9c>
 8008094:	3219      	adds	r2, #25
 8008096:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800809a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800809e:	eddf 7a08 	vldr	s15, [pc, #32]	; 80080c0 <scalbnf+0xe0>
 80080a2:	ee07 3a10 	vmov	s14, r3
 80080a6:	e7c4      	b.n	8008032 <scalbnf+0x52>
 80080a8:	ffff3cb0 	.word	0xffff3cb0
 80080ac:	4c000000 	.word	0x4c000000
 80080b0:	7149f2ca 	.word	0x7149f2ca
 80080b4:	f149f2ca 	.word	0xf149f2ca
 80080b8:	0da24260 	.word	0x0da24260
 80080bc:	8da24260 	.word	0x8da24260
 80080c0:	33000000 	.word	0x33000000

080080c4 <_init>:
 80080c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080c6:	bf00      	nop
 80080c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080ca:	bc08      	pop	{r3}
 80080cc:	469e      	mov	lr, r3
 80080ce:	4770      	bx	lr

080080d0 <_fini>:
 80080d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080d2:	bf00      	nop
 80080d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080d6:	bc08      	pop	{r3}
 80080d8:	469e      	mov	lr, r3
 80080da:	4770      	bx	lr
