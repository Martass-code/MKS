
cviceni3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002e8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003a8  080003b0  000103b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003a8  080003a8  000103b0  2**0
                  CONTENTS
  4 .ARM          00000000  080003a8  080003a8  000103b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003a8  080003b0  000103b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003a8  080003a8  000103a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003ac  080003ac  000103ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003b0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003b0  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000103b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000634  00000000  00000000  000103d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002eb  00000000  00000000  00010a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000098  00000000  00000000  00010cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000060  00000000  00000000  00010d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000488a  00000000  00000000  00010df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000f22  00000000  00000000  0001567a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0001833b  00000000  00000000  0001659c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0002e8d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000f0  00000000  00000000  0002e92c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000390 	.word	0x08000390

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	08000390 	.word	0x08000390

08000108 <main>:

#include "sct.h"

//define

int main(void) {
 8000108:	b580      	push	{r7, lr}
 800010a:	af00      	add	r7, sp, #0

	sct_init();
 800010c:	f000 f808 	bl	8000120 <sct_init>

	sct_led(0x7A5C36DE);
 8000110:	4b02      	ldr	r3, [pc, #8]	; (800011c <main+0x14>)
 8000112:	0018      	movs	r0, r3
 8000114:	f000 f836 	bl	8000184 <sct_led>


	for (;;) {
 8000118:	e7fe      	b.n	8000118 <main+0x10>
 800011a:	46c0      	nop			; (mov r8, r8)
 800011c:	7a5c36de 	.word	0x7a5c36de

08000120 <sct_init>:
 *  Created on: 6. 10. 2021
 *      Author: Elias
 */
#include "sct.h"

void sct_init(void) {
 8000120:	b580      	push	{r7, lr}
 8000122:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN; // povoleni hodin portu B
 8000124:	4b15      	ldr	r3, [pc, #84]	; (800017c <sct_init+0x5c>)
 8000126:	695a      	ldr	r2, [r3, #20]
 8000128:	4b14      	ldr	r3, [pc, #80]	; (800017c <sct_init+0x5c>)
 800012a:	2180      	movs	r1, #128	; 0x80
 800012c:	02c9      	lsls	r1, r1, #11
 800012e:	430a      	orrs	r2, r1
 8000130:	615a      	str	r2, [r3, #20]
	//RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN; //povoleni hodin SYSCFG

	GPIOB->MODER |= GPIO_MODER_MODER5_0; // PB4 /LA  - output
 8000132:	4b13      	ldr	r3, [pc, #76]	; (8000180 <sct_init+0x60>)
 8000134:	681a      	ldr	r2, [r3, #0]
 8000136:	4b12      	ldr	r3, [pc, #72]	; (8000180 <sct_init+0x60>)
 8000138:	2180      	movs	r1, #128	; 0x80
 800013a:	00c9      	lsls	r1, r1, #3
 800013c:	430a      	orrs	r2, r1
 800013e:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= GPIO_MODER_MODER4_0; // PB5 SDI - output
 8000140:	4b0f      	ldr	r3, [pc, #60]	; (8000180 <sct_init+0x60>)
 8000142:	681a      	ldr	r2, [r3, #0]
 8000144:	4b0e      	ldr	r3, [pc, #56]	; (8000180 <sct_init+0x60>)
 8000146:	2180      	movs	r1, #128	; 0x80
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	430a      	orrs	r2, r1
 800014c:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= GPIO_MODER_MODER3_0; // PB3 CLK - output
 800014e:	4b0c      	ldr	r3, [pc, #48]	; (8000180 <sct_init+0x60>)
 8000150:	681a      	ldr	r2, [r3, #0]
 8000152:	4b0b      	ldr	r3, [pc, #44]	; (8000180 <sct_init+0x60>)
 8000154:	2140      	movs	r1, #64	; 0x40
 8000156:	430a      	orrs	r2, r1
 8000158:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= GPIO_MODER_MODER10_0; // PB6 /OE - output
 800015a:	4b09      	ldr	r3, [pc, #36]	; (8000180 <sct_init+0x60>)
 800015c:	681a      	ldr	r2, [r3, #0]
 800015e:	4b08      	ldr	r3, [pc, #32]	; (8000180 <sct_init+0x60>)
 8000160:	2180      	movs	r1, #128	; 0x80
 8000162:	0349      	lsls	r1, r1, #13
 8000164:	430a      	orrs	r2, r1
 8000166:	601a      	str	r2, [r3, #0]

	sct_led(0); //zapis 0 do posuvnych registru
 8000168:	2000      	movs	r0, #0
 800016a:	f000 f80b 	bl	8000184 <sct_led>

	sct_noe(0); //aktivovani vystupu /OE -aktivovani chipu (budou mozna videt duchove pri shiftovani)
 800016e:	4b04      	ldr	r3, [pc, #16]	; (8000180 <sct_init+0x60>)
 8000170:	2280      	movs	r2, #128	; 0x80
 8000172:	00d2      	lsls	r2, r2, #3
 8000174:	629a      	str	r2, [r3, #40]	; 0x28
	//for (volatile uint32_t i = 0; i < 1000; i++) {} //cekaci smycka - pro ustaleni pinu (asi neni potreba)
	//sct_noe(1);
}
 8000176:	46c0      	nop			; (mov r8, r8)
 8000178:	46bd      	mov	sp, r7
 800017a:	bd80      	pop	{r7, pc}
 800017c:	40021000 	.word	0x40021000
 8000180:	48000400 	.word	0x48000400

08000184 <sct_led>:


void sct_led(uint32_t value) {
 8000184:	b580      	push	{r7, lr}
 8000186:	b088      	sub	sp, #32
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]

	for (uint8_t i = 0; i < 32; i++) {	// nasunuti 32 bitu z value
 800018c:	231f      	movs	r3, #31
 800018e:	18fb      	adds	r3, r7, r3
 8000190:	2200      	movs	r2, #0
 8000192:	701a      	strb	r2, [r3, #0]
 8000194:	e041      	b.n	800021a <sct_led+0x96>

		uint8_t zapis_SDI = value & (1 << 0); //precteni LSB bitu
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	b2da      	uxtb	r2, r3
 800019a:	201e      	movs	r0, #30
 800019c:	183b      	adds	r3, r7, r0
 800019e:	2101      	movs	r1, #1
 80001a0:	400a      	ands	r2, r1
 80001a2:	701a      	strb	r2, [r3, #0]
		sct_sdi(zapis_SDI); //zapsani LSB bitu do SDI
 80001a4:	183b      	adds	r3, r7, r0
 80001a6:	781b      	ldrb	r3, [r3, #0]
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	d003      	beq.n	80001b4 <sct_led+0x30>
 80001ac:	4b2e      	ldr	r3, [pc, #184]	; (8000268 <sct_led+0xe4>)
 80001ae:	2210      	movs	r2, #16
 80001b0:	619a      	str	r2, [r3, #24]
 80001b2:	e002      	b.n	80001ba <sct_led+0x36>
 80001b4:	4b2c      	ldr	r3, [pc, #176]	; (8000268 <sct_led+0xe4>)
 80001b6:	2210      	movs	r2, #16
 80001b8:	629a      	str	r2, [r3, #40]	; 0x28
		value >>= 1; // bit shift do prava
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	085b      	lsrs	r3, r3, #1
 80001be:	607b      	str	r3, [r7, #4]

		for (volatile uint32_t i = 0; i < 1000; i++) {} //cekaci smycka - pro ustaleni pinu (asi neni potreba)
 80001c0:	2300      	movs	r3, #0
 80001c2:	61bb      	str	r3, [r7, #24]
 80001c4:	e002      	b.n	80001cc <sct_led+0x48>
 80001c6:	69bb      	ldr	r3, [r7, #24]
 80001c8:	3301      	adds	r3, #1
 80001ca:	61bb      	str	r3, [r7, #24]
 80001cc:	69ba      	ldr	r2, [r7, #24]
 80001ce:	23fa      	movs	r3, #250	; 0xfa
 80001d0:	009b      	lsls	r3, r3, #2
 80001d2:	429a      	cmp	r2, r3
 80001d4:	d3f7      	bcc.n	80001c6 <sct_led+0x42>

		sct_clk(1); // na nabeznou hranu se ovzorkuje z SDI a shiftnou se data
 80001d6:	4b24      	ldr	r3, [pc, #144]	; (8000268 <sct_led+0xe4>)
 80001d8:	2208      	movs	r2, #8
 80001da:	619a      	str	r2, [r3, #24]
		for (volatile uint32_t i = 0; i < 1000; i++) {} //cekaci smycka - pro ustaleni pinu (asi neni potreba)
 80001dc:	2300      	movs	r3, #0
 80001de:	617b      	str	r3, [r7, #20]
 80001e0:	e002      	b.n	80001e8 <sct_led+0x64>
 80001e2:	697b      	ldr	r3, [r7, #20]
 80001e4:	3301      	adds	r3, #1
 80001e6:	617b      	str	r3, [r7, #20]
 80001e8:	697a      	ldr	r2, [r7, #20]
 80001ea:	23fa      	movs	r3, #250	; 0xfa
 80001ec:	009b      	lsls	r3, r3, #2
 80001ee:	429a      	cmp	r2, r3
 80001f0:	d3f7      	bcc.n	80001e2 <sct_led+0x5e>
		sct_clk(0);
 80001f2:	4b1d      	ldr	r3, [pc, #116]	; (8000268 <sct_led+0xe4>)
 80001f4:	2208      	movs	r2, #8
 80001f6:	629a      	str	r2, [r3, #40]	; 0x28
		for (volatile uint32_t i = 0; i < 1000; i++) {} //cekaci smycka - pro ustaleni pinu (asi neni potreba)
 80001f8:	2300      	movs	r3, #0
 80001fa:	613b      	str	r3, [r7, #16]
 80001fc:	e002      	b.n	8000204 <sct_led+0x80>
 80001fe:	693b      	ldr	r3, [r7, #16]
 8000200:	3301      	adds	r3, #1
 8000202:	613b      	str	r3, [r7, #16]
 8000204:	693a      	ldr	r2, [r7, #16]
 8000206:	23fa      	movs	r3, #250	; 0xfa
 8000208:	009b      	lsls	r3, r3, #2
 800020a:	429a      	cmp	r2, r3
 800020c:	d3f7      	bcc.n	80001fe <sct_led+0x7a>
	for (uint8_t i = 0; i < 32; i++) {	// nasunuti 32 bitu z value
 800020e:	211f      	movs	r1, #31
 8000210:	187b      	adds	r3, r7, r1
 8000212:	781a      	ldrb	r2, [r3, #0]
 8000214:	187b      	adds	r3, r7, r1
 8000216:	3201      	adds	r2, #1
 8000218:	701a      	strb	r2, [r3, #0]
 800021a:	231f      	movs	r3, #31
 800021c:	18fb      	adds	r3, r7, r3
 800021e:	781b      	ldrb	r3, [r3, #0]
 8000220:	2b1f      	cmp	r3, #31
 8000222:	d9b8      	bls.n	8000196 <sct_led+0x12>

	}

	sct_nla(1); // zapis do vystupnich registru
 8000224:	4b10      	ldr	r3, [pc, #64]	; (8000268 <sct_led+0xe4>)
 8000226:	2220      	movs	r2, #32
 8000228:	619a      	str	r2, [r3, #24]
	for (volatile uint32_t i = 0; i < 1000; i++) {} //cekaci smycka - pro ustaleni pinu (asi neni potreba)
 800022a:	2300      	movs	r3, #0
 800022c:	60fb      	str	r3, [r7, #12]
 800022e:	e002      	b.n	8000236 <sct_led+0xb2>
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	3301      	adds	r3, #1
 8000234:	60fb      	str	r3, [r7, #12]
 8000236:	68fa      	ldr	r2, [r7, #12]
 8000238:	23fa      	movs	r3, #250	; 0xfa
 800023a:	009b      	lsls	r3, r3, #2
 800023c:	429a      	cmp	r2, r3
 800023e:	d3f7      	bcc.n	8000230 <sct_led+0xac>
	sct_nla(0);
 8000240:	4b09      	ldr	r3, [pc, #36]	; (8000268 <sct_led+0xe4>)
 8000242:	2220      	movs	r2, #32
 8000244:	629a      	str	r2, [r3, #40]	; 0x28

	for (volatile uint32_t i = 0; i < 1000; i++) {} //cekaci smycka - pro ustaleni pinu (asi neni potreba)
 8000246:	2300      	movs	r3, #0
 8000248:	60bb      	str	r3, [r7, #8]
 800024a:	e002      	b.n	8000252 <sct_led+0xce>
 800024c:	68bb      	ldr	r3, [r7, #8]
 800024e:	3301      	adds	r3, #1
 8000250:	60bb      	str	r3, [r7, #8]
 8000252:	68ba      	ldr	r2, [r7, #8]
 8000254:	23fa      	movs	r3, #250	; 0xfa
 8000256:	009b      	lsls	r3, r3, #2
 8000258:	429a      	cmp	r2, r3
 800025a:	d3f7      	bcc.n	800024c <sct_led+0xc8>
	//for (volatile uint32_t i = 0; i < 1000; i++) {} //cekaci smycka - pro ustaleni pinu (asi neni potreba)
	//sct_noe(1);
	//for (volatile uint32_t i = 0; i < 10000; i++) {} //cekaci smycka - pro ustaleni pinu (asi neni potreba)


}
 800025c:	46c0      	nop			; (mov r8, r8)
 800025e:	46c0      	nop			; (mov r8, r8)
 8000260:	46bd      	mov	sp, r7
 8000262:	b008      	add	sp, #32
 8000264:	bd80      	pop	{r7, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	48000400 	.word	0x48000400

0800026c <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000270:	4b1a      	ldr	r3, [pc, #104]	; (80002dc <SystemInit+0x70>)
 8000272:	681a      	ldr	r2, [r3, #0]
 8000274:	4b19      	ldr	r3, [pc, #100]	; (80002dc <SystemInit+0x70>)
 8000276:	2101      	movs	r1, #1
 8000278:	430a      	orrs	r2, r1
 800027a:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800027c:	4b17      	ldr	r3, [pc, #92]	; (80002dc <SystemInit+0x70>)
 800027e:	685a      	ldr	r2, [r3, #4]
 8000280:	4b16      	ldr	r3, [pc, #88]	; (80002dc <SystemInit+0x70>)
 8000282:	4917      	ldr	r1, [pc, #92]	; (80002e0 <SystemInit+0x74>)
 8000284:	400a      	ands	r2, r1
 8000286:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000288:	4b14      	ldr	r3, [pc, #80]	; (80002dc <SystemInit+0x70>)
 800028a:	681a      	ldr	r2, [r3, #0]
 800028c:	4b13      	ldr	r3, [pc, #76]	; (80002dc <SystemInit+0x70>)
 800028e:	4915      	ldr	r1, [pc, #84]	; (80002e4 <SystemInit+0x78>)
 8000290:	400a      	ands	r2, r1
 8000292:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000294:	4b11      	ldr	r3, [pc, #68]	; (80002dc <SystemInit+0x70>)
 8000296:	681a      	ldr	r2, [r3, #0]
 8000298:	4b10      	ldr	r3, [pc, #64]	; (80002dc <SystemInit+0x70>)
 800029a:	4913      	ldr	r1, [pc, #76]	; (80002e8 <SystemInit+0x7c>)
 800029c:	400a      	ands	r2, r1
 800029e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 80002a0:	4b0e      	ldr	r3, [pc, #56]	; (80002dc <SystemInit+0x70>)
 80002a2:	685a      	ldr	r2, [r3, #4]
 80002a4:	4b0d      	ldr	r3, [pc, #52]	; (80002dc <SystemInit+0x70>)
 80002a6:	4911      	ldr	r1, [pc, #68]	; (80002ec <SystemInit+0x80>)
 80002a8:	400a      	ands	r2, r1
 80002aa:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80002ac:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <SystemInit+0x70>)
 80002ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80002b0:	4b0a      	ldr	r3, [pc, #40]	; (80002dc <SystemInit+0x70>)
 80002b2:	210f      	movs	r1, #15
 80002b4:	438a      	bics	r2, r1
 80002b6:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEEC;
 80002b8:	4b08      	ldr	r3, [pc, #32]	; (80002dc <SystemInit+0x70>)
 80002ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80002bc:	4b07      	ldr	r3, [pc, #28]	; (80002dc <SystemInit+0x70>)
 80002be:	490c      	ldr	r1, [pc, #48]	; (80002f0 <SystemInit+0x84>)
 80002c0:	400a      	ands	r2, r1
 80002c2:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <SystemInit+0x70>)
 80002c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80002c8:	4b04      	ldr	r3, [pc, #16]	; (80002dc <SystemInit+0x70>)
 80002ca:	2101      	movs	r1, #1
 80002cc:	438a      	bics	r2, r1
 80002ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80002d0:	4b02      	ldr	r3, [pc, #8]	; (80002dc <SystemInit+0x70>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	609a      	str	r2, [r3, #8]

}
 80002d6:	46c0      	nop			; (mov r8, r8)
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	40021000 	.word	0x40021000
 80002e0:	08ffb80c 	.word	0x08ffb80c
 80002e4:	fef6ffff 	.word	0xfef6ffff
 80002e8:	fffbffff 	.word	0xfffbffff
 80002ec:	ffc0ffff 	.word	0xffc0ffff
 80002f0:	fffffeec 	.word	0xfffffeec

080002f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002f4:	480d      	ldr	r0, [pc, #52]	; (800032c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002f6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002f8:	f7ff ffb8 	bl	800026c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002fc:	480c      	ldr	r0, [pc, #48]	; (8000330 <LoopForever+0x6>)
  ldr r1, =_edata
 80002fe:	490d      	ldr	r1, [pc, #52]	; (8000334 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000300:	4a0d      	ldr	r2, [pc, #52]	; (8000338 <LoopForever+0xe>)
  movs r3, #0
 8000302:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000304:	e002      	b.n	800030c <LoopCopyDataInit>

08000306 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000306:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000308:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800030a:	3304      	adds	r3, #4

0800030c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800030c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800030e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000310:	d3f9      	bcc.n	8000306 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000312:	4a0a      	ldr	r2, [pc, #40]	; (800033c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000314:	4c0a      	ldr	r4, [pc, #40]	; (8000340 <LoopForever+0x16>)
  movs r3, #0
 8000316:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000318:	e001      	b.n	800031e <LoopFillZerobss>

0800031a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800031a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800031c:	3204      	adds	r2, #4

0800031e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800031e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000320:	d3fb      	bcc.n	800031a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000322:	f000 f811 	bl	8000348 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000326:	f7ff feef 	bl	8000108 <main>

0800032a <LoopForever>:

LoopForever:
    b LoopForever
 800032a:	e7fe      	b.n	800032a <LoopForever>
  ldr   r0, =_estack
 800032c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000334:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000338:	080003b0 	.word	0x080003b0
  ldr r2, =_sbss
 800033c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000340:	2000001c 	.word	0x2000001c

08000344 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000344:	e7fe      	b.n	8000344 <ADC_IRQHandler>
	...

08000348 <__libc_init_array>:
 8000348:	b570      	push	{r4, r5, r6, lr}
 800034a:	2600      	movs	r6, #0
 800034c:	4d0c      	ldr	r5, [pc, #48]	; (8000380 <__libc_init_array+0x38>)
 800034e:	4c0d      	ldr	r4, [pc, #52]	; (8000384 <__libc_init_array+0x3c>)
 8000350:	1b64      	subs	r4, r4, r5
 8000352:	10a4      	asrs	r4, r4, #2
 8000354:	42a6      	cmp	r6, r4
 8000356:	d109      	bne.n	800036c <__libc_init_array+0x24>
 8000358:	2600      	movs	r6, #0
 800035a:	f000 f819 	bl	8000390 <_init>
 800035e:	4d0a      	ldr	r5, [pc, #40]	; (8000388 <__libc_init_array+0x40>)
 8000360:	4c0a      	ldr	r4, [pc, #40]	; (800038c <__libc_init_array+0x44>)
 8000362:	1b64      	subs	r4, r4, r5
 8000364:	10a4      	asrs	r4, r4, #2
 8000366:	42a6      	cmp	r6, r4
 8000368:	d105      	bne.n	8000376 <__libc_init_array+0x2e>
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	00b3      	lsls	r3, r6, #2
 800036e:	58eb      	ldr	r3, [r5, r3]
 8000370:	4798      	blx	r3
 8000372:	3601      	adds	r6, #1
 8000374:	e7ee      	b.n	8000354 <__libc_init_array+0xc>
 8000376:	00b3      	lsls	r3, r6, #2
 8000378:	58eb      	ldr	r3, [r5, r3]
 800037a:	4798      	blx	r3
 800037c:	3601      	adds	r6, #1
 800037e:	e7f2      	b.n	8000366 <__libc_init_array+0x1e>
 8000380:	080003a8 	.word	0x080003a8
 8000384:	080003a8 	.word	0x080003a8
 8000388:	080003a8 	.word	0x080003a8
 800038c:	080003ac 	.word	0x080003ac

08000390 <_init>:
 8000390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000392:	46c0      	nop			; (mov r8, r8)
 8000394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000396:	bc08      	pop	{r3}
 8000398:	469e      	mov	lr, r3
 800039a:	4770      	bx	lr

0800039c <_fini>:
 800039c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800039e:	46c0      	nop			; (mov r8, r8)
 80003a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003a2:	bc08      	pop	{r3}
 80003a4:	469e      	mov	lr, r3
 80003a6:	4770      	bx	lr
